{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ads/_a4a-config.js","ads/_config.js","ads/google/a4a/experiment-utils.js","ads/google/a4a/traffic-experiments.js","ads/google/a4a/url-builder.js","ads/google/a4a/utils.js","build/amp-ad-0.1.css.js","extensions/amp-ad-network-adsense-impl/0.1/adsense-a4a-config.js","extensions/amp-ad-network-cloudflare-impl/0.1/cloudflare-a4a-config.js","extensions/amp-ad-network-gmossp-impl/0.1/gmossp-a4a-config.js","extensions/amp-ad-network-triplelift-impl/0.1/triplelift-a4a-config.js","extensions/amp-ad/0.1/amp-ad-3p-impl.js","extensions/amp-ad/0.1/amp-ad-custom.js","extensions/amp-ad/0.1/amp-ad-ui.js","extensions/amp-ad/0.1/amp-ad-xorigin-iframe-handler.js","extensions/amp-ad/0.1/amp-ad.js","extensions/amp-ad/0.1/concurrent-load.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/3p-frame-messaging.js","src/3p-frame.js","src/ad-cid.js","src/ad-helper.js","src/amp-events.js","src/analytics.js","src/common-signals.js","src/config.js","src/consent-state.js","src/consent.js","src/cookies.js","src/dom.js","src/element-service.js","src/error.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/exponential-backoff.js","src/get-html.js","src/iframe-attributes.js","src/iframe-helper.js","src/intersection-observer.js","src/json.js","src/layout-rect.js","src/layout.js","src/log.js","src/mode-object.js","src/mode.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/render-delaying-services.js","src/service.js","src/service/variable-source.js","src/services.js","src/static-template.js","src/string.js","src/style-installer.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/array.js","src/utils/dom-fingerprint.js","src/utils/lru-cache.js","src/utils/math.js","src/utils/object.js","src/utils/promise.js","src/utils/rate-limit.js","third_party/css-escape/css-escape.js"],"names":[],"mappings":"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","file":"amp-ad-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  adsenseIsA4AEnabled,\n} from '../extensions/amp-ad-network-adsense-impl/0.1/adsense-a4a-config';\nimport {\n  cloudflareIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-cloudflare-impl/0.1/cloudflare-a4a-config';\nimport {\n  gmosspIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-gmossp-impl/0.1/gmossp-a4a-config';\nimport {map} from '../src/utils/object';\nimport {\n  tripleliftIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-triplelift-impl/0.1/triplelift-a4a-config';\n\n/**\n * Registry for A4A (AMP Ads for AMPHTML pages) \"is supported\" predicates.\n * If an ad network, {@code ${NETWORK}}, is registered in this object, then the\n * {@code <amp-ad type=\"${NETWORK}\">} implementation will look up its predicate\n * here. If there is a predicate and it and returns {@code true}, then\n * {@code amp-ad} will attempt to render the ad via the A4A pathway (fetch\n * ad creative via early XHR CORS request; verify that it is validated AMP;\n * and then render directly in the host page by splicing into the host DOM).\n * Otherwise, it will attempt to render the ad via the existing \"3p iframe\"\n * pathway (delay load into a cross-domain iframe).\n *\n * @type {!Object<string, function(!Window, !Element): boolean>}\n */\nlet a4aRegistry;\n\n/**\n * Returns the a4a registry map\n * @return {Object}\n */\nexport function getA4ARegistry() {\n  if (!a4aRegistry) {\n    a4aRegistry = map({\n      'adsense': adsenseIsA4AEnabled,\n      'adzerk': () => true,\n      'doubleclick': () => true,\n      'triplelift': tripleliftIsA4AEnabled,\n      'cloudflare': cloudflareIsA4AEnabled,\n      'gmossp': gmosspIsA4AEnabled,\n      'fake': () => true,\n      // TODO: Add new ad network implementation \"is enabled\" functions here.\n      // Note: if you add a function here that requires a new \"import\", above,\n      // you'll probably also need to add a whitelist exception to\n      // build-system/dep-check-config.js in the \"filesMatching: 'ads/**/*.js'\n      // rule.\n    });\n  }\n\n  return a4aRegistry;\n}\n\n/**\n * An object mapping signing server names to their corresponding URLs.\n * @type {!Object<string, string>}\n */\nexport const signingServerURLs = {\n  'google': 'https://cdn.ampproject.org/amp-ad-verifying-keyset.json',\n  'google-dev': 'https://cdn.ampproject.org/amp-ad-verifying-keyset-dev.json',\n  'cloudflare': 'https://amp.cloudflare.com/amp-ad-verifying-keyset.json',\n  'cloudflare-dev': 'https://amp.cloudflare.com/amp-ad-verifying-keyset-dev.json',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   prefetch: (string|undefined),\n *   preconnect: (string|undefined),\n *   renderStartImplemented: (boolean|undefined),\n *   clientIdScope: (string|undefined),\n *   clientIdCookieName: (string|undefined),\n *   consentHandlingOverride: (boolean|undefined),\n *   remoteHTMLDisabled: (boolean|undefined),\n *   fullWidthHeightRatio: (number|undefined),\n * }}\n */\nlet AdNetworkConfigDef;\n\n/**\n * The config of each ad network.\n * Please keep the list alphabetic order.\n *\n * yourNetworkName: {  // This is the \"type\" attribute of <amp-ad>\n *\n *   // List of URLs for prefetch\n *   prefetch: string|array\n *\n *   // List of hosts for preconnect\n *   preconnect: string|array\n *\n *   // The scope used to provide CIDs to ads\n *   clientIdScope: string\n *\n *   // The cookie name to store the CID. In absence, `clientIdScope` is used.\n *   clientIdCookieName: string\n *\n *   // If the ad network is willing to override the consent handling, which\n *   // by default is blocking ad load until the consent is accepted.\n *   consentHandlingOverride: boolean\n *\n *   // Whether render-start API has been implemented\n *   // We highly recommend all networks to implement the API,\n *   // see details in the README.md\n *   renderStartImplemented: boolean\n *\n *   // The width / height ratio for full width ad units.\n *   // If absent, it means the network does not support full width ad units.\n *   // Example value: 1.2\n *   fullWidthHeightRatio: number\n * }\n *\n * @const {!Object<string, !AdNetworkConfigDef>}}\n */\nexport const adConfig = {\n  '_ping_': {\n    renderStartImplemented: true,\n    clientIdScope: '_PING_',\n    consentHandlingOverride: true,\n  },\n\n  '24smi': {\n    prefetch: 'https://jsn.24smi.net/smi.js',\n    preconnect: 'https://data.24smi.net',\n  },\n\n  'a8': {\n    prefetch: 'https://statics.a8.net/amp/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'a9': {\n    prefetch: 'https://c.amazon-adsystem.com/aax2/assoc.js',\n  },\n\n  'accesstrade': {\n    prefetch: 'https://h.accesstrade.net/js/amp/amp.js',\n  },\n\n  'adagio': {\n    prefetch: 'https://js-ssl.neodatagroup.com/adagio_amp.js',\n    preconnect: [\n      'https://ad-aws-it.neodatagroup.com',\n      'https://tracker.neodatagroup.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adblade': {\n    prefetch: 'https://web.adblade.com/js/ads/async/show.js',\n    preconnect: [\n      'https://staticd.cdn.adblade.com',\n      'https://static.adblade.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adbutler': {\n    prefetch: 'https://servedbyadbutler.com/app.js',\n  },\n\n  'adform': {},\n\n  'adfox': {\n    prefetch: 'https://yastatic.net/pcode/adfox/loader.js',\n    renderStartImplemented: true,\n  },\n\n  'adgeneration': {\n    prefetch: 'https://i.socdm.com/sdk/js/adg-script-loader.js',\n  },\n\n  'adhese': {\n    renderStartImplemented: true,\n  },\n\n  'adincube': {\n    renderStartImplemented: true,\n  },\n\n  'adition': {},\n\n  'adman': {},\n\n  'admanmedia': {\n    renderStartImplemented: true,\n  },\n\n  'admixer': {\n    renderStartImplemented: true,\n    preconnect: [\n      'https://inv-nets.admixer.net',\n      'https://cdn.admixer.net',\n    ],\n  },\n\n  'adocean': {},\n\n  'adpicker': {\n    renderStartImplemented: true,\n  },\n\n  'adplugg': {\n    prefetch: 'https://www.adplugg.com/serve/js/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'adreactor': {},\n\n  'adsense': {\n    prefetch: 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js',\n    preconnect: 'https://googleads.g.doubleclick.net',\n    clientIdScope: 'AMP_ECID_GOOGLE',\n    clientIdCookieName: '_ga',\n    remoteHTMLDisabled: true,\n    masterFrameAccessibleType: 'google_network',\n    fullWidthHeightRatio: 1.2,\n    consentHandlingOverride: true,\n  },\n\n  'adsnative': {\n    prefetch: 'https://static.adsnative.com/static/js/render.v1.js',\n    preconnect: 'https://api.adsnative.com',\n  },\n\n  'adspeed': {\n    preconnect: 'https://g.adspeed.net',\n    renderStartImplemented: true,\n  },\n\n  'adspirit': {},\n\n  'adstir': {\n    prefetch: 'https://js.ad-stir.com/js/adstir_async.js',\n    preconnect: 'https://ad.ad-stir.com',\n  },\n\n  'adtech': {\n    prefetch: 'https://s.aolcdn.com/os/ads/adsWrapper3.js',\n    preconnect: [\n      'https://mads.at.atwola.com',\n      'https://aka-cdn.adtechus.com',\n    ],\n  },\n\n  'adthrive': {\n    prefetch: [\n      'https://www.googletagservices.com/tag/js/gpt.js',\n    ],\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adunity': {\n    preconnect: [\n      'https://content.adunity.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'aduptech': {\n    prefetch: 'https://s.d.adup-tech.com/jsapi',\n    preconnect: [\n      'https://d.adup-tech.com',\n      'https://m.adup-tech.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adventive': {\n    preconnect: [\n      'https://ads.adventive.com',\n      'https://amp.adventivedev.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adverline': {\n    prefetch: 'https://ads.adverline.com/richmedias/amp.js',\n    preconnect: [\n      'https://adnext.fr',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adverticum': {},\n\n  'advertserve': {\n    renderStartImplemented: true,\n  },\n\n  'adzerk': {},\n\n  'affiliateb': {\n    prefetch: 'https://track.affiliate-b.com/amp/a.js',\n    renderStartImplemented: true,\n  },\n\n  'aja': {\n    renderStartImplemented: true,\n    prefetch: 'https://cdn.as.amanad.adtdp.com/sdk/asot-v2.js',\n  },\n\n  'appvador': {\n    prefetch: [\n      'https://cdn.apvdr.com/js/VastAdUnit.min.js',\n      'https://cdn.apvdr.com/js/VideoAd.min.js',\n      'https://cdn.apvdr.com/js/VideoAd3PAS.min.js',\n      'https://cdn.apvdr.com/js/VideoAdAutoPlay.min.js',\n      'https://cdn.apvdr.com/js/VideoAdNative.min.js',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'amoad': {\n    prefetch: [\n      'https://j.amoad.com/js/a.js',\n      'https://j.amoad.com/js/n.js',\n    ],\n    preconnect: [\n      'https://d.amoad.com',\n      'https://i.amoad.com',\n      'https://m.amoad.com',\n      'https://v.amoad.com',\n    ],\n  },\n\n  'appnexus': {\n    prefetch: 'https://acdn.adnxs.com/ast/ast.js',\n    preconnect: 'https://ib.adnxs.com',\n    renderStartImplemented: true,\n  },\n\n  'atomx': {\n    prefetch: 'https://s.ato.mx/p.js',\n  },\n\n  'beopinion': {\n    prefetch: 'https://widget.beopinion.com/sdk.js',\n    preconnect: [\n      'https://t.beopinion.com',\n      'https://s.beopinion.com',\n      'https://data.beopinion.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'bidtellect': {},\n\n  'brainy': {},\n\n  'bringhub': {\n    renderStartImplemented: true,\n    preconnect: [\n      'https://static.bh-cdn.com',\n      'https://core-api.bringhub.io',\n    ],\n  },\n\n  'broadstreetads': {\n    prefetch: 'https://cdn.broadstreetads.com/init-2.min.js',\n  },\n\n  'caajainfeed': {\n    prefetch: [\n      'https://cdn.amanad.adtdp.com/sdk/ajaamp.js',\n    ],\n    preconnect: [\n      'https://ad.amanad.adtdp.com',\n    ],\n  },\n\n  'capirs': {\n    renderStartImplemented: true,\n  },\n\n  'caprofitx': {\n    prefetch: [\n      'https://cdn.caprofitx.com/pfx.min.js',\n      'https://cdn.caprofitx.com/tags/amp/profitx_amp.js',\n    ],\n    preconnect: 'https://ad.caprofitx.adtdp.com',\n  },\n\n  'cedato': {\n    renderStartImplemented: true,\n  },\n\n  'chargeads': {},\n\n  'colombia': {\n    prefetch: 'https://static.clmbtech.com/ad/commons/js/colombia-amp.js',\n  },\n\n  'connatix': {\n    renderStartImplemented: true,\n  },\n\n  'contentad': {},\n\n\n  'criteo': {\n    prefetch: 'https://static.criteo.net/js/ld/publishertag.js',\n    preconnect: 'https://cas.criteo.com',\n  },\n\n  'csa': {\n    prefetch: 'https://www.google.com/adsense/search/ads.js',\n  },\n\n  'dable': {\n    preconnect: [\n      'https://static.dable.io',\n      'https://api.dable.io',\n      'https://images.dable.io',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'directadvert': {\n    renderStartImplemented: true,\n  },\n\n  'distroscale': {\n    preconnect: [\n      'https://c.jsrdn.com',\n      'https://s.jsrdn.com',\n      'https://i.jsrdn.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'dotandads': {\n    prefetch: 'https://amp.ad.dotandad.com/dotandadsAmp.js',\n    preconnect: 'https://bal.ad.dotandad.com',\n  },\n\n  'eadv': {\n    renderStartImplemented: true,\n    clientIdScope: 'AMP_ECID_EADV',\n    prefetch: [\n      'https://www.eadv.it/track/esr.min.js',\n      'https://www.eadv.it/track/ead.min.js',\n    ],\n  },\n\n  'eas': {\n    prefetch: 'https://amp.emediate.eu/amp.v0.js',\n    renderStartImplemented: true,\n  },\n\n  'engageya': {},\n\n  'epeex': {},\n\n  'eplanning': {\n    prefetch: 'https://us.img.e-planning.net/layers/epl-amp.js',\n  },\n\n  'ezoic': {\n    prefetch: [\n      'https://www.googletagservices.com/tag/js/gpt.js',\n      'https://g.ezoic.net/ezoic/ampad.js',\n    ],\n    clientIdScope: 'AMP_ECID_EZOIC',\n    consentHandlingOverride: true,\n  },\n\n  'f1e': {\n    prefetch: 'https://img.ak.impact-ad.jp/util/f1e_amp.min.js',\n  },\n\n  'f1h': {\n    preconnect: 'https://img.ak.impact-ad.jp',\n    renderStartImplemented: true,\n  },\n\n  'fake': {},\n\n  'felmat': {\n    prefetch: 'https://t.felmat.net/js/fmamp.js',\n    renderStartImplemented: true,\n  },\n\n  'flite': {},\n\n  'fluct': {\n    preconnect: [\n      'https://cdn-fluct.sh.adingo.jp',\n      'https://s.sh.adingo.jp',\n      'https://i.adingo.jp',\n    ],\n  },\n\n  'fusion': {\n    prefetch: 'https://assets.adtomafusion.net/fusion/latest/fusion-amp.min.js',\n  },\n\n  'genieessp': {\n    prefetch: 'https://js.gsspcln.jp/l/amp.js',\n  },\n\n  'giraff': {\n    renderStartImplemented: true,\n  },\n\n  'gmossp': {\n    prefetch: 'https://cdn.gmossp-sp.jp/ads/amp.js',\n  },\n\n  'gumgum': {\n    prefetch: 'https://g2.gumgum.com/javascripts/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'holder': {\n    prefetch: 'https://i.holder.com.ua/js2/holder/ajax/ampv1.js',\n    preconnect: 'https://h.holder.com.ua',\n    renderStartImplemented: true,\n  },\n\n  'ibillboard': {},\n\n  'imedia': {\n    prefetch: 'https://i.imedia.cz/js/im3.js',\n    renderStartImplemented: true,\n  },\n\n  'imobile': {\n    prefetch: 'https://spamp.i-mobile.co.jp/script/amp.js',\n    preconnect: 'https://spad.i-mobile.co.jp',\n  },\n  'imonomy': {\n    renderStartImplemented: true,\n  },\n  'improvedigital': {},\n\n  'industrybrains': {\n    prefetch: 'https://web.industrybrains.com/js/ads/async/show.js',\n    preconnect: [\n      'https://staticd.cdn.industrybrains.com',\n      'https://static.industrybrains.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'inmobi': {\n    prefetch: 'https://cf.cdn.inmobi.com/ad/inmobi.secure.js',\n    renderStartImplemented: true,\n  },\n\n  'innity': {\n    prefetch: 'https://cdn.innity.net/admanager.js',\n    preconnect: 'https://as.innity.com',\n    renderStartImplemented: true,\n  },\n\n  'ix': {\n    prefetch: [\n      'https://js-sec.indexww.com/apl/amp.js',\n    ],\n    preconnect: 'https://as-sec.casalemedia.com',\n    renderStartImplemented: true,\n  },\n\n  'kargo': {},\n\n  'kiosked': {\n    renderStartImplemented: true,\n  },\n\n  'kixer': {\n    prefetch: 'https://cdn.kixer.com/ad/load.js',\n    renderStartImplemented: true,\n  },\n\n  'kuadio': {},\n\n  'ligatus': {\n    prefetch: 'https://ssl.ligatus.com/render/ligrend.js',\n    renderStartImplemented: true,\n  },\n\n  'lockerdome': {\n    prefetch: 'https://cdn2.lockerdomecdn.com/_js/amp.js',\n    renderStartImplemented: true,\n  },\n\n  'loka': {\n    prefetch: 'https://loka-cdn.akamaized.net/scene/amp.js',\n    preconnect: [\n      'https://scene-front.lokaplatform.com',\n      'https://loka-materials.akamaized.net',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'mads': {\n    prefetch: 'https://eu2.madsone.com/js/tags.js',\n  },\n\n  'mantis-display': {\n    prefetch: 'https://assets.mantisadnetwork.com/mantodea.min.js',\n    preconnect: [\n      'https://mantodea.mantisadnetwork.com',\n      'https://res.cloudinary.com',\n      'https://resize.mantisadnetwork.com',\n    ],\n  },\n\n  'mantis-recommend': {\n    prefetch: 'https://assets.mantisadnetwork.com/recommend.min.js',\n    preconnect: [\n      'https://mantodea.mantisadnetwork.com',\n      'https://resize.mantisadnetwork.com',\n    ],\n  },\n\n  'mediaimpact': {\n    prefetch: 'https://ec-ns.sascdn.com/diff/251/pages/amp_default.js',\n    preconnect: [\n      'https://ww251.smartadserver.com',\n      'https://static.sascdn.com/',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'medianet': {\n    preconnect: 'https://contextual.media.net',\n    renderStartImplemented: true,\n  },\n\n  'mediavine': {\n    prefetch: 'https://amp.mediavine.com/wrapper.min.js',\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n    consentHandlingOverride: true,\n  },\n\n  'medyanet': {\n    renderStartImplemented: true,\n  },\n\n  'meg': {\n    renderStartImplemented: true,\n  },\n\n  'microad': {\n    prefetch: 'https://j.microad.net/js/camp.js',\n    preconnect: [\n      'https://s-rtb.send.microad.jp',\n      'https://s-rtb.send.microadinc.com',\n      'https://cache.send.microad.jp',\n      'https://cache.send.microadinc.com',\n      'https://deb.send.microad.jp',\n    ],\n  },\n\n  'miximedia': {\n    renderStartImplemented: true,\n  },\n\n  'mixpo': {\n    prefetch: 'https://cdn.mixpo.com/js/loader.js',\n    preconnect: [\n      'https://player1.mixpo.com',\n      'https://player2.mixpo.com',\n    ],\n  },\n\n  'monetizer101': {\n    renderStartImplemented: true,\n  },\n\n  'mytarget': {\n    prefetch: 'https://ad.mail.ru/static/ads-async.js',\n    renderStartImplemented: true,\n  },\n\n  'mywidget': {\n    preconnect: 'https://likemore-fe.go.mail.ru',\n    prefetch: 'https://likemore-go.imgsmail.ru/widget_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'nativo': {\n    prefetch: 'https://s.ntv.io/serve/load.js',\n  },\n\n  'navegg': {\n    renderStartImplemented: true,\n  },\n\n  'nend': {\n    prefetch: 'https://js1.nend.net/js/amp.js',\n    preconnect: [\n      'https://output.nend.net',\n      'https://img1.nend.net',\n    ],\n  },\n\n  'netletix': {\n    preconnect: [\n      'https://call.netzathleten-media.de',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'noddus': {\n    prefetch: 'https://noddus.com/amp_loader.js',\n    renderStartImplemented: true,\n  },\n\n  'nokta': {\n    prefetch: 'https://static.virgul.com/theme/mockups/noktaamp/ampjs.js',\n    renderStartImplemented: true,\n  },\n\n  'openadstream': {},\n\n  'openx': {\n    prefetch: 'https://www.googletagservices.com/tag/js/gpt.js',\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'outbrain': {\n    renderStartImplemented: true,\n    prefetch: 'https://widgets.outbrain.com/widgetAMP/outbrainAMP.min.js',\n    preconnect: [\n      'https://odb.outbrain.com',\n    ],\n    consentHandlingOverride: true,\n  },\n\n  'pixels': {\n    prefetch: 'https://cdn.adsfactor.net/amp/pixels-amp.min.js',\n    clientIdCookieName: '__AF',\n    renderStartImplemented: true,\n  },\n\n  'plista': {},\n\n  'polymorphicads': {\n    prefetch: 'https://www.polymorphicads.jp/js/amp.js',\n    preconnect: [\n      'https://img.polymorphicads.jp',\n      'https://ad.polymorphicads.jp',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'popin': {\n    renderStartImplemented: true,\n  },\n\n  'postquare': {},\n\n  'pubexchange': {},\n\n  'pubguru': {\n    renderStartImplemented: true,\n  },\n\n  'pubmatic': {\n    prefetch: 'https://ads.pubmatic.com/AdServer/js/amp.js',\n  },\n\n  'pubmine': {\n    prefetch: [\n      'https://s.pubmine.com/head.js',\n      'https://s.pubmine.com/showad.js',\n    ],\n    preconnect: 'https://delivery.g.switchadhub.com',\n    renderStartImplemented: true,\n  },\n\n  'pulsepoint': {\n    prefetch: 'https://ads.contextweb.com/TagPublish/getjs.static.js',\n    preconnect: 'https://tag.contextweb.com',\n  },\n\n  'purch': {\n    prefetch: 'https://ramp.purch.com/serve/creative_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'quoraad': {\n    prefetch: 'https://a.quora.com/amp_ad.js',\n    preconnect: 'https://ampad.quora.com',\n    renderStartImplemented: true,\n  },\n\n  'realclick': {\n    renderStartImplemented: true,\n  },\n\n  'relap': {\n    renderStartImplemented: true,\n  },\n\n  'revcontent': {\n    prefetch: 'https://labs-cdn.revcontent.com/build/amphtml/revcontent.amp.min.js',\n    preconnect: [\n      'https://trends.revcontent.com',\n      'https://cdn.revcontent.com',\n      'https://img.revcontent.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'revjet': {\n    prefetch: 'https://cdn.revjet.com/~cdn/JS/03/amp.js',\n    renderStartImplemented: true,\n  },\n\n  'rubicon': {},\n\n  'sekindo': {\n    renderStartImplemented: true,\n  },\n\n  'sharethrough': {\n    renderStartImplemented: true,\n  },\n\n  'sklik': {\n    prefetch: 'https://c.imedia.cz/js/amp.js',\n  },\n\n  'slimcutmedia': {\n    preconnect: [\n      'https://sb.freeskreen.com',\n      'https://static.freeskreen.com',\n      'https://video.freeskreen.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'smartadserver': {\n    prefetch: 'https://ec-ns.sascdn.com/diff/js/amp.v0.js',\n    preconnect: 'https://static.sascdn.com',\n    renderStartImplemented: true,\n  },\n\n  'smartclip': {\n    prefetch: 'https://cdn.smartclip.net/amp/amp.v0.js',\n    preconnect: 'https://des.smartclip.net',\n    renderStartImplemented: true,\n  },\n\n  'smi2': {\n    renderStartImplemented: true,\n  },\n\n  'sogouad': {\n    prefetch: 'https://theta.sogoucdn.com/wap/js/aw.js',\n    renderStartImplemented: true,\n  },\n\n  'sortable': {\n    prefetch: 'https://www.googletagservices.com/tag/js/gpt.js',\n    preconnect: [\n      'https://tags-cdn.deployads.com',\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'sovrn': {\n    prefetch: 'https://ap.lijit.com/www/sovrn_amp/sovrn_ads.js',\n  },\n\n  'spotx': {\n    preconnect: 'https://js.spotx.tv',\n    renderStartImplemented: true,\n  },\n\n  'sunmedia': {\n    prefetch: 'https://vod.addevweb.com/sunmedia/amp/ads/sunmedia.js',\n    preconnect: 'https://static.addevweb.com',\n    renderStartImplemented: true,\n  },\n\n  'swoop': {\n    prefetch: 'https://www.swoop-amp.com/amp.js',\n    preconnect: [\n      'https://www.swpsvc.com',\n      'https://client.swpcld.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'taboola': {},\n\n  'teads': {\n    prefetch: 'https://cdn.teads.tv/media/format/v3/teads-format.min.js',\n    preconnect: [\n      'https://cdn2.teads.tv',\n      'https://a.teads.tv',\n      'https://t.teads.tv',\n    ],\n  },\n\n  'triplelift': {},\n\n  'trugaze': {\n    clientIdScope: '__tg_amp',\n    renderStartImplemented: true,\n  },\n\n  'uas': {\n    prefetch: 'https://ads.pubmatic.com/AdServer/js/phoenix.js',\n  },\n\n  'uzou': {\n    preconnect: [\n      'https://speee-ad.akamaized.net',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'unruly': {\n    prefetch: 'https://video.unrulymedia.com/amp-demo/native-loader.js',\n    renderStartImplemented: true,\n  },\n\n  'valuecommerce': {\n    prefetch: 'https://amp.valuecommerce.com/amp_bridge.js',\n    preconnect: [\n      'https://ad.jp.ap.valuecommerce.com',\n      'https://ad.omks.valuecommerce.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'videointelligence': {\n    preconnect: 'https://s.vi-serve.com',\n    renderStartImplemented: true,\n  },\n\n  'videonow': {\n    renderStartImplemented: true,\n  },\n\n  'viralize': {\n    renderStartImplemented: true,\n  },\n\n  'vmfive': {\n    prefetch: 'https://man.vm5apis.com/dist/adn-web-sdk.js',\n    preconnect: [\n      'https://vawpro.vm5apis.com',\n      'https://vahfront.vm5apis.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'webediads': {\n    prefetch: 'https://eu1.wbdds.com/amp.min.js',\n    preconnect: [\n      'https://goutee.top',\n      'https://mediaathay.org.uk',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'weborama-display': {\n    prefetch: [\n      'https://cstatic.weborama.fr/js/advertiserv2/adperf_launch_1.0.0_scrambled.js',\n      'https://cstatic.weborama.fr/js/advertiserv2/adperf_core_1.0.0_scrambled.js',\n    ],\n  },\n\n  'widespace': {},\n\n  'wisteria': {\n    renderStartImplemented: true,\n  },\n\n  'wpmedia': {\n    prefetch: 'https://std.wpcdn.pl/wpjslib/wpjslib-amp.js',\n    preconnect: [\n      'https://www.wp.pl',\n      'https://v.wpimg.pl',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'xlift': {\n    prefetch: 'https://cdn.x-lift.jp/resources/common/xlift_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'yahoo': {\n    prefetch: 'https://s.yimg.com/os/ampad/display.js',\n    preconnect: 'https://us.adserver.yahoo.com',\n  },\n\n  'yahoojp': {\n    prefetch: [\n      'https://s.yimg.jp/images/listing/tool/yads/ydn/amp/amp.js',\n      'https://yads.c.yimg.jp/js/yads.js',\n    ],\n    preconnect: 'https://yads.yahoo.co.jp',\n  },\n\n  'yandex': {\n    prefetch: 'https://yastatic.net/partner-code/loaders/context_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'yengo': {\n    renderStartImplemented: true,\n  },\n\n  'yieldbot': {\n    prefetch: [\n      'https://cdn.yldbt.com/js/yieldbot.intent.amp.js',\n      'https://msg.yldbt.com/js/ybmsg.html',\n    ],\n    preconnect: 'https://i.yldbt.com',\n  },\n\n  'yieldmo': {\n    prefetch: 'https://static.yieldmo.com/ym.1.js',\n    preconnect: [\n      'https://s.yieldmo.com',\n      'https://ads.yieldmo.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'yieldone': {\n    prefetch: 'https://img.ak.impact-ad.jp/ic/pone/commonjs/yone-amp.js',\n  },\n\n  'yieldpro': {\n    preconnect: 'https://creatives.yieldpro.eu',\n    renderStartImplemented: true,\n  },\n\n  'zedo': {\n    prefetch: 'https://ss3.zedo.com/gecko/tag/Gecko.amp.min.js',\n    renderStartImplemented: true,\n  },\n\n  'zergnet': {},\n\n  'zucks': {\n    preconnect: [\n      'https://j.zucks.net.zimg.jp',\n      'https://sh.zucks.net',\n      'https://k.zucks.net',\n      'https://static.zucks.net.zimg.jp',\n    ],\n  },\n\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExperimentInfo, // eslint-disable-line no-unused-vars\n  forceExperimentBranch,\n  getExperimentBranch,\n  randomlySelectUnsetExperiments,\n} from '../../../src/experiments';\nimport {\n  addExperimentIdToElement,\n} from './traffic-experiments';\n\n/**\n * Attempts to select into experiment and forces branch if selected.\n * @param {!Window} win\n * @param {!Element} element\n * @param {!Array<string>} branches\n * @param {string} expName\n * @param {boolean=} optAddExpIdToElement\n */\nexport function selectAndSetExperiments(\n  win, element, branches, expName, optAddExpIdToElement) {\n  const experimentId = expUtils.maybeSelectExperiment(\n      win, element, branches, expName);\n  if (!!experimentId) {\n    addExperimentIdToElement(optAddExpIdToElement ?\n      experimentId : undefined, element);\n    forceExperimentBranch(win, expName, experimentId);\n  }\n  return experimentId;\n}\n\nexport class ExperimentUtils {\n  /**\n   * @param {!Window} win\n   * @param {!Element} element\n   * @param {!Array<string>} selectionBranches\n   * @param {string} experimentName\n   */\n  maybeSelectExperiment(\n    win, element, selectionBranches, experimentName) {\n    const experimentInfoMap =\n    /** @type {!Object<string, !ExperimentInfo>} */ ({});\n    experimentInfoMap[experimentName] = {\n      isTrafficEligible: () => true,\n      branches: selectionBranches,\n    };\n    randomlySelectUnsetExperiments(win, experimentInfoMap);\n    return getExperimentBranch(win, experimentName);\n  }\n}\n\n/**\n * ExperimentUtils singleton.\n * @type {!ExperimentUtils}\n*/\nconst expUtils = new ExperimentUtils();\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Machinery for doing \"traffic-level\" experiments.  That is, rather than\n * a single user choosing to opt-in to an experimental version of a module,\n * this framework allows you to do randomized, controlled experiments on all\n * AMP page loads to, for example, test relative performance or look for\n * impacts on click-throughs.\n */\n\nimport {\n  EXPERIMENT_ATTRIBUTE,\n  mergeExperimentIds,\n} from './utils';\nimport {\n  ExperimentInfo, // eslint-disable-line no-unused-vars\n  isExperimentOn,\n} from '../../../src/experiments';\nimport {Services} from '../../../src/services';\nimport {parseQueryString} from '../../../src/url';\n\n/** @typedef {{\n *    control: string,\n *    experiment: string\n *  }} */\nexport let A4aExperimentBranches;\n\n/** @type {string} @private */\nexport const MANUAL_EXPERIMENT_ID = '117152632';\n\n/**\n * @param {!Window} win\n * @param {!Element} element Ad tag Element.\n * @return {?string} experiment extracted from page url.\n */\nexport function extractUrlExperimentId(win, element) {\n  const expParam = Services.viewerForDoc(element).getParam('exp') ||\n    parseQueryString(win.location.search)['exp'];\n  if (!expParam) {\n    return null;\n  }\n  // Allow for per type experiment control with Doubleclick key set for 'da'\n  // and AdSense using 'aa'.  Fallback to 'a4a' if type specific is missing.\n  const expKeys = [\n    (element.getAttribute('type') || '').toLowerCase() == 'doubleclick' ?\n      'da' : 'aa',\n    'a4a',\n  ];\n  let arg;\n  let match;\n  expKeys.forEach(key => arg = arg ||\n    ((match = new RegExp(`(?:^|,)${key}:(-?\\\\d+)`).exec(expParam)) &&\n      match[1]));\n  return arg || null;\n}\n\n/**\n * Sets of experiment IDs can be attached to Elements via attributes.  In\n * that case, we encode them as a string containing a comma-separated list\n * of experiment IDs.  This parses a comma-separated list from a string into\n * a list of ID strings.  If the input string is empty or null, this returns\n * the empty list.  This does no validity checking on the ID formats -- for\n * that, use validateExperimentIds.\n *\n * @param {?string} idString  String to parse.\n * @return {!Array<string>}  List of experiment IDs (possibly empty).\n * @see validateExperimentIds\n */\nexport function parseExperimentIds(idString) {\n  if (idString) {\n    return idString.split(',');\n  }\n  return [];\n}\n\n/**\n * Checks whether the given element is a member of the given experiment branch.\n * I.e., whether the element's data-experiment-id attribute contains the id\n * value (possibly because the host page URL contains a 'exp=a4a:X' parameter\n * and #maybeSetExperimentFromUrl has added the appropriate EID).\n *\n * @param {!Element} element Element to check for membership in a specific\n *   experiment.\n * @param {?string} id Experiment ID to check for on `element`.\n * @return {boolean}\n */\nexport function isInExperiment(element, id) {\n  return parseExperimentIds(element.getAttribute(EXPERIMENT_ATTRIBUTE)).some(\n      x => { return x === id; });\n}\n\n/**\n * Checks whether the given element is a member of the 'manually triggered\n * \"experiment\" branch'.  I.e., whether the element's data-experiment-id\n * attribute contains the MANUAL_EXPERIMENT_ID value (hopefully because the\n * user has manually specified 'exp=a4a:-1' in the host page URL and\n * #maybeSetExperimentFromUrl has added it).\n *\n * @param {!Element} element  Element to check for manual experiment membership.\n * @return {boolean}\n */\nexport function isInManualExperiment(element) {\n  return isInExperiment(element, MANUAL_EXPERIMENT_ID);\n}\n\n/**\n * Predicate to check whether A4A has launched yet or not.\n * If it has not yet launched, then the experimental branch serves A4A, and\n * control/filler do not. If it has not, then the filler and control branch do\n * serve A4A, and the experimental branch does not.\n *\n * @param {!Window} win  Host window for the ad.\n * @param {!Element} element  Element to check for pre-launch membership.\n * @return {boolean}\n */\nexport function hasLaunched(win, element) {\n  switch (element.getAttribute('type')) {\n    case 'adsense':\n      return isExperimentOn(win, 'a4aFastFetchAdSenseLaunched');\n    case 'doubleclick':\n      return isExperimentOn(win, 'a4aFastFetchDoubleclickLaunched');\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks that all string experiment IDs in a list are syntactically valid\n * (integer base 10).\n *\n * @param {!Array<string>} idList  List of experiment IDs.  Can be empty.\n * @return {boolean} Whether all list elements are valid experiment IDs.\n */\nexport function validateExperimentIds(idList) {\n  return idList.every(id => { return !isNaN(parseInt(id, 10)); });\n}\n\n/**\n * Adds a single experimentID to an element iff it's a valid experiment ID.\n * No-ops if the experimentId is undefined.\n *\n * @param {string|undefined} experimentId  ID to add to the element.\n * @param {Element} element to add the experiment ID to.\n */\nexport function addExperimentIdToElement(experimentId, element) {\n  if (!experimentId) {\n    return;\n  }\n  const currentEids = element.getAttribute(EXPERIMENT_ATTRIBUTE);\n  if (currentEids && validateExperimentIds(parseExperimentIds(currentEids))) {\n    element.setAttribute(EXPERIMENT_ATTRIBUTE,\n        mergeExperimentIds([experimentId], currentEids));\n  } else {\n    element.setAttribute(EXPERIMENT_ATTRIBUTE, experimentId);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {{name: string, value: (string|number|null)}} */\nexport let QueryParameterDef;\n\n/**\n * Builds a URL from query parameters, truncating to a maximum length if\n * necessary.\n * @param {string} baseUrl scheme, domain, and path for the URL.\n * @param {!Object<string,string|number|null>} queryParams query parameters for\n *     the URL.\n * @param {number} maxLength length to truncate the URL to if necessary.\n * @param {?QueryParameterDef=} opt_truncationQueryParam query parameter to\n *     append to the URL iff any query parameters were truncated.\n * @return {string} the fully constructed URL.\n */\nexport function buildUrl(\n  baseUrl, queryParams, maxLength, opt_truncationQueryParam) {\n  const encodedParams = [];\n  const encodedTruncationParam =\n      opt_truncationQueryParam &&\n      !(opt_truncationQueryParam.value == null ||\n      opt_truncationQueryParam.value === '') ?\n        encodeURIComponent(opt_truncationQueryParam.name) + '=' +\n      encodeURIComponent(String(opt_truncationQueryParam.value)) :\n        null;\n  let capacity = maxLength - baseUrl.length;\n  if (encodedTruncationParam) {\n    capacity -= encodedTruncationParam.length + 1;\n  }\n  const keys = Object.keys(queryParams);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = queryParams[key];\n    if (value == null || value === '') {\n      continue;\n    }\n    const encodedNameAndSep = encodeURIComponent(key) + '=';\n    const encodedValue = encodeURIComponent(String(value));\n    const fullLength = encodedNameAndSep.length + encodedValue.length + 1;\n    if (fullLength > capacity) {\n      const truncatedValue = encodedValue\n          .substr(0, capacity - encodedNameAndSep.length - 1)\n      // Don't end with a partially truncated escape sequence\n          .replace(/%\\w?$/, '');\n      if (truncatedValue) {\n        encodedParams.push(encodedNameAndSep + truncatedValue);\n      }\n      if (encodedTruncationParam) {\n        encodedParams.push(encodedTruncationParam);\n      }\n      break;\n    }\n    encodedParams.push(encodedNameAndSep + encodedValue);\n    capacity -= fullLength;\n  }\n  if (!encodedParams.length) {\n    return baseUrl;\n  }\n  return baseUrl + '?' + encodedParams.join('&');\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomFingerprint} from '../../../src/utils/dom-fingerprint';\nimport {Services} from '../../../src/services';\nimport {buildUrl} from './url-builder';\nimport {dev} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {getBinaryType} from '../../../src/experiments';\nimport {getMode} from '../../../src/mode';\nimport {getOrCreateAdCid} from '../../../src/ad-cid';\nimport {getTimingDataSync} from '../../../src/service/variable-source';\nimport {\n  isExperimentOn,\n  toggleExperiment,\n} from '../../../src/experiments';\nimport {parseJson} from '../../../src/json';\nimport {whenUpgradedToCustomElement} from '../../../src/dom';\n\n/** @type {string}  */\nconst AMP_ANALYTICS_HEADER = 'X-AmpAnalytics';\n\n/** @const {number} */\nconst MAX_URL_LENGTH = 16384;\n\n/** @enum {string} */\nconst AmpAdImplementation = {\n  AMP_AD_XHR_TO_IFRAME: '2',\n  AMP_AD_XHR_TO_IFRAME_OR_AMP: '3',\n  AMP_AD_IFRAME_GET: '5',\n};\n\n/** @const {!Object} */\nexport const ValidAdContainerTypes = {\n  'AMP-CAROUSEL': 'ac',\n  'AMP-FX-FLYING-CARPET': 'fc',\n  'AMP-LIGHTBOX': 'lb',\n  'AMP-STICKY-AD': 'sa',\n};\n\n/**\n * See `VisibilityState` enum.\n * @const {!Object<string, string>}\n */\nconst visibilityStateCodes = {\n  'visible': '1',\n  'hidden': '2',\n  'prerender': '3',\n  'unloaded': '5',\n};\n\n/** @const {string} */\nexport const QQID_HEADER = 'X-QQID';\n\n/**\n * Element attribute that stores experiment IDs.\n *\n * Note: This attribute should be used only for tracking experimental\n * implementations of AMP tags, e.g., by AMPHTML implementors.  It should not be\n * added by a publisher page.\n *\n * @const {string}\n * @visibleForTesting\n */\nexport const EXPERIMENT_ATTRIBUTE = 'data-experiment-id';\n\n/** @typedef {{urls: !Array<string>}}\n */\nexport let AmpAnalyticsConfigDef;\n\n/**\n * @typedef {{instantLoad: boolean, writeInBody: boolean}}\n */\nexport let NameframeExperimentConfig;\n\n/**\n * @const {!./url-builder.QueryParameterDef}\n * @visibleForTesting\n */\nexport const TRUNCATION_PARAM = {name: 'trunc', value: '1'};\n\n/** @const {Object} */\nconst CDN_PROXY_REGEXP = /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org((\\/.*)|($))+/;\n\n/**\n * Returns the value of navigation start using the performance API or 0 if not\n * supported by the browser.\n * Feature detection is used for safety on browsers that do not support the\n * performance API.\n * @param {!Window} win\n * @return {number}\n */\nfunction getNavStart(win) {\n  return (win['performance'] && win['performance']['timing'] &&\n      win['performance']['timing']['navigationStart']) || 0;\n}\n\n/**\n * Check whether Google Ads supports the A4A rendering pathway is valid for the\n * environment by ensuring native crypto support and page originated in the\n * {@code cdn.ampproject.org} CDN <em>or</em> we must be running in local\n * dev mode.\n *\n * @param {!Window} win  Host window for the ad.\n * @return {boolean}  Whether Google Ads should attempt to render via the A4A\n *   pathway.\n */\nexport function isGoogleAdsA4AValidEnvironment(win) {\n  return supportsNativeCrypto(win) && (\n    !!isCdnProxy(win) || getMode(win).localDev || getMode(win).test);\n}\n\n/**\n * Checks whether native crypto is supported for win.\n * @param {!Window} win  Host window for the ad.\n * @return {boolean} Whether native crypto is supported.\n */\nexport function supportsNativeCrypto(win) {\n  return win.crypto && (win.crypto.subtle || win.crypto.webkitSubtle);\n}\n\n/**\n * @param {!AMP.BaseElement} ampElement The element on whose lifecycle this\n *    reporter will be reporting.\n * @return {boolean} whether reporting is enabled for this element\n */\nexport function isReportingEnabled(ampElement) {\n  // Carve-outs: We only want to enable profiling pingbacks when:\n  //   - The ad is from one of the Google networks (AdSense or Doubleclick).\n  //   - The ad slot is in the A4A-vs-3p amp-ad control branch (either via\n  //     internal, client-side selection or via external, Google Search\n  //     selection).\n  //   - We haven't turned off profiling via the rate controls in\n  //     build-system/global-config/{canary,prod}-config.json\n  // If any of those fail, we use the `BaseLifecycleReporter`, which is a\n  // a no-op (sends no pings).\n  const type = ampElement.element.getAttribute('type');\n  const {win} = ampElement;\n  // In local dev mode, neither the canary nor prod config files is available,\n  // so manually set the profiling rate, for testing/dev.\n  if (getMode(ampElement.win).localDev && !getMode(ampElement.win).test) {\n    toggleExperiment(win, 'a4aProfilingRate', true, true);\n  }\n  return (type == 'doubleclick' || type == 'adsense') &&\n      isExperimentOn(win, 'a4aProfilingRate');\n}\n\n/**\n * Has side-effect of incrementing ifi counter on window.\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {!Array<string>=} opt_experimentIds Any experiments IDs (in addition\n *     to those specified on the ad element) that should be included in the\n *     request.\n * @return {!Object<string,null|number|string>} block level parameters\n */\nexport function googleBlockParameters(a4a, opt_experimentIds) {\n  const {element: adElement, win} = a4a;\n  const slotRect = a4a.getPageLayoutBox();\n  const iframeDepth = iframeNestingDepth(win);\n  const enclosingContainers = getEnclosingContainerTypes(adElement);\n  let eids = adElement.getAttribute('data-experiment-id');\n  if (opt_experimentIds) {\n    eids = mergeExperimentIds(opt_experimentIds, eids);\n  }\n  return {\n    'adf': DomFingerprint.generate(adElement),\n    'nhd': iframeDepth,\n    'eid': eids,\n    'adx': slotRect.left,\n    'ady': slotRect.top,\n    'oid': '2',\n    'act': enclosingContainers.length ? enclosingContainers.join() : null,\n  };\n}\n\n/**\n * @param {!Window} win\n * @param {string} type matching typing attribute.\n * @param {function(!Element):string} groupFn\n * @return {!Promise<!Object<string,!Array<!Promise<!../../../src/base-element.BaseElement>>>>}\n */\nexport function groupAmpAdsByType(win, type, groupFn) {\n  // Look for amp-ad elements of correct type or those contained within\n  // standard container type.  Note that display none containers will not be\n  // included as they will never be measured.\n  // TODO(keithwrightbos): what about slots that become measured due to removal\n  // of display none (e.g. user resizes viewport and media selector makes\n  // visible).\n  const ampAdSelector =\n      r => r.element./*OK*/querySelector(`amp-ad[type=${type}]`);\n  return Services.resourcesForDoc(win.document).getMeasuredResources(win,\n      r => {\n        const isAmpAdType = r.element.tagName == 'AMP-AD' &&\n          r.element.getAttribute('type') == type;\n        if (isAmpAdType) {\n          return true;\n        }\n        const isAmpAdContainerElement =\n          Object.keys(ValidAdContainerTypes).includes(r.element.tagName) &&\n          !!ampAdSelector(r);\n        return isAmpAdContainerElement;\n      })\n      // Need to wait on any contained element resolution followed by build\n      // of child ad.\n      .then(resources => Promise.all(resources.map(\n          resource => {\n            if (resource.element.tagName == 'AMP-AD') {\n              return resource.element;\n            }\n            // Must be container element so need to wait for child amp-ad to\n            // be upgraded.\n            return whenUpgradedToCustomElement(\n                dev().assertElement(ampAdSelector(resource)));\n          })))\n      // Group by networkId.\n      .then(elements => elements.reduce((result, element) => {\n        const groupId = groupFn(element);\n        (result[groupId] || (result[groupId] = [])).push(element.getImpl());\n        return result;\n      }, {}));\n}\n\n/**\n * @param {! ../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {number} startTime\n * @return {!Promise<!Object<string,null|number|string>>}\n */\nexport function googlePageParameters(a4a, startTime) {\n  const {win} = a4a;\n  const ampDoc = a4a.getAmpDoc();\n  return Promise.all([\n    getOrCreateAdCid(ampDoc, 'AMP_ECID_GOOGLE', '_ga'),\n    Services.viewerForDoc(ampDoc).getReferrerUrl()])\n      .then(promiseResults => {\n        const clientId = promiseResults[0];\n        const documentInfo = Services.documentInfoForDoc(ampDoc);\n        // Read by GPT for GA/GPT integration.\n        win.gaGlobal = win.gaGlobal ||\n        {cid: clientId, hid: documentInfo.pageViewId};\n        const {screen} = win;\n        const viewport = Services.viewportForDoc(ampDoc);\n        const viewportRect = viewport.getRect();\n        const viewportSize = viewport.getSize();\n        const visibilityState = Services.viewerForDoc(ampDoc)\n            .getVisibilityState();\n        return {\n          'is_amp': a4a.isXhrAllowed() ?\n            AmpAdImplementation.AMP_AD_XHR_TO_IFRAME_OR_AMP :\n            AmpAdImplementation.AMP_AD_IFRAME_GET,\n          'amp_v': '$internalRuntimeVersion$',\n          'd_imp': '1',\n          'c': getCorrelator(win, ampDoc, clientId),\n          'ga_cid': win.gaGlobal.cid || null,\n          'ga_hid': win.gaGlobal.hid || null,\n          'dt': startTime,\n          'biw': viewportRect.width,\n          'bih': viewportRect.height,\n          'u_aw': screen ? screen.availWidth : null,\n          'u_ah': screen ? screen.availHeight : null,\n          'u_cd': screen ? screen.colorDepth : null,\n          'u_w': screen ? screen.width : null,\n          'u_h': screen ? screen.height : null,\n          'u_tz': -new Date().getTimezoneOffset(),\n          'u_his': getHistoryLength(win),\n          'isw': win != win.top ? viewportSize.width : null,\n          'ish': win != win.top ? viewportSize.height : null,\n          'art': getAmpRuntimeTypeParameter(win),\n          'vis': visibilityStateCodes[visibilityState] || '0',\n          'scr_x': viewport.getScrollLeft(),\n          'scr_y': viewport.getScrollTop(),\n          'bc': getBrowserCapabilitiesBitmap(win) || null,\n          'debug_experiment_id':\n              (/(?:#|,)deid=([\\d,]+)/i.exec(win.location.hash) || [])[1] ||\n                  null,\n          'url': documentInfo.canonicalUrl,\n          'top': win != win.top ? topWindowUrlOrDomain(win) : null,\n          'loc': win.location.href == documentInfo.canonicalUrl ?\n            null : win.location.href,\n          'ref': promiseResults[1] || null,\n        };\n      });\n}\n\n/**\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {string} baseUrl\n * @param {number} startTime\n * @param {!Object<string,null|number|string>} parameters\n * @param {!Array<string>=} opt_experimentIds Any experiments IDs (in addition\n *     to those specified on the ad element) that should be included in the\n *     request.\n * @return {!Promise<string>}\n */\nexport function googleAdUrl(\n  a4a, baseUrl, startTime, parameters, opt_experimentIds) {\n  // TODO: Maybe add checks in case these promises fail.\n  const blockLevelParameters = googleBlockParameters(a4a, opt_experimentIds);\n  return googlePageParameters(a4a, startTime)\n      .then(pageLevelParameters => {\n        Object.assign(parameters, blockLevelParameters, pageLevelParameters);\n        return truncAndTimeUrl(baseUrl, parameters, startTime);\n      });\n}\n\n/**\n * @param {string} baseUrl\n * @param {!Object<string,null|number|string>} parameters\n * @param {number} startTime\n * @return {string}\n */\nexport function truncAndTimeUrl(baseUrl, parameters, startTime) {\n  return buildUrl(\n      baseUrl, parameters, MAX_URL_LENGTH - 10, TRUNCATION_PARAM)\n    + '&dtd=' + elapsedTimeWithCeiling(Date.now(), startTime);\n}\n\n/**\n * @param {!Window} win\n * @return {number}\n */\nfunction iframeNestingDepth(win) {\n  let w = win;\n  let depth = 0;\n  while (w != w.parent && depth < 100) {\n    w = w.parent;\n    depth++;\n  }\n  dev().assert(w == win.top);\n  return depth;\n}\n\n/**\n * @param {!Window} win\n * @return {number}\n */\nfunction getHistoryLength(win) {\n  // We have seen cases where accessing history length causes errors.\n  try {\n    return win.history.length;\n  } catch (e) {\n    return 0;\n  }\n}\n\n/**\n * @param {string} url\n * @return {string} hostname portion of url\n * @visibleForTesting\n */\nexport function extractHost(url) {\n  return (/^(?:https?:\\/\\/)?([^\\/\\?:]+)/i.exec(url) || [])[1] || url;\n}\n\n/**\n * @param {!Window} win\n * @return {?string}\n */\nfunction topWindowUrlOrDomain(win) {\n  const {ancestorOrigins} = win.location;\n  if (ancestorOrigins) {\n    const {origin} = win.location;\n    const topOrigin = ancestorOrigins[ancestorOrigins.length - 1];\n    if (origin == topOrigin) {\n      return win.top.location.hostname;\n    }\n    const secondFromTop = secondWindowFromTop(win);\n    if (secondFromTop == win ||\n        origin == ancestorOrigins[ancestorOrigins.length - 2]) {\n      return extractHost(secondFromTop./*OK*/document.referrer);\n    }\n    return extractHost(topOrigin);\n  } else {\n    try {\n      return win.top.location.hostname;\n    } catch (e) {}\n    const secondFromTop = secondWindowFromTop(win);\n    try {\n      return extractHost(secondFromTop./*OK*/document.referrer);\n    } catch (e) {}\n    return null;\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {!Window}\n */\nfunction secondWindowFromTop(win) {\n  let secondFromTop = win;\n  let depth = 0;\n  while (secondFromTop.parent != secondFromTop.parent.parent &&\n        depth < 100) {\n    secondFromTop = secondFromTop.parent;\n    depth++;\n  }\n  dev().assert(secondFromTop.parent == win.top);\n  return secondFromTop;\n}\n\n/**\n * @param {number} time\n * @param {number} start\n * @return {(number|string)}\n */\nfunction elapsedTimeWithCeiling(time, start) {\n  const duration = time - start;\n  if (duration >= 1e6) {\n    return 'M';\n  } else if (duration >= 0) {\n    return duration;\n  }\n  return '-M';\n}\n\n/**\n * `nodeOrDoc` must be passed for correct behavior in shadow AMP (PWA) case.\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string=} opt_cid\n * @return {number} The correlator.\n */\nexport function getCorrelator(win, elementOrAmpDoc, opt_cid) {\n  if (!win.ampAdPageCorrelator) {\n    win.ampAdPageCorrelator = isExperimentOn(win, 'exp-new-correlator') ?\n      Math.floor(4503599627370496 * Math.random()) :\n      makeCorrelator(\n          Services.documentInfoForDoc(elementOrAmpDoc).pageViewId, opt_cid);\n  }\n  return win.ampAdPageCorrelator;\n}\n\n/**\n * @param {string} pageViewId\n * @param {string=} opt_clientId\n * @return {number}\n */\nfunction makeCorrelator(pageViewId, opt_clientId) {\n  const pageViewIdNumeric = Number(pageViewId || 0);\n  if (opt_clientId) {\n    return pageViewIdNumeric + ((opt_clientId.replace(/\\D/g, '') % 1e6) * 1e6);\n  } else {\n    // In this case, pageViewIdNumeric is only 4 digits => too low entropy\n    // to be useful as a page correlator.  So synthesize one from scratch.\n    // 4503599627370496 == 2^52.  The guaranteed range of JS Number is at least\n    // 2^53 - 1.\n    return Math.floor(4503599627370496 * Math.random());\n  }\n}\n\n\n/**\n * Collect additional dimensions for the brdim parameter.\n * @param {!Window} win The window for which we read the browser dimensions.\n * @param {{width: number, height: number}|null} viewportSize\n * @return {string}\n * @visibleForTesting\n */\nexport function additionalDimensions(win, viewportSize) {\n  // Some browsers throw errors on some of these.\n  let screenX, screenY, outerWidth, outerHeight, innerWidth, innerHeight;\n  try {\n    screenX = win.screenX;\n    screenY = win.screenY;\n  } catch (e) {}\n  try {\n    outerWidth = win.outerWidth;\n    outerHeight = win.outerHeight;\n  } catch (e) {}\n  try {\n    innerWidth = viewportSize.width;\n    innerHeight = viewportSize.height;\n  } catch (e) {}\n  return [win.screenLeft,\n    win.screenTop,\n    screenX,\n    screenY,\n    win.screen ? win.screen.availWidth : undefined,\n    win.screen ? win.screen.availTop : undefined,\n    outerWidth,\n    outerHeight,\n    innerWidth,\n    innerHeight].join();\n}\n\n/**\n * Returns amp-analytics config for a new CSI trigger.\n * @param {string} on The name of the analytics trigger.\n * @param {!Object<string, string>} params Params to be included on the ping.\n * @return {!JsonObject}\n */\nfunction csiTrigger(on, params) {\n  return dict({\n    'on': on,\n    'request': 'csi',\n    'sampleSpec': {\n      // Pings are sampled on a per-pageview basis. A prefix is included in the\n      // sampleOn spec so that the hash is orthogonal to any other sampling in\n      // amp.\n      'sampleOn': 'a4a-csi-${pageViewId}',\n      'threshold': 1, // 1% sample\n    },\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'extraUrlParams': params,\n  });\n}\n\n/**\n * Returns amp-analytics config for Google ads network impls.\n * @return {!JsonObject}\n */\nexport function getCsiAmpAnalyticsConfig() {\n  return dict({\n    'requests': {\n      'csi': 'https://csi.gstatic.com/csi?',\n    },\n    'transport': {'xhrpost': false},\n    'triggers': {\n      'adRequestStart': csiTrigger('ad-request-start', {\n        // afs => ad fetch start\n        'met.a4a': 'afs_lvt.${viewerLastVisibleTime}~afs.${time}',\n      }),\n      'adResponseEnd': csiTrigger('ad-response-end', {\n        // afe => ad fetch end\n        'met.a4a': 'afe.${time}',\n      }),\n      'adRenderStart': csiTrigger('ad-render-start', {\n        // ast => ad schedule time\n        // ars => ad render start\n        'met.a4a':\n            'ast.${scheduleTime}~ars_lvt.${viewerLastVisibleTime}~ars.${time}',\n        'qqid': '${qqid}',\n      }),\n      'adIframeLoaded': csiTrigger('ad-iframe-loaded', {\n        // ail => ad iframe loaded\n        'met.a4a': 'ail.${time}',\n      }),\n    },\n    'extraUrlParams': {\n      's': 'ampad',\n      'ctx': '2',\n      'c': '${correlator}',\n      'slotId': '${slotId}',\n      // Time that the beacon was actually sent. Note that there can be delays\n      // between the time at which the event is fired and when ${nowMs} is\n      // evaluated when the URL is built by amp-analytics.\n      'puid': '${requestCount}~${timestamp}',\n    },\n  });\n}\n\n/**\n * Returns variables to be included in the amp-analytics event for A4A.\n * @param {string} analyticsTrigger The name of the analytics trigger.\n * @param {!AMP.BaseElement} a4a The A4A element.\n * @param {?string} qqid The query ID or null if the query ID has not been set\n *     yet.\n */\nexport function getCsiAmpAnalyticsVariables(analyticsTrigger, a4a, qqid) {\n  const {win} = a4a;\n  const ampdoc = a4a.getAmpDoc();\n  const viewer = Services.viewerForDoc(ampdoc);\n  const navStart = getNavStart(win);\n  const vars = {\n    'correlator': getCorrelator(win, ampdoc),\n    'slotId': a4a.element.getAttribute('data-amp-slot-index'),\n    'viewerLastVisibleTime': viewer.getLastVisibleTime() - navStart,\n  };\n  if (qqid) {\n    vars['qqid'] = qqid;\n  }\n  if (analyticsTrigger == 'ad-render-start') {\n    vars['scheduleTime'] = a4a.element.layoutScheduleTime - navStart;\n  }\n  return vars;\n}\n\n/**\n * Extracts configuration used to build amp-analytics element for active view.\n *\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {!../../../src/utils/xhr-utils.FetchResponseHeaders} responseHeaders\n *   XHR service FetchResponseHeaders object containing the response\n *   headers.\n * @return {?JsonObject} config or null if invalid/missing.\n */\nexport function extractAmpAnalyticsConfig(a4a, responseHeaders) {\n  if (!responseHeaders.has(AMP_ANALYTICS_HEADER)) {\n    return null;\n  }\n  try {\n    const analyticsConfig =\n        parseJson(responseHeaders.get(AMP_ANALYTICS_HEADER));\n    dev().assert(Array.isArray(analyticsConfig['url']));\n    const urls = analyticsConfig['url'];\n    if (!urls.length) {\n      return null;\n    }\n\n    const config = /** @type {JsonObject}*/ ({\n      'transport': {'beacon': false, 'xhrpost': false},\n      'triggers': {\n        'continuousVisible': {\n          'on': 'visible',\n          'visibilitySpec': {\n            'selector': 'amp-ad',\n            'selectionMethod': 'closest',\n            'visiblePercentageMin': 50,\n            'continuousTimeMin': 1000,\n          },\n        },\n      },\n    });\n\n    // Discover and build visibility endpoints.\n    const requests = dict();\n    for (let idx = 1; idx <= urls.length; idx++) {\n      // TODO: Ensure url is valid and not freeform JS?\n      requests[`visibility${idx}`] = `${urls[idx - 1]}`;\n    }\n    // Security review needed here.\n    config['requests'] = requests;\n    config['triggers']['continuousVisible']['request'] =\n        Object.keys(requests);\n    return config;\n  } catch (err) {\n    dev().error('AMP-A4A', 'Invalid analytics', err,\n        responseHeaders.get(AMP_ANALYTICS_HEADER));\n  }\n  return null;\n}\n\n/**\n * Add new experiment IDs to a (possibly empty) existing set of experiment IDs.\n * The {@code currentIdString} may be {@code null} or {@code ''}, but if it is\n * populated, it must contain a comma-separated list of integer experiment IDs\n * (per {@code parseExperimentIds()}).  Returns the new set of IDs, encoded\n * as a comma-separated list.  Does not de-duplicate ID entries.\n *\n * @param {!Array<string>} newIds IDs to merge in. Should contain stringified\n *     integer (base 10) experiment IDs.\n * @param {?string} currentIdString  If present, a string containing a\n *   comma-separated list of integer experiment IDs.\n * @return {string}  New experiment list string, including newId iff it is\n *   a valid (integer) experiment ID.\n * @see parseExperimentIds, validateExperimentIds\n */\nexport function mergeExperimentIds(newIds, currentIdString) {\n  const newIdString = newIds.filter(newId => Number(newId)).join(',');\n  currentIdString = currentIdString || '';\n  return currentIdString + (currentIdString && newIdString ? ',' : '')\n      + newIdString;\n}\n\n/**\n * Adds two CSI signals to the given amp-analytics configuration object, one\n * for render-start, and one for ini-load.\n *\n * @param {!Window} win\n * @param {!Element} element The ad slot.\n * @param {!JsonObject} config The original config object.\n * @param {?string} qqid\n * @param {boolean} isVerifiedAmpCreative\n * @return {?JsonObject} config or null if invalid/missing.\n */\nexport function addCsiSignalsToAmpAnalyticsConfig(\n  win, element, config, qqid, isVerifiedAmpCreative) {\n  // Add CSI pingbacks.\n  const correlator = getCorrelator(win, element);\n  const slotId = Number(element.getAttribute('data-amp-slot-index'));\n  const eids = encodeURIComponent(\n      element.getAttribute(EXPERIMENT_ATTRIBUTE));\n  const adType = element.getAttribute('type');\n  const initTime =\n      Number(getTimingDataSync(win, 'navigationStart') || Date.now());\n  const deltaTime = Math.round(win.performance && win.performance.now ?\n    win.performance.now() : (Date.now() - initTime));\n  const baseCsiUrl = 'https://csi.gstatic.com/csi?s=a4a' +\n      `&c=${correlator}&slotId=${slotId}&qqid.${slotId}=${qqid}` +\n      `&dt=${initTime}` +\n      (eids != 'null' ? `&e.${slotId}=${eids}` : '') +\n      `&rls=$internalRuntimeVersion$&adt.${slotId}=${adType}`;\n  const isAmpSuffix = isVerifiedAmpCreative ? 'Friendly' : 'CrossDomain';\n  config['triggers']['continuousVisibleIniLoad'] = {\n    'on': 'ini-load',\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'request': 'iniLoadCsi',\n  };\n  config['triggers']['continuousVisibleRenderStart'] = {\n    'on': 'render-start',\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'request': 'renderStartCsi',\n  };\n  config['requests']['iniLoadCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=iniLoadCsi${isAmpSuffix}.${deltaTime}`;\n  config['requests']['renderStartCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=renderStartCsi${isAmpSuffix}.${deltaTime}`;\n\n  // Add CSI ping for visibility.\n  config['requests']['visibilityCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=visibilityCsi.${deltaTime}`;\n  config['triggers']['continuousVisible']['request'].push('visibilityCsi');\n  return config;\n}\n\n/**\n * Returns an array of two-letter codes representing the amp-ad containers\n * enclosing the given ad element.\n *\n * @param {!Element} adElement\n * @return {!Array<string>}\n */\nexport function getEnclosingContainerTypes(adElement) {\n  const containerTypeSet = {};\n  for (let el = adElement.parentElement, counter = 0;\n    el && counter < 20; el = el.parentElement, counter++) {\n    const tagName = el.tagName.toUpperCase();\n    if (ValidAdContainerTypes[tagName]) {\n      containerTypeSet[ValidAdContainerTypes[tagName]] = true;\n    }\n  }\n  return Object.keys(containerTypeSet);\n}\n\n/**\n * Appends parameter to ad request indicating error state so long as error\n * parameter is not already present or url has been truncated.\n * @param {string} adUrl used for network request\n * @param {string} parameterValue to be appended\n * @return {string|undefined} potentially modified url, undefined\n */\nexport function maybeAppendErrorParameter(adUrl, parameterValue) {\n  dev().assert(!!adUrl && !!parameterValue);\n  // Add parameter indicating error so long as the url has not already been\n  // truncated and error parameter is not already present.  Note that we assume\n  // that added, error parameter length will be less than truncation parameter\n  // so adding will not cause length to exceed maximum.\n  if (new RegExp(`[?|&](${encodeURIComponent(TRUNCATION_PARAM.name)}=` +\n      `${encodeURIComponent(String(TRUNCATION_PARAM.value))}|aet=[^&]*)$`)\n      .test(adUrl)) {\n    return;\n  }\n  const modifiedAdUrl = adUrl + `&aet=${parameterValue}`;\n  dev().assert(modifiedAdUrl.length <= MAX_URL_LENGTH);\n  return modifiedAdUrl;\n}\n\n/**\n * Returns a numerical code representing the binary type.\n * @param {string} type\n * @return {?string}\n */\nexport function getBinaryTypeNumericalCode(type) {\n  return {\n    'production': '0',\n    'control': '1',\n    'canary': '2',\n  }[type] || null;\n}\n\n/** @const {!RegExp} */\nconst IDENTITY_DOMAIN_REGEXP_ = /\\.google\\.(?:com?\\.)?[a-z]{2,3}$/;\n\n/** @typedef {{\n      token: (string|undefined),\n      jar: (string|undefined),\n      pucrd: (string|undefined),\n      freshLifetimeSecs: (number|undefined),\n      validLifetimeSecs: (number|undefined),\n      fetchTimeMs: (number|undefined)\n   }} */\nexport let IdentityToken;\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @return {!Promise<!IdentityToken>}\n */\nexport function getIdentityToken(win, elementOrAmpDoc) {\n  win['goog_identity_prom'] = win['goog_identity_prom'] ||\n      executeIdentityTokenFetch(win, elementOrAmpDoc);\n  return /** @type {!Promise<!IdentityToken>} */(win['goog_identity_prom']);\n}\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {number=} redirectsRemaining (default 1)\n * @param {string=} domain\n * @param {number=} startTime\n * @return {!Promise<!IdentityToken>}\n */\nfunction executeIdentityTokenFetch(win, elementOrAmpDoc, redirectsRemaining = 1,\n  domain = undefined, startTime = Date.now()) {\n  const url = getIdentityTokenRequestUrl(win, elementOrAmpDoc, domain);\n  return Services.xhrFor(win).fetchJson(url, {\n    mode: 'cors',\n    method: 'GET',\n    ampCors: false,\n    credentials: 'include',\n  }).then(res => res.json())\n      .then(obj => {\n        const token = obj['newToken'];\n        const jar = obj['1p_jar'] || '';\n        const pucrd = obj['pucrd'] || '';\n        const freshLifetimeSecs = parseInt(obj['freshLifetimeSecs'] || '', 10);\n        const validLifetimeSecs = parseInt(obj['validLifetimeSecs'] || '', 10);\n        const altDomain = obj['altDomain'];\n        const fetchTimeMs = Date.now() - startTime;\n        if (IDENTITY_DOMAIN_REGEXP_.test(altDomain)) {\n          if (!redirectsRemaining--) {\n            // Max redirects, log?\n            return {fetchTimeMs};\n          }\n          return executeIdentityTokenFetch(\n              win, elementOrAmpDoc, redirectsRemaining, altDomain, startTime);\n        } else if (freshLifetimeSecs > 0 && validLifetimeSecs > 0 &&\n            typeof token == 'string') {\n          return {token, jar, pucrd, freshLifetimeSecs, validLifetimeSecs,\n            fetchTimeMs};\n        }\n        // returning empty\n        return {fetchTimeMs};\n      })\n      .catch(unusedErr => {\n        // TODO log?\n        return {};\n      });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string=} domain\n * @return {string} url\n * @visibleForTesting\n */\nexport function getIdentityTokenRequestUrl(win, elementOrAmpDoc,\n  domain = undefined) {\n  if (!domain && win != win.top && win.location.ancestorOrigins) {\n    const matches = IDENTITY_DOMAIN_REGEXP_.exec(\n        win.location.ancestorOrigins[win.location.ancestorOrigins.length - 1]);\n    domain = (matches && matches[0]) || undefined;\n  }\n  domain = domain || '.google.com';\n  const canonical =\n    extractHost(Services.documentInfoForDoc(elementOrAmpDoc).canonicalUrl);\n  return `https://adservice${domain}/adsid/integrator.json?domain=${canonical}`;\n}\n\n/**\n * Returns whether we are running on the AMP CDN.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCdnProxy(win) {\n  return CDN_PROXY_REGEXP.test(win.location.origin);\n}\n\n/**\n * Populates the fields of the given Nameframe experiment config object.\n * @param {!../../../src/utils/xhr-utils.FetchResponseHeaders} headers\n * @param {!NameframeExperimentConfig} nameframeConfig\n */\nexport function setNameframeExperimentConfigs(headers, nameframeConfig) {\n  const nameframeExperimentHeader = headers.get('amp-nameframe-exp');\n  if (nameframeExperimentHeader) {\n    nameframeExperimentHeader.split(';').forEach(config => {\n      if (config == 'instantLoad' || config == 'writeInBody') {\n        nameframeConfig[config] = true;\n      }\n    });\n  }\n}\n\n/**\n * Enum for browser capabilities. NOTE: Since JS is 32-bit, do not add anymore\n * than 32 capabilities to this enum.\n * @enum {number}\n */\nconst Capability = {\n  SVG_SUPPORTED: 1 << 0,\n  SANDBOXING_ALLOW_TOP_NAVIGATION_BY_USER_ACTIVATION_SUPPORTED: 1 << 1,\n  SANDBOXING_ALLOW_POPUPS_TO_ESCAPE_SANDBOX_SUPPORTED: 1 << 2,\n};\n\n/**\n * Returns a bitmap representing what features are supported by this browser.\n * @param {!Window} win\n * @return {number}\n */\nfunction getBrowserCapabilitiesBitmap(win) {\n  let browserCapabilities = 0;\n  const doc = win.document;\n  if (win.SVGElement && doc.createElementNS) {\n    browserCapabilities |= Capability.SVG_SUPPORTED;\n  }\n  const iframeEl = doc.createElement('iframe');\n  if (iframeEl.sandbox && iframeEl.sandbox.supports) {\n    if (iframeEl.sandbox.supports('allow-top-navigation-by-user-activation')) {\n      browserCapabilities |=\n        Capability.SANDBOXING_ALLOW_TOP_NAVIGATION_BY_USER_ACTIVATION_SUPPORTED;\n    }\n    if (iframeEl.sandbox.supports('allow-popups-to-escape-sandbox')) {\n      browserCapabilities |=\n        Capability.SANDBOXING_ALLOW_POPUPS_TO_ESCAPE_SANDBOX_SUPPORTED;\n    }\n  }\n  return browserCapabilities;\n}\n\n/**\n * Returns an enum value representing the AMP binary type, or null if this is a\n * canonical page.\n * @param {!Window} win\n * @return {?string} The binary type enum.\n * @visibleForTesting\n */\nexport function getAmpRuntimeTypeParameter(win) {\n  const art = getBinaryTypeNumericalCode(getBinaryType(win));\n  return isCdnProxy(win) && art != '0' ? art : null;\n}\n","export const CSS = \"amp-ad iframe,amp-embed iframe{border:0!important;margin:0!important;padding:0!important}.i-amphtml-ad-default-holder{position:absolute;left:0;right:0;top:0;bottom:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background-color:hsla(0,0%,78.4%,0.05)}.i-amphtml-ad-default-holder:after{content:\\\"Ad\\\";content:attr(data-ad-holder-text);background-color:transparent;border-radius:2px;color:#696969;font-size:10px;line-height:1;font-family:Arial,sans-serif;padding:3px 4px 1px;border:1px solid #696969}amp-ad[data-a4a-upgrade-type=amp-ad-network-doubleclick-impl]>iframe,amp-ad[type=adsense]>iframe{top:50%!important;left:50%!important;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}amp-ad[type=adsense],amp-ad[type=doubleclick]{direction:ltr}amp-ad[data-a4a-upgrade-type=amp-ad-network-adsense-impl]>iframe,amp-ad[data-a4a-upgrade-type=amp-ad-network-doubleclick-impl]>iframe{min-height:0;min-width:0}amp-ad[data-a4a-upgrade-type=amp-ad-network-doubleclick-impl][height=fluid]>iframe{height:100%!important;width:100%!important;position:relative}amp-ad[data-a4a-upgrade-type=amp-ad-network-doubleclick-impl][height=fluid]{width:100%!important}\\n/*# sourceURL=/extensions/amp-ad/0.1/amp-ad.css*/\";\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Because AdSense and DoubleClick are both operated by Google and their A4A\n// implementations share some behavior in common, part of the logic for this\n// implementation is located in the ads/google/a4a directory rather than here.\n// Most other ad networks will want to put their A4A code entirely in the\n// extensions/amp-ad-network-${NETWORK_NAME}-impl directory.\n\nimport {\n  MANUAL_EXPERIMENT_ID,\n  addExperimentIdToElement,\n  extractUrlExperimentId,\n} from '../../../ads/google/a4a/traffic-experiments';\nimport {dev} from '../../../src/log';\nimport {\n  forceExperimentBranch,\n  getExperimentBranch,\n} from '../../../src/experiments';\nimport {\n  isCdnProxy,\n  isGoogleAdsA4AValidEnvironment,\n} from '../../../ads/google/a4a/utils';\nimport {selectAndSetExperiments} from '../../../ads/google/a4a/experiment-utils';\n\n/** @const {string} @visibleForTesting */\nexport const ADSENSE_A4A_EXPERIMENT_NAME = 'expAdsenseA4A';\n\n/** @type {string} */\nconst TAG = 'amp-ad-network-adsense-impl';\n\n/** @const @type {!Object<string,?string>} */\nexport const URL_EXPERIMENT_MAPPING = {\n  '-1': MANUAL_EXPERIMENT_ID,\n  '0': null,\n};\n\n/** @const @type {!Object<string, string>} */\nexport const ADSENSE_EXPERIMENTS = {\n  UNCONDITIONED_CANONICAL_EXP: '21062154',\n  UNCONDITIONED_CANONICAL_CTL: '21062155',\n  CANONICAL_EXP: '21062158',\n  CANONICAL_CTL: '21062159',\n};\n\n/** @const @type {!Object<string, string>} */\nexport const ADSENSE_EXP_NAMES = {\n  UNCONDITIONED_CANONICAL: 'expAdsenseUnconditionedCanonical',\n  CANONICAL: 'expAdsenseCanonical',\n};\n\n/**\n * Attempts to select into Adsense experiments.\n * @param {!Window} win\n * @param {!Element} element\n */\nfunction selectExperiments(win, element) {\n  selectAndSetExperiments(win, element,\n      [ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_EXP,\n        ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_CTL],\n      ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL,\n      true);\n\n\n  // See if in holdback control/experiment.\n  const urlExperimentId = extractUrlExperimentId(win, element);\n  const experimentId = URL_EXPERIMENT_MAPPING[urlExperimentId || ''];\n  if (experimentId) {\n    addExperimentIdToElement(experimentId, element);\n    forceExperimentBranch(win, ADSENSE_A4A_EXPERIMENT_NAME, experimentId);\n    dev().info(\n        TAG, `url experiment selection ${urlExperimentId}: ${experimentId}.`);\n  }\n\n  // If not in the unconditioned canonical experiment, attempt to\n  // select into the undiluted canonical experiment.\n  const inUnconditionedCanonicalExp = !!getExperimentBranch(\n      win, ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL);\n  if (!inUnconditionedCanonicalExp && !isCdnProxy(win)) {\n    selectAndSetExperiments(win, element,\n        [ADSENSE_EXPERIMENTS.CANONICAL_EXP,\n          ADSENSE_EXPERIMENTS.CANONICAL_CTL],\n        ADSENSE_EXP_NAMES.CANONICAL, true);\n  }\n}\n\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function adsenseIsA4AEnabled(win, element, useRemoteHtml) {\n  if (useRemoteHtml || !element.getAttribute('data-ad-client')) {\n    return false;\n  }\n  selectExperiments(win, element);\n  return isGoogleAdsA4AValidEnvironment(win) ||\n      getExperimentBranch(\n          win, ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL) ==\n      ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_EXP ||\n      getExperimentBranch(win, ADSENSE_EXP_NAMES.CANONICAL) ==\n      ADSENSE_EXPERIMENTS.CANONICAL_EXP;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Determines which tags desire A4A handling\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function cloudflareIsA4AEnabled(win, element, useRemoteHtml) {\n  // We assume fast fetch for all content, but this will gracefully degrade,\n  // when non-a4a content is delivered\n  return !useRemoteHtml;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {startsWith} from '../../../src/string';\n\n/** @const @private {string} */\nconst GMOSSP_SRC_PREFIX_ = 'https://sp.gmossp-sp.jp/';\n\n/** @const @private {string} */\nconst GMOSSP_SRC_A4A_PREFIX_ = 'https://amp.sp.gmossp-sp.jp/_a4a/';\n\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function gmosspIsA4AEnabled(win, element, useRemoteHtml) {\n  let src;\n  return !useRemoteHtml && !!(src = element.getAttribute('src')) &&\n      !!element.getAttribute('data-use-a4a') &&\n      (startsWith(src, GMOSSP_SRC_PREFIX_) ||\n       startsWith(src, GMOSSP_SRC_A4A_PREFIX_));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const @private {string} */\nconst SRC_PREFIX_ = 'https://ib.3lift.com/';\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function tripleliftIsA4AEnabled(win, element, useRemoteHtml) {\n  let src;\n  return !useRemoteHtml && !!element.getAttribute('data-use-a4a') && !!(src =\n    element.getAttribute('src')) && src.indexOf(SRC_PREFIX_) == 0;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AmpAdUIHandler} from './amp-ad-ui';\nimport {AmpAdXOriginIframeHandler} from './amp-ad-xorigin-iframe-handler';\nimport {\n  CONSENT_POLICY_STATE, // eslint-disable-line no-unused-vars\n} from '../../../src/consent-state';\nimport {\n  Layout, // eslint-disable-line no-unused-vars\n  LayoutPriority,\n} from '../../../src/layout';\nimport {adConfig} from '../../../ads/_config';\nimport {clamp} from '../../../src/utils/math';\nimport {\n  computedStyle,\n  setStyle,\n} from '../../../src/style';\nimport {dev, user} from '../../../src/log';\nimport {getAdCid} from '../../../src/ad-cid';\nimport {getAdContainer, isAdPositionAllowed}\n  from '../../../src/ad-helper';\nimport {\n  getAmpAdRenderOutsideViewport,\n  incrementLoadingAds,\n  is3pThrottled,\n} from './concurrent-load';\nimport {\n  getConsentPolicySharedData,\n  getConsentPolicyState,\n} from '../../../src/consent';\nimport {getIframe} from '../../../src/3p-frame';\nimport {isLayoutSizeDefined} from '../../../src/layout';\nimport {moveLayoutRect} from '../../../src/layout-rect';\nimport {preloadBootstrap} from '../../../src/3p-frame';\nimport {toWin} from '../../../src/types';\n\n/** @const {string} Tag name for 3P AD implementation. */\nexport const TAG_3P_IMPL = 'amp-ad-3p-impl';\n\n/** @const {number} */\nconst MIN_FULL_WIDTH_HEIGHT = 100;\n\n/** @const {number} */\nconst MAX_FULL_WIDTH_HEIGHT = 500;\n\nexport class AmpAd3PImpl extends AMP.BaseElement {\n\n  /**\n   * @param {!AmpElement} element\n   */\n  constructor(element) {\n    super(element);\n\n    /**\n     * @private {?Element}\n     * @visibleForTesting\n     */\n    this.iframe_ = null;\n\n    /** {?Object} */\n    this.config = null;\n\n    /** {?AmpAdUIHandler} */\n    this.uiHandler = null;\n\n    /** @private {?AmpAdXOriginIframeHandler} */\n    this.xOriginIframeHandler_ = null;\n\n    /**\n     * @private {?Element}\n     * @visibleForTesting\n     */\n    this.placeholder_ = null;\n\n    /**\n     * @private {?Element}\n     * @visibleForTesting\n     */\n    this.fallback_ = null;\n\n    /** @private {boolean} */\n    this.isInFixedContainer_ = false;\n\n    /**\n     * The (relative) layout box of the ad iframe to the amp-ad tag.\n     * @private {?../../../src/layout-rect.LayoutRectDef}\n     */\n    this.iframeLayoutBox_ = null;\n\n    /**\n     * Call to stop listening to viewport changes.\n     * @private {?function()}\n     * @visibleForTesting\n     */\n    this.unlistenViewportChanges_ = null;\n\n    /**\n     * @private {IntersectionObserver}\n     * @visibleForTesting\n     */\n    this.intersectionObserver_ = null;\n\n    /** @private {?string|undefined} */\n    this.container_ = undefined;\n\n    /** @private {?Promise} */\n    this.layoutPromise_ = null;\n\n    /** @private {string|undefined} */\n    this.type_ = undefined;\n\n    /**\n     * For full-width responsive ads: whether the element has already been\n     * aligned to the edges of the viewport.\n     * @private {boolean}\n     */\n    this.isFullWidthAligned_ = false;\n\n    /**\n     * Whether full-width responsive was requested for this ad.\n     * @private {boolean}\n     */\n    this.isFullWidthRequested_ = false;\n  }\n\n  /** @override */\n  getLayoutPriority() {\n    // Loads ads after other content,\n    const isPWA = !this.element.getAmpDoc().isSingleDoc();\n    // give the ad higher priority if it is inside a PWA\n    return isPWA ? LayoutPriority.METADATA : LayoutPriority.ADS;\n  }\n\n  /** @override */\n  renderOutsideViewport() {\n    if (is3pThrottled(this.win)) {\n      return false;\n    }\n    // Otherwise the ad is good to go.\n    const elementCheck = getAmpAdRenderOutsideViewport(this.element);\n    return elementCheck !== null ?\n      elementCheck : super.renderOutsideViewport();\n  }\n\n  /**\n   * @param {!Layout} layout\n   * @override\n   */\n  isLayoutSupported(layout) {\n    return isLayoutSizeDefined(layout);\n  }\n\n  /**\n   * @return {!../../../src/service/resource.Resource}\n   * @visibleForTesting\n   */\n  getResource() {\n    return this.element.getResources().getResourceForElement(this.element);\n  }\n\n  /** @override */\n  getConsentPolicy() {\n    const type = this.element.getAttribute('type');\n    const config = adConfig[type];\n    if (config && config['consentHandlingOverride']) {\n      return null;\n    }\n    return super.getConsentPolicy();\n  }\n\n  /** @override */\n  buildCallback() {\n    this.type_ = this.element.getAttribute('type');\n    const upgradeDelayMs = Math.round(this.getResource().getUpgradeDelayMs());\n    dev().info(TAG_3P_IMPL, `upgradeDelay ${this.type_}: ${upgradeDelayMs}`);\n\n    this.placeholder_ = this.getPlaceholder();\n    this.fallback_ = this.getFallback();\n\n    this.config = adConfig[this.type_];\n    user().assert(\n        this.config, `Type \"${this.type_}\" is not supported in amp-ad`);\n\n    this.uiHandler = new AmpAdUIHandler(this);\n\n    this.isFullWidthRequested_ = this.shouldRequestFullWidth_();\n\n    if (this.isFullWidthRequested_) {\n      return this.attemptFullWidthSizeChange_();\n    }\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  shouldRequestFullWidth_() {\n    const hasFullWidth = this.element.hasAttribute('data-full-width');\n    if (!hasFullWidth) {\n      return false;\n    }\n    user().assert(this.element.getAttribute('width') == '100vw',\n        'Ad units with data-full-width must have width=\"100vw\".');\n    user().assert(!!this.config.fullWidthHeightRatio,\n        'Ad network does not support full width ads.');\n    dev().info(TAG_3P_IMPL,\n        '#${this.getResource().getId()} Full width requested');\n    return true;\n  }\n\n  /**\n   * Prefetches and preconnects URLs related to the ad.\n   * @param {boolean=} opt_onLayout\n   * @override\n   */\n  preconnectCallback(opt_onLayout) {\n    // We always need the bootstrap.\n    preloadBootstrap(\n        this.win, this.preconnect, this.type_, this.config.remoteHTMLDisabled);\n    if (typeof this.config.prefetch == 'string') {\n      this.preconnect.preload(this.config.prefetch, 'script');\n    } else if (this.config.prefetch) {\n      this.config.prefetch.forEach(p => {\n        this.preconnect.preload(p, 'script');\n      });\n    }\n    if (typeof this.config.preconnect == 'string') {\n      this.preconnect.url(this.config.preconnect, opt_onLayout);\n    } else if (this.config.preconnect) {\n      this.config.preconnect.forEach(p => {\n        this.preconnect.url(p, opt_onLayout);\n      });\n    }\n    // If fully qualified src for ad script is specified we preconnect to it.\n    const src = this.element.getAttribute('src');\n    if (src) {\n      // We only preconnect to the src because we cannot know whether the URL\n      // will have caching headers set.\n      this.preconnect.url(src);\n    }\n  }\n\n  /**\n   * @override\n   */\n  onLayoutMeasure() {\n    this.isInFixedContainer_ = !isAdPositionAllowed(this.element, this.win);\n    /** detect ad containers, add the list to element as a new attribute */\n    if (this.container_ === undefined) {\n      this.container_ = getAdContainer(this.element);\n    }\n    // We remeasured this tag, let's also remeasure the iframe. Should be\n    // free now and it might have changed.\n    this.measureIframeLayoutBox_();\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.onLayoutMeasure();\n    }\n\n    if (this.isFullWidthRequested_ && !this.isFullWidthAligned_) {\n      this.isFullWidthAligned_ = true;\n      const layoutBox = this.getLayoutBox();\n\n      // Nudge into the correct horizontal position by changing side margin.\n      this.getVsync().run({\n        measure: state => {\n          state.direction =\n              computedStyle(this.win, this.element)['direction'];\n        },\n        mutate: state => {\n          if (state.direction == 'rtl') {\n            setStyle(this.element, 'marginRight', layoutBox.left, 'px');\n          } else {\n            setStyle(this.element, 'marginLeft', -layoutBox.left, 'px');\n          }\n        },\n      }, {direction: ''});\n    }\n  }\n\n  /**\n   * Measure the layout box of the iframe if we rendered it already.\n   * @private\n   */\n  measureIframeLayoutBox_() {\n    if (this.xOriginIframeHandler_ && this.xOriginIframeHandler_.iframe) {\n      const iframeBox =\n          this.getViewport().getLayoutRect(this.xOriginIframeHandler_.iframe);\n      const box = this.getLayoutBox();\n      // Cache the iframe's relative position to the amp-ad. This is\n      // necessary for fixed-position containers which \"move\" with the\n      // viewport.\n      this.iframeLayoutBox_ = moveLayoutRect(iframeBox, -box.left, -box.top);\n    }\n  }\n\n  /**\n   * @override\n   */\n  getIntersectionElementLayoutBox() {\n    if (!this.xOriginIframeHandler_ || !this.xOriginIframeHandler_.iframe) {\n      return super.getIntersectionElementLayoutBox();\n    }\n    const box = this.getLayoutBox();\n    if (!this.iframeLayoutBox_) {\n      this.measureIframeLayoutBox_();\n    }\n\n    const iframe = /** @type {!../../../src/layout-rect.LayoutRectDef} */(\n      dev().assert(this.iframeLayoutBox_));\n    return moveLayoutRect(iframe, box.left, box.top);\n  }\n\n  /** @override */\n  layoutCallback() {\n    if (this.layoutPromise_) {\n      return this.layoutPromise_;\n    }\n    user().assert(!this.isInFixedContainer_,\n        '<amp-ad> is not allowed to be placed in elements with ' +\n        'position:fixed: %s', this.element);\n\n    const consentPromise = this.getConsentState();\n    const consentPolicyId = super.getConsentPolicy();\n    const sharedDataPromise = consentPolicyId\n      ? getConsentPolicySharedData(this.getAmpDoc(), consentPolicyId)\n      : Promise.resolve(null);\n\n    this.layoutPromise_ = Promise.all(\n        [getAdCid(this), consentPromise, sharedDataPromise]).then(consents => {\n      const opt_context = {\n        clientId: consents[0] || null,\n        container: this.container_,\n        initialConsentState: consents[1],\n        consentSharedData: consents[2],\n      };\n\n      // In this path, the request and render start events are entangled,\n      // because both happen inside a cross-domain iframe.  Separating them\n      // here, though, allows us to measure the impact of ad throttling via\n      // incrementLoadingAds().\n      const iframe = getIframe(toWin(this.element.ownerDocument.defaultView),\n          this.element, this.type_, opt_context,\n          {disallowCustom: this.config.remoteHTMLDisabled});\n      this.xOriginIframeHandler_ = new AmpAdXOriginIframeHandler(\n          this);\n      return this.xOriginIframeHandler_.init(iframe);\n    });\n    incrementLoadingAds(this.win, this.layoutPromise_);\n    return this.layoutPromise_;\n  }\n\n  /**\n   * @param {boolean} inViewport\n   * @override\n   */\n  viewportCallback(inViewport) {\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.viewportCallback(inViewport);\n    }\n  }\n\n  /** @override  */\n  unlayoutCallback() {\n    this.layoutPromise_ = null;\n    this.uiHandler.applyUnlayoutUI();\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.freeXOriginIframe();\n      this.xOriginIframeHandler_ = null;\n    }\n    return true;\n  }\n\n  /** @override */\n  createPlaceholderCallback() {\n    return this.uiHandler.createPlaceholder();\n  }\n\n  /**\n   * @return {!Promise<?CONSENT_POLICY_STATE>}\n   */\n  getConsentState() {\n    const consentPolicyId = super.getConsentPolicy();\n    return consentPolicyId\n      ? getConsentPolicyState(this.getAmpDoc(), consentPolicyId)\n      : Promise.resolve(null);\n  }\n\n  /**\n  * Calculates and attempts to set the appropriate height & width for a\n  * responsive full width ad unit.\n  * @return {!Promise}\n  * @private\n  */\n  attemptFullWidthSizeChange_() {\n    const viewportSize = this.getViewport().getSize();\n    const maxHeight = Math.min(MAX_FULL_WIDTH_HEIGHT, viewportSize.height);\n    const ratio = this.config.fullWidthHeightRatio;\n    const idealHeight = Math.round(viewportSize.width / ratio);\n    const height = clamp(idealHeight, MIN_FULL_WIDTH_HEIGHT, maxHeight);\n    const {width} = viewportSize;\n    // Attempt to resize to the correct height. The width should already be\n    // 100vw, but is fixed here so that future resizes of the viewport don't\n    // affect it.\n\n    return this.attemptChangeSize(height, width).then(\n        () => {\n          dev().info(TAG_3P_IMPL, `Size change accepted: ${width}x${height}`);\n        },\n        () => {\n          dev().info(TAG_3P_IMPL, `Size change rejected: ${width}x${height}`);\n        }\n    );\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AmpAdUIHandler} from './amp-ad-ui';\nimport {CommonSignals} from '../../../src/common-signals';\nimport {LayoutPriority} from '../../../src/layout';\nimport {Services} from '../../../src/services';\nimport {addParamToUrl} from '../../../src/url';\nimport {ancestorElementsByTag} from '../../../src/dom';\nimport {\n  childElementByTag,\n  removeChildren,\n} from '../../../src/dom';\nimport {hasOwn} from '../../../src/utils/object';\nimport {isLayoutSizeDefined} from '../../../src/layout';\nimport {user} from '../../../src/log';\n\n/** @const {string} Tag name for custom ad implementation. */\nexport const TAG_AD_CUSTOM = 'amp-ad-custom';\n\n/** @var {Object} A map of promises for each value of data-url. The promise\n *  will fetch data for the URL for the ad server, and return it as a map of\n *  objects, keyed by slot; each object contains the variables to be\n *   substituted into the mustache template. */\nconst ampCustomadXhrPromises = {};\n\n/** @var {Object} a map of full urls (i.e. including the ampslots parameter)\n * for each value of data-url */\nlet ampCustomadFullUrls = null;\n\nexport class AmpAdCustom extends AMP.BaseElement {\n\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n    /** @private {?string} The base URL of the ad server for this ad */\n    this.url_ = null;\n\n    /** @private {?string} A string identifying this ad slot: the server's\n     *  responses will be keyed by slot */\n    this.slot_ = null;\n\n    /** {?AmpAdUIHandler} */\n    this.uiHandler = null;\n  }\n\n  /** @override */\n  getLayoutPriority() {\n    // Since this is AMPHTML we are trusting that it will load responsibly\n    return LayoutPriority.CONTENT;\n  }\n\n  /** @override **/\n  isLayoutSupported(layout) {\n    /** @TODO Add proper support for more layouts, and figure out which ones\n     *  we're permitting */\n    return isLayoutSizeDefined(layout);\n  }\n\n  /**\n   * Builds AmpAdUIHandler callback\n   */\n  buildCallback() {\n    this.url_ = this.element.getAttribute('data-url');\n    this.slot_ = this.element.getAttribute('data-slot');\n    // Ensure that the slot value is legal\n    user().assert(this.slot_ === null || this.slot_.match(/^[0-9a-z]+$/),\n        'custom ad slot should be alphanumeric: ' + this.slot_);\n\n    this.uiHandler = new AmpAdUIHandler(this);\n  }\n\n  /** @override */\n  layoutCallback() {\n    /** @const {string} fullUrl */\n    const fullUrl = this.getFullUrl_();\n    // if we have cached the response, find it, otherwise fetch\n    const responsePromise = ampCustomadXhrPromises[fullUrl] ||\n        Services.xhrFor(this.win).fetchJson(fullUrl).then(res => res.json());\n    if (this.slot_ !== null) {\n      // Cache this response if using `data-slot` feature so only one request\n      // is made per url\n      ampCustomadXhrPromises[fullUrl] = responsePromise;\n    }\n    return responsePromise.then(data => {\n      // We will get here when the data has been fetched from the server\n      let templateData = data;\n      if (this.slot_ !== null) {\n        templateData = hasOwn(data, this.slot_) ? data[this.slot_] :\n          null;\n      }\n\n      if (!templateData || typeof templateData != 'object') {\n        this.uiHandler.applyNoContentUI();\n        return;\n      }\n\n      templateData = this.handleTemplateData_(templateData);\n\n      this.renderStarted();\n\n      try {\n        Services.templatesFor(this.win)\n            .findAndRenderTemplate(this.element, templateData)\n            .then(renderedElement => {\n              // Get here when the template has been rendered Clear out the\n              // child template and replace it by the rendered version Note that\n              // we can't clear templates that's not ad's child because they\n              // maybe used by other ad component.\n              removeChildren(this.element);\n              this.element.appendChild(renderedElement);\n              this.signals().signal(CommonSignals.INI_LOAD);\n            });\n      } catch (e) {\n        this.uiHandler.applyNoContentUI();\n      }\n    });\n  }\n\n  /**\n   * Handles the template data response.\n   * There are two types of templateData format\n   * Format option 1\n   * {\n   *   'templateId': {},\n   *   'vars': {},\n   *   'data': {\n   *     'a': '1',\n   *     'b': '2'\n   *   }\n   * }\n   * or format option 2\n   * {\n   *  'a': '1',\n   *  'b': '2'\n   * }\n   * if `templateId` or `vars` are not specified.\n   *\n   * @param {!JsonObject} templateData\n   * @return {!JsonObject}\n   */\n  handleTemplateData_(templateData) {\n    if (childElementByTag(this.element, 'template')) {\n      // Need to check for template attribute if it's allowed in amp-ad tag\n      return templateData;\n    }\n\n    // If use remote template specified by response\n    user().assert(templateData['templateId'], 'TemplateId not specified');\n\n    user().assert(\n        templateData['data'] && typeof templateData['data'] == 'object',\n        'Template data not specified');\n\n    this.element.setAttribute('template', templateData['templateId']);\n\n    if (templateData['vars'] && typeof templateData['vars'] == 'object') {\n      // Support for vars\n      const vars = templateData['vars'];\n      const keys = Object.keys(vars);\n      for (let i = 0; i < keys.length; i++) {\n        const attrName = 'data-vars-' + keys[i];\n        try {\n          this.element.setAttribute(attrName, vars[keys[i]]);\n        } catch (e) {\n          this.user().error(TAG_AD_CUSTOM, 'Fail to set attribute: ', e);\n        }\n      }\n    }\n\n    return templateData['data'];\n  }\n\n  /** @override  */\n  unlayoutCallback() {\n    this.uiHandler.applyUnlayoutUI();\n    return true;\n  }\n\n  /** @override */\n  createPlaceholderCallback() {\n    return this.uiHandler.createPlaceholder();\n  }\n\n  /**\n   * @private getFullUrl_ Get a URL which includes a parameter indicating\n   * all slots to be fetched from this web server URL\n   * @return {string} The URL with the \"ampslots\" parameter appended\n   */\n  getFullUrl_() {\n    // If this ad doesn't have a slot defined, just return the base URL\n    if (this.slot_ === null) {\n      return /** @type {string} */ (this.url_);\n    }\n    if (ampCustomadFullUrls === null) {\n      // The array of ad urls has not yet been built, do so now.\n      ampCustomadFullUrls = {};\n      const slots = {};\n\n      // Get the parent body of this amp-ad element. It could be the body of\n      // the main document, or it could be an enclosing iframe.\n      const body = ancestorElementsByTag(this.element, 'BODY')[0];\n      const elements = body.querySelectorAll('amp-ad[type=custom]');\n      for (let index = 0; index < elements.length; index++) {\n        const elem = elements[index];\n        const url = elem.getAttribute('data-url');\n        const slotId = elem.getAttribute('data-slot');\n        if (slotId !== null) {\n          if (!(url in slots)) {\n            slots[url] = [];\n          }\n          slots[url].push(encodeURIComponent(slotId));\n        }\n      }\n      for (const baseUrl in slots) {\n        ampCustomadFullUrls[baseUrl] = addParamToUrl(baseUrl, 'ampslots',\n            slots[baseUrl].join(','));\n      }\n    }\n    return ampCustomadFullUrls[this.url_];\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use baseInstance file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getAdContainer} from '../../../src/ad-helper';\n\nexport class AmpAdUIHandler {\n\n  /**\n   * @param {!AMP.BaseElement} baseInstance\n   */\n  constructor(baseInstance) {\n    /** @private {!AMP.BaseElement} */\n    this.baseInstance_ = baseInstance;\n\n    /** @private {!Element} */\n    this.element_ = baseInstance.element;\n\n    /** @private @const {!Document} */\n    this.doc_ = baseInstance.win.document;\n\n    if (!baseInstance.getFallback()) {\n      const fallback = this.addDefaultUiComponent_('fallback');\n      if (fallback) {\n        this.baseInstance_.element.appendChild(fallback);\n      }\n    }\n  }\n\n  /**\n   * Create a default placeholder if not provided.\n   * Should be called in baseElement createPlaceholderCallback.\n   */\n  createPlaceholder() {\n    return this.addDefaultUiComponent_('placeholder');\n  }\n\n  /**\n   * Apply UI for laid out ad with no-content\n   * Order: try collapse -> apply provided fallback -> apply default fallback\n   */\n  applyNoContentUI() {\n    if (getAdContainer(this.element_) == 'AMP-STICKY-AD') {\n      // Special case: force collapse sticky-ad if no content.\n      this.baseInstance_./*OK*/collapse();\n      return;\n    }\n    // The order here is collapse > user provided fallback > default fallback\n    this.baseInstance_.attemptCollapse().catch(() => {\n      this.baseInstance_.mutateElement(() => {\n        this.baseInstance_.togglePlaceholder(false);\n        this.baseInstance_.toggleFallback(true);\n      });\n    });\n  }\n\n  /**\n   * Apply UI for unlaid out ad: Hide fallback.\n   * Note: No need to togglePlaceholder here, unlayout show it by default.\n   */\n  applyUnlayoutUI() {\n    this.baseInstance_.mutateElement(() => {\n      this.baseInstance_.toggleFallback(false);\n    });\n  }\n\n  /**\n   * @param {string} name\n   * @return {?Element}\n   * @private\n   */\n  addDefaultUiComponent_(name) {\n    if (this.element_.tagName == 'AMP-EMBED') {\n      // Do nothing for amp-embed element;\n      return null;\n    }\n    const uiComponent = this.doc_.createElement('div');\n    uiComponent.setAttribute(name, '');\n\n    const content = this.doc_.createElement('div');\n    content.classList.add('i-amphtml-ad-default-holder');\n\n    // TODO(aghassemi, #4146) i18n\n    content.setAttribute('data-ad-holder-text', 'Ad');\n    uiComponent.appendChild(content);\n\n    return uiComponent;\n  }\n\n  /**\n   * @param {number|string|undefined} height\n   * @param {number|string|undefined} width\n   * @param {number} iframeHeight\n   * @param {number} iframeWidth\n   * @return {!Promise<!Object>}\n   */\n  updateSize(height, width, iframeHeight, iframeWidth) {\n    // Calculate new width and height of the container to include the padding.\n    // If padding is negative, just use the requested width and height directly.\n    let newHeight, newWidth;\n    height = parseInt(height, 10);\n    if (!isNaN(height)) {\n      newHeight = Math.max(this.element_./*OK*/offsetHeight +\n          height - iframeHeight, height);\n    }\n    width = parseInt(width, 10);\n    if (!isNaN(width)) {\n      newWidth = Math.max(this.element_./*OK*/offsetWidth +\n          width - iframeWidth, width);\n    }\n\n    /** @type {!Object<boolean, number|undefined, number|undefined>} */\n    const resizeInfo = {\n      success: true,\n      newWidth,\n      newHeight,\n    };\n\n    if (!newHeight && !newWidth) {\n      return Promise.reject(new Error('undefined width and height'));\n    }\n\n    if (getAdContainer(this.element_) == 'AMP-STICKY-AD') {\n      // Special case: force collapse sticky-ad if no content.\n      resizeInfo.success = false;\n      return Promise.resolve(resizeInfo);\n    }\n    return this.baseInstance_.attemptChangeSize(\n        newHeight, newWidth).then(() => {\n      return resizeInfo;\n    }, () => {\n      resizeInfo.success = false;\n      return resizeInfo;\n    });\n  }\n}\n\n// Make the class available to other late loaded amp-ad implementations\n// without them having to depend on it directly.\nAMP.AmpAdUIHandler = AmpAdUIHandler;\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ADSENSE_EXPERIMENTS,\n  ADSENSE_EXP_NAMES,\n} from '../../amp-ad-network-adsense-impl/0.1/adsense-a4a-config';\nimport {\n  CONSTANTS,\n  MessageType,\n} from '../../../src/3p-frame-messaging';\nimport {CommonSignals} from '../../../src/common-signals';\nimport {Deferred} from '../../../src/utils/promise';\nimport {\n  IntersectionObserver,\n} from '../../../src/intersection-observer';\nimport {Services} from '../../../src/services';\nimport {\n  SubscriptionApi,\n  listenFor,\n  listenForOncePromise,\n  postMessageToWindows,\n} from '../../../src/iframe-helper';\nimport {dev} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {getData, loadPromise} from '../../../src/event-helper';\nimport {\n  getExperimentBranch,\n  isExperimentOn,\n} from '../../../src/experiments';\nimport {getHtml} from '../../../src/get-html';\nimport {removeElement} from '../../../src/dom';\nimport {reportErrorToAnalytics} from '../../../src/error';\nimport {setStyle} from '../../../src/style';\nimport {throttle} from '../../../src/utils/rate-limit';\n\nconst VISIBILITY_TIMEOUT = 10000;\n\nconst MIN_INABOX_POSITION_EVENT_INTERVAL = 100;\n\n\nexport class AmpAdXOriginIframeHandler {\n\n  /**\n   * @param {!./amp-ad-3p-impl.AmpAd3PImpl|!../../amp-a4a/0.1/amp-a4a.AmpA4A} baseInstance\n   */\n  constructor(baseInstance) {\n    /** @private {!Window} */\n    this.win_ = baseInstance.win;\n\n    /** @private */\n    this.baseInstance_ = baseInstance;\n\n    /** @private {!Element} */\n    this.element_ = baseInstance.element;\n\n    /** @private {?AMP.AmpAdUIHandler} */\n    this.uiHandler_ = baseInstance.uiHandler;\n\n    /** {?Element} iframe instance */\n    this.iframe = null;\n\n    /** @private {?IntersectionObserver} */\n    this.intersectionObserver_ = null;\n\n    /** @private {SubscriptionApi} */\n    this.embedStateApi_ = null;\n\n    /** @private {?SubscriptionApi} */\n    this.inaboxPositionApi_ = null;\n\n    /** @private {boolean} */\n    this.isInaboxPositionApiInit_ = false;\n\n    /** @private {!Array<!Function>} functions to unregister listeners */\n    this.unlisteners_ = [];\n\n    /** @private @const {!../../../src/service/viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(this.baseInstance_.getAmpDoc());\n\n    /** @private @const {!../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(this.baseInstance_.getAmpDoc());\n\n    /** @private {boolean} */\n    this.sendPositionPending_ = false;\n  }\n\n\n  /**\n   * Sets up listeners and iframe state for iframe containing ad creative.\n   * @param {!Element} iframe\n   * @param {boolean=} opt_isA4A when true do not listen to ad response\n   * @return {!Promise} awaiting render complete promise\n   */\n  init(iframe, opt_isA4A) {\n    dev().assert(\n        !this.iframe, 'multiple invocations of init without destroy!');\n    this.iframe = iframe;\n    this.iframe.setAttribute('scrolling', 'no');\n    this.baseInstance_.applyFillContent(this.iframe);\n    const timer = Services.timerFor(this.baseInstance_.win);\n\n    // Init IntersectionObserver service.\n    this.intersectionObserver_ = new IntersectionObserver(\n        this.baseInstance_, this.iframe, true);\n\n    this.embedStateApi_ = new SubscriptionApi(\n        this.iframe, 'send-embed-state', true,\n        () => this.sendEmbedInfo_(this.baseInstance_.isInViewport()));\n\n    // TODO(bradfrizzell): Would be better to turn this on if\n    // A4A.isXhrEnabled() is false, or if we simply decide it is\n    // ok to turn this on for all traffic.\n    if (getExperimentBranch(\n        this.win_, ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL) ==\n       ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_EXP ||\n       getExperimentBranch(this.win_, ADSENSE_EXP_NAMES.CANONICAL) ==\n        ADSENSE_EXPERIMENTS.CANONICAL_EXP ||\n       isExperimentOn(this.win_, 'inabox-position-api')) {\n      // To provide position to inabox.\n      this.inaboxPositionApi_ = new SubscriptionApi(\n          this.iframe, MessageType.SEND_POSITIONS, true, () => {\n            // TODO(@zhouyx): Make sendPosition_ only send to\n            // message origin iframe\n            this.sendPosition_();\n            this.registerPosition_();\n          });\n    }\n    // Triggered by context.reportRenderedEntityIdentifier(…) inside the ad\n    // iframe.\n    listenForOncePromise(this.iframe, 'entity-id', true)\n        .then(info => {\n          this.element_.creativeId = info.data['id'];\n        });\n\n    this.handleOneTimeRequest_(MessageType.GET_HTML, payload => {\n      const selector = payload['selector'];\n      const attributes = payload['attributes'];\n      let content = '';\n      if (this.element_.hasAttribute('data-html-access-allowed')) {\n        content = getHtml(this.baseInstance_.win, selector, attributes);\n      }\n      return Promise.resolve(content);\n    });\n\n    this.handleOneTimeRequest_(MessageType.GET_CONSENT_STATE, () => {\n      return this.baseInstance_.getConsentState().then(consentState => {\n        return {consentState};\n      });\n    });\n\n    // Install iframe resize API.\n    this.unlisteners_.push(listenFor(this.iframe, 'embed-size',\n        (data, source, origin) => {\n          if (!!data['hasOverflow']) {\n            this.element_.warnOnMissingOverflow = false;\n          }\n          this.handleResize_(data['height'], data['width'], source, origin);\n        }, true, true));\n\n    this.unlisteners_.push(this.viewer_.onVisibilityChanged(() => {\n      this.sendEmbedInfo_(this.baseInstance_.isInViewport());\n    }));\n\n    this.unlisteners_.push(listenFor(this.iframe,\n        MessageType.USER_ERROR_IN_IFRAME, data => {\n          this.userErrorForAnalytics_(data['message']);\n        }, true, true /* opt_includingNestedWindows */));\n\n    // Iframe.onload normally called by the Ad after full load.\n    const iframeLoadPromise = loadPromise(this.iframe).then(() => {\n      // Wait just a little to allow `no-content` message to arrive.\n      if (this.iframe) {\n        // Chrome does not reflect the iframe readystate.\n        this.iframe.readyState = 'complete';\n      }\n      return timer.promise(10);\n    });\n\n    // Calculate render-start and no-content signals.\n    const {\n      promise: renderStartPromise,\n      resolve: renderStartResolve,\n    } = new Deferred();\n    const {\n      promise: noContentPromise,\n      resolve: noContentResolve,\n    } = new Deferred();\n\n    if (this.baseInstance_.config &&\n            this.baseInstance_.config.renderStartImplemented) {\n      // When `render-start` is supported, these signals are mutually\n      // exclusive. Whichever arrives first wins.\n      listenForOncePromise(this.iframe,\n          ['render-start', 'no-content'], true).then(info => {\n        const {data} = info;\n        if (data['type'] == 'render-start') {\n          this.renderStart_(info);\n          renderStartResolve();\n        } else {\n          this.noContent_();\n          noContentResolve();\n        }\n      });\n    } else {\n      // If `render-start` is not supported, listen to `bootstrap-loaded`.\n      // This will avoid keeping the Ad empty until it's fully loaded, which\n      // could be a long time.\n      listenForOncePromise(this.iframe, 'bootstrap-loaded', true).then(() => {\n        this.renderStart_();\n        renderStartResolve();\n      });\n      // Likewise, no-content is observed here. However, it's impossible to\n      // assure exclusivity between `no-content` and `bootstrap-loaded` b/c\n      // `bootstrap-loaded` always arrives first.\n      listenForOncePromise(this.iframe, 'no-content', true).then(() => {\n        this.noContent_();\n        noContentResolve();\n      });\n    }\n\n    // Wait for initial load signal. Notice that this signal is not\n    // used to resolve the final layout promise because iframe may still be\n    // consuming significant network and CPU resources.\n    listenForOncePromise(this.iframe, CommonSignals.INI_LOAD, true).then(() => {\n      // TODO(dvoytenko, #7788): ensure that in-a-box \"ini-load\" message is\n      // received here as well.\n      this.baseInstance_.signals().signal(CommonSignals.INI_LOAD);\n    });\n\n    this.element_.appendChild(this.iframe);\n    if (opt_isA4A) {\n      // A4A writes creative frame directly to page once creative is received\n      // and therefore does not require render start message so attach and\n      // impose no loader delay.  Network is using renderStart or\n      // bootstrap-loaded to indicate ad request was sent, either way we know\n      // that occurred for Fast Fetch.\n      this.renderStart_();\n      renderStartResolve();\n    } else {\n      // Set iframe initially hidden which will be removed on render-start or\n      // load, whichever is earlier.\n      setStyle(this.iframe, 'visibility', 'hidden');\n    }\n\n    Promise.race([\n      renderStartPromise,\n      iframeLoadPromise,\n      timer.promise(VISIBILITY_TIMEOUT),\n    ]).then(() => {\n      if (this.iframe) {\n        setStyle(this.iframe, 'visibility', '');\n      }\n    });\n\n    // The actual ad load is eariliest of iframe.onload event and no-content.\n    return Promise.race([iframeLoadPromise, noContentPromise]);\n  }\n\n  /**\n   * @param {string} requestType\n   * @param {function(*)} getter\n   * @private\n   */\n  handleOneTimeRequest_(requestType, getter) {\n    this.unlisteners_.push(listenFor(this.iframe, requestType,\n        (info, source, origin) => {\n          if (!this.iframe) {\n            return;\n          }\n\n          const messageId = info[CONSTANTS.messageIdFieldName];\n          const payload = info[CONSTANTS.payloadFieldName];\n\n          getter(payload).then(content => {\n            const result = dict();\n            result[CONSTANTS.messageIdFieldName] = messageId;\n            result[CONSTANTS.contentFieldName] = content;\n            postMessageToWindows(\n                dev().assertElement(this.iframe), [{win: source, origin}],\n                requestType + CONSTANTS.responseTypeSuffix,\n                result, true\n            );\n          });\n        }, true /* opt_is3P */, false /* opt_includingNestedWindows */));\n  }\n\n  /**\n   * callback functon on receiving render-start\n   * @param {{data: !JsonObject}=} opt_info\n   * @private\n   */\n  renderStart_(opt_info) {\n    this.baseInstance_.renderStarted();\n    if (!opt_info) {\n      return;\n    }\n    const data = getData(opt_info);\n    this.handleResize_(\n        data['height'], data['width'], opt_info['source'], opt_info['origin']);\n  }\n\n  /**\n   * Cleans up the listeners on the cross domain ad iframe and frees the\n   * iframe resource.\n   * @param {boolean=} opt_keep\n   */\n  freeXOriginIframe(opt_keep) {\n    this.cleanup_();\n    // If ask to keep the iframe.\n    // Use in the case of no-content and iframe is a master iframe.\n    if (opt_keep) {\n      return;\n    }\n    if (this.iframe) {\n      removeElement(this.iframe);\n      this.iframe = null;\n    }\n  }\n\n  /**\n   * Cleans up listeners on the ad, and apply the default UI for ad.\n   * @private\n   */\n  noContent_() {\n    if (!this.iframe) {\n      // unlayout already called\n      return;\n    }\n    this.freeXOriginIframe(this.iframe.name.indexOf('_master') >= 0);\n    this.uiHandler_.applyNoContentUI();\n  }\n\n  /**\n   * Cleans up listeners on the ad iframe.\n   * @private\n   */\n  cleanup_() {\n    this.unlisteners_.forEach(unlistener => unlistener());\n    this.unlisteners_.length = 0;\n    if (this.embedStateApi_) {\n      this.embedStateApi_.destroy();\n      this.embedStateApi_ = null;\n    }\n    if (this.inaboxPositionApi_) {\n      this.inaboxPositionApi_.destroy();\n      this.inaboxPositionApi_ = null;\n    }\n    if (this.intersectionObserver_) {\n      this.intersectionObserver_.destroy();\n      this.intersectionObserver_ = null;\n    }\n  }\n\n  /**\n   * Updates the element's dimensions to accommodate the iframe's\n   * requested dimensions. Notifies the window that request the resize\n   * of success or failure.\n   * @param {number|string|undefined} height\n   * @param {number|string|undefined} width\n   * @param {!Window} source\n   * @param {string} origin\n   * @private\n   */\n  handleResize_(height, width, source, origin) {\n    this.baseInstance_.getVsync().mutate(() => {\n      if (!this.iframe) {\n        // iframe can be cleanup before vsync.\n        return;\n      }\n      const iframeHeight = this.iframe./*OK*/offsetHeight;\n      const iframeWidth = this.iframe./*OK*/offsetWidth;\n      this.uiHandler_.updateSize(height, width, iframeHeight,\n          iframeWidth).then(info => {\n        this.sendEmbedSizeResponse_(info.success,\n            info.newWidth, info.newHeight, source, origin);\n      }, () => {});\n    });\n  }\n\n  /**\n   * Sends a response to the window which requested a resize.\n   * @param {boolean} success\n   * @param {number} requestedWidth\n   * @param {number} requestedHeight\n   * @param {!Window} source\n   * @param {string} origin\n   * @private\n   */\n  sendEmbedSizeResponse_(success, requestedWidth, requestedHeight, source,\n    origin) {\n    // The iframe may have been removed by the time we resize.\n    if (!this.iframe) {\n      return;\n    }\n    postMessageToWindows(\n        this.iframe,\n        [{win: source, origin}],\n        success ? 'embed-size-changed' : 'embed-size-denied',\n        dict({\n          'requestedWidth': requestedWidth,\n          'requestedHeight': requestedHeight,\n        }),\n        true);\n  }\n\n  /**\n   * @param {boolean} inViewport\n   * @private\n   */\n  sendEmbedInfo_(inViewport) {\n    if (!this.embedStateApi_) {\n      return;\n    }\n    this.embedStateApi_.send('embed-state', dict({\n      'inViewport': inViewport,\n      'pageHidden': !this.viewer_.isVisible(),\n    }));\n  }\n\n  /**\n   * Retrieve iframe position entry in next animation frame.\n   * @private\n   */\n  getIframePositionPromise_() {\n    return this.viewport_.getClientRectAsync(\n        dev().assertElement(this.iframe)).then(position => {\n      dev().assert(position,\n          'element clientRect should intersects with root clientRect');\n      const viewport = this.viewport_.getRect();\n      return dict({\n        'targetRect': position,\n        'viewportRect': viewport,\n      });\n    });\n  }\n\n  /** @private */\n  sendPosition_() {\n    if (this.sendPositionPending_) {\n      // Only send once in single animation frame.\n      return;\n    }\n\n    this.sendPositionPending_ = true;\n    this.getIframePositionPromise_().then(position => {\n      this.sendPositionPending_ = false;\n      this.inaboxPositionApi_.send(MessageType.POSITION, position);\n    });\n  }\n\n  /** @private */\n  registerPosition_() {\n    if (this.isInaboxPositionApiInit_) {\n      // only register to viewport scroll/resize once\n      return;\n    }\n\n    this.isInaboxPositionApiInit_ = true;\n    // Send window scroll/resize event to viewport.\n    this.unlisteners_.push(this.viewport_.onScroll(throttle(this.win_, () => {\n      this.getIframePositionPromise_().then(position => {\n        this.inaboxPositionApi_.send(MessageType.POSITION, position);\n      });\n    }, MIN_INABOX_POSITION_EVENT_INTERVAL)));\n    this.unlisteners_.push(this.viewport_.onResize(() => {\n      this.getIframePositionPromise_().then(position => {\n        this.inaboxPositionApi_.send(MessageType.POSITION, position);\n      });\n    }));\n  }\n\n  /**\n   * See BaseElement method.\n   * @param {boolean} inViewport\n   */\n  viewportCallback(inViewport) {\n    if (this.intersectionObserver_) {\n      this.intersectionObserver_.onViewportCallback(inViewport);\n    }\n    this.sendEmbedInfo_(inViewport);\n  }\n\n\n  /**\n   * See BaseElement method.\n   */\n  onLayoutMeasure() {\n    // When the framework has the need to remeasure us, our position might\n    // have changed. Send an intersection record if needed.\n    if (this.intersectionObserver_) {\n      this.intersectionObserver_.fire();\n    }\n  }\n\n  /**\n   * @param {string} message\n   * @private\n   */\n  userErrorForAnalytics_(message) {\n    if (typeof message == 'string') {\n      const e = new Error(message);\n      e.name = '3pError';\n      reportErrorToAnalytics(e, this.baseInstance_.win);\n    }\n  }\n}\n\n// Make the class available to other late loaded amp-ad implementations\n// without them having to depend on it directly.\nAMP.AmpAdXOriginIframeHandler = AmpAdXOriginIframeHandler;\n","/* Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AmpAd3PImpl} from './amp-ad-3p-impl';\nimport {AmpAdCustom} from './amp-ad-custom';\nimport {CSS} from '../../../build/amp-ad-0.1.css';\nimport {Services} from '../../../src/services';\nimport {adConfig} from '../../../ads/_config';\nimport {getA4ARegistry} from '../../../ads/_a4a-config';\nimport {hasOwn} from '../../../src/utils/object';\nimport {user} from '../../../src/log';\n\n\n/**\n * Construct ad network type-specific tag and script name.  Note that this\n * omits the version number and '.js' suffix for the extension script, which\n * will be handled by the extension loader.\n *\n * @param {string} type\n * @return {string}\n * @private\n */\nfunction networkImplementationTag(type) {\n  return `amp-ad-network-${type}-impl`;\n}\n\nexport class AmpAd extends AMP.BaseElement {\n\n  /** @override */\n  isLayoutSupported(unusedLayout) {\n    // TODO(jridgewell, #5980, #8218): ensure that unupgraded calls are not\n    // done for `isLayoutSupported`.\n    return true;\n  }\n\n  /** @override */\n  upgradeCallback() {\n    const a4aRegistry = getA4ARegistry();\n    // Block whole ad load if a consent is needed.\n    /** @const {string} */\n    const consentId = this.element.getAttribute('data-consent-notification-id');\n    const consent = consentId\n      ? Services.userNotificationManagerForDoc(this.element)\n          .then(service => service.get(consentId))\n      : Promise.resolve();\n    const type = this.element.getAttribute('type');\n    return consent.then(() => {\n      const isCustom = type === 'custom';\n      user().assert(isCustom || hasOwn(adConfig, type)\n          || hasOwn(a4aRegistry, type), `Unknown ad type \"${type}\"`);\n\n      // Check for the custom ad type (no ad network, self-service)\n      if (isCustom) {\n        return new AmpAdCustom(this.element);\n      }\n\n      this.win.ampAdSlotIdCounter = this.win.ampAdSlotIdCounter || 0;\n      const slotId = this.win.ampAdSlotIdCounter++;\n\n      return new Promise(resolve => {\n        this.getVsync().mutate(() => {\n          this.element.setAttribute('data-amp-slot-index', slotId);\n\n          const useRemoteHtml = (!(adConfig[type] || {}).remoteHTMLDisabled &&\n              this.win.document.querySelector('meta[name=amp-3p-iframe-src]'));\n          // TODO(tdrl): Check amp-ad registry to see if they have this already.\n          // TODO(a4a-cam): Shorten this predicate.\n          if (!a4aRegistry[type] ||\n              // Note that predicate execution may have side effects.\n              !a4aRegistry[type](this.win, this.element, useRemoteHtml)) {\n            // Either this ad network doesn't support Fast Fetch, its Fast\n            // Fetch implementation has explicitly opted not to handle this\n            // tag, or this page uses remote.html which is inherently\n            // incompatible with Fast Fetch. Fall back to Delayed Fetch.\n            return resolve(new AmpAd3PImpl(this.element));\n          }\n\n          const extensionTagName = networkImplementationTag(type);\n          this.element.setAttribute('data-a4a-upgrade-type', extensionTagName);\n          resolve(Services.extensionsFor(this.win)\n              .loadElementClass(extensionTagName)\n              .then(ctor => new ctor(this.element))\n              .catch(error => {\n              // Work around presubmit restrictions.\n                const TAG = this.element.tagName;\n                // Report error and fallback to 3p\n                this.user().error(\n                    TAG, 'Unable to load ad implementation for type ',\n                    type, ', falling back to 3p, error: ', error);\n                return new AmpAd3PImpl(this.element);\n              }));\n        });\n      });\n    });\n  }\n}\n\nAMP.extension('amp-ad', '0.1', AMP => {\n  AMP.registerElement('amp-ad', AmpAd, CSS);\n  AMP.registerElement('amp-embed', AmpAd);\n});\n","/* Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/utils/promise';\nimport {Services} from '../../../src/services';\nimport {user} from '../../../src/log';\n\n/**\n * Store loading ads info within window to ensure it can be properly stored\n * across separately compiled binaries that share load throttling.\n * @const ID of window variable used to track 3p ads waiting to load.\n */\nconst LOADING_ADS_WIN_ID_ = '3pla';\n\n/** @private {?Promise} resolves when no 3p throttle */\nlet throttlePromise_ = null;\n/** @private {?Function} resolver for throttle promise */\nlet throttlePromiseResolver_ = null;\n\n/**\n * @param {!Window} win\n * @return {boolean} Whether 3p is currently throttled.\n */\nexport function is3pThrottled(win) {\n  return !!win[LOADING_ADS_WIN_ID_];\n}\n\n/** @return {!Promise} resolves when no 3p throttle */\nexport function waitFor3pThrottle() {\n  return throttlePromise_ || Promise.resolve();\n}\n\n/**\n * @param {!Element} element\n * @return {?number} number if explicit value should be used otherwise super\n *    default should be used.\n */\nexport function getAmpAdRenderOutsideViewport(element) {\n  const rawValue = element.getAttribute('data-loading-strategy');\n  if (rawValue == null) {\n    return null;\n  }\n  // Ad opts into lazier loading strategy where we only load ads that are\n  // at closer given number of viewports away.\n  if (rawValue == 'prefer-viewability-over-views' || rawValue == '') {\n    return 1.25;\n  }\n  const errorMessage =\n      'Value of data-loading-strategy should be a float number in range ' +\n      'of [0, 3], but got ' + rawValue;\n  const viewportNumber =\n      user().assertNumber(parseFloat(rawValue), errorMessage);\n  user().assert(viewportNumber >= 0 && viewportNumber <= 3, errorMessage);\n  return viewportNumber;\n}\n\n/**\n * Increments loading ads count for throttling.\n * @param {!Window} win\n * @param {!Promise=} opt_loadingPromise\n */\nexport function incrementLoadingAds(win, opt_loadingPromise) {\n  if (win[LOADING_ADS_WIN_ID_] === undefined) {\n    win[LOADING_ADS_WIN_ID_] = 0;\n  }\n  win[LOADING_ADS_WIN_ID_]++;\n\n  if (!throttlePromise_) {\n    const deferred = new Deferred();\n    throttlePromise_ = deferred.promise;\n    throttlePromiseResolver_ = deferred.resolve;\n  }\n\n  Services.timerFor(win)\n      .timeoutPromise(1000, opt_loadingPromise)\n      .catch(() => {})\n      .then(() => {\n        if (!--win[LOADING_ADS_WIN_ID_]) {\n          throttlePromiseResolver_();\n          throttlePromise_ = null;\n          throttlePromiseResolver_ = null;\n        }\n      });\n}\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {internalListenImplementation} from './event-helper-listen';\nimport {parseJson} from './json';\n\n\n/** @const */\nconst AMP_MESSAGE_PREFIX = 'amp-';\nexport const CONSTANTS = {\n  responseTypeSuffix: '-result',\n  messageIdFieldName: 'messageId',\n  payloadFieldName: 'payload',\n  contentFieldName: 'content',\n};\n\n/** @enum {string} */\nexport const MessageType = {\n  // For amp-ad\n  SEND_EMBED_STATE: 'send-embed-state',\n  EMBED_STATE: 'embed-state',\n  SEND_EMBED_CONTEXT: 'send-embed-context',\n  EMBED_CONTEXT: 'embed-context',\n  SEND_INTERSECTIONS: 'send-intersections',\n  INTERSECTION: 'intersection',\n  EMBED_SIZE: 'embed-size',\n  EMBED_SIZE_CHANGED: 'embed-size-changed',\n  EMBED_SIZE_DENIED: 'embed-size-denied',\n  NO_CONTENT: 'no-content',\n  GET_HTML: 'get-html',\n  GET_CONSENT_STATE: 'get-consent-state',\n\n  // For the frame to be placed in full overlay mode for lightboxes\n  FULL_OVERLAY_FRAME: 'full-overlay-frame',\n  FULL_OVERLAY_FRAME_RESPONSE: 'full-overlay-frame-response',\n  CANCEL_FULL_OVERLAY_FRAME: 'cancel-full-overlay-frame',\n  CANCEL_FULL_OVERLAY_FRAME_RESPONSE: 'cancel-full-overlay-frame-response',\n\n  // For amp-inabox\n  SEND_POSITIONS: 'send-positions',\n  POSITION: 'position',\n\n  // For amp-analytics' iframe-transport\n  SEND_IFRAME_TRANSPORT_EVENTS: 'send-iframe-transport-events',\n  IFRAME_TRANSPORT_EVENTS: 'iframe-transport-events',\n  IFRAME_TRANSPORT_RESPONSE: 'iframe-transport-response',\n\n  // For user-error-in-iframe\n  USER_ERROR_IN_IFRAME: 'user-error-in-iframe',\n};\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n\n/**\n * Serialize an AMP post message. Output looks like:\n * 'amp-011481323099490{\"type\":\"position\",\"sentinel\":\"12345\",\"foo\":\"bar\"}'\n * @param {string} type\n * @param {string} sentinel\n * @param {JsonObject=} data\n * @param {?string=} rtvVersion\n * @return {string}\n */\nexport function serializeMessage(type, sentinel, data = dict(),\n  rtvVersion = null) {\n  // TODO: consider wrap the data in a \"data\" field. { type, sentinal, data }\n  const message = data;\n  message['type'] = type;\n  message['sentinel'] = sentinel;\n  return AMP_MESSAGE_PREFIX + (rtvVersion || '') + JSON.stringify(message);\n}\n\n\n/**\n * Deserialize an AMP post message.\n * Returns null if it's not valid AMP message format.\n *\n * @param {*} message\n * @return {?JsonObject|undefined}\n */\nexport function deserializeMessage(message) {\n  if (!isAmpMessage(message)) {\n    return null;\n  }\n  const startPos = message.indexOf('{');\n  dev().assert(startPos != -1, 'JSON missing in %s', message);\n  try {\n    return parseJson(message.substr(startPos));\n  } catch (e) {\n    dev().error('MESSAGING', 'Failed to parse message: ' + message, e);\n    return null;\n  }\n}\n\n\n/**\n *  Returns true if message looks like it is an AMP postMessage\n *  @param {*} message\n *  @return {boolean}\n */\nexport function isAmpMessage(message) {\n  return (typeof message == 'string' &&\n      message.indexOf(AMP_MESSAGE_PREFIX) == 0 &&\n      message.indexOf('{') != -1);\n}\n\n/** @typedef {{creativeId: string, message: string}} */\nexport let IframeTransportEvent;\n// An event, and the transport ID of the amp-analytics tags that\n// generated it. For instance if the creative with transport\n// ID 2 sends \"hi\", then an IframeTransportEvent would look like:\n// { creativeId: \"2\", message: \"hi\" }\n// If the creative with transport ID 2 sent that, and also sent \"hello\",\n// and the creative with transport ID 3 sends \"goodbye\" then an *array* of 3\n// AmpAnalyticsIframeTransportEvent would be sent to the 3p frame like so:\n// [\n//   { creativeId: \"2\", message: \"hi\" }, // An AmpAnalyticsIframeTransportEvent\n//   { creativeId: \"2\", message: \"hello\" }, // Another\n//   { creativeId: \"3\", message: \"goodbye\" } // And another\n// ]\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assertHttpsUrl, parseUrlDeprecated} from './url';\nimport {dev, user} from './log';\nimport {dict} from './utils/object';\nimport {getContextMetadata} from '../src/iframe-attributes';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\nimport {setStyle} from './style';\nimport {startsWith} from './string';\nimport {tryParseJson} from './json';\nimport {urls} from './config';\n\n/** @type {!Object<string,number>} Number of 3p frames on the for that type. */\nlet count = {};\n\n/** @type {string} */\nlet overrideBootstrapBaseUrl;\n\n/** @const {string} */\nconst TAG = '3p-frame';\n\n/**\n * Produces the attributes for the ad template.\n * @param {!Window} parentWindow\n * @param {!AmpElement} element\n * @param {string=} opt_type\n * @param {Object=} opt_context\n * @return {!JsonObject} Contains\n *     - type, width, height, src attributes of <amp-ad> tag. These have\n *       precedence over the data- attributes.\n *     - data-* attributes of the <amp-ad> tag with the \"data-\" removed.\n *     - A _context object for internal use.\n */\nfunction getFrameAttributes(parentWindow, element, opt_type, opt_context) {\n  const type = opt_type || element.getAttribute('type');\n  user().assert(type, 'Attribute type required for <amp-ad>: %s', element);\n  const sentinel = generateSentinel(parentWindow);\n  let attributes = dict();\n  // Do these first, as the other attributes have precedence.\n  addDataAndJsonAttributes_(element, attributes);\n  attributes = getContextMetadata(parentWindow, element, sentinel,\n      attributes);\n  attributes['type'] = type;\n  Object.assign(attributes['_context'], opt_context);\n  return attributes;\n}\n\n/**\n * Creates the iframe for the embed. Applies correct size and passes the embed\n * attributes to the frame via JSON inside the fragment.\n * @param {!Window} parentWindow\n * @param {!AmpElement} parentElement\n * @param {string=} opt_type\n * @param {Object=} opt_context\n * @param {!{\n *   disallowCustom,\n *   allowFullscreen,\n * }=} opt_options Options for the created iframe.\n * @return {!Element} The iframe.\n */\nexport function getIframe(\n  parentWindow, parentElement, opt_type, opt_context,\n  {disallowCustom, allowFullscreen} = {}) {\n  // Check that the parentElement is already in DOM. This code uses a new and\n  // fast `isConnected` API and thus only used when it's available.\n  dev().assert(\n      parentElement['isConnected'] === undefined ||\n      parentElement['isConnected'] === true,\n      'Parent element must be in DOM');\n  const attributes =\n      getFrameAttributes(parentWindow, parentElement, opt_type, opt_context);\n  const iframe = parentWindow.document.createElement('iframe');\n\n  if (!count[attributes['type']]) {\n    count[attributes['type']] = 0;\n  }\n  count[attributes['type']] += 1;\n\n  const baseUrl = getBootstrapBaseUrl(\n      parentWindow, undefined, opt_type, disallowCustom);\n  const host = parseUrlDeprecated(baseUrl).hostname;\n  // This name attribute may be overwritten if this frame is chosen to\n  // be the master frame. That is ok, as we will read the name off\n  // for our uses before that would occur.\n  // @see https://github.com/ampproject/amphtml/blob/master/3p/integration.js\n  const name = JSON.stringify(dict({\n    'host': host,\n    'type': attributes['type'],\n    // https://github.com/ampproject/amphtml/pull/2955\n    'count': count[attributes['type']],\n    'attributes': attributes,\n  }));\n\n  iframe.src = baseUrl;\n  iframe.ampLocation = parseUrlDeprecated(baseUrl);\n  iframe.name = name;\n  // Add the check before assigning to prevent IE throw Invalid argument error\n  if (attributes['width']) {\n    iframe.width = attributes['width'];\n  }\n  if (attributes['height']) {\n    iframe.height = attributes['height'];\n  }\n  if (attributes['title']) {\n    iframe.title = attributes['title'];\n  }\n  if (allowFullscreen) {\n    iframe.setAttribute('allowfullscreen', 'true');\n  }\n  iframe.setAttribute('scrolling', 'no');\n  setStyle(iframe, 'border', 'none');\n  /** @this {!Element} */\n  iframe.onload = function() {\n    // Chrome does not reflect the iframe readystate.\n    this.readyState = 'complete';\n  };\n  if (isExperimentOn(parentWindow, 'no-sync-xhr-in-ads')) {\n    // Block synchronous XHR in ad. These are very rare, but super bad for UX\n    // as they block the UI thread for the arbitrary amount of time until the\n    // request completes.\n    iframe.setAttribute('allow', 'sync-xhr \\'none\\';');\n  }\n  iframe.setAttribute('data-amp-3p-sentinel',\n      attributes['_context']['sentinel']);\n  return iframe;\n}\n\n/**\n * Copies data- attributes from the element into the attributes object.\n * Removes the data- from the name and capitalizes after -. If there\n * is an attribute called json, parses the JSON and adds it to the\n * attributes.\n * @param {!Element} element\n * @param {!JsonObject} attributes The destination.\n * visibleForTesting\n */\nexport function addDataAndJsonAttributes_(element, attributes) {\n  const {dataset} = element;\n  for (const name in dataset) {\n    // data-vars- is reserved for amp-analytics\n    // see https://github.com/ampproject/amphtml/blob/master/extensions/amp-analytics/analytics-vars.md#variables-as-data-attribute\n    if (!startsWith(name, 'vars')) {\n      attributes[name] = dataset[name];\n    }\n  }\n  const json = element.getAttribute('json');\n  if (json) {\n    const obj = tryParseJson(json);\n    if (obj === undefined) {\n      throw user().createError(\n          'Error parsing JSON in json attribute in element %s',\n          element);\n    }\n    for (const key in obj) {\n      attributes[key] = obj[key];\n    }\n  }\n}\n\n/**\n * Preloads URLs related to the bootstrap iframe.\n * @param {!Window} win\n * @param {!./preconnect.Preconnect} preconnect\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n */\nexport function preloadBootstrap(\n  win, preconnect, opt_type, opt_disallowCustom) {\n  const url = getBootstrapBaseUrl(win, undefined, opt_type, opt_disallowCustom);\n  preconnect.preload(url, 'document');\n\n  // While the URL may point to a custom domain, this URL will always be\n  // fetched by it.\n  const scriptUrl = getMode().localDev\n    ? getAdsLocalhost(win) + '/dist.3p/current/integration.js'\n    : `${urls.thirdParty}/$internalRuntimeVersion$/f.js`;\n  preconnect.preload(scriptUrl, 'script');\n}\n\n/**\n * Returns the base URL for 3p bootstrap iframes.\n * @param {!Window} parentWindow\n * @param {boolean=} opt_strictForUnitTest\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n * @return {string}\n * @visibleForTesting\n */\nexport function getBootstrapBaseUrl(\n  parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) {\n  // The value is cached in a global variable called `bootstrapBaseUrl`;\n  const {bootstrapBaseUrl} = parentWindow;\n  if (bootstrapBaseUrl) {\n    return bootstrapBaseUrl;\n  }\n  return parentWindow.bootstrapBaseUrl = getCustomBootstrapBaseUrl(\n      parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) ||\n      getDefaultBootstrapBaseUrl(parentWindow);\n}\n\n/**\n * @param {string} url\n */\nexport function setDefaultBootstrapBaseUrlForTesting(url) {\n  overrideBootstrapBaseUrl = url;\n}\n\n/**\n * @param {*} win\n */\nexport function resetBootstrapBaseUrlForTesting(win) {\n  win.bootstrapBaseUrl = undefined;\n  win.defaultBootstrapSubDomain = undefined;\n}\n\n/**\n * Returns the default base URL for 3p bootstrap iframes.\n * @param {!Window} parentWindow\n * @param {string=} opt_srcFileBasename\n * @return {string}\n */\nexport function getDefaultBootstrapBaseUrl(parentWindow, opt_srcFileBasename) {\n  const srcFileBasename = opt_srcFileBasename || 'frame';\n  if (getMode().localDev || getMode().test) {\n    return overrideBootstrapBaseUrl || getAdsLocalhost(parentWindow)\n          + '/dist.3p/'\n          + (getMode().minified ? `$internalRuntimeVersion$/${srcFileBasename}`\n            : `current/${srcFileBasename}.max`)\n          + '.html';\n  }\n  // Ensure same sub-domain is used despite potentially different file.\n  parentWindow.defaultBootstrapSubDomain =\n      parentWindow.defaultBootstrapSubDomain || getSubDomain(parentWindow);\n  return 'https://' + parentWindow.defaultBootstrapSubDomain +\n      `.${urls.thirdPartyFrameHost}/$internalRuntimeVersion$/` +\n      `${srcFileBasename}.html`;\n}\n\n/**\n * @param {!Window} win\n * @return {string}\n */\nfunction getAdsLocalhost(win) {\n  let adsUrl = urls.thirdParty; // local dev with a non-localhost server\n  if (adsUrl.indexOf('ampproject.net') > -1) {\n    adsUrl = 'http://ads.localhost'; // local dev with a localhost server\n  }\n  return adsUrl + ':' + (win.location.port || win.parent.location.port);\n}\n\n/**\n * Sub domain on which the 3p iframe will be hosted.\n * Because we only calculate the URL once per page, this function is only\n * called once and hence all frames on a page use the same URL.\n * @param {!Window} win\n * @return {string}\n * @visibleForTesting\n */\nexport function getSubDomain(win) {\n  return 'd-' + getRandom(win);\n}\n\n/**\n * Generates a random non-negative integer.\n * @param {!Window} win\n * @return {string}\n */\nexport function getRandom(win) {\n  let rand;\n  if (win.crypto && win.crypto.getRandomValues) {\n    // By default use 2 32 bit integers.\n    const uint32array = new Uint32Array(2);\n    win.crypto.getRandomValues(uint32array);\n    rand = String(uint32array[0]) + uint32array[1];\n  } else {\n    // Fall back to Math.random.\n    rand = String(win.Math.random()).substr(2) + '0';\n  }\n  return rand;\n}\n\n/**\n * Returns the custom base URL for 3p bootstrap iframes if it exists.\n * Otherwise null.\n * @param {!Window} parentWindow\n * @param {boolean=} opt_strictForUnitTest\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n * @return {?string}\n */\nfunction getCustomBootstrapBaseUrl(\n  parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) {\n  const meta = parentWindow.document\n      .querySelector('meta[name=\"amp-3p-iframe-src\"]');\n  if (!meta) {\n    return null;\n  }\n  if (opt_disallowCustom) {\n    user().error(TAG, `3p iframe url disabled for ${opt_type || 'unknown'}`);\n    return null;\n  }\n  const url = assertHttpsUrl(meta.getAttribute('content'), meta);\n  user().assert(url.indexOf('?') == -1,\n      '3p iframe url must not include query string %s in element %s.',\n      url, meta);\n  // This is not a security primitive, we just don't want this to happen in\n  // practice. People could still redirect to the same origin, but they cannot\n  // redirect to the proxy origin which is the important one.\n  const parsed = parseUrlDeprecated(url);\n  user().assert((parsed.hostname == 'localhost' && !opt_strictForUnitTest) ||\n      parsed.origin != parseUrlDeprecated(parentWindow.location.href).origin,\n  '3p iframe url must not be on the same origin as the current document ' +\n      '%s (%s) in element %s. See https://github.com/ampproject/amphtml' +\n      '/blob/master/spec/amp-iframe-origin-policy.md for details.', url,\n  parsed.origin, meta);\n  return url + '?$internalRuntimeVersion$';\n}\n\n/**\n * Returns a randomized sentinel value for 3p iframes.\n * The format is \"%d-%d\" with the first value being the depth of current\n * window in the window hierarchy and the second a random integer.\n * @param {!Window} parentWindow\n * @return {string}\n * @visibleForTesting\n */\nexport function generateSentinel(parentWindow) {\n  let windowDepth = 0;\n  for (let win = parentWindow; win && win != win.parent; win = win.parent) {\n    windowDepth++;\n  }\n  return String(windowDepth) + '-' + getRandom(parentWindow);\n}\n\n/**\n * Resets the count of each 3p frame type\n * @visibleForTesting\n */\nexport function resetCountForTesting() {\n  count = {};\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {adConfig} from '../ads/_config';\nimport {dev} from '../src/log';\n\n/**\n * @param {AMP.BaseElement} adElement\n * @return {!Promise<string|undefined>} A promise for a CID or undefined if\n *     - the ad network does not request one or\n *     - `amp-analytics` which provides the CID service was not installed.\n */\nexport function getAdCid(adElement) {\n  const config = adConfig[adElement.element.getAttribute('type')];\n  if (!config || !config.clientIdScope) {\n    return Promise.resolve();\n  }\n  return getOrCreateAdCid(adElement.getAmpDoc(), config.clientIdScope,\n      config.clientIdCookieName);\n}\n\n/**\n * @param {!./service/ampdoc-impl.AmpDoc} ampDoc\n * @param {string} clientIdScope\n * @param {string=} opt_clientIdCookieName\n * @param {number=} opt_timeout\n * @return {!Promise<string|undefined>} A promise for a CID or undefined.\n */\nexport function getOrCreateAdCid(\n  ampDoc, clientIdScope, opt_clientIdCookieName, opt_timeout) {\n  const timeout = isNaN(opt_timeout) || opt_timeout == null ?\n    1000 : opt_timeout;\n  const cidPromise = Services.cidForDoc(ampDoc).then(cidService => {\n    if (!cidService) {\n      return;\n    }\n    return cidService.get({\n      scope: dev().assertString(clientIdScope),\n      createCookieIfNotPresent: true,\n      cookieName: opt_clientIdCookieName,\n    }, Promise.resolve(undefined)).catch(error => {\n      // Not getting a CID is not fatal.\n      dev().error('AD-CID', error);\n      return undefined;\n    });\n  });\n  // The CID should never be crucial for an ad. If it does not come within\n  // 1 second, assume it will never arrive.\n  return Services.timerFor(ampDoc.win)\n      .timeoutPromise(timeout, cidPromise, 'cid timeout').catch(error => {\n        // Timeout is not fatal.\n        dev().warn('AD-CID', error);\n        return undefined;\n      });\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {computedStyle} from './style';\nimport {dev} from './log';\nimport {getParentWindowFrameElement} from './service';\n\nconst AD_CONTAINER_PROP = '__AMP__AD_CONTAINER';\n\n/**\n * Tags that are allowed to have fixed positioning\n * @const {!Object<string, boolean>}\n */\nconst CONTAINERS = {\n  'AMP-FX-FLYING-CARPET': true,\n  'AMP-LIGHTBOX': true,\n  'AMP-STICKY-AD': true,\n  'AMP-LIGHTBOX-GALLERY': true,\n};\n\n/**\n * Determines if an element is fixed-positioned.\n * OK to use, because it's only called from onLayoutMeasure\n * @param {!Element} el\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPositionFixed(el, win) {\n  const {position} = computedStyle(win, el);\n  // We consider sticky positions as fixed, since they can be fixed.\n  return position == 'fixed' || position == 'sticky';\n}\n\n/**\n * @param {!Element} element\n * @param {!Window} win\n * @return {boolean} whether the element position is allowed. If the element\n * belongs to CONTAINERS, it is allowed to be position fixed.\n * If the element has a position fixed ancestor, it is not allowed.\n * This should only be called when a layout on the page was just forced\n * anyway.\n */\nexport function isAdPositionAllowed(element, win) {\n  let hasFixedAncestor = false;\n  let containers = 0;\n  let el = element;\n  do {\n    if (CONTAINERS[el.tagName]) {\n      // The containers must not themselves be contained in a fixed-position\n      // element. Continue the search.\n      containers++;\n      hasFixedAncestor = false;\n    } else if (isPositionFixed(dev().assertElement(el), win)) {\n      // Because certain blessed elements may contain a position fixed\n      // container (which contain an ad), we continue to search the\n      // ancestry tree.\n      hasFixedAncestor = true;\n    }\n    el = el.parentElement;\n  } while (el && el.tagName != 'BODY');\n  return !hasFixedAncestor && containers <= 1;\n}\n\n/**\n * Returns the blessed container element tagName if the ad is contained by one.\n * This is called during layout measure.\n * @param {!Element} element\n * @return {?string}\n */\nexport function getAdContainer(element) {\n  if (element[AD_CONTAINER_PROP] === undefined) {\n    let el = element.parentElement;\n    while (el && el.tagName != 'BODY') {\n      if (CONTAINERS[el.tagName]) {\n        return element[AD_CONTAINER_PROP] = el.tagName;\n      }\n      el = el.parentElement;\n    }\n    element[AD_CONTAINER_PROP] = null;\n  }\n  return element[AD_CONTAINER_PROP];\n}\n\n/**\n * Gets the resource ID of the amp-ad element containing the passed node.\n * If there is no containing amp-ad tag, then null will be returned.\n * TODO(jonkeller): Investigate whether non-A4A use case is needed. Issue 11436\n * @param {!Element} node\n * @param {!Window} topWin\n * @return {?string}\n */\nexport function getAmpAdResourceId(node, topWin) {\n  try {\n    const frameParent = getParentWindowFrameElement(node, topWin).parentElement;\n    if (frameParent.nodeName == 'AMP-AD') {\n      return String(frameParent.getResourceId());\n    }\n  } catch (e) {\n  }\n  // Whether we entered the catch above (e.g. due to attempt to access\n  // across xdomain boundary), or failed to enter the if further above, the\n  // node is not within a friendly amp-ad tag. So, there is no amp-ad\n  // resource ID. How to handle that is up to the caller, but see TODO above.\n  return null;\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common AMP events.\n * @enum {string}\n */\nexport const AmpEvents = {\n  BUILT: 'amp:built',\n  DOM_UPDATE: 'amp:dom-update',\n  VISIBILITY_CHANGE: 'amp:visibilitychange', // https://github.com/ampproject/amphtml/blob/master/ads/README.md#page-visibility\n  // The following codes are only used for testing.\n  // TODO(choumx): Move these to a separate enum so they can be DCE'd.\n  ATTACHED: 'amp:attached',\n  STUBBED: 'amp:stubbed',\n  LOAD_START: 'amp:load:start',\n  LOAD_END: 'amp:load:end',\n  ERROR: 'amp:error',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\n\n/**\n * Helper method to trigger analytics event if amp-analytics is available.\n * TODO: Do not expose this function\n * @param {!Element} target\n * @param {string} eventType\n * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n */\nexport function triggerAnalyticsEvent(target, eventType, opt_vars) {\n  Services.analyticsForDocOrNull(target).then(analytics => {\n    if (!analytics) {\n      return;\n    }\n    analytics.triggerEventForTarget(target, eventType, opt_vars);\n  });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Commonly used signals across different elements and documents.\n * @enum {string}\n */\nexport const CommonSignals = {\n\n  /**\n   * The element has been built.\n   */\n  BUILT: 'built',\n\n  /**\n   * The initial contents of an element/document/embed have been loaded.\n   */\n  INI_LOAD: 'ini-load',\n\n  /**\n   * The element has been loaded.\n   */\n  LOAD_END: 'load-end',\n\n  /**\n   * The element has started loading.\n   */\n  LOAD_START: 'load-start',\n\n  /**\n   * Rendering has been confirmed to have been started.\n   */\n  RENDER_START: 'render-start',\n\n  /**\n   * The element has been unlaid out.\n   */\n  UNLOAD: 'unload',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file will be imported by 3P scripts.\n\n/**\n * Possible consent policy state to proceed with.\n * @enum {number}\n */\nexport const CONSENT_POLICY_STATE = {\n  // Enum value has external dependency. Please do not change existing value.\n  // If new values are added, please notify the AMP for Ads team to assure\n  // correct Real Time Config behavior is maintained for Fast Fetch.\n  SUFFICIENT: 1,\n  INSUFFICIENT: 2,\n  UNKNOWN_NOT_REQUIRED: 3,\n  UNKNOWN: 4,\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSENT_POLICY_STATE, // eslint-disable-line no-unused-vars\n} from './consent-state';\nimport {Services} from './services';\n\n/**\n * Returns a promise that resolve when all consent state the policy wait\n * for resolve. Or if consent service is not available.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} policyId\n * @return {!Promise<?CONSENT_POLICY_STATE>}\n */\nexport function getConsentPolicyState(ampdoc, policyId) {\n  return Services.consentPolicyServiceForDocOrNull(ampdoc)\n      .then(consentPolicy => {\n        if (!consentPolicy) {\n          return null;\n        }\n        return consentPolicy.whenPolicyResolved(\n            /** @type {string} */ (policyId));\n      });\n}\n\n/**\n * Returns a promise that resolves to a sharedData retrieved from consent\n * remote endpoint.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} policyId\n * @return {!Promise<?Object>}\n */\nexport function getConsentPolicySharedData(ampdoc, policyId) {\n  return Services.consentPolicyServiceForDocOrNull(ampdoc)\n      .then(consentPolicy => {\n        if (!consentPolicy) {\n          return null;\n        }\n        return consentPolicy.getMergedSharedData(\n            /** @type {string} */ (policyId));\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptsInNode(head).includes(extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {AmpEvents} from './amp-events';\nimport {Services} from './services';\nimport {\n  USER_ERROR_SENTINEL,\n  dev,\n  duplicateErrorIfNecessary,\n  isUserErrorEmbed,\n  isUserErrorMessage,\n} from './log';\nimport {experimentTogglesOrNull, getBinaryType, isCanary} from './experiments';\nimport {exponentialBackoff} from './exponential-backoff';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\nimport {\n  isLoadErrorMessage,\n} from './event-helper';\nimport {isProxyOrigin} from './url';\nimport {makeBodyVisible} from './style-installer';\nimport {startsWith} from './string';\nimport {triggerAnalyticsEvent} from './analytics';\nimport {urls} from './config';\n\n/**\n * @const {string}\n */\nconst CANCELLED = 'CANCELLED';\n\n/**\n * @const {string}\n */\nconst BLOCK_BY_CONSENT = 'BLOCK_BY_CONSENT';\n\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD = 0.001;\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst USER_ERROR_THROTTLE_THRESHOLD = 0.1;\n\n\n/**\n * Collects error messages, so they can be included in subsequent reports.\n * That allows identifying errors that might be caused by previous errors.\n */\nlet accumulatedErrorMessages = self.AMPErrors || [];\n// Use a true global, to avoid multi-module inclusion issues.\nself.AMPErrors = accumulatedErrorMessages;\n\n/**\n * Pushes element into array, keeping at most the most recent limit elements\n *\n * @param {!Array<T>} array\n * @param {T} element\n * @param {number} limit\n * @template T\n */\nfunction pushLimit(array, element, limit) {\n  if (array.length >= limit) {\n    array.splice(0, array.length - limit + 1);\n  }\n  array.push(element);\n}\n\n/**\n * A wrapper around our exponentialBackoff, to lazy initialize it to avoid an\n * un-DCE'able side-effect.\n * @param {function()} work the function to execute after backoff\n * @return {number} the setTimeout id\n */\nlet reportingBackoff = function(work) {\n  // Set reportingBackoff as the lazy-created function. JS Vooodoooo.\n  reportingBackoff = exponentialBackoff(1.5);\n  return reportingBackoff(work);\n};\n\n/**\n * Attempts to stringify a value, falling back to String.\n * @param {*} value\n * @return {string}\n */\nfunction tryJsonStringify(value) {\n  try {\n    // Cast is fine, because we really don't care here. Just trying.\n    return JSON.stringify(/** @type {!JsonObject} */ (value));\n  } catch (e) {\n    return String(value);\n  }\n}\n\n/**\n * The true JS engine, as detected by inspecting an Error stack. This should be\n * used with the userAgent to tell definitely. I.e., Chrome on iOS is really a\n * Safari JS engine.\n */\nlet detectedJsEngine;\n\n/**\n * @param {!Window} win\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n */\nexport function reportErrorForWin(win, error, opt_associatedElement) {\n  reportError(error, opt_associatedElement);\n  if (error && !!win && isUserErrorMessage(error.message)\n      && !isUserErrorEmbed(error.message)) {\n    reportErrorToAnalytics(/** @type {!Error} */(error), win);\n  }\n}\n\n/**\n * Reports an error. If the error has an \"associatedElement\" property\n * the element is marked with the `i-amphtml-element-error` and displays\n * the message itself. The message is always send to the console.\n * If the error has a \"messageArray\" property, that array is logged.\n * This way one gets the native fidelity of the console for things like\n * elements instead of stringification.\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n * @return {!Error}\n */\nexport function reportError(error, opt_associatedElement) {\n  try {\n    // Convert error to the expected type.\n    let isValidError;\n    if (error) {\n      if (error.message !== undefined) {\n        error = duplicateErrorIfNecessary(/** @type {!Error} */(error));\n        isValidError = true;\n      } else {\n        const origError = error;\n        error = new Error(tryJsonStringify(origError));\n        error.origError = origError;\n      }\n    } else {\n      error = new Error('Unknown error');\n    }\n    // Report if error is not an expected type.\n    if (!isValidError && getMode().localDev && !getMode().test) {\n      setTimeout(function() {\n        const rethrow = new Error(\n            '_reported_ Error reported incorrectly: ' + error);\n        throw rethrow;\n      });\n    }\n\n    if (error.reported) {\n      return /** @type {!Error} */ (error);\n    }\n    error.reported = true;\n\n    // Update element.\n    const element = opt_associatedElement || error.associatedElement;\n    if (element && element.classList) {\n      element.classList.add('i-amphtml-error');\n      if (getMode().development) {\n        element.classList.add('i-amphtml-element-error');\n        element.setAttribute('error-message', error.message);\n      }\n    }\n\n    // Report to console.\n    if (self.console) {\n      const output = (console.error || console.log);\n      if (error.messageArray) {\n        output.apply(console, error.messageArray);\n      } else {\n        if (element) {\n          output.call(console, error.message, element);\n        } else if (!getMode().minified) {\n          output.call(console, error.stack);\n        } else {\n          output.call(console, error.message);\n        }\n      }\n    }\n    if (element && element.dispatchCustomEventForTesting) {\n      element.dispatchCustomEventForTesting(AmpEvents.ERROR, error.message);\n    }\n\n    // 'call' to make linter happy. And .call to make compiler happy\n    // that expects some @this.\n    reportErrorToServer['call'](undefined, undefined, undefined, undefined,\n        undefined, error);\n  } catch (errorReportingError) {\n    setTimeout(function() {\n      throw errorReportingError;\n    });\n  }\n  return /** @type {!Error} */ (error);\n}\n\n/**\n * Returns an error for a cancellation of a promise.\n * @return {!Error}\n */\nexport function cancellation() {\n  return new Error(CANCELLED);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isCancellation(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, CANCELLED);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, CANCELLED);\n  }\n  return false;\n}\n\n/**\n * Returns an error for component blocked by consent\n * @return {!Error}\n */\nexport function blockedByConsentError() {\n  return new Error(BLOCK_BY_CONSENT);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isBlockedByConsent(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, BLOCK_BY_CONSENT);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, BLOCK_BY_CONSENT);\n  }\n  return false;\n}\n\n\n/**\n * Install handling of global unhandled exceptions.\n * @param {!Window} win\n */\nexport function installErrorReporting(win) {\n  win.onerror = /** @type {!Function} */ (reportErrorToServer);\n  win.addEventListener('unhandledrejection', event => {\n    if (event.reason &&\n      (event.reason.message === CANCELLED ||\n      event.reason.message === BLOCK_BY_CONSENT)) {\n      event.preventDefault();\n      return;\n    }\n    reportError(event.reason || new Error('rejected promise ' + event));\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @this {!Window|undefined}\n */\nfunction reportErrorToServer(message, filename, line, col, error) {\n  // Make an attempt to unhide the body.\n  if (this && this.document) {\n    makeBodyVisible(this.document);\n  }\n  if (getMode().localDev || getMode().development || getMode().test) {\n    return;\n  }\n  let hasNonAmpJs = false;\n  try {\n    hasNonAmpJs = detectNonAmpJs(self);\n  } catch (ignore) {\n    // Ignore errors during error report generation.\n  }\n  if (hasNonAmpJs && Math.random() > 0.01) {\n    // Only report 1% of errors on pages with non-AMP JS.\n    // These errors can almost never be acted upon, but spikes such as\n    // due to buggy browser extensions may be helpful to notify authors.\n    return;\n  }\n  const data = getErrorReportData(message, filename, line, col, error,\n      hasNonAmpJs);\n  if (data) {\n    // Report the error to viewer if it has the capability. The data passed\n    // to the viewer is exactly the same as the data passed to the server\n    // below.\n    maybeReportErrorToViewer(this, data);\n    reportingBackoff(() => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', urls.errorReporting, true);\n      xhr.send(JSON.stringify(data));\n    });\n  }\n}\n\n/**\n * Passes the given error data to the viewer if the following criteria is met:\n * - The viewer is a trusted viewer\n * - The viewer has the `errorReporter` capability\n * - The AMP doc is in single doc mode\n * - The AMP doc is opted-in for error interception (`<html>` tag has the\n *   `report-errors-to-viewer` attribute)\n *\n * @param {!Window} win\n * @param {!JsonObject} data Data from `getErrorReportData`.\n * @return {!Promise<boolean>} `Promise<True>` if the error was sent to the\n *     viewer, `Promise<False>` otherwise.\n * @visibleForTesting\n */\nexport function maybeReportErrorToViewer(win, data) {\n  const ampdocService = Services.ampdocServiceFor(win);\n  if (!ampdocService.isSingleDoc()) {\n    return Promise.resolve(false);\n  }\n  const ampdocSingle = ampdocService.getAmpDoc();\n  const htmlElement = ampdocSingle.getRootNode().documentElement;\n  const docOptedIn = htmlElement.hasAttribute('report-errors-to-viewer');\n  if (!docOptedIn) {\n    return Promise.resolve(false);\n  }\n\n  const viewer = Services.viewerForDoc(ampdocSingle);\n  if (!viewer.hasCapability('errorReporter')) {\n    return Promise.resolve(false);\n  }\n\n  return viewer.isTrustedViewer().then(viewerTrusted => {\n    if (!viewerTrusted) {\n      return false;\n    }\n    viewer.sendMessage('error', data);\n    return true;\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @param {boolean} hasNonAmpJs\n * @return {!JsonObject|undefined} The data to post\n * visibleForTesting\n */\nexport function getErrorReportData(message, filename, line, col, error,\n  hasNonAmpJs) {\n  let expected = false;\n  if (error) {\n    if (error.message) {\n      message = error.message;\n    } else {\n      // This should never be a string, but sometimes it is.\n      message = String(error);\n    }\n    // An \"expected\" error is still an error, i.e. some features are disabled\n    // or not functioning fully because of it. However, it's an expected\n    // error. E.g. as is the case with some browser API missing (storage).\n    // Thus, the error can be classified differently by log aggregators.\n    // The main goal is to monitor that an \"expected\" error doesn't deteriorate\n    // over time. It's impossible to completely eliminate it.\n    if (error.expected) {\n      expected = true;\n    }\n  }\n  if (!message) {\n    message = 'Unknown error';\n  }\n  if (/_reported_/.test(message)) {\n    return;\n  }\n  if (message == CANCELLED) {\n    return;\n  }\n\n  const detachedWindow = !(self && self.window);\n  const throttleBase = Math.random();\n\n  // We throttle load errors and generic \"Script error.\" errors\n  // that have no information and thus cannot be acted upon.\n  if (isLoadErrorMessage(message) ||\n    // See https://github.com/ampproject/amphtml/issues/7353\n    // for context.\n    message == 'Script error.' ||\n    // Window has become detached, really anything can happen\n    // at this point.\n    detachedWindow) {\n    expected = true;\n\n    if (throttleBase > NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD) {\n      return;\n    }\n  }\n\n  const isUserError = isUserErrorMessage(message);\n\n  // Only report a subset of user errors.\n  if (isUserError && throttleBase > USER_ERROR_THROTTLE_THRESHOLD) {\n    return;\n  }\n\n  // This is the App Engine app in\n  // https://github.com/ampproject/error-tracker\n  // It stores error reports via https://cloud.google.com/error-reporting/\n  // for analyzing production issues.\n  const data = /** @type {!JsonObject} */ (Object.create(null));\n  data['v'] = getMode().rtvVersion;\n  data['noAmp'] = hasNonAmpJs ? '1' : '0';\n  data['m'] = message.replace(USER_ERROR_SENTINEL, '');\n  data['a'] = isUserError ? '1' : '0';\n\n  // Errors are tagged with \"ex\" (\"expected\") label to allow loggers to\n  // classify these errors as benchmarks and not exceptions.\n  data['ex'] = expected ? '1' : '0';\n  data['dw'] = detachedWindow ? '1' : '0';\n\n  let runtime = '1p';\n  if (self.context && self.context.location) {\n    data['3p'] = '1';\n    runtime = '3p';\n  } else if (getMode().runtime) {\n    runtime = getMode().runtime;\n  }\n  data['rt'] = runtime;\n\n  // TODO(erwinm): Remove ca when all systems read `bt` instead of `ca` to\n  // identify js binary type.\n  data['ca'] = isCanary(self) ? '1' : '0';\n\n  // Pass binary type.\n  data['bt'] = getBinaryType(self);\n\n  if (self.location.ancestorOrigins && self.location.ancestorOrigins[0]) {\n    data['or'] = self.location.ancestorOrigins[0];\n  }\n  if (self.viewerState) {\n    data['vs'] = self.viewerState;\n  }\n  // Is embedded?\n  if (self.parent && self.parent != self) {\n    data['iem'] = '1';\n  }\n\n  if (self.AMP && self.AMP.viewer) {\n    const resolvedViewerUrl = self.AMP.viewer.getResolvedViewerUrl();\n    const messagingOrigin = self.AMP.viewer.maybeGetMessagingOrigin();\n    if (resolvedViewerUrl) {\n      data['rvu'] = resolvedViewerUrl;\n    }\n    if (messagingOrigin) {\n      data['mso'] = messagingOrigin;\n    }\n  }\n\n  if (!detectedJsEngine) {\n    detectedJsEngine = detectJsEngineFromStack();\n  }\n  data['jse'] = detectedJsEngine;\n\n  const exps = [];\n  const experiments = experimentTogglesOrNull(self);\n  for (const exp in experiments) {\n    const on = experiments[exp];\n    exps.push(`${exp}=${on ? '1' : '0'}`);\n  }\n  data['exps'] = exps.join(',');\n\n  if (error) {\n    const tagName = error.associatedElement\n      ? error.associatedElement.tagName\n      : 'u'; // Unknown\n    data['el'] = tagName;\n\n    if (error.args) {\n      data['args'] = JSON.stringify(error.args);\n    }\n\n    if (!isUserError && !error.ignoreStack && error.stack) {\n      data['s'] = error.stack;\n    }\n\n    error.message += ' _reported_';\n  } else {\n    data['f'] = filename || '';\n    data['l'] = line || '';\n    data['c'] = col || '';\n  }\n  data['r'] = self.document.referrer;\n  data['ae'] = accumulatedErrorMessages.join(',');\n  data['fr'] = self.location.originalHash || self.location.hash;\n\n  pushLimit(accumulatedErrorMessages, message, 25);\n\n  return data;\n}\n\n/**\n * Returns true if it appears like there is non-AMP JS on the\n * current page.\n * @param {!Window} win\n * @return {boolean}\n * @visibleForTesting\n */\nexport function detectNonAmpJs(win) {\n  const scripts = win.document.querySelectorAll('script[src]');\n  for (let i = 0; i < scripts.length; i++) {\n    if (!isProxyOrigin(scripts[i].src.toLowerCase())) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Resets accumulated error messages for testing\n */\nexport function resetAccumulatedErrorMessagesForTesting() {\n  accumulatedErrorMessages = [];\n}\n\n/**\n * Does a series of checks on the stack of an thrown error to determine the\n * JS engine that is currently running. This gives a bit more information than\n * just the UserAgent, since browsers often allow overriding it to \"emulate\"\n * mobile.\n * @return {string}\n * @visibleForTesting\n */\nexport function detectJsEngineFromStack() {\n  /** @constructor */\n  function Fn() {}\n  Fn.prototype.t = function() {\n    throw new Error('message');\n  };\n  const object = new Fn();\n  try {\n    object.t();\n  } catch (e) {\n    const {stack} = e;\n\n    // Safari only mentions the method name.\n    if (startsWith(stack, 't@')) {\n      return 'Safari';\n    }\n\n    // Firefox mentions \"prototype\".\n    if (stack.indexOf('.prototype.t@') > -1) {\n      return 'Firefox';\n    }\n\n    // IE looks like Chrome, but includes a context for the base stack line.\n    // Explicitly, we're looking for something like:\n    // \"    at Global code (https://example.com/app.js:1:200)\" or\n    // \"    at Anonymous function (https://example.com/app.js:1:200)\"\n    // vs Chrome which has:\n    // \"    at https://example.com/app.js:1:200\"\n    const last = stack.split('\\n').pop();\n    if (/\\bat .* \\(/i.test(last)) {\n      return 'IE';\n    }\n\n    // Finally, chrome includes the error message in the stack.\n    if (startsWith(stack, 'Error: message')) {\n      return 'Chrome';\n    }\n  }\n\n  return 'unknown';\n}\n\n/**\n * @param {!Error} error\n * @param {!Window} win\n */\nexport function reportErrorToAnalytics(error, win) {\n  if (isExperimentOn(win, 'user-error-reporting')) {\n    const vars = {\n      'errorName': error.name,\n      'errorMessage': error.message,\n    };\n    triggerAnalyticsEvent(getRootElement_(win), 'user-error', vars);\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {!Element}\n * @private\n */\nfunction getRootElement_(win) {\n  const root = Services.ampdocServiceFor(win).getAmpDoc().getRootNode();\n  return dev().assertElement(root.documentElement || root.body || root);\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(function()): number} Function that when invoked will\n *     call the passed in function. On every invocation the next\n *     invocation of the passed in function will be exponentially\n *     later. Returned function returns timeout id.\n */\nexport function exponentialBackoff(opt_base) {\n  const getTimeout = exponentialBackoffClock(opt_base);\n  return work => {\n    return setTimeout(work, getTimeout());\n  };\n}\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(): number} Function that when invoked will return\n *    a number that exponentially grows per invocation.\n */\nexport function exponentialBackoffClock(opt_base) {\n  const base = opt_base || 2;\n  let count = 0;\n  return () => {\n    let wait = Math.pow(base, count++);\n    wait += getJitter(wait);\n    return wait * 1000;\n  };\n}\n\n/**\n * Add jitter to avoid the thundering herd. This can e.g. happen when\n * we poll a backend and it fails for everyone at the same time.\n * We add up to 30% (default) longer or shorter than the given time.\n *\n * @param {number} wait the amount if base milliseconds\n * @param {number=} opt_perc the min/max percentage to add or sutract\n * @return {number}\n */\nexport function getJitter(wait, opt_perc) {\n  opt_perc = opt_perc || .3;\n  let jitter = wait * opt_perc * Math.random();\n  if (Math.random() > .5) {\n    jitter *= -1;\n  }\n  return jitter;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {startsWith} from './string';\n\n/** @type {!Array<string>} */\nconst excludedTags = ['script', 'style'];\n\n/** @type {!Array<string>} */\nconst allowedAmpTags = ['amp-accordion', 'amp-app-banner', 'amp-carousel',\n  'amp-fit-text', 'amp-form', 'amp-selector', 'amp-sidebar'];\n\n/** @type {!Array<string>} */\nconst allowedAttributes = ['action', 'alt', 'class', 'disabled', 'height',\n  'href', 'id', 'name', 'placeholder', 'readonly', 'src', 'tabindex',\n  'title', 'type', 'value', 'width'];\n\n/**\n * Returns content of HTML node\n * @param {!Window} win\n * @param {string} selector - CSS selector of the node to take content from\n * @param {!Array<string>} attrs - tag attributes to be left in the stringified\n * HTML\n * @return {string}\n */\nexport function getHtml(win, selector, attrs) {\n  const root = win.document.querySelector(selector);\n  const result = [];\n\n  if (root) {\n    appendToResult(root, attrs, result);\n  }\n\n  return result.join('').replace(/\\s{2,}/g, ' ');\n}\n\n/**\n * @param {!Element} node - node to take content from\n * @param {!Array<string>} attrs - tag attributes to be left in the stringified HTML\n * @param {!Array<string>} result\n */\nfunction appendToResult(node, attrs, result) {\n  const stack = [node];\n  const allowedAttrs = attrs.filter(attr => {\n    return allowedAttributes.includes(attr);\n  });\n\n  while (stack.length > 0) {\n    node = stack.pop();\n\n    if (typeof node === 'string') {\n      result.push(node);\n    } else if (node.nodeType === Node.TEXT_NODE) {\n      result.push(node.textContent);\n    } else if (node.nodeType === Node.ELEMENT_NODE && isApplicableNode(node)) {\n      appendOpenTag(node, allowedAttrs, result);\n      stack.push(`</${node.tagName.toLowerCase()}>`);\n\n      for (let child = node.lastChild; child; child = child.previousSibling) {\n        stack.push(child);\n      }\n    }\n  }\n}\n\n\n/**\n *\n * @param {!Element} node\n * @return {boolean}\n */\nfunction isApplicableNode(node) {\n  const tagName = node.tagName.toLowerCase();\n\n  if (startsWith(tagName, 'amp-')) {\n    return !!(allowedAmpTags.includes(tagName) && node.textContent);\n  } else {\n    return !!(!excludedTags.includes(tagName) && node.textContent);\n  }\n}\n\n\n/**\n *\n * @param {!Element} node\n * @param {!Array<string>} attrs\n * @param {Array<string>} result\n */\nfunction appendOpenTag(node, attrs, result) {\n  result.push(`<${node.tagName.toLowerCase()}`);\n\n  attrs.forEach(function(attr) {\n    if (node.hasAttribute(attr)) {\n      result.push(` ${attr}=\"${node.getAttribute(attr)}\"`);\n    }\n  });\n\n  result.push('>');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {DomFingerprint} from './utils/dom-fingerprint';\nimport {Services} from './services';\nimport {dict} from './utils/object.js';\nimport {experimentToggles, isCanary} from './experiments';\nimport {getLengthNumeral} from './layout';\nimport {getModeObject} from './mode-object';\nimport {urls} from './config';\n\n/**\n * Produces the attributes for the ad template.\n * @param {!Window} parentWindow\n * @param {!AmpElement} element\n * @param {string} sentinel\n * @param {!JsonObject=} attributes\n * @return {!JsonObject}\n */\nexport function getContextMetadata(\n  parentWindow, element, sentinel, attributes) {\n  const startTime = Date.now();\n  const width = element.getAttribute('width');\n  const height = element.getAttribute('height');\n  attributes = attributes ? attributes : dict();\n  attributes['width'] = getLengthNumeral(width);\n  attributes['height'] = getLengthNumeral(height);\n  if (element.getAttribute('title')) {\n    attributes['title'] = element.getAttribute('title');\n  }\n  let locationHref = parentWindow.location.href;\n  // This is really only needed for tests, but whatever. Children\n  // see us as the logical origin, so telling them we are about:srcdoc\n  // will fail ancestor checks.\n  if (locationHref == 'about:srcdoc') {\n    locationHref = parentWindow.parent.location.href;\n  }\n\n  const docInfo = Services.documentInfoForDoc(element);\n  const viewer = Services.viewerForDoc(element);\n  const referrer = viewer.getUnconfirmedReferrerUrl();\n\n  // TODO(alanorozco): Redesign data structure so that fields not exposed by\n  // AmpContext are not part of this object.\n  const layoutRect = element.getPageLayoutBox();\n  attributes['_context'] = dict({\n    'ampcontextVersion': '$internalRuntimeVersion$',\n    'ampcontextFilepath': urls.thirdParty + '/$internalRuntimeVersion$' +\n        '/ampcontext-v0.js',\n    'sourceUrl': docInfo.sourceUrl,\n    'referrer': referrer,\n    'canonicalUrl': docInfo.canonicalUrl,\n    'pageViewId': docInfo.pageViewId,\n    'location': {\n      'href': locationHref,\n    },\n    'startTime': startTime,\n    'tagName': element.tagName,\n    'mode': getModeObject(),\n    'canary': isCanary(parentWindow),\n    'hidden': !viewer.isVisible(),\n    'initialLayoutRect': layoutRect ? {\n      'left': layoutRect.left,\n      'top': layoutRect.top,\n      'width': layoutRect.width,\n      'height': layoutRect.height,\n    } : null,\n    'initialIntersection': element.getIntersectionChangeEntry(),\n    'domFingerprint': DomFingerprint.generate(element),\n    'experimentToggles': experimentToggles(parentWindow),\n    'sentinel': sentinel,\n  });\n  const adSrc = element.getAttribute('src');\n  if (adSrc) {\n    attributes['src'] = adSrc;\n  }\n  return attributes;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addAttributesToElement, closestBySelector} from './dom';\nimport {deserializeMessage, isAmpMessage} from './3p-frame-messaging';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {filterSplice} from './utils/array';\nimport {getData} from './event-helper';\nimport {parseUrlDeprecated} from './url';\nimport {setStyle} from './style';\nimport {tryParseJson} from './json';\n\n/**\n * Sentinel used to force unlistening after a iframe is detached.\n * @type {string}\n */\nconst UNLISTEN_SENTINEL = 'unlisten';\n\n/**\n * @typedef {{\n *   frame: !Element,\n *   events: !Object<string, !Array<function(!JsonObject)>>\n * }}\n */\nlet WindowEventsDef;\n\n/**\n * Returns a mapping from a URL's origin to an array of windows and their\n * listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {boolean=} opt_create create the mapping if it does not exist\n * @return {?Object<string, !Array<!WindowEventsDef>>}\n */\nfunction getListenFors(parentWin, opt_create) {\n  let {listeningFors} = parentWin;\n\n  if (!listeningFors && opt_create) {\n    listeningFors = parentWin.listeningFors = Object.create(null);\n  }\n  return listeningFors || null;\n}\n\n/**\n * Returns an array of WindowEventsDef that have had any listenFor listeners\n * registered for this sentinel.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {boolean=} opt_create create the array if it does not exist\n * @return {?Array<!WindowEventsDef>}\n */\nfunction getListenForSentinel(parentWin, sentinel, opt_create) {\n  const listeningFors = getListenFors(parentWin, opt_create);\n  if (!listeningFors) {\n    return listeningFors;\n  }\n\n  let listenSentinel = listeningFors[sentinel];\n  if (!listenSentinel && opt_create) {\n    listenSentinel = listeningFors[sentinel] = [];\n  }\n  return listenSentinel || null;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {!Element} iframe the iframe element who's context will trigger the\n *     event\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {\n  const {origin} = parseUrlDeprecated(iframe.src);\n  const sentinel = getSentinel_(iframe, opt_is3P);\n  const listenSentinel = getListenForSentinel(parentWin, sentinel, true);\n\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    if (we.frame === iframe) {\n      windowEvents = we;\n      break;\n    }\n  }\n\n  if (!windowEvents) {\n    windowEvents = {\n      frame: iframe,\n      origin,\n      events: Object.create(null),\n    };\n    listenSentinel.push(windowEvents);\n  }\n\n  return windowEvents.events;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {string} origin the source window's origin\n * @param {?Window} triggerWin the window that triggered the event\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getListenForEvents(parentWin, sentinel, origin, triggerWin) {\n  const listenSentinel = getListenForSentinel(parentWin, sentinel);\n\n  if (!listenSentinel) {\n    return listenSentinel;\n  }\n\n  // Find the entry for the frame.\n  // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to\n  //     speed up this process.\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    const {contentWindow} = we.frame;\n    if (!contentWindow) {\n      setTimeout(dropListenSentinel, 0, listenSentinel);\n    } else if (sentinel === 'amp') {\n      // A non-3P code path, origin must match.\n      if (we.origin === origin && contentWindow == triggerWin) {\n        windowEvents = we;\n        break;\n      }\n    } else if (triggerWin == contentWindow ||\n        isDescendantWindow(contentWindow, triggerWin)) {\n      // 3p code path, we may accept messages from nested frames.\n      windowEvents = we;\n      break;\n    }\n  }\n\n  return windowEvents ? windowEvents.events : null;\n}\n\n/**\n * Checks whether one window is a descendant of another by climbing\n * the parent chain.\n * @param {?Window} ancestor potential ancestor window\n * @param {?Window} descendant potential descendant window\n * @return {boolean}\n */\nfunction isDescendantWindow(ancestor, descendant) {\n  for (let win = descendant; win && win != win.parent; win = win.parent) {\n    if (win == ancestor) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Removes any listenFors registed on listenSentinel that do not have\n * a contentWindow (the frame was removed from the DOM tree).\n * @param {!Array<!WindowEventsDef>} listenSentinel\n */\nfunction dropListenSentinel(listenSentinel) {\n  const noopData = dict({'sentinel': UNLISTEN_SENTINEL});\n\n  for (let i = listenSentinel.length - 1; i >= 0; i--) {\n    const windowEvents = listenSentinel[i];\n\n    if (!windowEvents.frame.contentWindow) {\n      listenSentinel.splice(i, 1);\n\n      const {events} = windowEvents;\n      for (const name in events) {\n        // Splice here, so that each unlisten does not shift the array\n        events[name].splice(0, Infinity).forEach(event => {\n          event(noopData);\n        });\n      }\n    }\n  }\n}\n\n/**\n * Registers the global listenFor event listener if it has yet to be.\n * @param {?Window} parentWin\n */\nfunction registerGlobalListenerIfNeeded(parentWin) {\n  if (parentWin.listeningFors) {\n    return;\n  }\n  const listenForListener = function(event) {\n    if (!getData(event)) {\n      return;\n    }\n    const data = parseIfNeeded(getData(event));\n    if (!data || !data['sentinel']) {\n      return;\n    }\n\n    const listenForEvents = getListenForEvents(\n        parentWin,\n        data['sentinel'],\n        event.origin,\n        event.source\n    );\n    if (!listenForEvents) {\n      return;\n    }\n\n    let listeners = listenForEvents[data['type']];\n    if (!listeners) {\n      return;\n    }\n\n    // We slice to avoid issues with adding another listener or unlistening\n    // during iteration. We could move to a Doubly Linked List with\n    // backtracking, but that's overly complicated.\n    listeners = listeners.slice();\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener(data, event.source, event.origin);\n    }\n  };\n\n  parentWin.addEventListener('message', listenForListener);\n}\n\n/**\n * Allows listening for message from the iframe. Returns an unlisten\n * function to remove the listener.\n *\n * @param {?Element} iframe\n * @param {string} typeOfMessage\n * @param {?function(!JsonObject, !Window, string)} callback Called when a\n *     message of this type arrives for this iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @param {boolean=} opt_includingNestedWindows set to true if a messages from\n *     nested frames should also be accepted.\n * @return {!UnlistenDef}\n */\nexport function listenFor(\n  iframe, typeOfMessage, callback, opt_is3P, opt_includingNestedWindows) {\n  dev().assert(iframe.src, 'only iframes with src supported');\n  dev().assert(!iframe.parentNode, 'cannot register events on an attached ' +\n      'iframe. It will cause hair-pulling bugs like #2942');\n  dev().assert(callback);\n  const parentWin = iframe.ownerDocument.defaultView;\n\n  registerGlobalListenerIfNeeded(parentWin);\n\n  const listenForEvents = getOrCreateListenForEvents(\n      parentWin,\n      iframe,\n      opt_is3P\n  );\n\n\n  let events = listenForEvents[typeOfMessage] ||\n    (listenForEvents[typeOfMessage] = []);\n\n  let unlisten;\n  let listener = function(data, source, origin) {\n    // Exclude nested frames if necessary.\n    // Note that the source was already verified to be either the contentWindow\n    // of the iframe itself or a descendant window within it.\n    if (!opt_includingNestedWindows && source != iframe.contentWindow) {\n      return;\n    }\n\n    if (data.sentinel == UNLISTEN_SENTINEL) {\n      unlisten();\n      return;\n    }\n    callback(data, source, origin);\n  };\n\n  events.push(listener);\n\n  return unlisten = function() {\n    if (listener) {\n      const index = events.indexOf(listener);\n      if (index > -1) {\n        events.splice(index, 1);\n      }\n      // Make sure references to the unlisten function do not keep\n      // alive too much.\n      listener = null;\n      events = null;\n      callback = null;\n    }\n  };\n}\n\n/**\n * Returns a promise that resolves when one of given messages has been observed\n * for the first time. And remove listener for all other messages.\n * @param {!Element} iframe\n * @param {string|!Array<string>} typeOfMessages\n * @param {boolean=} opt_is3P\n * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string}>}\n */\nexport function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {\n  const unlistenList = [];\n  if (typeof typeOfMessages == 'string') {\n    typeOfMessages = [typeOfMessages];\n  }\n  return new Promise(resolve => {\n    for (let i = 0; i < typeOfMessages.length; i++) {\n      const message = typeOfMessages[i];\n      const unlisten = listenFor(iframe, message, (data, source, origin) => {\n        for (let i = 0; i < unlistenList.length; i++) {\n          unlistenList[i]();\n        }\n        resolve({data, source, origin});\n      }, opt_is3P);\n      unlistenList.push(unlisten);\n    }\n  });\n}\n\n/**\n * Posts a message to the iframe.\n * @param {!Element} iframe The iframe.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {string} targetOrigin origin of the target.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessage(iframe, type, object, targetOrigin, opt_is3P) {\n  postMessageToWindows(iframe,\n      [{win: iframe.contentWindow, origin: targetOrigin}], type, object,\n      opt_is3P);\n}\n\n/**\n * Posts an identical message to multiple target windows with the same\n * sentinel.\n * The message is serialized only once.\n * @param {!Element} iframe The iframe.\n * @param {!Array<{win: !Window, origin: string}>} targets to send the message\n *     to, pairs of window and its origin.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessageToWindows(iframe, targets, type, object, opt_is3P) {\n  if (!iframe.contentWindow) {\n    return;\n  }\n  object['type'] = type;\n  object['sentinel'] = getSentinel_(iframe, opt_is3P);\n  let payload = object;\n  if (opt_is3P) {\n    // Serialize ourselves because that is much faster in Chrome.\n    payload = 'amp-' + JSON.stringify(object);\n  }\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i];\n    target.win./*OK*/postMessage(payload, target.origin);\n  }\n}\n\n/**\n * Gets the sentinel string.\n * @param {!Element} iframe The iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {string} Sentinel string.\n * @private\n */\nfunction getSentinel_(iframe, opt_is3P) {\n  return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';\n}\n\n/**\n * JSON parses event.data if it needs to be\n * @param {*} data\n * @return {?JsonObject} object message\n * @private\n * @visibleForTesting\n */\nexport function parseIfNeeded(data) {\n  if (typeof data == 'string') {\n    if (data.charAt(0) == '{') {\n      data = tryParseJson(data, e => {\n        dev().warn('IFRAME-HELPER',\n            'Postmessage could not be parsed. ' +\n            'Is it in a valid JSON format?', e);\n      }) || null;\n    } else if (isAmpMessage(data)) {\n      data = deserializeMessage(data);\n    } else {\n      data = null;\n    }\n  }\n  return /** @type {?JsonObject} */ (data);\n}\n\n\n\n/**\n * Manages a postMessage API for an iframe with a subscription message and\n * a way to broadcast messages to all subscribed windows, which\n * in turn must all be descendants of the contentWindow of the iframe.\n */\nexport class SubscriptionApi {\n  /**\n   * @param {!Element} iframe The iframe.\n   * @param {string} type Type of the subscription message.\n   * @param {boolean} is3p set to true if the iframe is 3p.\n   * @param {function(!JsonObject, !Window, string)} requestCallback Callback\n   *     invoked whenever a new window subscribes.\n   */\n  constructor(iframe, type, is3p, requestCallback) {\n    /** @private @const {!Element} */\n    this.iframe_ = iframe;\n    /** @private @const {boolean} */\n    this.is3p_ = is3p;\n    /** @private @const {!Array<{win: !Window, origin: string}>} */\n    this.clientWindows_ = [];\n\n    /** @private @const {!UnlistenDef} */\n    this.unlisten_ = listenFor(this.iframe_, type, (data, source, origin) => {\n      // This message might be from any window within the iframe, we need\n      // to keep track of which windows want to be sent updates.\n      if (!this.clientWindows_.some(entry => entry.win == source)) {\n        this.clientWindows_.push({win: source, origin});\n      }\n      requestCallback(data, source, origin);\n    }, this.is3p_,\n        // For 3P frames we also allow nested frames within them to subscribe..\n    this.is3p_ /* opt_includingNestedWindows */);\n  }\n\n  /**\n   * Sends a message to all subscribed windows.\n   * @param {string} type Type of the message.\n   * @param {!JsonObject} data Message payload.\n   */\n  send(type, data) {\n    // Remove clients that have been removed from the DOM.\n    filterSplice(this.clientWindows_, client => !!client.win.parent);\n    postMessageToWindows(\n        this.iframe_,\n        this.clientWindows_,\n        type,\n        data,\n        this.is3p_);\n  }\n\n  /**\n   * Destroys iframe.\n   */\n  destroy() {\n    this.unlisten_();\n    this.clientWindows_.length = 0;\n  }\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function looksLikeTrackingIframe(element) {\n  const box = element.getLayoutBox();\n  // This heuristic is subject to change.\n  if (box.width > 10 || box.height > 10) {\n    return false;\n  }\n  // Iframe is not tracking iframe if open with user interaction\n  return !closestBySelector(element, '.i-amphtml-overlay');\n}\n\n// Most common ad sizes\n// Array of [width, height] pairs.\nconst adSizes = [\n  [300, 250],\n  [320, 50],\n  [300, 50],\n  [320, 100],\n];\n\n/**\n * Guess whether this element might be an ad.\n * @param {!Element} element An amp-iframe element.\n * @return {boolean}\n * @visibleForTesting\n */\nexport function isAdLike(element) {\n  const box = element.getLayoutBox();\n  const {height, width} = box;\n  for (let i = 0; i < adSizes.length; i++) {\n    const refWidth = adSizes[i][0];\n    const refHeight = adSizes[i][1];\n    if (refHeight > height) {\n      continue;\n    }\n    if (refWidth > width) {\n      continue;\n    }\n    // Fuzzy matching to account for padding.\n    if (height - refHeight <= 20 && width - refWidth <= 20) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {!Element} iframe\n * @private\n */\nexport function disableScrollingOnIframe(iframe) {\n  addAttributesToElement(iframe, dict({'scrolling': 'no'}));\n\n  // This shouldn't work, but it does on Firefox.\n  // https://stackoverflow.com/a/15494969\n  setStyle(iframe, 'overflow', 'hidden');\n\n  return iframe;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {SubscriptionApi} from './iframe-helper';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {layoutRectLtwh, moveLayoutRect, rectIntersection} from './layout-rect';\n\n/**\n * The structure that defines the rectangle used in intersection observers.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number,\n * }}\n */\nexport let DOMRect;\n\n/**\n * Returns the ratio of the smaller box's area to the larger box's area.\n * @param {!./layout-rect.LayoutRectDef} smaller\n * @param {!./layout-rect.LayoutRectDef} larger\n * @return {number}\n */\nfunction intersectionRatio(smaller, larger) {\n  return (smaller.width * smaller.height) / (larger.width * larger.height);\n}\n\n/**\n * Produces a change entry for that should be compatible with\n * IntersectionObserverEntry.\n *\n * Mutates passed in rootBounds to have x and y according to spec.\n *\n * @param {!./layout-rect.LayoutRectDef} element The element's layout rectangle\n * @param {?./layout-rect.LayoutRectDef} owner The owner's layout rect, if\n *     there is an owner.\n * @param {!./layout-rect.LayoutRectDef} viewport The viewport's layout rect.\n * @return {!IntersectionObserverEntry} A change entry.\n * @private\n */\nexport function getIntersectionChangeEntry(element, owner, viewport) {\n  dev().assert(element.width >= 0 && element.height >= 0,\n      'Negative dimensions in element.');\n  // Building an IntersectionObserverEntry.\n\n  let intersectionRect = element;\n  if (owner) {\n    intersectionRect = rectIntersection(owner, element) ||\n        // No intersection.\n        layoutRectLtwh(0, 0, 0, 0);\n  }\n  intersectionRect = rectIntersection(viewport, intersectionRect) ||\n      // No intersection.\n      layoutRectLtwh(0, 0, 0, 0);\n\n  // The element is relative to (0, 0), while the viewport moves. So, we must\n  // adjust.\n  const boundingClientRect = moveLayoutRect(element, -viewport.left,\n      -viewport.top);\n  intersectionRect = moveLayoutRect(intersectionRect, -viewport.left,\n      -viewport.top);\n  // Now, move the viewport to (0, 0)\n  const rootBounds = moveLayoutRect(viewport, -viewport.left, -viewport.top);\n\n  return /** @type {!IntersectionObserverEntry} */ ({\n    time: Date.now(),\n    rootBounds,\n    boundingClientRect,\n    intersectionRect,\n    intersectionRatio: intersectionRatio(intersectionRect, element),\n  });\n}\n\n/**\n * The IntersectionObserver class lets any element share its viewport\n * intersection data with an iframe of its choice (most likely contained within\n * the element itself.). When instantiated the class will start listening for a\n * 'send-intersections' postMessage from the iframe, and only then  would start\n * sending intersection data to the iframe. The intersection data would be sent\n * when the element is moved inside or outside the viewport as well as on scroll\n * and resize. The element should create an IntersectionObserver instance once\n * the Iframe element is created. The IntersectionObserver class exposes a\n * `fire` method that would send the intersection data to the iframe. The\n * IntersectionObserver class exposes a `onViewportCallback` method that should\n * be called inside if the viewportCallback of the element. This would let the\n * element sent intersection data automatically when there element comes inside\n * or goes outside the viewport and also manage sending intersection data\n * onscroll and resize. Note: The IntersectionObserver would not send any data\n * over to the iframe if it had not requested the intersection data already via\n * a postMessage.\n */\nexport class IntersectionObserver {\n  /**\n   * @param {!AMP.BaseElement} baseElement\n   * @param {!Element} iframe Iframe element which requested the\n   *     intersection data.\n   * @param {?boolean} opt_is3p Set to `true` when the iframe is 3'rd party.\n   */\n  constructor(baseElement, iframe, opt_is3p) {\n    /** @private @const {!AMP.BaseElement} */\n    this.baseElement_ = baseElement;\n    /** @private @const {!./service/timer-impl.Timer} */\n    this.timer_ = Services.timerFor(baseElement.win);\n    /** @private {boolean} */\n    this.shouldSendIntersectionChanges_ = false;\n    /** @private {boolean} */\n    this.inViewport_ = false;\n\n    /** @private {!Array<!IntersectionObserverEntry>} */\n    this.pendingChanges_ = [];\n\n    /** @private {number|string} */\n    this.flushTimeout_ = 0;\n\n    /** @private @const {function()} */\n    this.boundFlush_ = this.flush_.bind(this);\n\n    /**\n     * An object which handles tracking subscribers to the\n     * intersection updates for this element.\n     * Triggered by context.observeIntersection(…) inside the ad/iframe\n     * or by directly posting a send-intersections message.\n     * @private {!SubscriptionApi}\n     */\n    this.postMessageApi_ = new SubscriptionApi(\n        iframe, 'send-intersections', opt_is3p || false,\n        // Each time someone subscribes we make sure that they\n        // get an update.\n        () => this.startSendingIntersectionChanges_());\n\n    /** @private {?Function} */\n    this.unlistenViewportChanges_ = null;\n  }\n\n  /**\n   * Fires element intersection\n   */\n  fire() {\n    this.sendElementIntersection_();\n  }\n\n  /**\n   * Check if we need to unlisten when moving out of viewport,\n   * unlisten and reset unlistenViewportChanges_.\n   * @private\n   */\n  unlistenOnOutViewport_() {\n    if (this.unlistenViewportChanges_) {\n      this.unlistenViewportChanges_();\n      this.unlistenViewportChanges_ = null;\n    }\n  }\n  /**\n   * Called via postMessage from the child iframe when the ad/iframe starts\n   * observing its position in the viewport.\n   * Sets a flag, measures the iframe position if necessary and sends\n   * one change record to the iframe.\n   * Note that this method may be called more than once if a single ad\n   * has multiple parties interested in viewability data.\n   * @private\n   */\n  startSendingIntersectionChanges_() {\n    this.shouldSendIntersectionChanges_ = true;\n    this.baseElement_.getVsync().measure(() => {\n      if (this.baseElement_.isInViewport()) {\n        this.onViewportCallback(true);\n      }\n      this.fire();\n    });\n  }\n\n  /**\n   * Triggered by the AmpElement to when it either enters or exits the visible\n   * viewport.\n   * @param {boolean} inViewport true if the element is in viewport.\n   */\n  onViewportCallback(inViewport) {\n    if (this.inViewport_ == inViewport) {\n      return;\n    }\n    this.inViewport_ = inViewport;\n    // Lets the ad know that it became visible or no longer is.\n    this.fire();\n    // And update the ad about its position in the viewport while\n    // it is visible.\n    if (inViewport) {\n      const send = this.fire.bind(this);\n      // Scroll events.\n      const unlistenScroll = this.baseElement_.getViewport().onScroll(send);\n      // Throttled scroll events. Also fires for resize events.\n      const unlistenChanged = this.baseElement_.getViewport().onChanged(send);\n      this.unlistenViewportChanges_ = () => {\n        unlistenScroll();\n        unlistenChanged();\n      };\n    } else {\n      this.unlistenOnOutViewport_();\n    }\n  }\n\n  /**\n   * Sends 'intersection' message to ad/iframe with intersection change records\n   * if this has been activated and we measured the layout box of the iframe\n   * at least once.\n   * @private\n   */\n  sendElementIntersection_() {\n    if (!this.shouldSendIntersectionChanges_) {\n      return;\n    }\n    const change = this.baseElement_.element.getIntersectionChangeEntry();\n    if (this.pendingChanges_.length > 0 &&\n        this.pendingChanges_[this.pendingChanges_.length - 1].time\n        == change.time) {\n      return;\n    }\n    this.pendingChanges_.push(change);\n    if (!this.flushTimeout_) {\n      // Send one immediately, …\n      this.flush_();\n      // but only send a maximum of 10 postMessages per second.\n      this.flushTimeout_ = this.timer_.delay(this.boundFlush_, 100);\n    }\n  }\n\n  /**\n   * @private\n   */\n  flush_() {\n    // TODO(zhouyx): One potential place to check if element is still in doc.\n    this.flushTimeout_ = 0;\n    if (!this.pendingChanges_.length) {\n      return;\n    }\n    // Note that SubscribeApi multicasts the update to all interested windows.\n    this.postMessageApi_.send('intersection', dict({\n      'changes': this.pendingChanges_,\n    }));\n    this.pendingChanges_.length = 0;\n  }\n\n  /**\n   * Provide a function to clear timeout before set this intersection to null.\n   */\n  destroy() {\n    this.timer_.cancel(this.flushTimeout_);\n    this.unlistenOnOutViewport_();\n    this.postMessageApi_.destroy();\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {*} should be string|number|boolean\n */\nlet JSONScalarDef;\n\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {*} should be !Object<string, ?JSONValueDef>\n */\nlet JSONObjectDef;\n\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {*} should be !Array<?JSONValueDef>\n */\nlet JSONArrayDef;\n\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef\n */\nlet JSONValueDef;\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (part &&\n        value &&\n        value[part] !== undefined &&\n        hasOwnProperty(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Recursively checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum recursion depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function recursiveEquals(a, b, depth = 3) {\n  if (!isFinite(depth)) {\n    throw new Error('depth arg must be finite: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  // Only check shallow equality for depth < 1.\n  if (depth < 1) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!recursiveEquals(a[i], b[i], depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keysA = Object.keys(/** @type {!Object} */ (a));\n    const keysB = Object.keys(/** @type {!Object} */ (b));\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n      const keyA = keysA[i];\n      const valueA = a[keyA];\n      const valueB = b[keyA];\n      if (!recursiveEquals(valueA, valueB, depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n      /** @type {!Object} */ (obj), key);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The structure that combines position and size for an element. The exact\n * interpretation of position and size depends on the use case.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number\n * }}\n */\nexport let LayoutRectDef;\n\n\n/**\n * The structure that represents the margins of an Element.\n *\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nexport let LayoutMarginsDef;\n\n\n/**\n * The structure that represents a requested change to the margins of an\n * Element. Any new values specified will replace existing ones (rather than\n * being additive).\n *\n * @typedef {{\n *   top: (number|undefined),\n *   right: (number|undefined),\n *   bottom: (number|undefined),\n *   left: (number|undefined)\n * }}\n */\nexport let LayoutMarginsChangeDef;\n\n/**\n* RelativePositions\n*\n* Describes the relative position of an element to another (whether the\n* first is inside the second, on top of the second or on the bottom\n* @enum {string}\n*/\nexport const RelativePositions = {\n  INSIDE: 'inside',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\n/**\n * Creates a layout rect based on the left, top, width and height parameters\n * in that order.\n * @param {number} left\n * @param {number} top\n * @param {number} width\n * @param {number} height\n * @return {!LayoutRectDef}\n */\nexport function layoutRectLtwh(left, top, width, height) {\n  return {\n    left,\n    top,\n    width,\n    height,\n    bottom: top + height,\n    right: left + width,\n    x: left,\n    y: top,\n  };\n}\n\n\n/**\n * Creates a layout rect based on the DOMRect, e.g. obtained from calling\n * getBoundingClientRect.\n * @param {!ClientRect} rect\n * @return {!LayoutRectDef}\n */\nexport function layoutRectFromDomRect(rect) {\n  return layoutRectLtwh(Number(rect.left), Number(rect.top),\n      Number(rect.width), Number(rect.height));\n}\n\n/**\n * Returns true if the specified two rects overlap by a single pixel.\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectsOverlap(r1, r2) {\n  return (r1.top <= r2.bottom && r2.top <= r1.bottom &&\n      r1.left <= r2.right && r2.left <= r1.right);\n}\n\n\n/**\n * Returns the intersection between a, b or null if there is none.\n * @param {...?LayoutRectDef|undefined} var_args\n * @return {?LayoutRectDef}\n */\nexport function rectIntersection(var_args) {\n  let x0 = -Infinity;\n  let x1 = Infinity;\n  let y0 = -Infinity;\n  let y1 = Infinity;\n  for (let i = 0; i < arguments.length; i++) {\n    const current = arguments[i];\n    if (!current) {\n      continue;\n    }\n    x0 = Math.max(x0, current.left);\n    x1 = Math.min(x1, current.left + current.width);\n    y0 = Math.max(y0, current.top);\n    y1 = Math.min(y1, current.top + current.height);\n    if (x1 < x0 || y1 < y0) {\n      return null;\n    }\n  }\n  if (x1 == Infinity) {\n    return null;\n  }\n  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);\n}\n\n/**\n * Returns the position of r2 relative to r1\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {RelativePositions}\n */\nexport function layoutRectsRelativePos(r1, r2) {\n  if (r1.top < r2.top) {\n    return RelativePositions.TOP;\n  } else if (r1.bottom > r2.bottom) {\n    return RelativePositions.BOTTOM;\n  } else {\n    return RelativePositions.INSIDE;\n  }\n}\n\n/**\n * Expand the layout rect using multiples of width and height.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dw Expansion in width, specified as a multiple of width.\n * @param {number} dh Expansion in height, specified as a multiple of height.\n * @return {!LayoutRectDef}\n */\nexport function expandLayoutRect(rect, dw, dh) {\n  return layoutRectLtwh(rect.left - rect.width * dw,\n      rect.top - rect.height * dh,\n      rect.width * (1 + dw * 2),\n      rect.height * (1 + dh * 2));\n}\n\n/**\n * Moves the layout rect using dx and dy.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dx Move horizontally with this value.\n * @param {number} dy Move vertically with this value.\n * @return {!LayoutRectDef}\n */\nexport function moveLayoutRect(rect, dx, dy) {\n  if ((dx == 0 && dy == 0) ||\n      (rect.width == 0 && rect.height == 0)) {\n    return rect;\n  }\n  return layoutRectLtwh(rect.left + dx, rect.top + dy,\n      rect.width, rect.height);\n}\n\n\n/**\n * @param {!LayoutMarginsDef} margins\n * @param {!LayoutMarginsChangeDef} change\n * @return {boolean}\n */\nexport function areMarginsChanged(margins, change) {\n  return (change.top !== undefined && change.top != margins.top) ||\n      (change.right !== undefined && change.right != margins.right) ||\n      (change.bottom !== undefined && change.bottom != margins.bottom) ||\n      (change.left !== undefined && change.left != margins.left);\n}\n\n/**\n * @param {!LayoutRectDef} from\n * @param {!LayoutRectDef} to\n * @return {boolean}\n */\nexport function layoutRectSizeEquals(from, to) {\n  return from.width == to.width &&\n      from.height === to.height;\n}\n\n/**\n * @param {?LayoutRectDef} r1\n * @param {?LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectEquals(r1, r2) {\n  if (!r1 || !r2) {\n    return false;\n  }\n  return r1.left == r2.left && r1.top == r2.top &&\n      r1.width == r2.width && r1.height == r2.height;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {dev, user} from './log';\nimport {htmlFor} from './static-template';\nimport {isFiniteNumber} from './types';\nimport {setStyle, setStyles} from './style';\nimport {startsWith} from './string';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nlet DimensionsDef;\n\n\n/**\n * The set of elements with natural dimensions, that is, elements\n * which have a known dimension either based on their value specified here,\n * or, if the value is null, a dimension specific to the browser.\n * `hasNaturalDimensions` checks for membership in this set.\n * `getNaturalDimensions` determines the dimensions for an element in the\n *    set and caches it.\n * @type {!Object<string, ?DimensionsDef>}\n * @private  Visible for testing only!\n */\nexport const naturalDimensions_ = {\n  'AMP-PIXEL': {width: '0px', height: '0px'},\n  'AMP-ANALYTICS': {width: '1px', height: '1px'},\n  // TODO(dvoytenko): audio should have width:auto.\n  'AMP-AUDIO': null,\n  'AMP-SOCIAL-SHARE': {width: '60px', height: '44px'},\n};\n\n\n/**\n * Elements that the progess can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-ANIM': true,\n  'AMP-BRIGHTCOVE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-LIKE': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-OOYALA-PLAYER': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-VIDEO': true,\n  'AMP-YOUTUBE': true,\n};\n\n\n/**\n * @param {string} s\n * @return {Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (layout == Layout.FIXED ||\n      layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE ||\n      layout == Layout.FILL ||\n      layout == Layout.FLEX_ITEM ||\n      layout == Layout.FLUID ||\n      layout == Layout.INTRINSIC);\n}\n\n\n/**\n * Whether the tag is an internal (service) AMP tag.\n * @param {!Node|string} tag\n * @return {boolean}\n */\nexport function isInternalElement(tag) {\n  const tagName = (typeof tag == 'string') ? tag : tag.tagName;\n  return tagName && startsWith(tagName.toLowerCase(), 'i-');\n}\n\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n */\nexport function assertLength(length) {\n  user().assert(\n      /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n      'Invalid length value: %s', length);\n  return /** @type {!LengthDef} */ (length);\n}\n\n\n\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n */\nexport function assertLengthOrPercent(length) {\n  user().assert(/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n      'Invalid length or percent value: %s', length);\n  return length;\n}\n\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  dev().assertString(length);\n  const m = user().assert(length.match(/[a-z]+/i),\n      'Failed to read units from %s', length);\n  return m[0];\n}\n\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n\n/**\n * Determines whether the tagName is a known element that has natural dimensions\n * in our runtime or the browser.\n * @param {string} tagName The element tag name.\n * @return {boolean}\n */\nexport function hasNaturalDimensions(tagName) {\n  tagName = tagName.toUpperCase();\n  return naturalDimensions_[tagName] !== undefined;\n}\n\n\n/**\n * Determines the default dimensions for an element which could vary across\n * different browser implementations, like <audio> for instance.\n * This operation can only be completed for an element whitelisted by\n * `hasNaturalDimensions`.\n * @param {!Element} element\n * @return {DimensionsDef}\n */\nexport function getNaturalDimensions(element) {\n  const tagName = element.tagName.toUpperCase();\n  dev().assert(naturalDimensions_[tagName] !== undefined);\n  if (!naturalDimensions_[tagName]) {\n    const doc = element.ownerDocument;\n    const naturalTagName = tagName.replace(/^AMP\\-/, '');\n    const temp = doc.createElement(naturalTagName);\n    // For audio, should no-op elsewhere.\n    temp.controls = true;\n    setStyles(temp, {\n      position: 'absolute',\n      visibility: 'hidden',\n    });\n    doc.body.appendChild(temp);\n    naturalDimensions_[tagName] = {\n      width: (temp./*OK*/offsetWidth || 1) + 'px',\n      height: (temp./*OK*/offsetHeight || 1) + 'px',\n    };\n    doc.body.removeChild(temp);\n  }\n  return /** @type {DimensionsDef} */ (naturalDimensions_[tagName]);\n}\n\n\n/**\n * Whether the loading can be shown for the specified elemeent. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {\n    return true;\n  }\n  return LOADING_ELEMENTS_[tagName] || false;\n}\n\n\n/**\n * Applies layout to the element. Visible for testing only.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this method is used for server-side rendering (SSR) and\n * any changes made to it must be made in coordination with caches that\n * implement SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @param {!Element} element\n * @return {!Layout}\n */\nexport function applyStaticLayout(element) {\n  // Check if the layout has already been done by server-side rendering. The\n  // document may be visible to the user if the boilerplate was removed so\n  // please take care in making changes here.\n  const completedLayoutAttr = element.getAttribute('i-amphtml-layout');\n  if (completedLayoutAttr) {\n    const layout = /** @type {!Layout} */ (dev().assert(\n        parseLayout(completedLayoutAttr)));\n    if ((layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC)\n      && element.firstElementChild) {\n      // Find sizer, but assume that it might not have been parsed yet.\n      element.sizerElement =\n          element.querySelector('i-amphtml-sizer') || undefined;\n    } else if (layout == Layout.NODISPLAY) {\n      applyNoDisplayLayout(element);\n    }\n    return layout;\n  }\n\n  // If the layout was already done by server-side rendering (SSR), then the\n  // code below will not run. Any changes below will necessitate a change to SSR\n  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.\n\n  // Parse layout from the element.\n  const layoutAttr = element.getAttribute('layout');\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const sizesAttr = element.getAttribute('sizes');\n  const heightsAttr = element.getAttribute('heights');\n\n  // Input layout attributes.\n  const inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;\n  user().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);\n  /** @const {string|null|undefined} */\n  const inputWidth = (widthAttr && widthAttr != 'auto') ?\n    parseLength(widthAttr) : widthAttr;\n  user().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);\n  /** @const {string|null|undefined} */\n  const inputHeight = (heightAttr && heightAttr != 'fluid') ?\n    parseLength(heightAttr) : heightAttr;\n  user().assert(inputHeight !== undefined, 'Invalid height value: %s',\n      heightAttr);\n\n  // Effective layout attributes. These are effectively constants.\n  let width;\n  let height;\n  let layout;\n\n  // Calculate effective width and height.\n  if ((!inputLayout || inputLayout == Layout.FIXED ||\n      inputLayout == Layout.FIXED_HEIGHT) &&\n      (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {\n    // Default width and height: handle elements that do not specify a\n    // width/height and are defined to have natural browser dimensions.\n    const dimensions = getNaturalDimensions(element);\n    width = (inputWidth || inputLayout == Layout.FIXED_HEIGHT) ? inputWidth :\n      dimensions.width;\n    height = inputHeight || dimensions.height;\n  } else {\n    width = inputWidth;\n    height = inputHeight;\n  }\n\n  // Calculate effective layout.\n  if (inputLayout) {\n    layout = inputLayout;\n  } else if (!width && !height) {\n    layout = Layout.CONTAINER;\n  } else if (height == 'fluid') {\n    layout = Layout.FLUID;\n  } else if (height && (!width || width == 'auto')) {\n    layout = Layout.FIXED_HEIGHT;\n  } else if (height && width && (sizesAttr || heightsAttr)) {\n    layout = Layout.RESPONSIVE;\n  } else {\n    layout = Layout.FIXED;\n  }\n\n  // Verify layout attributes.\n  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(height, 'Expected height to be available: %s', heightAttr);\n  }\n  if (layout == Layout.FIXED_HEIGHT) {\n    user().assert(!width || width == 'auto',\n        'Expected width to be either absent or equal \"auto\" ' +\n        'for fixed-height layout: %s', widthAttr);\n  }\n  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE ||\n      layout == Layout.INTRINSIC) {\n    user().assert(width && width != 'auto',\n        'Expected width to be available and not equal to \"auto\": %s',\n        widthAttr);\n  }\n\n  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(getLengthUnits(width) == getLengthUnits(height),\n        'Length units should be the same for width and height: %s, %s',\n        widthAttr, heightAttr);\n  } else {\n    user().assert(heightsAttr === null,\n        'Unexpected \"heights\" attribute for none-responsive layout');\n  }\n\n  // Apply UI.\n  element.classList.add(getLayoutClass(layout));\n  if (isLayoutSizeDefined(layout)) {\n    element.classList.add('i-amphtml-layout-size-defined');\n  }\n  if (layout == Layout.NODISPLAY) {\n    // CSS defines layout=nodisplay automatically with `display:none`. Thus\n    // no additional styling is needed.\n    applyNoDisplayLayout(element);\n  } else if (layout == Layout.FIXED) {\n    setStyles(element, {\n      width: dev().assertString(width),\n      height: dev().assertString(height),\n    });\n  } else if (layout == Layout.FIXED_HEIGHT) {\n    setStyle(element, 'height', dev().assertString(height));\n  } else if (layout == Layout.RESPONSIVE) {\n    const sizer = element.ownerDocument.createElement('i-amphtml-sizer');\n    setStyles(sizer, {\n      display: 'block',\n      paddingTop:\n        ((getLengthNumeral(height) / getLengthNumeral(width)) * 100) + '%',\n    });\n    element.insertBefore(sizer, element.firstChild);\n    element.sizerElement = sizer;\n  } else if (layout == Layout.INTRINSIC) {\n    // Intrinsic uses an svg inside the sizer element rather than the padding\n    // trick Note a naked svg won't work becasue other thing expect the\n    // i-amphtml-sizer element\n    const sizer = htmlFor(element)`\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>`;\n    const intrinsicSizer = sizer.firstElementChild;\n    intrinsicSizer.setAttribute('src',\n        `data:image/svg+xml;charset=utf-8,<svg height=\"${height}\" width=\"${width}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`);\n    element.insertBefore(sizer, element.firstChild);\n    // TODO(jpettitt): sizer is leaked and can't be cleaned up.\n    element.sizerElement = intrinsicSizer;\n  } else if (layout == Layout.FILL) {\n    // Do nothing.\n  } else if (layout == Layout.CONTAINER) {\n    // Do nothing. Elements themselves will check whether the supplied\n    // layout value is acceptable. In particular container is only OK\n    // sometimes.\n  } else if (layout == Layout.FLEX_ITEM) {\n    // Set height and width to a flex item if they exist.\n    // The size set to a flex item could be overridden by `display: flex` later.\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    if (height) {\n      setStyle(element, 'height', height);\n    }\n  } else if (layout == Layout.FLUID) {\n    element.classList.add('i-amphtml-layout-awaiting-size');\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    setStyle(element, 'height', 0);\n  }\n  return layout;\n}\n\n\n/**\n * @param {!Element} element\n */\nfunction applyNoDisplayLayout(element) {\n  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed\n  // everywhere, switch all relevant elements to this API. In the meantime,\n  // simply unblock display toggling via `style=\"display: ...\"`.\n  setStyle(element, 'display', 'none');\n  element.classList.add('i-amphtml-display');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getServicePromise} from './service';\n\n/**\n * A map of services that delay rendering. The key is the name of the service\n * and the value is a DOM query which is used to check if the service is needed\n * in the current document.\n * Do not add a service unless absolutely necessary.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this list is used for server-side rendering (SSR) and any\n * changes made to it must be made in coordination with caches that implement\n * SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @const {!Object<string, string>}\n */\nconst SERVICES = {\n  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',\n  'variant': 'amp-experiment',\n  'amp-story': 'amp-story[standalone]',\n};\n\n/**\n * Maximum milliseconds to wait for all extensions to load before erroring.\n * @const\n */\nconst LOAD_TIMEOUT = 3000;\n\n/**\n * Detects any render delaying services that are required on the page, and\n * returns a promise with a timeout.\n * @param {!Window} win\n * @return {!Promise<!Array<*>>} resolves to an Array that has the same length\n *     as the detected render delaying services\n */\nexport function waitForServices(win) {\n  const promises = includedServices(win).map(service => {\n    return Services.timerFor(win).timeoutPromise(\n        LOAD_TIMEOUT,\n        getServicePromise(win, service),\n        `Render timeout waiting for service ${service} to be ready.`\n    );\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Returns true if the page has a render delaying service.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function hasRenderDelayingServices(win) {\n  return includedServices(win).length > 0;\n}\n\n/**\n * Detects which, if any, render-delaying extensions are included on the page.\n * @param {!Window} win\n * @return {!Array<string>}\n */\nexport function includedServices(win) {\n  /** @const {!Document} */\n  const doc = win.document;\n  dev().assert(doc.body);\n\n  return Object.keys(SERVICES).filter(service => {\n    return doc.querySelector(SERVICES[service]);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {dev} from '../log';\nimport {isFiniteNumber} from '../types';\nimport {loadPromise} from '../event-helper';\n\n/** @typedef {string|number|boolean|undefined|null} */\nlet ResolverReturnDef;\n\n/** @typedef {function(...*):ResolverReturnDef} */\nexport let SyncResolverDef;\n\n/** @typedef {function(...*):!Promise<ResolverReturnDef>} */\nexport let AsyncResolverDef;\n\n/** @typedef {{sync: SyncResolverDef, async: AsyncResolverDef}} */\nlet ReplacementDef;\n\n\n/**\n * Returns navigation timing information based on the start and end events.\n * The data for the timing events is retrieved from performance.timing API.\n * If start and end events are both given, the result is the difference between\n * the two. If only start event is given, the result is the timing value at\n * start event.\n * @param {!Window} win\n * @param {string} startEvent\n * @param {string=} endEvent\n * @return {!Promise<ResolverReturnDef>}\n */\nexport function getTimingDataAsync(win, startEvent, endEvent) {\n  return loadPromise(win).then(() => {\n    return getTimingDataSync(win, startEvent, endEvent);\n  });\n}\n\n/**\n * Returns navigation timing information based on the start and end events.\n * The data for the timing events is retrieved from performance.timing API.\n * If start and end events are both given, the result is the difference between\n * the two. If only start event is given, the result is the timing value at\n * start event. Enforces synchronous evaluation.\n * @param {!Window} win\n * @param {string} startEvent\n * @param {string=} endEvent\n * @return {ResolverReturnDef} undefined if API is not available, empty string\n *    if it is not yet available, or value as string\n */\nexport function getTimingDataSync(win, startEvent, endEvent) {\n  const timingInfo = win['performance'] && win['performance']['timing'];\n  if (!timingInfo || timingInfo['navigationStart'] == 0) {\n    // Navigation timing API is not supported.\n    return;\n  }\n\n  const metric = (endEvent === undefined)\n    ? timingInfo[startEvent]\n    : timingInfo[endEvent] - timingInfo[startEvent];\n\n  if (!isFiniteNumber(metric) || metric < 0) {\n    // The metric is not supported.\n    return;\n  } else {\n    return metric;\n  }\n}\n\n/**\n * Returns navigation information from the current browsing context.\n * @param {!Window} win\n * @param {string} attribute\n * @return {ResolverReturnDef}\n * @private\n */\nexport function getNavigationData(win, attribute) {\n  const navigationInfo = win['performance'] &&\n    win['performance']['navigation'];\n  if (!navigationInfo || navigationInfo[attribute] === undefined) {\n    // PerformanceNavigation interface is not supported or attribute is not\n    // implemented.\n    return;\n  }\n  return navigationInfo[attribute];\n}\n\n\n/**\n * A class to provide variable substitution related features. Extend this class\n * and override initialize() to add more supported variables.\n */\nexport class VariableSource {\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @protected @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc = ampdoc;\n\n    /** @private {!RegExp|undefined} */\n    this.replacementExpr_ = undefined;\n\n    /** @private {!RegExp|undefined} */\n    this.replacementExprV2_ = undefined;\n\n    /** @private @const {!Object<string, !ReplacementDef>} */\n    this.replacements_ = Object.create(null);\n\n    /** @private {boolean} */\n    this.initialized_ = false;\n\n    this.getUrlMacroWhitelist_();\n  }\n\n  /**\n   * Lazily initialize the default replacements.\n   * @private\n   */\n  initialize_() {\n    this.initialize();\n    this.initialized_ = true;\n  }\n\n  /**\n   * Override this method to set all the variables supported by derived class.\n   */\n  initialize() {\n    // Needs to be implemented by derived classes.\n  }\n\n  /**\n   * Method exists to assist stubbing in tests.\n   * @param {string} name\n   * @return {!ReplacementDef}\n   */\n  get(name) {\n    if (!this.initialized_) {\n      this.initialize_();\n    }\n\n    return this.replacements_[name];\n  }\n\n  /**\n   * Sets a synchronous value resolver for the variable with the specified name.\n   * The value resolver may optionally take an extra parameter.\n   * Can be called in conjunction with setAsync to allow for additional\n   * asynchronous resolver where expand will use async and expandSync the sync\n   * version.\n   * @param {string} varName\n   * @param {!SyncResolverDef} syncResolver\n   * @return {!VariableSource}\n   */\n  set(varName, syncResolver) {\n    dev().assert(varName.indexOf('RETURN') == -1);\n    this.replacements_[varName] =\n        this.replacements_[varName] || {sync: undefined, async: undefined};\n    this.replacements_[varName].sync = syncResolver;\n    this.replacementExpr_ = undefined;\n    this.replacementExprV2_ = undefined;\n    return this;\n  }\n\n  /**\n   * Sets an async value resolver for the variable with the specified name.\n   * The value resolver may optionally take an extra parameter.\n   * Can be called in conjuction with setAsync to allow for additional\n   * asynchronous resolver where expand will use async and expandSync the sync\n   * version.\n   * @param {string} varName\n   * @param {!AsyncResolverDef} asyncResolver\n   * @return {!VariableSource}\n   */\n  setAsync(varName, asyncResolver) {\n    dev().assert(varName.indexOf('RETURN') == -1);\n    this.replacements_[varName] =\n        this.replacements_[varName] || {sync: undefined, async: undefined};\n    this.replacements_[varName].async = asyncResolver;\n    this.replacementExpr_ = undefined;\n    this.replacementExprV2_ = undefined;\n    return this;\n  }\n\n  /**\n   * Helper method to set both sync and async resolvers.\n   * @param {string} varName\n   * @param {!SyncResolverDef} syncResolver\n   * @param {!AsyncResolverDef} asyncResolver\n   * @return {!VariableSource}\n   */\n  setBoth(varName, syncResolver, asyncResolver) {\n    return this.set(varName, syncResolver).setAsync(varName, asyncResolver);\n  }\n\n  /**\n   * Returns a Regular expression that can be used to detect all the variables\n   * in a template.\n   * @param {!Object<string, *>=} opt_bindings\n   * @param {boolean=} isV2 Flag to ignore capture of args.\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *   that can be substituted.\n   */\n  getExpr(opt_bindings, isV2, opt_whiteList) {\n    if (!this.initialized_) {\n      this.initialize_();\n    }\n\n    const additionalKeys = opt_bindings ? Object.keys(opt_bindings) : null;\n    if (additionalKeys && additionalKeys.length > 0) {\n      const allKeys = Object.keys(this.replacements_);\n      additionalKeys.forEach(key => {\n        if (this.replacements_[key] === undefined) {\n          allKeys.push(key);\n        }\n      });\n      return this.buildExpr_(allKeys, isV2, opt_whiteList);\n    }\n    if (!this.replacementExpr_ && !isV2) {\n      this.replacementExpr_ = this.buildExpr_(\n          Object.keys(this.replacements_));\n    }\n    // sometimes the v1 expand will be called before the v2\n    // so we need to cache both versions\n    if (!this.replacementExprV2_ && isV2) {\n      this.replacementExprV2_ = this.buildExpr_(\n          Object.keys(this.replacements_), isV2, opt_whiteList);\n    }\n\n    return isV2 ? this.replacementExprV2_ :\n      this.replacementExpr_;\n  }\n\n  /**\n   * @param {!Array<string>} keys\n   * @param {boolean=} isV2 flag to ignore capture of args\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *   that can be substituted.\n   * @return {!RegExp}\n   * @private\n   */\n  buildExpr_(keys, isV2, opt_whiteList) {\n    // If a whitelist is present, the keys must belong to the whitelist.\n    // We filter the keys one last time to ensure no unwhitelisted key is\n    // allowed.\n    if (this.getUrlMacroWhitelist_()) {\n      keys = keys.filter(key => this.getUrlMacroWhitelist_().includes(key));\n    }\n    // If a whitelist is passed into the call to GlobalVariableSource.expand_\n    // then we only resolve values contained in the whitelist.\n    if (opt_whiteList) {\n      keys = keys.filter(key => opt_whiteList[key]);\n    }\n    // The keys must be sorted to ensure that the longest keys are considered\n    // first. This avoids a problem where a RANDOM conflicts with RANDOM_ONE.\n    keys.sort((s1, s2) => s2.length - s1.length);\n    // Keys that start with a `$` need to be escaped so that they do not\n    // interfere with the regex that is constructed.\n    const escaped = keys.map(key => {\n      if (key[0] === '$') {\n        return '\\\\' + key;\n      }\n      return key;\n    });\n\n    const all = escaped.join('|');\n    // Match the given replacement patterns, as well as optionally\n    // arguments to the replacement behind it in parentheses.\n    // Example string that match\n    // FOO_BAR\n    // FOO_BAR(arg1)\n    // FOO_BAR(arg1,arg2)\n    // FOO_BAR(arg1, arg2)\n    let regexStr = '\\\\$?(' + all + ')';\n    // ignore the capturing of arguments in new parser\n    if (!isV2) {\n      regexStr += '(?:\\\\(((?:\\\\s*[0-9a-zA-Z-_.]*\\\\s*(?=,|\\\\)),?)*)\\\\s*\\\\))?';\n    }\n    return new RegExp(regexStr, 'g');\n  }\n\n  /**\n   * @return {?Array<string>} The whitelist of allowed AMP variables. (if provided in\n   *     a meta tag).\n   * @private\n   */\n  getUrlMacroWhitelist_() {\n    if (this.variableWhitelist_) {\n      return this.variableWhitelist_;\n    }\n\n    const {head} = this.ampdoc.getRootNode();\n    if (!head) {\n      return null;\n    }\n\n    // A meta[name=\"amp-allowed-url-macros\"] tag, if present,\n    // contains, in its content attribute, a whitelist of variable substitution.\n    const meta =\n      head.querySelector('meta[name=\"amp-allowed-url-macros\"]');\n    if (!meta) {\n      return null;\n    }\n\n    /**\n     * The whitelist of variables allowed for variable substitution.\n     * @private {?Array<string>}\n     */\n    this.variableWhitelist_ = meta.getAttribute('content').split(',')\n        .map(variable => variable.trim());\n    return this.variableWhitelist_;\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {map} from './utils/object.js';\n\nlet container;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!container || container.ownerDocument !== doc) {\n    container = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  dev().assert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  dev().assert(el, 'No elements in template');\n  dev().assert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container./*OK*/innerHTML = '';\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = dev().assert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    dev().assert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev, rethrowAsync} from './log';\nimport {insertAfterOrAtStart, waitForBody} from './dom';\nimport {map} from './utils/object';\nimport {setStyles} from './style';\nimport {waitForServices} from './render-delaying-services';\n\nconst TRANSFORMER_PROP = '__AMP_CSS_TR';\nconst STYLE_MAP_PROP = '__AMP_CSS_SM';\nconst bodyVisibleSentinel = '__AMP_BODY_VISIBLE';\n\n\n/**\n * Adds the given css text to the given ampdoc.\n *\n * The style tags will be at the beginning of the head before all author\n * styles. One element can be the main runtime CSS. This is guaranteed\n * to always be the first stylesheet in the doc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are available.\n *     Not using a promise, because this is synchronous when possible.\n *     for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesForDoc(\n  ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const cssRoot = ampdoc.getHeadNode();\n  const style = insertStyleElement(\n      cssRoot,\n      maybeTransform(cssRoot, cssText),\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    const rootNode = ampdoc.getRootNode();\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(rootNode, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(rootNode, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Adds the given css text to the given document.\n * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is\n * done.\n *\n * @param {!Document} doc The document that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are\n *     available. Not using a promise, because this is synchronous when\n *     possible. for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesLegacy(\n  doc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const style = insertStyleElement(\n      dev().assertElement(doc.head),\n      cssText,\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(doc, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(doc, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Creates the properly configured style element.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @param {boolean} isRuntimeCss\n * @param {?string} ext\n * @return {!Element}\n */\nfunction insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {\n  let styleMap = cssRoot[STYLE_MAP_PROP];\n  if (!styleMap) {\n    styleMap = cssRoot[STYLE_MAP_PROP] = map();\n  }\n\n  const isExtCss = !isRuntimeCss &&\n      (ext && ext != 'amp-custom' && ext != 'amp-keyframes');\n  const key =\n      isRuntimeCss ? 'amp-runtime' :\n        isExtCss ? `amp-extension=${ext}` : null;\n\n  // Check if it has already been created or discovered.\n  if (key) {\n    const existing = getExistingStyleElement(cssRoot, styleMap, key);\n    if (existing) {\n      return existing;\n    }\n  }\n\n  // Create the new style element and append to cssRoot.\n  const doc = (cssRoot.ownerDocument || cssRoot);\n  const style = doc.createElement('style');\n  style./*OK*/textContent = cssText;\n  let afterElement = null;\n  // Make sure that we place style tags after the main runtime CSS. Otherwise\n  // the order is random.\n  if (isRuntimeCss) {\n    style.setAttribute('amp-runtime', '');\n  } else if (isExtCss) {\n    style.setAttribute('amp-extension', ext || '');\n    afterElement = dev().assertElement(getExistingStyleElement(\n        cssRoot, styleMap, 'amp-runtime'));\n  } else {\n    if (ext) {\n      style.setAttribute(ext, '');\n    }\n    afterElement = cssRoot.lastChild;\n  }\n  insertAfterOrAtStart(cssRoot, style, afterElement);\n  if (key) {\n    styleMap[key] = style;\n  }\n  return style;\n}\n\n\n/**\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {!Object<string, !Element>} styleMap\n * @param {string} key\n * @return {?Element}\n */\nfunction getExistingStyleElement(cssRoot, styleMap, key) {\n  // Already cached.\n  if (styleMap[key]) {\n    return styleMap[key];\n  }\n  // Check if the style has already been added by the server layout.\n  const existing = cssRoot./*OK*/querySelector(`style[${key}]`);\n  if (existing) {\n    styleMap[key] = existing;\n    return existing;\n  }\n  // Nothing found.\n  return null;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {function(string):string} transformer\n */\nexport function installCssTransformer(cssRoot, transformer) {\n  cssRoot[TRANSFORMER_PROP] = transformer;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @return {string}\n */\nfunction maybeTransform(cssRoot, cssText) {\n  const transformer = cssRoot[TRANSFORMER_PROP];\n  return transformer ? transformer(cssText) : cssText;\n}\n\n\n/**\n * Sets the document's body opacity to 1.\n * If the body is not yet available (because our script was loaded\n * synchronously), polls until it is.\n * @param {!Document} doc The document who's body we should make visible.\n * @param {boolean=} opt_waitForServices Whether the body visibility should\n *     be blocked on key services being loaded.\n */\nexport function makeBodyVisible(doc, opt_waitForServices) {\n  dev().assert(doc.defaultView, 'Passed in document must have a defaultView');\n  const win = /** @type {!Window} */ (doc.defaultView);\n  if (win[bodyVisibleSentinel]) {\n    return;\n  }\n  const set = () => {\n    win[bodyVisibleSentinel] = true;\n    setStyles(dev().assertElement(doc.body), {\n      opacity: 1,\n      visibility: 'visible',\n      'animation': 'none',\n    });\n    renderStartedNoInline(doc);\n  };\n  try {\n    waitForBody(doc, () => {\n      if (win[bodyVisibleSentinel]) {\n        return;\n      }\n      win[bodyVisibleSentinel] = true;\n      if (opt_waitForServices) {\n        waitForServices(win).catch(reason => {\n          rethrowAsync(reason);\n          return [];\n        }).then(services => {\n          set();\n          if (services.length > 0) {\n            Services.resourcesForDoc(doc)./*OK*/schedulePass(\n                1, /* relayoutAll */ true);\n          }\n          try {\n            const perf = Services.performanceFor(win);\n            perf.tick('mbv');\n            perf.flush();\n          } catch (e) {}\n        });\n      } else {\n        set();\n      }\n    });\n  } catch (e) {\n    // If there was an error during the logic above (such as service not\n    // yet installed, definitely try to make the body visible.\n    set();\n    // Avoid errors in the function to break execution flow as this is\n    // often called as a last resort.\n    rethrowAsync(e);\n  }\n}\n\n\n/**\n * @param {!Document} doc\n */\nfunction renderStartedNoInline(doc) {\n  try {\n    Services.resourcesForDoc(doc).renderStarted();\n  } catch (e) {\n    // `makeBodyVisible` is called in the error-processing cycle and thus\n    // could be triggered when runtime's initialization is incomplete which\n    // would cause unrelated errors to be thrown here.\n  }\n}\n\n\n/**\n * Indicates that the body is always visible. For instance, in case of PWA.\n * @param {!Window} win\n */\nexport function bodyAlwaysVisible(win) {\n  win[bodyVisibleSentinel] = true;\n}\n\n\n/**\n * Checks whether a style element was registered in the DOM.\n * @param {!Document|!ShadowRoot} doc\n * @param {!Element} style\n * @return {boolean}\n */\nfunction styleLoaded(doc, style) {\n  const sheets = doc.styleSheets;\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    if (sheet.ownerNode == style) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order.\n * Notice that it does NOT handle NaN case as expected\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * A bit like Array#filter, but removes elements that filter false from the\n * array. Returns the filtered items.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} filter\n * @return {!Array<T>}\n * @template T\n */\nexport function filterSplice(array, filter) {\n  const splice = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (filter(item, i, array)) {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    } else {\n      splice.push(item);\n    }\n  }\n\n  if (index < array.length) {\n    array.length = index;\n  }\n\n  return splice;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {stringHash32} from '../string';\n\n\n/**\n * Gets a string of concatenated element names and relative positions\n * of the DOM element and its parentElement's (up to 25).  Relative position\n * is the index of nodes with this tag within the parent's children.\n * The order is from the inner to outer nodes in DOM hierarchy.\n *\n * If a DOM hierarchy is the following:\n *\n * <div id='id1' ...>\n *   <div id='id2' ...>\n *     <table ...>       // table:0\n *       <tr>            // tr:0\n *         <td>...</td>  // td:0\n *         <td>          // td:1\n *           <amp-ad ...></amp-ad>\n *         </td>\n *       </tr>\n *       <tr>...</tr>    // tr:1\n *     </table>\n *   </div>\n * </div>\n *\n * With the amp-ad element passed in:\n * 'amp-ad.0,td.1,tr.0,table.0,div/id2.0,div/id1.0'\n *\n * Note: 25 is chosen arbitrarily.\n *\n * @param {?Element} element DOM node from which to get fingerprint.\n * @return {string} Concatenated element ids.\n */\nexport function domFingerprintPlain(element) {\n  const ids = [];\n  let level = 0;\n  while (element && element.nodeType == /* element */ 1 && level < 25) {\n    let id = '';\n    if (element.id) {\n      id = `/${element.id}`;\n    }\n    const nodeName = element.nodeName.toLowerCase();\n    ids.push(`${nodeName}${id}${indexWithinParent(element)}`);\n    level++;\n    element = element.parentElement;\n  }\n  return ids.join();\n}\n\n\nexport class DomFingerprint {\n  /**\n   * Calculates ad slot DOM fingerprint.  This key is intended to\n   * identify \"same\" ad unit across many page views. This is\n   * based on where the ad appears within the page's DOM structure.\n   *\n   * @param {?Element} element The DOM element from which to collect\n   *     the DOM chain element IDs.  If null, DOM chain element IDs are not\n   *     included in the hash.\n   * @return {string} The ad unit hash key string.\n   */\n  static generate(element) {\n    return stringHash32(domFingerprintPlain(element));\n  }\n}\n\n\n/**\n * Gets a string showing the index of an element within\n * the children of its parent, counting only nodes with the same tag.\n * Stop at 25, just to have a limit.\n * @param {!Element} element DOM node to get index of.\n * @return {string} '.<index>' or ''.\n */\nfunction indexWithinParent(element) {\n  const {nodeName} = element;\n  // Find my index within my parent's children\n  let i = 0;\n  let count = 0;\n  let sibling = element.previousElementSibling;\n  // Different browsers have different children.\n  // So count only nodes with the same tag.\n  // Use a limit for the tags, so that different browsers get the same\n  // count. So 25 and higher all return no index.\n  while (sibling && count < 25 && i < 100) {\n    if (sibling.nodeName == nodeName) {\n      count++;\n    }\n    i++;\n    sibling = sibling.previousElementSibling;\n  }\n  // If we got to the end, then the count is accurate; otherwise skip count.\n  return count < 25 && i < 100 ? `.${count}` : '';\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Maps a value in a first range to its equivalent in a second range\n * Ex.: 5 in the range [0,10] gives 60 in the range[40,80]\n *\n * NOTE: lower/upper bounds on the source range are detected automatically,\n * however the bounds on the target range are not altered (thus the target\n * range could be decreasing).\n * Ex1: 8 in the range [0, 10] gives 2 in the range [10, 0]\n * Ex2: also, 8 in the range [10, 0] gives 2 in the range [10, 0]\n *\n * NOTE: Input value is enforced to be bounded inside the source range\n * Ex1: -2 in the range [0, 10] is interpreted as 0 and thus gives 40 in [40,80]\n * Ex2: 19 in the range [0, 5] is interpreted as 5 and thus gives 80 in [40,80]\n *\n * @param {number} val the value in the source range\n * @param {number} min1 the lower bound of the source range\n * @param {number} max1 the upper bound of the source range\n * @param {number} min2 the lower bound of the target range\n * @param {number} max2 the upper bound of the target range\n * @return {number} the equivalent value in the target range\n */\nexport function mapRange(val, min1, max1, min2, max2) {\n\n  let max1Bound = max1;\n  let min1Bound = min1;\n  if (min1 > max1) {\n    max1Bound = min1;\n    min1Bound = max1;\n  }\n\n  if (val < min1Bound) {\n    val = min1Bound;\n  } else if (val > max1Bound) {\n    val = max1Bound;\n  }\n\n  return (val - min1) * (max2 - min2) / (max1 - min1) + min2;\n}\n\n/**\n * Computes the modulus of values `a` and `b`.\n *\n * This is needed because the % operator in JavaScript doesn't implement\n * modulus behaviour as can be seen by the spec here:\n * http://www.ecma-international.org/ecma-262/5.1/#sec-11.5.3.\n * It instead is used to obtain the remainder of a division.\n * This function uses the remainder (%) operator to determine the modulus.\n * Derived from here:\n * https://stackoverflow.com/questions/25726760/javascript-modular-arithmetic/47354356#47354356\n *\n * @param {number} a\n * @param {number} b\n * @return {number} returns the modulus of the two numbers.\n * @example\n *\n * _.min(10, 5);\n * // => 0\n *\n * _.mod(-1, 5);\n * // => 4\n */\nexport function mod(a, b) {\n  return a > 0 && b > 0 ? a % b : ((a % b) + b) % b;\n}\n\n/**\n * Restricts a number to be in the given min/max range.\n *\n * Examples:\n * clamp(0.5, 0, 1) -> 0.5\n * clamp(1.5, 0, 1) -> 1\n * clamp(-0.5, 0, 1) -> 0\n *\n * @param {number} val the value to clamp.\n * @param {number} min the lower bound.\n * @param {number} max the upper bound.\n * @return {number} the clamped value.\n */\nexport function clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wraps a given callback and applies a rate limit.\n * It throttles the calls so that no consequent calls have time interval\n * smaller than the given minimal interval.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function throttle(win, callback, minInterval) {\n  let locker = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {!Object} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    // Lock the fire for minInterval milliseconds\n    locker = win.setTimeout(waiter, minInterval);\n\n    callback.apply(null, args);\n  }\n\n  /**\n   * Waiter function\n   */\n  function waiter() {\n    locker = 0;\n    // If during the period there're invocations queued up, fire once.\n    if (nextCallArgs) {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    if (locker) {\n      nextCallArgs = args;\n    } else {\n      fire(args);\n    }\n  };\n}\n\n/**\n * Wraps a given callback and applies a wait timer, so that minInterval\n * milliseconds must pass since the last call before the callback is actually\n * invoked.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function debounce(win, callback, minInterval) {\n  let locker = 0;\n  let timestamp = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {?Array} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    callback.apply(null, args);\n  }\n\n  /**\n   * Wait function for debounce\n   */\n  function waiter() {\n    locker = 0;\n    const remaining = minInterval - (win.Date.now() - timestamp);\n    if (remaining > 0) {\n      locker = win.setTimeout(waiter, remaining);\n    } else {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    timestamp = win.Date.now();\n    nextCallArgs = args;\n    if (!locker) {\n      locker = win.setTimeout(waiter, minInterval);\n    }\n  };\n}\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}