{"version":3,"sources":["node_modules/browser-pack/_prelude.js","build/video-autoplay.css.js","build/video-docking.css.js","extensions/amp-dailymotion/0.1/amp-dailymotion.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/action-constants.js","src/config.js","src/cookies.js","src/dom.js","src/element-service.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/iframe-video.js","src/json.js","src/layout-rect.js","src/layout.js","src/log.js","src/mediasession-helper.js","src/mode-object.js","src/mode.js","src/observable.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/render-delaying-services.js","src/service.js","src/service/position-observer/position-observer-impl.js","src/service/position-observer/position-observer-worker.js","src/service/video-manager-impl.js","src/service/video-service-interface.js","src/service/video-service-sync-impl.js","src/service/video-session-manager.js","src/service/video/autoplay.js","src/service/video/docking.js","src/service/video/install-autoplay-styles.js","src/services.js","src/static-template.js","src/string.js","src/style-installer.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/function.js","src/utils/lru-cache.js","src/utils/math.js","src/utils/object.js","src/utils/promise.js","src/utils/rate-limit.js","src/utils/video.js","src/video-interface.js","third_party/css-escape/css-escape.js"],"names":[],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"amp-dailymotion-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const cssText = \"i-amphtml-video-mask{z-index:1}.amp-video-eq{display:none}.i-amphtml-video-component:not(amp-video) .amp-video-eq,amp-story .amp-video-eq,amp-video[controls] .amp-video-eq{display:-webkit-box;display:-ms-flexbox;display:flex}[noaudio] .amp-video-eq{display:none!important}.amp-video-eq{pointer-events:none!important;-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end;bottom:7px;height:12px;opacity:0.8;overflow:hidden;position:absolute;right:7px;width:20px;z-index:1}.amp-video-eq .amp-video-eq-col{-webkit-box-flex:1;-ms-flex:1;flex:1;height:100%;margin-right:1px;position:relative}.amp-video-eq .amp-video-eq-col div{-webkit-animation-name:amp-video-eq-animation;animation-name:amp-video-eq-animation;-webkit-animation-timing-function:linear;animation-timing-function:linear;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-direction:alternate;animation-direction:alternate;background-color:#fafafa;height:100%;position:absolute;width:100%;will-change:transform;-webkit-animation-play-state:paused;animation-play-state:paused}.amp-video-eq[unpausable] .amp-video-eq-col div{-webkit-animation-name:none;animation-name:none}.amp-video-eq[unpausable].amp-video-eq-play .amp-video-eq-col div{-webkit-animation-name:amp-video-eq-animation;animation-name:amp-video-eq-animation}.amp-video-eq.amp-video-eq-play .amp-video-eq-col div{-webkit-animation-play-state:running;animation-play-state:running}.amp-video-eq-1-1{-webkit-animation-duration:0.3s;animation-duration:0.3s}.amp-video-eq-1-1,.amp-video-eq-1-2{-webkit-transform:translateY(60%);transform:translateY(60%)}.amp-video-eq-1-2{-webkit-animation-duration:0.45s;animation-duration:0.45s}.amp-video-eq-2-1{-webkit-animation-duration:0.5s;animation-duration:0.5s}.amp-video-eq-2-1,.amp-video-eq-2-2{-webkit-transform:translateY(30%);transform:translateY(30%)}.amp-video-eq-2-2{-webkit-animation-duration:0.4s;animation-duration:0.4s}.amp-video-eq-3-1{-webkit-animation-duration:0.3s;animation-duration:0.3s}.amp-video-eq-3-1,.amp-video-eq-3-2{-webkit-transform:translateY(70%);transform:translateY(70%)}.amp-video-eq-3-2{-webkit-animation-duration:0.35s;animation-duration:0.35s}.amp-video-eq-4-1{-webkit-animation-duration:0.4s;animation-duration:0.4s}.amp-video-eq-4-1,.amp-video-eq-4-2{-webkit-transform:translateY(50%);transform:translateY(50%)}.amp-video-eq-4-2{-webkit-animation-duration:0.25s;animation-duration:0.25s}@-webkit-keyframes amp-video-eq-animation{0%{-webkit-transform:translateY(100%);transform:translateY(100%)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes amp-video-eq-animation{0%{-webkit-transform:translateY(100%);transform:translateY(100%)}to{-webkit-transform:translateY(0);transform:translateY(0)}}\\n/*# sourceURL=/css/video-autoplay.css*/\"","export const cssText = \".amp-video-docked-controls{opacity:0;pointer-events:none!important;-webkit-transition:opacity 0.3s ease;transition:opacity 0.3s ease;height:120px}.amp-video-docked-main-button-group{height:40px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin:-20px 0 0 -60px}.amp-video-docked-controls-shown{opacity:1;pointer-events:initial!important}.amp-video-docked-button-group{margin:0}.amp-video-docked-button-dismiss-group,.amp-video-docked-button-dismiss-group>div[role=button],.amp-video-docked-button-group,.amp-video-docked-button-group>div[role=button]{min-width:40px;height:40px;border-radius:40px}.amp-video-docked-button-dismiss-group:active,.amp-video-docked-button-group:active{background-color:hsla(0,0%,100%,0.7)}.amp-video-docked-button-dismiss-group>div[role=button],.amp-video-docked-button-group,.amp-video-docked-button-group>div[role=button],.amp-video-docked-controls,.i-amphtml-video-docked-overlay{-webkit-tap-highlight-color:rgba(0,0,0,0)!important}.amp-video-docked-button-dismiss-group>div[role=button],.amp-video-docked-button-group>div[role=button]{background-repeat:no-repeat;background-position:50%}.amp-video-docked-shadow{box-shadow:0px 0 20px 6px rgba(0,0,0,0.2)}.amp-video-docked-controls-bg{background:hsla(0,0%,90.2%,0.6)}.amp-video-docked-mute{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M3 9v6h4l5 5V4L7 9H3zm13.5 3A4.5 4.5 0 0 0 14 7.97v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\\")}.amp-video-docked-unmute{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M16.5 12A4.5 4.5 0 0 0 14 7.97v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51A8.796 8.796 0 0 0 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06a8.99 8.99 0 0 0 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\\")}.amp-video-docked-pause{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M6 19h4V5H6v14zm8-14v14h4V5h-4z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\\")}.amp-video-docked-play{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M8 5v14l11-7z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\\")}.amp-video-docked-fullscreen{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z'/%3E%3C/svg%3E\\\")}.amp-video-docked-dismiss{background-image:url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24'%3E%3Cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\\")}.amp-video-docked-shadow,.i-amphtml-video-docked,.i-amphtml-video-docked-overlay{margin:0!important}.amp-video-docked-controls,.amp-video-docked-shadow,.i-amphtml-video-docked,.i-amphtml-video-docked-overlay{position:fixed!important;top:0!important;left:0!important;right:auto!important;bottom:auto!important;padding:0!important;min-width:0!important;min-height:0!important;max-width:auto!important;max-height:auto!important;-webkit-transform-origin:left top!important;transform-origin:left top!important;will-change:width,height,transition,transform,opacity}.i-amphtml-video-docked-overlay{opacity:0;-webkit-transition:opacity 0.3s ease;transition:opacity 0.3s ease;contain:strict!important}.amp-video-docked-controls-bg{opacity:1}.i-amphtml-video-docked-overlay.amp-video-docked-almost-dismissed{opacity:1;background:hsla(0,0%,39.2%,0.1)}.i-amphtml-video-docked-shadow.amp-video-docked-almost-dismissed,.i-amphtml-video-docked.amp-video-docked-almost-dismissed{opacity:0.3}.amp-video-docked-button-dismiss-group{position:absolute;top:-40px}.amp-video-docked-controls{z-index:2147483646!important}.i-amphtml-video-docked-overlay{z-index:2147483645!important}.i-amphtml-video-docked{z-index:2147483644!important}.amp-video-docked-shadow{z-index:2147483643!important}\\n/*# sourceURL=/css/video-docking.css*/\"","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/utils/promise';\nimport {Services} from '../../../src/services';\nimport {VideoEvents} from '../../../src/video-interface';\nimport {\n  addParamToUrl,\n  addParamsToUrl,\n  parseQueryString,\n} from '../../../src/url';\nimport {\n  createFrameFor,\n  mutedOrUnmutedEvent,\n  originMatches,\n  redispatch,\n} from '../../../src/iframe-video';\nimport {dev, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {\n  fullscreenEnter,\n  fullscreenExit,\n  getDataParamsFromAttributes,\n  isFullscreenElement,\n} from '../../../src/dom';\nimport {getData, listen} from '../../../src/event-helper';\nimport {\n  installVideoManagerForDoc,\n} from '../../../src/service/video-manager-impl';\nimport {isLayoutSizeDefined} from '../../../src/layout';\n\n/**\n * Player events reverse-engineered from the Dailymotion API\n * NOTE: 'unstarted' isn't part of the API, just a placeholder\n * as an initial state\n *\n * @enum {string}\n * @private\n */\nconst DailymotionEvents = {\n  UNSTARTED: 'unstarted',\n  API_READY: 'apiready',\n  // Events fired for both the original content or ads\n  START: 'start',\n  PLAY: 'play',\n  PAUSE: 'pause',\n  END: 'end',\n  // Events fired only for ads\n  AD_START: 'ad_start',\n  AD_PLAY: 'ad_play',\n  AD_PAUSE: 'ad_pause',\n  AD_END: 'ad_end',\n  // Events fired only for the original content\n  VIDEO_START: 'video_start',\n  VIDEO_END: 'video_end',\n  // Other events\n  VOLUMECHANGE: 'volumechange',\n  STARTED_BUFFERING: 'progress',\n  FULLSCREEN_CHANGE: 'fullscreenchange',\n};\n\n/**\n * @implements {../../../src/video-interface.VideoInterface}\n */\nclass AmpDailymotion extends AMP.BaseElement {\n\n  /** @param {!AmpElement} element */\n  constructor(element) {\n    super(element);\n    /** @private {string} */\n    this.playerState_ = DailymotionEvents.UNSTARTED;\n\n    /** @private {?string}  */\n    this.videoid_ = null;\n\n    /** @private {?Element} */\n    this.iframe_ = null;\n\n    /** @private {boolean}  */\n    this.muted_ = false;\n\n    /** @private {?Promise} */\n    this.playerReadyPromise_ = null;\n\n    /** @private {?Function} */\n    this.playerReadyResolver_ = null;\n\n    /** @private {?Promise} */\n    this.startedBufferingPromise_ = null;\n\n    /** @private {?Function} */\n    this.startedBufferingResolver_ = null;\n\n    /** @private {boolean} */\n    this.isFullscreen_ = false;\n\n  }\n\n  /**\n  * @param {boolean=} opt_onLayout\n  * @override\n  */\n  preconnectCallback(opt_onLayout) {\n    this.preconnect.url('https://www.dailymotion.com', opt_onLayout);\n    // Host that Dailymotion uses to serve JS needed by player.\n    this.preconnect.url('https://static1.dmcdn.net', opt_onLayout);\n  }\n\n  /**\n   * @override\n   */\n  supportsPlatform() {\n    return true;\n  }\n\n  /** @override */\n  isInteractive() {\n    // Dailymotion videos are always interactive. There is no Dailymotion param\n    // that makes the video non-interactive. Even controls=false will not\n    // prevent user from pausing or resuming the video.\n    return true;\n  }\n\n  /** @override */\n  isLayoutSupported(layout) {\n    return isLayoutSizeDefined(layout);\n  }\n\n  /** @override */\n  viewportCallback(visible) {\n    this.element.dispatchCustomEvent(VideoEvents.VISIBILITY, {visible});\n  }\n\n  /** @override */\n  buildCallback() {\n    this.videoid_ = user().assert(\n        this.element.getAttribute('data-videoid'),\n        'The data-videoid attribute is required for <amp-dailymotion> %s',\n        this.element);\n\n    installVideoManagerForDoc(this.element);\n    Services.videoManagerForDoc(this.element).register(this);\n    const readyDeferred = new Deferred();\n    this.playerReadyPromise_ = readyDeferred.promise;\n    this.playerReadyResolver_ = readyDeferred.resolve;\n\n    const bufferingDeferred = new Deferred();\n    this.startedBufferingPromise_ = bufferingDeferred.promise;\n    this.startedBufferingResolver_ = bufferingDeferred.resolve;\n  }\n\n  /** @override */\n  layoutCallback() {\n    dev().assert(this.videoid_);\n\n    this.iframe_ = createFrameFor(this, this.getIframeSrc_());\n\n    listen(this.win, 'message', this.handleEvents_.bind(this));\n\n    return this.loadPromise(this.iframe_);\n  }\n\n  /**\n   * @param {!Event} event\n   * @private\n   */\n  handleEvents_(event) {\n    if (!originMatches(event, this.iframe_, 'https://www.dailymotion.com')) {\n      return;\n    }\n    const eventData = getData(event);\n    if (!eventData || !event.type || event.type != 'message') {\n      return; // Event empty\n    }\n    const data = parseQueryString(/** @type {string} */ (eventData));\n    if (data === undefined) {\n      return; // The message isn't valid\n    }\n\n    redispatch(this.element, data['event'], {\n      [DailymotionEvents.API_READY]: VideoEvents.LOAD,\n      [DailymotionEvents.END]: [VideoEvents.ENDED, VideoEvents.PAUSE],\n      [DailymotionEvents.PAUSE]: VideoEvents.PAUSE,\n      [DailymotionEvents.PLAY]: VideoEvents.PLAYING,\n    });\n\n    switch (data['event']) {\n      case DailymotionEvents.API_READY:\n        this.playerReadyResolver_(true);\n        break;\n\n      case DailymotionEvents.END:\n        this.playerState_ = DailymotionEvents.PAUSE;\n        break;\n\n      case DailymotionEvents.PAUSE:\n      case DailymotionEvents.PLAY:\n        this.playerState_ = data['event'];\n        break;\n\n      case DailymotionEvents.VOLUMECHANGE:\n        const isMuted =\n            data['volume'] == 0 ||\n              (data['muted'] == 'true');\n        if (this.playerState_ == DailymotionEvents.UNSTARTED\n            || this.muted_ != isMuted) {\n          this.muted_ = isMuted;\n          this.element.dispatchCustomEvent(mutedOrUnmutedEvent(isMuted));\n        }\n        break;\n\n      case DailymotionEvents.STARTED_BUFFERING:\n        this.startedBufferingResolver_(true);\n        break;\n\n      case DailymotionEvents.FULLSCREEN_CHANGE:\n        this.isFullscreen_ = data['fullscreen'] == 'true';\n        break;\n\n      default: // nothing\n    }\n  }\n\n  /**\n   * Sends a command to the player through postMessage.\n   * @param {string} command\n   * @param {Array<boolean>=} opt_args\n   * @private\n   */\n  sendCommand_(command, opt_args) {\n    const endpoint = 'https://www.dailymotion.com';\n    this.playerReadyPromise_.then(() => {\n      if (this.iframe_ && this.iframe_.contentWindow) {\n        const message = JSON.stringify(dict({\n          'command': command,\n          'parameters': opt_args || [],\n        }));\n        this.iframe_.contentWindow./*OK*/postMessage(message, endpoint);\n      }\n    });\n  }\n\n  /** @private */\n  getIframeSrc_() {\n\n    let iframeSrc = 'https://www.dailymotion.com/embed/video/' +\n       encodeURIComponent(this.videoid_ || '') + '?api=1&html=1&app=amp';\n\n    const explicitParamsAttributes = [\n      'mute',\n      'endscreen-enable',\n      'sharing-enable',\n      'start',\n      'ui-highlight',\n      'ui-logo',\n      'info',\n    ];\n\n    explicitParamsAttributes.forEach(explicitParam => {\n      const val = this.element.getAttribute(`data-${explicitParam}`);\n      if (val) {\n        iframeSrc = addParamToUrl(iframeSrc, explicitParam, val);\n      }\n    });\n\n    const implicitParams = getDataParamsFromAttributes(this.element);\n    iframeSrc = addParamsToUrl(iframeSrc, implicitParams);\n\n    return iframeSrc;\n  }\n\n  /** @override */\n  pauseCallback() {\n    this.pause();\n  }\n\n  /**\n   * @override\n   */\n  play(isAutoplay) {\n    this.sendCommand_('play');\n    // Hack to solve autoplay problem on Chrome Android\n    // (first play always fails)\n    if (isAutoplay && this.playerState_ != DailymotionEvents.PAUSE) {\n      this.startedBufferingPromise_.then(() => {\n        this.sendCommand_('play');\n      });\n    }\n  }\n\n  /**\n   * @override\n   */\n  pause() {\n    this.sendCommand_('pause');\n  }\n\n  /**\n   * @override\n   */\n  mute() {\n    this.sendCommand_('muted', [true]);\n    // Hack to simulate firing mute events when video is not playing\n    // since Dailymotion only fires volume changes when the video has started\n    this.playerReadyPromise_.then(() => {\n      this.element.dispatchCustomEvent(VideoEvents.MUTED);\n      this.muted_ = true;\n    });\n  }\n\n  /**\n   * @override\n   */\n  unmute() {\n    this.sendCommand_('muted', [false]);\n    // Hack to simulate firing mute events when video is not playing\n    // since Dailymotion only fires volume changes when the video has started\n    this.playerReadyPromise_.then(() => {\n      this.element.dispatchCustomEvent(VideoEvents.UNMUTED);\n      this.muted_ = false;\n    });\n  }\n\n  /**\n   * @override\n   */\n  showControls() {\n    this.sendCommand_('controls', [true]);\n  }\n\n  /**\n   * @override\n   */\n  hideControls() {\n    this.sendCommand_('controls', [false]);\n  }\n\n  /**\n   * @override\n   */\n  fullscreenEnter() {\n    const platform = Services.platformFor(this.win);\n    if (platform.isSafari() || platform.isIos()) {\n      this.sendCommand_('fullscreen', [true]);\n    } else {\n      if (!this.iframe_) {\n        return;\n      }\n      fullscreenEnter(dev().assertElement(this.iframe_));\n    }\n  }\n\n  /**\n   * @override\n   */\n  fullscreenExit() {\n    const platform = Services.platformFor(this.win);\n    if (platform.isSafari() || platform.isIos()) {\n      this.sendCommand_('fullscreen', [false]);\n    } else {\n      if (!this.iframe_) {\n        return;\n      }\n      fullscreenExit(dev().assertElement(this.iframe_));\n    }\n  }\n\n  /** @override */\n  isFullscreen() {\n    const platform = Services.platformFor(this.win);\n    if (platform.isSafari() || platform.isIos()) {\n      return this.isFullscreen_;\n    } else {\n      if (!this.iframe_) {\n        return false;\n      }\n      return isFullscreenElement(dev().assertElement(this.iframe_));\n    }\n  }\n\n  /** @override */\n  getMetadata() {\n    // Not implemented\n  }\n\n  /** @override */\n  preimplementsMediaSessionAPI() {\n    return false;\n  }\n\n  /** @override */\n  preimplementsAutoFullscreen() {\n    return false;\n  }\n\n  /** @override */\n  getCurrentTime() {\n    // Not supported.\n    return 0;\n  }\n\n  /** @override */\n  getDuration() {\n    // Not supported.\n    return 1;\n  }\n\n  /** @override */\n  getPlayedRanges() {\n    // Not supported.\n    return [];\n  }\n}\n\n\nAMP.extension('amp-dailymotion', '0.1', AMP => {\n  AMP.registerElement('amp-dailymotion', AmpDailymotion);\n});\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Key string in an action arguments map for an unparsed object literal string.\n *\n * E.g. for the action in <p on=\"tap:AMP.setState({foo: 'bar'})\",\n * then `args[RAW_OBJECT_ARGS_KEY]` is the string \"{foo: 'bar'}\".\n *\n * The action service delegates parsing of object literals to the corresponding\n * extension (in the example above, amp-bind).\n *\n * @see ./service/action-impl.ActionInfoDef\n * @const {string}\n */\nexport const RAW_OBJECT_ARGS_KEY = '__AMP_OBJECT_STRING__';\n\n/**\n * Trust level of an action.\n *\n * Corresponds to degree of user intent, i.e. events triggered with strong\n * user intent have high trust.\n *\n * @enum {number}\n */\nexport const ActionTrust = {\n  LOW: 1,\n  HIGH: 100,\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptsInNode(head).includes(extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Services} from './services';\nimport {VideoEvents} from './video-interface';\nimport {dev} from './log';\nimport {htmlFor} from './static-template';\nimport {isArray, isObject} from './types';\nimport {startsWith} from './string';\nimport {tryParseJson} from './json';\n\n\n/** @enum {string} */\nexport const SandboxOptions = {\n  ALLOW_SCRIPTS: 'allow-scripts',\n  ALLOW_SAME_ORIGIN: 'allow-same-origin',\n};\n\n\n/**\n * @param {!Event} event\n * @param {?Element} iframe\n * @param {string|!RegExp} host\n * @return {boolean}\n */\nexport function originMatches(event, iframe, host) {\n  if (!iframe || event.source != iframe.contentWindow) {\n    return false;\n  }\n  if (typeof host === 'string') {\n    return host == event.origin;\n  }\n  return host.test(event.origin);\n}\n\n\n/**\n * Re-dispatches an event received from postMessage as an event in the host\n * document.\n *\n * @param {!AmpElement} element\n * @param {string} event\n * @param {!Object<string, (string|?Array<string>)>} events\n * @return {boolean}\n */\nexport function redispatch(element, event, events) {\n  if (events[event] == null) {\n    return false;\n  }\n  const dispatchEvent = events[event];\n  (isArray(dispatchEvent) ? dispatchEvent : [dispatchEvent]).forEach(e => {\n    element.dispatchCustomEvent(dev().assertString(e));\n  });\n  return true;\n}\n\n\n/**\n * @param {!./base-element.BaseElement} video\n * @param {string} src\n * @param {string=} opt_name\n * @param {!Array<!SandboxOptions>=} opt_sandbox\n * @return {!Element}\n */\nexport function createFrameFor(video, src, opt_name, opt_sandbox) {\n  const {element} = video;\n  const frame =\n      htmlFor(element)`<iframe frameborder=0 allowfullscreen></iframe>`;\n\n  if (opt_name) {\n    frame.setAttribute('name', opt_name);\n  }\n\n  if (opt_sandbox) {\n    frame.setAttribute('sandbox', opt_sandbox.join(' '));\n  }\n\n  frame.src = Services.urlForDoc(element).assertHttpsUrl(src, element);\n\n  video.applyFillContent(frame);\n  element.appendChild(frame);\n\n  return frame;\n}\n\n\n/**\n * @param {?} anything\n * @return {boolean}\n */\nexport function isJsonOrObj(anything) {\n  if (!anything) {\n    return false;\n  }\n  return isObject(anything) ||\n    startsWith(/** @type {string} */ (anything), '{');\n}\n\n\n/**\n * @param {?JsonObject|string|undefined} objOrStr\n * @return {?JsonObject|undefined}\n */\nexport function objOrParseJson(objOrStr) {\n  if (isObject(objOrStr)) {\n    return /** @type {!JsonObject} */ (objOrStr);\n  }\n  return tryParseJson(objOrStr);\n}\n\n\n/**\n * @param {boolean} isMuted\n * @return {string}\n */\nexport function mutedOrUnmutedEvent(isMuted) {\n  return isMuted ? VideoEvents.MUTED : VideoEvents.UNMUTED;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {*} should be string|number|boolean\n */\nlet JSONScalarDef;\n\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {*} should be !Object<string, ?JSONValueDef>\n */\nlet JSONObjectDef;\n\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {*} should be !Array<?JSONValueDef>\n */\nlet JSONArrayDef;\n\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef\n */\nlet JSONValueDef;\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (part &&\n        value &&\n        value[part] !== undefined &&\n        hasOwnProperty(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Recursively checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum recursion depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function recursiveEquals(a, b, depth = 3) {\n  if (!isFinite(depth)) {\n    throw new Error('depth arg must be finite: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  // Only check shallow equality for depth < 1.\n  if (depth < 1) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!recursiveEquals(a[i], b[i], depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keysA = Object.keys(/** @type {!Object} */ (a));\n    const keysB = Object.keys(/** @type {!Object} */ (b));\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n      const keyA = keysA[i];\n      const valueA = a[keyA];\n      const valueB = b[keyA];\n      if (!recursiveEquals(valueA, valueB, depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n      /** @type {!Object} */ (obj), key);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The structure that combines position and size for an element. The exact\n * interpretation of position and size depends on the use case.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number\n * }}\n */\nexport let LayoutRectDef;\n\n\n/**\n * The structure that represents the margins of an Element.\n *\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nexport let LayoutMarginsDef;\n\n\n/**\n * The structure that represents a requested change to the margins of an\n * Element. Any new values specified will replace existing ones (rather than\n * being additive).\n *\n * @typedef {{\n *   top: (number|undefined),\n *   right: (number|undefined),\n *   bottom: (number|undefined),\n *   left: (number|undefined)\n * }}\n */\nexport let LayoutMarginsChangeDef;\n\n/**\n* RelativePositions\n*\n* Describes the relative position of an element to another (whether the\n* first is inside the second, on top of the second or on the bottom\n* @enum {string}\n*/\nexport const RelativePositions = {\n  INSIDE: 'inside',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\n/**\n * Creates a layout rect based on the left, top, width and height parameters\n * in that order.\n * @param {number} left\n * @param {number} top\n * @param {number} width\n * @param {number} height\n * @return {!LayoutRectDef}\n */\nexport function layoutRectLtwh(left, top, width, height) {\n  return {\n    left,\n    top,\n    width,\n    height,\n    bottom: top + height,\n    right: left + width,\n    x: left,\n    y: top,\n  };\n}\n\n\n/**\n * Creates a layout rect based on the DOMRect, e.g. obtained from calling\n * getBoundingClientRect.\n * @param {!ClientRect} rect\n * @return {!LayoutRectDef}\n */\nexport function layoutRectFromDomRect(rect) {\n  return layoutRectLtwh(Number(rect.left), Number(rect.top),\n      Number(rect.width), Number(rect.height));\n}\n\n/**\n * Returns true if the specified two rects overlap by a single pixel.\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectsOverlap(r1, r2) {\n  return (r1.top <= r2.bottom && r2.top <= r1.bottom &&\n      r1.left <= r2.right && r2.left <= r1.right);\n}\n\n\n/**\n * Returns the intersection between a, b or null if there is none.\n * @param {...?LayoutRectDef|undefined} var_args\n * @return {?LayoutRectDef}\n */\nexport function rectIntersection(var_args) {\n  let x0 = -Infinity;\n  let x1 = Infinity;\n  let y0 = -Infinity;\n  let y1 = Infinity;\n  for (let i = 0; i < arguments.length; i++) {\n    const current = arguments[i];\n    if (!current) {\n      continue;\n    }\n    x0 = Math.max(x0, current.left);\n    x1 = Math.min(x1, current.left + current.width);\n    y0 = Math.max(y0, current.top);\n    y1 = Math.min(y1, current.top + current.height);\n    if (x1 < x0 || y1 < y0) {\n      return null;\n    }\n  }\n  if (x1 == Infinity) {\n    return null;\n  }\n  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);\n}\n\n/**\n * Returns the position of r2 relative to r1\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {RelativePositions}\n */\nexport function layoutRectsRelativePos(r1, r2) {\n  if (r1.top < r2.top) {\n    return RelativePositions.TOP;\n  } else if (r1.bottom > r2.bottom) {\n    return RelativePositions.BOTTOM;\n  } else {\n    return RelativePositions.INSIDE;\n  }\n}\n\n/**\n * Expand the layout rect using multiples of width and height.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dw Expansion in width, specified as a multiple of width.\n * @param {number} dh Expansion in height, specified as a multiple of height.\n * @return {!LayoutRectDef}\n */\nexport function expandLayoutRect(rect, dw, dh) {\n  return layoutRectLtwh(rect.left - rect.width * dw,\n      rect.top - rect.height * dh,\n      rect.width * (1 + dw * 2),\n      rect.height * (1 + dh * 2));\n}\n\n/**\n * Moves the layout rect using dx and dy.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dx Move horizontally with this value.\n * @param {number} dy Move vertically with this value.\n * @return {!LayoutRectDef}\n */\nexport function moveLayoutRect(rect, dx, dy) {\n  if ((dx == 0 && dy == 0) ||\n      (rect.width == 0 && rect.height == 0)) {\n    return rect;\n  }\n  return layoutRectLtwh(rect.left + dx, rect.top + dy,\n      rect.width, rect.height);\n}\n\n\n/**\n * @param {!LayoutMarginsDef} margins\n * @param {!LayoutMarginsChangeDef} change\n * @return {boolean}\n */\nexport function areMarginsChanged(margins, change) {\n  return (change.top !== undefined && change.top != margins.top) ||\n      (change.right !== undefined && change.right != margins.right) ||\n      (change.bottom !== undefined && change.bottom != margins.bottom) ||\n      (change.left !== undefined && change.left != margins.left);\n}\n\n/**\n * @param {!LayoutRectDef} from\n * @param {!LayoutRectDef} to\n * @return {boolean}\n */\nexport function layoutRectSizeEquals(from, to) {\n  return from.width == to.width &&\n      from.height === to.height;\n}\n\n/**\n * @param {?LayoutRectDef} r1\n * @param {?LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectEquals(r1, r2) {\n  if (!r1 || !r2) {\n    return false;\n  }\n  return r1.left == r2.left && r1.top == r2.top &&\n      r1.width == r2.width && r1.height == r2.height;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {dev, user} from './log';\nimport {htmlFor} from './static-template';\nimport {isFiniteNumber} from './types';\nimport {setStyle, setStyles} from './style';\nimport {startsWith} from './string';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nlet DimensionsDef;\n\n\n/**\n * The set of elements with natural dimensions, that is, elements\n * which have a known dimension either based on their value specified here,\n * or, if the value is null, a dimension specific to the browser.\n * `hasNaturalDimensions` checks for membership in this set.\n * `getNaturalDimensions` determines the dimensions for an element in the\n *    set and caches it.\n * @type {!Object<string, ?DimensionsDef>}\n * @private  Visible for testing only!\n */\nexport const naturalDimensions_ = {\n  'AMP-PIXEL': {width: '0px', height: '0px'},\n  'AMP-ANALYTICS': {width: '1px', height: '1px'},\n  // TODO(dvoytenko): audio should have width:auto.\n  'AMP-AUDIO': null,\n  'AMP-SOCIAL-SHARE': {width: '60px', height: '44px'},\n};\n\n\n/**\n * Elements that the progess can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-ANIM': true,\n  'AMP-BRIGHTCOVE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-LIKE': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-OOYALA-PLAYER': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-VIDEO': true,\n  'AMP-YOUTUBE': true,\n};\n\n\n/**\n * @param {string} s\n * @return {Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (layout == Layout.FIXED ||\n      layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE ||\n      layout == Layout.FILL ||\n      layout == Layout.FLEX_ITEM ||\n      layout == Layout.FLUID ||\n      layout == Layout.INTRINSIC);\n}\n\n\n/**\n * Whether the tag is an internal (service) AMP tag.\n * @param {!Node|string} tag\n * @return {boolean}\n */\nexport function isInternalElement(tag) {\n  const tagName = (typeof tag == 'string') ? tag : tag.tagName;\n  return tagName && startsWith(tagName.toLowerCase(), 'i-');\n}\n\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n */\nexport function assertLength(length) {\n  user().assert(\n      /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n      'Invalid length value: %s', length);\n  return /** @type {!LengthDef} */ (length);\n}\n\n\n\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n */\nexport function assertLengthOrPercent(length) {\n  user().assert(/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n      'Invalid length or percent value: %s', length);\n  return length;\n}\n\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  dev().assertString(length);\n  const m = user().assert(length.match(/[a-z]+/i),\n      'Failed to read units from %s', length);\n  return m[0];\n}\n\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n\n/**\n * Determines whether the tagName is a known element that has natural dimensions\n * in our runtime or the browser.\n * @param {string} tagName The element tag name.\n * @return {boolean}\n */\nexport function hasNaturalDimensions(tagName) {\n  tagName = tagName.toUpperCase();\n  return naturalDimensions_[tagName] !== undefined;\n}\n\n\n/**\n * Determines the default dimensions for an element which could vary across\n * different browser implementations, like <audio> for instance.\n * This operation can only be completed for an element whitelisted by\n * `hasNaturalDimensions`.\n * @param {!Element} element\n * @return {DimensionsDef}\n */\nexport function getNaturalDimensions(element) {\n  const tagName = element.tagName.toUpperCase();\n  dev().assert(naturalDimensions_[tagName] !== undefined);\n  if (!naturalDimensions_[tagName]) {\n    const doc = element.ownerDocument;\n    const naturalTagName = tagName.replace(/^AMP\\-/, '');\n    const temp = doc.createElement(naturalTagName);\n    // For audio, should no-op elsewhere.\n    temp.controls = true;\n    setStyles(temp, {\n      position: 'absolute',\n      visibility: 'hidden',\n    });\n    doc.body.appendChild(temp);\n    naturalDimensions_[tagName] = {\n      width: (temp./*OK*/offsetWidth || 1) + 'px',\n      height: (temp./*OK*/offsetHeight || 1) + 'px',\n    };\n    doc.body.removeChild(temp);\n  }\n  return /** @type {DimensionsDef} */ (naturalDimensions_[tagName]);\n}\n\n\n/**\n * Whether the loading can be shown for the specified elemeent. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {\n    return true;\n  }\n  return LOADING_ELEMENTS_[tagName] || false;\n}\n\n\n/**\n * Applies layout to the element. Visible for testing only.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this method is used for server-side rendering (SSR) and\n * any changes made to it must be made in coordination with caches that\n * implement SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @param {!Element} element\n * @return {!Layout}\n */\nexport function applyStaticLayout(element) {\n  // Check if the layout has already been done by server-side rendering. The\n  // document may be visible to the user if the boilerplate was removed so\n  // please take care in making changes here.\n  const completedLayoutAttr = element.getAttribute('i-amphtml-layout');\n  if (completedLayoutAttr) {\n    const layout = /** @type {!Layout} */ (dev().assert(\n        parseLayout(completedLayoutAttr)));\n    if ((layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC)\n      && element.firstElementChild) {\n      // Find sizer, but assume that it might not have been parsed yet.\n      element.sizerElement =\n          element.querySelector('i-amphtml-sizer') || undefined;\n    } else if (layout == Layout.NODISPLAY) {\n      applyNoDisplayLayout(element);\n    }\n    return layout;\n  }\n\n  // If the layout was already done by server-side rendering (SSR), then the\n  // code below will not run. Any changes below will necessitate a change to SSR\n  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.\n\n  // Parse layout from the element.\n  const layoutAttr = element.getAttribute('layout');\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const sizesAttr = element.getAttribute('sizes');\n  const heightsAttr = element.getAttribute('heights');\n\n  // Input layout attributes.\n  const inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;\n  user().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);\n  /** @const {string|null|undefined} */\n  const inputWidth = (widthAttr && widthAttr != 'auto') ?\n    parseLength(widthAttr) : widthAttr;\n  user().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);\n  /** @const {string|null|undefined} */\n  const inputHeight = (heightAttr && heightAttr != 'fluid') ?\n    parseLength(heightAttr) : heightAttr;\n  user().assert(inputHeight !== undefined, 'Invalid height value: %s',\n      heightAttr);\n\n  // Effective layout attributes. These are effectively constants.\n  let width;\n  let height;\n  let layout;\n\n  // Calculate effective width and height.\n  if ((!inputLayout || inputLayout == Layout.FIXED ||\n      inputLayout == Layout.FIXED_HEIGHT) &&\n      (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {\n    // Default width and height: handle elements that do not specify a\n    // width/height and are defined to have natural browser dimensions.\n    const dimensions = getNaturalDimensions(element);\n    width = (inputWidth || inputLayout == Layout.FIXED_HEIGHT) ? inputWidth :\n      dimensions.width;\n    height = inputHeight || dimensions.height;\n  } else {\n    width = inputWidth;\n    height = inputHeight;\n  }\n\n  // Calculate effective layout.\n  if (inputLayout) {\n    layout = inputLayout;\n  } else if (!width && !height) {\n    layout = Layout.CONTAINER;\n  } else if (height == 'fluid') {\n    layout = Layout.FLUID;\n  } else if (height && (!width || width == 'auto')) {\n    layout = Layout.FIXED_HEIGHT;\n  } else if (height && width && (sizesAttr || heightsAttr)) {\n    layout = Layout.RESPONSIVE;\n  } else {\n    layout = Layout.FIXED;\n  }\n\n  // Verify layout attributes.\n  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(height, 'Expected height to be available: %s', heightAttr);\n  }\n  if (layout == Layout.FIXED_HEIGHT) {\n    user().assert(!width || width == 'auto',\n        'Expected width to be either absent or equal \"auto\" ' +\n        'for fixed-height layout: %s', widthAttr);\n  }\n  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE ||\n      layout == Layout.INTRINSIC) {\n    user().assert(width && width != 'auto',\n        'Expected width to be available and not equal to \"auto\": %s',\n        widthAttr);\n  }\n\n  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(getLengthUnits(width) == getLengthUnits(height),\n        'Length units should be the same for width and height: %s, %s',\n        widthAttr, heightAttr);\n  } else {\n    user().assert(heightsAttr === null,\n        'Unexpected \"heights\" attribute for none-responsive layout');\n  }\n\n  // Apply UI.\n  element.classList.add(getLayoutClass(layout));\n  if (isLayoutSizeDefined(layout)) {\n    element.classList.add('i-amphtml-layout-size-defined');\n  }\n  if (layout == Layout.NODISPLAY) {\n    // CSS defines layout=nodisplay automatically with `display:none`. Thus\n    // no additional styling is needed.\n    applyNoDisplayLayout(element);\n  } else if (layout == Layout.FIXED) {\n    setStyles(element, {\n      width: dev().assertString(width),\n      height: dev().assertString(height),\n    });\n  } else if (layout == Layout.FIXED_HEIGHT) {\n    setStyle(element, 'height', dev().assertString(height));\n  } else if (layout == Layout.RESPONSIVE) {\n    const sizer = element.ownerDocument.createElement('i-amphtml-sizer');\n    setStyles(sizer, {\n      display: 'block',\n      paddingTop:\n        ((getLengthNumeral(height) / getLengthNumeral(width)) * 100) + '%',\n    });\n    element.insertBefore(sizer, element.firstChild);\n    element.sizerElement = sizer;\n  } else if (layout == Layout.INTRINSIC) {\n    // Intrinsic uses an svg inside the sizer element rather than the padding\n    // trick Note a naked svg won't work becasue other thing expect the\n    // i-amphtml-sizer element\n    const sizer = htmlFor(element)`\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>`;\n    const intrinsicSizer = sizer.firstElementChild;\n    intrinsicSizer.setAttribute('src',\n        `data:image/svg+xml;charset=utf-8,<svg height=\"${height}\" width=\"${width}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`);\n    element.insertBefore(sizer, element.firstChild);\n    // TODO(jpettitt): sizer is leaked and can't be cleaned up.\n    element.sizerElement = intrinsicSizer;\n  } else if (layout == Layout.FILL) {\n    // Do nothing.\n  } else if (layout == Layout.CONTAINER) {\n    // Do nothing. Elements themselves will check whether the supplied\n    // layout value is acceptable. In particular container is only OK\n    // sometimes.\n  } else if (layout == Layout.FLEX_ITEM) {\n    // Set height and width to a flex item if they exist.\n    // The size set to a flex item could be overridden by `display: flex` later.\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    if (height) {\n      setStyle(element, 'height', height);\n    }\n  } else if (layout == Layout.FLUID) {\n    element.classList.add('i-amphtml-layout-awaiting-size');\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    setStyle(element, 'height', 0);\n  }\n  return layout;\n}\n\n\n/**\n * @param {!Element} element\n */\nfunction applyNoDisplayLayout(element) {\n  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed\n  // everywhere, switch all relevant elements to this API. In the meantime,\n  // simply unblock display toggling via `style=\"display: ...\"`.\n  setStyle(element, 'display', 'none');\n  element.classList.add('i-amphtml-display');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Services} from './services';\nimport {dev, user} from './log';\nimport {isArray, isObject} from './types';\nimport {tryParseJson} from './json';\n\n/**\n * @typedef {{\n *   artwork: Array,\n *   title: string,\n *   album: string,\n *   artist: string,\n * }}\n */\nexport let MetadataDef;\n\n/** @const {MetadataDef} Dummy metadata used to fix a bug */\nexport const EMPTY_METADATA = {\n  'title': '',\n  'artist': '',\n  'album': '',\n  'artwork': [\n    {'src': ''},\n  ],\n};\n\n/**\n * Updates the Media Session API's metadata\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {!MetadataDef} metadata\n * @param {function()=} playHandler\n * @param {function()=} pauseHandler\n */\nexport function setMediaSession(ampdoc, metadata, playHandler, pauseHandler) {\n  const {win} = ampdoc;\n  const {navigator} = win;\n  if ('mediaSession' in navigator && win.MediaMetadata) {\n    // Clear mediaSession (required to fix a bug when switching between two\n    // videos)\n    navigator.mediaSession.metadata = new win.MediaMetadata(EMPTY_METADATA);\n\n    // Add metadata\n    validateMetadata(ampdoc, metadata);\n    navigator.mediaSession.metadata = new win.MediaMetadata(metadata);\n\n    navigator.mediaSession.setActionHandler('play', playHandler);\n    navigator.mediaSession.setActionHandler('pause', pauseHandler);\n\n    // TODO(@wassgha) Implement seek & next/previous\n  }\n}\n\n\n/**\n * Parses the schema.org json-ld formatted meta-data, looks for the page's\n * featured image and returns it\n * @param {!Document} doc\n * @return {string|undefined}\n */\nexport function parseSchemaImage(doc) {\n  const schema = doc.querySelector('script[type=\"application/ld+json\"]');\n  if (!schema) {\n    // No schema element found\n    return;\n  }\n  const schemaJson = tryParseJson(schema.textContent);\n  if (!schemaJson || !schemaJson['image']) {\n    // No image found in the schema\n    return;\n  }\n\n  // Image definition in schema could be one of :\n  if (typeof schemaJson['image'] === 'string') {\n    // 1. \"image\": \"http://..\",\n    return schemaJson['image'];\n  } else if (schemaJson['image']['@list']\n      && typeof schemaJson['image']['@list'][0] === 'string') {\n    // 2. \"image\": {.., \"@list\": [\"http://..\"], ..}\n    return schemaJson['image']['@list'][0];\n  } else if (typeof schemaJson['image']['url'] === 'string') {\n    // 3. \"image\": {.., \"url\": \"http://..\", ..}\n    return schemaJson['image']['url'];\n  } else if (typeof schemaJson['image'][0] === 'string') {\n    // 4. \"image\": [\"http://.. \"]\n    return schemaJson['image'][0];\n  } else {\n    return;\n  }\n}\n\n/**\n * Parses the og:image if it exists and returns it\n * @param {!Document} doc\n * @return {string|undefined}\n */\nexport function parseOgImage(doc) {\n  const metaTag = doc.querySelector('meta[property=\"og:image\"]');\n  if (metaTag) {\n    return metaTag.getAttribute('content');\n  } else {\n    return;\n  }\n}\n\n/**\n * Parses the website's Favicon and returns it\n * @param {!Document} doc\n * @return {string|undefined}\n */\nexport function parseFavicon(doc) {\n  const linkTag = doc.querySelector('link[rel=\"shortcut icon\"]')\n                  || doc.querySelector('link[rel=\"icon\"]');\n  if (linkTag) {\n    return linkTag.getAttribute('href');\n  } else {\n    return;\n  }\n}\n\n/**\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {!MetadataDef} metadata\n * @private\n */\nfunction validateMetadata(ampdoc, metadata) {\n  const urlService = Services.urlForDoc(ampdoc);\n  // Ensure src of artwork has valid protocol\n  if (metadata && metadata.artwork) {\n    const {artwork} = metadata;\n    dev().assert(isArray(artwork));\n    artwork.forEach(item => {\n      if (item) {\n        const src = isObject(item) ? item.src : item;\n        user().assert(urlService.isProtocolValid(src));\n      }\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    const index = this.handlers_.indexOf(handler);\n    if (index > -1) {\n      this.handlers_.splice(index, 1);\n    }\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    const handlers = this.handlers_;\n    for (let i = 0; i < handlers.length; i++) {\n      const handler = handlers[i];\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    if (!this.handlers_) {\n      return 0;\n    }\n    return this.handlers_.length;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getServicePromise} from './service';\n\n/**\n * A map of services that delay rendering. The key is the name of the service\n * and the value is a DOM query which is used to check if the service is needed\n * in the current document.\n * Do not add a service unless absolutely necessary.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this list is used for server-side rendering (SSR) and any\n * changes made to it must be made in coordination with caches that implement\n * SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @const {!Object<string, string>}\n */\nconst SERVICES = {\n  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',\n  'variant': 'amp-experiment',\n  'amp-story': 'amp-story[standalone]',\n};\n\n/**\n * Maximum milliseconds to wait for all extensions to load before erroring.\n * @const\n */\nconst LOAD_TIMEOUT = 3000;\n\n/**\n * Detects any render delaying services that are required on the page, and\n * returns a promise with a timeout.\n * @param {!Window} win\n * @return {!Promise<!Array<*>>} resolves to an Array that has the same length\n *     as the detected render delaying services\n */\nexport function waitForServices(win) {\n  const promises = includedServices(win).map(service => {\n    return Services.timerFor(win).timeoutPromise(\n        LOAD_TIMEOUT,\n        getServicePromise(win, service),\n        `Render timeout waiting for service ${service} to be ready.`\n    );\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Returns true if the page has a render delaying service.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function hasRenderDelayingServices(win) {\n  return includedServices(win).length > 0;\n}\n\n/**\n * Detects which, if any, render-delaying extensions are included on the page.\n * @param {!Window} win\n * @return {!Array<string>}\n */\nexport function includedServices(win) {\n  /** @const {!Document} */\n  const doc = win.document;\n  dev().assert(doc.body);\n\n  return Object.keys(SERVICES).filter(service => {\n    return doc.querySelector(SERVICES[service]);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use baseInstance file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PositionObserverFidelity, // eslint-disable-line no-unused-vars\n  PositionObserverWorker, // eslint-disable-line no-unused-vars\n} from './position-observer-worker';\nimport {Services} from '../../services';\nimport {debounce} from '../../utils/rate-limit';\nimport {dev} from '../../log';\nimport {registerServiceBuilderForDoc} from '../../service';\n\n/** @const @private */\nconst TAG = 'POSITION_OBSERVER';\n\n/** @const @private */\nconst SCROLL_TIMEOUT = 500;\n\n\nexport class PositionObserver {\n  /**\n   * @param {!../ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @private {!../ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private {!Window} */\n    this.win_ = ampdoc.win;\n\n    /** @private {!Array<!PositionObserverWorker>} */\n    this.workers_ = [];\n\n    /** @private {!../vsync-impl.Vsync} */\n    this.vsync_ = Services.vsyncFor(this.win_);\n\n    /** @private {!../viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n\n    /** @private {Array<function()>} */\n    this.unlisteners_ = [];\n\n    /** @private {boolean} */\n    this.inScroll_ = false;\n\n    /** @private {boolean} */\n    this.measure_ = false;\n\n    /** @private {boolean} */\n    this.callbackStarted_ = false;\n\n    /** @private {function()} */\n    this.boundStopScroll_ = debounce(this.win_, () => {\n      this.inScroll_ = false;\n    }, SCROLL_TIMEOUT);\n  }\n\n  /**\n   * @param {!Element} element\n   * @param {!PositionObserverFidelity} fidelity\n   * @param {function(?./position-observer-worker.PositionInViewportEntryDef)} handler\n   * @return {!UnlistenDef}\n   */\n  observe(element, fidelity, handler) {\n    const worker =\n        new PositionObserverWorker(this.ampdoc_, element, fidelity, handler);\n\n    this.workers_.push(worker);\n\n    if (!this.callbackStarted_) {\n      this.startCallback_();\n    }\n\n    worker.update();\n\n    return () => {\n      for (let i = 0; i < this.workers_.length; i++) {\n        if (this.workers_[i] == worker) {\n          this.removeWorker_(i);\n          return;\n        }\n      }\n    };\n  }\n\n  /**\n   * @param {!Element} element\n   */\n  unobserve(element) {\n    for (let i = 0; i < this.workers_.length; i++) {\n      if (this.workers_[i].element == element) {\n        this.removeWorker_(i);\n        return;\n      }\n    }\n    dev().error(TAG, 'cannot unobserve unobserved element');\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  removeWorker_(index) {\n    this.workers_.splice(index, 1);\n    if (this.workers_.length == 0) {\n      this.stopCallback_();\n    }\n  }\n\n  /**\n   * Callback function that gets called when start to observe the first element.\n   * @private\n   */\n  startCallback_() {\n    this.callbackStarted_ = true;\n    // listen to viewport scroll event to help pass determine if need to\n    this.unlisteners_.push(this.viewport_.onScroll(() => {\n      this.onScrollHandler_();\n    }));\n    this.unlisteners_.push(this.viewport_.onResize(() => {\n      this.onResizeHandler_();\n    }));\n  }\n\n  /**\n   * Callback function that gets called when unobserve last observed element.\n   * @private\n   */\n  stopCallback_() {\n    this.callbackStarted_ = false;\n    while (this.unlisteners_.length) {\n      const unlisten = this.unlisteners_.pop();\n      unlisten();\n    }\n  }\n\n  /**\n   * This should always be called in vsync.\n   * @param {boolean=} opt_force\n   * @visibleForTesting\n  */\n  updateAllEntries(opt_force) {\n    for (let i = 0; i < this.workers_.length; i++) {\n      const worker = this.workers_[i];\n      worker.update(opt_force);\n    }\n  }\n\n  /**\n   * Handle viewport scroll event\n   * @private\n   */\n  onScrollHandler_() {\n    this.boundStopScroll_();\n    this.inScroll_ = true;\n    if (!this.measure_) {\n      this.schedulePass_();\n    }\n  }\n\n  /**\n   * Handle viewport resize event\n   * @private\n   */\n  onResizeHandler_() {\n    this.updateAllEntries(true);\n  }\n\n  /**\n   * Update all entries during scroll\n   * @private\n   */\n  schedulePass_() {\n    // TODO (@zhouyx, #9208):\n    // P1: account for effective fidelity using this.effectiveFidelity\n    // P2: do passes on onDomMutation (if available using MutationObserver\n    // mostly for in-a-box host, since most DOM mutations are constraint to the\n    // AMP elements).\n    this.updateAllEntries();\n    this.measure_ = true;\n    if (!this.inScroll_) {\n      // Stop measure if viewport is no longer scrolling\n      this.measure_ = false;\n      return;\n    }\n    this.vsync_.measure(() => {\n      this.schedulePass_();\n    });\n  }\n}\n\n/**\n * @param {!../ampdoc-impl.AmpDoc} ampdoc\n */\nexport function installPositionObserverServiceForDoc(ampdoc) {\n  registerServiceBuilderForDoc(ampdoc, 'position-observer', () => {\n    return new PositionObserver(ampdoc);\n  });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use baseInstance file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../services';\nimport {dev} from '../../log';\nimport {\n  layoutRectEquals,\n  layoutRectLtwh,\n  layoutRectsOverlap,\n  layoutRectsRelativePos,\n} from '../../layout-rect';\n\n/** @enum {number} */\nexport const PositionObserverFidelity = {\n  HIGH: 1,\n  LOW: 0,\n};\n\n/** @const @private */\nconst LOW_FIDELITY_FRAME_COUNT = 4;\n\n/**\n * TODO (@zhouyx): rename relativePos to relativePositions\n * The positionObserver returned position value which includes the position rect\n * relative to viewport. And viewport rect which always has top 0, left 0, and\n * viewport width and height.\n * @typedef {{\n *  positionRect: ?../../layout-rect.LayoutRectDef,\n *  viewportRect: !../../layout-rect.LayoutRectDef,\n *  relativePos: string,\n * }}\n */\nexport let PositionInViewportEntryDef;\n\nexport class PositionObserverWorker {\n  /**\n   * @param {!../ampdoc-impl.AmpDoc} ampdoc\n   * @param {!Element} element\n   * @param {!PositionObserverFidelity} fidelity\n   * @param {function(?PositionInViewportEntryDef)} handler\n   */\n  constructor(ampdoc, element, fidelity, handler) {\n    /** @const {!Element} */\n    this.element = element;\n\n    /** @const {function(?PositionInViewportEntryDef)} */\n    this.handler_ = handler;\n\n    /** @type {!PositionObserverFidelity} */\n    this.fidelity = fidelity;\n\n    /** @type {number} */\n    this.turn = (fidelity == PositionObserverFidelity.LOW) ?\n      Math.floor(Math.random() * LOW_FIDELITY_FRAME_COUNT) : 0;\n\n    /** @type {?PositionInViewportEntryDef} */\n    this.prevPosition_ = null;\n\n    /** @private {!../viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n  }\n\n  /**\n   * Call to trigger an entry handler\n   * @param {!PositionInViewportEntryDef} position\n   * @private\n   */\n  trigger_(position) {\n    const prevPos = this.prevPosition_;\n    if (prevPos\n        && layoutRectEquals(prevPos.positionRect, position.positionRect)\n        && layoutRectEquals(prevPos.viewportRect, position.viewportRect)) {\n      // position didn't change, do nothing.\n      return;\n    }\n\n    dev().assert(position.positionRect,\n        'PositionObserver should always trigger entry with clientRect');\n    const positionRect =\n    /** @type {!../../layout-rect.LayoutRectDef} */ (position.positionRect);\n    // Add the relative position of the element to its viewport\n    position.relativePos = layoutRectsRelativePos(positionRect,\n        position.viewportRect);\n\n    if (layoutRectsOverlap(positionRect, position.viewportRect)) {\n      // Update position\n      this.prevPosition_ = position;\n      // Only call handler if entry element overlap with viewport.\n      this.handler_(position);\n    } else if (this.prevPosition_) {\n      // Need to notify that element gets outside viewport\n      // NOTE: This is required for inabox position observer.\n      this.prevPosition_ = null;\n      position.positionRect = null;\n      this.handler_(position);\n    }\n  }\n\n  /**\n   * To update the position of entry element when it is ready.\n   * Called when updateAllEntries, or when first observe an element.\n   * @param {boolean=} opt_force\n   */\n  update(opt_force) {\n    if (!opt_force) {\n      if (this.turn != 0) {\n        this.turn--;\n        return;\n      }\n\n      if (this.fidelity == PositionObserverFidelity.LOW) {\n        this.turn = LOW_FIDELITY_FRAME_COUNT;\n      }\n    }\n\n    const viewportSize = this.viewport_.getSize();\n    const viewportBox =\n        layoutRectLtwh(0, 0, viewportSize.width, viewportSize.height);\n    this.viewport_.getClientRectAsync(this.element).then(elementBox => {\n      this.trigger_(\n      /** @type {./position-observer-worker.PositionInViewportEntryDef}*/ ({\n            positionRect: elementBox,\n            viewportRect: viewportBox,\n            relativePos: '',\n          }));\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ActionTrust} from '../action-constants';\nimport {\n  EMPTY_METADATA,\n  parseFavicon,\n  parseOgImage,\n  parseSchemaImage,\n  setMediaSession,\n} from '../mediasession-helper';\nimport {\n  MIN_VISIBILITY_RATIO_FOR_AUTOPLAY,\n  PlayingStates,\n  VideoAnalyticsEvents,\n  VideoAttributes,\n  VideoEvents,\n} from '../video-interface';\nimport {Services} from '../services';\nimport {VideoDocking} from './video/docking';\nimport {\n  VideoServiceInterface,\n  VideoServiceSignals,\n} from './video-service-interface';\nimport {\n  VideoServiceSync,\n  setVideoComponentClassname,\n} from './video-service-sync-impl';\nimport {VideoSessionManager} from './video-session-manager';\nimport {VideoUtils, getInternalVideoElementFor} from '../utils/video';\nimport {\n  createCustomEvent,\n  getData,\n  listen,\n  listenOncePromise,\n} from '../event-helper';\nimport {dev, user} from '../log';\nimport {dict, map} from '../utils/object';\nimport {getMode} from '../mode';\nimport {installAutoplayStylesForDoc} from './video/install-autoplay-styles';\nimport {isFiniteNumber} from '../types';\nimport {once} from '../utils/function';\nimport {registerServiceBuilderForDoc} from '../service';\nimport {removeElement} from '../dom';\nimport {renderIcon, renderInteractionOverlay} from './video/autoplay';\nimport {setStyle} from '../style';\nimport {startsWith} from '../string';\n\n\n/** @private @const {string} */\nconst TAG = 'video-manager';\n\n\n/**\n * @private {number} The minimum number of milliseconds to wait between each\n * video-seconds-played analytics event.\n */\nconst SECONDS_PLAYED_MIN_DELAY = 1000;\n\n\n/**\n * @param {!../video-interface.VideoOrBaseElementDef} video\n * @private\n */\nfunction userInteractedWith(video) {\n  video.signals().signal(VideoServiceSignals.USER_INTERACTED);\n}\n\n\n/**\n * VideoManager keeps track of all AMP video players that implement\n * the common Video API {@see ../video-interface.VideoInterface}.\n *\n * It is responsible for providing a unified user experience and analytics for\n * all videos within a document.\n *\n * @implements {VideoServiceInterface}\n */\nexport class VideoManager {\n\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n\n    /** @const {!./ampdoc-impl.AmpDoc}  */\n    this.ampdoc = ampdoc;\n\n    /** @const */\n    this.installAutoplayStyles = once(() =>\n      installAutoplayStylesForDoc(this.ampdoc));\n\n    /** @private {!../service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(this.ampdoc);\n\n    /** @private {?Array<!VideoEntry>} */\n    this.entries_ = null;\n\n    /** @private {boolean} */\n    this.scrollListenerInstalled_ = false;\n\n    /** @private @const */\n    this.timer_ = Services.timerFor(ampdoc.win);\n\n    /** @private @const */\n    this.actions_ = Services.actionServiceForDoc(ampdoc);\n\n    /** @private @const */\n    this.boundSecondsPlaying_ = () => this.secondsPlaying_();\n\n    /** @private @const {function():!AutoFullscreenManager} */\n    this.getAutoFullscreenManager_ =\n        once(() => new AutoFullscreenManager(this.ampdoc, this));\n\n    /** @private @const {function():!VideoDocking} */\n    this.getDocking_ = once(() => new VideoDocking(this.ampdoc, this));\n\n    // TODO(cvializ, #10599): It would be nice to only create the timer\n    // if video analytics are present, since the timer is not needed if\n    // video analytics are not present.\n    this.timer_.delay(this.boundSecondsPlaying_, SECONDS_PLAYED_MIN_DELAY);\n  }\n\n  /**\n   * Each second, trigger video-seconds-played for videos that are playing\n   * at trigger time.\n   * @private\n   */\n  secondsPlaying_() {\n    for (let i = 0; i < this.entries_.length; i++) {\n      const entry = this.entries_[i];\n      if (entry.getPlayingState() !== PlayingStates.PAUSED) {\n        analyticsEvent(entry, VideoAnalyticsEvents.SECONDS_PLAYED);\n        this.timeUpdateActionEvent_(entry);\n      }\n    }\n    this.timer_.delay(this.boundSecondsPlaying_, SECONDS_PLAYED_MIN_DELAY);\n  }\n\n  /**\n   * Triggers a LOW-TRUST timeupdate event consumable by AMP actions.\n   * Frequency of this event is controlled by SECONDS_PLAYED_MIN_DELAY and is\n   * every 1 second for now.\n   * @param {!VideoEntry} entry\n   * @private\n   */\n  timeUpdateActionEvent_(entry) {\n    const name = 'timeUpdate';\n    const currentTime = entry.video.getCurrentTime();\n    const duration = entry.video.getDuration();\n    if (isFiniteNumber(currentTime) &&\n        isFiniteNumber(duration) &&\n        duration > 0) {\n      const perc = currentTime / duration;\n      const event = createCustomEvent(this.ampdoc.win, `${TAG}.${name}`,\n          dict({'time': currentTime, 'percent': perc}));\n      this.actions_.trigger(entry.video.element, name, event, ActionTrust.LOW);\n    }\n  }\n\n  /** @override */\n  register(video) {\n    dev().assert(video);\n\n    this.registerCommonActions_(video);\n\n    if (!video.supportsPlatform()) {\n      return;\n    }\n\n    this.entries_ = this.entries_ || [];\n    const entry = new VideoEntry(this, video);\n    this.maybeInstallVisibilityObserver_(entry);\n    this.entries_.push(entry);\n\n    const {element} = entry.video;\n    element.dispatchCustomEvent(VideoEvents.REGISTERED);\n\n    setVideoComponentClassname(element);\n\n    // Unlike events, signals are permanent. We can wait for `REGISTERED` at any\n    // moment in the element's lifecycle and the promise will resolve\n    // appropriately each time.\n    const signals =\n        (/** @type {!../base-element.BaseElement} */ (video)).signals();\n\n    signals.signal(VideoEvents.REGISTERED);\n\n    // Add a class to element to indicate it implements the video interface.\n    element.classList.add('i-amphtml-video-interface');\n  }\n\n  /**\n   * Register common actions such as play, pause, etc... on the video element\n   * so they can be called using AMP Actions.\n   * For example: <button on=\"tap:myVideo.play\">\n   *\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  registerCommonActions_(video) {\n    // Only require ActionTrust.LOW for video actions to defer to platform\n    // specific handling (e.g. user gesture requirement for unmuted playback).\n    const trust = ActionTrust.LOW;\n\n    registerAction('play', () => video.play(/* isAutoplay */ false));\n    registerAction('pause', () => video.pause());\n    registerAction('mute', () => video.mute());\n    registerAction('unmute', () => video.unmute());\n    registerAction('fullscreen', () => video.fullscreenEnter());\n\n    /**\n     * @param {string} action\n     * @param {function()} fn\n     */\n    function registerAction(action, fn) {\n      video.registerAction(action, () => {\n        userInteractedWith(video);\n        fn();\n      }, trust);\n    }\n  }\n\n  /**\n   * Install the necessary listeners to be notified when a video becomes visible\n   * in the viewport.\n   *\n   * Visibility of a video is defined by being in the viewport AND having\n   * {@link MIN_VISIBILITY_RATIO_FOR_AUTOPLAY} of the video element visible.\n   *\n   * @param {VideoEntry} entry\n   * @private\n   */\n  maybeInstallVisibilityObserver_(entry) {\n    const {element} = entry.video;\n\n    listen(element, VideoEvents.VISIBILITY, details => {\n      const data = getData(details);\n      if (data && data['visible'] == true) {\n        entry.updateVisibility(/* opt_forceVisible */ true);\n      } else {\n        entry.updateVisibility();\n      }\n    });\n\n    listen(element, VideoEvents.RELOAD, () => {\n      entry.videoLoaded();\n    });\n\n    // TODO(aghassemi, #6425): Use IntersectionObserver\n    if (!this.scrollListenerInstalled_) {\n      const scrollListener = () => {\n        for (let i = 0; i < this.entries_.length; i++) {\n          this.entries_[i].updateVisibility();\n        }\n      };\n      this.viewport_.onScroll(scrollListener);\n      this.viewport_.onChanged(scrollListener);\n      this.scrollListenerInstalled_ = true;\n    }\n  }\n\n  /**\n   * Returns the entry in the video manager corresponding to the video\n   * provided\n   *\n   * @param {!../video-interface.VideoInterface} video\n   * @return {VideoEntry} entry\n   * @private\n   */\n  getEntryForVideo_(video) {\n    for (let i = 0; i < this.entries_.length; i++) {\n      if (this.entries_[i].video === video) {\n        return this.entries_[i];\n      }\n    }\n    dev().error(TAG, 'video is not registered to this video manager');\n    return null;\n  }\n\n  /**\n   * Returns the entry in the video manager corresponding to the element\n   * provided\n   *\n   * @param {!AmpElement} element\n   * @return {VideoEntry} entry\n   * @private\n   */\n  getEntryForElement_(element) {\n    for (let i = 0; i < this.entries_.length; i++) {\n      const entry = this.entries_[i];\n      if (entry.video.element === element) {\n        return entry;\n      }\n    }\n    dev().error(TAG, 'video is not registered to this video manager');\n    return null;\n  }\n\n  /** @override */\n  getAnalyticsDetails(videoElement) {\n    const entry = this.getEntryForElement_(videoElement);\n    return entry ? entry.getAnalyticsDetails() : Promise.resolve();\n  }\n\n  /**\n   * Returns whether the video is paused or playing after the user interacted\n   * with it or playing through autoplay\n   *\n   * @param {!../video-interface.VideoInterface} video\n   * @return {!../video-interface.VideoInterface} PlayingStates\n   */\n  getPlayingState(video) {\n    return this.getEntryForVideo_(video).getPlayingState();\n  }\n\n  /**\n   * @param {!../video-interface.VideoInterface} video\n   * @return {boolean}\n   */\n  isMuted(video) {\n    return this.getEntryForVideo_(video).isMuted();\n  }\n\n  /**\n   * @param {!../video-interface.VideoInterface} video\n   * @return {boolean}\n   */\n  userInteracted(video) {\n    return this.getEntryForVideo_(video).userInteracted();\n  }\n\n  /** @param {!VideoEntry} entry */\n  registerForAutoFullscreen(entry) {\n    this.getAutoFullscreenManager_().register(entry);\n  }\n\n  /** @param {!VideoEntry} entry */\n  registerForDocking(entry) {\n    this.getDocking_().register(entry.video);\n  }\n\n  /**\n   * @return {!AutoFullscreenManager}\n   * @visibleForTesting\n   */\n  getAutoFullscreenManagerForTesting_() {\n    return this.getAutoFullscreenManager_();\n  }\n}\n\n\n/**\n * VideoEntry represents an entry in the VideoManager's list.\n */\nclass VideoEntry {\n  /**\n   * @param {!VideoManager} manager\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   */\n  constructor(manager, video) {\n    /** @private @const {!VideoManager} */\n    this.manager_ = manager;\n\n    /** @private @const {!./ampdoc-impl.AmpDoc}  */\n    this.ampdoc_ = manager.ampdoc;\n\n    /** @package @const {!../video-interface.VideoOrBaseElementDef} */\n    this.video = video;\n\n    /** @private {boolean} */\n    this.allowAutoplay_ = true;\n\n    /** @private {boolean} */\n    this.loaded_ = false;\n\n    /** @private {boolean} */\n    this.isPlaying_ = false;\n\n    /** @private {boolean} */\n    this.isVisible_ = false;\n\n    /** @private @const */\n    this.actionSessionManager_ = new VideoSessionManager();\n\n    this.actionSessionManager_.onSessionEnd(\n        () => analyticsEvent(this, VideoAnalyticsEvents.SESSION));\n\n    /** @private @const */\n    this.visibilitySessionManager_ = new VideoSessionManager();\n\n    this.visibilitySessionManager_.onSessionEnd(\n        () => analyticsEvent(this, VideoAnalyticsEvents.SESSION_VISIBLE));\n\n    /** @private @const {function(): !Promise<boolean>} */\n    this.supportsAutoplay_ = () => {\n      const {win} = this.ampdoc_;\n      return VideoUtils.isAutoplaySupported(win, getMode(win).lite);\n    };\n\n    // Autoplay Variables\n\n    /** @private {boolean} */\n    this.playCalledByAutoplay_ = false;\n\n    /** @private {boolean} */\n    this.pauseCalledByAutoplay_ = false;\n\n    /** @private {?Element} */\n    this.internalElement_ = null;\n\n    /** @private {boolean} */\n    this.muted_ = false;\n\n    this.hasAutoplay = video.element.hasAttribute(VideoAttributes.AUTOPLAY);\n\n    if (this.hasAutoplay) {\n      this.manager_.installAutoplayStyles();\n    }\n\n    // Media Session API Variables\n\n    /** @private {!../mediasession-helper.MetadataDef} */\n    this.metadata_ = EMPTY_METADATA;\n\n    listenOncePromise(video.element, VideoEvents.LOAD)\n        .then(() => this.videoLoaded());\n    listen(video.element, VideoEvents.PAUSE, () => this.videoPaused_());\n    listen(video.element, VideoEvents.PLAYING, () => this.videoPlayed_());\n    listen(video.element, VideoEvents.MUTED, () => this.muted_ = true);\n    listen(video.element, VideoEvents.UNMUTED, () => this.muted_ = false);\n    listen(video.element, VideoEvents.ENDED, () => this.videoEnded_());\n\n    video.signals().whenSignal(VideoEvents.REGISTERED)\n        .then(() => this.onRegister_());\n\n    /**\n     * Trigger event for first manual play.\n     * @private @const {!function()}\n     */\n    this.firstPlayEventOrNoop_ = once(() => {\n      const firstPlay = 'firstPlay';\n      const trust = ActionTrust.LOW;\n      const event = createCustomEvent(this.ampdoc_.win, firstPlay,\n          /* detail */ dict({}));\n      const actions = Services.actionServiceForDoc(this.ampdoc_);\n      actions.trigger(this.video.element, firstPlay, event, trust);\n    });\n\n    this.listenForAutoplayDelegation_();\n  }\n\n  /** Listens for signals to delegate autoplay to a different module. */\n  listenForAutoplayDelegation_() {\n    const signals = this.video.signals();\n    signals.whenSignal(VideoServiceSignals.AUTOPLAY_DELEGATED).then(() => {\n      this.allowAutoplay_ = false;\n\n      if (this.isPlaying_) {\n        this.video.pause();\n      }\n    });\n  }\n\n  /** @return {boolean} */\n  isMuted() {\n    return this.muted_;\n  }\n\n  /** @private */\n  onRegister_() {\n    if (this.requiresAutoFullscreen_()) {\n      this.manager_.registerForAutoFullscreen(this);\n    }\n\n    if (this.isDockable_()) {\n      this.manager_.registerForDocking(this);\n    }\n\n    this.updateVisibility();\n    if (this.hasAutoplay) {\n      this.autoplayVideoBuilt_();\n    }\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  isDockable_() {\n    return this.video.element.hasAttribute(VideoAttributes.DOCK);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  requiresAutoFullscreen_() {\n    const {element} = this.video;\n    if (this.video.preimplementsAutoFullscreen() ||\n        !element.hasAttribute(VideoAttributes.ROTATE_TO_FULLSCREEN)) {\n      return false;\n    }\n    return user().assert(this.video.isInteractive(),\n        'Only interactive videos are allowed to enter fullscreen on rotate. ' +\n        'Set the `controls` attribute on %s to enable.',\n        element);\n  }\n\n  /**\n   * Callback for when the video starts playing\n   * @private\n   */\n  videoPlayed_() {\n    this.isPlaying_ = true;\n\n    if (this.getPlayingState() == PlayingStates.PLAYING_MANUAL) {\n      this.firstPlayEventOrNoop_();\n    }\n\n    if (!this.video.preimplementsMediaSessionAPI()) {\n      const playHandler = () => {\n        this.video.play(/*isAutoplay*/ false);\n      };\n      const pauseHandler = () => {\n        this.video.pause();\n      };\n      // Update the media session\n      setMediaSession(this.ampdoc_, this.metadata_, playHandler, pauseHandler);\n    }\n\n    this.actionSessionManager_.beginSession();\n    if (this.isVisible_) {\n      this.visibilitySessionManager_.beginSession();\n    }\n    analyticsEvent(this, VideoAnalyticsEvents.PLAY);\n  }\n\n  /**\n   * Callback for when the video has been paused\n   * @private\n   */\n  videoPaused_() {\n    analyticsEvent(this, VideoAnalyticsEvents.PAUSE);\n    this.isPlaying_ = false;\n\n    // Prevent double-trigger of session if video is autoplay and the video\n    // is paused by a the user scrolling the video out of view.\n    if (!this.pauseCalledByAutoplay_) {\n      this.actionSessionManager_.endSession();\n    } else {\n      // reset the flag\n      this.pauseCalledByAutoplay_ = false;\n    }\n  }\n\n  /**\n   * Callback for when the video has ended\n   * @private\n   */\n  videoEnded_() {\n    analyticsEvent(this, VideoAnalyticsEvents.ENDED);\n  }\n\n  /**\n   * Called when the video is loaded and can play.\n   */\n  videoLoaded() {\n    this.loaded_ = true;\n\n    this.internalElement_ = getInternalVideoElementFor(this.video.element);\n\n    this.fillMediaSessionMetadata_();\n\n    this.updateVisibility();\n    if (this.isVisible_) {\n      // Handles the case when the video becomes visible before loading\n      this.loadedVideoVisibilityChanged_();\n    }\n  }\n\n  /**\n   * Gets the provided metadata and fills in missing fields\n   * @private\n   */\n  fillMediaSessionMetadata_() {\n    if (this.video.preimplementsMediaSessionAPI()) {\n      return;\n    }\n\n    if (this.video.getMetadata()) {\n      this.metadata_ = map(\n          /** @type {!../mediasession-helper.MetadataDef} */\n          (this.video.getMetadata())\n      );\n    }\n\n    const doc = this.ampdoc_.win.document;\n\n    if (!this.metadata_.artwork || this.metadata_.artwork.length == 0) {\n      const posterUrl = parseSchemaImage(doc)\n                        || parseOgImage(doc)\n                        || parseFavicon(doc);\n\n      if (posterUrl) {\n        this.metadata_.artwork = [{\n          'src': posterUrl,\n        }];\n      }\n    }\n\n    if (!this.metadata_.title) {\n      const title = this.video.element.getAttribute('title')\n                    || this.video.element.getAttribute('aria-label')\n                    || this.internalElement_.getAttribute('title')\n                    || this.internalElement_.getAttribute('aria-label')\n                    || doc.title;\n      if (title) {\n        this.metadata_.title = title;\n      }\n    }\n  }\n\n  /**\n   * Called when visibility of a video changes.\n   * @private\n   */\n  videoVisibilityChanged_() {\n    if (this.loaded_) {\n      this.loadedVideoVisibilityChanged_();\n    }\n  }\n\n  /**\n   * Only called when visibility of a loaded video changes.\n   * @private\n   */\n  loadedVideoVisibilityChanged_() {\n    if (!Services.viewerForDoc(this.ampdoc_).isVisible()) {\n      return;\n    }\n    this.supportsAutoplay_().then(supportsAutoplay => {\n      const canAutoplay = this.hasAutoplay &&\n          !this.userInteracted();\n\n      if (canAutoplay && supportsAutoplay) {\n        this.autoplayLoadedVideoVisibilityChanged_();\n      } else {\n        this.nonAutoplayLoadedVideoVisibilityChanged_();\n      }\n    });\n  }\n\n  /* Autoplay Behaviour */\n\n  /**\n   * Called when an autoplay video is built.\n   * @private\n   */\n  autoplayVideoBuilt_() {\n\n    // Hide controls until we know if autoplay is supported, otherwise hiding\n    // and showing the controls quickly becomes a bad user experience for the\n    // common case where autoplay is supported.\n    if (this.video.isInteractive()) {\n      this.video.hideControls();\n    }\n\n    this.supportsAutoplay_().then(supportsAutoplay => {\n      if (!supportsAutoplay && this.video.isInteractive()) {\n        // Autoplay is not supported, show the controls so user can manually\n        // initiate playback.\n        this.video.showControls();\n        return;\n      }\n\n      // Only muted videos are allowed to autoplay\n      this.video.mute();\n\n      this.installAutoplayArtifacts_();\n    });\n  }\n\n  /**\n   * Installs autoplay animation and interaction mask when interactive.\n   * The animated icon is appended always, but only displayed by CSS when\n   * `controls` is set. See `video-autoplay.css`.\n   * @private\n   */\n  installAutoplayArtifacts_() {\n    const {video} = this;\n    const {element, win} = this.video;\n\n    if (element.hasAttribute(VideoAttributes.NO_AUDIO) ||\n        element.signals().get(VideoServiceSignals.USER_INTERACTED)) {\n      return;\n    }\n\n    const animation = renderIcon(win, element);\n\n    /** @param {boolean} isPlaying */\n    const toggleAnimation = isPlaying => {\n      video.mutateElement(() => {\n        animation.classList.toggle('amp-video-eq-play', isPlaying);\n      });\n    };\n\n    video.mutateElement(() => {\n      element.appendChild(animation);\n    });\n\n    const unlisteners = [\n      listen(element, VideoEvents.PAUSE, () => toggleAnimation(false)),\n      listen(element, VideoEvents.PLAYING, () => toggleAnimation(true)),\n    ];\n\n    video.signals().whenSignal(VideoServiceSignals.USER_INTERACTED).then(() => {\n      const {video} = this;\n      const {element} = video;\n      this.firstPlayEventOrNoop_();\n      if (video.isInteractive()) {\n        video.showControls();\n      }\n      video.unmute();\n      unlisteners.forEach(unlistener => {\n        unlistener();\n      });\n      const animation = element.querySelector('.amp-video-eq');\n      const mask = element.querySelector('i-amphtml-video-mask');\n      if (animation) {\n        removeElement(animation);\n      }\n      if (mask) {\n        removeElement(mask);\n      }\n    });\n\n    if (!video.isInteractive()) {\n      return;\n    }\n\n    const mask = renderInteractionOverlay(win, element);\n\n    /** @param {string} display */\n    const setMaskDisplay = display => {\n      video.mutateElement(() => {\n        setStyle(mask, 'display', display);\n      });\n    };\n\n    video.hideControls();\n\n    video.mutateElement(() => {\n      element.appendChild(mask);\n    });\n\n    [\n      listen(mask, 'click', () => userInteractedWith(video)),\n      listen(element, VideoEvents.AD_START, () => setMaskDisplay('none')),\n      listen(element, VideoEvents.AD_END, () => setMaskDisplay('block')),\n    ].forEach(unlistener => unlisteners.push(unlistener));\n  }\n\n  /**\n   * Called when visibility of a loaded autoplay video changes.\n   * @private\n   */\n  autoplayLoadedVideoVisibilityChanged_() {\n    if (!this.allowAutoplay_) {\n      return;\n    }\n    if (this.isVisible_) {\n      this.visibilitySessionManager_.beginSession();\n      this.video.play(/*autoplay*/ true);\n      this.playCalledByAutoplay_ = true;\n    } else {\n      if (this.isPlaying_) {\n        this.visibilitySessionManager_.endSession();\n      }\n      this.video.pause();\n      this.pauseCalledByAutoplay_ = true;\n    }\n  }\n\n  /**\n   * Called when visibility of a loaded non-autoplay video changes.\n   * @private\n   */\n  nonAutoplayLoadedVideoVisibilityChanged_() {\n    if (this.isVisible_) {\n      this.visibilitySessionManager_.beginSession();\n    } else if (this.isPlaying_) {\n      this.visibilitySessionManager_.endSession();\n    }\n  }\n\n  /**\n   * Called by all possible events that might change the visibility of the video\n   * such as scrolling or {@link ../video-interface.VideoEvents#VISIBILITY}.\n   * @param {?boolean=} opt_forceVisible\n   * @package\n   */\n  updateVisibility(opt_forceVisible) {\n    const wasVisible = this.isVisible_;\n\n    if (opt_forceVisible) {\n      this.isVisible_ = true;\n    } else {\n      const {element} = this.video;\n      const ratio = element.getIntersectionChangeEntry().intersectionRatio;\n      this.isVisible_ =\n          (!isFiniteNumber(ratio) ? 0 : ratio) >=\n            MIN_VISIBILITY_RATIO_FOR_AUTOPLAY;\n    }\n\n    if (this.isVisible_ != wasVisible) {\n      this.videoVisibilityChanged_();\n    }\n  }\n\n  /**\n   * Returns whether the video is paused or playing after the user interacted\n   * with it or playing through autoplay\n   * @return {!../video-interface.VideoInterface} PlayingStates\n   */\n  getPlayingState() {\n    if (!this.isPlaying_) {\n      return PlayingStates.PAUSED;\n    }\n\n    if (this.isPlaying_\n       && this.playCalledByAutoplay_\n       && !this.userInteracted()) {\n      return PlayingStates.PLAYING_AUTO;\n    }\n\n    return PlayingStates.PLAYING_MANUAL;\n  }\n\n  /**\n   * Returns whether the video was interacted with or not\n   * @return {boolean}\n   */\n  userInteracted() {\n    return (\n      this.video.signals().get(VideoServiceSignals.USER_INTERACTED) != null);\n  }\n\n  /**\n   * Collects a snapshot of the current video state for video analytics\n   * @return {!Promise<!../video-interface.VideoAnalyticsDetailsDef>}\n   */\n  getAnalyticsDetails() {\n    const {video} = this;\n    return this.supportsAutoplay_().then(supportsAutoplay => {\n      const {width, height} = video.element.getLayoutBox();\n      const autoplay = this.hasAutoplay && supportsAutoplay;\n      const playedRanges = video.getPlayedRanges();\n      const playedTotal = playedRanges.reduce(\n          (acc, range) => acc + range[1] - range[0], 0);\n\n      return {\n        'autoplay': autoplay,\n        'currentTime': video.getCurrentTime(),\n        'duration': video.getDuration(),\n        // TODO(cvializ): add fullscreen\n        'height': height,\n        'id': video.element.id,\n        'muted': this.muted_,\n        'playedTotal': playedTotal,\n        'playedRangesJson': JSON.stringify(playedRanges),\n        'state': this.getPlayingState(),\n        'width': width,\n      };\n    });\n  }\n}\n\n\n/**\n * @param {!AmpElement} video\n * @return {boolean}\n * @restricted\n */\nfunction supportsFullscreenViaApi(video) {\n  // TODO(alanorozco): Determine this via a flag in the component itself.\n  return !!({\n    'amp-dailymotion': true,\n    'amp-ima-video': true,\n  }[video.tagName.toLowerCase()]);\n}\n\n\n/** Manages rotate-to-fullscreen video. */\nexport class AutoFullscreenManager {\n\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   * @param {!./video-service-interface.VideoServiceInterface} manager\n   */\n  constructor(ampdoc, manager) {\n\n    /** @private @const {!./video-service-interface.VideoServiceInterface} */\n    this.manager_ = manager;\n\n    /** @private @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private {?../video-interface.VideoOrBaseElementDef} */\n    this.currentlyInFullscreen_ = null;\n\n    /** @private {?../video-interface.VideoOrBaseElementDef} */\n    this.currentlyCentered_ = null;\n\n    /** @private @const {!Array<!../video-interface.VideoOrBaseElementDef>} */\n    this.entries_ = [];\n\n    /** @private @const {function()} */\n    this.boundSelectBestCentered_ = () => this.selectBestCenteredInPortrait_();\n\n    /**\n     * @param {!../video-interface.VideoOrBaseElementDef} video\n     * @return {boolean}\n     */\n    this.boundIncludeOnlyPlaying_ = video =>\n      this.getPlayingState_(video) == PlayingStates.PLAYING_MANUAL;\n\n    /**\n     * @param {!../video-interface.VideoOrBaseElementDef} a\n     * @param {!../video-interface.VideoOrBaseElementDef} b\n     * @return {number}\n     */\n    this.boundCompareEntries_ = (a, b) => this.compareEntries_(a, b);\n\n    this.installOrientationObserver_();\n    this.installFullscreenListener_();\n  }\n\n  /** @param {!VideoEntry} entry */\n  register(entry) {\n    const {video} = entry;\n    const {element} = video;\n\n    if (!this.canFullscreen_(element)) {\n      return;\n    }\n\n    this.entries_.push(video);\n\n    listen(element, VideoEvents.PAUSE, this.boundSelectBestCentered_);\n    listen(element, VideoEvents.PLAYING, this.boundSelectBestCentered_);\n    listen(element, VideoEvents.ENDED, this.boundSelectBestCentered_);\n\n    video.signals().whenSignal(VideoServiceSignals.USER_INTERACTED)\n        .then(this.boundSelectBestCentered_);\n\n    // Set always\n    this.selectBestCenteredInPortrait_();\n  }\n\n  /** @private */\n  installFullscreenListener_() {\n    const root = this.ampdoc_.getRootNode();\n    const exitHandler = () => this.onFullscreenExit_();\n    listen(root, 'webkitfullscreenchange', exitHandler);\n    listen(root, 'mozfullscreenchange', exitHandler);\n    listen(root, 'fullscreenchange', exitHandler);\n    listen(root, 'MSFullscreenChange', exitHandler);\n  }\n\n  /**\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  isInLandscape() {\n    return isLandscape(this.ampdoc_.win);\n  }\n\n  /**\n   * @param {!AmpElement} video\n   * @return {boolean}\n   * @private\n   */\n  canFullscreen_(video) {\n    // Safari and iOS can only fullscreen <video> elements directly. In cases\n    // where the player component is implemented via an <iframe>, we need to\n    // rely on a postMessage API to fullscreen. Such an API is not necessarily\n    // provided by every player.\n    const internalElement = getInternalVideoElementFor(video);\n    if (internalElement.tagName.toLowerCase() == 'video') {\n      return true;\n    }\n    const platform = Services.platformFor(this.ampdoc_.win);\n    if (!(platform.isIos() || platform.isSafari())) {\n      return true;\n    }\n    return supportsFullscreenViaApi(video);\n  }\n\n  /** @private */\n  onFullscreenExit_() {\n    this.currentlyInFullscreen_ = null;\n  }\n\n  /** @private */\n  installOrientationObserver_() {\n    // TODO(alanorozco) Update based on support\n    const {win} = this.ampdoc_;\n    const {screen} = win;\n    // Chrome considers 'orientationchange' to be an untrusted event, but\n    // 'change' on screen.orientation is considered a user interaction.\n    // We still need to listen to 'orientationchange' on Chrome in order to\n    // exit fullscreen since 'change' does not fire in this case.\n    if (screen && 'orientation' in screen) {\n      const orient = /** @type {!ScreenOrientation} */ (screen.orientation);\n      listen(orient, 'change', () => this.onRotation_());\n    }\n    // iOS Safari does not have screen.orientation but classifies\n    // 'orientationchange' as a user interaction.\n    listen(win, 'orientationchange', () => this.onRotation_());\n  }\n\n  /** @private */\n  onRotation_() {\n    if (this.isInLandscape()) {\n      if (this.currentlyCentered_ != null) {\n        this.enter_(this.currentlyCentered_);\n      }\n      return;\n    }\n    if (this.currentlyInFullscreen_) {\n      this.exit_(this.currentlyInFullscreen_);\n    }\n  }\n\n  /**\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  enter_(video) {\n    const platform = Services.platformFor(this.ampdoc_.win);\n\n    this.currentlyInFullscreen_ = video;\n\n    if (platform.isAndroid() && platform.isChrome()) {\n      // Chrome on Android somehow knows what we're doing and executes a nice\n      // transition by default. Delegating to browser.\n      video.fullscreenEnter();\n      return;\n    }\n\n    this.scrollIntoIfNotVisible_(video)\n        .then(() => video.fullscreenEnter());\n  }\n\n  /**\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  exit_(video) {\n    this.currentlyInFullscreen_ = null;\n\n    this.scrollIntoIfNotVisible_(video, 'center')\n        .then(() => video.fullscreenExit());\n  }\n\n  /**\n   * Scrolls to a video if it's not in view.\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   * @param {?string=} optPos\n   * @private\n   */\n  scrollIntoIfNotVisible_(video, optPos = null) {\n    const {element} = video;\n    const viewport = this.getViewport_();\n\n    const duration = 300;\n    const curve = 'ease-in';\n\n    return this.onceOrientationChanges_().then(() => {\n      const {boundingClientRect} = element.getIntersectionChangeEntry();\n      const {top, bottom} = boundingClientRect;\n      const vh = viewport.getSize().height;\n      const fullyVisible = top >= 0 && bottom <= vh;\n      if (fullyVisible) {\n        return Promise.resolve();\n      }\n      const pos = optPos ? dev().assertString(optPos) :\n        bottom > vh ? 'bottom' : 'top';\n      return viewport.animateScrollIntoView(element, duration, curve, pos);\n    });\n  }\n\n  /** @private */\n  getViewport_() {\n    return Services.viewportForDoc(this.ampdoc_);\n  }\n\n  /** @private @return {!Promise} */\n  onceOrientationChanges_() {\n    const magicNumber = 330;\n    return Services.timerFor(this.ampdoc_.win).promise(magicNumber);\n  }\n\n  /** @private */\n  selectBestCenteredInPortrait_() {\n    if (this.isInLandscape()) {\n      return this.currentlyCentered_;\n    }\n\n    this.currentlyCentered_ = null;\n\n    const selected = this.entries_\n        .filter(this.boundIncludeOnlyPlaying_)\n        .sort(this.boundCompareEntries_)[0];\n\n    if (selected) {\n      const {intersectionRatio} = selected.element.getIntersectionChangeEntry();\n      if (intersectionRatio >= MIN_VISIBILITY_RATIO_FOR_AUTOPLAY) {\n        this.currentlyCentered_ = selected;\n      }\n    }\n\n    return this.currentlyCentered_;\n  }\n\n  /**\n   * Compares two videos in order to sort them by \"best centered\".\n   * @param {!../video-interface.VideoOrBaseElementDef} a\n   * @param {!../video-interface.VideoOrBaseElementDef} b\n   * @return {number}\n   */\n  compareEntries_(a, b) {\n    const {\n      intersectionRatio: ratioA,\n      boundingClientRect: rectA,\n    } = a.element.getIntersectionChangeEntry();\n    const {\n      intersectionRatio: ratioB,\n      boundingClientRect: rectB,\n    } = b.element.getIntersectionChangeEntry();\n\n    // Prioritize by how visible they are, with a tolerance of 10%\n    const ratioTolerance = 0.1;\n    const ratioDelta = ratioA - ratioB;\n    if (Math.abs(ratioDelta) > ratioTolerance) {\n      return ratioDelta;\n    }\n\n    // Prioritize by distance from center.\n    const viewport = Services.viewportForDoc(this.ampdoc_);\n    const centerA = centerDist(viewport, rectA);\n    const centerB = centerDist(viewport, rectB);\n    if (centerA < centerB ||\n        centerA > centerB) {\n      return centerA - centerB;\n    }\n\n    // Everything else failing, choose the highest element.\n    return rectA.top - rectB.top;\n  }\n\n  /**\n   * @param {!../video-interface.VideoOrBaseElementDef} video\n   * @return {!../video-interface.VideoInterface} PlayingStates\n   * @private\n   */\n  getPlayingState_(video) {\n    return this.manager_.getPlayingState(\n        /** @type {!../video-interface.VideoInterface} */ (video));\n  }\n}\n\n\n/**\n * @param {!./viewport/viewport-impl.Viewport} viewport\n * @param {{top: number, height: number}} rect\n * @return {number}\n */\nfunction centerDist(viewport, rect) {\n  const centerY = rect.top + (rect.height / 2);\n  const centerViewport = viewport.getSize().height / 2;\n  return Math.abs(centerY - centerViewport);\n}\n\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isLandscape(win) {\n  if (win.screen && 'orientation' in win.screen) {\n    return startsWith(win.screen.orientation.type, 'landscape');\n  }\n  return Math.abs(win.orientation) == 90;\n}\n\n\n\n/**\n * @param {!VideoEntry} entry\n * @param {!VideoAnalyticsEvents} eventType\n * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n * @private\n */\nfunction analyticsEvent(entry, eventType, opt_vars) {\n  const {video} = entry;\n  const detailsPromise = opt_vars ? Promise.resolve(opt_vars) :\n    entry.getAnalyticsDetails();\n\n  detailsPromise.then(details => {\n    video.element.dispatchCustomEvent(\n        eventType, details);\n  });\n}\n\n\n/** @param {!Node|!./ampdoc-impl.AmpDoc} nodeOrDoc */\nexport function installVideoManagerForDoc(nodeOrDoc) {\n  // TODO(alanorozco, #13674): Rename to `installVideoServiceForDoc`\n  // TODO(alanorozco, #13674): Rename to `video-service`\n  registerServiceBuilderForDoc(nodeOrDoc, 'video-manager', ampdoc => {\n    const {win} = ampdoc;\n    if (VideoServiceSync.shouldBeUsedIn(win)) {\n      return new VideoServiceSync(ampdoc);\n    }\n    return new VideoManager(ampdoc);\n  });\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @typedef {../video-interface.VideoAnalyticsDetailsDef} */\nlet VideoAnalyticsDetailsDef; // alias for line length\n\n\n/** @interface */\nexport class VideoServiceInterface {\n\n  /** @param {!../video-interface.VideoInterface} unusedVideo */\n  register(unusedVideo) {}\n\n  /**\n   * Gets the current analytics details for the given video.\n   * Fails silently if the video is not registered.\n   * @param {!AmpElement} unusedVideo\n   * @return {!Promise<!VideoAnalyticsDetailsDef>|!Promise<void>}\n   */\n  getAnalyticsDetails(unusedVideo) {}\n\n  /**\n   * @param {!../video-interface.VideoInterface} unusedVideo\n   * @return {boolean}\n   */\n  isMuted(unusedVideo) {}\n\n  /**\n   * @param {!../video-interface.VideoInterface} unusedVideo\n   * @return {!../video-interface.VideoInterface} PlayingStates\n   */\n  getPlayingState(unusedVideo) {}\n}\n\n\n/** @enum {string} */\nexport const VideoServiceSignals = {\n  USER_INTERACTED: 'user-interacted',\n  AUTOPLAY_DELEGATED: 'autoplay-delegated',\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Autoplay, AutoplayEvents} from './video/autoplay';\nimport {PlayingStates, VideoAttributes, VideoEvents} from '../video-interface';\nimport {Services} from '../services';\nimport {VideoServiceSignals} from './video-service-interface';\nimport {dev} from '../log';\nimport {getAmpdoc} from '../service';\nimport {getElementServiceForDoc} from '../element-service';\nimport {isExperimentOn} from '../experiments';\nimport {listen, listenOncePromise} from '../event-helper';\nimport {once} from '../utils/function';\n\n\n/** @private @const {string} */\nconst EXTENSION = 'amp-video-service';\n\n\n/** @private @const {string} */\nconst TAG = 'video-service';\n\n\n/**\n * @typedef\n * {../../extensions/amp-video-service/0.1/amp-video-service.VideoService}\n */\nlet VideoServiceDef; // alias for line length.\n\n\n/**\n * Provides unified behavior for all videos regardless of implementation.\n *\n * This service is a façade around an async-loaded implementation.\n * See {@link AmpVideoService} for the underlying service.\n *\n * This co-eexists with `VideoManager` (deprecated) while the implementation\n * is migrated.\n *\n * @implements {./video-service-interface.VideoServiceInterface}\n */\nexport class VideoServiceSync {\n\n  /** @param {!./ampdoc-impl.AmpDoc} ampdoc */\n  constructor(ampdoc) {\n    const {win} = ampdoc;\n\n    /** @private @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const {!Promise<!VideoServiceDef>}  */\n    this.asyncImpl_ = VideoServiceSync.videoServiceFor(win, ampdoc);\n\n    /**\n     * @return {!Autoplay}\n     * @private\n     */\n    this.getAutoplay_ = once(() => new Autoplay(this.ampdoc_));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  static shouldBeUsedIn(win) {\n    return isExperimentOn(win, 'video-service');\n  }\n\n  /**\n   * @param {!Window} win\n   * @param {!Node|!./ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!Promise<!VideoServiceDef>}\n   * @visibleForTesting\n   */\n  static videoServiceFor(win, nodeOrDoc) {\n    // Not exposed in ../services.js since we don't want other modules to\n    // instantiate or access the service.\n    const extensions = Services.extensionsFor(win);\n    const ampdoc = getAmpdoc(nodeOrDoc);\n    return extensions.installExtensionForDoc(ampdoc, EXTENSION)\n        .then(() => /** @type {!Promise<!VideoServiceDef>} */ (\n          getElementServiceForDoc(ampdoc, 'video-service', EXTENSION)));\n  }\n\n  /** @override */\n  register(video) {\n    this.asyncImpl_.then(impl =>\n      impl.register(video));\n\n    this.maybeInstallAutoplay_(video);\n\n    new VideoEntry(video);\n  }\n\n  /**\n   * @param  {!../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  maybeInstallAutoplay_(video) {\n    if (!video.element.hasAttribute(VideoAttributes.AUTOPLAY)) {\n      return;\n    }\n\n    this.getAutoplay_().register(video);\n\n    const autoplayDelegated = VideoServiceSignals.AUTOPLAY_DELEGATED;\n    video.signals().whenSignal(autoplayDelegated).then(() => {\n      this.getAutoplay_().delegate(video.element);\n    });\n  }\n\n  /**\n   * @param {!AmpElement|!../base-element.BaseElement} video\n   */\n  static delegateAutoplay(video) {\n    video.signals().signal(VideoServiceSignals.AUTOPLAY_DELEGATED);\n  }\n\n  /** @override */\n  getAnalyticsDetails(video) {\n    return this.asyncImpl_.then(impl =>\n      impl.getAnalyticsDetails(video));\n  }\n\n  /** @override */\n  isMuted(unusedVideo) {\n    dev().warn(TAG, 'isMuted is not implemented');\n    return false;\n  }\n\n  /** @override */\n  getPlayingState(unusedVideo) {\n    dev().warn(TAG, 'getPlayingState is not implemented');\n    return PlayingStates.PAUSED;\n  }\n}\n\n\n/** @visibleForTesting */\nexport class VideoEntry {\n\n  /** @param {!../video-interface.VideoOrBaseElementDef} video */\n  constructor(video) {\n\n    /** @private @const {!../video-interface.VideoOrBaseElementDef} */\n    this.video_ = video;\n\n    /** @private @const {!AmpElement} */\n    this.element_ = video.element;\n\n    /** @private @const {!Promise} */\n    this.loadPromise_ = listenOncePromise(this.element_, VideoEvents.LOAD);\n\n    this.listenToAutoplayEvents_();\n\n    setVideoComponentClassname(this.element_);\n  }\n\n  /**\n   * @param {string} event\n   * @param {function(!Event)} handler\n   * @private\n   */\n  listenOnLoad_(event, handler) {\n    listen(this.element_, event, e => {\n      this.loadPromise_.then(() => {\n        handler(e);\n      });\n    });\n  }\n\n  /** @private */\n  listenToAutoplayEvents_() {\n    // TODO(alanorozco): Keep track of session\n    this.listenOnLoad_(AutoplayEvents.PLAY, () => {\n      this.video_.play(/* auto */ true);\n    });\n\n    this.listenOnLoad_(AutoplayEvents.PAUSE, () => {\n      this.video_.pause();\n    });\n  }\n}\n\n/**\n * @param {!Element} element\n */\nexport function setVideoComponentClassname(element) {\n  element.classList.add('i-amphtml-video-component');\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Observable} from '../observable';\n\n\nexport class VideoSessionManager {\n  /**\n   * Creates an instance of VideoSessionManager.\n   */\n  constructor() {\n    /** @private */\n    this.isSessionActive_ = false;\n\n    /** @private */\n    this.endSessionObservable_ = new Observable();\n  }\n\n  /**\n   * Register a listener to be notified when a session has ended\n   * @param {!Function} listener\n   */\n  onSessionEnd(listener) {\n    this.endSessionObservable_.add(listener);\n  }\n\n  /**\n   * Begin a session.\n   */\n  beginSession() {\n    this.isSessionActive_ = true;\n  }\n\n  /**\n   * End a session.\n   */\n  endSession() {\n    if (this.isSessionActive_) {\n      this.endSessionObservable_.fire();\n    }\n    this.isSessionActive_ = false;\n  }\n\n  /**\n   * Get the current session state.\n   */\n  isSessionActive() {\n    return this.isSessionActive_;\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  MIN_VISIBILITY_RATIO_FOR_AUTOPLAY,\n  VideoEvents,\n} from '../../video-interface';\nimport {\n  PositionObserverFidelity,\n} from '../position-observer/position-observer-worker';\nimport {Services} from '../../services';\nimport {VideoServiceSignals} from '../video-service-interface';\nimport {VideoUtils} from '../../utils/video';\nimport {dev} from '../../log';\nimport {getData, listen, listenOnce} from '../../event-helper';\nimport {getMode} from '../../mode';\nimport {getServiceForDoc} from '../../service';\nimport {htmlFor} from '../../static-template';\nimport {installAutoplayStylesForDoc} from './install-autoplay-styles';\nimport {\n  installPositionObserverServiceForDoc,\n} from '../position-observer/position-observer-impl';\nimport {isFiniteNumber} from '../../types';\nimport {once} from '../../utils/function';\nimport {removeElement} from '../../dom';\n\n\n/** @private @enum {string} */\nexport const AutoplayEvents = {\n  PLAY: 'amp:autoplay',\n  PAUSE: 'amp:autopause',\n};\n\n/**\n * @param {!Element} node\n * @return {!Element}\n */\nfunction cloneDeep(node) {\n  return dev().assertElement(node.cloneNode(/* deep */ true));\n}\n\n\n/**\n * @param {function(!Window, !Element):!Element} renderFn\n * @return {function(!Window, !Element):!Element}\n */\nfunction renderOrClone(renderFn) {\n  const seedFn = once(renderFn);\n  return (win, doc) => cloneDeep(seedFn(win, doc));\n}\n\n\n/**\n * @param {!Window} unusedWin\n * @param {!Element|!Document} elOrDoc\n * @return {!Element}\n */\nexport function renderInteractionOverlay(unusedWin, elOrDoc) {\n  const html = htmlFor(elOrDoc);\n  return html`<i-amphtml-video-mask class=\"i-amphtml-fill-content\" role=button>\n    </i-amphtml-video-mask>`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {!Element|!Document} elOrDoc\n * @return {!Element}\n */\nexport function renderIcon(win, elOrDoc) {\n  const icon = htmlFor(elOrDoc)`<i-amphtml-video-icon class=\"amp-video-eq\">\n    <div class=\"amp-video-eq-col\">\n      <div class=\"amp-video-eq-filler\"></div>\n      <div class=\"amp-video-eq-filler\"></div>\n    </div>\n  </i-amphtml-video-icon>`;\n\n  // Copy equalizer column 4x and annotate filler positions for animation.\n  const firstCol = dev().assertElement(icon.firstElementChild);\n  for (let i = 0; i < 4; i++) {\n    const col = cloneDeep(firstCol);\n    const fillers = col.children;\n    for (let j = 0; j < fillers.length; j++) {\n      const filler = fillers[j];\n      filler.classList.add(`amp-video-eq-${i + 1}-${j + 1}`);\n    }\n    icon.appendChild(col);\n  }\n\n  // Remove seed column.\n  removeElement(firstCol);\n\n  if (Services.platformFor(win).isIos()) {\n    // iOS is unable to pause hardware accelerated animations.\n    icon.setAttribute('unpausable', '');\n  }\n\n  return icon;\n}\n\n\n/**\n * @param {!Window} unusedWin\n * @param {!Element|!Document} elOrDoc\n * @return {!Element}\n */\nconst renderOrCloneInteractionOverlay = renderOrClone(renderInteractionOverlay);\n\n\n/**\n * @param {!Window} unusedWin\n * @param {!Element|!Document} elOrDoc\n * @return {!Element}\n */\nconst renderOrCloneIcon = renderOrClone(renderIcon);\n\n\n/** Manages autoplay video. */\nexport class Autoplay {\n\n  /** @param {!../ampdoc-impl.AmpDoc} ampdoc */\n  constructor(ampdoc) {\n\n    /** @private @const {!../ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /**\n     * @return {!../position-observer/position-observer-impl.PositionObserver}\n     * @restricted\n     */\n    this.getPositionObserver_ = once(() => this.installPositionObserver_());\n\n    /** @private @const {!Array<!AutoplayEntry>} */\n    this.entries_ = [];\n\n    /**\n     * @return {!Promise<boolean>}\n     * @private\n     */\n    this.isSupported_ = once(() => {\n      // Can't destructure as the compiler expects direct member access for\n      // `getMode`.\n      const {win} = this.ampdoc_;\n      const isLite = getMode(win).lite;\n      return VideoUtils.isAutoplaySupported(win, /* isLiteMode */ isLite);\n    });\n\n    installAutoplayStylesForDoc(this.ampdoc_);\n  }\n\n  /** @private */\n  installPositionObserver_() {\n    installPositionObserverServiceForDoc(this.ampdoc_);\n    // No getter in services.js.\n    return (\n      /** @type {\n       *   !../position-observer/position-observer-impl.PositionObserver\n       * } */ (getServiceForDoc(this.ampdoc_, 'position-observer')));\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {!Promise<?AutoplayEntry>} `null` when unsupported.\n   */\n  register(video) {\n    // Controls are hidden before support is determined to prevent visual jump\n    // for the common case where autoplay is supported.\n    if (video.isInteractive()) {\n      video.hideControls();\n    }\n\n    return this.isSupported_().then(isSupported => {\n      if (!isSupported) {\n        // Disable autoplay\n        if (video.isInteractive()) {\n          video.showControls();\n        }\n        return null;\n      }\n      const entry = AutoplayEntry.create(this, video);\n      this.entries_.push(entry);\n      return entry;\n    });\n  }\n\n  /**\n   * @param {!Element} element\n   */\n  delegate(element) {\n    const entry = this.getEntryFor_(element);\n    if (!entry) {\n      return;\n    }\n    entry.delegate();\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {?AutoplayEntry}\n   * @private\n   */\n  getEntryFor_(element) {\n    for (let i = 0; i < this.entries_.length; i++) {\n      const entry = this.entries_[i];\n      if (entry.video.element == element) {\n        return entry;\n      }\n    }\n    return null;\n  }\n}\n\n\n/** @visibleForTesting */\nexport class AutoplayEntry {\n\n  /**\n   * @param {!../ampdoc-impl.AmpDoc} ampdoc\n   * @param {\n   *   !../position-observer/position-observer-impl.PositionObserver\n   * } positionObserver\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   */\n  constructor(ampdoc, positionObserver, video) {\n\n    /** @const {!../../video-interface.VideoOrBaseElementDef} */\n    this.video = video;\n\n    /** @private {!../ampdoc-impl.AmpDoc} ampdoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const {!AmpElement}  */\n    this.element_ = video.element;\n\n    /** @private {boolean} */\n    this.isVisible_ = false;\n\n    /** @private {?Array<!UnlistenDef>} */\n    this.visibilityUnlisteners_ = [\n      this.observeOn_(positionObserver),\n      this.listenToVisibilityChange_(),\n    ];\n\n    // Only muted videos are allowed to autoplay\n    video.mute();\n    video.hideControls();\n\n    this.attachArtifacts_();\n  }\n\n  /**\n   * @param {!Autoplay} manager\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   */\n  static create(manager, video) {\n    return new AutoplayEntry(\n        manager.ampdoc_, manager.getPositionObserver_(), video);\n  }\n\n  /**\n   * @param {\n   *   !../position-observer/position-observer-impl.PositionObserver\n   * } positionObserver\n   * @return {!UnlistenDef}\n   * @private\n   */\n  observeOn_(positionObserver) {\n    return positionObserver.observe(\n        this.element_,\n        PositionObserverFidelity.HIGH,\n        () => this.onPositionChange_());\n  }\n\n  /**\n   * @return {!UnlistenDef}\n   * @private\n   */\n  listenToVisibilityChange_() {\n    return listen(this.element_, VideoEvents.VISIBILITY, e => {\n      const data = getData(e);\n      const enforcedByEvent = data && data['visible'];\n      if (enforcedByEvent && !this.isVisible_) {\n        this.isVisible_ = enforcedByEvent;\n        this.trigger_(/* isPlaying */ enforcedByEvent);\n        return;\n      }\n      this.triggerByVisibility_();\n    });\n  }\n\n  /**\n   * Delegates autoplay so that it's triggered by a different module.\n   * @public\n   */\n  delegate() {\n    this.disableTriggerByVisibility_();\n    this.video.pause();\n  }\n\n  /** @private */\n  onPositionChange_() {\n    this.triggerByVisibility_();\n  }\n\n  /** @private */\n  triggerByVisibility_() {\n    const ratio = this.element_.getIntersectionChangeEntry().intersectionRatio;\n    const isVisible = (!isFiniteNumber(ratio) ? 0 : ratio) >=\n        MIN_VISIBILITY_RATIO_FOR_AUTOPLAY;\n    if (this.isVisible_ == isVisible) {\n      return;\n    }\n    this.isVisible_ = isVisible;\n    this.trigger_(/* isPlaying */ isVisible);\n  }\n\n  /**\n   * @param {boolean} isPlaying\n   * @private\n   */\n  trigger_(isPlaying) {\n    this.element_.dispatchCustomEvent(\n        isPlaying ? AutoplayEvents.PLAY : AutoplayEvents.PAUSE);\n  }\n\n  /** @private */\n  attachArtifacts_() {\n    // TODO(alanorozco): AD_START, AD_END\n    const {video} = this;\n    const signals = video.signals();\n    const userInteracted = VideoServiceSignals.USER_INTERACTED;\n\n    if (signals.get(userInteracted) != null) {\n      return;\n    }\n\n    const {win} = this.ampdoc_;\n\n    const icon = renderOrCloneIcon(win, this.element_);\n\n    video.mutateElement(() => {\n      this.element_.appendChild(icon);\n    });\n\n    const {element} = video;\n    const playOrPauseIconAnim = this.playOrPauseIconAnim_.bind(this, icon);\n\n    const unlisteners = [\n      listen(element, VideoEvents.PLAYING, () => playOrPauseIconAnim(true)),\n      listen(element, VideoEvents.PAUSE, () => playOrPauseIconAnim(false)),\n    ];\n\n    signals.whenSignal(userInteracted).then(() => {\n      unlisteners.forEach(unlisten => unlisten());\n      this.onInteraction_();\n    });\n\n    if (!this.video.isInteractive()) {\n      return;\n    }\n\n    const overlay = renderOrCloneInteractionOverlay(win, this.element_);\n\n    listenOnce(overlay, 'click', () => signals.signal(userInteracted));\n\n    video.mutateElement(() => {\n      this.element_.appendChild(overlay);\n    });\n  }\n\n  /** @private */\n  onInteraction_() {\n    const mask = this.element_.querySelector('i-amphtml-video-mask');\n    this.disableTriggerByVisibility_();\n    if (mask) {\n      removeElement(mask);\n    }\n    if (this.video.isInteractive()) {\n      this.video.showControls();\n    }\n    this.video.unmute();\n  }\n\n  /** @private */\n  disableTriggerByVisibility_() {\n    if (!this.visibilityUnlisteners_) {\n      return;\n    }\n    this.visibilityUnlisteners_.forEach(unlistener => unlistener());\n    this.visibilityUnlisteners_ = null; // GC\n  }\n\n  /**\n   * @param {!Element} icon\n   * @param {boolean} isPlaying\n   * @private\n   */\n  playOrPauseIconAnim_(icon, isPlaying) {\n    this.video.mutateElement(() =>\n      icon.classList.toggle('amp-video-eq-play', isPlaying));\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ActionTrust} from '../../action-constants';\nimport {\n  PlayingStates,\n  VideoAttributes,\n  VideoEvents,\n} from '../../video-interface';\nimport {\n  PositionObserver, // eslint-disable-line no-unused-vars\n} from '../position-observer/position-observer-impl';\nimport {\n  PositionObserverFidelity,\n} from '../position-observer/position-observer-worker';\nimport {Services} from '../../services';\nimport {closestBySelector, isRTL, removeElement} from '../../dom';\nimport {createCustomEvent} from '../../event-helper';\n// Source for this constant is css/video-docking.css:\nimport {cssText} from '../../../build/video-docking.css.js';\nimport {dev, user} from '../../log';\nimport {dict} from '../../utils/object';\nimport {getInternalVideoElementFor} from '../../utils/video';\nimport {getServiceForDoc} from '../../service';\nimport {htmlFor, htmlRefs} from '../../static-template';\nimport {\n  installPositionObserverServiceForDoc,\n} from '../position-observer/position-observer-impl';\nimport {installStylesForDoc} from '../../style-installer';\nimport {isFiniteNumber} from '../../types';\nimport {listen, listenOnce} from '../../event-helper';\nimport {mapRange} from '../../utils/math';\nimport {moveLayoutRect} from '../../layout-rect';\nimport {once} from '../../utils/function';\nimport {px, resetStyles, setImportantStyles, translate} from '../../style';\n\n\n/** @private @const {number} */\nconst MARGIN_MAX = 30;\n\n/** @private {number} */\nconst MARGIN_AREA_WIDTH_PERC = 0.04;\n\n/** @private @const {number} */\nconst MIN_WIDTH = 180;\n\n/** @private @const {number} */\nconst MIN_VIEWPORT_WIDTH = 320;\n\n/** @private @const {number} */\nconst DOCKING_TIMEOUT = 200;\n\n/** @private @const {number} */\nconst CONTROLS_TIMEOUT = 1600;\n\n/** @private @const {number} */\nconst CONTROLS_TIMEOUT_AFTER_IX = 1000;\n\n/** @private @const {number} */\nconst FLOAT_TOLERANCE = 0.02;\n\n/** @private @const {string} */\nconst BASE_CLASS_NAME = 'i-amphtml-video-docked';\n\n/** @private @const {number} */\nconst REVERT_TO_INLINE_RATIO = 0.7;\n\n/** @enum */\nexport const RelativeX = {LEFT: 0, RIGHT: 1};\n\n/** @enum */\nexport const RelativeY = {TOP: 0, BOTTOM: 1};\n\n/** @enum */\nexport const Direction = {UP: 1, DOWN: -1};\n\n/** @enum {string} */\nexport const Actions = {DOCK: 'dock', UNDOCK: 'undock'};\n\n\n/**\n * @struct @typedef {{\n *   video: !../../video-interface.VideoOrBaseElementDef,\n *   target: !DockTargetDef,\n *   step: number,\n *   triggeredDock: boolean,\n * }}\n */\nlet DockedDef;\n\n\n/**\n * @struct @typedef {{\n *   container: !Element,\n *   dismissButton: !Element,\n *   playButton: !Element,\n *   pauseButton: !Element,\n *   muteButton: !Element,\n *   unmuteButton: !Element,\n *   fullscreenButton: !Element,\n *   dismissContainer: !Element,\n * }}\n */\nlet ControlsDef;\n\n\n/** @typedef {{posX: !RelativeX, posY: !RelativeY}|!Element} */\nlet DockTargetDef;\n\n/**\n * @typedef {{\n *   x: number,\n *   y: number,\n *   targetWidth: number,\n *   targetHeight: number,\n *   initialY: number\n * }}\n */\nlet TargetAreaDef;\n\n\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} scale\n * @return {string}\n */\nconst transform = (x, y, scale) => `translate(${x}px, ${y}px) scale(${scale})`;\n\n\n/**\n * @param {!Element} a\n * @param {!Element} b\n * @private\n */\nfunction swap(a, b) {\n  a.setAttribute('hidden', '');\n  b.removeAttribute('hidden');\n}\n\n\n/**\n * @param {!Window} win\n * @param {function(...*)} fn\n * @return {function(...*)}\n */\nfunction throttleByAnimationFrame(win, fn) {\n  let running = false;\n  return (...args) => {\n    if (running) {\n      return;\n    }\n    running = true;\n    win.requestAnimationFrame(() => {\n      fn.apply(null, args);\n      running = false;\n    });\n  };\n}\n\n\n/**\n * @param {!MouseEvent|!TouchEvent} e\n * @return {{x: number, y: number}}\n * @private\n */\nfunction pointerCoords(e) {\n  const coords = (e.touches) ? e.touches[0] : e;\n  return {\n    x: dev().assertNumber(('x' in coords) ? coords.x : coords.clientX),\n    y: dev().assertNumber(('y' in coords) ? coords.y : coords.clientY),\n  };\n}\n\n\n/**\n * Maps an interpolation step in [0..1] to its position in a range.\n * @param {number} step\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nfunction mapStep(step, min, max) {\n  return mapRange(step, 0, 1, min, max);\n}\n\n\n/**\n * @param {!Element} element\n * @restricted\n */\nfunction complainAboutPortrait(element) {\n  // Constant named `TAG` per lint rules.\n  const TAG = element.tagName.toUpperCase();\n  const attr = VideoAttributes.DOCK;\n  user().error(TAG,\n      `Minimize-to-corner (\\`${attr}\\`) does not support portrait video.`,\n      element);\n}\n\n\n// Function should ideally be in `dom.js`, but moving it causes a bunch of ads\n// tests to fail, for some reason.\n// TODO(alanorozco): Move.\n/**\n * @param {!Object} obj\n * @return {boolean}\n */\nexport function isElement(obj) {\n  return obj.nodeType == /* ELEMENT */ 1;\n}\n\n\n\n/** Timeout that can be postponed, repeated or cancelled. */\nclass Timeout {\n  /**\n   * @param {!Window} win\n   * @param {!Function} handler\n   */\n  constructor(win, handler) {\n    /** @private @const {!../timer-impl.Timer} */\n    this.timer_ = Services.timerFor(win);\n\n    /** @private @const {!Function} */\n    this.handler_ = handler;\n\n    /** @private {?number|?string} */\n    this.id_ = null;\n  }\n\n  /**\n   * @param {number} time\n   * @param {...*} args\n   */\n  trigger(time, ...args) {\n    this.cancel();\n    this.id_ = this.timer_.delay(() => this.handler_.apply(null, args), time);\n  }\n\n  /** @public */\n  cancel() {\n    if (this.id_ !== null) {\n      this.timer_.cancel(this.id_);\n      this.id_ = null;\n    }\n  }\n\n  /** @return {boolean} */\n  isWaiting() {\n    return this.id_ !== null;\n  }\n}\n\n\n/**\n * Manages docking (a.k.a. minimize to corner) for videos that satisfy the\n * {@see ../../video-interface.VideoInterface}.\n */\nexport class VideoDocking {\n\n  /**\n   * @param {!../ampdoc-impl.AmpDoc} ampdoc\n   * @param {!../video-service-interface.VideoServiceInterface} manager\n   */\n  constructor(ampdoc, manager) {\n\n    /** @private @const {!../ampdoc-impl.AmpDoc} */\n    this.ampdoc_ = ampdoc;\n\n    /** @private @const */\n    this.manager_ = manager;\n\n    /** @private @const {!../viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(ampdoc);\n\n    /** @private {?DockedDef} */\n    this.currentlyDocked_ = null;\n\n    /** @private @const {function():!Timeout} */\n    this.getDockingTimeout_ = this.lazyTimeout_(video =>\n      this.onDockingTimeout_(\n          /** @type {!../../video-interface.VideoOrBaseElementDef} */ (video)));\n\n    /** @private @const {function():!Timeout} */\n    this.getHideControlsTimeout_ = this.lazyTimeout_(() =>\n      this.hideControls_(/* respectSticky */ true));\n\n    /** @private @const {function():!Timeout} */\n    this.getUndockingTimeout_ = this.lazyTimeout_(video =>\n      this.undock_(\n          /** @type {!../../video-interface.VideoOrBaseElementDef} */ (video)));\n\n    /** @private {!RelativeX} */\n    // Overriden when user drags the video to a corner.\n    // Y-corner is determined based on scroll direction.\n    this.preferredCornerX_ =\n        isRTL(this.getDoc_()) ? RelativeX.LEFT : RelativeX.RIGHT;\n\n    /**\n     * Returns an element representing a shadow under the docked video.\n     * Alternatively, we could use box-shadow on the video element, but in\n     * order to animate it without jank we have to use an opacity transition.\n     * A separate layer also has the 1d benefit that authors can override its\n     * box-shadow value or any other styling without handling the transition\n     * themselves.\n     * @private @const {function():!Element}\n     */\n    this.getShadowLayer_ = once(() => this.append_(htmlFor(this.getDoc_())`\n      <div class=\"amp-video-docked-shadow\" hidden></div>`));\n\n    /**\n     * Returns an overlay to be used to capture different user events.\n     * @private @const {function():!Element}\n     */\n    this.getOverlay_ = once(() => this.installOverlay_(htmlFor(this.getDoc_())`\n      <div class=\"i-amphtml-video-docked-overlay\" hidden></div>`));\n\n    /** @private @const {function():!ControlsDef} */\n    this.getControls_ = once(() => this.installControls_(\n        // This currently bloats the resulting binary with\n        // 1. some whitespace and 2. duplicate declarations of equal strings.\n        // Upcoming fixes: #14657, #14658.\n        // TODO(alanorozco): Cleanup markup for readability once fixes land.\n        htmlFor(this.getDoc_())`\n          <div class=\"amp-video-docked-controls\" hidden>\n            <div class=\"amp-video-docked-main-button-group\">\n              <div class=\"amp-video-docked-button-group\">\n                <div role=\"button\" ref=\"playButton\"\n                    class=\"amp-video-docked-play\"></div>\n                <div role=\"button\" ref=\"pauseButton\"\n                    class=\"amp-video-docked-pause\"></div>\n              </div>\n              <div class=\"amp-video-docked-button-group\">\n                <div role=\"button\" ref=\"muteButton\"\n                    class=\"amp-video-docked-mute\"></div>\n                <div role=\"button\" ref=\"unmuteButton\"\n                    class=\"amp-video-docked-unmute\">\n                </div>\n              </div>\n              <div class=\"amp-video-docked-button-group\">\n                <div role=\"button\" ref=\"fullscreenButton\"\n                    class=\"amp-video-docked-fullscreen\">\n                </div>\n              </div>\n            </div>\n            <div class=\"amp-video-docked-button-dismiss-group\"\n                ref=\"dismissContainer\">\n              <div role=\"button\" ref=\"dismissButton\"\n                  class=\"amp-video-docked-dismiss\"></div>\n            </div>\n          </div>`));\n\n    /** @private {?../../video-interface.VideoOrBaseElementDef} */\n    this.lastDismissed_ = null;\n\n    /** @private {?RelativeY} */\n    this.lastDismissedPosY_ = null;\n\n    /**\n     * Unlisteners for the currently minimized video.\n     * @private {!Array<!UnlistenDef>}\n     */\n    this.videoUnlisteners_ = [];\n\n    /**\n     * Memoizes x, y and scale to prevent useless mutations.\n     * @private {?{x: number, y: number, scale: number}}\n     */\n    this.placedAt_ = null;\n\n    /** @private {?{width: number, height: number}} */\n    this.sizedAt_ = null;\n\n    /** @private {?Direction} */\n    this.scrollDirection_ = null;\n\n    /** @private {number} */\n    this.lastScrollTop_ = this.viewport_.getScrollTop();\n\n    /** @private {boolean} */\n    this.stickyControls_ = false;\n\n    /** @private {boolean} */\n    this.isDragging_ = false;\n\n    /** @private {!Array<!../../video-interface.VideoOrBaseElementDef>} */\n    this.observed_ = [];\n\n    /** @private @const {!function()} */\n    // Lazily invoked.\n    this.install_ = once(() => {\n      this.viewport_.onScroll(\n          throttleByAnimationFrame(this.ampdoc_.win,\n              () => this.updateScroll_()));\n\n      this.viewport_.onResize(() => this.updateAllOnResize_());\n\n      this.installStyles_();\n    });\n\n    /** @private @const {function():?Element} */\n    this.getSlot_ = once(() => this.querySlot_());\n\n    /** @private */\n    this.hideControlsOnTapOutsideOnce_ =\n        once(() => this.hideControlsOnTapOutside_());\n  }\n\n  /**\n   * @return {?Element}\n   * @private\n   */\n  querySlot_() {\n    const root = this.ampdoc_.getRootNode();\n\n    // For consistency always honor the dock attribute on the first el in page.\n    const video = root.querySelector('[dock]');\n\n    dev().assertElement(video);\n\n    user().assert(video.signals().get(VideoEvents.REGISTERED),\n        '`dock` attribute can only be set on video components.');\n\n    const slotSelector = video.getAttribute('dock').trim();\n\n    if (slotSelector == '') {\n      return null;\n    }\n\n    const el = root.querySelector(slotSelector);\n\n    if (el) {\n      user().assert(el.tagName.toLowerCase() == 'amp-layout',\n          'Dock slot must be an <amp-layout> element.');\n    }\n\n    return el;\n  }\n\n  /** @private */\n  installStyles_() {\n    installStylesForDoc(\n        this.ampdoc_,\n        cssText,\n        /* callback */ null,\n        /* opt_isRuntimeCss */ false,\n        /* opt_ext */ 'amp-video-docking');\n  }\n\n  /**\n   * @param {function(...*)} fn\n   * @return {function():!Timeout}\n   * @private\n   */\n  lazyTimeout_(fn) {\n    return once(() => new Timeout(this.ampdoc_.win, fn));\n  }\n\n  /** @private */\n  updateAllOnResize_() {\n    this.observed_.forEach(video => this.updateOnResize_(video));\n  }\n\n  /** @param {!../../video-interface.VideoOrBaseElementDef} video */\n  register(video) {\n    this.install_();\n\n    const {element} = video;\n    const fidelity = PositionObserverFidelity.HIGH;\n    this.getPositionObserver_().observe(element, fidelity,\n        () => this.updateOnPositionChange_(video));\n    this.observed_.push(video);\n  }\n\n  /** @private */\n  updateScroll_() {\n    const scrollTop = this.viewport_.getScrollTop();\n    const scrollDirection = scrollTop > this.lastScrollTop_ ?\n      Direction.UP :\n      Direction.DOWN;\n    this.scrollDirection_ = scrollDirection;\n    this.lastScrollTop_ = scrollTop;\n  }\n\n  /**\n   * @return {!Document}\n   * @private\n   */\n  getDoc_() {\n    return /** @type {!Document} */ (this.ampdoc_.getRootNode());\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {!Element}\n   * @private\n   */\n  append_(element) {\n    const root = this.getDoc_().body || this.getDoc_();\n    return dev().assertElement(root.appendChild(element));\n  }\n\n  /**\n   * @param {!Element} overlay\n   * * @return {!Element}\n   * @private\n   */\n  installOverlay_(overlay) {\n    this.append_(overlay);\n    return this.showControlsOnTap_(this.addDragListeners_(overlay));\n  }\n\n  /** @private */\n  enterFullscreen_() {\n    const video = this.getDockedVideo_();\n    video.fullscreenEnter();\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {!Element}\n   * @private\n   */\n  showControlsOnTap_(element) {\n    listen(element, 'mouseup', () => {\n      if (this.isDragging_) {\n        return;\n      }\n      const video = this.getDockedVideo_();\n      const {\n        container,\n        playButton,\n        pauseButton,\n        muteButton,\n        unmuteButton,\n      } = this.getControls_();\n      const overlay = this.getOverlay_();\n\n      container.removeAttribute('hidden');\n      container.classList.add('amp-video-docked-controls-shown');\n      overlay.classList.add('amp-video-docked-controls-bg');\n\n      if (this.isPlaying_()) {\n        swap(playButton, pauseButton);\n      } else {\n        swap(pauseButton, playButton);\n      }\n\n      if (this.manager_.isMuted(\n          /** @type {!../../video-interface.VideoInterface} */ (video))) {\n        swap(muteButton, unmuteButton);\n      } else {\n        swap(unmuteButton, muteButton);\n      }\n\n      this.hideControlsOnTimeout_();\n    });\n    return element;\n  }\n\n  /** @private */\n  hideControlsOnTapOutside_() {\n    listen(this.ampdoc_.getRootNode(), 'mousedown', e => {\n      if (!this.currentlyDocked_) {\n        return;\n      }\n      if (this.isControlsEventTarget_(dev().assertElement(e.target))) {\n        return;\n      }\n      this.hideControls_(/* respectSticky */ true);\n    });\n  }\n\n  /**\n   * @param {!Element} element\n   * @return {!Element}\n   * @private\n   */\n  addDragListeners_(element) {\n    const handler = e => this.drag_(/** @type {!TouchEvent} */(e));\n\n    listen(element, 'touchstart', handler);\n    listen(element, 'mousedown', handler);\n\n    return element;\n  }\n\n  /**\n   * @param {!Element} container\n   * @return {!ControlsDef}\n   * @private\n   */\n  installControls_(container) {\n    const controls = htmlRefs(container);\n\n    const {\n      dismissButton,\n      playButton,\n      pauseButton,\n      unmuteButton,\n      muteButton,\n      fullscreenButton,\n    } = controls;\n\n    Object.assign(controls, {container});\n\n    this.listenWhenNotDragging_(dismissButton, 'click', () => {\n      this.dismissOnTap_();\n    });\n\n    this.listenWhenNotDragging_(playButton, 'click', () => {\n      this.getDockedVideo_().play(/* auto */ false);\n    });\n\n    this.listenWhenNotDragging_(pauseButton, 'click', () => {\n      this.getDockedVideo_().pause();\n    });\n\n    this.listenWhenNotDragging_(muteButton, 'click', () => {\n      this.getDockedVideo_().mute();\n    });\n\n    this.listenWhenNotDragging_(unmuteButton, 'click', () => {\n      this.getDockedVideo_().unmute();\n    });\n\n    this.listenWhenNotDragging_(fullscreenButton, 'click', () => {\n      this.enterFullscreen_();\n    });\n\n    listen(container, 'mouseup', () =>\n      this.hideControlsOnTimeout_(CONTROLS_TIMEOUT_AFTER_IX));\n\n    this.addDragListeners_(container);\n    this.append_(container);\n\n    return /** @type {!ControlsDef} */ (controls);\n  }\n\n  /**\n   * @param {!Element} element\n   * @param {string} eventType\n   * @param {function(!Event)} handler\n   */\n  listenWhenNotDragging_(element, eventType, handler) {\n    listen(element, eventType, e => {\n      if (this.isDragging_) {\n        return;\n      }\n      handler(e);\n    });\n  }\n\n  /** @private */\n  dismissOnTap_() {\n    this.undock_(this.getDockedVideo_());\n  }\n\n  /**\n   * @return {!../../video-interface.VideoOrBaseElementDef}\n   * @private\n   */\n  getDockedVideo_() {\n    return dev().assert(this.currentlyDocked_).video;\n  }\n\n  /**\n   * @return {!PositionObserver}\n   * @private\n   */\n  getPositionObserver_() {\n    installPositionObserverServiceForDoc(this.ampdoc_);\n\n    // No getter in services.js.\n    return /** @type {!PositionObserver} */ (\n      getServiceForDoc(this.ampdoc_, 'position-observer'));\n  }\n\n  /**\n   * Reconciles the state of a docked or potentially dockable video when\n   * the viewport/position changes.\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {?DockTargetDef}\n   * @private\n   */\n  getTargetFor_(video) {\n    if (this.isDragging_ ||\n        this.ignoreDueToSize_(video) ||\n        this.ignoreBecauseAnotherDocked_(video) ||\n        this.ignoreDueToNotPlayingManually_(video) ||\n        this.undockBecauseVisible_(video)) {\n      return null;\n    }\n    if (this.canUpdateFromSlot_(video)) {\n      return this.getSlot_();\n    }\n    const posY = this.maybeGetRelativeY_(video);\n    if (posY === null) {\n      return posY;\n    }\n    return {posY, posX: this.getRelativeX_()};\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   * @private\n   */\n  canUpdateFromSlot_(video) {\n    if (!this.slotHasDimensions_()) {\n      return false;\n    }\n    const relativeY = this.getSlotRelativeY_();\n    const {element} = video;\n    const {top, bottom} = element.getIntersectionChangeEntry().intersectionRect;\n    const {top: slotTop, height: slotHeight} = this.getFixedSlotLayoutBox_();\n    const slotBottom = this.viewport_.getSize().height - slotHeight - slotTop;\n    if (relativeY == RelativeY.TOP) {\n      return top <= slotTop;\n    }\n    return bottom >= slotBottom;\n  }\n\n  /**\n   * @return {!../../layout-rect.LayoutRectDef}\n   * @private\n   */\n  getFixedSlotLayoutBox_() {\n    const rect = dev().assertElement(this.getSlot_()).getLayoutBox();\n    const dy = -this.viewport_.getScrollTop();\n    return moveLayoutRect(rect, /* dx */ 0, dy);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  slotHasDimensions_() {\n    const el = this.getSlot_();\n    if (!el) {\n      return false;\n    }\n    const {width, height} = this.getFixedSlotLayoutBox_();\n    return width > 0 && height > 0;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  updateOnResize_(video) {\n    const target = this.getTargetFor_(video);\n    if (!target) {\n      return;\n    }\n    this.dock_(video, target);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  updateOnPositionChange_(video) {\n    const target = this.getTargetFor_(video);\n    if (!target) {\n      return;\n    }\n    this.dockOnPositionChange_(video, target);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {number=} ratio\n   * @param {number=} timeout\n   * @return {boolean}\n   */\n  undockBecauseVisible_(video, ratio = 1, timeout = 40) {\n    const {element} = video;\n    if (this.currentlyDocked_ && this.isVisible_(element, ratio)) {\n      if (!this.getUndockingTimeout_().isWaiting()) {\n        this.getUndockingTimeout_().trigger(timeout, video);\n      }\n      return true;\n    }\n    this.getUndockingTimeout_().cancel();\n    return false;\n  }\n\n  /**\n   * @param  {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   */\n  ignoreDueToNotPlayingManually_(video) {\n    return !this.currentlyDocked_ && !this.isPlaying_(video);\n  }\n\n  /**\n   * @param  {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   */\n  ignoreBecauseAnotherDocked_(video) {\n    return !!this.currentlyDocked_ && !this.isCurrentlyDocked_(video);\n  }\n\n  /**\n   * @param  {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   */\n  ignoreDueToSize_(video) {\n    const {width, height} = video.getLayoutBox();\n    if ((width / height) < 1) {\n      complainAboutPortrait(video.element);\n      return true;\n    }\n    if (this.getAreaWidth_() < MIN_VIEWPORT_WIDTH) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getTopEdge_() {\n    return 0;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getBottomEdge_() {\n    return this.viewport_.getSize().height;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getLeftEdge_() {\n    return 0;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getRightEdge_() {\n    return this.viewport_.getSize().width;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {?RelativeY}\n   * @private\n   */\n  maybeGetRelativeY_(video) {\n    if (this.slotHasDimensions_()) {\n      return null;\n    }\n    if (this.isCurrentlyDocked_(video)) {\n      const {posY} = dev().assert(this.currentlyDocked_).target;\n      return /** @type {!RelativeY} */ (dev().assertNumber(posY));\n    }\n    const {element} = video;\n    const {top, bottom} = element.getIntersectionChangeEntry().intersectionRect;\n    if (top <= this.getTopEdge_() &&\n        this.scrollDirection_ == Direction.UP) {\n      return RelativeY.TOP;\n    }\n    if (bottom >= this.getBottomEdge_() &&\n        this.scrollDirection_ == Direction.DOWN) {\n      return RelativeY.BOTTOM;\n    }\n    return null;\n  }\n\n  /**\n   * @return {!RelativeX}\n   * @private\n   */\n  getRelativeX_() {\n    return this.preferredCornerX_;\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getMargin_() {\n    return Math.min(MARGIN_MAX, MARGIN_AREA_WIDTH_PERC * this.getAreaWidth_());\n  }\n\n  /**\n   * @return {number}\n   * @private\n   */\n  getAreaWidth_() {\n    return this.getRightEdge_() - this.getLeftEdge_();\n  }\n\n  /**\n   * @param {?../../video-interface.VideoOrBaseElementDef} optVideo\n   * @return {boolean}\n   * @private\n   */\n  isPlaying_(optVideo = null) {\n    const video = /** @type {!../../video-interface.VideoInterface} */ (\n      optVideo || this.getDockedVideo_());\n    return this.manager_.getPlayingState(video) == PlayingStates.PLAYING_MANUAL;\n  }\n\n  /**\n   * @param {number} dirX\n   * @param {number} dirY\n   * @private\n   */\n  dismiss_(dirX = 0, dirY = 0) {\n    const video = this.getDockedVideo_();\n    const {posY} = this.currentlyDocked_.target;\n    video.pause();\n    this.lastDismissed_ = video;\n    this.lastDismissedPosY_ = posY || null;\n    this.undock_(video, dirX, dirY);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  currentPositionMatchesScroll_() {\n    if (!this.currentlyDocked_) {\n      return false;\n    }\n    if (this.isDockedToSlot_()) {\n      return this.positionMatchesScroll_(this.getSlotRelativeY_());\n    }\n    if (this.currentlyDocked_.target.posY == null) {\n      return false;\n    }\n    return this.positionMatchesScroll_(this.currentlyDocked_.target.posY);\n  }\n\n  /**\n   * @return {!RelativeY}\n   * @private\n   */\n  getSlotRelativeY_() {\n    const {top, height} = this.getFixedSlotLayoutBox_();\n    const vh = this.viewport_.getSize().height;\n    const bottom = vh - height - top;\n    return bottom > top ? RelativeY.TOP : RelativeY.BOTTOM;\n  }\n\n  /**\n   * @param {!RelativeY} posY\n   * @return {boolean}\n   * @private\n   */\n  positionMatchesScroll_(posY) {\n    const direction = this.scrollDirection_;\n    return (\n      (posY == RelativeY.TOP && direction == Direction.UP) ||\n      (posY == RelativeY.BOTTOM && direction == Direction.DOWN));\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!DockTargetDef} target\n   * @private\n   */\n  dockOnPositionChange_(video, target) {\n    if (this.ignoreDueToDismissal_(video)) {\n      return;\n    }\n\n    const step = this.calculateStep_(video.element, target);\n    if (this.ignoreDueToTransitionEnd_(step)) {\n      return;\n    }\n\n    this.dock_(video, target, step);\n\n    this.getDockingTimeout_().trigger(DOCKING_TIMEOUT, video);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!DockTargetDef} target\n   * @param {?number=} opt_step\n   * @private\n   */\n  dock_(video, target, opt_step = null) {\n    const step =\n      isFiniteNumber(opt_step) ?\n        dev().assertNumber(opt_step) :\n        this.calculateStep_(video.element, target);\n\n    if (step < 0.01) {\n      return;\n    }\n\n    if (step >= REVERT_TO_INLINE_RATIO &&\n        this.currentlyDocked_ &&\n        !this.currentlyDocked_.triggeredDock) {\n      this.trigger_(video, Actions.DOCK);\n      this.currentlyDocked_.triggeredDock = true;\n    }\n\n    // Component background is now visible, so hide the poster for the Android\n    // workaround so authors can style the component container as they like.\n    // (see `AmpVideo#createPosterForAndroidBug_`).\n    this.removePosterForAndroidBug_(video.element);\n\n    const {x, y, scale} = this.getDims_(video, target, step);\n    video.hideControls();\n    this.placeAt_(video, x, y, scale, step);\n    this.setCurrentlyDocked_(video, target, step);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!Actions} action\n   * @private\n   */\n  trigger_(video, action) {\n    const trust = ActionTrust.LOW;\n    const event = createCustomEvent(this.ampdoc_.win,\n        /** @type {string} */ (action), /* detail */ dict({}));\n    const actions = Services.actionServiceForDoc(this.ampdoc_);\n    actions.trigger(video.element, action, event, trust);\n  }\n\n  /**\n   * @param  {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   * @private\n   */\n  ignoreDueToDismissal_(video) {\n    if (this.lastDismissed_ != video) {\n      return false;\n    }\n    if (this.lastDismissedPosY_ !== null &&\n        !this.positionMatchesScroll_(this.lastDismissedPosY_)) {\n      return false;\n    }\n    if (this.isVisible_(video.element, FLOAT_TOLERANCE)) {\n      this.resetDismissed_();\n    }\n    return true;\n  }\n\n  /** @private */\n  resetDismissed_() {\n    this.lastDismissed_ = null;\n    this.lastDismissedPosY_ = null;\n  }\n\n  /**\n   * Prevents jump when the transition was timed out before user finished\n   * scrolling component out of view.\n   * @param {number} step\n   * @return {boolean}\n   */\n  ignoreDueToTransitionEnd_(step) {\n    return this.hasTransitionCompleted_(step) &&\n        this.currentPositionMatchesScroll_();\n  }\n\n  /**\n   * @param {!AmpElement} element\n   * @param {!DockTargetDef} target\n   * @return {number}\n   * @private\n   */\n  calculateStep_(element, target) {\n    // Aggressively reduce ratio to prevent covering vertical space.\n    const ratio = this.calculateIntersectionRatio_(element, target);\n    return 1 - Math.pow(ratio, 3);\n  }\n\n  /**\n   * @param {!AmpElement} element\n   * @param {?DockTargetDef=} target\n   * @return {number}\n   * @private\n   */\n  calculateIntersectionRatio_(element, target = null) {\n    if (target == null || !isElement(target)) {\n      return element.getIntersectionChangeEntry().intersectionRatio;\n    }\n\n    const {top, bottom, height} = element.getLayoutBox();\n    const {top: slotTop, bottom: slotBottom} = this.getSlot_().getLayoutBox();\n\n    if (this.getSlotRelativeY_() == RelativeY.TOP) {\n      return (bottom - Math.max(top, slotTop)) / height;\n    } else {\n      return (slotBottom - top) / height;\n    }\n  }\n\n  /**\n   * @param {number} step\n   * @return {number}\n   */\n  calculateTransitionDuration_(step) {\n    const maxAutoTransitionDurationMs = 500;\n    if (!this.currentlyDocked_) {\n      // Don't animate first frame. Browsers sometimes behave weirdly and use\n      // a stale transform value, thus causing it to visually jump.\n      return 0;\n    }\n    const remaining = Math.abs(step - this.currentlyDocked_.step);\n    return remaining * maxAutoTransitionDurationMs;\n  }\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {number} scale\n   * @return {boolean}\n   */\n  alreadyPlacedAt_(x, y, scale) {\n    return !!this.placedAt_ &&\n        this.placedAt_.x == x &&\n        this.placedAt_.y == y &&\n        this.placedAt_.scale == scale;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {number} x\n   * @param {number} y\n   * @param {number} scale\n   * @param {number} step in [0..1]\n   * @param {?number} optTransitionDurationMs\n   * @private\n   */\n  placeAt_(video, x, y, scale, step, optTransitionDurationMs = null) {\n    if (this.alreadyPlacedAt_(x, y, scale)) {\n      return;\n    }\n\n    const transitionDurationMs = optTransitionDurationMs ?\n      dev().assertNumber(optTransitionDurationMs) :\n      this.calculateTransitionDuration_(step);\n\n    const {width, height} = video.getLayoutBox();\n\n    this.placedAt_ = {x, y, scale};\n\n    const transitionTiming =\n        // Auto-transitions are supposed to smooth-out PositionObserver\n        // frequency, so it makes sense to use 'linear'. When the transition\n        // duration is otherwise larger, 'ease-in' looks much nicer.\n        transitionDurationMs > 200 ? 'ease-in' : 'linear';\n\n    const positioningStyles = {\n      'transform': transform(x, y, scale),\n      'transition-duration': `${transitionDurationMs}ms`,\n      'transition-timing-function': transitionTiming,\n    };\n\n    if (this.boxNeedsSizing_(width, height)) {\n      // Setting explicit dimensions is needed to match the video's aspect\n      // ratio. However, we only do this once to prevent jank in subsequent\n      // frames.\n      Object.assign(positioningStyles, {\n        'width': px(width),\n        'height': px(height),\n      });\n    }\n\n    const internalElement = getInternalVideoElementFor(video.element);\n    const shadowLayer = this.getShadowLayer_();\n    const overlay = this.getOverlay_();\n    const {\n      container: controls,\n      dismissContainer,\n    } = this.getControls_();\n\n    video.mutateElement(() => {\n      internalElement.classList.add(BASE_CLASS_NAME);\n      shadowLayer.removeAttribute('hidden');\n      overlay.removeAttribute('hidden');\n      setImportantStyles(internalElement, positioningStyles);\n      setImportantStyles(shadowLayer, positioningStyles);\n      setImportantStyles(overlay, positioningStyles);\n      setImportantStyles(shadowLayer, {\n        'opacity': step,\n      });\n      const halfScale = scale / 2;\n      const centerX = x + (width * halfScale);\n      const centerY = y + (height * halfScale);\n      setImportantStyles(controls, {\n        'transform': translate(centerX, centerY),\n      });\n      const dismissMargin = 8;\n      const dismissWidth = 40;\n      const dismissX = width * halfScale - dismissMargin - dismissWidth;\n      const dismissY = -(height * halfScale - dismissMargin - dismissWidth);\n      setImportantStyles(dismissContainer, {\n        'transform': translate(dismissX, dismissY),\n      });\n    });\n  }\n\n  /**\n   * @param  {number} width\n   * @param  {number} height\n   * @return {boolean}\n   * @private\n   */\n  boxNeedsSizing_(width, height) {\n    const needsSizing =\n        !this.sizedAt_ ||\n        this.sizedAt_.width != width ||\n        this.sizedAt_.height != height;\n    if (needsSizing) {\n      this.sizedAt_ = {width, height};\n    }\n    return needsSizing;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @return {boolean}\n   */\n  isCurrentlyDocked_(video) {\n    return !!this.currentlyDocked_ && this.currentlyDocked_.video == video;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!DockTargetDef} target\n   * @param {number} step\n   */\n  setCurrentlyDocked_(video, target, step) {\n    if (!this.isCurrentlyDocked_(video)) {\n      this.updateControlsBasedOn_(video.element);\n    }\n\n    const {triggeredDock} = this.currentlyDocked_ || {triggeredDock: false};\n    this.currentlyDocked_ = {video, target, step, triggeredDock};\n\n    this.hideControlsOnTapOutsideOnce_();\n  }\n\n  /**\n   * @param {!Element} video\n   * @private\n   */\n  updateControlsBasedOn_(video) {\n    while (this.videoUnlisteners_.length) {\n      this.videoUnlisteners_.pop().call();\n    }\n    this.videoUnlisteners_ = [\n      listen(video, VideoEvents.PLAYING, () => this.onPlay_()),\n      listen(video, VideoEvents.PAUSE, () => this.onPause_()),\n      listen(video, VideoEvents.MUTED, () => this.onMute_()),\n      listen(video, VideoEvents.UNMUTED, () => this.onUnmute_()),\n    ];\n  }\n\n  /** @private */\n  onPlay_() {\n    const {playButton, pauseButton} = this.getControls_();\n    this.stickyControls_ = false;\n    swap(playButton, pauseButton);\n  }\n\n  /** @private */\n  onPause_() {\n    const {pauseButton, playButton} = this.getControls_();\n    this.stickyControls_ = true;\n    swap(pauseButton, playButton);\n  }\n\n  /** @private */\n  onMute_() {\n    const {muteButton, unmuteButton} = this.getControls_();\n    swap(muteButton, unmuteButton);\n  }\n\n  /** @private */\n  onUnmute_() {\n    const {unmuteButton, muteButton} = this.getControls_();\n    swap(unmuteButton, muteButton);\n  }\n\n  /**\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @private\n   */\n  offset_(offsetX, offsetY) {\n    const video = this.getDockedVideo_();\n    const {target} = this.currentlyDocked_;\n\n    const step = 1;\n\n    const {x, y, scale} = this.getDims_(video, target, step);\n    this.placeAt_(video, x + offsetX, y + offsetY, scale, step,\n        /* transitionDurationMs */ 0);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @private\n   */\n  onDockingTimeout_(video) {\n    if (this.isDragging_ ||\n        this.ignoreBecauseAnotherDocked_(video) ||\n        !this.currentlyDocked_ ||\n        (!this.currentPositionMatchesScroll_() &&\n            this.undockBecauseVisible_(\n                video, REVERT_TO_INLINE_RATIO, /* timeout */ 50))) {\n      return;\n    }\n    const {target} = dev().assert(this.currentlyDocked_);\n    this.dock_(video, target, /* step */ 1);\n  }\n\n  /**\n   * @param {!AmpElement} element\n   * @param {number=} minRatio\n   * @return {boolean}\n   */\n  isVisible_(element, minRatio = 1) {\n    const target = this.slotHasDimensions_() ? this.getSlot_() : null;\n    const intersectionRatio = this.calculateIntersectionRatio_(element, target);\n    return intersectionRatio > (minRatio - FLOAT_TOLERANCE);\n  }\n\n  /**\n   * @param {number} amount\n   * @return {boolean}\n   * @private\n   */\n  hasTransitionCompleted_(amount = 1) {\n    return !!this.currentlyDocked_ &&\n        this.currentlyDocked_.step >= (amount - FLOAT_TOLERANCE);\n  }\n\n  /**\n   * @param {!MouseEvent|!TouchEvent} e\n   * @private\n   */\n  drag_(e) {\n    if (!this.currentlyDocked_) {\n      return;\n    }\n\n    if (this.isDockedToSlot_()) {\n      return;\n    }\n\n    // Don't allow dragging videos that are too early in their transition phase.\n    // This allows the user to keep scrolling while touching the inline/almost\n    // inline video area.\n    if (!this.hasTransitionCompleted_(0.75)) {\n      return;\n    }\n\n    const {x: initialX, y: initialY} = pointerCoords(e);\n\n    const offset = {x: 0, y: 0};\n    const {posX: currentPosX, posY: currentPosY} = this.currentlyDocked_.target;\n\n    const onDragMove = throttleByAnimationFrame(this.ampdoc_.win,\n        e => this.onDragMove_(\n            /** @type {!TouchEvent|!MouseEvent} */ (e),\n            currentPosX, currentPosY, initialX, initialY, offset));\n\n    const onDragEnd = () => this.onDragEnd_(unlisteners, offset);\n\n    const root = this.ampdoc_.getRootNode();\n    const unlisteners = [\n      this.disableScroll_(),\n      this.disableUserSelect_(),\n      this.workaroundWebkitDragAndScrollIssue_(),\n      listen(root, 'touchmove', onDragMove),\n      listen(root, 'mousemove', onDragMove),\n      listenOnce(root, 'touchend', onDragEnd),\n      listenOnce(root, 'mouseup', onDragEnd),\n    ];\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  isDockedToSlot_() {\n    if (!this.currentlyDocked_) {\n      return false;\n    }\n    return isElement(this.currentlyDocked_.target);\n  }\n\n  /**\n   * @return {!UnlistenDef}\n   * @private\n   */\n  disableUserSelect_() {\n    const docEl = dev().assertElement(this.getDoc_().documentElement);\n    const disabledClassName = 'i-amphtml-select-disabled';\n    docEl.classList.add(disabledClassName);\n    return () => docEl.classList.remove(disabledClassName);\n  }\n\n  /**\n   * @return {!UnlistenDef}\n   * @private\n   */\n  disableScroll_() {\n    this.viewport_.disableScroll();\n    return this.viewport_.resetScroll.bind(this.viewport_);\n  }\n\n  /**\n   * @param {!MouseEvent|!TouchEvent} e\n   * @param {!RelativeX} startPosX\n   * @param {!RelativeY} startPosY\n   * @param {number} startX\n   * @param {number} startY\n   * @param {{x: number, y: number}} offset\n   * @private\n   */\n  onDragMove_(e, startPosX, startPosY, startX, startY, offset) {\n    const {posX, posY} = this.currentlyDocked_.target;\n    if (posX !== startPosX || posY !== startPosY) {\n      // stale event\n      return;\n    }\n\n    const {x, y} = pointerCoords(e);\n    offset.x = x - startX;\n    offset.y = y - startY;\n\n    // Prevents dragging misfires.\n    const offsetDist = Math.sqrt(Math.pow(offset.x, 2) + Math.pow(offset.y, 2));\n    if (offsetDist <= 10) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.hideControls_();\n    this.isDragging_ = true;\n    this.offset_(offset.x, offset.y);\n    this.updateDismissalAreaStyling_(offset.x, offset.y);\n  }\n\n  /**\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @private\n   */\n  updateDismissalAreaStyling_(offsetX, offsetY) {\n    const video = this.getDockedVideo_();\n    const {element} = video;\n    const internalElement = getInternalVideoElementFor(element);\n    const inDismissalArea = this.inDismissalArea_(offsetX, offsetY);\n\n    video.mutateElement(() => {\n      const className = 'amp-video-docked-almost-dismissed';\n      internalElement.classList.toggle(className, inDismissalArea);\n      this.getOverlay_().classList.toggle(className, inDismissalArea);\n    });\n  }\n\n  /**\n   * Works around https://bugs.webkit.org/show_bug.cgi?id=184250\n   * @return {!UnlistenDef}\n   * @private\n   */\n  workaroundWebkitDragAndScrollIssue_() {\n    const {win} = this.ampdoc_;\n    if (!Services.platformFor(win).isIos()) {\n      return () => { /* NOOP */ };\n    }\n    const handler = e => e.preventDefault();\n    win.addEventListener('touchmove', handler, {passive: false});\n    return () => win.removeEventListener('touchmove', handler);\n  }\n\n  /**\n   * @param {!Array<!UnlistenDef>} unlisteners\n   * @param {{x: number, y: number}} offset\n   * @private\n   */\n  onDragEnd_(unlisteners, offset) {\n    unlisteners.forEach(unlisten => unlisten.call());\n\n    this.isDragging_ = false;\n\n    if (this.dismissOnDragEnd_(offset.x, offset.y)) {\n      return;\n    }\n\n    this.snapToCorner_(offset.x, offset.y);\n  }\n\n  /**\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @private\n   */\n  dismissOnDragEnd_(offsetX, offsetY) {\n    const inDimissalArea = this.inDismissalArea_(offsetX, offsetY);\n    if (inDimissalArea) {\n      this.dismiss_();\n    }\n    return inDimissalArea;\n  }\n\n  /**\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @return {boolean}\n   */\n  inDismissalArea_(offsetX, offsetY) {\n    // TODO: Use topEdge/bottomEdge\n    const dismissToleranceFromCenterPx = 20;\n    const {width: vw, height: vh} = this.viewport_.getSize();\n    const {centerX, centerY} = this.getCenter_(offsetX, offsetY);\n    return centerX >= (vw - dismissToleranceFromCenterPx) ||\n        centerX <= dismissToleranceFromCenterPx ||\n        centerY >= (vh - dismissToleranceFromCenterPx) ||\n        centerY <= dismissToleranceFromCenterPx;\n  }\n\n  /**\n   * Gets the center of the currently docked video, offset by (x, y).\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @return {{centerX: number, centerY: number}}\n   * @private\n   */\n  getCenter_(offsetX, offsetY) {\n    const {target, step} = this.currentlyDocked_;\n    const video = this.getDockedVideo_();\n    const {width, height} = video.getLayoutBox();\n    const {x, y, scale} = this.getDims_(video, target, step);\n\n    const centerX = x + offsetX + (width * scale / 2);\n    const centerY = y + offsetY + (height * scale / 2);\n\n    return {centerX, centerY};\n  }\n\n  /**\n   * @param {number} offsetX\n   * @param {number} offsetY\n   * @private\n   */\n  snapToCorner_(offsetX, offsetY) {\n    const video = this.getDockedVideo_();\n    const {step} = this.currentlyDocked_;\n\n    const {centerX, centerY} = this.getCenter_(offsetX, offsetY);\n\n    let minDistance = null;\n    let closestCornerX = null;\n    let closestCornerY = null;\n\n    [RelativeX.LEFT, RelativeX.RIGHT].forEach(posX => {\n      [RelativeY.TOP, RelativeY.BOTTOM].forEach(posY => {\n        const cornerX = posX == RelativeX.LEFT ?\n          this.getLeftEdge_() :\n          this.getRightEdge_();\n        const cornerY = posY == RelativeY.TOP ?\n          this.getTopEdge_() :\n          this.getBottomEdge_();\n        const distance = Math.sqrt(\n            Math.pow(cornerX - centerX, 2) +\n            Math.pow(cornerY - centerY, 2));\n        if (minDistance === null ||\n            distance < minDistance) {\n          minDistance = distance;\n          closestCornerY = posY;\n          closestCornerX = posX;\n        }\n      });\n    });\n\n    const target = {\n      posX: closestCornerX,\n      posY: closestCornerY,\n    };\n\n    this.currentlyDocked_.target = target;\n\n    this.preferredCornerX_ = closestCornerX;\n\n    const {x, y, scale} = this.getDims_(video, target, step);\n\n    this.placeAt_(video, x, y, scale, step, /* optTransitionDurationMs */ 200);\n  }\n\n  /**\n   * @param {!Element} target\n   * @return {boolean}\n   * @private\n   */\n  isControlsEventTarget_(target) {\n    return !!closestBySelector(target, '.amp-video-docked-controls');\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!DockTargetDef} target\n   * @return {!TargetAreaDef}\n   * @private\n   */\n  getTargetArea_(video, target) {\n    return isElement(target) ?\n      this.getTargetAreaFromSlot_(video, dev().assertElement(target)) :\n      this.getTargetAreaFromPos_(video, target.posX, target.posY);\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!RelativeX} posX\n   * @param {!RelativeY} posY\n   * @return {!TargetAreaDef}\n   * @private\n   */\n  getTargetAreaFromPos_(video, posX, posY) {\n    const {width, height} = video.getLayoutBox();\n    const margin = this.getMargin_();\n    const aspectRatio = width / height;\n    const targetWidth = Math.max(MIN_WIDTH, this.getAreaWidth_() * 0.3);\n    const targetHeight = targetWidth / aspectRatio;\n\n    const x =\n      (posX == RelativeX.RIGHT ?\n        this.getRightEdge_() - margin - targetWidth :\n        this.getLeftEdge_() + margin);\n\n    const y =\n      (posY == RelativeY.TOP ?\n        this.getTopEdge_() + margin :\n        this.getBottomEdge_() - margin - targetHeight);\n\n    const initialY = this.calculateInitialY_(\n        posY, this.getTopEdge_(), this.getBottomEdge_(), height);\n\n    return {x, y, targetWidth, targetHeight, initialY};\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!AmpElement} slot\n   * @return {!TargetAreaDef}\n   * @private\n   */\n  getTargetAreaFromSlot_(video, slot) {\n    const {\n      width: naturalWidth,\n      height: naturalHeight,\n    } = video.getLayoutBox();\n\n    const {\n      width: slotWidth,\n      height: slotHeight,\n      left,\n    } = slot.getLayoutBox();\n\n    const {top, bottom} = this.getFixedSlotLayoutBox_();\n\n    const slotAspect = slotWidth / slotHeight;\n    const naturalAspect = naturalWidth / naturalHeight;\n\n    let x, y, scale;\n\n    if (naturalAspect > slotAspect) {\n      scale = slotWidth / naturalWidth;\n      y = top + (slotHeight / 2) - (naturalHeight * scale / 2);\n      x = left;\n    } else {\n      scale = slotHeight / naturalHeight;\n      x = left + (slotWidth / 2) - (naturalWidth * scale / 2);\n      y = top;\n    }\n\n    const initialY = this.calculateInitialY_(\n        this.getSlotRelativeY_(), top, bottom, naturalHeight);\n\n    const targetWidth = naturalWidth * scale;\n    const targetHeight = naturalHeight * scale;\n\n    return {x, y, targetWidth, targetHeight, initialY};\n  }\n\n  /**\n   * @param {!RelativeY} pos\n   * @param {number} targetTop\n   * @param {number} targetBottom\n   * @param {number} naturalHeight\n   * @return {number}\n   */\n  calculateInitialY_(pos, targetTop, targetBottom, naturalHeight) {\n    return pos == RelativeY.TOP ? targetTop : targetBottom - naturalHeight;\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {!DockTargetDef} target\n   * @param {number} step in [0..1]\n   * @return {{x: number, y: number, scale: number}}\n   */\n  getDims_(video, target, step) {\n    const {left, width} = video.getLayoutBox();\n    const {x, y, targetWidth, initialY} = this.getTargetArea_(video, target);\n    const currentX = mapStep(step, left, x);\n    const currentWidth = mapStep(step, width, targetWidth);\n    const currentY = mapStep(step, initialY, y);\n    const scale = currentWidth / width;\n    return {x: currentX, y: currentY, scale};\n  }\n\n  /**\n   * @param {!../../video-interface.VideoOrBaseElementDef} video\n   * @param {number=} unusedDismissDirX\n   * @param {number=} unusedDismissDirY\n   * @private\n   */\n  undock_(video, unusedDismissDirX = 0, unusedDismissDirY = 0) {\n    // TODO(alanorozco): animate dismissal\n    const internalElement = getInternalVideoElementFor(video.element);\n\n    this.trigger_(video, Actions.UNDOCK);\n\n    video.mutateElement(() => {\n      this.hideControls_();\n      video.showControls();\n      this.placedAt_ = null;\n      this.sizedAt_ = null;\n      internalElement.classList.remove(BASE_CLASS_NAME);\n      const shadowLayer = this.getShadowLayer_();\n      const overlay = this.getOverlay_();\n      const almostDismissed = 'amp-video-docked-almost-dismissed';\n      internalElement.classList.remove(almostDismissed);\n      overlay.classList.remove(almostDismissed);\n      const stylesToReset = [\n        'transform',\n        'transition',\n        'width',\n        'height',\n        'opacity',\n      ];\n      shadowLayer.setAttribute('hidden', '');\n      overlay.setAttribute('hidden', '');\n      resetStyles(internalElement, stylesToReset);\n      resetStyles(shadowLayer, stylesToReset);\n      resetStyles(overlay, stylesToReset);\n      this.currentlyDocked_ = null;\n    });\n  }\n\n  /**\n   * @param {boolean=} respectSticky\n   * @private\n   */\n  hideControls_(respectSticky = false) {\n    if (respectSticky && this.stickyControls_) {\n      return;\n    }\n    const {container} = this.getControls_();\n    const overlay = this.getOverlay_();\n    overlay.classList.remove('amp-video-docked-controls-bg');\n    container.classList.remove('amp-video-docked-controls-shown');\n  }\n\n  /**\n   * @param {number=} time\n   * @private\n   */\n  hideControlsOnTimeout_(time = CONTROLS_TIMEOUT) {\n    this.getHideControlsTimeout_().trigger(time);\n  }\n\n  /**\n   * @param {!Element} parent\n   * @private\n   */\n  removePosterForAndroidBug_(parent) {\n    const el = parent.querySelector('.i-amphtml-android-poster-bug');\n    if (!el) {\n      return;\n    }\n    removeElement(el);\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {installStylesForDoc} from '../../style-installer';\n// Source for this constant is css/video-autoplay.css\nimport {cssText} from '../../../build/video-autoplay.css.js';\n\n\n/**\n * @param  {!../ampdoc-impl.AmpDoc} ampdoc\n */\nexport function installAutoplayStylesForDoc(ampdoc) {\n  installStylesForDoc(\n      ampdoc,\n      cssText,\n      /* callback */ null,\n      /* opt_isRuntimeCss */ false,\n      /* opt_ext */ 'amp-video-autoplay');\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {map} from './utils/object.js';\n\nlet container;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!container || container.ownerDocument !== doc) {\n    container = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  dev().assert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  dev().assert(el, 'No elements in template');\n  dev().assert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container./*OK*/innerHTML = '';\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = dev().assert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    dev().assert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev, rethrowAsync} from './log';\nimport {insertAfterOrAtStart, waitForBody} from './dom';\nimport {map} from './utils/object';\nimport {setStyles} from './style';\nimport {waitForServices} from './render-delaying-services';\n\nconst TRANSFORMER_PROP = '__AMP_CSS_TR';\nconst STYLE_MAP_PROP = '__AMP_CSS_SM';\nconst bodyVisibleSentinel = '__AMP_BODY_VISIBLE';\n\n\n/**\n * Adds the given css text to the given ampdoc.\n *\n * The style tags will be at the beginning of the head before all author\n * styles. One element can be the main runtime CSS. This is guaranteed\n * to always be the first stylesheet in the doc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are available.\n *     Not using a promise, because this is synchronous when possible.\n *     for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesForDoc(\n  ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const cssRoot = ampdoc.getHeadNode();\n  const style = insertStyleElement(\n      cssRoot,\n      maybeTransform(cssRoot, cssText),\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    const rootNode = ampdoc.getRootNode();\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(rootNode, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(rootNode, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Adds the given css text to the given document.\n * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is\n * done.\n *\n * @param {!Document} doc The document that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are\n *     available. Not using a promise, because this is synchronous when\n *     possible. for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesLegacy(\n  doc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const style = insertStyleElement(\n      dev().assertElement(doc.head),\n      cssText,\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(doc, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(doc, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Creates the properly configured style element.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @param {boolean} isRuntimeCss\n * @param {?string} ext\n * @return {!Element}\n */\nfunction insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {\n  let styleMap = cssRoot[STYLE_MAP_PROP];\n  if (!styleMap) {\n    styleMap = cssRoot[STYLE_MAP_PROP] = map();\n  }\n\n  const isExtCss = !isRuntimeCss &&\n      (ext && ext != 'amp-custom' && ext != 'amp-keyframes');\n  const key =\n      isRuntimeCss ? 'amp-runtime' :\n        isExtCss ? `amp-extension=${ext}` : null;\n\n  // Check if it has already been created or discovered.\n  if (key) {\n    const existing = getExistingStyleElement(cssRoot, styleMap, key);\n    if (existing) {\n      return existing;\n    }\n  }\n\n  // Create the new style element and append to cssRoot.\n  const doc = (cssRoot.ownerDocument || cssRoot);\n  const style = doc.createElement('style');\n  style./*OK*/textContent = cssText;\n  let afterElement = null;\n  // Make sure that we place style tags after the main runtime CSS. Otherwise\n  // the order is random.\n  if (isRuntimeCss) {\n    style.setAttribute('amp-runtime', '');\n  } else if (isExtCss) {\n    style.setAttribute('amp-extension', ext || '');\n    afterElement = dev().assertElement(getExistingStyleElement(\n        cssRoot, styleMap, 'amp-runtime'));\n  } else {\n    if (ext) {\n      style.setAttribute(ext, '');\n    }\n    afterElement = cssRoot.lastChild;\n  }\n  insertAfterOrAtStart(cssRoot, style, afterElement);\n  if (key) {\n    styleMap[key] = style;\n  }\n  return style;\n}\n\n\n/**\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {!Object<string, !Element>} styleMap\n * @param {string} key\n * @return {?Element}\n */\nfunction getExistingStyleElement(cssRoot, styleMap, key) {\n  // Already cached.\n  if (styleMap[key]) {\n    return styleMap[key];\n  }\n  // Check if the style has already been added by the server layout.\n  const existing = cssRoot./*OK*/querySelector(`style[${key}]`);\n  if (existing) {\n    styleMap[key] = existing;\n    return existing;\n  }\n  // Nothing found.\n  return null;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {function(string):string} transformer\n */\nexport function installCssTransformer(cssRoot, transformer) {\n  cssRoot[TRANSFORMER_PROP] = transformer;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @return {string}\n */\nfunction maybeTransform(cssRoot, cssText) {\n  const transformer = cssRoot[TRANSFORMER_PROP];\n  return transformer ? transformer(cssText) : cssText;\n}\n\n\n/**\n * Sets the document's body opacity to 1.\n * If the body is not yet available (because our script was loaded\n * synchronously), polls until it is.\n * @param {!Document} doc The document who's body we should make visible.\n * @param {boolean=} opt_waitForServices Whether the body visibility should\n *     be blocked on key services being loaded.\n */\nexport function makeBodyVisible(doc, opt_waitForServices) {\n  dev().assert(doc.defaultView, 'Passed in document must have a defaultView');\n  const win = /** @type {!Window} */ (doc.defaultView);\n  if (win[bodyVisibleSentinel]) {\n    return;\n  }\n  const set = () => {\n    win[bodyVisibleSentinel] = true;\n    setStyles(dev().assertElement(doc.body), {\n      opacity: 1,\n      visibility: 'visible',\n      'animation': 'none',\n    });\n    renderStartedNoInline(doc);\n  };\n  try {\n    waitForBody(doc, () => {\n      if (win[bodyVisibleSentinel]) {\n        return;\n      }\n      win[bodyVisibleSentinel] = true;\n      if (opt_waitForServices) {\n        waitForServices(win).catch(reason => {\n          rethrowAsync(reason);\n          return [];\n        }).then(services => {\n          set();\n          if (services.length > 0) {\n            Services.resourcesForDoc(doc)./*OK*/schedulePass(\n                1, /* relayoutAll */ true);\n          }\n          try {\n            const perf = Services.performanceFor(win);\n            perf.tick('mbv');\n            perf.flush();\n          } catch (e) {}\n        });\n      } else {\n        set();\n      }\n    });\n  } catch (e) {\n    // If there was an error during the logic above (such as service not\n    // yet installed, definitely try to make the body visible.\n    set();\n    // Avoid errors in the function to break execution flow as this is\n    // often called as a last resort.\n    rethrowAsync(e);\n  }\n}\n\n\n/**\n * @param {!Document} doc\n */\nfunction renderStartedNoInline(doc) {\n  try {\n    Services.resourcesForDoc(doc).renderStarted();\n  } catch (e) {\n    // `makeBodyVisible` is called in the error-processing cycle and thus\n    // could be triggered when runtime's initialization is incomplete which\n    // would cause unrelated errors to be thrown here.\n  }\n}\n\n\n/**\n * Indicates that the body is always visible. For instance, in case of PWA.\n * @param {!Window} win\n */\nexport function bodyAlwaysVisible(win) {\n  win[bodyVisibleSentinel] = true;\n}\n\n\n/**\n * Checks whether a style element was registered in the DOM.\n * @param {!Document|!ShadowRoot} doc\n * @param {!Element} style\n * @return {boolean}\n */\nfunction styleLoaded(doc, style) {\n  const sheets = doc.styleSheets;\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    if (sheet.ownerNode == style) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// TODO(rsimha, #15334): Enable this rule.\n/* eslint jsdoc/check-types: 0 */\n\n/**\n * Creates a function that is evaluated only once and returns the cached result\n * subsequently.\n *\n * Please note that `once` only takes the function definition into account,\n * so it will return the same cached value even when the arguments are\n * different.\n *\n * @param {function(...):T} fn\n * @return {function(...):T}\n * @template T\n */\nexport function once(fn) {\n  let evaluated = false;\n  let retValue = null;\n  let callback = fn;\n  return (...args) => {\n    if (!evaluated) {\n      retValue = callback.apply(self, args);\n      evaluated = true;\n      callback = null; // GC\n    }\n    return retValue;\n  };\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Maps a value in a first range to its equivalent in a second range\n * Ex.: 5 in the range [0,10] gives 60 in the range[40,80]\n *\n * NOTE: lower/upper bounds on the source range are detected automatically,\n * however the bounds on the target range are not altered (thus the target\n * range could be decreasing).\n * Ex1: 8 in the range [0, 10] gives 2 in the range [10, 0]\n * Ex2: also, 8 in the range [10, 0] gives 2 in the range [10, 0]\n *\n * NOTE: Input value is enforced to be bounded inside the source range\n * Ex1: -2 in the range [0, 10] is interpreted as 0 and thus gives 40 in [40,80]\n * Ex2: 19 in the range [0, 5] is interpreted as 5 and thus gives 80 in [40,80]\n *\n * @param {number} val the value in the source range\n * @param {number} min1 the lower bound of the source range\n * @param {number} max1 the upper bound of the source range\n * @param {number} min2 the lower bound of the target range\n * @param {number} max2 the upper bound of the target range\n * @return {number} the equivalent value in the target range\n */\nexport function mapRange(val, min1, max1, min2, max2) {\n\n  let max1Bound = max1;\n  let min1Bound = min1;\n  if (min1 > max1) {\n    max1Bound = min1;\n    min1Bound = max1;\n  }\n\n  if (val < min1Bound) {\n    val = min1Bound;\n  } else if (val > max1Bound) {\n    val = max1Bound;\n  }\n\n  return (val - min1) * (max2 - min2) / (max1 - min1) + min2;\n}\n\n/**\n * Computes the modulus of values `a` and `b`.\n *\n * This is needed because the % operator in JavaScript doesn't implement\n * modulus behaviour as can be seen by the spec here:\n * http://www.ecma-international.org/ecma-262/5.1/#sec-11.5.3.\n * It instead is used to obtain the remainder of a division.\n * This function uses the remainder (%) operator to determine the modulus.\n * Derived from here:\n * https://stackoverflow.com/questions/25726760/javascript-modular-arithmetic/47354356#47354356\n *\n * @param {number} a\n * @param {number} b\n * @return {number} returns the modulus of the two numbers.\n * @example\n *\n * _.min(10, 5);\n * // => 0\n *\n * _.mod(-1, 5);\n * // => 4\n */\nexport function mod(a, b) {\n  return a > 0 && b > 0 ? a % b : ((a % b) + b) % b;\n}\n\n/**\n * Restricts a number to be in the given min/max range.\n *\n * Examples:\n * clamp(0.5, 0, 1) -> 0.5\n * clamp(1.5, 0, 1) -> 1\n * clamp(-0.5, 0, 1) -> 0\n *\n * @param {number} val the value to clamp.\n * @param {number} min the lower bound.\n * @param {number} max the upper bound.\n * @return {number} the clamped value.\n */\nexport function clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wraps a given callback and applies a rate limit.\n * It throttles the calls so that no consequent calls have time interval\n * smaller than the given minimal interval.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function throttle(win, callback, minInterval) {\n  let locker = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {!Object} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    // Lock the fire for minInterval milliseconds\n    locker = win.setTimeout(waiter, minInterval);\n\n    callback.apply(null, args);\n  }\n\n  /**\n   * Waiter function\n   */\n  function waiter() {\n    locker = 0;\n    // If during the period there're invocations queued up, fire once.\n    if (nextCallArgs) {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    if (locker) {\n      nextCallArgs = args;\n    } else {\n      fire(args);\n    }\n  };\n}\n\n/**\n * Wraps a given callback and applies a wait timer, so that minInterval\n * milliseconds must pass since the last call before the callback is actually\n * invoked.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function debounce(win, callback, minInterval) {\n  let locker = 0;\n  let timestamp = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {?Array} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    callback.apply(null, args);\n  }\n\n  /**\n   * Wait function for debounce\n   */\n  function waiter() {\n    locker = 0;\n    const remaining = minInterval - (win.Date.now() - timestamp);\n    if (remaining > 0) {\n      locker = win.setTimeout(waiter, remaining);\n    } else {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    timestamp = win.Date.now();\n    nextCallArgs = args;\n    if (!locker) {\n      locker = win.setTimeout(waiter, minInterval);\n    }\n  };\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {dev} from '../log';\nimport {once} from './function';\nimport {setStyles} from '../style';\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLiteViewer\n * @return {!Promise<boolean>}\n */\nfunction isAutoplaySupportedImpl(win, isLiteViewer) {\n  // We do not support autoplay in amp-lite viewer regardless of platform.\n  if (isLiteViewer) {\n    return Promise.resolve(false);\n  }\n\n  // To detect autoplay, we create a video element and call play on it, if\n  // `paused` is true after `play()` call, autoplay is supported. Although\n  // this is unintuitive, it works across browsers and is currently the lightest\n  // way to detect autoplay without using a data source.\n  const detectionElement = win.document.createElement('video');\n\n  // NOTE(aghassemi): We need both attributes and properties due to Chrome and\n  // Safari differences when dealing with non-attached elements.\n  detectionElement.setAttribute('muted', '');\n  detectionElement.setAttribute('playsinline', '');\n  detectionElement.setAttribute('webkit-playsinline', '');\n  detectionElement.setAttribute('height', '0');\n  detectionElement.setAttribute('width', '0');\n\n  detectionElement.muted = true;\n  detectionElement.playsinline = true;\n  detectionElement.webkitPlaysinline = true;\n\n  setStyles(detectionElement, {\n    position: 'fixed',\n    top: '0',\n    width: '0',\n    height: '0',\n    opacity: '0',\n  });\n\n  // Promise wrapped this way to catch both sync throws and async rejections.\n  // More info: https://github.com/tc39/proposal-promise-try\n  new Promise(resolve => resolve(detectionElement.play())).catch(() => {\n    // Suppress any errors, useless to report as they are expected.\n  });\n\n  return Promise.resolve(!detectionElement.paused);\n}\n\n\n/** @private {?(function(Window, boolean):!Promise<boolean>)} */\nlet isAutoplaySupported = null;\n\n/**\n * Sets if autoplay is supported.\n */\nfunction setIsAutoplaySupported() {\n  isAutoplaySupported =\n    /** @type {function(Window, boolean):!Promise<boolean>} */ (\n      once(isAutoplaySupportedImpl));\n}\n\n\n/**\n * Wrapper around static utilities for testability.\n */\nexport class VideoUtils {\n  /**\n   * Determines autoplay support.\n   *\n   * Note that even if platfrom supports autoplay, users or browsers can disable\n   * autoplay to save data / battery. This detects both platfrom support and\n   * when autoplay has been disabled by the user.\n   *\n   * @param {!Window} win\n   * @param {boolean} isLiteViewer\n   * @return {!Promise<boolean>}\n   */\n  static isAutoplaySupported(win, isLiteViewer) {\n    if (!isAutoplaySupported) {\n      setIsAutoplaySupported();\n    }\n    return isAutoplaySupported(win, isLiteViewer);\n  }\n\n  /** @visibleForTesting */\n  static resetIsAutoplaySupported() {\n    setIsAutoplaySupported();\n  }\n}\n\n/**\n * @param {!Element} element\n * @return {!Element}\n * Note: Not included in `VideoUtils` as we don't need to test a\n * static selector.\n */\nexport function getInternalVideoElementFor(element) {\n  return dev().assertElement(element.querySelector('video, iframe'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const MIN_VISIBILITY_RATIO_FOR_AUTOPLAY = 0.5;\n\n/**\n * VideoInterface defines a common video API which any AMP component that plays\n * videos is expected to implement.\n *\n * AMP runtime uses this common API to provide consistent video experience and\n * analytics across all video players.\n *\n * Components implementing this interface must also extend\n * {@link ./base-element.BaseElement} and register with the\n * Video Manager {@link ./service/video-manager-impl.VideoManager} during\n * their `builtCallback`.\n *\n * @interface\n */\nexport class VideoInterface {\n\n  /**\n   * Whether the component supports video playback in the current platform.\n   * If false, component will be not treated as a video component.\n   * @return {boolean}\n   */\n  supportsPlatform() {}\n\n  /**\n   * Whether users can interact with the video such as pausing it.\n   * Example of non-interactive videos include design background videos where\n   * all controls are hidden from the user.\n   *\n   * @return {boolean}\n   */\n  isInteractive() {}\n\n  /**\n   * Current playback time in seconds at time of trigger\n   * @return {number}\n   */\n  getCurrentTime() {}\n\n  /**\n   * Total duration of the video in seconds\n   * @return {number}\n   */\n  getDuration() {}\n\n  /**\n   * Get a 2d array of start and stop times that the user has watched.\n   * @return {!Array<Array<number>>}\n   */\n  getPlayedRanges() {}\n\n  /**\n   * Plays the video..\n   *\n   * @param {boolean} unusedIsAutoplay Whether the call to the `play` method is\n   * triggered by the autoplay functionality. Video players can use this hint\n   * to make decisions such as not playing pre-roll video ads.\n   */\n  play(unusedIsAutoplay) {}\n\n  /**\n   * Pauses the video.\n   */\n  pause() {}\n\n  /**\n   * Mutes the video.\n   */\n  mute() {}\n\n  /**\n   * Unmutes the video.\n   */\n  unmute() {}\n\n  /**\n   * Makes the video UI controls visible.\n   *\n   * AMP will not call this method if `controls` attribute is not set.\n   */\n  showControls() {}\n\n  /**\n   * Hides the video UI controls.\n   *\n   * AMP will not call this method if `controls` attribute is not set.\n   */\n  hideControls() {}\n\n  /**\n   * Returns video's meta data (artwork, title, artist, album, etc.) for use\n   * with the Media Session API\n   * artwork (Array): URL to the poster image (preferably a 512x512 PNG)\n   * title (string): Name of the video\n   * artist (string): Name of the video's author/artist\n   * album (string): Name of the video's album if it exists\n   * @return {!./mediasession-helper.MetadataDef|undefined} metadata\n   */\n  getMetadata() {}\n\n  /**\n   * If this returns true then it will be assumed that the player implements\n   * a feature to enter fullscreen on device rotation internally, so that the\n   * video manager does not override it. If not, the video manager will\n   * implement this feature automatically for videos with the attribute\n   * `rotate-to-fullscreen`.\n   *\n   * @return {boolean}\n   */\n  preimplementsAutoFullscreen() {}\n\n  /**\n   * If this returns true then it will be assumed that the player implements\n   * the MediaSession API internally so that the video manager does not override\n   * it. If not, the video manager will use the metadata variable as well as\n   * inferred meta-data to update the video's Media Session notification.\n   *\n   * @return {boolean}\n   */\n  preimplementsMediaSessionAPI() {}\n\n  /**\n   * Enables fullscreen on the internal video element\n   * NOTE: While implementing, keep in mind that Safari/iOS do not allow taking\n   * any element other than <video> to fullscreen, if the player has an internal\n   * implementation of fullscreen (flash for example) then check\n   * if Services.platformFor(this.win).isSafari is true and use the internal\n   * implementation instead. If not, it is recommended to take the iframe\n   * to fullscreen using fullscreenEnter from dom.js\n   */\n  fullscreenEnter() {}\n\n  /**\n   * Quits fullscreen mode\n   */\n  fullscreenExit() {}\n\n  /**\n   * Returns whether the video is currently in fullscreen mode or not\n   * @return {boolean}\n   */\n  isFullscreen() {}\n}\n\n\n/**\n * Attributes\n *\n * Components implementing the VideoInterface are expected to support\n * the following attributes.\n *\n * @constant {!Object<string, string>}\n */\nexport const VideoAttributes = {\n  /**\n   * autoplay\n   *\n   * Whether the developer has configured autoplay on the component.\n   * This is normally done by setting `autoplay` attribute on the component.\n   *\n   * AMP runtime manages autoplay behaviour itself using methods such as `play`,\n   * `pause`, `showControls`, `hideControls`, `mute`, etc.. therefore components\n   * should not propagate the autoplay attribute to the underlying player\n   * implementation.\n   *\n   * When a video is requested to autoplay, AMP will automatically\n   * mute and hide the controls for the video, when video is 75% visible in\n   * the viewport, AMP will play the video and later pauses it when 25%\n   * or more of the video exits the viewport. If an auto-playing video also has\n   * controls, AMP will install a tap\n   * handler on the video, and when an end-user taps the video, AMP will show\n   * the controls.\n   *\n   */\n  AUTOPLAY: 'autoplay',\n  /**\n   * dock\n   *\n   * Setting the `dock` attribute on the component makes the video minimize\n   * to the corner when scrolled out of view and has been interacted with.\n   */\n  DOCK: 'dock',\n  /**\n   * rotate-to-fullscreen\n   *\n   * If enabled, this automatically expands the currently visible video and\n   * playing to fullscreen when the user changes the device's orientation to\n   * landscape if the video was started following a user interaction\n   * (not autoplay)\n   *\n   * Dependent upon browser support of\n   * http://caniuse.com/#feat=screen-orientation\n   * and http://caniuse.com/#feat=fullscreen\n   */\n  ROTATE_TO_FULLSCREEN: 'rotate-to-fullscreen',\n  /**\n   * noaudio\n   *\n   * If set and autoplay, the equalizer icon will not be displayed.\n   */\n  NO_AUDIO: 'noaudio',\n};\n\n\n/**\n * Events\n *\n * Components implementing the VideoInterface are expected to dispatch\n * the following DOM events.\n *\n * @constant {!Object<string, string>}\n */\nexport const VideoEvents = {\n  /**\n   * registered\n   *\n   * Fired when the video player element is built and has been registered with\n   * the video manager.\n   *\n   * @event registered\n   */\n  REGISTERED: 'registered',\n\n  /**\n   * load\n   *\n   * Fired when the video player is loaded and calls to methods such as `play()`\n   * are allowed.\n   *\n   * @event load\n   */\n  LOAD: 'load',\n\n  /**\n   * playing\n   *\n   * Fired when the video begins playing.\n   *\n   * @event playing\n   */\n  PLAYING: 'playing',\n\n  /**\n   * pause\n   *\n   * Fired when the video pauses.\n   *\n   * @event pause\n   */\n  PAUSE: 'pause',\n\n  /**\n   * ended\n   *\n   * Fired when the video ends.\n   *\n   * This event should be fired in addition to `pause` when video ends.\n   *\n   * @event ended\n   */\n  ENDED: 'ended',\n\n  /**\n   * muted\n   *\n   * Fired when the video is muted.\n   *\n   * @event muted\n   */\n  MUTED: 'muted',\n\n  /**\n   * unmuted\n   *\n   * Fired when the video is unmuted.\n   *\n   * @event unmuted\n   */\n  UNMUTED: 'unmuted',\n\n  /**\n   * amp:video:visibility\n   *\n   * Fired when the video's visibility changes. Normally fired\n   * from `viewportCallback`.\n   *\n   * @event amp:video:visibility\n   * @property {boolean} visible Whether the video player is visible or not.\n   */\n  VISIBILITY: 'amp:video:visibility',\n\n  /**\n   * reload\n   *\n   * Fired when the video's src changes.\n   *\n   * @event reloaded\n   */\n  RELOAD: 'reloaded',\n\n  /**\n   * pre/mid/post Ad start\n   *\n   * Fired when an Ad starts playing.\n   *\n   * This is used to remove any overlay shims during Ad play during autoplay\n   * or minimized-to-corner version of the player.\n   *\n   * @event ad_start\n   */\n  AD_START: 'ad_start',\n\n  /**\n   * pre/mid/post Ad ends\n   *\n   * Fired when an Ad ends playing.\n   *\n   * This is used to restore any overlay shims during Ad play during autoplay\n   * or minimized-to-corner version of the player.\n   *\n   * @event ad_end\n   */\n  AD_END: 'ad_end',\n};\n\n\n/**\n * Playing States\n *\n * Internal playing states used to distinguish between video playing on user's\n * command and videos playing automatically\n *\n * @constant {!Object<string, string>}\n */\nexport const PlayingStates = {\n  /**\n   * playing_manual\n   *\n   * When the video user manually interacted with the video and the video\n   * is now playing\n   *\n   * @event playing_manual\n   */\n  PLAYING_MANUAL: 'playing_manual',\n\n  /**\n   * playing_auto\n   *\n   * When the video has autoplay and the user hasn't interacted with it yet\n   *\n   * @event playing_auto\n   */\n  PLAYING_AUTO: 'playing_auto',\n\n  /**\n   * paused\n   *\n   * When the video is paused.\n   *\n   * @event paused\n   */\n  PAUSED: 'paused',\n};\n\n\n/** @enum {string} */\nexport const VideoAnalyticsEvents = {\n  /**\n   * video-ended\n   *\n   * Indicates that a video ended.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-ended\n   */\n  ENDED: 'video-ended',\n\n  /**\n   * video-pause\n   *\n   * Indicates that a video paused.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-pause\n   */\n  PAUSE: 'video-pause',\n\n  /**\n   * video-play\n   *\n   * Indicates that a video began to play.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-play\n   */\n  PLAY: 'video-play',\n\n  /**\n   * video-session\n   *\n   * Indicates that some segment of the video played.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session\n   */\n  SESSION: 'video-session',\n\n  /**\n   * video-session-visible\n   *\n   * Indicates that some segment of the video played in the viewport.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session-visible\n   */\n  SESSION_VISIBLE: 'video-session-visible',\n\n  /**\n   * video-seconds-played\n   *\n   * Indicates that a video was playing when the\n   * video-seconds-played interval fired.\n   * @property {!VideoAnalyticsDetailsDef} details\n   * @event video-session-visible\n   */\n  SECONDS_PLAYED: 'video-seconds-played',\n};\n\n\n/**\n * @typedef {{\n *   autoplay: boolean,\n *   currentTime: number,\n *   duration: number,\n *   height: number,\n *   id: string,\n *   playedRangesJson: string,\n *   playedTotal: number,\n *   muted: boolean,\n *   state: string,\n *   width: number\n * }}\n */\nexport let VideoAnalyticsDetailsDef;\n\n\n/**\n * Helper union type to be used internally, so that the compiler treats\n * `VideoInterface` objects as `BaseElement`s, which they should be anyway.\n *\n * WARNING: Don't use this at the service level. Its `register` method should\n * only allow `VideoInterface` as a guarding measure.\n *\n * @typedef {!VideoInterface|!./base-element.BaseElement}\n */\nexport let VideoOrBaseElementDef;\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}