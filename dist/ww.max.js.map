{"version":3,"sources":["node_modules/browser-pack/_prelude.js","extensions/amp-bind/0.1/bind-evaluator.js","extensions/amp-bind/0.1/bind-expr-defines.js","extensions/amp-bind/0.1/bind-expr-impl.js","extensions/amp-bind/0.1/bind-expression.js","extensions/amp-bind/0.1/bind-macro.js","extensions/amp-bind/0.1/bind-validator.js","src/config.js","src/exponential-backoff.js","src/log.js","src/mode-object.js","src/mode.js","src/polyfills/array-includes.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/srcset.js","src/string.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/utils/array.js","src/utils/object.js","src/web-worker/web-worker-polyfills.js","src/web-worker/web-worker.js"],"names":[],"mappings":"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","file":"ww.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BindExpression} from './bind-expression';\nimport {BindMacro} from './bind-macro';\nimport {BindValidator} from './bind-validator';\nimport {filterSplice} from '../../../src/utils/array';\n\n/**\n * Asynchronously evaluates a set of Bind expressions.\n */\nexport class BindEvaluator {\n  /**\n   * Creates an instance of BindEvaluator.\n   */\n  constructor() {\n    /** @const @private {!Array<!BindBindingDef>} */\n    this.bindings_ = [];\n\n    /**\n     * Maps `id` to parsed BindMacro objects for all <amp-bind-macro> on page.\n     * @private @const {!Object<string, !./bind-macro.BindMacro>}\n     */\n    this.macros_ = Object.create(null);\n\n    /** @const @private {!./bind-validator.BindValidator} */\n    this.validator_ = new BindValidator();\n\n    /** @const @private {!Object<string, !BindExpression>} */\n    this.expressions_ = Object.create(null);\n  }\n\n  /**\n   * Parses and stores given bindings into expression objects and returns map\n   * of expression string to parse errors.\n   * @param {!Array<!BindBindingDef>} bindings\n   * @return {!Object<string, !BindEvaluatorErrorDef>},\n   */\n  addBindings(bindings) {\n    const errors = Object.create(null);\n    // Create BindExpression objects from expression strings.\n    bindings.forEach(binding => {\n      const parsed = this.parse_(binding.expressionString);\n      if (parsed.error) {\n        errors[binding.expressionString] = parsed.error;\n      } else {\n        this.bindings_.push(binding);\n      }\n    });\n    return errors;\n  }\n\n  /**\n   * Removes all parsed bindings for the provided expressions.\n   * @param {!Array<string>} expressionStrings\n   */\n  removeBindingsWithExpressionStrings(expressionStrings) {\n    const expressionsToRemove = Object.create(null);\n\n    expressionStrings.forEach(expressionString => {\n      delete this.expressions_[expressionString];\n      expressionsToRemove[expressionString] = true;\n    });\n\n    filterSplice(this.bindings_, binding =>\n      !expressionsToRemove[binding.expressionString]);\n  }\n\n  /**\n   * Parses and stores the given macros and returns map of macro `id` to\n   * parse errors.\n   * @param {!Array<!BindMacroDef>} macros\n   * @return {!Object<string, !BindEvaluatorErrorDef>}\n   */\n  addMacros(macros) {\n    const errors = [];\n    // Create BindMacro objects from BindMacroDef.\n    macros.forEach((macro, index) => {\n      // Only allow a macro to reference macros defined before it to prevent\n      // cycles and recursion.\n      // TODO(willchou): Would be better if cycle/recursion errors are thrown\n      // at creation instead of evaluation.\n      const referableMacros = Object.assign(Object.create(null), this.macros_);\n      try {\n        this.macros_[macro.id] = new BindMacro(macro, referableMacros);\n      } catch (e) {\n        errors[index] = {message: e.message, stack: e.stack};\n      }\n    });\n    return errors;\n  }\n\n  /**\n   * Evaluates all expressions with the given `scope` data returns two maps:\n   * expression strings to results and expression strings to errors.\n   * @param {!Object} scope\n   * @return {!BindEvaluateBindingsResultDef}\n   */\n  evaluateBindings(scope) {\n    /** @type {!Object<string, BindExpressionResultDef>} */\n    const cache = Object.create(null);\n    /** @type {!Object<string, !BindEvaluatorErrorDef>} */\n    const errors = Object.create(null);\n\n    // First, evaluate all of the expression strings in the bindings.\n    this.bindings_.forEach(binding => {\n      const {expressionString} = binding;\n      // Skip if we've already evaluated this expression string.\n      if (cache[expressionString] !== undefined || errors[expressionString]) {\n        return;\n      }\n      const expression = this.expressions_[expressionString];\n      if (!expression) {\n        const error =\n            new Error(`Expression \"${expressionString}\"\" is not cached.`);\n        errors[expressionString] = {message: error.message, stack: error.stack};\n        return;\n      }\n      const {result, error} = this.evaluate_(expression, scope);\n      if (error) {\n        errors[expressionString] = error;\n        return;\n      }\n      cache[expressionString] = result;\n    });\n\n    // Then, validate each binding and delete invalid expression results.\n    this.bindings_.forEach(binding => {\n      const {tagName, property, expressionString} = binding;\n      const result = cache[expressionString];\n      if (result === undefined) {\n        return;\n      }\n      // IMPORTANT: We need to validate expression results on each binding\n      // since validity depends on the `tagName` and `property` rather than\n      // just the `result`.\n      const resultString = this.stringValueOf_(property, result);\n      if (!this.validator_.isResultValid(tagName, property, resultString)) {\n        // TODO(choumx): If this expression string is used in another\n        // tagName/property which is valid, we ought to allow it.\n        delete cache[expressionString];\n        const error =\n            new Error(`\"${result}\" is not a valid result for [${property}].`);\n        errors[expressionString] = {message: error.message, stack: error.stack};\n      }\n    });\n\n    return {results: cache, errors};\n  }\n\n  /**\n   * Evaluates and returns a single expression string.\n   * @param {string} expressionString\n   * @param {!Object} scope\n   * @return {!BindEvaluateExpressionResultDef}\n   */\n  evaluateExpression(expressionString, scope) {\n    const parsed = this.parse_(expressionString);\n    if (!parsed.expression) {\n      return {result: null, error: parsed.error};\n    }\n    const evaluated = this.evaluate_(parsed.expression, scope);\n    if (!evaluated.result) {\n      return {result: null, error: evaluated.error};\n    }\n    return {result: evaluated.result, error: null};\n  }\n\n  /**\n   * Parses a single expression string, caches and returns it.\n   * @param {string} expressionString\n   * @return {{expression: ?BindExpression, error: ?BindEvaluatorErrorDef}}\n   * @private\n   */\n  parse_(expressionString) {\n    let expression = this.expressions_[expressionString];\n    let error = null;\n    if (!expression) {\n      try {\n        expression = new BindExpression(expressionString, this.macros_);\n        this.expressions_[expressionString] = expression;\n      } catch (e) {\n        error = {message: e.message, stack: e.stack};\n      }\n    }\n    return {expression, error};\n  }\n\n  /**\n   * Evaluate a single expression with the given scope.\n   * @param {!BindExpression} expression\n   * @param {!Object} scope\n   * @return {{result: ?BindExpressionResultDef, error: ?BindEvaluatorErrorDef}}\n   * @private\n   */\n  evaluate_(expression, scope) {\n    let result = null;\n    let error = null;\n    try {\n      result = expression.evaluate(scope);\n    } catch (e) {\n      error = {message: e.message, stack: e.stack};\n    }\n    return {result, error};\n  }\n\n  /**\n   * Return parsed bindings for testing.\n   * @return {!Array<!BindBindingDef>}\n   * @visibleForTesting\n   */\n  bindingsForTesting() {\n    return this.bindings_;\n  }\n\n  /**\n   * Returns the expression cache for testing.\n   * @return {!Object<string, !BindExpression>}\n   * @visibleForTesting\n   */\n  expressionsForTesting() {\n    return this.expressions_;\n  }\n\n  /**\n   * Returns the expression result string for a binding to `property`.\n   * @param {string} property\n   * @param {BindExpressionResultDef} result\n   * @return {?string}\n   * @private\n   */\n  stringValueOf_(property, result) {\n    if (result === null) {\n      return null;\n    }\n    switch (property) {\n      case 'text':\n        break;\n      case 'class':\n        if (Array.isArray(result)) {\n          return result.join(' ');\n        }\n        break;\n      default:\n        if (typeof result === 'boolean') {\n          return result ? '' : null;\n        }\n        break;\n    }\n    return String(result);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A single node in the AST of a `BindExpression`.\n * @struct\n */\nexport class AstNode {\n  /**\n   * @param {AstNodeType} type\n   * @param {?Array<AstNode>} args\n   * @param {(AstNodeValue|undefined)=} opt_value\n   */\n  constructor(type, args, opt_value) {\n    /** @const {AstNodeType} */\n    this.type = type;\n\n    /** @const {?Array<AstNode>} */\n    this.args = args;\n\n    /** @const {(AstNodeValue|undefined)} */\n    this.value = opt_value;\n  }\n}\n\n/**\n * Type of a node in the AST of a `BindExpression`.\n * @enum {number}\n */\nexport const AstNodeType = {\n  // Grammar rules.\n  EXPRESSION: 0,\n  INVOCATION: 1,\n  ARGS: 2,\n  MEMBER_ACCESS: 3,\n  MEMBER: 4,\n  VARIABLE: 5,\n  LITERAL: 6,\n  ARRAY_LITERAL: 7,\n  ARRAY: 8,\n  OBJECT_LITERAL: 9,\n  OBJECT: 10,\n  KEY_VALUE: 11,\n  // Instead of using having an OPERATION type with subtypes, flatten and use\n  // the operation types directly.\n  NOT: 12,\n  UNARY_MINUS: 13,\n  UNARY_PLUS: 14,\n  PLUS: 15,\n  MINUS: 16,\n  MULTIPLY: 17,\n  DIVIDE: 18,\n  MODULO: 19,\n  LOGICAL_AND: 20,\n  LOGICAL_OR: 21,\n  LESS_OR_EQUAL: 22,\n  LESS: 23,\n  GREATER_OR_EQUAL: 24,\n  GREATER: 25,\n  NOT_EQUAL: 26,\n  EQUAL: 27,\n  TERNARY: 28,\n  ARROW_FUNCTION: 29,\n};\n\n/**\n * Value of a primitive or variable node.\n * @typedef {(boolean|string|number|null)}\n */\nexport let AstNodeValue;\n\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** @fileoverview @suppress {checkTypes, suspiciousCode, uselessCode} */\n\nimport {AstNode, AstNodeType} from './bind-expr-defines';\n\n/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,23],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,26],$Vd=[1,25],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,41],$Vs=[5,10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,33,38,39,49],$Vt=[2,40],$Vu=[1,47],$Vv=[1,52],$Vw=[1,54],$Vx=[5,10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,39,49],$Vy=[1,75],$Vz=[33,49],$VA=[10,33,39],$VB=[5,10,14,15,19,20,21,22,23,24,25,26,27,28,33,39,49],$VC=[5,10,19,20,21,22,23,24,25,26,27,28,33,39,49],$VD=[5,10,19,20,25,26,27,28,33,39,49],$VE=[10,33];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"result\":3,\"expr\":4,\"EOF\":5,\"operation\":6,\"invocation\":7,\"member_access\":8,\"(\":9,\")\":10,\"variable\":11,\"literal\":12,\"!\":13,\"-\":14,\"+\":15,\"*\":16,\"/\":17,\"%\":18,\"&&\":19,\"||\":20,\"<=\":21,\"<\":22,\">=\":23,\">\":24,\"!=\":25,\"==\":26,\"?\":27,\":\":28,\"NAME\":29,\"args\":30,\".\":31,\"arrow_function\":32,\",\":33,\"=>\":34,\"params\":35,\"array\":36,\"member\":37,\"[\":38,\"]\":39,\"primitive\":40,\"object_literal\":41,\"array_literal\":42,\"STRING\":43,\"NUMBER\":44,\"TRUE\":45,\"FALSE\":46,\"NULL\":47,\"{\":48,\"}\":49,\"object\":50,\"key_value\":51,\"key\":52,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",9:\"(\",10:\")\",13:\"!\",14:\"-\",15:\"+\",16:\"*\",17:\"/\",18:\"%\",19:\"&&\",20:\"||\",21:\"<=\",22:\"<\",23:\">=\",24:\">\",25:\"!=\",26:\"==\",27:\"?\",28:\":\",29:\"NAME\",31:\".\",33:\",\",34:\"=>\",38:\"[\",39:\"]\",43:\"STRING\",44:\"NUMBER\",45:\"TRUE\",46:\"FALSE\",47:\"NULL\",48:\"{\",49:\"}\"},\nproductions_: [0,[3,2],[3,1],[4,1],[4,1],[4,1],[4,3],[4,1],[4,1],[6,2],[6,2],[6,2],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,5],[7,2],[7,4],[7,6],[7,8],[32,4],[32,3],[32,5],[35,3],[35,3],[30,2],[30,3],[8,2],[37,2],[37,3],[11,1],[12,1],[12,1],[12,1],[40,1],[40,1],[40,1],[40,1],[40,1],[42,2],[42,3],[42,4],[36,1],[36,3],[41,2],[41,3],[41,4],[50,1],[50,3],[51,3],[52,1],[52,1],[52,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn $$[$0-1];\nbreak;\ncase 2:\nreturn '';\nbreak;\ncase 3: case 4: case 5: case 7: case 8:\nthis.$ = $$[$0];\nbreak;\ncase 6:\nthis.$ = $$[$0-1];\nbreak;\ncase 9:\n\n        this.$ = new AstNode(AstNodeType.NOT, [$$[$0]]);\n      \nbreak;\ncase 10:\n\n        this.$ = new AstNode(AstNodeType.UNARY_MINUS, [$$[$0]]);\n      \nbreak;\ncase 11:\n\n        this.$ = new AstNode(AstNodeType.UNARY_PLUS, [$$[$0]]);\n      \nbreak;\ncase 12:\n\n        this.$ = new AstNode(AstNodeType.PLUS, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 13:\n\n        this.$ = new AstNode(AstNodeType.MINUS, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 14:\n\n        this.$ = new AstNode(AstNodeType.MULTIPLY, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 15:\n\n        this.$ = new AstNode(AstNodeType.DIVIDE, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 16:\n\n        this.$ = new AstNode(AstNodeType.MODULO, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 17:\n\n        this.$ = new AstNode(AstNodeType.LOGICAL_AND, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 18:\n\n        this.$ = new AstNode(AstNodeType.LOGICAL_OR, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 19:\n\n        this.$ = new AstNode(AstNodeType.LESS_OR_EQUAL, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 20:\n\n        this.$ = new AstNode(AstNodeType.LESS, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 21:\n\n        this.$ = new AstNode(AstNodeType.GREATER_OR_EQUAL, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 22:\n\n        this.$ = new AstNode(AstNodeType.GREATER, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 23:\n\n        this.$ = new AstNode(AstNodeType.NOT_EQUAL, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 24:\n\n        this.$ = new AstNode(AstNodeType.EQUAL, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 25:\n\n        this.$ = new AstNode(AstNodeType.TERNARY, [$$[$0-4], $$[$0-2], $$[$0]]);\n      \nbreak;\ncase 26:\n\n        this.$ = new AstNode(AstNodeType.INVOCATION, [undefined, $$[$0]], $$[$0-1]);\n      \nbreak;\ncase 27:\n\n        this.$ = new AstNode(AstNodeType.INVOCATION, [$$[$0-3], $$[$0]], $$[$0-1]);\n      \nbreak;\ncase 28:\n\n        {\n          const array = new AstNode(AstNodeType.ARRAY, [$$[$0-1]]);\n          this.$ = new AstNode(AstNodeType.INVOCATION, [$$[$0-5], array], $$[$0-3]);\n        }\n      \nbreak;\ncase 29:\n\n        {\n          const array = new AstNode(AstNodeType.ARRAY, [$$[$0-3], $$[$0-1]]);\n          this.$ = new AstNode(AstNodeType.INVOCATION, [$$[$0-7], array], $$[$0-5]);\n        }\n      \nbreak;\ncase 30:\n\n        this.$ = new AstNode(AstNodeType.ARROW_FUNCTION, [undefined, $$[$0]]);\n      \nbreak;\ncase 31:\n\n        const param = new AstNode(AstNodeType.LITERAL, null, [$$[$0-2]]);\n        this.$ = new AstNode(AstNodeType.ARROW_FUNCTION, [param, $$[$0]]);\n      \nbreak;\ncase 32:\n\n        this.$ = new AstNode(AstNodeType.ARROW_FUNCTION, [$$[$0-3], $$[$0]]);\n      \nbreak;\ncase 33:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 34:\n\n        this.$ = $$[$0-2];\n        this.$.value.push($$[$0]);\n      \nbreak;\ncase 35:\n\n        this.$ = new AstNode(AstNodeType.ARGS, []);\n      \nbreak;\ncase 36:\n\n        this.$ = new AstNode(AstNodeType.ARGS, [$$[$0-1]]);\n      \nbreak;\ncase 37:\n\n        this.$ = new AstNode(AstNodeType.MEMBER_ACCESS, [$$[$0-1], $$[$0]]);\n      \nbreak;\ncase 38:\n\n        this.$ = new AstNode(AstNodeType.MEMBER, null, $$[$0]);\n      \nbreak;\ncase 39:\n\n        this.$ = new AstNode(AstNodeType.MEMBER, [$$[$0-1]]);\n      \nbreak;\ncase 40:\n\n        this.$ = new AstNode(AstNodeType.VARIABLE, null, $$[$0]);\n      \nbreak;\ncase 41: case 42: case 43: case 61:\n\n        this.$ = $$[$0];\n      \nbreak;\ncase 44:\n\n        const string = yytext.substr(1, yyleng - 2);\n        this.$ = new AstNode(AstNodeType.LITERAL, null, string);\n      \nbreak;\ncase 45:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, Number(yytext));\n      \nbreak;\ncase 46:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, true);\n      \nbreak;\ncase 47:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, false);\n      \nbreak;\ncase 48:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, null);\n      \nbreak;\ncase 49:\n\n        this.$ = new AstNode(AstNodeType.ARRAY_LITERAL, []);\n      \nbreak;\ncase 50:\n\n        this.$ = new AstNode(AstNodeType.ARRAY_LITERAL, [$$[$0-1]]);\n      \nbreak;\ncase 51:\n\n        this.$ = new AstNode(AstNodeType.ARRAY_LITERAL, [$$[$0-2]]);\n      \nbreak;\ncase 52:\n\n        this.$ = new AstNode(AstNodeType.ARRAY, [$$[$0]]);\n      \nbreak;\ncase 53: case 58:\n\n        this.$ = $$[$0-2];\n        this.$.args.push($$[$0]);\n      \nbreak;\ncase 54:\n\n        this.$ = new AstNode(AstNodeType.OBJECT_LITERAL, []);\n      \nbreak;\ncase 55:\n\n        this.$ = new AstNode(AstNodeType.OBJECT_LITERAL, [$$[$0-1]]);\n      \nbreak;\ncase 56:\n\n        this.$ = new AstNode(AstNodeType.OBJECT_LITERAL, [$$[$0-2]]);\n      \nbreak;\ncase 57:\n\n        this.$ = new AstNode(AstNodeType.OBJECT, [$$[$0]]);\n      \nbreak;\ncase 59:\n\n        this.$ = new AstNode(AstNodeType.KEY_VALUE, [$$[$0-2], $$[$0]]);\n      \nbreak;\ncase 60:\n\n        this.$ = new AstNode(AstNodeType.LITERAL, null, $$[$0]);\n      \nbreak;\ncase 62:\n\n        this.$ = $$[$0-1];\n      \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{1:[3]},{5:[1,24],14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,37:40,38:$Vr},{1:[2,2]},o($Vs,[2,3]),o($Vs,[2,4]),o($Vs,[2,5]),{4:42,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,7]),o($Vs,[2,8]),{4:43,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:44,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:45,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,$Vt,{30:46,9:$Vu}),o($Vs,[2,41]),o($Vs,[2,42]),o($Vs,[2,43]),o($Vs,[2,44]),o($Vs,[2,45]),o($Vs,[2,46]),o($Vs,[2,47]),o($Vs,[2,48]),{29:$Vv,38:$Vw,40:53,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,49:[1,48],50:49,51:50,52:51},{4:57,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,36:56,38:$V5,39:[1,55],40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{1:[2,1]},{4:58,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:59,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:60,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:61,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:62,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:63,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:64,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:65,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:66,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:67,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:68,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:69,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:70,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:71,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{29:[1,72]},o($Vs,[2,37]),{4:73,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{10:[1,74],14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,37:40,38:$Vr},o($Vx,[2,9],{37:40,31:$Vq,38:$Vr}),o($Vx,[2,10],{37:40,31:$Vq,38:$Vr}),o($Vx,[2,11],{37:40,31:$Vq,38:$Vr}),o($Vs,[2,26]),{4:57,6:4,7:5,8:6,9:$V0,10:$Vy,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,36:76,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,54]),{33:[1,78],49:[1,77]},o($Vz,[2,57]),{28:[1,79]},{28:[2,60]},{28:[2,61]},{4:80,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,49]),{33:[1,82],39:[1,81]},o($VA,[2,52],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),o($VB,[2,12],{37:40,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($VB,[2,13],{37:40,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($Vx,[2,14],{37:40,31:$Vq,38:$Vr}),o($Vx,[2,15],{37:40,31:$Vq,38:$Vr}),o($Vx,[2,16],{37:40,31:$Vq,38:$Vr}),o([5,10,19,20,27,28,33,39,49],[2,17],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,31:$Vq,38:$Vr}),o([5,10,20,27,28,33,39,49],[2,18],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,31:$Vq,38:$Vr}),o($VC,[2,19],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($VC,[2,20],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($VC,[2,21],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($VC,[2,22],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,31:$Vq,38:$Vr}),o($VD,[2,23],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,21:$Vj,22:$Vk,23:$Vl,24:$Vm,31:$Vq,38:$Vr}),o($VD,[2,24],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,21:$Vj,22:$Vk,23:$Vl,24:$Vm,31:$Vq,38:$Vr}),{14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,28:[1,83],31:$Vq,37:40,38:$Vr},o($Vs,[2,38],{30:84,9:[1,85]}),{14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,37:40,38:$Vr,39:[1,86]},o($Vs,[2,6]),o($Vs,[2,35]),{10:[1,87],33:[1,88]},o($Vs,[2,55]),{29:$Vv,38:$Vw,40:53,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,49:[1,89],51:90,52:51},{4:91,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,37:40,38:$Vr,39:[1,92]},o($Vs,[2,50]),{4:94,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,39:[1,93],40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{4:95,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,27]),{4:57,6:4,7:5,8:6,9:[1,97],10:$Vy,11:8,12:9,13:$V1,14:$V2,15:$V3,29:[1,98],32:96,36:76,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,39]),o($Vs,[2,36]),{4:94,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($Vs,[2,56]),o($Vz,[2,58]),o($Vz,[2,59],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),{28:[2,62]},o($Vs,[2,51]),o($VA,[2,53],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),o([5,10,28,33,39,49],[2,25],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),{10:[1,99],33:[1,100]},{4:42,6:4,7:5,8:6,9:$V0,10:[1,101],11:8,12:9,13:$V1,14:$V2,15:$V3,29:[1,103],35:102,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o([10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,33,38],$Vt,{30:46,9:$Vu,34:[1,104]}),o($Vs,[2,28]),{4:105,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{34:[1,106]},{10:[1,107],33:[1,108]},o([10,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,38],$Vt,{30:46,9:$Vu,33:[1,109]}),{4:110,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{10:[1,111],14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,37:40,38:$Vr},{4:112,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},{34:[1,113]},{29:[1,114]},{29:[1,115]},o($VE,[2,31],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),o($Vs,[2,29]),o($VE,[2,30],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr}),{4:116,6:4,7:5,8:6,9:$V0,11:8,12:9,13:$V1,14:$V2,15:$V3,29:$V4,38:$V5,40:14,41:15,42:16,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb},o($VE,[2,34]),o($VE,[2,33]),o($VE,[2,32],{37:40,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,20:$Vi,21:$Vj,22:$Vk,23:$Vl,24:$Vm,25:$Vn,26:$Vo,27:$Vp,31:$Vq,38:$Vr})],\ndefaultActions: {3:[2,2],24:[2,1],52:[2,60],53:[2,61],92:[2,62]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 47\nbreak;\ncase 2:return 45\nbreak;\ncase 3:return 46\nbreak;\ncase 4:return 44\nbreak;\ncase 5:return 29\nbreak;\ncase 6:return 43\nbreak;\ncase 7:return 43\nbreak;\ncase 8:return 34\nbreak;\ncase 9:return 15\nbreak;\ncase 10:return 14\nbreak;\ncase 11:return 16\nbreak;\ncase 12:return 17\nbreak;\ncase 13:return 19\nbreak;\ncase 14:return 20\nbreak;\ncase 15:return 25\nbreak;\ncase 16:return 26\nbreak;\ncase 17:return 21\nbreak;\ncase 18:return 22\nbreak;\ncase 19:return 23\nbreak;\ncase 20:return 24\nbreak;\ncase 21:return 13\nbreak;\ncase 22:return 27\nbreak;\ncase 23:return 28\nbreak;\ncase 24:return 18\nbreak;\ncase 25:return 38\nbreak;\ncase 26:return 39\nbreak;\ncase 27:return 48\nbreak;\ncase 28:return 49\nbreak;\ncase 29:return 9\nbreak;\ncase 30:return 10\nbreak;\ncase 31:return 33\nbreak;\ncase 32:return 31\nbreak;\ncase 33:return 'INVALID'\nbreak;\ncase 34:return 5\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:null\\b)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:[0-9]+(\\.[0-9]+)?\\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:'[^\\']*')/,/^(?:\"[^\\\"]*\")/,/^(?:=>)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:&&)/,/^(?:\\|\\|)/,/^(?:!=)/,/^(?:==)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!)/,/^(?:\\?)/,/^(?::)/,/^(?:%)/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:,)/,/^(?:\\.)/,/^(?:.)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nexport const bindParser = parser;\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AstNodeType} from './bind-expr-defines';\nimport {dev, user} from '../../../src/log';\nimport {dict, hasOwn, map} from '../../../src/utils/object';\nimport {getMode} from '../../../src/mode';\nimport {isArray, isObject} from '../../../src/types';\nimport {bindParser as parser} from './bind-expr-impl';\n\nconst TAG = 'amp-bind';\n\n/**\n * Maximum number of nodes in an expression AST.\n * @const @private {number}\n */\nconst MAX_AST_SIZE = 100;\n\n/** @const @private {string} */\nconst BUILT_IN_FUNCTIONS = 'built-in-functions';\n\n/**\n * Map of object type to function name to whitelisted function.\n * @private {!Object<string, !Object<string, Function>>}\n */\nlet FUNCTION_WHITELIST;\n\n/**\n * @return {!Object<string, !Object<string, Function>>}\n * @private\n */\nfunction generateFunctionWhitelist() {\n  /**\n   * Static, not-in-place variant of Array#splice.\n   * @param {!Array} array\n   * @param {number=} start\n   * @param {number=} deleteCount\n   * @param {...?} items\n   * @return {!Array}\n   */\n  function splice(array, start, deleteCount, items) { // eslint-disable-line no-unused-vars\n    if (!isArray(array)) {\n      throw new Error(`splice: ${array} is not an array.`);\n    }\n    const copy = Array.prototype.slice.call(array);\n    const args = Array.prototype.slice.call(arguments, 1);\n    Array.prototype.splice.apply(copy, args);\n    return copy;\n  }\n\n  /**\n   * Static, not-in-place variant of Array#sort.\n   * @param {!Array} array\n   * @return {!Array}\n   */\n  function sort(array) {\n    if (!isArray(array)) {\n      throw new Error(`sort: ${array} is not an array.`);\n    }\n    const copy = Array.prototype.slice.call(array);\n    Array.prototype.sort.call(copy);\n    return copy;\n  }\n\n  /**\n   * Polyfills Object.values for IE.\n   * @param {!Object} object\n   * @return {!Array}\n   * @see https://github.com/es-shims/Object.values\n   */\n  function values(object) {\n    const v = [];\n    for (const key in object) {\n      if (hasOwn(object, key)) {\n        v.push(object[key]);\n      }\n    }\n    return v;\n  }\n\n  // Prototype functions.\n  const whitelist = dict({\n    '[object Array]': {\n      // TODO(choumx): Need polyfill for Array#find and Array#findIndex.\n      'concat': Array.prototype.concat,\n      'filter': Array.prototype.filter,\n      'indexOf': Array.prototype.indexOf,\n      'join': Array.prototype.join,\n      'lastIndexOf': Array.prototype.lastIndexOf,\n      'map': Array.prototype.map,\n      'reduce': Array.prototype.reduce,\n      'slice': Array.prototype.slice,\n      'some': Array.prototype.some,\n      'includes': Array.prototype.includes,\n    },\n    '[object Number]': {\n      'toExponential': Number.prototype.toExponential,\n      'toFixed': Number.prototype.toFixed,\n      'toPrecision': Number.prototype.toPrecision,\n      'toString': Number.prototype.toString,\n    },\n    '[object String]': {\n      'charAt': String.prototype.charAt,\n      'charCodeAt': String.prototype.charCodeAt,\n      'concat': String.prototype.concat,\n      'indexOf': String.prototype.indexOf,\n      'lastIndexOf': String.prototype.lastIndexOf,\n      'slice': String.prototype.slice,\n      'split': String.prototype.split,\n      'substr': String.prototype.substr,\n      'substring': String.prototype.substring,\n      'toLowerCase': String.prototype.toLowerCase,\n      'toUpperCase': String.prototype.toUpperCase,\n    },\n  });\n\n  // Un-namespaced static functions.\n  whitelist[BUILT_IN_FUNCTIONS] = {\n    'encodeURI': encodeURI,\n    'encodeURIComponent': encodeURIComponent,\n    'abs': Math.abs,\n    'ceil': Math.ceil,\n    'floor': Math.floor,\n    'max': Math.max,\n    'min': Math.min,\n    'random': Math.random,\n    'round': Math.round,\n    'sign': Math.sign,\n    'keys': Object.keys, // Object.values is polyfilled below.\n  };\n\n  // Creates a map of function name to the function itself.\n  // This makes function lookups faster (compared to Array.indexOf).\n  const out = map();\n  Object.keys(whitelist).forEach(type => {\n    out[type] = map();\n\n    const functionsForType = whitelist[type];\n    Object.keys(functionsForType).forEach(name => {\n      const func = functionsForType[name];\n      if (func) {\n        dev().assert(!func.name || name === func.name, 'Listed function name ' +\n            `\"${name}\" doesn't match name property \"${func.name}\".`);\n\n        out[type][name] = func;\n      } else {\n        // This can happen if a browser doesn't support a built-in function.\n        throw new Error(`Unsupported function: ${type}.${name}`);\n      }\n    });\n  });\n\n  // Custom functions (non-js-built-ins) must be added manually as their names\n  // will be minified at compile time.\n  out[BUILT_IN_FUNCTIONS]['copyAndSplice'] = splice; // Legacy name.\n  out[BUILT_IN_FUNCTIONS]['sort'] = sort;\n  out[BUILT_IN_FUNCTIONS]['splice'] = splice;\n  out[BUILT_IN_FUNCTIONS]['values'] =\n      (typeof Object.values == 'function') ? Object.values : values;\n\n  return out;\n}\n\n/**\n * A single Bind expression.\n */\nexport class BindExpression {\n  /**\n   * @param {string} expressionString\n   * @param {!Object<string, !./bind-macro.BindMacro>} macros\n   * @param {number=} opt_maxAstSize\n   * @throws {Error} On malformed expressions.\n   */\n  constructor(expressionString, macros, opt_maxAstSize) {\n    if (!FUNCTION_WHITELIST) {\n      FUNCTION_WHITELIST = generateFunctionWhitelist();\n    }\n\n    /** @const {string} */\n    this.expressionString = expressionString;\n\n    /** @private @const {!Object<string, !./bind-macro.BindMacro>} */\n    this.macros_ = macros;\n\n    /** @const @private {!./bind-expr-defines.AstNode} */\n    this.ast_ = parser.parse(this.expressionString);\n\n    /** @const {number} */\n    this.expressionSize = this.numberOfNodesInAst_(this.ast_);\n\n    // Check if this expression string is too large (for performance).\n    const maxSize = opt_maxAstSize || MAX_AST_SIZE;\n    const skipConstraint = getMode().localDev && !getMode().test;\n    if (this.expressionSize > maxSize && !skipConstraint) {\n      throw new Error(`Expression size (${this.expressionSize}) exceeds max ` +\n          `(${maxSize}). Please reduce number of operands.`);\n    }\n  }\n\n  /**\n   * Evaluates the expression given a scope.\n   * @param {!Object} scope\n   * @throws {Error} On illegal function invocation.\n   * @return {BindExpressionResultDef}\n   */\n  evaluate(scope) {\n    return this.eval_(this.ast_, scope);\n  }\n\n  /**\n   * @param {!./bind-expr-defines.AstNode} ast\n   * @return {number}\n   * @private\n   */\n  numberOfNodesInAst_(ast) {\n    // Include the node count of any nested macros in the expression.\n    if (this.isMacroInvocationNode_(ast)) {\n      const macro = this.macros_[String(ast.value)];\n      let nodes = macro.getExpressionSize();\n      this.getInvocationArgNodes_(ast).forEach(arg => {\n        if (arg) {\n          nodes += this.numberOfNodesInAst_(arg) - 1;\n        }\n      });\n      return nodes;\n    } else {\n      let nodes = 1;\n      if (ast.args) {\n        ast.args.forEach(arg => {\n          if (arg) {\n            nodes += this.numberOfNodesInAst_(arg);\n          }\n        });\n      }\n      return nodes;\n    }\n  }\n\n  /**\n   * @param {!./bind-expr-defines.AstNode} ast\n   * @return {boolean}\n   * @private\n   */\n  isMacroInvocationNode_(ast) {\n    const isInvocationWithNoCaller =\n        (ast.type === AstNodeType.INVOCATION && !ast.args[0]);\n    if (isInvocationWithNoCaller) {\n      const macroExistsWithValue = this.macros_[String(ast.value)] != null;\n      return macroExistsWithValue;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the array of nodes for the arguments of the provided INVOCATION\n   * node, without the wrapping ARGS node and ARRAY node.\n   * @param {!./bind-expr-defines.AstNode} ast\n   * @return {!Array<./bind-expr-defines.AstNode>}\n   * @private\n   */\n  getInvocationArgNodes_(ast) {\n    if (ast.args.length === 2 && ast.args[1].type === AstNodeType.ARGS) {\n      const argsNode = ast.args[1];\n      if (argsNode.args.length === 0) {\n        return [];\n      } else if (argsNode.args.length === 1 &&\n          argsNode.args[0].type === AstNodeType.ARRAY) {\n        const arrayNode = argsNode.args[0];\n        return arrayNode.args || [];\n      }\n    }\n    return ast.args || [];\n  }\n\n  /**\n   * Recursively evaluates and returns value of `node` and its children.\n   * @param {./bind-expr-defines.AstNode} node\n   * @param {!Object} scope\n   * @throws {Error}\n   * @return {BindExpressionResultDef}\n   * @private\n   */\n  eval_(node, scope) {\n    if (!node) {\n      return null;\n    }\n\n    const {type, args, value} = node;\n\n    // `value` should always exist for literals.\n    if (type === AstNodeType.LITERAL && value !== undefined) {\n      return value;\n    }\n\n    switch (type) {\n      case AstNodeType.EXPRESSION:\n        return this.eval_(args[0], scope);\n\n      case AstNodeType.INVOCATION:\n        // Built-in functions and macros don't have a caller object.\n        const isBuiltInOrMacro = (args[0] === undefined);\n\n        const caller = this.eval_(args[0], scope);\n        const params = this.eval_(args[1], scope);\n        const method = String(value);\n\n        let validFunction;\n        let unsupportedError;\n\n        if (isBuiltInOrMacro) {\n          const macro = this.macros_[method];\n          if (macro) {\n            validFunction = function() {\n              return macro.evaluate(\n                  scope, Array.prototype.slice.call(arguments));\n            };\n          } else {\n            validFunction = FUNCTION_WHITELIST[BUILT_IN_FUNCTIONS][method];\n          }\n          if (!validFunction) {\n            unsupportedError = `${method} is not a supported function.`;\n          }\n        } else {\n          if (caller === null) {\n            user().warn(TAG, `Cannot invoke method ${method} on null; ` +\n                'returning null.');\n            return null;\n          }\n          const callerType = Object.prototype.toString.call(caller);\n          const whitelist = FUNCTION_WHITELIST[callerType];\n          if (whitelist) {\n            const f = caller[method];\n            if (f && f === whitelist[method]) {\n              validFunction = f;\n            }\n          }\n          if (!validFunction) {\n            unsupportedError =\n                `${callerType}.${method} is not a supported function.`;\n          }\n        }\n\n        if (validFunction) {\n          if (Array.isArray(params)) {\n            if (this.containsInvalidArgument_(method, params)) {\n              throw new Error(`Unexpected argument type in ${method}().`);\n            }\n            return validFunction.apply(caller, params);\n          }\n        }\n\n        throw new Error(unsupportedError);\n\n      case AstNodeType.MEMBER_ACCESS:\n        const target = this.eval_(args[0], scope);\n        const member = this.eval_(args[1], scope);\n\n        if (target === null || member === null) {\n          return null;\n        }\n        const targetType = typeof target;\n        if (targetType !== 'string' && targetType !== 'object') {\n          return null;\n        }\n        const memberType = typeof member;\n        if (memberType !== 'string' && memberType !== 'number') {\n          return null;\n        }\n        // Ignore Closure's type constraint for `hasOwnProperty`.\n        if (Object.prototype.hasOwnProperty.call(\n            /** @type {Object} */ (target), member)) {\n          return target[member];\n        }\n        return null;\n\n      case AstNodeType.MEMBER:\n        return value || this.eval_(args[0], scope);\n\n      case AstNodeType.VARIABLE:\n        const variable = value;\n        if (Object.prototype.hasOwnProperty.call(scope, variable)) {\n          return scope[variable];\n        }\n        return null;\n\n      case AstNodeType.ARGS:\n      case AstNodeType.ARRAY_LITERAL:\n        return (args.length > 0) ? this.eval_(args[0], scope) : [];\n\n      case AstNodeType.ARRAY:\n        return args.map(element => this.eval_(element, scope));\n\n      case AstNodeType.OBJECT_LITERAL:\n        return (args.length > 0)\n          ? this.eval_(args[0], scope)\n          : map();\n\n      case AstNodeType.OBJECT:\n        const object = map();\n        args.forEach(keyValue => {\n          const {k, v} = this.eval_(keyValue, scope);\n          object[k] = v;\n        });\n        return object;\n\n      case AstNodeType.KEY_VALUE:\n        return {\n          k: this.eval_(args[0], scope),\n          v: this.eval_(args[1], scope),\n        };\n\n      case AstNodeType.NOT:\n        return !this.eval_(args[0], scope);\n\n      case AstNodeType.UNARY_MINUS:\n        return -Number(this.eval_(args[0], scope));\n\n      case AstNodeType.UNARY_PLUS:\n        return +Number(this.eval_(args[0], scope));\n\n      case AstNodeType.PLUS:\n        return this.eval_(args[0], scope) + this.eval_(args[1], scope);\n\n      case AstNodeType.MINUS:\n        return Number(this.eval_(args[0], scope)) -\n            Number(this.eval_(args[1], scope));\n\n      case AstNodeType.MULTIPLY:\n        return Number(this.eval_(args[0], scope)) *\n            Number(this.eval_(args[1], scope));\n\n      case AstNodeType.DIVIDE:\n        return Number(this.eval_(args[0], scope)) /\n            Number(this.eval_(args[1], scope));\n\n      case AstNodeType.MODULO:\n        return Number(this.eval_(args[0], scope)) %\n            Number(this.eval_(args[1], scope));\n\n      case AstNodeType.LOGICAL_AND:\n        return this.eval_(args[0], scope) && this.eval_(args[1], scope);\n\n      case AstNodeType.LOGICAL_OR:\n        return this.eval_(args[0], scope) || this.eval_(args[1], scope);\n\n      case AstNodeType.LESS_OR_EQUAL:\n        return this.eval_(args[0], scope) <= this.eval_(args[1], scope);\n\n      case AstNodeType.LESS:\n        return this.eval_(args[0], scope) < this.eval_(args[1], scope);\n\n      case AstNodeType.GREATER_OR_EQUAL:\n        return this.eval_(args[0], scope) >= this.eval_(args[1], scope);\n\n      case AstNodeType.GREATER:\n        return this.eval_(args[0], scope) > this.eval_(args[1], scope);\n\n      case AstNodeType.NOT_EQUAL:\n        return this.eval_(args[0], scope) != this.eval_(args[1], scope);\n\n      case AstNodeType.EQUAL:\n        return this.eval_(args[0], scope) == this.eval_(args[1], scope);\n\n      case AstNodeType.TERNARY:\n        return this.eval_(args[0], scope)\n          ? this.eval_(args[1], scope)\n          : this.eval_(args[2], scope);\n\n      case AstNodeType.ARROW_FUNCTION:\n        const functionScope = map(scope);\n        return (...values) => {\n          // Support parameters in arrow functions by forwarding their values\n          // into the function's scope. For example, in this function call:\n          //\n          //     const f = (x, y) => x + y;\n          //     f(2, 7);\n          //\n          // `names` == ['x', 'y'] and `values` == [2, 7], so we include\n          // {x: 2, y: 7} in the scope when evaluating `x + y`.\n\n          const names = this.eval_(args[0], scope);\n          if (names) {\n            names.forEach((name, i) => {\n              functionScope[name] = values[i];\n            });\n          }\n          return this.eval_(args[1], functionScope);\n        };\n\n      default:\n        throw new Error(`Unexpected AstNodeType: ${type}.`);\n    }\n  }\n\n  /**\n   * @param {string} method\n   * @param {!Array} params\n   * @return {boolean}\n   */\n  containsInvalidArgument_(method, params) {\n    // Don't allow objects as parameters except for certain functions.\n    if (method == 'keys' || method == 'values' || method == 'splice') {\n      return false;\n    }\n    return this.containsObject_(params);\n  }\n\n  /**\n   * Returns true if input array contains a plain object.\n   * @param {!Array} array\n   * @return {boolean}\n   * @private\n   */\n  containsObject_(array) {\n    for (let i = 0; i < array.length; i++) {\n      if (isObject(array[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BindExpression} from './bind-expression';\n\n/**\n * A single parsed Bind macro.\n */\nexport class BindMacro {\n  /**\n   * @param {!BindMacroDef} data\n   * @param {!Object<string, !BindMacro>} referableMacros\n   */\n  constructor(data, referableMacros) {\n    /** @const @private {!Array<string>} */\n    this.argumentNames_ = data.argumentNames || [];\n\n    /** @const @private {!BindExpression} */\n    this.expression_ =\n        new BindExpression(data.expressionString, referableMacros);\n  }\n\n  /**\n   * @param {!Object} state\n   * @param {!Array} args\n   * @throws {Error} On illegal function invocation.\n   * @return {BindExpressionResultDef}\n   */\n  evaluate(state, args) {\n    const scope = Object.assign({}, state);\n    for (let i = 0; i < this.argumentNames_.length; i++) {\n      scope[this.argumentNames_[i]] = args[i];\n    }\n    return this.expression_.evaluate(scope);\n  }\n\n  /**\n   * @return {number}\n   */\n  getExpressionSize() {\n    return this.expression_.expressionSize;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {hasOwn, ownProperty} from '../../../src/utils/object';\nimport {parseSrcset} from '../../../src/srcset';\nimport {startsWith} from '../../../src/string';\nimport {user} from '../../../src/log';\n\nconst TAG = 'amp-bind';\n\n/**\n * @typedef {{\n *   allowedProtocols: (!Object<string,boolean>|undefined),\n *   alternativeName: (string|undefined),\n * }}\n */\nlet PropertyRulesDef;\n\n/**\n * Property rules that apply to any and all tags.\n * @private {Object<string, ?PropertyRulesDef>}\n */\nconst GLOBAL_PROPERTY_RULES = {\n  'class': {\n    blacklistedValueRegex: '(^|\\\\W)i-amphtml-',\n  },\n  'hidden': null,\n  'text': null,\n};\n\n/**\n * Property rules that apply to all AMP elements.\n * @private {Object<string, ?PropertyRulesDef>}\n */\nconst AMP_PROPERTY_RULES = {\n  'width': null,\n  'height': null,\n};\n\n/**\n * Maps tag names to property names to PropertyRulesDef.\n * If `ELEMENT_RULES[tag][property]` is null, then all values are valid\n * for that property in that tag.\n * @private {Object<string, Object<string, ?PropertyRulesDef>>}}\n */\nconst ELEMENT_RULES = createElementRules_();\n\n/**\n * Map whose keys comprise all properties that contain URLs.\n * @private {Object<string, boolean>}\n */\nconst URL_PROPERTIES = {\n  'src': true,\n  'srcset': true,\n  'href': true,\n  'xlink:href': true,\n};\n\n/**\n * BindValidator performs runtime validation of Bind expression results.\n *\n * For performance reasons, the validation rules enforced are a subset\n * of the AMP validator's, selected with a focus on security and UX.\n */\nexport class BindValidator {\n  /**\n   * Returns true if (tag, property) binding is allowed.\n   * Otherwise, returns false.\n   * NOTE: `tag` and `property` are case-sensitive.\n   * @param {string} tag\n   * @param {string} property\n   * @return {boolean}\n   */\n  canBind(tag, property) {\n    return (this.rulesForTagAndProperty_(tag, property) !== undefined);\n  }\n\n  /**\n   * Returns true if `value` is a valid result for a (tag, property) binding.\n   * Otherwise, returns false.\n   * @param {string} tag\n   * @param {string} property\n   * @param {?string} value\n   * @return {boolean}\n   */\n  isResultValid(tag, property, value) {\n    let rules = this.rulesForTagAndProperty_(tag, property);\n\n    // `alternativeName` is a reference to another property's rules.\n    if (rules && rules.alternativeName) {\n      rules = this.rulesForTagAndProperty_(tag, rules.alternativeName);\n    }\n\n    // If binding to (tag, property) is not allowed, return false.\n    if (rules === undefined) {\n      return false;\n    }\n\n    // If binding is allowed but have no specific rules, return true.\n    if (rules === null) {\n      return true;\n    }\n\n    // Validate URL(s) if applicable.\n    if (value && ownProperty(URL_PROPERTIES, property)) {\n      let urls;\n      if (property === 'srcset') {\n        let srcset;\n        try {\n          srcset = parseSrcset(value);\n        } catch (e) {\n          user().error(TAG, 'Failed to parse srcset: ', e);\n          return false;\n        }\n        urls = srcset.getUrls();\n      } else {\n        urls = [value];\n      }\n\n      for (let i = 0; i < urls.length; i++) {\n        if (!this.isUrlValid_(urls[i], rules)) {\n          return false;\n        }\n      }\n    }\n\n    // @see validator/engine/validator.ParsedTagSpec.validateAttributes()\n    const {blacklistedValueRegex} = rules;\n    if (value && blacklistedValueRegex) {\n      const re = new RegExp(blacklistedValueRegex, 'i');\n      if (re.test(value)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns true if a url's value is valid within a property rules spec.\n   * @param {string} url\n   * @param {!PropertyRulesDef} rules\n   * @return {boolean}\n   * @private\n   */\n  isUrlValid_(url, rules) {\n    // @see validator/engine/validator.ParsedUrlSpec.validateUrlAndProtocol()\n    const {allowedProtocols} = rules;\n    if (allowedProtocols && url) {\n      const re = /^([^:\\/?#.]+):[\\s\\S]*$/;\n      const match = re.exec(url);\n      if (match !== null) {\n        const protocol = match[1].toLowerCase().trim();\n        // hasOwnProperty() needed since nested objects are not prototype-less.\n        if (!hasOwn(allowedProtocols, protocol)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the property rules object for (tag, property), if it exists.\n   * Returns null if binding is allowed without constraints.\n   * Returns undefined if binding is not allowed.\n   * @param {string} tag\n   * @param {string} property\n   * @return {(?PropertyRulesDef|undefined)}\n   * @private\n   */\n  rulesForTagAndProperty_(tag, property) {\n    // Allow binding to all ARIA attributes.\n    if (startsWith(property, 'aria-')) {\n      return null;\n    }\n    const globalRules = ownProperty(GLOBAL_PROPERTY_RULES, property);\n    if (globalRules !== undefined) {\n      return /** @type {PropertyRulesDef} */ (globalRules);\n    }\n    const ampPropertyRules = ownProperty(AMP_PROPERTY_RULES, property);\n    if (startsWith(tag, 'AMP-') && ampPropertyRules !== undefined) {\n      return /** @type {PropertyRulesDef} */ (ampPropertyRules);\n    }\n    const tagRules = ownProperty(ELEMENT_RULES, tag);\n    if (tagRules) {\n      return tagRules[property];\n    }\n    return undefined;\n  }\n}\n\n/**\n * @return {Object<string, Object<string, ?PropertyRulesDef>>}}\n * @private\n */\nfunction createElementRules_() {\n  // Initialize `rules` with tag-specific constraints.\n  const rules = {\n    'AMP-BRIGHTCOVE': {\n      'data-account': null,\n      'data-embed': null,\n      'data-player': null,\n      'data-player-id': null,\n      'data-playlist-id': null,\n      'data-video-id': null,\n    },\n    'AMP-CAROUSEL': {\n      'slide': null,\n    },\n    'AMP-GOOGLE-DOCUMENT-EMBED': {\n      'src': null,\n      'title': null,\n    },\n    'AMP-IFRAME': {\n      'src': null,\n    },\n    'AMP-IMG': {\n      'alt': null,\n      'attribution': null,\n      'src': {\n        'allowedProtocols': {\n          'data': true,\n          'http': true,\n          'https': true,\n        },\n      },\n      'srcset': {\n        'alternativeName': 'src',\n      },\n    },\n    'AMP-LIST': {\n      'src': {\n        'allowedProtocols': {\n          'https': true,\n        },\n      },\n      'state': null,\n    },\n    'AMP-SELECTOR': {\n      'disabled': null,\n      'selected': null,\n    },\n    'AMP-STATE': {\n      'src': {\n        'allowedProtocols': {\n          'https': true,\n        },\n      },\n    },\n    'AMP-VIDEO': {\n      'alt': null,\n      'attribution': null,\n      'controls': null,\n      'loop': null,\n      'poster': null,\n      'preload': null,\n      'src': {\n        'allowedProtocols': {\n          'https': true,\n        },\n      },\n    },\n    'AMP-YOUTUBE': {\n      'data-videoid': null,\n    },\n    'A': {\n      'href': {\n        'allowedProtocols': {\n          'ftp': true,\n          'http': true,\n          'https': true,\n          'mailto': true,\n          'fb-messenger': true,\n          'intent': true,\n          'skype': true,\n          'sms': true,\n          'snapchat': true,\n          'tel': true,\n          'tg': true,\n          'threema': true,\n          'twitter': true,\n          'viber': true,\n          'whatsapp': true,\n        },\n      },\n    },\n    'BUTTON': {\n      'disabled': null,\n      'type': null,\n      'value': null,\n    },\n    'FIELDSET': {\n      'disabled': null,\n    },\n    'IMAGE': {\n      'xlink:href': {\n        'allowedProtocols': {\n          'http': true,\n          'https': true,\n        },\n      },\n    },\n    'INPUT': {\n      'accept': null,\n      'accesskey': null,\n      'autocomplete': null,\n      'checked': null,\n      'disabled': null,\n      'height': null,\n      'inputmode': null,\n      'max': null,\n      'maxlength': null,\n      'min': null,\n      'minlength': null,\n      'multiple': null,\n      'pattern': null,\n      'placeholder': null,\n      'readonly': null,\n      'required': null,\n      'selectiondirection': null,\n      'size': null,\n      'spellcheck': null,\n      'step': null,\n      'type': {\n        blacklistedValueRegex: '(^|\\\\s)(button|image|)(\\\\s|$)',\n      },\n      'value': null,\n      'width': null,\n    },\n    'OPTION': {\n      'disabled': null,\n      'label': null,\n      'selected': null,\n      'value': null,\n    },\n    'OPTGROUP': {\n      'disabled': null,\n      'label': null,\n    },\n    'SELECT': {\n      'autofocus': null,\n      'disabled': null,\n      'multiple': null,\n      'required': null,\n      'size': null,\n    },\n    'SOURCE': {\n      'src': {\n        'allowedProtocols': {\n          'https': true,\n        },\n      },\n      'type': null,\n    },\n    'TRACK': {\n      'label': null,\n      'src': {\n        'allowedProtocols': {\n          'https': true,\n        },\n      },\n      'srclang': null,\n    },\n    'TEXTAREA': {\n      'autocomplete': null,\n      'autofocus': null,\n      'cols': null,\n      'disabled': null,\n      'maxlength': null,\n      'minlength': null,\n      'placeholder': null,\n      'readonly': null,\n      'required': null,\n      'rows': null,\n      'selectiondirection': null,\n      'selectionend': null,\n      'selectionstart': null,\n      'spellcheck': null,\n      'wrap': null,\n    },\n  };\n  return rules;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(function()): number} Function that when invoked will\n *     call the passed in function. On every invocation the next\n *     invocation of the passed in function will be exponentially\n *     later. Returned function returns timeout id.\n */\nexport function exponentialBackoff(opt_base) {\n  const getTimeout = exponentialBackoffClock(opt_base);\n  return work => {\n    return setTimeout(work, getTimeout());\n  };\n}\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(): number} Function that when invoked will return\n *    a number that exponentially grows per invocation.\n */\nexport function exponentialBackoffClock(opt_base) {\n  const base = opt_base || 2;\n  let count = 0;\n  return () => {\n    let wait = Math.pow(base, count++);\n    wait += getJitter(wait);\n    return wait * 1000;\n  };\n}\n\n/**\n * Add jitter to avoid the thundering herd. This can e.g. happen when\n * we poll a backend and it fails for everyone at the same time.\n * We add up to 30% (default) longer or shorter than the given time.\n *\n * @param {number} wait the amount if base milliseconds\n * @param {number=} opt_perc the min/max percentage to add or sutract\n * @return {number}\n */\nexport function getJitter(wait, opt_perc) {\n  opt_perc = opt_perc || .3;\n  let jitter = wait * opt_perc * Math.random();\n  if (Math.random() > .5) {\n    jitter *= -1;\n  }\n  return jitter;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev, user} from './log';\n\n\n/**\n * A single source within a srcset. Only one: width or DPR can be specified at\n * a time.\n * @typedef {{\n *   url: string,\n *   width: (number|undefined),\n *   dpr: (number|undefined)\n * }}\n */\nlet SrcsetSourceDef;\n\n/**\n * General grammar: (URL [NUM[w|x]],)*\n * Example 1: \"image1.png 100w, image2.png 50w\"\n * Example 2: \"image1.png 2x, image2.png\"\n * Example 3: \"image1,100w.png 100w, image2.png 50w\"\n */\nconst srcsetRegex =\n    /(\\S+)(?:\\s+(?:(-?\\d+(?:\\.\\d+)?)([a-zA-Z]*)))?\\s*(?:,|$)/g;\n\n/**\n * Extracts `srcset` and fallbacks to `src` if not available.\n * @param {!Element} element\n * @return {!Srcset}\n */\nexport function srcsetFromElement(element) {\n  const srcsetAttr = element.getAttribute('srcset');\n  if (srcsetAttr) {\n    return parseSrcset(srcsetAttr);\n  }\n  // We can't push `src` via `parseSrcset` because URLs in `src` are not always\n  // RFC compliant and can't be easily parsed as an `srcset`. For instance,\n  // they sometimes contain space characters.\n  const srcAttr = user().assert(element.getAttribute('src'),\n      'Either non-empty \"srcset\" or \"src\" attribute must be specified: %s',\n      element);\n  return srcsetFromSrc(srcAttr);\n}\n\n/**\n * Creates a Srcset from a `src` attribute value.\n * @param {string} src\n * @return {!Srcset}\n */\nexport function srcsetFromSrc(src) {\n  return new Srcset([{url: src, width: undefined, dpr: 1}]);\n}\n\n/**\n * Parses the text representation of srcset into Srcset object.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes.\n * See http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n * @param {string} s\n * @return {!Srcset}\n */\nexport function parseSrcset(s) {\n  const sources = [];\n  let match;\n  while ((match = srcsetRegex.exec(s))) {\n    const url = match[1];\n    let width, dpr;\n    if (match[2]) {\n      const type = match[3].toLowerCase();\n      if (type == 'w') {\n        width = parseInt(match[2], 10);\n      } else if (type == 'x') {\n        dpr = parseFloat(match[2]);\n      } else {\n        continue;\n      }\n    } else {\n      // If no \"w\" or \"x\" specified, we assume it's \"1x\".\n      dpr = 1;\n    }\n    sources.push({url, width, dpr});\n  }\n  return new Srcset(sources);\n}\n\n\n/**\n * A srcset object contains one or more sources.\n *\n * There are two types of sources: width-based and DPR-based. Only one type\n * of sources allowed to be specified within a single srcset. Depending on a\n * usecase, the components are free to choose any source that best corresponds\n * to the required rendering quality and network and CPU conditions. See\n * \"select\" method for details on how this selection is performed.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes\n */\nexport class Srcset {\n\n  /**\n   * @param {!Array<!SrcsetSourceDef>} sources\n   */\n  constructor(sources) {\n    user().assert(sources.length > 0, 'Srcset must have at least one source');\n    /** @private @const {!Array<!SrcsetSourceDef>} */\n    this.sources_ = sources;\n\n    // Only one type of source specified can be used - width or DPR.\n    let hasWidth = false;\n    let hasDpr = false;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      hasWidth = hasWidth || !!source.width;\n      hasDpr = hasDpr || !!source.dpr;\n    }\n    user().assert(!!(hasWidth ^ hasDpr),\n        'Srcset must have width or dpr sources, but not both');\n\n    // Source and assert duplicates.\n    sources.sort(hasWidth ? sortByWidth : sortByDpr);\n\n    /** @private @const {boolean} */\n    this.widthBased_ = hasWidth;\n  }\n\n  /**\n   * Performs selection for specified width and DPR. Here, width is the width\n   * in screen pixels and DPR is the device-pixel-ratio or pixel density of\n   * the device. Depending on the circumstances, such as low network conditions,\n   * it's possible to manipulate the result of this method by passing a lower\n   * DPR value.\n   *\n   * The source selection depends on whether this is width-based or DPR-based\n   * srcset.\n   *\n   * In a width-based source, the source's width is the physical width of a\n   * resource (e.g. an image). Depending on the provided DPR, this width is\n   * converted to the screen pixels as following:\n   *   pixelWidth = sourceWidth / DPR\n   *\n   * Then, the source closest to the requested \"width\" is selected using\n   * the \"pixelWidth\". The slight preference is given to the bigger sources to\n   * ensure the most optimal quality.\n   *\n   * In a DPR-based source, the source's DPR is used to return the source that\n   * is closest to the requested DPR.\n   *\n   * Based on\n   * http://www.w3.org/html/wg/drafts/html/master/semantics.html#attr-img-srcset.\n   * @param {number} width\n   * @param {number} dpr\n   * @return {string}\n   */\n  select(width, dpr) {\n    dev().assert(width, 'width=%s', width);\n    dev().assert(dpr, 'dpr=%s', dpr);\n    let index = 0;\n    if (this.widthBased_) {\n      index = this.selectByWidth_(width * dpr);\n    } else {\n      index = this.selectByDpr_(dpr);\n    }\n    return this.sources_[index].url;\n  }\n\n  /**\n   * @param {number} width\n   * @return {number}\n   * @private\n   */\n  selectByWidth_(width) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n    let minWidth = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const sWidth = sources[i].width;\n      const score = Math.abs(sWidth - width);\n\n      // Select the one that is closer with a slight preference toward larger\n      // widths. If smaller size is closer, enforce minimum ratio to ensure\n      // image isn't too distorted.\n      if (score <= minScore * 1.1 || width / minWidth > 1.2) {\n        minIndex = i;\n        minScore = score;\n        minWidth = sWidth;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * @param {number} dpr\n   * @return {number}\n   * @private\n   */\n  selectByDpr_(dpr) {\n    const sources = this.sources_;\n    let minIndex = 0;\n    let minScore = Infinity;\n\n    for (let i = 0; i < sources.length; i++) {\n      const score = Math.abs(sources[i].dpr - dpr);\n      if (score <= minScore) {\n        minIndex = i;\n        minScore = score;\n      } else {\n        break;\n      }\n    }\n    return minIndex;\n  }\n\n  /**\n   * Returns all URLs in the srcset.\n   * @return {!Array<string>}\n   */\n  getUrls() {\n    return this.sources_.map(s => s.url);\n  }\n\n  /**\n   * Reconstructs the string expression for this srcset.\n   * @param {function(string):string=} opt_mapper\n   * @return {string}\n   */\n  stringify(opt_mapper) {\n    const res = [];\n    const sources = this.sources_;\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i];\n      let src = source.url;\n      if (opt_mapper) {\n        src = opt_mapper(src);\n      }\n      if (this.widthBased_) {\n        src += ` ${source.width}w`;\n      } else {\n        src += ` ${source.dpr}x`;\n      }\n      res.push(src);\n    }\n    return res.join(', ');\n  }\n}\n\n/**\n * Sorts by width\n *\n * @param {number} s1\n * @param {number} s2\n * @return {number}\n */\nfunction sortByWidth(s1, s2) {\n  user().assert(s1.width != s2.width, 'Duplicate width: %s', s1.width);\n  return s1.width - s2.width;\n}\n\n/**\n * Sorts by dpr\n *\n * @param {!Object} s1\n * @param {!Object} s2\n * @return {number}\n */\nfunction sortByDpr(s1, s2) {\n  user().assert(s1.dpr != s2.dpr, 'Duplicate dpr: %s', s1.dpr);\n  return s1.dpr - s2.dpr;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order.\n * Notice that it does NOT handle NaN case as expected\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * A bit like Array#filter, but removes elements that filter false from the\n * array. Returns the filtered items.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} filter\n * @return {!Array<T>}\n * @template T\n */\nexport function filterSplice(array, filter) {\n  const splice = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (filter(item, i, array)) {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    } else {\n      splice.push(item);\n    }\n  }\n\n  if (index < array.length) {\n    array.length = index;\n  }\n\n  return splice;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Directly imported into web-worker.js entry point so polyfills\n *     can be used in top-level scope in module dependencies.\n */\n\nimport {install as installArrayIncludes} from '../polyfills/array-includes';\nimport {install as installMathSign} from '../polyfills/math-sign';\nimport {install as installObjectAssign} from '../polyfills/object-assign';\n\ninstallArrayIncludes(self);\ninstallObjectAssign(self);\ninstallMathSign(self);\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Web worker entry point. Currently only used by a single\n *   extension (amp-bind), so dependencies are directly imported.\n *   Eventually, each extension that uses this worker will bundle its own\n *   \"lib\" JS files and loaded at runtime via `importScripts()`.\n */\n\nimport './web-worker-polyfills';\nimport {BindEvaluator} from '../../extensions/amp-bind/0.1/bind-evaluator';\nimport {exponentialBackoff} from '../exponential-backoff';\nimport {initLogConstructor} from '../log';\nimport {urls} from '../config';\n\ninitLogConstructor();\n\n/**\n * Exponential backoff for error reports to avoid any given\n * worker from generating a very large number of errors.\n * @const {function(function()): number}\n */\nconst backoff_ = exponentialBackoff(1.5);\n\n/**\n * @param {!Event} event\n */\nfunction errorHandler_(event) {\n  backoff_(() => report_(event.reason));\n}\n\n/**\n * Element `i` contains the evaluator for scope `i`.\n * @private {!Array<!BindEvaluator>}\n */\nconst evaluators_ = [];\n\n// Install error reporting on the `self` global. Error requests contain a\n// URL param \"ww=1\" that identifies the originating worker.\nself.addEventListener('unhandledrejection', errorHandler_);\nself.addEventListener('error', errorHandler_);\n\nself.addEventListener('message', function(event) {\n  const {method, args, id, scope} =\n    /** @type {ToWorkerMessageDef} */ (event.data);\n\n  let returnValue;\n\n  if (!evaluators_[scope]) {\n    evaluators_[scope] = new BindEvaluator();\n  }\n  const evaluator = evaluators_[scope];\n\n  switch (method) {\n    case 'bind.addBindings':\n      returnValue = evaluator.addBindings.apply(evaluator, args);\n      break;\n    case 'bind.removeBindingsWithExpressionStrings':\n      const removeBindings = evaluator.removeBindingsWithExpressionStrings;\n      returnValue = removeBindings.apply(evaluator, args);\n      break;\n    case 'bind.addMacros':\n      returnValue = evaluator.addMacros.apply(evaluator, args);\n      break;\n    case 'bind.evaluateBindings':\n      returnValue = evaluator.evaluateBindings.apply(evaluator, args);\n      break;\n    case 'bind.evaluateExpression':\n      returnValue = evaluator.evaluateExpression.apply(evaluator, args);\n      break;\n    default:\n      throw new Error(`Unrecognized method: ${method}`);\n  }\n\n  const message =\n    /** @type {FromWorkerMessageDef} */ ({method, returnValue, id});\n  // `message` may only contain values or objects handled by the\n  // structured clone algorithm.\n  // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n  self./*OK*/postMessage(message);\n});\n\n/**\n * Report error to AMP's error reporting frontend.\n * @param {*} e\n */\nfunction report_(e) {\n  // Don't report local dev errors.\n  if (urls.localhostRegex.test(self.location.origin)) {\n    return;\n  }\n  if (!(e instanceof Error)) {\n    e = new Error(e);\n  }\n  const config = self.AMP_CONFIG || {};\n  const url = urls.errorReporting + '?' +\n      'ww=1' + // Tags request as coming from a worker.\n      '&v=' + encodeURIComponent(config.v) +\n      '&m=' + encodeURIComponent(e.message) +\n      '&ca=' + (config.canary ? 1 : 0) +\n      '&s=' + encodeURIComponent(e.stack || '');\n  fetch(url, /** @type {!RequestInit} */ ({\n    // We don't care about the response.\n    mode: 'no-cors',\n  })).catch(reason => {\n    console./*OK*/error(reason);\n  });\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}