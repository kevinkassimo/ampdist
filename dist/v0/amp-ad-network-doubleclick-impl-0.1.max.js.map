{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ads/_a4a-config.js","ads/_config.js","ads/google/a4a/experiment-utils.js","ads/google/a4a/line-delimited-response-handler.js","ads/google/a4a/traffic-experiments.js","ads/google/a4a/url-builder.js","ads/google/a4a/utils.js","ads/google/utils.js","extensions/amp-a4a/0.1/a4a-variable-source.js","extensions/amp-a4a/0.1/amp-a4a.js","extensions/amp-a4a/0.1/callout-vendors.js","extensions/amp-a4a/0.1/real-time-config-manager.js","extensions/amp-a4a/0.1/refresh-intersection-observer-wrapper.js","extensions/amp-a4a/0.1/refresh-manager.js","extensions/amp-a4a/0.1/signature-verifier.js","extensions/amp-ad-network-adsense-impl/0.1/adsense-a4a-config.js","extensions/amp-ad-network-cloudflare-impl/0.1/cloudflare-a4a-config.js","extensions/amp-ad-network-doubleclick-impl/0.1/amp-ad-network-doubleclick-impl.js","extensions/amp-ad-network-doubleclick-impl/0.1/safeframe-host.js","extensions/amp-ad-network-doubleclick-impl/0.1/sra-utils.js","extensions/amp-ad-network-gmossp-impl/0.1/gmossp-a4a-config.js","extensions/amp-ad-network-triplelift-impl/0.1/triplelift-a4a-config.js","extensions/amp-ad/0.1/concurrent-load.js","node_modules/document-register-element/build/document-register-element.patched.js","node_modules/promise-pjs/promise.js","src/3p-frame-messaging.js","src/3p-frame.js","src/ad-cid.js","src/ad-helper.js","src/amp-events.js","src/analytics.js","src/common-signals.js","src/config.js","src/consent-state.js","src/consent.js","src/cookies.js","src/document-ready.js","src/dom.js","src/element-service.js","src/error.js","src/event-helper-listen.js","src/event-helper.js","src/experiments.js","src/exponential-backoff.js","src/extension-analytics.js","src/friendly-iframe-embed.js","src/iframe-attributes.js","src/iframe-helper.js","src/impression.js","src/intersection-observer-polyfill.js","src/json.js","src/layout-rect.js","src/layout.js","src/log.js","src/mode-object.js","src/mode.js","src/observable.js","src/polyfills.js","src/polyfills/array-includes.js","src/polyfills/custom-elements.js","src/polyfills/document-contains.js","src/polyfills/domtokenlist-toggle.js","src/polyfills/math-sign.js","src/polyfills/object-assign.js","src/polyfills/promise.js","src/render-delaying-services.js","src/service.js","src/service/navigation.js","src/service/url-expander/expander.js","src/service/url-replacements-impl.js","src/service/variable-source.js","src/services.js","src/static-template.js","src/string.js","src/style-installer.js","src/style.js","src/types.js","src/url-parse-query-string.js","src/url-try-decode-uri-component.js","src/url.js","src/utils/array.js","src/utils/base64.js","src/utils/bytes.js","src/utils/dom-fingerprint.js","src/utils/lru-cache.js","src/utils/object.js","src/utils/promise.js","src/utils/rate-limit.js","src/utils/signals.js","src/window-interface.js","third_party/css-escape/css-escape.js"],"names":[],"mappings":"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","file":"amp-ad-network-doubleclick-impl-0.1.max.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  adsenseIsA4AEnabled,\n} from '../extensions/amp-ad-network-adsense-impl/0.1/adsense-a4a-config';\nimport {\n  cloudflareIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-cloudflare-impl/0.1/cloudflare-a4a-config';\nimport {\n  gmosspIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-gmossp-impl/0.1/gmossp-a4a-config';\nimport {map} from '../src/utils/object';\nimport {\n  tripleliftIsA4AEnabled,\n} from\n  '../extensions/amp-ad-network-triplelift-impl/0.1/triplelift-a4a-config';\n\n/**\n * Registry for A4A (AMP Ads for AMPHTML pages) \"is supported\" predicates.\n * If an ad network, {@code ${NETWORK}}, is registered in this object, then the\n * {@code <amp-ad type=\"${NETWORK}\">} implementation will look up its predicate\n * here. If there is a predicate and it and returns {@code true}, then\n * {@code amp-ad} will attempt to render the ad via the A4A pathway (fetch\n * ad creative via early XHR CORS request; verify that it is validated AMP;\n * and then render directly in the host page by splicing into the host DOM).\n * Otherwise, it will attempt to render the ad via the existing \"3p iframe\"\n * pathway (delay load into a cross-domain iframe).\n *\n * @type {!Object<string, function(!Window, !Element): boolean>}\n */\nlet a4aRegistry;\n\n/**\n * Returns the a4a registry map\n * @return {Object}\n */\nexport function getA4ARegistry() {\n  if (!a4aRegistry) {\n    a4aRegistry = map({\n      'adsense': adsenseIsA4AEnabled,\n      'adzerk': () => true,\n      'doubleclick': () => true,\n      'triplelift': tripleliftIsA4AEnabled,\n      'cloudflare': cloudflareIsA4AEnabled,\n      'gmossp': gmosspIsA4AEnabled,\n      'fake': () => true,\n      // TODO: Add new ad network implementation \"is enabled\" functions here.\n      // Note: if you add a function here that requires a new \"import\", above,\n      // you'll probably also need to add a whitelist exception to\n      // build-system/dep-check-config.js in the \"filesMatching: 'ads/**/*.js'\n      // rule.\n    });\n  }\n\n  return a4aRegistry;\n}\n\n/**\n * An object mapping signing server names to their corresponding URLs.\n * @type {!Object<string, string>}\n */\nexport const signingServerURLs = {\n  'google': 'https://cdn.ampproject.org/amp-ad-verifying-keyset.json',\n  'google-dev': 'https://cdn.ampproject.org/amp-ad-verifying-keyset-dev.json',\n  'cloudflare': 'https://amp.cloudflare.com/amp-ad-verifying-keyset.json',\n  'cloudflare-dev': 'https://amp.cloudflare.com/amp-ad-verifying-keyset-dev.json',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   prefetch: (string|undefined),\n *   preconnect: (string|undefined),\n *   renderStartImplemented: (boolean|undefined),\n *   clientIdScope: (string|undefined),\n *   clientIdCookieName: (string|undefined),\n *   consentHandlingOverride: (boolean|undefined),\n *   remoteHTMLDisabled: (boolean|undefined),\n *   fullWidthHeightRatio: (number|undefined),\n * }}\n */\nlet AdNetworkConfigDef;\n\n/**\n * The config of each ad network.\n * Please keep the list alphabetic order.\n *\n * yourNetworkName: {  // This is the \"type\" attribute of <amp-ad>\n *\n *   // List of URLs for prefetch\n *   prefetch: string|array\n *\n *   // List of hosts for preconnect\n *   preconnect: string|array\n *\n *   // The scope used to provide CIDs to ads\n *   clientIdScope: string\n *\n *   // The cookie name to store the CID. In absence, `clientIdScope` is used.\n *   clientIdCookieName: string\n *\n *   // If the ad network is willing to override the consent handling, which\n *   // by default is blocking ad load until the consent is accepted.\n *   consentHandlingOverride: boolean\n *\n *   // Whether render-start API has been implemented\n *   // We highly recommend all networks to implement the API,\n *   // see details in the README.md\n *   renderStartImplemented: boolean\n *\n *   // The width / height ratio for full width ad units.\n *   // If absent, it means the network does not support full width ad units.\n *   // Example value: 1.2\n *   fullWidthHeightRatio: number\n * }\n *\n * @const {!Object<string, !AdNetworkConfigDef>}}\n */\nexport const adConfig = {\n  '_ping_': {\n    renderStartImplemented: true,\n    clientIdScope: '_PING_',\n    consentHandlingOverride: true,\n  },\n\n  '24smi': {\n    prefetch: 'https://jsn.24smi.net/smi.js',\n    preconnect: 'https://data.24smi.net',\n  },\n\n  'a8': {\n    prefetch: 'https://statics.a8.net/amp/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'a9': {\n    prefetch: 'https://c.amazon-adsystem.com/aax2/assoc.js',\n  },\n\n  'accesstrade': {\n    prefetch: 'https://h.accesstrade.net/js/amp/amp.js',\n  },\n\n  'adagio': {\n    prefetch: 'https://js-ssl.neodatagroup.com/adagio_amp.js',\n    preconnect: [\n      'https://ad-aws-it.neodatagroup.com',\n      'https://tracker.neodatagroup.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adblade': {\n    prefetch: 'https://web.adblade.com/js/ads/async/show.js',\n    preconnect: [\n      'https://staticd.cdn.adblade.com',\n      'https://static.adblade.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adbutler': {\n    prefetch: 'https://servedbyadbutler.com/app.js',\n  },\n\n  'adform': {},\n\n  'adfox': {\n    prefetch: 'https://yastatic.net/pcode/adfox/loader.js',\n    renderStartImplemented: true,\n  },\n\n  'adgeneration': {\n    prefetch: 'https://i.socdm.com/sdk/js/adg-script-loader.js',\n  },\n\n  'adhese': {\n    renderStartImplemented: true,\n  },\n\n  'adincube': {\n    renderStartImplemented: true,\n  },\n\n  'adition': {},\n\n  'adman': {},\n\n  'admanmedia': {\n    renderStartImplemented: true,\n  },\n\n  'admixer': {\n    renderStartImplemented: true,\n    preconnect: [\n      'https://inv-nets.admixer.net',\n      'https://cdn.admixer.net',\n    ],\n  },\n\n  'adocean': {},\n\n  'adpicker': {\n    renderStartImplemented: true,\n  },\n\n  'adplugg': {\n    prefetch: 'https://www.adplugg.com/serve/js/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'adreactor': {},\n\n  'adsense': {\n    prefetch: 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js',\n    preconnect: 'https://googleads.g.doubleclick.net',\n    clientIdScope: 'AMP_ECID_GOOGLE',\n    clientIdCookieName: '_ga',\n    remoteHTMLDisabled: true,\n    masterFrameAccessibleType: 'google_network',\n    fullWidthHeightRatio: 1.2,\n    consentHandlingOverride: true,\n  },\n\n  'adsnative': {\n    prefetch: 'https://static.adsnative.com/static/js/render.v1.js',\n    preconnect: 'https://api.adsnative.com',\n  },\n\n  'adspeed': {\n    preconnect: 'https://g.adspeed.net',\n    renderStartImplemented: true,\n  },\n\n  'adspirit': {},\n\n  'adstir': {\n    prefetch: 'https://js.ad-stir.com/js/adstir_async.js',\n    preconnect: 'https://ad.ad-stir.com',\n  },\n\n  'adtech': {\n    prefetch: 'https://s.aolcdn.com/os/ads/adsWrapper3.js',\n    preconnect: [\n      'https://mads.at.atwola.com',\n      'https://aka-cdn.adtechus.com',\n    ],\n  },\n\n  'adthrive': {\n    prefetch: [\n      'https://www.googletagservices.com/tag/js/gpt.js',\n    ],\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adunity': {\n    preconnect: [\n      'https://content.adunity.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'aduptech': {\n    prefetch: 'https://s.d.adup-tech.com/jsapi',\n    preconnect: [\n      'https://d.adup-tech.com',\n      'https://m.adup-tech.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adventive': {\n    preconnect: [\n      'https://ads.adventive.com',\n      'https://amp.adventivedev.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adverline': {\n    prefetch: 'https://ads.adverline.com/richmedias/amp.js',\n    preconnect: [\n      'https://adnext.fr',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'adverticum': {},\n\n  'advertserve': {\n    renderStartImplemented: true,\n  },\n\n  'adzerk': {},\n\n  'affiliateb': {\n    prefetch: 'https://track.affiliate-b.com/amp/a.js',\n    renderStartImplemented: true,\n  },\n\n  'aja': {\n    renderStartImplemented: true,\n    prefetch: 'https://cdn.as.amanad.adtdp.com/sdk/asot-v2.js',\n  },\n\n  'appvador': {\n    prefetch: [\n      'https://cdn.apvdr.com/js/VastAdUnit.min.js',\n      'https://cdn.apvdr.com/js/VideoAd.min.js',\n      'https://cdn.apvdr.com/js/VideoAd3PAS.min.js',\n      'https://cdn.apvdr.com/js/VideoAdAutoPlay.min.js',\n      'https://cdn.apvdr.com/js/VideoAdNative.min.js',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'amoad': {\n    prefetch: [\n      'https://j.amoad.com/js/a.js',\n      'https://j.amoad.com/js/n.js',\n    ],\n    preconnect: [\n      'https://d.amoad.com',\n      'https://i.amoad.com',\n      'https://m.amoad.com',\n      'https://v.amoad.com',\n    ],\n  },\n\n  'appnexus': {\n    prefetch: 'https://acdn.adnxs.com/ast/ast.js',\n    preconnect: 'https://ib.adnxs.com',\n    renderStartImplemented: true,\n  },\n\n  'atomx': {\n    prefetch: 'https://s.ato.mx/p.js',\n  },\n\n  'beopinion': {\n    prefetch: 'https://widget.beopinion.com/sdk.js',\n    preconnect: [\n      'https://t.beopinion.com',\n      'https://s.beopinion.com',\n      'https://data.beopinion.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'bidtellect': {},\n\n  'brainy': {},\n\n  'bringhub': {\n    renderStartImplemented: true,\n    preconnect: [\n      'https://static.bh-cdn.com',\n      'https://core-api.bringhub.io',\n    ],\n  },\n\n  'broadstreetads': {\n    prefetch: 'https://cdn.broadstreetads.com/init-2.min.js',\n  },\n\n  'caajainfeed': {\n    prefetch: [\n      'https://cdn.amanad.adtdp.com/sdk/ajaamp.js',\n    ],\n    preconnect: [\n      'https://ad.amanad.adtdp.com',\n    ],\n  },\n\n  'capirs': {\n    renderStartImplemented: true,\n  },\n\n  'caprofitx': {\n    prefetch: [\n      'https://cdn.caprofitx.com/pfx.min.js',\n      'https://cdn.caprofitx.com/tags/amp/profitx_amp.js',\n    ],\n    preconnect: 'https://ad.caprofitx.adtdp.com',\n  },\n\n  'cedato': {\n    renderStartImplemented: true,\n  },\n\n  'chargeads': {},\n\n  'colombia': {\n    prefetch: 'https://static.clmbtech.com/ad/commons/js/colombia-amp.js',\n  },\n\n  'connatix': {\n    renderStartImplemented: true,\n  },\n\n  'contentad': {},\n\n\n  'criteo': {\n    prefetch: 'https://static.criteo.net/js/ld/publishertag.js',\n    preconnect: 'https://cas.criteo.com',\n  },\n\n  'csa': {\n    prefetch: 'https://www.google.com/adsense/search/ads.js',\n  },\n\n  'dable': {\n    preconnect: [\n      'https://static.dable.io',\n      'https://api.dable.io',\n      'https://images.dable.io',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'directadvert': {\n    renderStartImplemented: true,\n  },\n\n  'distroscale': {\n    preconnect: [\n      'https://c.jsrdn.com',\n      'https://s.jsrdn.com',\n      'https://i.jsrdn.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'dotandads': {\n    prefetch: 'https://amp.ad.dotandad.com/dotandadsAmp.js',\n    preconnect: 'https://bal.ad.dotandad.com',\n  },\n\n  'eadv': {\n    renderStartImplemented: true,\n    clientIdScope: 'AMP_ECID_EADV',\n    prefetch: [\n      'https://www.eadv.it/track/esr.min.js',\n      'https://www.eadv.it/track/ead.min.js',\n    ],\n  },\n\n  'eas': {\n    prefetch: 'https://amp.emediate.eu/amp.v0.js',\n    renderStartImplemented: true,\n  },\n\n  'engageya': {},\n\n  'epeex': {},\n\n  'eplanning': {\n    prefetch: 'https://us.img.e-planning.net/layers/epl-amp.js',\n  },\n\n  'ezoic': {\n    prefetch: [\n      'https://www.googletagservices.com/tag/js/gpt.js',\n      'https://g.ezoic.net/ezoic/ampad.js',\n    ],\n    clientIdScope: 'AMP_ECID_EZOIC',\n    consentHandlingOverride: true,\n  },\n\n  'f1e': {\n    prefetch: 'https://img.ak.impact-ad.jp/util/f1e_amp.min.js',\n  },\n\n  'f1h': {\n    preconnect: 'https://img.ak.impact-ad.jp',\n    renderStartImplemented: true,\n  },\n\n  'fake': {},\n\n  'felmat': {\n    prefetch: 'https://t.felmat.net/js/fmamp.js',\n    renderStartImplemented: true,\n  },\n\n  'flite': {},\n\n  'fluct': {\n    preconnect: [\n      'https://cdn-fluct.sh.adingo.jp',\n      'https://s.sh.adingo.jp',\n      'https://i.adingo.jp',\n    ],\n  },\n\n  'fusion': {\n    prefetch: 'https://assets.adtomafusion.net/fusion/latest/fusion-amp.min.js',\n  },\n\n  'genieessp': {\n    prefetch: 'https://js.gsspcln.jp/l/amp.js',\n  },\n\n  'giraff': {\n    renderStartImplemented: true,\n  },\n\n  'gmossp': {\n    prefetch: 'https://cdn.gmossp-sp.jp/ads/amp.js',\n  },\n\n  'gumgum': {\n    prefetch: 'https://g2.gumgum.com/javascripts/ad.js',\n    renderStartImplemented: true,\n  },\n\n  'holder': {\n    prefetch: 'https://i.holder.com.ua/js2/holder/ajax/ampv1.js',\n    preconnect: 'https://h.holder.com.ua',\n    renderStartImplemented: true,\n  },\n\n  'ibillboard': {},\n\n  'imedia': {\n    prefetch: 'https://i.imedia.cz/js/im3.js',\n    renderStartImplemented: true,\n  },\n\n  'imobile': {\n    prefetch: 'https://spamp.i-mobile.co.jp/script/amp.js',\n    preconnect: 'https://spad.i-mobile.co.jp',\n  },\n  'imonomy': {\n    renderStartImplemented: true,\n  },\n  'improvedigital': {},\n\n  'industrybrains': {\n    prefetch: 'https://web.industrybrains.com/js/ads/async/show.js',\n    preconnect: [\n      'https://staticd.cdn.industrybrains.com',\n      'https://static.industrybrains.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'inmobi': {\n    prefetch: 'https://cf.cdn.inmobi.com/ad/inmobi.secure.js',\n    renderStartImplemented: true,\n  },\n\n  'innity': {\n    prefetch: 'https://cdn.innity.net/admanager.js',\n    preconnect: 'https://as.innity.com',\n    renderStartImplemented: true,\n  },\n\n  'ix': {\n    prefetch: [\n      'https://js-sec.indexww.com/apl/amp.js',\n    ],\n    preconnect: 'https://as-sec.casalemedia.com',\n    renderStartImplemented: true,\n  },\n\n  'kargo': {},\n\n  'kiosked': {\n    renderStartImplemented: true,\n  },\n\n  'kixer': {\n    prefetch: 'https://cdn.kixer.com/ad/load.js',\n    renderStartImplemented: true,\n  },\n\n  'kuadio': {},\n\n  'ligatus': {\n    prefetch: 'https://ssl.ligatus.com/render/ligrend.js',\n    renderStartImplemented: true,\n  },\n\n  'lockerdome': {\n    prefetch: 'https://cdn2.lockerdomecdn.com/_js/amp.js',\n    renderStartImplemented: true,\n  },\n\n  'loka': {\n    prefetch: 'https://loka-cdn.akamaized.net/scene/amp.js',\n    preconnect: [\n      'https://scene-front.lokaplatform.com',\n      'https://loka-materials.akamaized.net',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'mads': {\n    prefetch: 'https://eu2.madsone.com/js/tags.js',\n  },\n\n  'mantis-display': {\n    prefetch: 'https://assets.mantisadnetwork.com/mantodea.min.js',\n    preconnect: [\n      'https://mantodea.mantisadnetwork.com',\n      'https://res.cloudinary.com',\n      'https://resize.mantisadnetwork.com',\n    ],\n  },\n\n  'mantis-recommend': {\n    prefetch: 'https://assets.mantisadnetwork.com/recommend.min.js',\n    preconnect: [\n      'https://mantodea.mantisadnetwork.com',\n      'https://resize.mantisadnetwork.com',\n    ],\n  },\n\n  'mediaimpact': {\n    prefetch: 'https://ec-ns.sascdn.com/diff/251/pages/amp_default.js',\n    preconnect: [\n      'https://ww251.smartadserver.com',\n      'https://static.sascdn.com/',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'medianet': {\n    preconnect: 'https://contextual.media.net',\n    renderStartImplemented: true,\n  },\n\n  'mediavine': {\n    prefetch: 'https://amp.mediavine.com/wrapper.min.js',\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n    consentHandlingOverride: true,\n  },\n\n  'medyanet': {\n    renderStartImplemented: true,\n  },\n\n  'meg': {\n    renderStartImplemented: true,\n  },\n\n  'microad': {\n    prefetch: 'https://j.microad.net/js/camp.js',\n    preconnect: [\n      'https://s-rtb.send.microad.jp',\n      'https://s-rtb.send.microadinc.com',\n      'https://cache.send.microad.jp',\n      'https://cache.send.microadinc.com',\n      'https://deb.send.microad.jp',\n    ],\n  },\n\n  'miximedia': {\n    renderStartImplemented: true,\n  },\n\n  'mixpo': {\n    prefetch: 'https://cdn.mixpo.com/js/loader.js',\n    preconnect: [\n      'https://player1.mixpo.com',\n      'https://player2.mixpo.com',\n    ],\n  },\n\n  'monetizer101': {\n    renderStartImplemented: true,\n  },\n\n  'mytarget': {\n    prefetch: 'https://ad.mail.ru/static/ads-async.js',\n    renderStartImplemented: true,\n  },\n\n  'mywidget': {\n    preconnect: 'https://likemore-fe.go.mail.ru',\n    prefetch: 'https://likemore-go.imgsmail.ru/widget_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'nativo': {\n    prefetch: 'https://s.ntv.io/serve/load.js',\n  },\n\n  'navegg': {\n    renderStartImplemented: true,\n  },\n\n  'nend': {\n    prefetch: 'https://js1.nend.net/js/amp.js',\n    preconnect: [\n      'https://output.nend.net',\n      'https://img1.nend.net',\n    ],\n  },\n\n  'netletix': {\n    preconnect: [\n      'https://call.netzathleten-media.de',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'noddus': {\n    prefetch: 'https://noddus.com/amp_loader.js',\n    renderStartImplemented: true,\n  },\n\n  'nokta': {\n    prefetch: 'https://static.virgul.com/theme/mockups/noktaamp/ampjs.js',\n    renderStartImplemented: true,\n  },\n\n  'openadstream': {},\n\n  'openx': {\n    prefetch: 'https://www.googletagservices.com/tag/js/gpt.js',\n    preconnect: [\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'outbrain': {\n    renderStartImplemented: true,\n    prefetch: 'https://widgets.outbrain.com/widgetAMP/outbrainAMP.min.js',\n    preconnect: [\n      'https://odb.outbrain.com',\n    ],\n    consentHandlingOverride: true,\n  },\n\n  'pixels': {\n    prefetch: 'https://cdn.adsfactor.net/amp/pixels-amp.min.js',\n    clientIdCookieName: '__AF',\n    renderStartImplemented: true,\n  },\n\n  'plista': {},\n\n  'polymorphicads': {\n    prefetch: 'https://www.polymorphicads.jp/js/amp.js',\n    preconnect: [\n      'https://img.polymorphicads.jp',\n      'https://ad.polymorphicads.jp',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'popin': {\n    renderStartImplemented: true,\n  },\n\n  'postquare': {},\n\n  'pubexchange': {},\n\n  'pubguru': {\n    renderStartImplemented: true,\n  },\n\n  'pubmatic': {\n    prefetch: 'https://ads.pubmatic.com/AdServer/js/amp.js',\n  },\n\n  'pubmine': {\n    prefetch: [\n      'https://s.pubmine.com/head.js',\n      'https://s.pubmine.com/showad.js',\n    ],\n    preconnect: 'https://delivery.g.switchadhub.com',\n    renderStartImplemented: true,\n  },\n\n  'pulsepoint': {\n    prefetch: 'https://ads.contextweb.com/TagPublish/getjs.static.js',\n    preconnect: 'https://tag.contextweb.com',\n  },\n\n  'purch': {\n    prefetch: 'https://ramp.purch.com/serve/creative_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'quoraad': {\n    prefetch: 'https://a.quora.com/amp_ad.js',\n    preconnect: 'https://ampad.quora.com',\n    renderStartImplemented: true,\n  },\n\n  'realclick': {\n    renderStartImplemented: true,\n  },\n\n  'relap': {\n    renderStartImplemented: true,\n  },\n\n  'revcontent': {\n    prefetch: 'https://labs-cdn.revcontent.com/build/amphtml/revcontent.amp.min.js',\n    preconnect: [\n      'https://trends.revcontent.com',\n      'https://cdn.revcontent.com',\n      'https://img.revcontent.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'revjet': {\n    prefetch: 'https://cdn.revjet.com/~cdn/JS/03/amp.js',\n    renderStartImplemented: true,\n  },\n\n  'rubicon': {},\n\n  'sekindo': {\n    renderStartImplemented: true,\n  },\n\n  'sharethrough': {\n    renderStartImplemented: true,\n  },\n\n  'sklik': {\n    prefetch: 'https://c.imedia.cz/js/amp.js',\n  },\n\n  'slimcutmedia': {\n    preconnect: [\n      'https://sb.freeskreen.com',\n      'https://static.freeskreen.com',\n      'https://video.freeskreen.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'smartadserver': {\n    prefetch: 'https://ec-ns.sascdn.com/diff/js/amp.v0.js',\n    preconnect: 'https://static.sascdn.com',\n    renderStartImplemented: true,\n  },\n\n  'smartclip': {\n    prefetch: 'https://cdn.smartclip.net/amp/amp.v0.js',\n    preconnect: 'https://des.smartclip.net',\n    renderStartImplemented: true,\n  },\n\n  'smi2': {\n    renderStartImplemented: true,\n  },\n\n  'sogouad': {\n    prefetch: 'https://theta.sogoucdn.com/wap/js/aw.js',\n    renderStartImplemented: true,\n  },\n\n  'sortable': {\n    prefetch: 'https://www.googletagservices.com/tag/js/gpt.js',\n    preconnect: [\n      'https://tags-cdn.deployads.com',\n      'https://partner.googleadservices.com',\n      'https://securepubads.g.doubleclick.net',\n      'https://tpc.googlesyndication.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'sovrn': {\n    prefetch: 'https://ap.lijit.com/www/sovrn_amp/sovrn_ads.js',\n  },\n\n  'spotx': {\n    preconnect: 'https://js.spotx.tv',\n    renderStartImplemented: true,\n  },\n\n  'sunmedia': {\n    prefetch: 'https://vod.addevweb.com/sunmedia/amp/ads/sunmedia.js',\n    preconnect: 'https://static.addevweb.com',\n    renderStartImplemented: true,\n  },\n\n  'swoop': {\n    prefetch: 'https://www.swoop-amp.com/amp.js',\n    preconnect: [\n      'https://www.swpsvc.com',\n      'https://client.swpcld.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'taboola': {},\n\n  'teads': {\n    prefetch: 'https://cdn.teads.tv/media/format/v3/teads-format.min.js',\n    preconnect: [\n      'https://cdn2.teads.tv',\n      'https://a.teads.tv',\n      'https://t.teads.tv',\n    ],\n  },\n\n  'triplelift': {},\n\n  'trugaze': {\n    clientIdScope: '__tg_amp',\n    renderStartImplemented: true,\n  },\n\n  'uas': {\n    prefetch: 'https://ads.pubmatic.com/AdServer/js/phoenix.js',\n  },\n\n  'uzou': {\n    preconnect: [\n      'https://speee-ad.akamaized.net',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'unruly': {\n    prefetch: 'https://video.unrulymedia.com/amp-demo/native-loader.js',\n    renderStartImplemented: true,\n  },\n\n  'valuecommerce': {\n    prefetch: 'https://amp.valuecommerce.com/amp_bridge.js',\n    preconnect: [\n      'https://ad.jp.ap.valuecommerce.com',\n      'https://ad.omks.valuecommerce.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'videointelligence': {\n    preconnect: 'https://s.vi-serve.com',\n    renderStartImplemented: true,\n  },\n\n  'videonow': {\n    renderStartImplemented: true,\n  },\n\n  'viralize': {\n    renderStartImplemented: true,\n  },\n\n  'vmfive': {\n    prefetch: 'https://man.vm5apis.com/dist/adn-web-sdk.js',\n    preconnect: [\n      'https://vawpro.vm5apis.com',\n      'https://vahfront.vm5apis.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'webediads': {\n    prefetch: 'https://eu1.wbdds.com/amp.min.js',\n    preconnect: [\n      'https://goutee.top',\n      'https://mediaathay.org.uk',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'weborama-display': {\n    prefetch: [\n      'https://cstatic.weborama.fr/js/advertiserv2/adperf_launch_1.0.0_scrambled.js',\n      'https://cstatic.weborama.fr/js/advertiserv2/adperf_core_1.0.0_scrambled.js',\n    ],\n  },\n\n  'widespace': {},\n\n  'wisteria': {\n    renderStartImplemented: true,\n  },\n\n  'wpmedia': {\n    prefetch: 'https://std.wpcdn.pl/wpjslib/wpjslib-amp.js',\n    preconnect: [\n      'https://www.wp.pl',\n      'https://v.wpimg.pl',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'xlift': {\n    prefetch: 'https://cdn.x-lift.jp/resources/common/xlift_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'yahoo': {\n    prefetch: 'https://s.yimg.com/os/ampad/display.js',\n    preconnect: 'https://us.adserver.yahoo.com',\n  },\n\n  'yahoojp': {\n    prefetch: [\n      'https://s.yimg.jp/images/listing/tool/yads/ydn/amp/amp.js',\n      'https://yads.c.yimg.jp/js/yads.js',\n    ],\n    preconnect: 'https://yads.yahoo.co.jp',\n  },\n\n  'yandex': {\n    prefetch: 'https://yastatic.net/partner-code/loaders/context_amp.js',\n    renderStartImplemented: true,\n  },\n\n  'yengo': {\n    renderStartImplemented: true,\n  },\n\n  'yieldbot': {\n    prefetch: [\n      'https://cdn.yldbt.com/js/yieldbot.intent.amp.js',\n      'https://msg.yldbt.com/js/ybmsg.html',\n    ],\n    preconnect: 'https://i.yldbt.com',\n  },\n\n  'yieldmo': {\n    prefetch: 'https://static.yieldmo.com/ym.1.js',\n    preconnect: [\n      'https://s.yieldmo.com',\n      'https://ads.yieldmo.com',\n    ],\n    renderStartImplemented: true,\n  },\n\n  'yieldone': {\n    prefetch: 'https://img.ak.impact-ad.jp/ic/pone/commonjs/yone-amp.js',\n  },\n\n  'yieldpro': {\n    preconnect: 'https://creatives.yieldpro.eu',\n    renderStartImplemented: true,\n  },\n\n  'zedo': {\n    prefetch: 'https://ss3.zedo.com/gecko/tag/Gecko.amp.min.js',\n    renderStartImplemented: true,\n  },\n\n  'zergnet': {},\n\n  'zucks': {\n    preconnect: [\n      'https://j.zucks.net.zimg.jp',\n      'https://sh.zucks.net',\n      'https://k.zucks.net',\n      'https://static.zucks.net.zimg.jp',\n    ],\n  },\n\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExperimentInfo, // eslint-disable-line no-unused-vars\n  forceExperimentBranch,\n  getExperimentBranch,\n  randomlySelectUnsetExperiments,\n} from '../../../src/experiments';\nimport {\n  addExperimentIdToElement,\n} from './traffic-experiments';\n\n/**\n * Attempts to select into experiment and forces branch if selected.\n * @param {!Window} win\n * @param {!Element} element\n * @param {!Array<string>} branches\n * @param {string} expName\n * @param {boolean=} optAddExpIdToElement\n */\nexport function selectAndSetExperiments(\n  win, element, branches, expName, optAddExpIdToElement) {\n  const experimentId = expUtils.maybeSelectExperiment(\n      win, element, branches, expName);\n  if (!!experimentId) {\n    addExperimentIdToElement(optAddExpIdToElement ?\n      experimentId : undefined, element);\n    forceExperimentBranch(win, expName, experimentId);\n  }\n  return experimentId;\n}\n\nexport class ExperimentUtils {\n  /**\n   * @param {!Window} win\n   * @param {!Element} element\n   * @param {!Array<string>} selectionBranches\n   * @param {string} experimentName\n   */\n  maybeSelectExperiment(\n    win, element, selectionBranches, experimentName) {\n    const experimentInfoMap =\n    /** @type {!Object<string, !ExperimentInfo>} */ ({});\n    experimentInfoMap[experimentName] = {\n      isTrafficEligible: () => true,\n      branches: selectionBranches,\n    };\n    randomlySelectUnsetExperiments(win, experimentInfoMap);\n    return getExperimentBranch(win, experimentName);\n  }\n}\n\n/**\n * ExperimentUtils singleton.\n * @type {!ExperimentUtils}\n*/\nconst expUtils = new ExperimentUtils();\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryParseJson} from '../../../src/json';\n\n/**\n  * Handles an XHR response by calling lineCallback for each line delineation.\n  * Uses streaming where possible otherwise falls back to text.\n  * @param {!Window} win\n  * @param {!../../../src/utils/xhr-utils.FetchResponse} response\n  * @param {function(string, boolean)} lineCallback\n  * @private\n  */\nexport function lineDelimitedStreamer(win, response, lineCallback) {\n  let line = '';\n  /**\n   * @param {string} text\n   * @param {boolean} done\n   */\n  function streamer(text, done) {\n    const regex = /([^\\n]*)(\\n)?/g;\n    let match;\n    while ((match = regex.exec(text))) {\n      line += match[1];\n      if (match[2]) {\n        lineCallback(line, done && regex.lastIndex === text.length);\n        line = '';\n      }\n      if (regex.lastIndex === text.length) {\n        break;\n      }\n    }\n  }\n  if (!response.body || !win.TextDecoder) {\n    response.text().then(text => streamer(text, true));\n    return;\n  }\n\n  const decoder = new TextDecoder('utf-8');\n  const reader = /** @type !ReadableStreamDefaultReader */ (\n    response.body.getReader());\n  reader.read().then(function chunk(result) {\n    if (result.value) {\n      streamer(\n          decoder.decode(\n              /** @type {!ArrayBuffer} */(result.value), {'stream': true}),\n          result.done);\n    }\n    if (!result.done) {\n      // More chunks to read.\n      reader.read().then(chunk);\n    }\n  });\n}\n\n/**\n  * Given each line, groups such that the first is JSON parsed and second\n  * html unescaped.\n  * @param {function(string, !Object<string, *>, boolean)} callback\n  * @private\n  */\nexport function metaJsonCreativeGrouper(callback) {\n  let first;\n  return function(line, done) {\n    if (first) {\n      const metadata =\n      /** @type {!Object<string, *>} */(tryParseJson(first) || {});\n      const lowerCasedMetadata =\n          Object.keys(metadata).reduce((newObj, key) => {\n            newObj[key.toLowerCase()] = metadata[key];\n            return newObj;\n          }, {});\n      callback(unescapeLineDelimitedHtml_(line), lowerCasedMetadata, done);\n      first = null;\n    } else {\n      first = line;\n    }\n  };\n}\n\n/**\n  * Unescapes characters that are escaped in line-delimited JSON-HTML.\n  * @param {string} html An html snippet.\n  * @return {string}\n  * @private\n  */\nfunction unescapeLineDelimitedHtml_(html) {\n  return html.replace(\n      /\\\\(n|r|\\\\)/g,\n      (_, match) => match == 'n' ? '\\n' : match == 'r' ? '\\r' : '\\\\');\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Machinery for doing \"traffic-level\" experiments.  That is, rather than\n * a single user choosing to opt-in to an experimental version of a module,\n * this framework allows you to do randomized, controlled experiments on all\n * AMP page loads to, for example, test relative performance or look for\n * impacts on click-throughs.\n */\n\nimport {\n  EXPERIMENT_ATTRIBUTE,\n  mergeExperimentIds,\n} from './utils';\nimport {\n  ExperimentInfo, // eslint-disable-line no-unused-vars\n  isExperimentOn,\n} from '../../../src/experiments';\nimport {Services} from '../../../src/services';\nimport {parseQueryString} from '../../../src/url';\n\n/** @typedef {{\n *    control: string,\n *    experiment: string\n *  }} */\nexport let A4aExperimentBranches;\n\n/** @type {string} @private */\nexport const MANUAL_EXPERIMENT_ID = '117152632';\n\n/**\n * @param {!Window} win\n * @param {!Element} element Ad tag Element.\n * @return {?string} experiment extracted from page url.\n */\nexport function extractUrlExperimentId(win, element) {\n  const expParam = Services.viewerForDoc(element).getParam('exp') ||\n    parseQueryString(win.location.search)['exp'];\n  if (!expParam) {\n    return null;\n  }\n  // Allow for per type experiment control with Doubleclick key set for 'da'\n  // and AdSense using 'aa'.  Fallback to 'a4a' if type specific is missing.\n  const expKeys = [\n    (element.getAttribute('type') || '').toLowerCase() == 'doubleclick' ?\n      'da' : 'aa',\n    'a4a',\n  ];\n  let arg;\n  let match;\n  expKeys.forEach(key => arg = arg ||\n    ((match = new RegExp(`(?:^|,)${key}:(-?\\\\d+)`).exec(expParam)) &&\n      match[1]));\n  return arg || null;\n}\n\n/**\n * Sets of experiment IDs can be attached to Elements via attributes.  In\n * that case, we encode them as a string containing a comma-separated list\n * of experiment IDs.  This parses a comma-separated list from a string into\n * a list of ID strings.  If the input string is empty or null, this returns\n * the empty list.  This does no validity checking on the ID formats -- for\n * that, use validateExperimentIds.\n *\n * @param {?string} idString  String to parse.\n * @return {!Array<string>}  List of experiment IDs (possibly empty).\n * @see validateExperimentIds\n */\nexport function parseExperimentIds(idString) {\n  if (idString) {\n    return idString.split(',');\n  }\n  return [];\n}\n\n/**\n * Checks whether the given element is a member of the given experiment branch.\n * I.e., whether the element's data-experiment-id attribute contains the id\n * value (possibly because the host page URL contains a 'exp=a4a:X' parameter\n * and #maybeSetExperimentFromUrl has added the appropriate EID).\n *\n * @param {!Element} element Element to check for membership in a specific\n *   experiment.\n * @param {?string} id Experiment ID to check for on `element`.\n * @return {boolean}\n */\nexport function isInExperiment(element, id) {\n  return parseExperimentIds(element.getAttribute(EXPERIMENT_ATTRIBUTE)).some(\n      x => { return x === id; });\n}\n\n/**\n * Checks whether the given element is a member of the 'manually triggered\n * \"experiment\" branch'.  I.e., whether the element's data-experiment-id\n * attribute contains the MANUAL_EXPERIMENT_ID value (hopefully because the\n * user has manually specified 'exp=a4a:-1' in the host page URL and\n * #maybeSetExperimentFromUrl has added it).\n *\n * @param {!Element} element  Element to check for manual experiment membership.\n * @return {boolean}\n */\nexport function isInManualExperiment(element) {\n  return isInExperiment(element, MANUAL_EXPERIMENT_ID);\n}\n\n/**\n * Predicate to check whether A4A has launched yet or not.\n * If it has not yet launched, then the experimental branch serves A4A, and\n * control/filler do not. If it has not, then the filler and control branch do\n * serve A4A, and the experimental branch does not.\n *\n * @param {!Window} win  Host window for the ad.\n * @param {!Element} element  Element to check for pre-launch membership.\n * @return {boolean}\n */\nexport function hasLaunched(win, element) {\n  switch (element.getAttribute('type')) {\n    case 'adsense':\n      return isExperimentOn(win, 'a4aFastFetchAdSenseLaunched');\n    case 'doubleclick':\n      return isExperimentOn(win, 'a4aFastFetchDoubleclickLaunched');\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks that all string experiment IDs in a list are syntactically valid\n * (integer base 10).\n *\n * @param {!Array<string>} idList  List of experiment IDs.  Can be empty.\n * @return {boolean} Whether all list elements are valid experiment IDs.\n */\nexport function validateExperimentIds(idList) {\n  return idList.every(id => { return !isNaN(parseInt(id, 10)); });\n}\n\n/**\n * Adds a single experimentID to an element iff it's a valid experiment ID.\n * No-ops if the experimentId is undefined.\n *\n * @param {string|undefined} experimentId  ID to add to the element.\n * @param {Element} element to add the experiment ID to.\n */\nexport function addExperimentIdToElement(experimentId, element) {\n  if (!experimentId) {\n    return;\n  }\n  const currentEids = element.getAttribute(EXPERIMENT_ATTRIBUTE);\n  if (currentEids && validateExperimentIds(parseExperimentIds(currentEids))) {\n    element.setAttribute(EXPERIMENT_ATTRIBUTE,\n        mergeExperimentIds([experimentId], currentEids));\n  } else {\n    element.setAttribute(EXPERIMENT_ATTRIBUTE, experimentId);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {{name: string, value: (string|number|null)}} */\nexport let QueryParameterDef;\n\n/**\n * Builds a URL from query parameters, truncating to a maximum length if\n * necessary.\n * @param {string} baseUrl scheme, domain, and path for the URL.\n * @param {!Object<string,string|number|null>} queryParams query parameters for\n *     the URL.\n * @param {number} maxLength length to truncate the URL to if necessary.\n * @param {?QueryParameterDef=} opt_truncationQueryParam query parameter to\n *     append to the URL iff any query parameters were truncated.\n * @return {string} the fully constructed URL.\n */\nexport function buildUrl(\n  baseUrl, queryParams, maxLength, opt_truncationQueryParam) {\n  const encodedParams = [];\n  const encodedTruncationParam =\n      opt_truncationQueryParam &&\n      !(opt_truncationQueryParam.value == null ||\n      opt_truncationQueryParam.value === '') ?\n        encodeURIComponent(opt_truncationQueryParam.name) + '=' +\n      encodeURIComponent(String(opt_truncationQueryParam.value)) :\n        null;\n  let capacity = maxLength - baseUrl.length;\n  if (encodedTruncationParam) {\n    capacity -= encodedTruncationParam.length + 1;\n  }\n  const keys = Object.keys(queryParams);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    const value = queryParams[key];\n    if (value == null || value === '') {\n      continue;\n    }\n    const encodedNameAndSep = encodeURIComponent(key) + '=';\n    const encodedValue = encodeURIComponent(String(value));\n    const fullLength = encodedNameAndSep.length + encodedValue.length + 1;\n    if (fullLength > capacity) {\n      const truncatedValue = encodedValue\n          .substr(0, capacity - encodedNameAndSep.length - 1)\n      // Don't end with a partially truncated escape sequence\n          .replace(/%\\w?$/, '');\n      if (truncatedValue) {\n        encodedParams.push(encodedNameAndSep + truncatedValue);\n      }\n      if (encodedTruncationParam) {\n        encodedParams.push(encodedTruncationParam);\n      }\n      break;\n    }\n    encodedParams.push(encodedNameAndSep + encodedValue);\n    capacity -= fullLength;\n  }\n  if (!encodedParams.length) {\n    return baseUrl;\n  }\n  return baseUrl + '?' + encodedParams.join('&');\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DomFingerprint} from '../../../src/utils/dom-fingerprint';\nimport {Services} from '../../../src/services';\nimport {buildUrl} from './url-builder';\nimport {dev} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {getBinaryType} from '../../../src/experiments';\nimport {getMode} from '../../../src/mode';\nimport {getOrCreateAdCid} from '../../../src/ad-cid';\nimport {getTimingDataSync} from '../../../src/service/variable-source';\nimport {\n  isExperimentOn,\n  toggleExperiment,\n} from '../../../src/experiments';\nimport {parseJson} from '../../../src/json';\nimport {whenUpgradedToCustomElement} from '../../../src/dom';\n\n/** @type {string}  */\nconst AMP_ANALYTICS_HEADER = 'X-AmpAnalytics';\n\n/** @const {number} */\nconst MAX_URL_LENGTH = 16384;\n\n/** @enum {string} */\nconst AmpAdImplementation = {\n  AMP_AD_XHR_TO_IFRAME: '2',\n  AMP_AD_XHR_TO_IFRAME_OR_AMP: '3',\n  AMP_AD_IFRAME_GET: '5',\n};\n\n/** @const {!Object} */\nexport const ValidAdContainerTypes = {\n  'AMP-CAROUSEL': 'ac',\n  'AMP-FX-FLYING-CARPET': 'fc',\n  'AMP-LIGHTBOX': 'lb',\n  'AMP-STICKY-AD': 'sa',\n};\n\n/**\n * See `VisibilityState` enum.\n * @const {!Object<string, string>}\n */\nconst visibilityStateCodes = {\n  'visible': '1',\n  'hidden': '2',\n  'prerender': '3',\n  'unloaded': '5',\n};\n\n/** @const {string} */\nexport const QQID_HEADER = 'X-QQID';\n\n/**\n * Element attribute that stores experiment IDs.\n *\n * Note: This attribute should be used only for tracking experimental\n * implementations of AMP tags, e.g., by AMPHTML implementors.  It should not be\n * added by a publisher page.\n *\n * @const {string}\n * @visibleForTesting\n */\nexport const EXPERIMENT_ATTRIBUTE = 'data-experiment-id';\n\n/** @typedef {{urls: !Array<string>}}\n */\nexport let AmpAnalyticsConfigDef;\n\n/**\n * @typedef {{instantLoad: boolean, writeInBody: boolean}}\n */\nexport let NameframeExperimentConfig;\n\n/**\n * @const {!./url-builder.QueryParameterDef}\n * @visibleForTesting\n */\nexport const TRUNCATION_PARAM = {name: 'trunc', value: '1'};\n\n/** @const {Object} */\nconst CDN_PROXY_REGEXP = /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org((\\/.*)|($))+/;\n\n/**\n * Returns the value of navigation start using the performance API or 0 if not\n * supported by the browser.\n * Feature detection is used for safety on browsers that do not support the\n * performance API.\n * @param {!Window} win\n * @return {number}\n */\nfunction getNavStart(win) {\n  return (win['performance'] && win['performance']['timing'] &&\n      win['performance']['timing']['navigationStart']) || 0;\n}\n\n/**\n * Check whether Google Ads supports the A4A rendering pathway is valid for the\n * environment by ensuring native crypto support and page originated in the\n * {@code cdn.ampproject.org} CDN <em>or</em> we must be running in local\n * dev mode.\n *\n * @param {!Window} win  Host window for the ad.\n * @return {boolean}  Whether Google Ads should attempt to render via the A4A\n *   pathway.\n */\nexport function isGoogleAdsA4AValidEnvironment(win) {\n  return supportsNativeCrypto(win) && (\n    !!isCdnProxy(win) || getMode(win).localDev || getMode(win).test);\n}\n\n/**\n * Checks whether native crypto is supported for win.\n * @param {!Window} win  Host window for the ad.\n * @return {boolean} Whether native crypto is supported.\n */\nexport function supportsNativeCrypto(win) {\n  return win.crypto && (win.crypto.subtle || win.crypto.webkitSubtle);\n}\n\n/**\n * @param {!AMP.BaseElement} ampElement The element on whose lifecycle this\n *    reporter will be reporting.\n * @return {boolean} whether reporting is enabled for this element\n */\nexport function isReportingEnabled(ampElement) {\n  // Carve-outs: We only want to enable profiling pingbacks when:\n  //   - The ad is from one of the Google networks (AdSense or Doubleclick).\n  //   - The ad slot is in the A4A-vs-3p amp-ad control branch (either via\n  //     internal, client-side selection or via external, Google Search\n  //     selection).\n  //   - We haven't turned off profiling via the rate controls in\n  //     build-system/global-config/{canary,prod}-config.json\n  // If any of those fail, we use the `BaseLifecycleReporter`, which is a\n  // a no-op (sends no pings).\n  const type = ampElement.element.getAttribute('type');\n  const {win} = ampElement;\n  // In local dev mode, neither the canary nor prod config files is available,\n  // so manually set the profiling rate, for testing/dev.\n  if (getMode(ampElement.win).localDev && !getMode(ampElement.win).test) {\n    toggleExperiment(win, 'a4aProfilingRate', true, true);\n  }\n  return (type == 'doubleclick' || type == 'adsense') &&\n      isExperimentOn(win, 'a4aProfilingRate');\n}\n\n/**\n * Has side-effect of incrementing ifi counter on window.\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {!Array<string>=} opt_experimentIds Any experiments IDs (in addition\n *     to those specified on the ad element) that should be included in the\n *     request.\n * @return {!Object<string,null|number|string>} block level parameters\n */\nexport function googleBlockParameters(a4a, opt_experimentIds) {\n  const {element: adElement, win} = a4a;\n  const slotRect = a4a.getPageLayoutBox();\n  const iframeDepth = iframeNestingDepth(win);\n  const enclosingContainers = getEnclosingContainerTypes(adElement);\n  let eids = adElement.getAttribute('data-experiment-id');\n  if (opt_experimentIds) {\n    eids = mergeExperimentIds(opt_experimentIds, eids);\n  }\n  return {\n    'adf': DomFingerprint.generate(adElement),\n    'nhd': iframeDepth,\n    'eid': eids,\n    'adx': slotRect.left,\n    'ady': slotRect.top,\n    'oid': '2',\n    'act': enclosingContainers.length ? enclosingContainers.join() : null,\n  };\n}\n\n/**\n * @param {!Window} win\n * @param {string} type matching typing attribute.\n * @param {function(!Element):string} groupFn\n * @return {!Promise<!Object<string,!Array<!Promise<!../../../src/base-element.BaseElement>>>>}\n */\nexport function groupAmpAdsByType(win, type, groupFn) {\n  // Look for amp-ad elements of correct type or those contained within\n  // standard container type.  Note that display none containers will not be\n  // included as they will never be measured.\n  // TODO(keithwrightbos): what about slots that become measured due to removal\n  // of display none (e.g. user resizes viewport and media selector makes\n  // visible).\n  const ampAdSelector =\n      r => r.element./*OK*/querySelector(`amp-ad[type=${type}]`);\n  return Services.resourcesForDoc(win.document).getMeasuredResources(win,\n      r => {\n        const isAmpAdType = r.element.tagName == 'AMP-AD' &&\n          r.element.getAttribute('type') == type;\n        if (isAmpAdType) {\n          return true;\n        }\n        const isAmpAdContainerElement =\n          Object.keys(ValidAdContainerTypes).includes(r.element.tagName) &&\n          !!ampAdSelector(r);\n        return isAmpAdContainerElement;\n      })\n      // Need to wait on any contained element resolution followed by build\n      // of child ad.\n      .then(resources => Promise.all(resources.map(\n          resource => {\n            if (resource.element.tagName == 'AMP-AD') {\n              return resource.element;\n            }\n            // Must be container element so need to wait for child amp-ad to\n            // be upgraded.\n            return whenUpgradedToCustomElement(\n                dev().assertElement(ampAdSelector(resource)));\n          })))\n      // Group by networkId.\n      .then(elements => elements.reduce((result, element) => {\n        const groupId = groupFn(element);\n        (result[groupId] || (result[groupId] = [])).push(element.getImpl());\n        return result;\n      }, {}));\n}\n\n/**\n * @param {! ../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {number} startTime\n * @return {!Promise<!Object<string,null|number|string>>}\n */\nexport function googlePageParameters(a4a, startTime) {\n  const {win} = a4a;\n  const ampDoc = a4a.getAmpDoc();\n  return Promise.all([\n    getOrCreateAdCid(ampDoc, 'AMP_ECID_GOOGLE', '_ga'),\n    Services.viewerForDoc(ampDoc).getReferrerUrl()])\n      .then(promiseResults => {\n        const clientId = promiseResults[0];\n        const documentInfo = Services.documentInfoForDoc(ampDoc);\n        // Read by GPT for GA/GPT integration.\n        win.gaGlobal = win.gaGlobal ||\n        {cid: clientId, hid: documentInfo.pageViewId};\n        const {screen} = win;\n        const viewport = Services.viewportForDoc(ampDoc);\n        const viewportRect = viewport.getRect();\n        const viewportSize = viewport.getSize();\n        const visibilityState = Services.viewerForDoc(ampDoc)\n            .getVisibilityState();\n        return {\n          'is_amp': a4a.isXhrAllowed() ?\n            AmpAdImplementation.AMP_AD_XHR_TO_IFRAME_OR_AMP :\n            AmpAdImplementation.AMP_AD_IFRAME_GET,\n          'amp_v': '$internalRuntimeVersion$',\n          'd_imp': '1',\n          'c': getCorrelator(win, ampDoc, clientId),\n          'ga_cid': win.gaGlobal.cid || null,\n          'ga_hid': win.gaGlobal.hid || null,\n          'dt': startTime,\n          'biw': viewportRect.width,\n          'bih': viewportRect.height,\n          'u_aw': screen ? screen.availWidth : null,\n          'u_ah': screen ? screen.availHeight : null,\n          'u_cd': screen ? screen.colorDepth : null,\n          'u_w': screen ? screen.width : null,\n          'u_h': screen ? screen.height : null,\n          'u_tz': -new Date().getTimezoneOffset(),\n          'u_his': getHistoryLength(win),\n          'isw': win != win.top ? viewportSize.width : null,\n          'ish': win != win.top ? viewportSize.height : null,\n          'art': getAmpRuntimeTypeParameter(win),\n          'vis': visibilityStateCodes[visibilityState] || '0',\n          'scr_x': viewport.getScrollLeft(),\n          'scr_y': viewport.getScrollTop(),\n          'bc': getBrowserCapabilitiesBitmap(win) || null,\n          'debug_experiment_id':\n              (/(?:#|,)deid=([\\d,]+)/i.exec(win.location.hash) || [])[1] ||\n                  null,\n          'url': documentInfo.canonicalUrl,\n          'top': win != win.top ? topWindowUrlOrDomain(win) : null,\n          'loc': win.location.href == documentInfo.canonicalUrl ?\n            null : win.location.href,\n          'ref': promiseResults[1] || null,\n        };\n      });\n}\n\n/**\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {string} baseUrl\n * @param {number} startTime\n * @param {!Object<string,null|number|string>} parameters\n * @param {!Array<string>=} opt_experimentIds Any experiments IDs (in addition\n *     to those specified on the ad element) that should be included in the\n *     request.\n * @return {!Promise<string>}\n */\nexport function googleAdUrl(\n  a4a, baseUrl, startTime, parameters, opt_experimentIds) {\n  // TODO: Maybe add checks in case these promises fail.\n  const blockLevelParameters = googleBlockParameters(a4a, opt_experimentIds);\n  return googlePageParameters(a4a, startTime)\n      .then(pageLevelParameters => {\n        Object.assign(parameters, blockLevelParameters, pageLevelParameters);\n        return truncAndTimeUrl(baseUrl, parameters, startTime);\n      });\n}\n\n/**\n * @param {string} baseUrl\n * @param {!Object<string,null|number|string>} parameters\n * @param {number} startTime\n * @return {string}\n */\nexport function truncAndTimeUrl(baseUrl, parameters, startTime) {\n  return buildUrl(\n      baseUrl, parameters, MAX_URL_LENGTH - 10, TRUNCATION_PARAM)\n    + '&dtd=' + elapsedTimeWithCeiling(Date.now(), startTime);\n}\n\n/**\n * @param {!Window} win\n * @return {number}\n */\nfunction iframeNestingDepth(win) {\n  let w = win;\n  let depth = 0;\n  while (w != w.parent && depth < 100) {\n    w = w.parent;\n    depth++;\n  }\n  dev().assert(w == win.top);\n  return depth;\n}\n\n/**\n * @param {!Window} win\n * @return {number}\n */\nfunction getHistoryLength(win) {\n  // We have seen cases where accessing history length causes errors.\n  try {\n    return win.history.length;\n  } catch (e) {\n    return 0;\n  }\n}\n\n/**\n * @param {string} url\n * @return {string} hostname portion of url\n * @visibleForTesting\n */\nexport function extractHost(url) {\n  return (/^(?:https?:\\/\\/)?([^\\/\\?:]+)/i.exec(url) || [])[1] || url;\n}\n\n/**\n * @param {!Window} win\n * @return {?string}\n */\nfunction topWindowUrlOrDomain(win) {\n  const {ancestorOrigins} = win.location;\n  if (ancestorOrigins) {\n    const {origin} = win.location;\n    const topOrigin = ancestorOrigins[ancestorOrigins.length - 1];\n    if (origin == topOrigin) {\n      return win.top.location.hostname;\n    }\n    const secondFromTop = secondWindowFromTop(win);\n    if (secondFromTop == win ||\n        origin == ancestorOrigins[ancestorOrigins.length - 2]) {\n      return extractHost(secondFromTop./*OK*/document.referrer);\n    }\n    return extractHost(topOrigin);\n  } else {\n    try {\n      return win.top.location.hostname;\n    } catch (e) {}\n    const secondFromTop = secondWindowFromTop(win);\n    try {\n      return extractHost(secondFromTop./*OK*/document.referrer);\n    } catch (e) {}\n    return null;\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {!Window}\n */\nfunction secondWindowFromTop(win) {\n  let secondFromTop = win;\n  let depth = 0;\n  while (secondFromTop.parent != secondFromTop.parent.parent &&\n        depth < 100) {\n    secondFromTop = secondFromTop.parent;\n    depth++;\n  }\n  dev().assert(secondFromTop.parent == win.top);\n  return secondFromTop;\n}\n\n/**\n * @param {number} time\n * @param {number} start\n * @return {(number|string)}\n */\nfunction elapsedTimeWithCeiling(time, start) {\n  const duration = time - start;\n  if (duration >= 1e6) {\n    return 'M';\n  } else if (duration >= 0) {\n    return duration;\n  }\n  return '-M';\n}\n\n/**\n * `nodeOrDoc` must be passed for correct behavior in shadow AMP (PWA) case.\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string=} opt_cid\n * @return {number} The correlator.\n */\nexport function getCorrelator(win, elementOrAmpDoc, opt_cid) {\n  if (!win.ampAdPageCorrelator) {\n    win.ampAdPageCorrelator = isExperimentOn(win, 'exp-new-correlator') ?\n      Math.floor(4503599627370496 * Math.random()) :\n      makeCorrelator(\n          Services.documentInfoForDoc(elementOrAmpDoc).pageViewId, opt_cid);\n  }\n  return win.ampAdPageCorrelator;\n}\n\n/**\n * @param {string} pageViewId\n * @param {string=} opt_clientId\n * @return {number}\n */\nfunction makeCorrelator(pageViewId, opt_clientId) {\n  const pageViewIdNumeric = Number(pageViewId || 0);\n  if (opt_clientId) {\n    return pageViewIdNumeric + ((opt_clientId.replace(/\\D/g, '') % 1e6) * 1e6);\n  } else {\n    // In this case, pageViewIdNumeric is only 4 digits => too low entropy\n    // to be useful as a page correlator.  So synthesize one from scratch.\n    // 4503599627370496 == 2^52.  The guaranteed range of JS Number is at least\n    // 2^53 - 1.\n    return Math.floor(4503599627370496 * Math.random());\n  }\n}\n\n\n/**\n * Collect additional dimensions for the brdim parameter.\n * @param {!Window} win The window for which we read the browser dimensions.\n * @param {{width: number, height: number}|null} viewportSize\n * @return {string}\n * @visibleForTesting\n */\nexport function additionalDimensions(win, viewportSize) {\n  // Some browsers throw errors on some of these.\n  let screenX, screenY, outerWidth, outerHeight, innerWidth, innerHeight;\n  try {\n    screenX = win.screenX;\n    screenY = win.screenY;\n  } catch (e) {}\n  try {\n    outerWidth = win.outerWidth;\n    outerHeight = win.outerHeight;\n  } catch (e) {}\n  try {\n    innerWidth = viewportSize.width;\n    innerHeight = viewportSize.height;\n  } catch (e) {}\n  return [win.screenLeft,\n    win.screenTop,\n    screenX,\n    screenY,\n    win.screen ? win.screen.availWidth : undefined,\n    win.screen ? win.screen.availTop : undefined,\n    outerWidth,\n    outerHeight,\n    innerWidth,\n    innerHeight].join();\n}\n\n/**\n * Returns amp-analytics config for a new CSI trigger.\n * @param {string} on The name of the analytics trigger.\n * @param {!Object<string, string>} params Params to be included on the ping.\n * @return {!JsonObject}\n */\nfunction csiTrigger(on, params) {\n  return dict({\n    'on': on,\n    'request': 'csi',\n    'sampleSpec': {\n      // Pings are sampled on a per-pageview basis. A prefix is included in the\n      // sampleOn spec so that the hash is orthogonal to any other sampling in\n      // amp.\n      'sampleOn': 'a4a-csi-${pageViewId}',\n      'threshold': 1, // 1% sample\n    },\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'extraUrlParams': params,\n  });\n}\n\n/**\n * Returns amp-analytics config for Google ads network impls.\n * @return {!JsonObject}\n */\nexport function getCsiAmpAnalyticsConfig() {\n  return dict({\n    'requests': {\n      'csi': 'https://csi.gstatic.com/csi?',\n    },\n    'transport': {'xhrpost': false},\n    'triggers': {\n      'adRequestStart': csiTrigger('ad-request-start', {\n        // afs => ad fetch start\n        'met.a4a': 'afs_lvt.${viewerLastVisibleTime}~afs.${time}',\n      }),\n      'adResponseEnd': csiTrigger('ad-response-end', {\n        // afe => ad fetch end\n        'met.a4a': 'afe.${time}',\n      }),\n      'adRenderStart': csiTrigger('ad-render-start', {\n        // ast => ad schedule time\n        // ars => ad render start\n        'met.a4a':\n            'ast.${scheduleTime}~ars_lvt.${viewerLastVisibleTime}~ars.${time}',\n        'qqid': '${qqid}',\n      }),\n      'adIframeLoaded': csiTrigger('ad-iframe-loaded', {\n        // ail => ad iframe loaded\n        'met.a4a': 'ail.${time}',\n      }),\n    },\n    'extraUrlParams': {\n      's': 'ampad',\n      'ctx': '2',\n      'c': '${correlator}',\n      'slotId': '${slotId}',\n      // Time that the beacon was actually sent. Note that there can be delays\n      // between the time at which the event is fired and when ${nowMs} is\n      // evaluated when the URL is built by amp-analytics.\n      'puid': '${requestCount}~${timestamp}',\n    },\n  });\n}\n\n/**\n * Returns variables to be included in the amp-analytics event for A4A.\n * @param {string} analyticsTrigger The name of the analytics trigger.\n * @param {!AMP.BaseElement} a4a The A4A element.\n * @param {?string} qqid The query ID or null if the query ID has not been set\n *     yet.\n */\nexport function getCsiAmpAnalyticsVariables(analyticsTrigger, a4a, qqid) {\n  const {win} = a4a;\n  const ampdoc = a4a.getAmpDoc();\n  const viewer = Services.viewerForDoc(ampdoc);\n  const navStart = getNavStart(win);\n  const vars = {\n    'correlator': getCorrelator(win, ampdoc),\n    'slotId': a4a.element.getAttribute('data-amp-slot-index'),\n    'viewerLastVisibleTime': viewer.getLastVisibleTime() - navStart,\n  };\n  if (qqid) {\n    vars['qqid'] = qqid;\n  }\n  if (analyticsTrigger == 'ad-render-start') {\n    vars['scheduleTime'] = a4a.element.layoutScheduleTime - navStart;\n  }\n  return vars;\n}\n\n/**\n * Extracts configuration used to build amp-analytics element for active view.\n *\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {!../../../src/utils/xhr-utils.FetchResponseHeaders} responseHeaders\n *   XHR service FetchResponseHeaders object containing the response\n *   headers.\n * @return {?JsonObject} config or null if invalid/missing.\n */\nexport function extractAmpAnalyticsConfig(a4a, responseHeaders) {\n  if (!responseHeaders.has(AMP_ANALYTICS_HEADER)) {\n    return null;\n  }\n  try {\n    const analyticsConfig =\n        parseJson(responseHeaders.get(AMP_ANALYTICS_HEADER));\n    dev().assert(Array.isArray(analyticsConfig['url']));\n    const urls = analyticsConfig['url'];\n    if (!urls.length) {\n      return null;\n    }\n\n    const config = /** @type {JsonObject}*/ ({\n      'transport': {'beacon': false, 'xhrpost': false},\n      'triggers': {\n        'continuousVisible': {\n          'on': 'visible',\n          'visibilitySpec': {\n            'selector': 'amp-ad',\n            'selectionMethod': 'closest',\n            'visiblePercentageMin': 50,\n            'continuousTimeMin': 1000,\n          },\n        },\n      },\n    });\n\n    // Discover and build visibility endpoints.\n    const requests = dict();\n    for (let idx = 1; idx <= urls.length; idx++) {\n      // TODO: Ensure url is valid and not freeform JS?\n      requests[`visibility${idx}`] = `${urls[idx - 1]}`;\n    }\n    // Security review needed here.\n    config['requests'] = requests;\n    config['triggers']['continuousVisible']['request'] =\n        Object.keys(requests);\n    return config;\n  } catch (err) {\n    dev().error('AMP-A4A', 'Invalid analytics', err,\n        responseHeaders.get(AMP_ANALYTICS_HEADER));\n  }\n  return null;\n}\n\n/**\n * Add new experiment IDs to a (possibly empty) existing set of experiment IDs.\n * The {@code currentIdString} may be {@code null} or {@code ''}, but if it is\n * populated, it must contain a comma-separated list of integer experiment IDs\n * (per {@code parseExperimentIds()}).  Returns the new set of IDs, encoded\n * as a comma-separated list.  Does not de-duplicate ID entries.\n *\n * @param {!Array<string>} newIds IDs to merge in. Should contain stringified\n *     integer (base 10) experiment IDs.\n * @param {?string} currentIdString  If present, a string containing a\n *   comma-separated list of integer experiment IDs.\n * @return {string}  New experiment list string, including newId iff it is\n *   a valid (integer) experiment ID.\n * @see parseExperimentIds, validateExperimentIds\n */\nexport function mergeExperimentIds(newIds, currentIdString) {\n  const newIdString = newIds.filter(newId => Number(newId)).join(',');\n  currentIdString = currentIdString || '';\n  return currentIdString + (currentIdString && newIdString ? ',' : '')\n      + newIdString;\n}\n\n/**\n * Adds two CSI signals to the given amp-analytics configuration object, one\n * for render-start, and one for ini-load.\n *\n * @param {!Window} win\n * @param {!Element} element The ad slot.\n * @param {!JsonObject} config The original config object.\n * @param {?string} qqid\n * @param {boolean} isVerifiedAmpCreative\n * @return {?JsonObject} config or null if invalid/missing.\n */\nexport function addCsiSignalsToAmpAnalyticsConfig(\n  win, element, config, qqid, isVerifiedAmpCreative) {\n  // Add CSI pingbacks.\n  const correlator = getCorrelator(win, element);\n  const slotId = Number(element.getAttribute('data-amp-slot-index'));\n  const eids = encodeURIComponent(\n      element.getAttribute(EXPERIMENT_ATTRIBUTE));\n  const adType = element.getAttribute('type');\n  const initTime =\n      Number(getTimingDataSync(win, 'navigationStart') || Date.now());\n  const deltaTime = Math.round(win.performance && win.performance.now ?\n    win.performance.now() : (Date.now() - initTime));\n  const baseCsiUrl = 'https://csi.gstatic.com/csi?s=a4a' +\n      `&c=${correlator}&slotId=${slotId}&qqid.${slotId}=${qqid}` +\n      `&dt=${initTime}` +\n      (eids != 'null' ? `&e.${slotId}=${eids}` : '') +\n      `&rls=$internalRuntimeVersion$&adt.${slotId}=${adType}`;\n  const isAmpSuffix = isVerifiedAmpCreative ? 'Friendly' : 'CrossDomain';\n  config['triggers']['continuousVisibleIniLoad'] = {\n    'on': 'ini-load',\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'request': 'iniLoadCsi',\n  };\n  config['triggers']['continuousVisibleRenderStart'] = {\n    'on': 'render-start',\n    'selector': 'amp-ad',\n    'selectionMethod': 'closest',\n    'request': 'renderStartCsi',\n  };\n  config['requests']['iniLoadCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=iniLoadCsi${isAmpSuffix}.${deltaTime}`;\n  config['requests']['renderStartCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=renderStartCsi${isAmpSuffix}.${deltaTime}`;\n\n  // Add CSI ping for visibility.\n  config['requests']['visibilityCsi'] = baseCsiUrl +\n      `&met.a4a.${slotId}=visibilityCsi.${deltaTime}`;\n  config['triggers']['continuousVisible']['request'].push('visibilityCsi');\n  return config;\n}\n\n/**\n * Returns an array of two-letter codes representing the amp-ad containers\n * enclosing the given ad element.\n *\n * @param {!Element} adElement\n * @return {!Array<string>}\n */\nexport function getEnclosingContainerTypes(adElement) {\n  const containerTypeSet = {};\n  for (let el = adElement.parentElement, counter = 0;\n    el && counter < 20; el = el.parentElement, counter++) {\n    const tagName = el.tagName.toUpperCase();\n    if (ValidAdContainerTypes[tagName]) {\n      containerTypeSet[ValidAdContainerTypes[tagName]] = true;\n    }\n  }\n  return Object.keys(containerTypeSet);\n}\n\n/**\n * Appends parameter to ad request indicating error state so long as error\n * parameter is not already present or url has been truncated.\n * @param {string} adUrl used for network request\n * @param {string} parameterValue to be appended\n * @return {string|undefined} potentially modified url, undefined\n */\nexport function maybeAppendErrorParameter(adUrl, parameterValue) {\n  dev().assert(!!adUrl && !!parameterValue);\n  // Add parameter indicating error so long as the url has not already been\n  // truncated and error parameter is not already present.  Note that we assume\n  // that added, error parameter length will be less than truncation parameter\n  // so adding will not cause length to exceed maximum.\n  if (new RegExp(`[?|&](${encodeURIComponent(TRUNCATION_PARAM.name)}=` +\n      `${encodeURIComponent(String(TRUNCATION_PARAM.value))}|aet=[^&]*)$`)\n      .test(adUrl)) {\n    return;\n  }\n  const modifiedAdUrl = adUrl + `&aet=${parameterValue}`;\n  dev().assert(modifiedAdUrl.length <= MAX_URL_LENGTH);\n  return modifiedAdUrl;\n}\n\n/**\n * Returns a numerical code representing the binary type.\n * @param {string} type\n * @return {?string}\n */\nexport function getBinaryTypeNumericalCode(type) {\n  return {\n    'production': '0',\n    'control': '1',\n    'canary': '2',\n  }[type] || null;\n}\n\n/** @const {!RegExp} */\nconst IDENTITY_DOMAIN_REGEXP_ = /\\.google\\.(?:com?\\.)?[a-z]{2,3}$/;\n\n/** @typedef {{\n      token: (string|undefined),\n      jar: (string|undefined),\n      pucrd: (string|undefined),\n      freshLifetimeSecs: (number|undefined),\n      validLifetimeSecs: (number|undefined),\n      fetchTimeMs: (number|undefined)\n   }} */\nexport let IdentityToken;\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @return {!Promise<!IdentityToken>}\n */\nexport function getIdentityToken(win, elementOrAmpDoc) {\n  win['goog_identity_prom'] = win['goog_identity_prom'] ||\n      executeIdentityTokenFetch(win, elementOrAmpDoc);\n  return /** @type {!Promise<!IdentityToken>} */(win['goog_identity_prom']);\n}\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {number=} redirectsRemaining (default 1)\n * @param {string=} domain\n * @param {number=} startTime\n * @return {!Promise<!IdentityToken>}\n */\nfunction executeIdentityTokenFetch(win, elementOrAmpDoc, redirectsRemaining = 1,\n  domain = undefined, startTime = Date.now()) {\n  const url = getIdentityTokenRequestUrl(win, elementOrAmpDoc, domain);\n  return Services.xhrFor(win).fetchJson(url, {\n    mode: 'cors',\n    method: 'GET',\n    ampCors: false,\n    credentials: 'include',\n  }).then(res => res.json())\n      .then(obj => {\n        const token = obj['newToken'];\n        const jar = obj['1p_jar'] || '';\n        const pucrd = obj['pucrd'] || '';\n        const freshLifetimeSecs = parseInt(obj['freshLifetimeSecs'] || '', 10);\n        const validLifetimeSecs = parseInt(obj['validLifetimeSecs'] || '', 10);\n        const altDomain = obj['altDomain'];\n        const fetchTimeMs = Date.now() - startTime;\n        if (IDENTITY_DOMAIN_REGEXP_.test(altDomain)) {\n          if (!redirectsRemaining--) {\n            // Max redirects, log?\n            return {fetchTimeMs};\n          }\n          return executeIdentityTokenFetch(\n              win, elementOrAmpDoc, redirectsRemaining, altDomain, startTime);\n        } else if (freshLifetimeSecs > 0 && validLifetimeSecs > 0 &&\n            typeof token == 'string') {\n          return {token, jar, pucrd, freshLifetimeSecs, validLifetimeSecs,\n            fetchTimeMs};\n        }\n        // returning empty\n        return {fetchTimeMs};\n      })\n      .catch(unusedErr => {\n        // TODO log?\n        return {};\n      });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element|!../../../src/service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string=} domain\n * @return {string} url\n * @visibleForTesting\n */\nexport function getIdentityTokenRequestUrl(win, elementOrAmpDoc,\n  domain = undefined) {\n  if (!domain && win != win.top && win.location.ancestorOrigins) {\n    const matches = IDENTITY_DOMAIN_REGEXP_.exec(\n        win.location.ancestorOrigins[win.location.ancestorOrigins.length - 1]);\n    domain = (matches && matches[0]) || undefined;\n  }\n  domain = domain || '.google.com';\n  const canonical =\n    extractHost(Services.documentInfoForDoc(elementOrAmpDoc).canonicalUrl);\n  return `https://adservice${domain}/adsid/integrator.json?domain=${canonical}`;\n}\n\n/**\n * Returns whether we are running on the AMP CDN.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCdnProxy(win) {\n  return CDN_PROXY_REGEXP.test(win.location.origin);\n}\n\n/**\n * Populates the fields of the given Nameframe experiment config object.\n * @param {!../../../src/utils/xhr-utils.FetchResponseHeaders} headers\n * @param {!NameframeExperimentConfig} nameframeConfig\n */\nexport function setNameframeExperimentConfigs(headers, nameframeConfig) {\n  const nameframeExperimentHeader = headers.get('amp-nameframe-exp');\n  if (nameframeExperimentHeader) {\n    nameframeExperimentHeader.split(';').forEach(config => {\n      if (config == 'instantLoad' || config == 'writeInBody') {\n        nameframeConfig[config] = true;\n      }\n    });\n  }\n}\n\n/**\n * Enum for browser capabilities. NOTE: Since JS is 32-bit, do not add anymore\n * than 32 capabilities to this enum.\n * @enum {number}\n */\nconst Capability = {\n  SVG_SUPPORTED: 1 << 0,\n  SANDBOXING_ALLOW_TOP_NAVIGATION_BY_USER_ACTIVATION_SUPPORTED: 1 << 1,\n  SANDBOXING_ALLOW_POPUPS_TO_ESCAPE_SANDBOX_SUPPORTED: 1 << 2,\n};\n\n/**\n * Returns a bitmap representing what features are supported by this browser.\n * @param {!Window} win\n * @return {number}\n */\nfunction getBrowserCapabilitiesBitmap(win) {\n  let browserCapabilities = 0;\n  const doc = win.document;\n  if (win.SVGElement && doc.createElementNS) {\n    browserCapabilities |= Capability.SVG_SUPPORTED;\n  }\n  const iframeEl = doc.createElement('iframe');\n  if (iframeEl.sandbox && iframeEl.sandbox.supports) {\n    if (iframeEl.sandbox.supports('allow-top-navigation-by-user-activation')) {\n      browserCapabilities |=\n        Capability.SANDBOXING_ALLOW_TOP_NAVIGATION_BY_USER_ACTIVATION_SUPPORTED;\n    }\n    if (iframeEl.sandbox.supports('allow-popups-to-escape-sandbox')) {\n      browserCapabilities |=\n        Capability.SANDBOXING_ALLOW_POPUPS_TO_ESCAPE_SANDBOX_SUPPORTED;\n    }\n  }\n  return browserCapabilities;\n}\n\n/**\n * Returns an enum value representing the AMP binary type, or null if this is a\n * canonical page.\n * @param {!Window} win\n * @return {?string} The binary type enum.\n * @visibleForTesting\n */\nexport function getAmpRuntimeTypeParameter(win) {\n  const art = getBinaryTypeNumericalCode(getBinaryType(win));\n  return isCdnProxy(win) && art != '0' ? art : null;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {user} from '../../src/log';\n\n/**\n * Approved height for AdSense full-width responsive ads.\n * @const {number}\n */\nexport const ADSENSE_RSPV_WHITELISTED_HEIGHT = 320;\n\n/**\n * Given the amp-ad data attribute containing the multi-size dimensions, and a\n * set of primary dimensions, this function will return all valid multi-size\n * [width, height] pairs in an array.\n *\n * @param {string} multiSizeDataStr The amp-ad data attribute containing the\n *   multi-size dimensions.\n * @param {number} primaryWidth The primary width of the ad slot.\n * @param {number} primaryHeight The primary height of the ad slot.\n * @param {boolean} multiSizeValidation A flag that if set to true will enforce\n *   the rule that ensures multi-size dimensions are no less than 2/3rds of\n *   their primary dimension's counterpart.\n * @param {boolean=} isFluid Indicates whether this ad slot is Fluid-enabled.\n * @return {?Array<!Array<number>>} An array of dimensions.\n */\nexport function getMultiSizeDimensions(\n  multiSizeDataStr,\n  primaryWidth,\n  primaryHeight,\n  multiSizeValidation,\n  isFluid = false) {\n\n  const dimensions = [];\n  const arrayOfSizeStrs = multiSizeDataStr.split(',');\n\n  for (let i = 0; i < arrayOfSizeStrs.length; i++) {\n\n    const sizeStr = arrayOfSizeStrs[i];\n    const size = sizeStr.split('x');\n\n    // Make sure that each size is specified in the form WxH.\n    if (size.length != 2) {\n      user().error('AMP-AD', `Invalid multi-size data format '${sizeStr}'.`);\n      continue;\n    }\n\n    const width = Number(size[0]);\n    const height = Number(size[1]);\n\n    // Make sure that both dimensions given are positive numbers.\n    if (!validateDimensions(width, height,\n        w => isNaN(w) || w <= 0,\n        h => isNaN(h) || h <= 0,\n        badParams => badParams.map(badParam =>\n          `Invalid ${badParam.dim} of ${badParam.val} ` +\n            'given for secondary size.').join(' '))) {\n      continue;\n    }\n\n    // Check that secondary size is not larger than primary size.\n    if (!isFluid && !validateDimensions(width, height,\n        w => w > primaryWidth,\n        h => h > primaryHeight,\n        badParams => badParams.map(badParam =>\n          `Secondary ${badParam.dim} ${badParam.val} ` +\n            `can't be larger than the primary ${badParam.dim}.`).join(' '))) {\n      continue;\n    }\n\n    // Check that if multi-size-validation is on, that the secondary sizes\n    // are at least minRatio of the primary size.\n    if (multiSizeValidation) {\n      // The minimum ratio of each secondary dimension to its corresponding\n      // primary dimension.\n      const minRatio = 2 / 3;\n      const minWidth = minRatio * primaryWidth;\n      const minHeight = minRatio * primaryHeight;\n      if (!validateDimensions(width, height,\n          w => w < minWidth,\n          h => h < minHeight,\n          badParams => badParams.map(badParam =>\n            `Secondary ${badParam.dim} ${badParam.val} is ` +\n              `smaller than 2/3rds of the primary ${badParam.dim}.`)\n              .join(' '))) {\n        continue;\n      }\n    }\n\n    // Passed all checks! Push additional size to dimensions.\n    dimensions.push([width, height]);\n  }\n\n  return dimensions;\n}\n\n/**\n * A helper function for determining whether a given width or height violates\n * some condition.\n *\n * Checks the width and height against their corresponding conditions. If\n * either of the conditions fail, the errorBuilder function will be called with\n * the appropriate arguments, its result will be logged to user().error, and\n * validateDimensions will return false. Otherwise, validateDimensions will\n * only return true.\n *\n * @param {(number|string)} width\n * @param {(number|string)} height\n * @param {function((number|string)): boolean} widthCond\n * @param {function((number|string)): boolean} heightCond\n * @param {function(!Array<{dim: string, val: (number|string)}>): string=} errorBuilder\n * A function that will produce an informative error message.\n * @return {boolean}\n */\nfunction validateDimensions(width, height, widthCond, heightCond, errorBuilder)\n{\n  const badParams = [];\n  if (widthCond(width)) {\n    badParams.push({dim: 'width', val: width});\n  }\n  if (heightCond(height)) {\n    badParams.push({dim: 'height', val: height});\n  }\n  if (badParams.length) {\n    user().warn('AMP-AD', errorBuilder(badParams));\n  }\n  return !badParams.length;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {\n  VariableSource,\n  getNavigationData,\n  getTimingDataAsync,\n  getTimingDataSync,\n} from '../../../src/service/variable-source';\nimport {user} from '../../../src/log';\n\n\nconst WHITELISTED_VARIABLES = [\n  'AMPDOC_HOST',\n  'AMPDOC_HOSTNAME',\n  'AMPDOC_URL',\n  'AMP_VERSION',\n  'AVAILABLE_SCREEN_HEIGHT',\n  'AVAILABLE_SCREEN_WIDTH',\n  'BACKGROUND_STATE',\n  'BROWSER_LANGUAGE',\n  'CANONICAL_HOST',\n  'CANONICAL_HOSTNAME',\n  'CANONICAL_PATH',\n  'CANONICAL_URL',\n  'CLIENT_ID',\n  'COUNTER',\n  'DOCUMENT_CHARSET',\n  'DOCUMENT_REFERRER',\n  'FIRST_CONTENTFUL_PAINT',\n  'FIRST_VIEWPORT_READY',\n  'MAKE_BODY_VISIBLE',\n  'PAGE_VIEW_ID',\n  'RANDOM',\n  'SCREEN_COLOR_DEPTH',\n  'SCREEN_HEIGHT',\n  'SCREEN_WIDTH',\n  'SCROLL_HEIGHT',\n  'SCROLL_LEFT',\n  'SCROLL_TOP',\n  'SCROLL_WIDTH',\n  'SHARE_TRACKING_INCOMING',\n  'SHARE_TRACKING_OUTGOING',\n  'SOURCE_HOST',\n  'SOURCE_HOSTNAME',\n  'SOURCE_PATH',\n  'SOURCE_URL',\n  'TIMESTAMP',\n  'TIMEZONE',\n  'TIMEZONE_CODE',\n  'TITLE',\n  'TOTAL_ENGAGED_TIME',\n  'USER_AGENT',\n  'VARIANT',\n  'VARIANTS',\n  'VIEWER',\n  'VIEWPORT_HEIGHT',\n  'VIEWPORT_WIDTH',\n];\n\n/** Provides A4A specific variable substitution. */\nexport class A4AVariableSource extends VariableSource {\n  /**\n   * @param  {!../../../src/service/ampdoc-impl.AmpDoc} ampdoc\n   * @param  {!Window} embedWin\n   */\n  constructor(ampdoc, embedWin) {\n    super(ampdoc);\n    /** @private {VariableSource} global variable source for fallback. */\n    this.globalVariableSource_ = Services.urlReplacementsForDoc(ampdoc)\n        .getVariableSource();\n\n    /** @private {!Window} */\n    this.win_ = embedWin;\n  }\n\n  /** @override */\n  initialize() {\n    this.set('AD_NAV_TIMING', (startAttribute, endAttribute) => {\n      user().assert(startAttribute, 'The first argument to AD_NAV_TIMING, the' +\n          ' start attribute name, is required');\n      return getTimingDataSync(\n          this.win_,\n          /**@type {string}*/(startAttribute),\n          /**@type {string}*/(endAttribute));\n    }).setAsync('AD_NAV_TIMING', (startAttribute, endAttribute) => {\n      user().assert(startAttribute, 'The first argument to AD_NAV_TIMING, the' +\n          ' start attribute name, is required');\n      return getTimingDataAsync(\n          this.win_,\n          /**@type {string}*/(startAttribute),\n          /**@type {string}*/(endAttribute));\n    });\n\n    this.set('AD_NAV_TYPE', () => {\n      return getNavigationData(this.win_, 'type');\n    });\n\n    this.set('AD_NAV_REDIRECT_COUNT', () => {\n      return getNavigationData(this.win_, 'redirectCount');\n    });\n\n    this.set('HTML_ATTR',\n        /** @type {function(...*)} */(this.htmlAttributeBinding_.bind(this)));\n\n    for (let v = 0; v < WHITELISTED_VARIABLES.length; v++) {\n      const varName = WHITELISTED_VARIABLES[v];\n      const resolvers = this.globalVariableSource_.get(varName);\n      this.set(varName, resolvers.sync).setAsync(varName, resolvers.async);\n    }\n  }\n\n  /**\n   * Provides a binding for getting attributes from the DOM.\n   * Most such bindings are provided in src/service/url-replacements-impl, but\n   * this one needs access to this.win_.document, which if the amp-analytics\n   * tag is contained within an amp-ad tag will NOT be the parent/publisher\n   * page. Hence the need to put it here.\n   * @param {string} cssSelector Elements matching this selector will be\n   *     included, provided they have at least one of the attributeNames\n   *     set, up to a max of 10. May be URI encoded.\n   * @param {...string} var_args Additional params will be the names of\n   *     attributes whose values will be returned. There should be at least 1.\n   * @return {string} A stringified JSON array containing one member for each\n   *     matching element. Each member will contain the names and values of the\n   *     specified attributes, if the corresponding element has that attribute.\n   *     Note that if an element matches the cssSelected but has none of the\n   *     requested attributes, then nothing will be included in the array\n   *     for that element.\n   */\n  htmlAttributeBinding_(cssSelector, var_args) {\n    // Generate an error if cssSelector matches more than this many elements\n    const HTML_ATTR_MAX_ELEMENTS_TO_TRAVERSE = 20;\n\n    // Of the elements matched by cssSelector, see which contain one or more\n    // of the specified attributes, and return an array of at most this many.\n    const HTML_ATTR_MAX_ELEMENTS_TO_RETURN = 10;\n\n    // Only allow at most this many attributeNames to be specified.\n    const HTML_ATTR_MAX_ATTRS = 10;\n\n    const TAG = 'A4AVariableSource';\n\n    const attributeNames = Array.prototype.slice.call(arguments, 1);\n    if (!cssSelector || !attributeNames.length) {\n      return '[]';\n    }\n    if (attributeNames.length > HTML_ATTR_MAX_ATTRS) {\n      user().error(TAG, `At most ${HTML_ATTR_MAX_ATTRS} may be requested.`);\n      return '[]';\n    }\n    cssSelector = decodeURI(cssSelector);\n    let elements;\n    try {\n      elements = this.win_.document.querySelectorAll(cssSelector);\n    } catch (e) {\n      user().error(TAG, `Invalid selector: ${cssSelector}`);\n      return '[]';\n    }\n    if (elements.length > HTML_ATTR_MAX_ELEMENTS_TO_TRAVERSE) {\n      user().error(TAG, 'CSS selector may match at most ' +\n          `${HTML_ATTR_MAX_ELEMENTS_TO_TRAVERSE} elements.`);\n      return '[]';\n    }\n    const result = [];\n    for (let i = 0; i < elements.length &&\n        result.length < HTML_ATTR_MAX_ELEMENTS_TO_RETURN; ++i) {\n      const currentResult = {};\n      let foundAtLeastOneAttr = false;\n      for (let j = 0; j < attributeNames.length; ++j) {\n        const attributeName = attributeNames[j];\n        if (elements[i].hasAttribute(attributeName)) {\n          currentResult[attributeName] =\n              elements[i].getAttribute(attributeName);\n          foundAtLeastOneAttr = true;\n        }\n      }\n      if (foundAtLeastOneAttr) {\n        result.push(currentResult);\n      }\n    }\n    return JSON.stringify(result);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {A4AVariableSource} from './a4a-variable-source';\nimport {\n  CONSENT_POLICY_STATE, // eslint-disable-line no-unused-vars\n} from '../../../src/consent-state';\nimport {Layout, isLayoutSizeDefined} from '../../../src/layout';\nimport {LayoutPriority} from '../../../src/layout';\nimport {Services} from '../../../src/services';\nimport {SignatureVerifier, VerificationStatus} from './signature-verifier';\nimport {\n  assertHttpsUrl,\n  tryDecodeUriComponent,\n} from '../../../src/url';\nimport {cancellation, isCancellation} from '../../../src/error';\nimport {createElementWithAttributes} from '../../../src/dom';\nimport {dev, duplicateErrorIfNecessary, user} from '../../../src/log';\nimport {dict} from '../../../src/utils/object';\nimport {\n  generateSentinel,\n  getDefaultBootstrapBaseUrl,\n} from '../../../src/3p-frame';\nimport {\n  getAmpAdRenderOutsideViewport,\n  incrementLoadingAds,\n  is3pThrottled,\n} from '../../amp-ad/0.1/concurrent-load';\nimport {getBinaryType} from '../../../src/experiments';\nimport {getBinaryTypeNumericalCode} from '../../../ads/google/a4a/utils';\nimport {getConsentPolicyState} from '../../../src/consent';\nimport {getContextMetadata} from '../../../src/iframe-attributes';\nimport {getMode} from '../../../src/mode';\nimport {insertAnalyticsElement} from '../../../src/extension-analytics';\nimport {\n  installFriendlyIframeEmbed,\n  setFriendlyIframeEmbedVisible,\n} from '../../../src/friendly-iframe-embed';\nimport {\n  installUrlReplacementsForEmbed,\n} from '../../../src/service/url-replacements-impl';\nimport {isAdPositionAllowed} from '../../../src/ad-helper';\nimport {isArray, isEnumValue, isObject} from '../../../src/types';\nimport {isExperimentOn} from '../../../src/experiments';\nimport {parseJson} from '../../../src/json';\nimport {setStyle} from '../../../src/style';\nimport {signingServerURLs} from '../../../ads/_a4a-config';\nimport {triggerAnalyticsEvent} from '../../../src/analytics';\nimport {tryResolve} from '../../../src/utils/promise';\nimport {utf8Decode} from '../../../src/utils/bytes';\n\n/** @type {Array<string>} */\nconst METADATA_STRINGS = [\n  '<script amp-ad-metadata type=application/json>',\n  '<script type=\"application/json\" amp-ad-metadata>',\n  '<script type=application/json amp-ad-metadata>'];\n\n// TODO(tdrl): Temporary, while we're verifying whether SafeFrame is an\n// acceptable solution to the 'Safari on iOS doesn't fetch iframe src from\n// cache' issue.  See https://github.com/ampproject/amphtml/issues/5614\n/** @type {string} */\nexport const DEFAULT_SAFEFRAME_VERSION = '1-0-23';\n\n/** @const {string} */\nexport const CREATIVE_SIZE_HEADER = 'X-CreativeSize';\n\n/** @type {string} @visibleForTesting */\nexport const RENDERING_TYPE_HEADER = 'X-AmpAdRender';\n\n/** @type {string} @visibleForTesting */\nexport const SAFEFRAME_VERSION_HEADER = 'X-AmpSafeFrameVersion';\n\n/** @type {string} @visibleForTesting */\nexport const EXPERIMENT_FEATURE_HEADER_NAME = 'amp-ff-exps';\n\n/** @type {string} @visibileForTesting */\nexport const SANDBOX_HEADER = 'amp-ff-sandbox';\n\n/** @type {string} */\nconst TAG = 'amp-a4a';\n\n/** @type {string} */\nexport const NO_CONTENT_RESPONSE = 'NO-CONTENT-RESPONSE';\n\n/** @type {string} */\nexport const NETWORK_FAILURE = 'NETWORK-FAILURE';\n\n/** @type {string} */\nexport const INVALID_SPSA_RESPONSE = 'INVALID-SPSA-RESPONSE';\n\n/** @type {string} */\nexport const IFRAME_GET = 'IFRAME-GET';\n\n/** @enum {string} */\nexport const XORIGIN_MODE = {\n  CLIENT_CACHE: 'client_cache',\n  SAFEFRAME: 'safeframe',\n  NAMEFRAME: 'nameframe',\n  IFRAME_GET: 'iframe_get',\n};\n\n/** @type {!Object} @private */\nconst SHARED_IFRAME_PROPERTIES = dict({\n  'frameborder': '0',\n  'allowfullscreen': '',\n  'allowtransparency': '',\n  'scrolling': 'no',\n  'marginwidth': '0',\n  'marginheight': '0',\n});\n\n/** @typedef {{width: number, height: number}} */\nexport let SizeInfoDef;\n\n/** @typedef {{\n      minifiedCreative: string,\n      customElementExtensions: !Array<string>,\n      customStylesheets: !Array<{href: string}>,\n      images: (Array<string>|undefined),\n      ctaType: (string|undefined),\n      ctaUrl: (string|undefined),\n    }} */\nexport let CreativeMetaDataDef;\n\n/**\n * Name of A4A lifecycle triggers.\n * @enum {string}\n */\nexport const AnalyticsTrigger = {\n  AD_REQUEST_START: 'ad-request-start',\n  AD_RESPONSE_END: 'ad-response-end',\n  AD_RENDER_START: 'ad-render-start',\n  AD_RENDER_END: 'ad-render-end',\n  AD_IFRAME_LOADED: 'ad-iframe-loaded',\n  // This trigger is not part of the normal ads lifecycle and only fires when an\n  // ad is refreshed.\n  AD_REFRESH: 'ad-refresh',\n};\n\n/**\n * Maps the names of lifecycle events to analytics triggers.\n * @const {!Object<string, !AnalyticsTrigger>}\n */\nconst LIFECYCLE_STAGE_TO_ANALYTICS_TRIGGER = {\n  'adRequestStart': AnalyticsTrigger.AD_REQUEST_START,\n  'adRequestEnd': AnalyticsTrigger.AD_RESPONSE_END,\n  'renderFriendlyStart': AnalyticsTrigger.AD_RENDER_START,\n  'renderCrossDomainStart': AnalyticsTrigger.AD_RENDER_START,\n  'renderSafeFrameStart': AnalyticsTrigger.AD_RENDER_START,\n  'renderFriendlyEnd': AnalyticsTrigger.AD_RENDER_END,\n  'renderCrossDomainEnd': AnalyticsTrigger.AD_RENDER_END,\n  'friendlyIframeIniLoad': AnalyticsTrigger.AD_IFRAME_LOADED,\n  'crossDomainIframeLoaded': AnalyticsTrigger.AD_IFRAME_LOADED,\n};\n\n/**\n * The sandboxing flags to use when applying the \"sandbox\" attribute to ad\n * iframes. See http://go/mdn/HTML/Element/iframe#attr-sandbox.\n * @const {string} @visibleForTesting\n */\nexport const IFRAME_SANDBOXING_FLAGS = 'allow-forms allow-pointer-lock ' +\n    'allow-popups allow-popups-to-escape-sandbox allow-same-origin ' +\n    'allow-scripts allow-top-navigation-by-user-activation';\n\n/**\n * Utility function that ensures any error thrown is handled by optional\n * onError handler (if none provided or handler throws, error is swallowed and\n * undefined is returned).\n * @param {!Function} fn to protect\n * @param {T=} inThis An optional object to use as the 'this' object\n *    when calling the function.  If not provided, undefined is bound as this\n *    when calling function.\n * @param {function(this:T, !Error, ...*):?=} onError function given error\n *    and arguments provided to function call.\n * @return {!Function} protected function\n * @template T\n * @visibleForTesting\n */\nexport function protectFunctionWrapper(\n  fn, inThis = undefined, onError = undefined) {\n  return (...fnArgs) => {\n    try {\n      return fn.apply(inThis, fnArgs);\n    } catch (err) {\n      if (onError) {\n        try {\n          // Ideally we could use [err, ...var_args] but linter disallows\n          // spread so instead using unshift :(\n          fnArgs.unshift(err);\n          return onError.apply(inThis, fnArgs);\n        } catch (captureErr) {\n          // swallow error if error handler throws.\n        }\n      }\n      // In the event of no optional on error function or its execution throws,\n      // return undefined.\n      return undefined;\n    }\n  };\n}\n\n/** Abstract class for AMP Ad Fast Fetch enabled networks */\nexport class AmpA4A extends AMP.BaseElement {\n  // TODO: Add more error handling throughout code.\n  // TODO: Handle creatives that do not fill.\n\n  /**\n   * @param {!Element} element\n   */\n  constructor(element) {\n    super(element);\n    dev().assert(AMP.AmpAdUIHandler);\n    dev().assert(AMP.AmpAdXOriginIframeHandler);\n\n    /** @private {?Promise<undefined>} */\n    this.keysetPromise_ = null;\n\n    /** @private {?Promise<?CreativeMetaDataDef>} */\n    this.adPromise_ = null;\n\n    /**\n     * @private {number} unique ID of the currently executing promise to allow\n     * for cancellation.\n     */\n    this.promiseId_ = 0;\n\n    /** @private {?string} */\n    this.adUrl_ = null;\n\n    /** @private {?../../../src/friendly-iframe-embed.FriendlyIframeEmbed} */\n    this.friendlyIframeEmbed_ = null;\n\n    /** {?AMP.AmpAdUIHandler} */\n    this.uiHandler = null;\n\n    /** @private {?AMP.AmpAdXOriginIframeHandler} */\n    this.xOriginIframeHandler_ = null;\n\n    /** @private {boolean} whether creative has been verified as AMP */\n    this.isVerifiedAmpCreative_ = false;\n\n    /** @private {?ArrayBuffer} */\n    this.creativeBody_ = null;\n\n    /**\n     * Initialize this with the slot width/height attributes, and override\n     * later with what the network implementation returns via extractSize.\n     * Note: Either value may be 'auto' (i.e., non-numeric).\n     *\n     * @private {?({width, height}|../../../src/layout-rect.LayoutRectDef)}\n     */\n    this.creativeSize_ = null;\n\n    /** @private {?../../../src/layout-rect.LayoutRectDef} */\n    this.originalSlotSize_ = null;\n\n    /**\n     * Note(keithwrightbos) - ensure the default here is null so that ios\n     * uses safeframe when response header is not specified.\n     * @private {?XORIGIN_MODE}\n     */\n    this.experimentalNonAmpCreativeRenderMethod_ =\n        this.getNonAmpCreativeRenderingMethod();\n\n    /**\n     * Whether or not the iframe containing the ad should be sandboxed via the\n     * \"sandbox\" attribute.\n     * @private {boolean}\n     */\n    this.shouldSandbox_ = false;\n\n    /**\n     * Gets a notion of current time, in ms.  The value is not necessarily\n     * absolute, so should be used only for computing deltas.  When available,\n     * the performance system will be used; otherwise Date.now() will be\n     * returned.\n     *\n     * @const {function():number}\n     */\n    this.getNow_ = (this.win.performance && this.win.performance.now) ?\n      this.win.performance.now.bind(this.win.performance) : Date.now;\n\n    /** @const {string} */\n    this.sentinel = generateSentinel(window);\n\n    /**\n     * Used to indicate whether this slot should be collapsed or not. Marked\n     * true if the ad response has status 204, is null, or has a null\n     * arrayBuffer.\n     * @private {boolean}\n     */\n    this.isCollapsed_ = false;\n\n    /**\n     * Frame in which the creative renders (friendly if validated AMP, xdomain\n     * otherwise).\n     * {?HTMLIframeElement}\n     */\n    this.iframe = null;\n\n    /**\n     * TODO(keithwrightbos) - remove once resume behavior is verified.\n     * {boolean} whether most recent ad request was generated as part\n     *    of resume callback.\n     */\n    this.fromResumeCallback = false;\n\n    /** @type {string} */\n    this.safeframeVersion = DEFAULT_SAFEFRAME_VERSION;\n\n    /**\n     * @protected {boolean} Indicates whether the ad is currently in the\n     *    process of being refreshed.\n     */\n    this.isRefreshing = false;\n\n    /** @protected {boolean} */\n    this.isRelayoutNeededFlag = false;\n\n    /**\n     * Used as a signal in some of the CSI pings.\n     * @private @const {string}\n     */\n    this.releaseType_ = getBinaryTypeNumericalCode(getBinaryType(this.win)) ||\n        '-1';\n\n    /**\n     * Mapping of feature name to value extracted from ad response header\n     * amp-ff-exps with comma separated pairs of '=' separated key/value.\n     * @type {!Object<string,string>}\n     */\n    this.postAdResponseExperimentFeatures = {};\n\n    /**\n     * The configuration for amp-analytics. If null, no amp-analytics element\n     * will be inserted and no analytics events will be fired.\n     * This will be initialized inside of buildCallback.\n     * @private {?JsonObject}\n     */\n    this.a4aAnalyticsConfig_ = null;\n\n    /**\n     * The amp-analytics element that for this impl's analytics config. It will\n     * be null before buildCallback() executes or if the impl does not provide\n     * an analytice config.\n     * @private {?Element}\n     * @visibleForTesting\n     */\n    this.a4aAnalyticsElement_ = null;\n\n    /**\n     * Indicates that this slot is a single page ad within an AMP story.\n     * @type {boolean}\n     */\n    this.isSinglePageStoryAd = false;\n  }\n\n  /** @override */\n  getLayoutPriority() {\n    // Priority used for scheduling preload and layout callback.  Because\n    // AMP creatives will be injected as part of the promise chain created\n    // within onLayoutMeasure, this is only relevant to non-AMP creatives\n    // therefore we want this to match the 3p priority.\n    const isPWA = !this.element.getAmpDoc().isSingleDoc();\n    // give the ad higher priority if it is inside a PWA\n    return isPWA ? LayoutPriority.METADATA : LayoutPriority.ADS;\n  }\n\n  /** @override */\n  isLayoutSupported(layout) {\n    return isLayoutSizeDefined(layout);\n  }\n\n  /** @override */\n  isRelayoutNeeded() {\n    return this.isRelayoutNeededFlag;\n  }\n\n  /** @override */\n  buildCallback() {\n    this.creativeSize_ = {\n      width: this.element.getAttribute('width'),\n      height: this.element.getAttribute('height'),\n    };\n    const upgradeDelayMs = Math.round(this.getResource().getUpgradeDelayMs());\n    dev().info(TAG,\n        `upgradeDelay ${this.element.getAttribute('type')}: ${upgradeDelayMs}`);\n\n    this.uiHandler = new AMP.AmpAdUIHandler(this);\n\n    const verifier = signatureVerifierFor(this.win);\n    this.keysetPromise_ =\n        Services.viewerForDoc(this.getAmpDoc()).whenFirstVisible().then(() => {\n          this.getSigningServiceNames().forEach(signingServiceName => {\n            verifier.loadKeyset(signingServiceName);\n          });\n        });\n\n    this.a4aAnalyticsConfig_ = this.getA4aAnalyticsConfig();\n    if (this.a4aAnalyticsConfig_) {\n      // TODO(warrengm): Consider having page-level singletons for networks that\n      // use the same config for all ads.\n      this.a4aAnalyticsElement_ = insertAnalyticsElement(\n          this.element, this.a4aAnalyticsConfig_, true /* loadAnalytics */);\n    }\n\n    this.isSinglePageStoryAd = this.element.hasAttribute('amp-story');\n  }\n\n  /** @override */\n  renderOutsideViewport() {\n    // Ensure non-verified AMP creatives are throttled.\n    if (!this.isVerifiedAmpCreative_ && is3pThrottled(this.win) &&\n        !this.inNonAmpPreferenceExp()) {\n      return false;\n    }\n    // Otherwise the ad is good to go.\n    const elementCheck = getAmpAdRenderOutsideViewport(this.element);\n    return elementCheck !== null ?\n      elementCheck : super.renderOutsideViewport();\n  }\n\n  /**\n   * To be overridden by network specific implementation indicating if element\n   * (and environment generally) are valid for sending XHR queries.\n   * @return {boolean} whether element is valid and ad request should be\n   *    sent.  If false, no ad request is sent and slot will be collapsed if\n   *    possible.\n   */\n  isValidElement() {\n    return true;\n  }\n\n  /**\n   * Returns the creativeSize, which is the size extracted from the ad response.\n   * @return {?({width, height}|../../../src/layout-rect.LayoutRectDef)}\n   */\n  getCreativeSize() {\n    return this.creativeSize_;\n  }\n\n  /**\n   * @return {boolean|number} whether ad request should be delayed until\n   *    renderOutsideViewport is met or if number, the amount of viewports.\n   */\n  delayAdRequestEnabled() {\n    return false;\n  }\n\n  /**\n   * Returns preconnect urls for A4A. Ad network should overwrite in their\n   * Fast Fetch implementation and return an array of urls for the runtime to\n   * preconnect to.\n   * @return {!Array<string>}\n   */\n  getPreconnectUrls() {\n    return [];\n  }\n\n  /**\n   * Returns prefetch urls for A4A. Ad network should overwrite in their\n   * Fast Fetch implementation and return an array of urls for the runtime to\n   * prefetch.\n   * @return {!Array<string>}\n   */\n  getPrefetchUrls() {\n    return [];\n  }\n\n  /**\n   * Returns true if this element was loaded from an amp-ad element.  For use by\n   * network-specific implementations that don't want to allow themselves to be\n   * embedded directly into a page.\n   * @return {boolean}\n   */\n  isAmpAdElement() {\n    return this.element.tagName == 'AMP-AD' ||\n        this.element.tagName == 'AMP-EMBED';\n  }\n\n  /**\n   * Prefetches and preconnects URLs related to the ad using adPreconnect\n   * registration which assumes ad request domain used for 3p is applicable.\n   * @param {boolean=} unusedOnLayout\n   * @override\n   */\n  preconnectCallback(unusedOnLayout) {\n    const preconnect = this.getPreconnectUrls();\n    // NOTE(keithwrightbos): Does not take isValidElement into account so could\n    // preconnect unnecessarily, however it is assumed that isValidElement\n    // matches amp-ad loader predicate such that A4A impl does not load.\n    if (preconnect) {\n      preconnect.forEach(p => {\n        this.preconnect.url(p, /*opt_preloadAs*/true);\n      });\n    }\n  }\n\n  /** @override */\n  resumeCallback() {\n    // FIE that was not destroyed on unlayoutCallback does not require a new\n    // ad request.\n    if (this.friendlyIframeEmbed_) {\n      return;\n    }\n    this.fromResumeCallback = true;\n    // If layout of page has not changed, onLayoutMeasure will not be called\n    // so do so explicitly.\n    const resource = this.getResource();\n    if (resource.hasBeenMeasured() && !resource.isMeasureRequested()) {\n      this.onLayoutMeasure();\n    }\n  }\n\n  /**\n   * @return {!../../../src/service/resource.Resource}\n   * @visibleForTesting\n   */\n  getResource() {\n    return this.element.getResources().getResourceForElement(this.element);\n  }\n\n  /**\n   * @return {boolean} whether adPromise was initialized (indicator of\n   *    element validity).\n   * @protected\n   */\n  hasAdPromise() {\n    return !!this.adPromise_;\n  }\n\n  /**\n   * Should only be called after XHR response headers have been processed and\n   * postAdResponseExperimentFeatures is populated.\n   * @return {boolean} whether in experiment giving non-AMP creatives same\n   *    benefits as AMP (increased priority, no throttle)\n   * @visibleForTesting\n   */\n  inNonAmpPreferenceExp() {\n    return !!this.postAdResponseExperimentFeatures['pref_neutral_enabled'] &&\n      ['adsense', 'doubleclick'].includes(this.element.getAttribute('type'));\n  }\n\n  /**\n   * @return {boolean} whether environment/element should initialize ad request\n   *    promise chain.\n   * @private\n   */\n  shouldInitializePromiseChain_() {\n    const slotRect = this.getIntersectionElementLayoutBox();\n    if (this.getLayout() != Layout.FLUID &&\n        (slotRect.height == 0 || slotRect.width == 0)) {\n      dev().fine(\n          TAG, 'onLayoutMeasure canceled due height/width 0', this.element);\n      return false;\n    }\n    if (!isAdPositionAllowed(this.element, this.win)) {\n      user().warn(TAG, `<${this.element.tagName}> is not allowed to be ` +\n        `placed in elements with position:fixed: ${this.element}`);\n      return false;\n    }\n    // OnLayoutMeasure can be called when page is in prerender so delay until\n    // visible.  Assume that it is ok to call isValidElement as it should\n    // only being looking at window, immutable properties (i.e. location) and\n    // its element ancestry.\n    if (!this.isValidElement()) {\n      // TODO(kjwright): collapse?\n      user().warn(TAG, this.element.getAttribute('type'),\n          'Amp ad element ignored as invalid', this.element);\n      return false;\n    }\n    return true;\n  }\n\n  /** @override */\n  onLayoutMeasure() {\n    this.initiateAdRequest();\n  }\n\n  /**\n   * This is the entry point into the ad promise chain.\n   *\n   * Calling this function will initiate the following sequence of events: ad\n   * url construction, ad request issuance, creative verification, and metadata\n   * parsing.\n   *\n   * @protected\n   */\n  initiateAdRequest() {\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.onLayoutMeasure();\n    }\n    if (this.adPromise_ || !this.shouldInitializePromiseChain_()) {\n      return;\n    }\n\n    // Increment unique promise ID so that if its value changes within the\n    // promise chain due to cancel from unlayout, the promise will be rejected.\n    ++this.promiseId_;\n\n    // Shorthand for: reject promise if current promise chain is out of date.\n    const checkStillCurrent = this.verifyStillCurrent();\n\n    // Return value from this chain: True iff rendering was \"successful\"\n    // (i.e., shouldn't try to render later via iframe); false iff should\n    // try to render later in iframe.\n    // Cases to handle in this chain:\n    //   - Everything ok  => Render; return true\n    //   - Empty network response returned => Don't render; return true\n    //   - Can't parse creative out of response => Don't render; return false\n    //   - Can parse, but creative is empty => Don't render; return true\n    //   - Validation fails => return false\n    //   - Rendering fails => return false\n    //   - Chain cancelled => don't return; drop error\n    //   - Uncaught error otherwise => don't return; percolate error up\n    this.adPromise_ = Services.viewerForDoc(this.getAmpDoc()).whenFirstVisible()\n        .then(() => {\n          checkStillCurrent();\n          // See if experiment that delays request until slot is within\n          // renderOutsideViewport. Within render outside viewport will not\n          // resolve if already within viewport thus the check for already\n          // meeting the definition as opposed to waiting on the promise.\n          const delay = this.delayAdRequestEnabled();\n          if (delay) {\n            return this.getResource().whenWithinViewport(\n                typeof delay == 'number' ? delay :\n                  this.renderOutsideViewport());\n          }\n        })\n        // Possibly block on amp-consent.\n        /** @return {!Promise<?CONSENT_POLICY_STATE>} */\n        .then(() => {\n          checkStillCurrent();\n          const consentPolicyId = super.getConsentPolicy();\n          return consentPolicyId ?\n            getConsentPolicyState(this.getAmpDoc(), consentPolicyId)\n                .catch(err => {\n                  user().error(TAG, 'Error determining consent state', err);\n                  return CONSENT_POLICY_STATE.UNKNOWN;\n                }) : Promise.resolve(null);\n        })\n        // This block returns the ad URL, if one is available.\n        /** @return {!Promise<?string>} */\n        .then(consentState => {\n          checkStillCurrent();\n          return /** @type {!Promise<?string>} */(this.getAdUrl(\n              consentState, this.tryExecuteRealTimeConfig_(consentState)));\n        })\n        // This block returns the (possibly empty) response to the XHR request.\n        /** @return {!Promise<?Response>} */\n        .then(adUrl => {\n          checkStillCurrent();\n          this.adUrl_ = adUrl;\n          // If we should skip the XHR, we will instead request and render\n          // by simply writing a frame into the page using\n          // renderViaIframeGet\n          if (!this.isXhrAllowed() && !!this.adUrl_) {\n            this.experimentalNonAmpCreativeRenderMethod_ =\n                XORIGIN_MODE.IFRAME_GET;\n            return Promise.reject(IFRAME_GET);\n          }\n          return adUrl && this.sendXhrRequest(adUrl);\n        })\n        // The following block returns either the response (as a\n        // {bytes, headers} object), or null if no response is available /\n        // response is empty.\n        /** @return {?Promise<?{bytes: !ArrayBuffer, headers: !Headers}>} */\n        .then(fetchResponse => {\n          checkStillCurrent();\n          this.maybeTriggerAnalyticsEvent_('adRequestEnd');\n          // If the response is null (can occur for non-200 responses)  or\n          // arrayBuffer is null, force collapse.\n          if (!fetchResponse || !fetchResponse.arrayBuffer ||\n              fetchResponse.headers.has('amp-ff-empty-creative')) {\n            this.forceCollapse();\n            return Promise.reject(NO_CONTENT_RESPONSE);\n          }\n          if (fetchResponse.headers && fetchResponse.headers.has(\n              EXPERIMENT_FEATURE_HEADER_NAME)) {\n            this.populatePostAdResponseExperimentFeatures_(\n                fetchResponse.headers.get(EXPERIMENT_FEATURE_HEADER_NAME));\n          }\n          if (getMode().localDev && this.win.location &&\n              this.win.location.search) {\n            // Allow for setting experiment features via query param which\n            // will potentially override values returned in response.\n            const match = /(?:\\?|&)a4a_feat_exp=([^&]+)/.exec(\n                this.win.location.search);\n            if (match && match[1]) {\n              dev().info(TAG, `Using debug exp features: ${match[1]}`);\n              this.populatePostAdResponseExperimentFeatures_(\n                  tryDecodeUriComponent(match[1]));\n            }\n          }\n          // TODO(tdrl): Temporary, while we're verifying whether SafeFrame is\n          // an acceptable solution to the 'Safari on iOS doesn't fetch\n          // iframe src from cache' issue.  See\n          // https://github.com/ampproject/amphtml/issues/5614\n          const method = this.getNonAmpCreativeRenderingMethod(\n              fetchResponse.headers.get(RENDERING_TYPE_HEADER));\n          this.experimentalNonAmpCreativeRenderMethod_ = method;\n          if (this.experimentalNonAmpCreativeRenderMethod_ ==\n              XORIGIN_MODE.NAMEFRAME) {\n            this.preconnect.preload(\n                getDefaultBootstrapBaseUrl(this.win, 'nameframe'));\n          }\n          const browserSupportsSandbox = this.win.HTMLIFrameElement &&\n              'sandbox' in this.win.HTMLIFrameElement.prototype;\n          this.shouldSandbox_ = browserSupportsSandbox &&\n              fetchResponse.headers.get(SANDBOX_HEADER) == 'true';\n          const safeframeVersionHeader =\n            fetchResponse.headers.get(SAFEFRAME_VERSION_HEADER);\n          if (/^[0-9-]+$/.test(safeframeVersionHeader) &&\n              safeframeVersionHeader != DEFAULT_SAFEFRAME_VERSION) {\n            this.safeframeVersion = safeframeVersionHeader;\n            this.preconnect.preload(this.getSafeframePath());\n          }\n          // Note: Resolving a .then inside a .then because we need to capture\n          // two fields of fetchResponse, one of which is, itself, a promise,\n          // and one of which isn't.  If we just return\n          // fetchResponse.arrayBuffer(), the next step in the chain will\n          // resolve it to a concrete value, but we'll lose track of\n          // fetchResponse.headers.\n          return fetchResponse.arrayBuffer().then(bytes => {\n            if (bytes.byteLength == 0) {\n              // The server returned no content. Instead of displaying a blank\n              // rectangle, we collapse the slot instead.\n              this.forceCollapse();\n              return Promise.reject(NO_CONTENT_RESPONSE);\n            }\n            return {\n              bytes,\n              headers: fetchResponse.headers,\n            };\n          });\n        })\n        /** @return {!Promise<?ArrayBuffer>} */\n        .then(responseParts => {\n          checkStillCurrent();\n          // Keep a handle to the creative body so that we can render into\n          // SafeFrame or NameFrame later, if necessary.  TODO(tdrl): Temporary,\n          // while we\n          // assess whether this is the right solution to the Safari+iOS iframe\n          // src cache issue.  If we decide to keep a SafeFrame-like solution,\n          // we should restructure the promise chain to pass this info along\n          // more cleanly, without use of an object variable outside the chain.\n          if (!responseParts) {\n            return Promise.resolve();\n          }\n          const {bytes, headers} = responseParts;\n          const size = this.extractSize(responseParts.headers);\n          this.creativeSize_ = size || this.creativeSize_;\n          if (this.experimentalNonAmpCreativeRenderMethod_ !=\n              XORIGIN_MODE.CLIENT_CACHE &&\n              bytes) {\n            this.creativeBody_ = bytes;\n          }\n          return this.maybeValidateAmpCreative(bytes, headers);\n        })\n        .then(creative => {\n          checkStillCurrent();\n          // Need to know if creative was verified as part of render outside\n          // viewport but cannot wait on promise.  Sadly, need a state a\n          // variable.\n          this.isVerifiedAmpCreative_ = !!creative;\n          return creative && utf8Decode(creative);\n        })\n        // This block returns CreativeMetaDataDef iff the creative was verified\n        // as AMP and could be properly parsed for friendly iframe render.\n        /** @return {?CreativeMetaDataDef} */\n        .then(creativeDecoded => {\n          checkStillCurrent();\n          // Note: It's critical that #getAmpAdMetadata be called\n          // on precisely the same creative that was validated\n          // via #validateAdResponse_.  See GitHub issue\n          // https://github.com/ampproject/amphtml/issues/4187\n          let creativeMetaDataDef;\n          if (!creativeDecoded ||\n            !(creativeMetaDataDef = this.getAmpAdMetadata(creativeDecoded))) {\n            if (this.inNonAmpPreferenceExp()) {\n              // Experiment to give non-AMP creatives same benefits as AMP so\n              // update priority.\n              this.updateLayoutPriority(LayoutPriority.CONTENT);\n            }\n            return null;\n          }\n\n          // Update priority.\n          this.updateLayoutPriority(LayoutPriority.CONTENT);\n          // Load any extensions; do not wait on their promises as this\n          // is just to prefetch.\n          const extensions = Services.extensionsFor(this.win);\n          creativeMetaDataDef.customElementExtensions.forEach(\n              extensionId => extensions.preloadExtension(extensionId));\n          // Preload any fonts.\n          (creativeMetaDataDef.customStylesheets || []).forEach(font =>\n            this.preconnect.preload(font.href));\n\n          const urls = Services.urlForDoc(this.getAmpDoc());\n          // Preload any AMP images.\n          (creativeMetaDataDef.images || []).forEach(image =>\n            urls.isSecure(image) && this.preconnect.preload(image));\n          return creativeMetaDataDef;\n        })\n        .catch(error => {\n          switch (error.message || error) {\n            case IFRAME_GET:\n            case NETWORK_FAILURE:\n              return null;\n            case INVALID_SPSA_RESPONSE:\n            case NO_CONTENT_RESPONSE:\n              return {\n                minifiedCreative: '',\n                customElementExtensions: [],\n                customStylesheets: [],\n              };\n          }\n          // If error in chain occurs, report it and return null so that\n          // layoutCallback can render via cross domain iframe assuming ad\n          // url or creative exist.\n          this.promiseErrorHandler_(error);\n          return null;\n        });\n  }\n\n  /**\n   * This block returns the ad creative if it exists and validates as AMP;\n   * null otherwise.\n   * @param {!ArrayBuffer} bytes\n   * @param {!Headers} headers\n   * @return {!Promise<?ArrayBuffer>}\n   */\n  maybeValidateAmpCreative(bytes, headers) {\n    const checkStillCurrent = this.verifyStillCurrent();\n    return this.keysetPromise_\n        .then(() => {\n          if (this.element.getAttribute('type') == 'fake' &&\n              !this.element.getAttribute('checksig')) {\n            // do not verify signature for fake type ad, unless the ad\n            // specfically requires via 'checksig' attribute\n            return Promise.resolve(VerificationStatus.OK);\n          }\n          return signatureVerifierFor(this.win).verify(bytes, headers);\n        })\n        .then(status => {\n          checkStillCurrent();\n          let result = null;\n          switch (status) {\n            case VerificationStatus.OK:\n              result = bytes;\n              break;\n            case VerificationStatus.CRYPTO_UNAVAILABLE:\n              result = this.shouldPreferentialRenderWithoutCrypto() ?\n                bytes : null;\n              break;\n            // TODO(@taymonbeal, #9274): differentiate between these\n            case VerificationStatus.ERROR_KEY_NOT_FOUND:\n            case VerificationStatus.ERROR_SIGNATURE_MISMATCH:\n              user().error(\n                  TAG, this.element.getAttribute('type'),\n                  'Signature verification failed');\n            case VerificationStatus.UNVERIFIED:\n          }\n          if (this.isSinglePageStoryAd && !result) {\n            throw new Error(INVALID_SPSA_RESPONSE);\n          }\n          return result;\n        });\n  }\n\n  /**\n   * Populates object mapping of feature to value used for post ad response\n   * behavior experimentation.  Assumes comma separated, = delimited key/value\n   * pairs.  If key appears more than once, last value wins.\n   * @param {string} input\n   * @private\n   */\n  populatePostAdResponseExperimentFeatures_(input) {\n    input.split(',').forEach(line => {\n      if (!line) {\n        return;\n      }\n      const parts = line.split('=');\n      if (parts.length != 2 || !parts[0]) {\n        dev().warn(TAG, `invalid experiment feature ${line}`);\n        return;\n      }\n      this.postAdResponseExperimentFeatures[parts[0]] = parts[1];\n    });\n  }\n\n  /**\n   * Refreshes ad slot by fetching a new creative and rendering it. This leaves\n   * the current creative displayed until the next one is ready.\n   *\n   * @param {function()} refreshEndCallback When called, this function will\n   *   restart the refresh cycle.\n   * @return {Promise} A promise that resolves when all asynchronous portions of\n   *   the refresh function complete. This is particularly handy for testing.\n   */\n  refresh(refreshEndCallback) {\n    dev().assert(!this.isRefreshing);\n    this.isRefreshing = true;\n    this.tearDownSlot();\n    this.initiateAdRequest();\n    dev().assert(this.adPromise_);\n    const promiseId = this.promiseId_;\n    return this.adPromise_.then(() => {\n      if (!this.isRefreshing || promiseId != this.promiseId_) {\n        // If this refresh cycle was canceled, such as in a no-content\n        // response case, keep showing the old creative.\n        refreshEndCallback();\n        return;\n      }\n      return this.mutateElement(() => {\n        // Fire an ad-refresh event so that 3rd parties can track when an ad\n        // has changed.\n        triggerAnalyticsEvent(this.element, AnalyticsTrigger.AD_REFRESH);\n\n        this.togglePlaceholder(true);\n        // This delay provides a 1 second buffer where the ad loader is\n        // displayed in between the creatives.\n        return Services.timerFor(this.win).promise(1000).then(() => {\n          this.isRelayoutNeededFlag = true;\n          this.getResource().layoutCanceled();\n          // Only Require relayout after page visible\n          Services.viewerForDoc(this.getAmpDoc()).whenNextVisible().then(() => {\n            Services.resourcesForDoc(this.getAmpDoc())\n                ./*OK*/requireLayout(this.element);\n          });\n        });\n      });\n    });\n  }\n\n  /**\n   * Handles uncaught errors within promise flow.\n   * @param {*} error\n   * @param {boolean=} opt_ignoreStack\n   * @private\n   */\n  promiseErrorHandler_(error, opt_ignoreStack) {\n    if (isCancellation(error)) {\n      // Rethrow if cancellation.\n      throw error;\n    }\n\n    if (error && error.message) {\n      error = duplicateErrorIfNecessary(/** @type {!Error} */(error));\n    } else {\n      error = new Error('unknown error ' + error);\n    }\n    if (opt_ignoreStack) {\n      error.ignoreStack = opt_ignoreStack;\n    }\n\n    // Add `type` to the message. Ensure to preserve the original stack.\n    const type = this.element.getAttribute('type') || 'notype';\n    if (error.message.indexOf(`${TAG}: ${type}:`) != 0) {\n      error.message = `${TAG}: ${type}: ${error.message}`;\n    }\n\n    // Additional arguments.\n    assignAdUrlToError(/** @type {!Error} */(error), this.adUrl_);\n\n    if (getMode().development || getMode().localDev || getMode().log) {\n      user().error(TAG, error);\n    } else {\n      user().warn(TAG, error);\n      // Report with 1% sampling as an expected dev error.\n      if (Math.random() < 0.01) {\n        dev().expectedError(TAG, error);\n      }\n    }\n  }\n\n  /** @override */\n  layoutCallback() {\n    if (this.isRefreshing) {\n      this.destroyFrame(true);\n    }\n    return this.attemptToRenderCreative();\n  }\n\n  /**\n   * Attemps to render the returned creative following the resolution of the\n   * adPromise.\n   *\n   * @return {!Promise<boolean>|!Promise<undefined>} A promise that resolves\n   *   when the rendering attempt has finished.\n   * @protected\n   */\n  attemptToRenderCreative() {\n    // Promise may be null if element was determined to be invalid for A4A.\n    if (!this.adPromise_) {\n      if (this.shouldInitializePromiseChain_()) {\n        dev().error(TAG, 'Null promise in layoutCallback');\n      }\n      return Promise.resolve();\n    }\n    const checkStillCurrent = this.verifyStillCurrent();\n    // Promise chain will have determined if creative is valid AMP.\n    return this.adPromise_.then(creativeMetaData => {\n      checkStillCurrent();\n      if (this.isCollapsed_) {\n        return Promise.resolve();\n      }\n      // If this.iframe already exists, and we're not currently in the middle\n      // of refreshing, bail out here. This should only happen in\n      // testing context, not in production.\n      if (this.iframe && !this.isRefreshing) {\n        return Promise.resolve();\n      }\n      if (!creativeMetaData) {\n        // Non-AMP creative case, will verify ad url existence.\n        return this.renderNonAmpCreative();\n      }\n      // Must be an AMP creative.\n      return this.renderAmpCreative_(creativeMetaData)\n          .catch(err => {\n            checkStillCurrent();\n            // Failed to render via AMP creative path so fallback to non-AMP\n            // rendering within cross domain iframe.\n            user().warn(TAG, this.element.getAttribute('type'),\n                'Error injecting creative in friendly frame', err);\n            return this.renderNonAmpCreative();\n          });\n    }).catch(error => {\n      this.promiseErrorHandler_(error);\n      throw cancellation();\n    });\n  }\n\n  /**\n   * Returns whether or not the ad request may be sent using XHR.\n   * @return {boolean}\n   */\n  isXhrAllowed() {\n    return true;\n  }\n\n  /** @override **/\n  attemptChangeSize(newHeight, newWidth) {\n    // Store original size of slot in order to allow re-expansion on\n    // unlayoutCallback so that it is reverted to original size in case\n    // of resumeCallback.\n    this.originalSlotSize_ = this.originalSlotSize_ || this.getLayoutBox();\n    return super.attemptChangeSize(newHeight, newWidth);\n  }\n\n  /** @override  */\n  unlayoutCallback() {\n    this.tearDownSlot();\n    return true;\n  }\n\n  /**\n   * Attempts to tear down and set all state variables to initial conditions.\n   * @protected\n   */\n  tearDownSlot() {\n    // Increment promiseId to cause any pending promise to cancel.\n    this.promiseId_++;\n    this.uiHandler.applyUnlayoutUI();\n    if (this.originalSlotSize_) {\n      super.attemptChangeSize(\n          this.originalSlotSize_.height, this.originalSlotSize_.width)\n          .then(() => {\n            this.originalSlotSize_ = null;\n          })\n          .catch(err => {\n          // TODO(keithwrightbos): if we are unable to revert size, on next\n          // trigger of promise chain the ad request may fail due to invalid\n          // slot size.  Determine how to handle this case.\n            dev().warn(TAG, 'unable to revert to original size', err);\n          });\n    }\n\n    this.isCollapsed_ = false;\n\n    // Remove rendering frame, if it exists.\n    this.destroyFrame();\n\n    this.adPromise_ = null;\n    this.adUrl_ = null;\n    this.creativeBody_ = null;\n    this.isVerifiedAmpCreative_ = false;\n    this.fromResumeCallback = false;\n    this.experimentalNonAmpCreativeRenderMethod_ =\n        this.getNonAmpCreativeRenderingMethod();\n    this.postAdResponseExperimentFeatures = {};\n  }\n\n  /**\n   * Attempts to remove the current frame and free any associated resources.\n   * This function will no-op if this ad slot is currently in the process of\n   * being refreshed.\n   *\n   * @param {boolean=} force Forces the removal of the frame, even if\n   *   this.isRefreshing is true.\n   * @protected\n   */\n  destroyFrame(force = false) {\n    if (!force && this.isRefreshing) {\n      return;\n    }\n    // Allow embed to release its resources.\n    if (this.friendlyIframeEmbed_) {\n      this.friendlyIframeEmbed_.destroy();\n      this.friendlyIframeEmbed_ = null;\n    }\n    if (this.iframe && this.iframe.parentElement) {\n      this.iframe.parentElement.removeChild(this.iframe);\n      this.iframe = null;\n    }\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.freeXOriginIframe();\n      this.xOriginIframeHandler_ = null;\n    }\n  }\n\n  /** @override  */\n  viewportCallback(inViewport) {\n    if (this.friendlyIframeEmbed_) {\n      setFriendlyIframeEmbedVisible(this.friendlyIframeEmbed_, inViewport);\n    }\n    if (this.xOriginIframeHandler_) {\n      this.xOriginIframeHandler_.viewportCallback(inViewport);\n    }\n  }\n\n  /** @override */\n  createPlaceholderCallback() {\n    return this.uiHandler.createPlaceholder();\n  }\n\n  /**\n   * Gets the Ad URL to send an XHR Request to.  To be implemented\n   * by network.\n   * @param {?CONSENT_POLICY_STATE} unusedConsentState\n   * @param {Promise<!Array<rtcResponseDef>>=} opt_rtcResponsesPromise\n   * @return {!Promise<string>|string}\n   */\n  getAdUrl(unusedConsentState, opt_rtcResponsesPromise) {\n    throw new Error('getAdUrl not implemented!');\n  }\n\n  /**\n   * Resets ad url state to null, used to prevent frame get fallback if error\n   * is thrown after url construction but prior to layoutCallback.\n   */\n  resetAdUrl() {\n    this.adUrl_ = null;\n  }\n\n  /**\n   * @return {function()} function that when called will verify if current\n   *    ad retrieval is current (meaning unlayoutCallback was not executed).\n   *    If not, will throw cancellation exception;\n   * @throws {Error}\n   */\n  verifyStillCurrent() {\n    const promiseId = this.promiseId_;\n    return () => {\n      if (promiseId != this.promiseId_) {\n        throw cancellation();\n      }\n    };\n  }\n\n  /**\n   * Determine the desired size of the creative based on the HTTP response\n   * headers. Must be less than or equal to the original size of the ad slot\n   * along each dimension. May be overridden by network.\n   *\n   * @param {!../../../src/utils/xhr-utils.FetchResponseHeaders} responseHeaders\n   * @return {?SizeInfoDef}\n   */\n  extractSize(responseHeaders) {\n    const headerValue = responseHeaders.get(CREATIVE_SIZE_HEADER);\n    if (!headerValue) {\n      return null;\n    }\n    const match = /^([0-9]+)x([0-9]+)$/.exec(headerValue);\n    if (!match) {\n      // TODO(@taymonbeal, #9274): replace this with real error reporting\n      user().error(TAG, `Invalid size header: ${headerValue}`);\n      return null;\n    }\n    return /** @type {?SizeInfoDef} */ (\n      {width: Number(match[1]), height: Number(match[2])});\n  }\n\n  /**\n   * Forces the UI Handler to collapse this slot.\n   * @visibleForTesting\n   */\n  forceCollapse() {\n    if (this.isRefreshing) {\n      // If, for whatever reason, the new creative would collapse this slot,\n      // stick with the old creative until the next refresh cycle.\n      this.isRefreshing = false;\n      return;\n    }\n    dev().assert(this.uiHandler);\n    // Store original size to allow for reverting on unlayoutCallback so that\n    // subsequent pageview allows for ad request.\n    this.originalSlotSize_ = this.originalSlotSize_ || this.getLayoutBox();\n    this.uiHandler.applyNoContentUI();\n    this.isCollapsed_ = true;\n  }\n\n  /**\n   * Callback executed when creative has successfully rendered within the\n   * publisher page but prior to load (or ini-load for friendly frame AMP\n   * creative render).  To be overridden by network implementations as needed.\n   *\n   * @param {?CreativeMetaDataDef} creativeMetaData metadata if AMP creative,\n   *    null otherwise.\n   */\n  onCreativeRender(creativeMetaData) {\n    this.maybeTriggerAnalyticsEvent_(\n        creativeMetaData ? 'renderFriendlyEnd' : 'renderCrossDomainEnd');\n  }\n\n  /**\n   * @param {!Element} iframe that was just created.  To be overridden for\n   * testing.\n   * @visibleForTesting\n   */\n  onCrossDomainIframeCreated(iframe) {\n    dev().info(TAG, this.element.getAttribute('type'),\n        `onCrossDomainIframeCreated ${iframe}`);\n  }\n\n  /**\n   * Send ad request, extract the creative and signature from the response.\n   * @param {string} adUrl Request URL to send XHR to.\n   * @return {!Promise<?../../../src/utils/xhr-utils.FetchResponse>}\n   * @protected\n   */\n  sendXhrRequest(adUrl) {\n    this.maybeTriggerAnalyticsEvent_('adRequestStart');\n    const xhrInit = {\n      mode: 'cors',\n      method: 'GET',\n      credentials: 'include',\n    };\n    return Services.xhrFor(this.win)\n        .fetch(adUrl, xhrInit)\n        .catch(error => {\n          if (error.response && error.response.status > 200) {\n            // Invalid server response code so we should collapse.\n            return null;\n          }\n          // If an error occurs, let the ad be rendered via iframe after delay.\n          // TODO(taymonbeal): Figure out a more sophisticated test for deciding\n          // whether to retry with an iframe after an ad request failure or just\n          // give up and render the fallback content (or collapse the ad slot).\n          const networkFailureHandlerResult =\n              this.onNetworkFailure(error, /** @type {string} */ (this.adUrl_));\n          dev().assert(!!networkFailureHandlerResult);\n          if (networkFailureHandlerResult.frameGetDisabled) {\n            // Reset adUrl to null which will cause layoutCallback to not\n            // fetch via frame GET.\n            dev().info(\n                TAG, 'frame get disabled as part of network failure handler');\n            this.resetAdUrl();\n          } else {\n            this.adUrl_ = networkFailureHandlerResult.adUrl || this.adUrl_;\n            return Promise.reject(NETWORK_FAILURE);\n          }\n          return null;\n        });\n  }\n\n  /**\n   * Called on network failure sending XHR CORS ad request allowing for\n   * modification of ad url and prevent frame GET request on layoutCallback.\n   * By default, GET frame request will be executed with same ad URL as used\n   * for XHR CORS request.\n   * @param {*} unusedError from network failure\n   * @param {string} unusedAdUrl used for network request\n   * @return {!{adUrl: (string|undefined), frameGetDisabled: (boolean|undefined)}}\n   */\n  onNetworkFailure(unusedError, unusedAdUrl) {\n    return {};\n  }\n\n  /**\n   * To be overridden by network specific implementation indicating which\n   * signing service(s) is to be used.\n   * @return {!Array<string>} A list of signing services.\n   */\n  getSigningServiceNames() {\n    return getMode().localDev ? ['google', 'google-dev'] : ['google'];\n  }\n\n  /**\n   * Render non-AMP creative within cross domain iframe.\n   * @param {boolean=} throttleApplied Whether incrementLoadingAds has already\n   *    been called\n   * @return {Promise<boolean>} Whether the creative was successfully rendered.\n   */\n  renderNonAmpCreative(throttleApplied) {\n    if (this.element.getAttribute('disable3pfallback') == 'true') {\n      user().warn(TAG, this.element.getAttribute('type'),\n          'fallback to 3p disabled');\n      return Promise.resolve(false);\n    }\n    // TODO(keithwrightbos): remove when no longer needed.\n    dev().warn(TAG, 'fallback to 3p');\n    // Haven't rendered yet, so try rendering via one of our\n    // cross-domain iframe solutions.\n    const method = this.experimentalNonAmpCreativeRenderMethod_;\n    let renderPromise = Promise.resolve(false);\n    if ((method == XORIGIN_MODE.SAFEFRAME ||\n         method == XORIGIN_MODE.NAMEFRAME) &&\n        this.creativeBody_) {\n      renderPromise = this.renderViaNameAttrOfXOriginIframe_(\n          this.creativeBody_);\n      this.creativeBody_ = null; // Free resources.\n    } else if (this.adUrl_) {\n      assertHttpsUrl(this.adUrl_, this.element);\n      renderPromise = this.renderViaIframeGet_(this.adUrl_);\n    } else {\n      // Ad URL may not exist if buildAdUrl throws error or returns empty.\n      // If error occurred, it would have already been reported but let's\n      // report to user in case of empty.\n      user().warn(TAG, this.element.getAttribute('type'),\n          'No creative or URL available -- A4A can\\'t render any ad');\n    }\n    if (!throttleApplied && !this.inNonAmpPreferenceExp()) {\n      incrementLoadingAds(this.win, renderPromise);\n    }\n    return renderPromise.then(\n        result => {\n          this.maybeTriggerAnalyticsEvent_('crossDomainIframeLoaded');\n          // Pass on the result to the next value in the promise change.\n          return result;\n        });\n  }\n\n  /**\n   * Render a validated AMP creative directly in the parent page.\n   * @param {!CreativeMetaDataDef} creativeMetaData Metadata required to render\n   *     AMP creative.\n   * @return {!Promise} Whether the creative was successfully rendered.\n   * @private\n   */\n  renderAmpCreative_(creativeMetaData) {\n    dev().assert(creativeMetaData.minifiedCreative,\n        'missing minified creative');\n    dev().assert(!!this.element.ownerDocument, 'missing owner document?!');\n    this.maybeTriggerAnalyticsEvent_('renderFriendlyStart');\n    // Create and setup friendly iframe.\n    this.iframe = /** @type {!HTMLIFrameElement} */(\n      createElementWithAttributes(\n          /** @type {!Document} */(this.element.ownerDocument), 'iframe',\n          dict({\n            // NOTE: It is possible for either width or height to be 'auto',\n            // a non-numeric value.\n            'height': this.creativeSize_.height,\n            'width': this.creativeSize_.width,\n            'frameborder': '0',\n            'allowfullscreen': '',\n            'allowtransparency': '',\n            'scrolling': 'no',\n          })));\n    this.applyFillContent(this.iframe);\n    const fontsArray = [];\n    if (creativeMetaData.customStylesheets) {\n      creativeMetaData.customStylesheets.forEach(s => {\n        const href = s['href'];\n        if (href) {\n          fontsArray.push(href);\n        }\n      });\n    }\n    const checkStillCurrent = this.verifyStillCurrent();\n    return installFriendlyIframeEmbed(\n        this.iframe, this.element, {\n          host: this.element,\n          // Need to guarantee that this is no longer null\n          url: /** @type {string} */ (this.adUrl_),\n          html: creativeMetaData.minifiedCreative,\n          extensionIds: creativeMetaData.customElementExtensions || [],\n          fonts: fontsArray,\n        }, embedWin => {\n          installUrlReplacementsForEmbed(this.getAmpDoc(), embedWin,\n              new A4AVariableSource(this.getAmpDoc(), embedWin));\n        }).then(friendlyIframeEmbed => {\n      checkStillCurrent();\n      this.friendlyIframeEmbed_ = friendlyIframeEmbed;\n      setFriendlyIframeEmbedVisible(\n          friendlyIframeEmbed, this.isInViewport());\n      // Ensure visibility hidden has been removed (set by boilerplate).\n      const frameDoc = friendlyIframeEmbed.iframe.contentDocument ||\n              friendlyIframeEmbed.win.document;\n      setStyle(frameDoc.body, 'visibility', 'visible');\n      protectFunctionWrapper(this.onCreativeRender, this, err => {\n        dev().error(TAG, this.element.getAttribute('type'),\n            'Error executing onCreativeRender', err);\n      })(creativeMetaData);\n      // It's enough to wait for \"ini-load\" signal because in a FIE case\n      // we know that the embed no longer consumes significant resources\n      // after the initial load.\n      return friendlyIframeEmbed.whenIniLoaded();\n    }).then(() => {\n      checkStillCurrent();\n      // Capture ini-load ping.\n      this.maybeTriggerAnalyticsEvent_('friendlyIframeIniLoad');\n    });\n  }\n\n  /**\n   * Shared functionality for cross-domain iframe-based rendering methods.\n   * @param {!JsonObject<string, string>} attributes The attributes of the iframe.\n   * @return {!Promise} awaiting load event for ad frame\n   * @private\n   */\n  iframeRenderHelper_(attributes) {\n    const mergedAttributes = Object.assign(attributes, dict({\n      'height': this.creativeSize_.height,\n      'width': this.creativeSize_.width,\n    }));\n\n    if (this.sentinel) {\n      mergedAttributes['data-amp-3p-sentinel'] = this.sentinel;\n    }\n    if (this.shouldSandbox_) {\n      mergedAttributes['sandbox'] = IFRAME_SANDBOXING_FLAGS;\n    }\n    if (isExperimentOn(this.win, 'no-sync-xhr-in-ads')) {\n      // Block synchronous XHR in ad. These are very rare, but super bad for UX\n      // as they block the UI thread for the arbitrary amount of time until the\n      // request completes.\n      mergedAttributes['allow'] = 'sync-xhr \\'none\\';';\n    }\n    this.iframe = createElementWithAttributes(\n        /** @type {!Document} */ (this.element.ownerDocument),\n        'iframe', /** @type {!JsonObject} */ (\n          Object.assign(mergedAttributes, SHARED_IFRAME_PROPERTIES)));\n    // TODO(keithwrightbos): noContentCallback?\n    this.xOriginIframeHandler_ = new AMP.AmpAdXOriginIframeHandler(this);\n    // Iframe is appended to element as part of xorigin frame handler init.\n    // Executive onCreativeRender after init to ensure it can get reference\n    // to frame but prior to load to allow for earlier access.\n    const frameLoadPromise =\n        this.xOriginIframeHandler_.init(this.iframe, /* opt_isA4A */ true);\n    protectFunctionWrapper(this.onCreativeRender, this, err => {\n      dev().error(TAG, this.element.getAttribute('type'),\n          'Error executing onCreativeRender', err);\n    })(null);\n    return frameLoadPromise;\n  }\n\n  /**\n   * Creates iframe whose src matches that of the ad URL. For standard\n   * Fast Fetch running on the AMP cdn, an XHR request will typically have\n   * already been sent to the same adUrl, and the response should\n   * have been cached causing the browser to render without callout.  However,\n   * it is possible for cache miss to occur which can be detected server-side\n   * by missing ORIGIN header.\n   *\n   * Additionally, this method is also used in certain cases to send the only\n   * request, i.e. the initial XHR is skipped.\n   *\n   * Note: As of 2016-10-18, the fill-from-cache assumption appears to fail on\n   * Safari-on-iOS, which issues a fresh network request, even though the\n   * content is already in cache.\n   *\n   * @param {string} adUrl  Ad request URL, as sent to #sendXhrRequest (i.e.,\n   *    before any modifications that XHR module does to it.)\n   * @return {!Promise} awaiting ad completed insertion.\n   * @private\n   */\n  renderViaIframeGet_(adUrl) {\n    this.maybeTriggerAnalyticsEvent_('renderCrossDomainStart');\n    return this.iframeRenderHelper_(dict({\n      'src': Services.xhrFor(this.win).getCorsUrl(this.win, adUrl),\n      'name': JSON.stringify(\n          getContextMetadata(this.win, this.element, this.sentinel)),\n    }));\n  }\n\n  /**\n   * Render the creative via some \"cross domain iframe that accepts the creative\n   * in the name attribute\".  This could be SafeFrame or the AMP-native\n   * NameFrame.\n   *\n   * @param {!ArrayBuffer} creativeBody\n   * @return {!Promise} awaiting load event for ad frame\n   * @private\n   */\n  renderViaNameAttrOfXOriginIframe_(creativeBody) {\n    /** @type {?string} */\n    const method = this.experimentalNonAmpCreativeRenderMethod_;\n    dev().assert(method == XORIGIN_MODE.SAFEFRAME ||\n        method == XORIGIN_MODE.NAMEFRAME,\n    'Unrecognized A4A cross-domain rendering mode: %s', method);\n    this.maybeTriggerAnalyticsEvent_('renderSafeFrameStart');\n    const checkStillCurrent = this.verifyStillCurrent();\n    return tryResolve(() => utf8Decode(creativeBody)).then(creative => {\n      checkStillCurrent();\n      let srcPath;\n      let name = '';\n      switch (method) {\n        case XORIGIN_MODE.SAFEFRAME:\n          srcPath = this.getSafeframePath() + '?n=0';\n          break;\n        case XORIGIN_MODE.NAMEFRAME:\n          srcPath = getDefaultBootstrapBaseUrl(this.win, 'nameframe');\n          // Name will be set for real below in nameframe case.\n          break;\n        default:\n          // Shouldn't be able to get here, but...  Because of the assert,\n          // above, we can only get here in non-dev mode, so give user feedback.\n          user().error('A4A', 'A4A received unrecognized cross-domain name'\n              + ' attribute iframe rendering mode request: %s.  Unable to'\n              + ' render a creative for'\n              + ' slot %s.', method, this.element.getAttribute('id'));\n          return Promise.reject('Unrecognized rendering mode request');\n      }\n      // TODO(bradfrizzell): change name of function and var\n      let contextMetadata = getContextMetadata(\n          this.win, this.element, this.sentinel,\n          this.getAdditionalContextMetadata(method == XORIGIN_MODE.SAFEFRAME));\n      // TODO(bradfrizzell) Clean up name assigning.\n      if (method == XORIGIN_MODE.NAMEFRAME) {\n        contextMetadata['creative'] = creative;\n        name = JSON.stringify(contextMetadata);\n      } else if (method == XORIGIN_MODE.SAFEFRAME) {\n        contextMetadata = JSON.stringify(contextMetadata);\n        name = `${this.safeframeVersion};${creative.length};${creative}` +\n            `${contextMetadata}`;\n      }\n      return this.iframeRenderHelper_(dict({'src': srcPath, 'name': name}));\n    });\n  }\n\n  /**\n   *\n   * Throws {@code SyntaxError} if the metadata block delimiters are missing\n   * or corrupted or if the metadata content doesn't parse as JSON.\n   * @param {string} creative from which CSS is extracted\n   * @return {?CreativeMetaDataDef} Object result of parsing JSON data blob inside\n   *     the metadata markers on the ad text, or null if no metadata markers are\n   *     found.\n   * TODO(keithwrightbos@): report error cases\n   */\n  getAmpAdMetadata(creative) {\n    let metadataStart = -1;\n    let metadataString;\n    for (let i = 0; i < METADATA_STRINGS.length; i++) {\n      metadataString = METADATA_STRINGS[i];\n      metadataStart = creative.lastIndexOf(metadataString);\n      if (metadataStart >= 0) {\n        break;\n      }\n    }\n    if (metadataStart < 0) {\n      // Couldn't find a metadata blob.\n      dev().warn(TAG, this.element.getAttribute('type'),\n          'Could not locate start index for amp meta data in: %s', creative);\n      return null;\n    }\n    const metadataEnd = creative.lastIndexOf('</script>');\n    if (metadataEnd < 0) {\n      // Couldn't find a metadata blob.\n      dev().warn(TAG, this.element.getAttribute('type'),\n          'Could not locate closing script tag for amp meta data in: %s',\n          creative);\n      return null;\n    }\n    try {\n      const metaDataObj = parseJson(\n          creative.slice(metadataStart + metadataString.length, metadataEnd));\n      const ampRuntimeUtf16CharOffsets =\n        metaDataObj['ampRuntimeUtf16CharOffsets'];\n      if (!isArray(ampRuntimeUtf16CharOffsets) ||\n          ampRuntimeUtf16CharOffsets.length != 2 ||\n          typeof ampRuntimeUtf16CharOffsets[0] !== 'number' ||\n          typeof ampRuntimeUtf16CharOffsets[1] !== 'number') {\n        throw new Error('Invalid runtime offsets');\n      }\n      const metaData = {};\n      if (metaDataObj['customElementExtensions']) {\n        metaData.customElementExtensions =\n          metaDataObj['customElementExtensions'];\n        if (!isArray(metaData.customElementExtensions)) {\n          throw new Error(\n              'Invalid extensions', metaData.customElementExtensions);\n        }\n      } else {\n        metaData.customElementExtensions = [];\n      }\n      if (metaDataObj['customStylesheets']) {\n        // Expect array of objects with at least one key being 'href' whose\n        // value is URL.\n        metaData.customStylesheets = metaDataObj['customStylesheets'];\n        const errorMsg = 'Invalid custom stylesheets';\n        if (!isArray(metaData.customStylesheets)) {\n          throw new Error(errorMsg);\n        }\n\n        const urls = Services.urlForDoc(this.getAmpDoc());\n        metaData.customStylesheets.forEach(stylesheet => {\n          if (!isObject(stylesheet) || !stylesheet['href'] ||\n              typeof stylesheet['href'] !== 'string' ||\n              !urls.isSecure(stylesheet['href'])) {\n            throw new Error(errorMsg);\n          }\n        });\n      }\n      if (isArray(metaDataObj['images'])) {\n        // Load maximum of 5 images.\n        metaData.images = metaDataObj['images'].splice(0, 5);\n      }\n      if (this.isSinglePageStoryAd) {\n        if (!metaDataObj['ctaUrl'] || !metaDataObj['ctaType']) {\n          throw new Error(INVALID_SPSA_RESPONSE);\n        }\n        this.element.setAttribute('data-vars-ctatype', metaDataObj['ctaType']);\n        this.element.setAttribute('data-vars-ctaurl', metaDataObj['ctaUrl']);\n      }\n      // TODO(keithwrightbos): OK to assume ampRuntimeUtf16CharOffsets is before\n      // metadata as its in the head?\n      metaData.minifiedCreative =\n        creative.slice(0, ampRuntimeUtf16CharOffsets[0]) +\n        creative.slice(ampRuntimeUtf16CharOffsets[1], metadataStart) +\n        creative.slice(metadataEnd + '</script>'.length);\n      return metaData;\n    } catch (err) {\n      dev().warn(\n          TAG, this.element.getAttribute('type'), 'Invalid amp metadata: %s',\n          creative.slice(metadataStart + metadataString.length, metadataEnd));\n      if (this.isSinglePageStoryAd) {\n        throw err;\n      }\n      return null;\n    }\n  }\n\n  /**\n   * @return {string} full url to safeframe implementation.\n   */\n  getSafeframePath() {\n    return 'https://tpc.googlesyndication.com/safeframe/' +\n      `${this.safeframeVersion}/html/container.html`;\n  }\n\n  /**\n   * Checks if the given lifecycle event has a corresponding amp-analytics event\n   * and fires the analytics trigger if so.\n   * @param {string} lifecycleStage\n   * @private\n   */\n  maybeTriggerAnalyticsEvent_(lifecycleStage) {\n    if (!this.a4aAnalyticsConfig_) {\n      // No config exists that will listen to this event.\n      return;\n    }\n    const analyticsEvent =\n        dev().assert(LIFECYCLE_STAGE_TO_ANALYTICS_TRIGGER[lifecycleStage]);\n    const analyticsVars = Object.assign(\n        {'time': Math.round(this.getNow_())},\n        this.getA4aAnalyticsVars(analyticsEvent));\n    triggerAnalyticsEvent(this.element, analyticsEvent, analyticsVars);\n  }\n\n  /**\n   * Returns variables to be included on an analytics event. This can be\n   * overridden by specific network implementations.\n   * Note that this function is called for each time an analytics event is\n   * fired.\n   * @param {string} unusedAnalyticsEvent The name of the analytics event.\n   * @return {!Object<string, string>}\n   */\n  getA4aAnalyticsVars(unusedAnalyticsEvent) { return {}; }\n\n  /**\n   * Returns network-specific config for amp-analytics. It should overridden\n   * with network-specific configurations.\n   * This function may return null. If so, no amp-analytics element will be\n   * added to this A4A element and no A4A triggers will be fired.\n   * @return {?JsonObject}\n   */\n  getA4aAnalyticsConfig() { return null; }\n\n  /**\n   * Attempts to execute Real Time Config, if the ad network has enabled it.\n   * If it is not supported by the network, but the publisher has included\n   * the rtc-config attribute on the amp-ad element, warn.\n   * @param {?CONSENT_POLICY_STATE} consentState\n   * @return {Promise<!Array<!rtcResponseDef>>|undefined}\n   */\n  tryExecuteRealTimeConfig_(consentState) {\n    if (!!AMP.RealTimeConfigManager) {\n      try {\n        return new AMP.RealTimeConfigManager(this)\n            .maybeExecuteRealTimeConfig(\n                this.getCustomRealTimeConfigMacros_(), consentState);\n      } catch (err) {\n        user().error(TAG, 'Could not perform Real Time Config.', err);\n      }\n    } else if (this.element.getAttribute('rtc-config')) {\n      user().error(TAG, 'RTC not supported for ad network ' +\n                   `${this.element.getAttribute('type')}`);\n\n    }\n  }\n\n  /**\n   * To be overriden by network impl. Should return a mapping of macro keys\n   * to values for substitution in publisher-specified URLs for RTC.\n   * @return {!Object<string,\n   *   !../../../src/service/variable-source.AsyncResolverDef>}\n   */\n  getCustomRealTimeConfigMacros_() {\n    return {};\n  }\n\n  /**\n   * Whether preferential render should still be utilized if web crypto is\n   * unavailable, and crypto signature header is present.\n   * @return {boolean}\n   */\n  shouldPreferentialRenderWithoutCrypto() {\n    return false;\n  }\n\n  /**\n   * @param {string=} headerValue Method as given in header.\n   */\n  getNonAmpCreativeRenderingMethod(headerValue) {\n    if (headerValue) {\n      if (!isEnumValue(XORIGIN_MODE, headerValue)) {\n        dev().error(\n            'AMP-A4A', `cross-origin render mode header ${headerValue}`);\n      } else {\n        return headerValue;\n      }\n    }\n    return Services.platformFor(this.win).isIos() ?\n      XORIGIN_MODE.NAMEFRAME : null;\n  }\n\n  /**\n   * Returns base object that will be written to cross-domain iframe name\n   * attribute.\n   * @param {boolean=} opt_isSafeframe Whether creative is rendering into\n   *   a safeframe.\n   * @return {!JsonObject|undefined}\n   */\n  getAdditionalContextMetadata(opt_isSafeframe) {}\n}\n\n/**\n * Attachs query string portion of ad url to error.\n * @param {!Error} error\n * @param {?string} adUrl\n */\nexport function assignAdUrlToError(error, adUrl) {\n  if (!adUrl || (error.args && error.args['au'])) {\n    return;\n  }\n  const adQueryIdx = adUrl.indexOf('?');\n  if (adQueryIdx == -1) {\n    return;\n  }\n  (error.args || (error.args = {}))['au'] =\n    adUrl.substring(adQueryIdx + 1, adQueryIdx + 251);\n}\n\n/**\n * Returns the signature verifier for the given window. Lazily creates it if it\n * doesn't already exist.\n *\n * This ensures that only one signature verifier exists per window, which allows\n * multiple Fast Fetch ad slots on a page (even ones from different ad networks)\n * to share the same cached public keys.\n *\n * @param {!Window} win\n * @return {!SignatureVerifier}\n * @visibleForTesting\n */\nexport function signatureVerifierFor(win) {\n  const propertyName = 'AMP_FAST_FETCH_SIGNATURE_VERIFIER_';\n  return win[propertyName] ||\n      (win[propertyName] = new SignatureVerifier(win, signingServerURLs));\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {getMode} from '../../../src/mode';\n\n//////////////////////////////////////////////////////////////////\n//                                                              //\n//     IMPORTANT: All keys in RTC_VENDORS must be lowercase     //\n//       otherwise the vendor endpoint will not be used.        //\n//                                                              //\n//////////////////////////////////////////////////////////////////\n\n// Note: disableKeyAppend is an option specifically for DoubleClick's\n// implementation of RTC. It prevents the vendor ID from being\n// appended onto each key of the RTC response, for each vendor.\n// This appending is done to prevent a collision case during merge\n// that would cause one RTC response to overwrite another if they\n// share key names.\n/** @typedef {{\n    url: string,\n    macros: Array<string>,\n    errorReportingUrl: (string|undefined),\n    disableKeyAppend: boolean}} */\nlet RtcVendorDef;\n\n/** @const {!Object<string, RtcVendorDef>} */\nexport const RTC_VENDORS = {\n  // Add vendors here\n  medianet: {\n    url: 'https://amprtc.media.net/rtb/getrtc?cid=CID&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&slot=ATTR(data-slot)&tgt=TGT&curl=CANONICAL_URL&to=TIMEOUT&purl=HREF',\n    macros: ['CID'],\n    errorReportingUrl: 'https://qsearch-a.akamaihd.net/log?logid=kfk&evtid=projectevents&project=amprtc_error&error=ERROR_TYPE&rd=HREF',\n    disableKeyAppend: true,\n  },\n  prebidappnexus: {\n    url: 'https://prebid.adnxs.com/pbs/v1/openrtb2/amp?tag_id=PLACEMENT_ID&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&slot=ATTR(data-slot)&targeting=TGT&curl=CANONICAL_URL&timeout=TIMEOUT&adcid=ADCID&purl=HREF',\n    macros: ['PLACEMENT_ID'],\n    disableKeyAppend: true,\n  },\n  prebidrubicon: {\n    url: 'https://prebid-server.rubiconproject.com/openrtb2/amp?tag_id=REQUEST_ID&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&slot=ATTR(data-slot)&targeting=TGT&curl=CANONICAL_URL&timeout=TIMEOUT&adc=ADCID&purl=HREF',\n    macros: ['REQUEST_ID'],\n    disableKeyAppend: true,\n  },\n  indexexchange: {\n    url: 'https://amp.casalemedia.com/amprtc?v=1&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&s=SITE_ID&p=CANONICAL_URL',\n    macros: ['SITE_ID'],\n    disableKeyAppend: true,\n  },\n  lotame: {\n    url: 'https://ad.crwdcntrl.net/5/pe=y/c=CLIENT_ID/an=AD_NETWORK',\n    macros: ['CLIENT_ID', 'AD_NETWORK'],\n  },\n  yieldbot: {\n    url: 'https://i.yldbt.com/m/YB_PSN/v1/amp/init?curl=CANONICAL_URL&sn=YB_SLOT&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&aup=ATTR(data-slot)&pvi=PAGEVIEWID&tgt=TGT&adcid=ADCID&href=HREF',\n    macros: ['YB_PSN', 'YB_SLOT'],\n    disableKeyAppend: true,\n  },\n  salesforcedmp: {\n    url: 'https://cdn.krxd.net/userdata/v2/amp/ORGANIZATION_ID?segments_key=SEGMENTS_KEY&kuid_key=USER_KEY',\n    macros: ['ORGANIZATION_ID', 'SEGMENTS_KEY', 'USER_KEY'],\n    disableKeyAppend: true,\n  },\n  purch: {\n    url: 'https://ads.servebom.com/tmntag.js?v=1.2&fmt=amp&o={%22p%22%3APLACEMENT_ID}&div_id=DIV_ID',\n    macros: ['PLACEMENT_ID', 'DIV_ID'],\n    disableKeyAppend: true,\n  },\n  aps: {\n    url: 'https://aax.amazon-adsystem.com/e/dtb/bid?src=PUB_ID&amp=1&u=CANONICAL_URL&slots=%5B%7B%22sd%22%3A%22ATTR(data-slot)%22%2C%22s%22%3A%5B%22ATTR(width)xATTR(height)%22%5D%7D%5D&pj=PARAMS',\n    macros: ['PUB_ID', 'PARAMS'],\n    disableKeyAppend: true,\n  },\n  openwrap: {\n    // PubMatic OpenWrap\n    url: 'https://ow.pubmatic.com/amp?v=1&w=ATTR(width)&h=ATTR(height)&ms=ATTR(data-multi-size)&auId=ATTR(data-slot)&purl=HREF&pubId=PUB_ID&profId=PROFILE_ID',\n    macros: ['PUB_ID', 'PROFILE_ID'],\n    errorReportingUrl: 'https://ow.pubmatic.com/amp_error?e=ERROR_TYPE&h=HREF',\n    disableKeyAppend: true,\n  },\n  criteo: {\n    url: 'https://bidder.criteo.com/amp/rtc?zid=ZONE_ID&nid=NETWORK_ID&psubid=PUBLISHER_SUB_ID&lir=LINE_ITEM_RANGES&w=ATTR(width)&h=ATTR(height)&ow=ATTR(data-override-width)&oh=ATTR(data-override-height)&ms=ATTR(data-multi-size)&slot=ATTR(data-slot)&timeout=TIMEOUT&href=HREF',\n    macros: ['ZONE_ID', 'NETWORK_ID', 'PUBLISHER_SUB_ID', 'LINE_ITEM_RANGES'],\n    disableKeyAppend: true,\n  },\n};\n\n// DO NOT MODIFY: Setup for tests\nif (getMode().localDev || getMode().test) {\n  RTC_VENDORS['fakevendor'] = /** @type {RtcVendorDef} */({\n    url: 'https://localhost:8000/examples/rtcE1.json?slot_id=SLOT_ID&page_id=PAGE_ID&foo_id=FOO_ID',\n    macros: ['SLOT_ID', 'PAGE_ID', 'FOO_ID'],\n  });\n  RTC_VENDORS['fakevendor2'] = /** @type {RtcVendorDef} */({\n    url: 'https://localhost:8000/examples/rtcE1.json?slot_id=SLOT_ID&page_id=PAGE_ID&foo_id=FOO_ID',\n    errorReportingUrl: 'https://localhost:8000/examples/ERROR_TYPE',\n    disableKeyAppend: true,\n  });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {CONSENT_POLICY_STATE} from '../../../src/consent-state';\nimport {RTC_VENDORS} from './callout-vendors';\nimport {Services} from '../../../src/services';\nimport {dev, user} from '../../../src/log';\nimport {getMode} from '../../../src/mode';\nimport {isArray, isObject} from '../../../src/types';\nimport {isCancellation} from '../../../src/error';\nimport {tryParseJson} from '../../../src/json';\n\n/** @type {string} */\nconst TAG = 'real-time-config';\n\n/** @type {number} */\nconst MAX_RTC_CALLOUTS = 5;\n\n/** @type {number} */\nconst MAX_URL_LENGTH = 16384;\n\n/** @type {boolean} */\nconst ERROR_REPORTING_ENABLED = getMode(window).localDev ||\n      getMode(window).test || Math.random() < 0.01;\n\n/** @typedef {{\n    urls: (undefined|Array<string>|\n      Array<{url:string, errorReportingUrl:string,\n        sendRegardlessOfConsentState:(undefined|boolean|Array<string>)}>),\n    vendors: (undefined|Object),\n    timeoutMillis: number,\n    errorReportingUrl: (undefined|string),\n    sendRegardlessOfConsentState: (undefined|boolean|Array<string>)\n}} */\nlet RtcConfigDef;\n\n/**\n * Enum starts at 4 because 1-3 reserved as:\n *  1 = custom remote.html in use.\n *  2 = RTC succeeded.\n *  3 = deprecated generic RTC failures.\n * @enum {string}\n */\nexport const RTC_ERROR_ENUM = {\n  // Occurs when response is unparseable as JSON\n  MALFORMED_JSON_RESPONSE: '4',\n  // Occurs when a publisher has specified the same url\n  // or vendor url (after macros are substituted) to call out to more than once.\n  DUPLICATE_URL: '5',\n  // Occurs when a URL fails isSecureUrl check.\n  INSECURE_URL: '6',\n  // Occurs when 5 valid callout urls have already been built, and additional\n  // urls are still specified.\n  MAX_CALLOUTS_EXCEEDED: '7',\n  // Occurs due to XHR failure.\n  NETWORK_FAILURE: '8',\n  // Occurs when a specified vendor does not exist in RTC_VENDORS.\n  UNKNOWN_VENDOR: '9',\n  // Occurs when request took longer than timeout\n  TIMEOUT: '10',\n  // Occurs when URL expansion time exceeded allowed timeout, request never\n  // sent.\n  MACRO_EXPAND_TIMEOUT: '11',\n};\n\nexport class RealTimeConfigManager {\n  /**\n   * @param {!./amp-a4a.AmpA4A} a4aElement\n   */\n  constructor(a4aElement) {\n    /** @private {!./amp-a4a.AmpA4A} */\n    this.a4aElement_ = a4aElement;\n\n    /** @private {!Window} */\n    this.win_ = this.a4aElement_.win;\n\n    /** @private {!Object<string, boolean>} */\n    this.seenUrls_ = {};\n\n    /** @private {?number} */\n    this.rtcStartTime_ = null;\n\n    /** @private {!Array<!Promise<!rtcResponseDef>>} */\n    this.promiseArray_ = [];\n\n    /** @private {?RtcConfigDef} */\n    this.rtcConfig_ = null;\n\n    /** @private !../../../src/service/ampdoc-impl.AmpDoc */\n    this.ampDoc_ = this.a4aElement_.getAmpDoc();\n\n    /** @private {?CONSENT_POLICY_STATE} */\n    this.consentState_ = null;\n  }\n\n  /**\n   * @param {string} error\n   * @param {string} callout\n   * @param {string} errorReportingUrl\n   * @param {number=} opt_rtcTime\n   * @return {!Promise<!rtcResponseDef>}\n   * @private\n   */\n  buildErrorResponse_(\n    error, callout, errorReportingUrl, opt_rtcTime) {\n    dev().warn(TAG, `RTC callout to ${callout} caused ${error}`);\n    if (errorReportingUrl) {\n      this.sendErrorMessage(error, errorReportingUrl);\n    }\n    return Promise.resolve(/**@type {rtcResponseDef} */(\n      {error, callout, rtcTime: opt_rtcTime || 0}));\n  }\n\n  /**\n   * @param {string} errorType Uses the RTC_ERROR_ENUM above.\n   * @param {string} errorReportingUrl\n   */\n  sendErrorMessage(errorType, errorReportingUrl) {\n    if (!ERROR_REPORTING_ENABLED) {\n      return;\n    }\n    const whitelist = {ERROR_TYPE: true, HREF: true};\n    const macros = {\n      ERROR_TYPE: errorType,\n      HREF: this.win_.location.href,\n    };\n    const url = Services.urlReplacementsForDoc(this.ampDoc_).expandUrlSync(\n        errorReportingUrl, macros, whitelist);\n    new this.win_.Image().src = url;\n  }\n\n  /**\n   * Converts a URL into its corresponding shortened callout string.\n   * We also truncate to a maximum length of 50 characters.\n   * For instance, if we are passed\n   * \"https://example.com/example.php?foo=a&bar=b, then we return\n   * example.com/example.php\n   * @param {string} url\n   * @return {string}\n   */\n  getCalloutParam_(url) {\n    const parsedUrl = Services.urlForDoc(\n        this.a4aElement_.getAmpDoc()).parse(url);\n    return (parsedUrl.hostname + parsedUrl.pathname).substr(0, 50);\n  }\n\n  /**\n   * For a given A4A Element, sends out Real Time Config requests to\n   * any urls or vendors specified by the publisher.\n   * @param {!Object<string, !../../../src/service/variable-source.AsyncResolverDef>} customMacros The ad-network specified macro\n   *   substitutions available to use.\n   * @param {?CONSENT_POLICY_STATE} consentState\n   * @return {Promise<!Array<!rtcResponseDef>>|undefined}\n   * @visibleForTesting\n   */\n  maybeExecuteRealTimeConfig(customMacros, consentState) {\n    if (!this.validateRtcConfig_(this.a4aElement_.element)) {\n      return;\n    }\n    this.consentState_ = consentState;\n    this.modifyRtcConfigForConsentStateSettings();\n    customMacros = this.assignMacros(customMacros);\n    this.rtcStartTime_ = Date.now();\n    this.handleRtcForCustomUrls(customMacros);\n    this.handleRtcForVendorUrls(customMacros);\n    return Promise.all(this.promiseArray_);\n  }\n\n  /**\n   * Returns whether a given callout object is valid to send an RTC request\n   * to, for the given consentState.\n   * @param {Object|string} calloutConfig\n   * @param {boolean=} optIsGloballyValid\n   * @return {boolean}\n   * @visibleForTesting\n   */\n  isValidCalloutForConsentState(calloutConfig, optIsGloballyValid) {\n    const {sendRegardlessOfConsentState} = calloutConfig;\n    if (!isObject(calloutConfig) || !sendRegardlessOfConsentState) {\n      return !!optIsGloballyValid;\n    }\n\n    if (typeof sendRegardlessOfConsentState == 'boolean') {\n      return sendRegardlessOfConsentState;\n    }\n\n    if (isArray(sendRegardlessOfConsentState)) {\n      for (let i = 0; i < sendRegardlessOfConsentState.length; i++) {\n        if (this.consentState_ ==\n            CONSENT_POLICY_STATE[sendRegardlessOfConsentState[i]]) {\n          return true;\n        } else if (!CONSENT_POLICY_STATE[sendRegardlessOfConsentState[i]]) {\n          dev().warn(TAG, 'Invalid RTC consent state given: ' +\n                     `${sendRegardlessOfConsentState[i]}`);\n        }\n      }\n      return false;\n    }\n    user().warn(TAG, 'Invalid value for sendRegardlessOfConsentState:' +\n                `${sendRegardlessOfConsentState}`);\n    return !!optIsGloballyValid;\n  }\n\n  /**\n   * Goes through the RTC config, and for any URL that we should not callout\n   * as per the current consent state, deletes it from the RTC config.\n   * For example, if the RTC config looked like:\n   *    {vendors: {vendorA: {'sendRegardlessOfConsentState': true}\n   *               vendorB: {'macros': {'SLOT_ID': 1}}},\n   *     urls: ['https://www.rtc.example/example',\n   *            {url: 'https://www.rtcSite2.example/example',\n   *             sendRegardlessOfConsentState: ['UNKNOWN']}]\n   *    }\n   * and the consentState is CONSENT_POLICY_STATE.UNKNOWN,\n   * then this method call would clear the callouts to vendorB, and to the first\n   * custom URL.\n   */\n  modifyRtcConfigForConsentStateSettings() {\n    if (this.consentState_ == undefined ||\n        this.consentState_ == CONSENT_POLICY_STATE.SUFFICIENT ||\n        this.consentState_ == CONSENT_POLICY_STATE.UNKNOWN_NOT_REQUIRED) {\n      return;\n    }\n\n    const isGloballyValid = this.isValidCalloutForConsentState(this.rtcConfig_);\n    this.rtcConfig_.urls = (this.rtcConfig_.urls || []).filter(\n        url => this.isValidCalloutForConsentState(url, isGloballyValid));\n\n    Object.keys(this.rtcConfig_.vendors || {}).forEach(vendor => {\n      if (!this.isValidCalloutForConsentState(\n          this.rtcConfig_.vendors[vendor], isGloballyValid)) {\n        delete this.rtcConfig_.vendors[vendor];\n      }\n    });\n\n  }\n\n  /**\n   * Assigns constant macros that should exist for all RTC to object of custom\n   * per-network macros.\n   * @param {!Object<string, !../../../src/service/variable-source.AsyncResolverDef>} macros\n   */\n  assignMacros(macros) {\n    macros['TIMEOUT'] = () => this.rtcConfig_.timeoutMillis;\n    macros['CONSENT_STATE'] = () => this.consentState_;\n    return macros;\n  }\n\n  /**\n   * Manages sending the RTC callouts for the Custom URLs.\n   * @param {!Object<string, !../../../src/service/variable-source.AsyncResolverDef>} customMacros The ad-network specified macro\n   */\n  handleRtcForCustomUrls(customMacros) {\n    // For each publisher defined URL, inflate the url using the macros,\n    // and send the RTC request.\n    (this.rtcConfig_.urls || []).forEach(urlObj => {\n      let url, errorReportingUrl;\n      if (isObject(urlObj)) {\n        url = urlObj.url;\n        errorReportingUrl = urlObj.errorReportingUrl;\n      } else if (typeof urlObj == 'string') {\n        url = urlObj;\n      } else {\n        dev().warn(TAG, `Invalid url: ${urlObj}`);\n      }\n      this.inflateAndSendRtc_(url,\n          customMacros,\n          errorReportingUrl);\n    });\n  }\n\n  /**\n   * Manages sending the RTC callouts for all specified vendors.\n   * @param {!Object<string, !../../../src/service/variable-source.AsyncResolverDef>} customMacros The ad-network specified macro\n   */\n  handleRtcForVendorUrls(customMacros) {\n    // For each vendor the publisher has specified, inflate the vendor\n    // url if it exists, and send the RTC request.\n    Object.keys(this.rtcConfig_.vendors || []).forEach(vendor => {\n      const vendorObject = RTC_VENDORS[vendor.toLowerCase()];\n      const url = vendorObject ? vendorObject.url : '';\n      const errorReportingUrl = vendorObject && vendorObject.errorReportingUrl ?\n        vendorObject.errorReportingUrl : '';\n      if (!url) {\n        return this.promiseArray_.push(\n            this.buildErrorResponse_(\n                RTC_ERROR_ENUM.UNKNOWN_VENDOR, vendor, errorReportingUrl));\n      }\n      // There are two valid configurations of the vendor object.\n      // It can either be an object of macros mapping string to string,\n      // or it can be an object with sub-objects, one of which can be\n      // 'macros'. This is for backwards compatability.\n      const vendorMacros =\n            isObject(this.rtcConfig_.vendors[vendor]['macros']) ?\n              this.rtcConfig_.vendors[vendor]['macros'] :\n              this.rtcConfig_.vendors[vendor];\n      const validVendorMacros = {};\n      Object.keys(vendorMacros).forEach(macro => {\n        if (!(vendorObject.macros && vendorObject.macros.includes(macro))) {\n          user().error(TAG, `Unknown macro: ${macro} for vendor: ${vendor}`);\n        } else {\n          const value = vendorMacros[macro];\n          validVendorMacros[macro] = isObject(value) || isArray(value) ?\n            JSON.stringify(value) : value;\n        }\n      });\n      // The ad network defined macros override vendor defined/pub specifed.\n      const macros = Object.assign(validVendorMacros, customMacros);\n      this.inflateAndSendRtc_(url,\n          macros, errorReportingUrl,\n          vendor.toLowerCase());\n    });\n  }\n\n  /**\n   * @param {string} url\n   * @param {!Object<string, !../../../src/service/variable-source.AsyncResolverDef>} macros\n   * @param {string} errorReportingUrl\n   * @param {string=} opt_vendor\n   * @private\n   */\n  inflateAndSendRtc_(url,\n    macros, errorReportingUrl, opt_vendor) {\n    let {timeoutMillis} = this.rtcConfig_;\n    const callout = opt_vendor || this.getCalloutParam_(url);\n    const checkStillCurrent = this.a4aElement_.verifyStillCurrent.bind(\n        this.a4aElement_)();\n    /**\n     * The time that it takes to substitute the macros into the URL can vary\n     * depending on what the url requires to be substituted, i.e. a long\n     * async call. Thus, however long the URL replacement took is treated as a\n     * time penalty.\n     * @param {string} url\n     */\n    const send = url => {\n      if (Object.keys(this.seenUrls_).length == MAX_RTC_CALLOUTS) {\n        return this.buildErrorResponse_(\n            RTC_ERROR_ENUM.MAX_CALLOUTS_EXCEEDED,\n            callout, errorReportingUrl);\n      }\n      if (!Services.urlForDoc(\n          this.a4aElement_.getAmpDoc()).isSecure(url)) {\n        return this.buildErrorResponse_(RTC_ERROR_ENUM.INSECURE_URL,\n            callout, errorReportingUrl);\n      }\n      if (this.seenUrls_[url]) {\n        return this.buildErrorResponse_(RTC_ERROR_ENUM.DUPLICATE_URL,\n            callout, errorReportingUrl);\n      }\n      this.seenUrls_[url] = true;\n      if (url.length > MAX_URL_LENGTH) {\n        url = this.truncUrl_(url);\n      }\n      return this.sendRtcCallout_(\n          url, timeoutMillis, callout, checkStillCurrent,\n          errorReportingUrl);\n    };\n\n    const whitelist = {};\n    Object.keys(macros).forEach(key => whitelist[key] = true);\n    const urlReplacementStartTime = Date.now();\n    this.promiseArray_.push(Services.timerFor(this.win_).timeoutPromise(\n        timeoutMillis,\n        Services.urlReplacementsForDoc(this.ampDoc_).expandUrlAsync(\n            url, macros, whitelist)).then(url => {\n      checkStillCurrent();\n      timeoutMillis -= (urlReplacementStartTime - Date.now());\n      return send(url);\n    }).catch(error => {\n      return isCancellation(error) ? undefined :\n        this.buildErrorResponse_(RTC_ERROR_ENUM.MACRO_EXPAND_TIMEOUT,\n            callout, errorReportingUrl);\n    }));\n  }\n\n\n  /**\n   * @param {string} url\n   * @return {string}\n   */\n  truncUrl_(url) {\n    url = url.substr(0, MAX_URL_LENGTH - 12).replace(/%\\w?$/, '');\n    return url + '&__trunc__=1';\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} timeoutMillis\n   * @param {string} callout\n   * @param {!Function} checkStillCurrent\n   * @param {string} errorReportingUrl\n   * @return {!Promise<!rtcResponseDef>}\n   * @private\n   */\n  sendRtcCallout_(url, timeoutMillis, callout, checkStillCurrent,\n    errorReportingUrl) {\n    /**\n     * Note: Timeout is enforced by timerFor, not the value of\n     *   rtcTime. There are situations where rtcTime could thus\n     *   end up being greater than timeoutMillis.\n     */\n    return Services.timerFor(this.win_).timeoutPromise(\n        timeoutMillis,\n        Services.xhrFor(this.win_).fetchJson(\n            // NOTE(bradfrizzell): we could include ampCors:false allowing\n            // the request to be cached across sites but for now assume that\n            // is not a required feature.\n            url, {credentials: 'include'}).then(res => {\n          checkStillCurrent();\n          return res.text().then(text => {\n            checkStillCurrent();\n            const rtcTime = Date.now() - this.rtcStartTime_;\n            // An empty text response is allowed, not an error.\n            if (!text) {\n              return {rtcTime, callout};\n            }\n            const response = tryParseJson(text);\n            return response ? {response, rtcTime, callout} :\n              this.buildErrorResponse_(\n                  RTC_ERROR_ENUM.MALFORMED_JSON_RESPONSE, callout,\n                  errorReportingUrl, rtcTime);\n          });\n        })).catch(error => {\n      return isCancellation(error) ? undefined :\n        this.buildErrorResponse_(\n            // The relevant error message for timeout looks like it is\n            // just 'message' but is in fact 'messageXXX' where the\n            // X's are hidden special characters. That's why we use\n            // match here.\n            (/^timeout/.test(error.message)) ?\n              RTC_ERROR_ENUM.TIMEOUT : RTC_ERROR_ENUM.NETWORK_FAILURE,\n            callout, errorReportingUrl, Date.now() - this.rtcStartTime_);\n    });\n  }\n\n  /**\n   * Attempts to parse the publisher-defined RTC config off the amp-ad\n   * element, then validates that the rtcConfig exists, and contains\n   * an entry for either vendor URLs, or publisher-defined URLs. If the\n   * config contains an entry for timeoutMillis, validates that it is a\n   * number, or converts to a number if number-like, otherwise overwrites\n   * with the default.\n   * IMPORTANT: If the rtcConfig is invalid, RTC is aborted, and the ad\n   *   request continues without RTC.\n   * @param {!Element} element\n   * @return {boolean}\n   */\n  validateRtcConfig_(element) {\n    const defaultTimeoutMillis = 1000;\n    const unparsedRtcConfig = element.getAttribute('rtc-config');\n    if (!unparsedRtcConfig) {\n      return false;\n    }\n    const rtcConfig = tryParseJson(unparsedRtcConfig);\n    if (!rtcConfig) {\n      user().warn(TAG, 'Could not JSON parse rtc-config attribute');\n      return false;\n    }\n\n    let timeout;\n    try {\n      user().assert(rtcConfig['vendors'] || rtcConfig['urls'],\n          'RTC Config must specify vendors or urls');\n      Object.keys(rtcConfig).forEach(key => {\n        switch (key) {\n          case 'vendors':\n            user().assert(isObject(rtcConfig[key]), 'RTC invalid vendors');\n            break;\n          case 'urls':\n            user().assert(isArray(rtcConfig[key]), 'RTC invalid urls');\n            break;\n          case 'timeoutMillis':\n            timeout = parseInt(rtcConfig[key], 10);\n            if (isNaN(timeout)) {\n              user().warn(TAG, 'Invalid RTC timeout is NaN, ' +\n                          `using default timeout ${defaultTimeoutMillis}ms`);\n              timeout = undefined;\n            } else if (timeout >= defaultTimeoutMillis || timeout < 0) {\n              user().warn(TAG, `Invalid RTC timeout: ${timeout}ms, ` +\n                          `using default timeout ${defaultTimeoutMillis}ms`);\n              timeout = undefined;\n            }\n            break;\n          default:\n            user().warn(TAG, `Unknown RTC Config key: ${key}`);\n            break;\n        }\n      });\n      if (!Object.keys(rtcConfig['vendors'] || {}).length\n          && !(rtcConfig['urls'] || []).length) {\n        return false;\n      }\n      const validateErrorReportingUrl = urlObj => {\n        const errorUrl = urlObj['errorReportingUrl'];\n        if (errorUrl && !Services.urlForDoc(\n            this.a4aElement_.getAmpDoc()).isSecure(errorUrl)) {\n          dev().warn(TAG, `Insecure RTC errorReportingUrl: ${errorUrl}`);\n          urlObj['errorReportingUrl'] = undefined;\n        }\n      };\n      (rtcConfig['urls'] || []).forEach(urlObj => {\n        if (isObject(urlObj)) {\n          validateErrorReportingUrl(urlObj);\n        }\n      });\n      validateErrorReportingUrl(rtcConfig);\n    } catch (unusedErr) {\n      // This error would be due to the asserts above.\n      return false;\n    }\n    rtcConfig['timeoutMillis'] = timeout !== undefined ?\n      timeout : defaultTimeoutMillis;\n    this.rtcConfig_ = /** @type {RtcConfigDef} */(rtcConfig);\n    return true;\n  }\n}\nAMP.RealTimeConfigManager = RealTimeConfigManager;\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IntersectionObserverPolyfill} from '../../../src/intersection-observer-polyfill';\nimport {dev} from '../../../src/log';\n\nexport class RefreshIntersectionObserverWrapper {\n  /**\n   * A thin wrapper class to allow the IntersectionObserverPolyfill to work with\n   * refresh.\n   * @param {function(!Array<!IntersectionObserverEntry>)} callback\n   * @param {!AMP.BaseElement} baseElement\n   * @param {Object} config\n   */\n  constructor(callback, baseElement, config) {\n\n    /**\n     * @private @const {!IntersectionObserverPolyfill}\n     */\n    this.intersectionObserver_ = new IntersectionObserverPolyfill(\n        callback, config);\n\n    /**\n     * Stores elements and their original viewportCallback functions so that\n     * they can be reverted upon invocation of unobserve.\n     * @private {!Object<string, function()>}\n     */\n    this.viewportCallbacks_ = {};\n\n    /** @private @const {!../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = baseElement.getViewport();\n\n    /**\n     * Flag that indicates when #tick should be called on the observer\n     * polyfill.\n     * @private {boolean}\n     */\n    this.updateObserver_ = false;\n  }\n\n  /**\n   * Begin observing the given element.\n   * @param {!Element} element\n   */\n  observe(element) {\n    // The attribute name is exported in refresh-manager.js as\n    // DATA_MANAGER_ID_NAME, but unfortunately, it can't be imported without\n    // creating a cyclical dependency.\n    const refreshId = element.getAttribute('data-amp-ad-refresh-id');\n    dev().assert(refreshId, 'observe invoked on element without refresh id');\n\n    if (!this.viewportCallbacks_[refreshId]) {\n      const viewportCallback = element.viewportCallback.bind(element);\n      this.viewportCallbacks_[refreshId] = viewportCallback;\n      element.viewportCallback = inViewport => {\n        if (this.updateObserver_) {\n          this.intersectionObserver_.tick(this.viewport_.getRect());\n        }\n        viewportCallback(inViewport);\n      };\n    }\n\n    this.updateObserver_ = true;\n    this.intersectionObserver_.observe(element);\n    // Elements that appear and remain within the viewport for the duration of\n    // their existence may never have viewportCallback invoked. To ensure that\n    // refresh is triggered, we need to make this initial call.\n    this.intersectionObserver_.tick(this.viewport_.getRect());\n  }\n\n  /**\n   * Cease observing the given element.\n   * @param {!Element} element\n   */\n  unobserve(element) {\n    // We need to call 'tick' to update current host viewport state, otherwise\n    // the next time we call 'observe', the viewport state might be stale, and\n    // indicate that the element is in the viewport when it's not.\n    this.intersectionObserver_.tick(this.viewport_.getRect());\n    this.intersectionObserver_.unobserve(element);\n    this.updateObserver_ = false;\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RefreshIntersectionObserverWrapper} from './refresh-intersection-observer-wrapper';\nimport {Services} from '../../../src/services';\nimport {dev, user} from '../../../src/log';\n\n/**\n * - visibilePercentageMin: The percentage of pixels that need to be on screen\n *   for the creative to be considered \"visible\".\n * - continuousTimeMin: The amount of continuous time, in milliseconds, that\n *   the creative must be on screen for in order to be considered \"visible\".\n *\n * @typedef {{\n *   visiblePercentageMin: number,\n *   continuousTimeMin: number,\n * }}\n */\nexport let RefreshConfig;\n\nexport const MIN_REFRESH_INTERVAL = 30;\nexport const DATA_ATTR_NAME = 'data-enable-refresh';\nexport const DATA_MANAGER_ID_NAME = 'data-amp-ad-refresh-id';\nexport const METATAG_NAME = 'amp-ad-enable-refresh';\n\nconst TAG = 'AMP-AD';\n\n/**\n * Retrieves the publisher-specified refresh interval, if one were set. This\n * function first checks for appropriate slot attributes and then for\n * metadata tags, preferring whichever it finds first.\n * @param {!Element} element\n * @param {!Window} win\n * @return {?number}\n * @visibleForTesting\n */\nexport function getPublisherSpecifiedRefreshInterval(element, win) {\n  const refreshInterval = element.getAttribute(DATA_ATTR_NAME);\n  if (refreshInterval) {\n    return checkAndSanitizeRefreshInterval(refreshInterval);\n  }\n  let metaTag;\n  const metaTagContent = ((metaTag = win.document\n      .getElementsByName(METATAG_NAME))\n      && metaTag[0]\n      && metaTag[0].getAttribute('content'));\n  if (!metaTagContent) {\n    return null;\n  }\n  const networkIntervalPairs = metaTagContent.split(',');\n  for (let i = 0; i < networkIntervalPairs.length; i++) {\n    const pair = networkIntervalPairs[i].split('=');\n    user().assert(pair.length == 2, 'refresh metadata config must be of ' +\n        'the form `network_type=refresh_interval`');\n    if (pair[0].toLowerCase() == element.getAttribute('type').toLowerCase()) {\n      return checkAndSanitizeRefreshInterval(pair[1]);\n    }\n  }\n  return null;\n}\n\n/**\n * Ensures that refreshInterval is a number no less than 30. Returns null if\n * the given input fails to meet these criteria. This also converts from\n * seconds to milliseconds.\n *\n * @param {(number|string)} refreshInterval\n * @return {?number}\n */\nfunction checkAndSanitizeRefreshInterval(refreshInterval) {\n  const refreshIntervalNum = Number(refreshInterval);\n  if (isNaN(refreshIntervalNum) ||\n      refreshIntervalNum < MIN_REFRESH_INTERVAL) {\n    user().warn(TAG,\n        'invalid refresh interval, must be a number no less than ' +\n        `${MIN_REFRESH_INTERVAL}: ${refreshInterval}`);\n    return null;\n  }\n  return refreshIntervalNum * 1000;\n}\n\n/**\n * Defines the DFA states for the refresh cycle.\n *\n * 1. All newly registered elements begin in the INITIAL state.\n * 2. Only when the element enters the viewport with the specified\n *    intersection ratio does it transition into the VIEW_PENDING state.\n * 3. If the element remains in the viewport for the specified duration, it\n *    will then transition into the REFRESH_PENDING state, otherwise it will\n *    transition back into the INITIAL state.\n * 4. The element will remain in REFRESH_PENDING state until the refresh\n *    interval expires.\n * 5. Once the interval expires, the element will return to the INITIAL state.\n *\n * @enum {string}\n */\nconst RefreshLifecycleState = {\n  /**\n   * Element has been registered, but not yet seen on screen.\n   */\n  INITIAL: 'initial',\n\n  /**\n   * The element has appeared in the viewport, but not yet for the required\n   * duration.\n   */\n  VIEW_PENDING: 'view_pending',\n\n  /**\n   * The element has been in the viewport for the required duration; the\n   * refresh interval for the element has begun.\n   */\n  REFRESH_PENDING: 'refresh_pending',\n};\n\n/**\n * An object containing the IntersectionObservers used to monitor elements.\n * Each IO is configured to a different threshold, and all elements that\n * share the same visiblePercentageMin will be monitored by the same IO.\n *\n * @const {!Object<string, (!IntersectionObserver|!RefreshIntersectionObserverWrapper)>}\n */\nconst observers = {};\n\n/**\n * An object containing all currently active RefreshManagers. This is used in\n * the IntersectionOberserver callback function to find the appropriate element\n * target.\n *\n * @const {!Object<string, !RefreshManager>}\n */\nconst managers = {};\n\n/**\n * Used to generate unique IDs for each RefreshManager.\n * @type {number}\n */\nlet refreshManagerIdCounter = 0;\n\n/**\n * Returns an instance of RefreshManager, if refresh is enabled on the page or\n * slot. An optional predicate for eligibility may be passed. If refresh is not\n * enabled, or fails the optional predicate, null will be returned.\n *\n * @param {!./amp-a4a.AmpA4A} a4a\n * @param {function():boolean=} opt_predicate\n * @return {?RefreshManager}\n */\nexport function getRefreshManager(a4a, opt_predicate) {\n  const refreshInterval =\n      getPublisherSpecifiedRefreshInterval(a4a.element, a4a.win);\n  if (!refreshInterval || (opt_predicate && !opt_predicate())) {\n    return null;\n  }\n  return new RefreshManager(a4a, {\n    visiblePercentageMin: 50,\n    continuousTimeMin: 1,\n  }, refreshInterval);\n}\n\n\nexport class RefreshManager {\n\n  /**\n   * @param {!./amp-a4a.AmpA4A} a4a The AmpA4A instance to be refreshed.\n   * @param {!RefreshConfig} config\n   * @param {number} refreshInterval\n   */\n  constructor(a4a, config, refreshInterval) {\n\n    /** @private {string} */\n    this.state_ = RefreshLifecycleState.INITIAL;\n\n    /** @const @private {!./amp-a4a.AmpA4A} */\n    this.a4a_ = a4a;\n\n    /** @const @private {!Window} */\n    this.win_ = a4a.win;\n\n    /** @const @private {!Element} */\n    this.element_ = a4a.element;\n\n    /** @const @private {string} */\n    this.adType_ = this.element_.getAttribute('type').toLowerCase();\n\n    /** @const @private {?number} */\n    this.refreshInterval_ = refreshInterval;\n\n    /** @const @private {!RefreshConfig} */\n    this.config_ = this.convertAndSanitizeConfiguration_(config);\n\n    /** @const @private {!../../../src/service/timer-impl.Timer} */\n    this.timer_ = Services.timerFor(this.win_);\n\n    /** @private {?(number|string)} */\n    this.refreshTimeoutId_ = null;\n\n    /** @private {?(number|string)} */\n    this.visibilityTimeoutId_ = null;\n\n    const managerId = String(refreshManagerIdCounter++);\n    this.element_.setAttribute(DATA_MANAGER_ID_NAME, managerId);\n    managers[managerId] = this;\n    this.initiateRefreshCycle();\n  }\n\n  /**\n   * Returns an IntersectionObserver configured to the given threshold, creating\n   * one if one does not yet exist.\n   *\n   * @param {number} threshold\n   * @return {(!IntersectionObserver|!RefreshIntersectionObserverWrapper)}\n   */\n  getIntersectionObserverWithThreshold_(threshold) {\n\n    const thresholdString = String(threshold);\n    return observers[thresholdString] ||\n        (observers[thresholdString] = 'IntersectionObserver' in this.win_\n          ? new this.win_['IntersectionObserver'](this.ioCallback_, {threshold})\n          : new RefreshIntersectionObserverWrapper(\n              this.ioCallback_, this.a4a_, {threshold}));\n  }\n\n  /**\n   * Returns a function that will be invoked directly by the\n   * IntersectionObserver implementation. It will implement the core logic of\n   * the refresh lifecycle, including the transitions of the DFA.\n   *\n   * @param {!Array<!IntersectionObserverEntry>} entries\n   */\n  ioCallback_(entries) {\n    entries.forEach(entry => {\n      const refreshManagerId = entry.target.getAttribute(DATA_MANAGER_ID_NAME);\n      dev().assert(refreshManagerId);\n      const refreshManager = managers[refreshManagerId];\n      if (entry.target != refreshManager.element_) {\n        return;\n      }\n      switch (refreshManager.state_) {\n        case RefreshLifecycleState.INITIAL:\n          // First check if the element qualifies as \"being on screen\", i.e.,\n          // that at least a minimum threshold of pixels is on screen. If so,\n          // begin a timer, set for the duration of the minimum time on screen\n          // threshold. If this timer runs out without interruption, then all\n          // viewability conditions have been met, and we can begin the refresh\n          // timer.\n          if (entry.intersectionRatio >=\n              refreshManager.config_.visiblePercentageMin) {\n            refreshManager.state_ = RefreshLifecycleState.VIEW_PENDING;\n            refreshManager.visibilityTimeoutId_ = refreshManager.timer_.delay(\n                () => {\n                  refreshManager.state_ = RefreshLifecycleState.REFRESH_PENDING;\n                  refreshManager.startRefreshTimer_();\n                }, refreshManager.config_.continuousTimeMin);\n          }\n          break;\n        case RefreshLifecycleState.VIEW_PENDING:\n          // If the element goes off screen before the minimum on screen time\n          // duration elapses, place it back into INITIAL state.\n          if (entry.intersectionRatio <\n              refreshManager.config_.visiblePercentageMin) {\n            refreshManager.timer_.cancel(refreshManager.visibilityTimeoutId_);\n            refreshManager.visibilityTimeoutId_ = null;\n            refreshManager.state_ = RefreshLifecycleState.INITIAL;\n          }\n          break;\n        case RefreshLifecycleState.REFRESH_PENDING:\n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * Initiates the refresh cycle by initiating the visibility manager on the\n   * element.\n   */\n  initiateRefreshCycle() {\n    switch (this.state_) {\n      case RefreshLifecycleState.INITIAL:\n        this.getIntersectionObserverWithThreshold_(\n            this.config_.visiblePercentageMin).observe(this.element_);\n        break;\n      case RefreshLifecycleState.REFRESH_PENDING:\n      case RefreshLifecycleState.VIEW_PENDING:\n      default:\n        break;\n\n    }\n  }\n\n  /**\n   * Starts the refresh timer for the given monitored element.\n   *\n   * @return {!Promise<boolean>} A promise that resolves to true when the\n   *    refresh timer elapses successfully.\n   */\n  startRefreshTimer_() {\n    return new Promise(resolve => {\n      this.refreshTimeoutId_ = this.timer_.delay(() => {\n        this.state_ = RefreshLifecycleState.INITIAL;\n        this.unobserve();\n        this.a4a_.refresh(() => this.initiateRefreshCycle());\n        resolve(true);\n      }, /** @type {number} */ (this.refreshInterval_));\n    });\n  }\n\n  /**\n   * Converts config to appropriate units, modifying the argument in place. This\n   * also ensures that visiblePercentageMin is in the range of [0, 100].\n   * @param {!RefreshConfig} config\n   * @return {!RefreshConfig}\n   */\n  convertAndSanitizeConfiguration_(config) {\n    dev().assert(config['visiblePercentageMin'] >= 0 &&\n        config['visiblePercentageMin'] <= 100,\n    'visiblePercentageMin for refresh must be in the range [0, 100]');\n    // Convert seconds to milliseconds.\n    config['continuousTimeMin'] *= 1000;\n    config['visiblePercentageMin'] /= 100;\n    return config;\n  }\n\n  /**\n   * Stops the intersection observer from observing the element.\n   */\n  unobserve() {\n    this.getIntersectionObserverWithThreshold_(\n        this.config_.visiblePercentageMin).unobserve(this.element_);\n  }\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {base64DecodeToBytes} from '../../../src/utils/base64';\nimport {dev, user} from '../../../src/log';\nimport {isArray} from '../../../src/types';\n\n/** @visibleForTesting */\nexport const AMP_SIGNATURE_HEADER = 'AMP-Fast-Fetch-Signature';\n\n/**\n * The result of an attempt to verify a Fast Fetch signature. The different\n * error statuses are used for reporting errors to the ad network.\n *\n * @enum {number}\n */\nexport const VerificationStatus = {\n\n  /** The ad was successfully verified as AMP. */\n  OK: 0,\n\n  /**\n   * Verification failed because of a factor beyond the ad network's control,\n   * such as a network connectivity failure, unavailability of Web Cryptography\n   * in the current browsing context, or a misbehaving signing service.\n   */\n  UNVERIFIED: 1,\n\n  /**\n   * Verification failed because the keypair ID provided by the ad network did\n   * not correspond to any public key offered by the signing service.\n   */\n  ERROR_KEY_NOT_FOUND: 2,\n\n  /**\n   * Verification failed because the signature provided by the ad network was\n   * not the correct cryptographic signature for the given creative data and\n   * public key.\n   */\n  ERROR_SIGNATURE_MISMATCH: 3,\n\n  /**\n   * Verification failed because the page does not have web crypto available,\n   * i.e. is not SSL.\n   */\n  CRYPTO_UNAVAILABLE: 4,\n\n};\n\n/**\n * A window-level object that encapsulates the logic for obtaining public keys\n * from Fast Fetch signing services and cryptographically verifying signatures\n * of AMP creatives.\n *\n * Unlike an AMP service, a signature verifier is **stateful**. It maintains a\n * cache of all public keys that it has previously downloaded and imported, and\n * also keeps track of which keys and signing services have already had\n * unsuccessful download or import attempts and should not be attempted again.\n *\n * This entire class is currently dead code in production, but will soon be\n * introduced as an experiment.\n */\nexport class SignatureVerifier {\n\n  /**\n   * @param {!Window} win\n   * @param {!Object<string, string>} signingServerURLs a map from the name of\n   *    each trusted signing service to the URL of its public key endpoint\n   */\n  constructor(win, signingServerURLs) {\n    /** @private @const {!Window} */\n    this.win_ = win;\n\n    /** @private @const {!Object<string, string>} */\n    this.signingServerURLs_ = signingServerURLs;\n\n    /**\n     * The cache where all the public keys are stored.\n     *\n     * This field has a lot of internal structure and its type's a little hairy,\n     * so here's a rundown of what each piece means:\n     *  - If Web Cryptography isn't available in the current browsing context,\n     *    then the entire field is null. Since the keys are of no use, we don't\n     *    fetch them.\n     *  - Otherwise, it's a map-like `Object` from signing service names (as\n     *    defined in the Fast Fetch config registry) to \"signer\" objects.\n     *  - The `promise` property of each signer resolves to a boolean indicating\n     *    whether the most recent attempt to fetch and import that signing\n     *    service's public keys was successful. If the promise is still pending,\n     *    then an attempt is currently in progress. This property is mutable;\n     *    its value is replaced with a new promise when a new attempt is made.\n     *    Invariant: only one attempt may be in progress at a time, so this\n     *    property may not be mutated while the current promise is pending.\n     *  - The `keys` property of each signer is a map-like `Object` from keypair\n     *    IDs to nullable key promises. (This means that a property access on\n     *    this object may evaluate to `undefined`, `null`, or a `Promise`\n     *    object.) The `keys` object is internally mutable; new keys are added\n     *    to it as they are fetched. Invariant: the `keys` object may be mutated\n     *    only while the corresponding `promise` object is pending; this ensures\n     *    that callbacks chained to `promise` may observe `keys` without being\n     *    subject to race conditions.\n     *  - If a key promise (i.e., the value of a property access on the `keys`\n     *    object) is absent (i.e., `undefined`), then no key with that keypair\n     *    ID is present (but this could be because of a stale cache). If it's\n     *    null, then no key with that keypair ID could be found even after\n     *    cachebusting. If it's a `Promise` that resolves to `null`, then key\n     *    data for that keypair ID was found but could not be imported\n     *    successfully; this most likely indicates signing service misbehavior.\n     *    The success case is a `Promise` that resolves to a `CryptoKey`.\n     *\n     * @private @const {?Object<string, {promise: !Promise<boolean>, keys: !Object<string, ?Promise<?webCrypto.CryptoKey>>}>}\n     */\n    this.signers_ = Services.cryptoFor(win).isPkcsAvailable() ? {} : null;\n\n    /**\n     * Gets a notion of current time, in ms.  The value is not necessarily\n     * absolute, so should be used only for computing deltas.  When available,\n     * the performance system will be used; otherwise Date.now() will be\n     * returned.\n     *\n     * @private @const {function(): number}\n     */\n    this.getNow_ = (win.performance && win.performance.now) ?\n      win.performance.now.bind(win.performance) : Date.now;\n  }\n\n  /**\n   * Fetches and imports the public keyset for the named signing service,\n   * without any cachebusting. Hopefully, this will hit cache in many cases\n   * and not make an actual network round-trip. This method should be called\n   * as early as possible, once it's known which signing service is likely to\n   * be used, so that the network request and key imports can execute in\n   * parallel with other operations.\n   *\n   * @param {string} signingServiceName\n   */\n  loadKeyset(signingServiceName) {\n    if (this.signers_ && !this.signers_[signingServiceName]) {\n      const keys = {};\n      const promise = this.fetchAndAddKeys_(keys, signingServiceName, null);\n      this.signers_[signingServiceName] = {promise, keys};\n    }\n  }\n\n  /**\n   * Extracts a cryptographic signature from `headers` and attempts to verify\n   * that it's the correct cryptographic signature for `creative`.\n   *\n   * As a precondition, `loadKeyset(signingServiceName)` must have already been\n   * called.\n   *\n   * @param {!ArrayBuffer} creative\n   * @param {!Headers} headers\n   * @return {!Promise<!VerificationStatus>}\n   */\n  verify(creative, headers) {\n    const signatureFormat =\n        /^([A-Za-z0-9._-]+):([A-Za-z0-9._-]+):([A-Za-z0-9+/]{341}[AQgw]==)$/;\n    if (!headers.has(AMP_SIGNATURE_HEADER)) {\n      return Promise.resolve(VerificationStatus.UNVERIFIED);\n    }\n    const headerValue = headers.get(AMP_SIGNATURE_HEADER);\n    const match = signatureFormat.exec(headerValue);\n    if (!match) {\n      // TODO(@taymonbeal, #9274): replace this with real error reporting\n      user().error(\n          'AMP-A4A', `Invalid signature header: ${headerValue.split(':')[0]}`);\n      return Promise.resolve(VerificationStatus.ERROR_SIGNATURE_MISMATCH);\n    }\n    return this.verifyCreativeAndSignature(\n        match[1], match[2], base64DecodeToBytes(match[3]), creative);\n  }\n\n  /**\n   * Verifies that `signature` is the correct cryptographic signature for\n   * `creative`, with the public key from the named signing service identified\n   * by `keypairId`.\n   *\n   * As a precondition, `loadKeyset(signingServiceName)` must have already been\n   * called.\n   *\n   * If the keyset for the named signing service was imported successfully but\n   * did not include a key for `keypairId`, this may be the result of a stale\n   * browser cache. To work around this, `keypairId` is added to the public key\n   * endpoint URL as a query parameter and the keyset is re-fetched. Other kinds\n   * of failures, including network connectivity failures, are not retried.\n   *\n   * @param {string} signingServiceName\n   * @param {string} keypairId\n   * @param {!Uint8Array} signature\n   * @param {!ArrayBuffer} creative\n   * @return {!Promise<!VerificationStatus>}\n   * @visibleForTesting\n   */\n  verifyCreativeAndSignature(\n    signingServiceName, keypairId, signature, creative) {\n    if (!this.signers_) {\n      // Web Cryptography isn't available.\n      return Promise.resolve(VerificationStatus.CRYPTO_UNAVAILABLE);\n    }\n    const signer = this.signers_[signingServiceName];\n    dev().assert(\n        signer, 'Keyset for service %s not loaded before verification',\n        signingServiceName);\n    return signer.promise.then(success => {\n      if (!success) {\n        // The public keyset couldn't be fetched and imported. Probably a\n        // network connectivity failure.\n        return VerificationStatus.UNVERIFIED;\n      }\n      const keyPromise = signer.keys[keypairId];\n      if (keyPromise === undefined) {\n        // We don't have this key, but maybe the cache is stale; try\n        // cachebusting.\n        signer.promise =\n            this.fetchAndAddKeys_(signer.keys, signingServiceName, keypairId)\n                .then(success => {\n                  if (signer.keys[keypairId] === undefined) {\n                    // We still don't have this key; make sure we never try\n                    // again.\n                    signer.keys[keypairId] = null;\n                  }\n                  return success;\n                });\n        // This \"recursive\" call can recurse at most once.\n        return this.verifyCreativeAndSignature(\n            signingServiceName, keypairId, signature, creative);\n      } else if (keyPromise === null) {\n        // We don't have this key and we already tried cachebusting.\n        return VerificationStatus.ERROR_KEY_NOT_FOUND;\n      } else {\n        return keyPromise.then(key => {\n          if (!key) {\n            // This particular public key couldn't be imported. Probably the\n            // signing service's fault.\n            return VerificationStatus.UNVERIFIED;\n          }\n          const crypto = Services.cryptoFor(this.win_);\n          return crypto.verifyPkcs(key, signature, creative).then(\n              result => result ? VerificationStatus.OK :\n                VerificationStatus.ERROR_SIGNATURE_MISMATCH,\n              err => {\n                // Web Cryptography rejected the verification attempt. This\n                // hopefully won't happen in the wild, but browsers can be weird\n                // about this, so we need to guard against the possibility.\n                // Phone home to the AMP Project so that we can understand why\n                // this occurred.\n                const message = err && err.message;\n                dev().error(\n                    'AMP-A4A', `Failed to verify signature: ${message}`);\n                return VerificationStatus.UNVERIFIED;\n              });\n        });\n      }\n    });\n  }\n\n  /**\n   * Try to download the keyset for the named signing service and add a promise\n   * for each key to the `keys` object.\n   *\n   * @param {!Object<string, ?Promise<?webCrypto.CryptoKey>>} keys the object to\n   *     add each key promise to. This is mutated while the returned promise is\n   *     pending.\n   * @param {string} signingServiceName\n   * @param {?string} keypairId the keypair ID to include in the query string\n   *     for cachebusting purposes, or `null` if no cachebusting is needed\n   * @return {!Promise<boolean>} resolves after the mutation of `keys` is\n   *     complete, to `true` if the keyset was downloaded and parsed\n   *     successfully (even if some keys were malformed), or `false` if a\n   *     keyset-level failure occurred\n   * @private\n   */\n  fetchAndAddKeys_(keys, signingServiceName, keypairId) {\n    let url = this.signingServerURLs_[signingServiceName];\n    if (keypairId != null) {\n      url += '?kid=' + encodeURIComponent(keypairId);\n    }\n    // TODO(@taymonbeal, #11088): consider a timeout on this fetch\n    return Services.xhrFor(this.win_)\n        .fetchJson(url, {\n          mode: 'cors',\n          method: 'GET',\n          // This should be cached across publisher domains, so don't append\n          // __amp_source_origin to the URL.\n          ampCors: false,\n          credentials: 'omit',\n        }).then(\n            response => {\n              // These are assertions on signing service behavior required by\n              // the spec. However, nothing terrible happens if they aren't met\n              // and there's no meaningful error recovery to be done if they\n              // fail, so we don't need to do them at runtime in production.\n              // They're included in dev mode as a debugging aid.\n              dev().assert(\n                  response.status === 200,\n                  'Fast Fetch keyset spec requires status code 200');\n              dev().assert(\n                  response.headers.get('Content-Type') ==\n                      'application/jwk-set+json',\n                  'Fast Fetch keyset spec requires Content-Type: ' +\n                      'application/jwk-set+json');\n              return response.json().then(\n                  jwkSet => {\n                    // This is supposed to be a JSON Web Key Set, as defined in\n                    // Section 5 of RFC 7517. However, the signing service could\n                    // misbehave and send an arbitrary JSON value, so we have to\n                    // type-check at runtime.\n                    if (!jwkSet || !isArray(jwkSet['keys'])) {\n                      signingServiceError(\n                          signingServiceName,\n                          `Key set (${JSON.stringify(jwkSet)}) has no \"keys\"`);\n                      return false;\n                    }\n                    jwkSet['keys'].forEach(jwk => {\n                      if (!jwk || typeof jwk['kid'] != 'string') {\n                        signingServiceError(\n                            signingServiceName,\n                            `Key (${JSON.stringify(jwk)}) has no \"kid\"`);\n                      } else if (keys[jwk['kid']] === undefined) {\n                        // We haven't seen this keypair ID before.\n                        keys[jwk['kid']] =\n                            Services.cryptoFor(this.win_).importPkcsKey(jwk)\n                                .catch(err => {\n                                  // Web Cryptography rejected the key\n                                  // import attempt. Either the signing\n                                  // service sent a malformed key or the\n                                  // browser is doing something weird.\n                                  const jwkData = JSON.stringify(jwk);\n                                  const message = err && err.message;\n                                  signingServiceError(\n                                      signingServiceName,\n                                      `Failed to import key (${\n                                        jwkData\n                                      }): ${message}`);\n                                  return null;\n                                });\n                      }\n                    });\n                    return true;\n                  },\n                  err => {\n                    // The signing service didn't send valid JSON.\n                    signingServiceError(\n                        signingServiceName,\n                        `Failed to parse JSON: ${err && err.response}`);\n                    return false;\n                  });\n            },\n            err => {\n              // Some kind of error occurred during the XHR. This could be a lot\n              // of things (and we have no type information), but if there's no\n              // `response` it's probably a network connectivity failure, so we\n              // ignore it. Unfortunately, we can't distinguish this from a CORS\n              // problem.\n              if (err && err.response) {\n                // This probably indicates a non-2xx HTTP status code.\n                signingServiceError(\n                    signingServiceName, `Status code ${err.response.status}`);\n              }\n              return false;\n            });\n  }\n}\n\n/**\n * Report an error caused by a signing service. Since signing services currently\n * don't have their own error logging URLs, we just send everything to the AMP\n * Project.\n *\n * @param {string} signingServiceName\n * @param {string} message\n * @private\n */\nfunction signingServiceError(signingServiceName, message) {\n  dev().error(\n      'AMP-A4A', `Signing service error for ${signingServiceName}: ${message}`);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Because AdSense and DoubleClick are both operated by Google and their A4A\n// implementations share some behavior in common, part of the logic for this\n// implementation is located in the ads/google/a4a directory rather than here.\n// Most other ad networks will want to put their A4A code entirely in the\n// extensions/amp-ad-network-${NETWORK_NAME}-impl directory.\n\nimport {\n  MANUAL_EXPERIMENT_ID,\n  addExperimentIdToElement,\n  extractUrlExperimentId,\n} from '../../../ads/google/a4a/traffic-experiments';\nimport {dev} from '../../../src/log';\nimport {\n  forceExperimentBranch,\n  getExperimentBranch,\n} from '../../../src/experiments';\nimport {\n  isCdnProxy,\n  isGoogleAdsA4AValidEnvironment,\n} from '../../../ads/google/a4a/utils';\nimport {selectAndSetExperiments} from '../../../ads/google/a4a/experiment-utils';\n\n/** @const {string} @visibleForTesting */\nexport const ADSENSE_A4A_EXPERIMENT_NAME = 'expAdsenseA4A';\n\n/** @type {string} */\nconst TAG = 'amp-ad-network-adsense-impl';\n\n/** @const @type {!Object<string,?string>} */\nexport const URL_EXPERIMENT_MAPPING = {\n  '-1': MANUAL_EXPERIMENT_ID,\n  '0': null,\n};\n\n/** @const @type {!Object<string, string>} */\nexport const ADSENSE_EXPERIMENTS = {\n  UNCONDITIONED_CANONICAL_EXP: '21062154',\n  UNCONDITIONED_CANONICAL_CTL: '21062155',\n  CANONICAL_EXP: '21062158',\n  CANONICAL_CTL: '21062159',\n};\n\n/** @const @type {!Object<string, string>} */\nexport const ADSENSE_EXP_NAMES = {\n  UNCONDITIONED_CANONICAL: 'expAdsenseUnconditionedCanonical',\n  CANONICAL: 'expAdsenseCanonical',\n};\n\n/**\n * Attempts to select into Adsense experiments.\n * @param {!Window} win\n * @param {!Element} element\n */\nfunction selectExperiments(win, element) {\n  selectAndSetExperiments(win, element,\n      [ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_EXP,\n        ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_CTL],\n      ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL,\n      true);\n\n\n  // See if in holdback control/experiment.\n  const urlExperimentId = extractUrlExperimentId(win, element);\n  const experimentId = URL_EXPERIMENT_MAPPING[urlExperimentId || ''];\n  if (experimentId) {\n    addExperimentIdToElement(experimentId, element);\n    forceExperimentBranch(win, ADSENSE_A4A_EXPERIMENT_NAME, experimentId);\n    dev().info(\n        TAG, `url experiment selection ${urlExperimentId}: ${experimentId}.`);\n  }\n\n  // If not in the unconditioned canonical experiment, attempt to\n  // select into the undiluted canonical experiment.\n  const inUnconditionedCanonicalExp = !!getExperimentBranch(\n      win, ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL);\n  if (!inUnconditionedCanonicalExp && !isCdnProxy(win)) {\n    selectAndSetExperiments(win, element,\n        [ADSENSE_EXPERIMENTS.CANONICAL_EXP,\n          ADSENSE_EXPERIMENTS.CANONICAL_CTL],\n        ADSENSE_EXP_NAMES.CANONICAL, true);\n  }\n}\n\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function adsenseIsA4AEnabled(win, element, useRemoteHtml) {\n  if (useRemoteHtml || !element.getAttribute('data-ad-client')) {\n    return false;\n  }\n  selectExperiments(win, element);\n  return isGoogleAdsA4AValidEnvironment(win) ||\n      getExperimentBranch(\n          win, ADSENSE_EXP_NAMES.UNCONDITIONED_CANONICAL) ==\n      ADSENSE_EXPERIMENTS.UNCONDITIONED_CANONICAL_EXP ||\n      getExperimentBranch(win, ADSENSE_EXP_NAMES.CANONICAL) ==\n      ADSENSE_EXPERIMENTS.CANONICAL_EXP;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Determines which tags desire A4A handling\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function cloudflareIsA4AEnabled(win, element, useRemoteHtml) {\n  // We assume fast fetch for all content, but this will gracefully degrade,\n  // when non-a4a content is delivered\n  return !useRemoteHtml;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Because AdSense and DoubleClick are both operated by Google and their A4A\n// implementations share some behavior in common, part of the logic for this\n// implementation is located in the ads/google/a4a directory rather than here.\n// Most other ad networks will want to put their A4A code entirely in the\n// extensions/amp-ad-network-${NETWORK_NAME}-impl directory.\n\nimport '../../amp-a4a/0.1/real-time-config-manager';\nimport {\n  AmpA4A,\n  DEFAULT_SAFEFRAME_VERSION,\n  XORIGIN_MODE,\n  assignAdUrlToError,\n} from '../../amp-a4a/0.1/amp-a4a';\nimport {\n  AmpAnalyticsConfigDef,\n  QQID_HEADER,\n  ValidAdContainerTypes,\n  addCsiSignalsToAmpAnalyticsConfig,\n  extractAmpAnalyticsConfig,\n  getCsiAmpAnalyticsConfig,\n  getCsiAmpAnalyticsVariables,\n  getEnclosingContainerTypes,\n  getIdentityToken,\n  googleAdUrl,\n  googleBlockParameters,\n  googlePageParameters,\n  groupAmpAdsByType,\n  isCdnProxy,\n  isReportingEnabled,\n  maybeAppendErrorParameter,\n  truncAndTimeUrl,\n} from '../../../ads/google/a4a/utils';\nimport {CONSENT_POLICY_STATE} from '../../../src/consent-state';\nimport {Deferred} from '../../../src/utils/promise';\nimport {Layout, isLayoutSizeDefined} from '../../../src/layout';\nimport {Navigation} from '../../../src/service/navigation';\nimport {RTC_VENDORS} from '../../amp-a4a/0.1/callout-vendors';\nimport {\n  RefreshManager, // eslint-disable-line no-unused-vars\n  getRefreshManager,\n} from '../../amp-a4a/0.1/refresh-manager';\nimport {SafeframeHostApi} from './safeframe-host';\nimport {Services} from '../../../src/services';\nimport {\n  TFCD,\n  constructSRABlockParameters,\n  serializeTargeting,\n  sraBlockCallbackHandler,\n} from './sra-utils';\nimport {createElementWithAttributes, removeElement} from '../../../src/dom';\nimport {deepMerge, dict} from '../../../src/utils/object';\nimport {dev, user} from '../../../src/log';\nimport {domFingerprintPlain} from '../../../src/utils/dom-fingerprint';\nimport {getMode} from '../../../src/mode';\nimport {getMultiSizeDimensions} from '../../../ads/google/utils';\nimport {getOrCreateAdCid} from '../../../src/ad-cid';\nimport {\n  incrementLoadingAds,\n  is3pThrottled,\n  waitFor3pThrottle,\n} from '../../amp-ad/0.1/concurrent-load';\nimport {insertAnalyticsElement} from '../../../src/extension-analytics';\nimport {isCancellation} from '../../../src/error';\nimport {isExperimentOn} from '../../../src/experiments';\nimport {\n  isInManualExperiment,\n} from '../../../ads/google/a4a/traffic-experiments';\nimport {isSecureUrlDeprecated, parseQueryString} from '../../../src/url';\nimport {\n  lineDelimitedStreamer,\n  metaJsonCreativeGrouper,\n} from '../../../ads/google/a4a/line-delimited-response-handler';\nimport {randomlySelectUnsetExperiments} from '../../../src/experiments';\nimport {setStyles} from '../../../src/style';\nimport {stringHash32} from '../../../src/string';\nimport {tryParseJson} from '../../../src/json';\n\n/** @type {string} */\nconst TAG = 'amp-ad-network-doubleclick-impl';\n\n/** @const {string} */\nconst DOUBLECLICK_BASE_URL =\n    'https://securepubads.g.doubleclick.net/gampad/ads';\n\n/** @const {string} */\nconst RTC_SUCCESS = '2';\n\n/** @const {string} */\nconst DOUBLECLICK_SRA_EXP = 'doubleclickSraExp';\n\n/** @const @enum{string} */\nconst DOUBLECLICK_SRA_EXP_BRANCHES = {\n  SRA_CONTROL: '117152666',\n  SRA: '117152667',\n  SRA_NO_RECOVER: '21062235',\n};\n\n/**\n * Map of pageview tokens to the instances they belong to.\n * @private {!Object<string, !AmpAdNetworkDoubleclickImpl>}\n */\nlet tokensToInstances = {};\n\n/** @private {?Promise} */\nlet sraRequests = null;\n\n/** @typedef {{\n      adUrl: !Promise<string>,\n      lineItemId: string,\n      creativeId: string,\n      slotId: string,\n      slotIndex: string,\n    }} */\nlet TroubleshootDataDef;\n\n/** @private {?JsonObject} */\nlet windowLocationQueryParameters;\n\n/**\n * @typedef\n * {({width: number, height: number}|../../../src/layout-rect.LayoutRectDef)}\n */\nlet LayoutRectOrDimsDef;\n\n/** @final */\nexport class AmpAdNetworkDoubleclickImpl extends AmpA4A {\n\n  /**\n   * @param {!Element} element\n   */\n  constructor(element) {\n    super(element);\n\n    /**\n     * Config to generate amp-analytics element for active view reporting.\n     * @type {?JsonObject}\n     * @private\n     */\n    this.ampAnalyticsConfig_ = null;\n\n    /** @private {!../../../src/service/extensions-impl.Extensions} */\n    this.extensions_ = Services.extensionsFor(this.win);\n\n    /** @private {?string} */\n    this.qqid_ = null;\n\n    /** @private {?LayoutRectOrDimsDef} */\n    this.initialSize_ = null;\n\n    /** @type {?string} */\n    this.parameterSize = null;\n\n    /** @private {?{width: number, height: number}} */\n    this.returnedSize_ = null;\n\n    /** @private {?Element} */\n    this.ampAnalyticsElement_ = null;\n\n    /** @type {?Object<string,*>}*/\n    this.jsonTargeting = null;\n\n    /** @type {number} */\n    this.adKey = 0;\n\n    /** @type {!Array<string>} */\n    this.experimentIds = [];\n\n    /** @protected {boolean} */\n    this.useSra = false;\n\n    /** @protected {!Deferred<?../../../src/utils/xhr-utils.FetchResponse>} */\n    this.sraDeferred = new Deferred();\n\n    /** @private {?RefreshManager} */\n    this.refreshManager_ = null;\n\n    /** @private {number} */\n    this.refreshCount_ = 0;\n\n    /** @private {number} */\n    this.ifi_ = 0;\n\n    /** @private {boolean} */\n    this.isFluidRequest_ = false;\n\n    /** @private {?string} */\n    this.fluidImpressionUrl_ = null;\n\n    /** @private {?Promise<!../../../ads/google/a4a/utils.IdentityToken>} */\n    this.identityTokenPromise_ = null;\n\n    /** @type {?../../../ads/google/a4a/utils.IdentityToken} */\n    this.identityToken = null;\n\n    /** @private {!TroubleshootDataDef} */\n    this.troubleshootData_ = /** @type {!TroubleshootDataDef} */ ({});\n\n    /**\n     * @private {?boolean} whether preferential rendered AMP creative, null\n     * indicates no creative render.\n     */\n    this.isAmpCreative_ = null;\n\n    /** @private {boolean} */\n    this.isIdleRender_ = false;\n\n    /** @private {?./safeframe-host.SafeframeHostApi} */\n    this.safeframeApi_ = null;\n\n    /** @type {boolean} whether safeframe forced via tag */\n    this.forceSafeframe = false;\n    if ('forceSafeframe' in this.element.dataset) {\n      if (!/^(1|(true))$/i.test(this.element.dataset['forceSafeframe'])) {\n        user().warn(TAG, 'Ignoring invalid data-force-safeframe attribute: ' +\n            this.element.dataset['forceSafeframe']);\n      } else {\n        this.forceSafeframe = true;\n      }\n    }\n\n    /** @protected {?CONSENT_POLICY_STATE} */\n    this.consentState = null;\n\n    /** @protected {!Deferred<string>} */\n    this.getAdUrlDeferred = new Deferred();\n  }\n\n  /**\n   * @return {number|boolean} render on idle configuration with false\n   *    indicating disabled.\n   * @private\n   */\n  getIdleRenderEnabled_() {\n    if (this.isIdleRender_) {\n      return this.isIdleRender_;\n    }\n    // Disable if publisher has indicated a non-default loading strategy.\n    if (this.element.getAttribute('data-loading-strategy')) {\n      return false;\n    }\n    const expVal = this.postAdResponseExperimentFeatures['render-idle-vp'];\n    const vpRange = parseInt(expVal, 10);\n    if (expVal && isNaN(vpRange)) {\n      // holdback branch sends non-numeric value.\n      return false;\n    }\n    return vpRange || 12;\n  }\n\n  /** @override */\n  idleRenderOutsideViewport() {\n    const vpRange = this.getIdleRenderEnabled_();\n    if (vpRange === false) {\n      return vpRange;\n    }\n    this.isIdleRender_ = true;\n    // NOTE(keithwrightbos): handle race condition where previous\n    // idleRenderOutsideViewport marked slot as idle render despite never\n    // being schedule due to being beyond viewport max offset.  If slot\n    // comes within standard outside viewport range, then ensure throttling\n    // will not be applied.\n    this.getResource().whenWithinViewport(this.renderOutsideViewport()).then(\n        () => this.isIdleRender_ = false);\n    return vpRange;\n  }\n\n  /** @override */\n  isLayoutSupported(layout) {\n    this.isFluidRequest_ = layout == Layout.FLUID;\n    return this.isFluidRequest_ || isLayoutSizeDefined(layout);\n  }\n\n  /** @override */\n  isValidElement() {\n    return this.isAmpAdElement();\n  }\n\n  /**\n   * Executes page level experiment diversion and pushes any experiment IDs\n   * onto this.experimentIds.\n   * @visibleForTesting\n   */\n  setPageLevelExperiments() {\n    if (!isCdnProxy(this.win) && !isExperimentOn(\n        this.win, 'expDfpInvOrigDeprecated')) {\n      this.experimentIds.push('21060933');\n    }\n    const experimentInfoMap =\n    /** @type {!Object<string,\n        !../../../src/experiments.ExperimentInfo>} */ ({\n        // Only select into SRA experiments if SRA not already explicitly\n        // enabled and refresh is not being used by any slot.\n        [DOUBLECLICK_SRA_EXP]: {\n          isTrafficEligible: () => !this.win.document./*OK*/querySelector(\n              'meta[name=amp-ad-enable-refresh], ' +\n              'amp-ad[type=doubleclick][data-enable-refresh], ' +\n              'meta[name=amp-ad-doubleclick-sra]'),\n          branches: Object.keys(DOUBLECLICK_SRA_EXP_BRANCHES).map(\n              key => DOUBLECLICK_SRA_EXP_BRANCHES[key]),\n        },\n      });\n    const setExps = this.randomlySelectUnsetExperiments_(experimentInfoMap);\n    Object.keys(setExps).forEach(expName =>\n      setExps[expName] && this.experimentIds.push(setExps[expName]));\n  }\n\n  /**\n   * For easier unit testing.\n   * @param {!Object<string, !../../../src/experiments.ExperimentInfo>} experimentInfoMap\n   * @return {!Object<string, string>}\n   */\n  randomlySelectUnsetExperiments_(experimentInfoMap) {\n    return randomlySelectUnsetExperiments(this.win, experimentInfoMap);\n  }\n\n  /** @private */\n  maybeDeprecationWarn_() {\n    const warnDeprecation = feature => user().warn(\n        TAG, `${feature} is no longer supported for DoubleClick.` +\n          'Please refer to ' +\n          'https://github.com/ampproject/amphtml/issues/11834 ' +\n          'for more information');\n    const usdrd = 'useSameDomainRenderingUntilDeprecated';\n    const hasUSDRD = usdrd in this.element.dataset ||\n          (tryParseJson(this.element.getAttribute('json')) || {})[usdrd];\n    if (hasUSDRD) {\n      warnDeprecation(usdrd);\n    }\n    const useRemoteHtml =\n      !!this.win.document.querySelector('meta[name=amp-3p-iframe-src]');\n    if (useRemoteHtml) {\n      warnDeprecation('remote.html');\n    }\n  }\n\n  /** @override */\n  buildCallback() {\n    super.buildCallback();\n    this.maybeDeprecationWarn_();\n    this.setPageLevelExperiments();\n    this.useSra = (getMode().localDev && /(\\?|&)force_sra=true(&|$)/.test(\n        this.win.location.search)) ||\n        !!this.win.document.querySelector(\n            'meta[name=amp-ad-doubleclick-sra]') ||\n        !!this.experimentIds.filter(exp =>\n          exp == DOUBLECLICK_SRA_EXP_BRANCHES.SRA ||\n          exp == DOUBLECLICK_SRA_EXP_BRANCHES.SRA_NO_RECOVER).length;\n    this.identityTokenPromise_ = Services.viewerForDoc(this.getAmpDoc())\n        .whenFirstVisible()\n        .then(() => getIdentityToken(this.win, this.getAmpDoc()));\n    this.troubleshootData_.slotId = this.element.getAttribute('data-slot');\n    this.troubleshootData_.slotIndex =\n        this.element.getAttribute('data-amp-slot-index');\n  }\n\n  /** @override */\n  shouldPreferentialRenderWithoutCrypto() {\n    dev().assert(!isCdnProxy(this.win));\n    return true;\n  }\n\n  /**\n   * @param {?CONSENT_POLICY_STATE} consentState\n   * @param {!Array<!AmpAdNetworkDoubleclickImpl>=} instances\n   * @return {!Object<string,string|boolean|number>}\n   * @visibleForTesting\n   */\n  getPageParameters(consentState, instances) {\n    instances = instances || [this];\n    return {\n      'npa': consentState == CONSENT_POLICY_STATE.INSUFFICIENT ||\n          consentState == CONSENT_POLICY_STATE.UNKNOWN ? 1 : null,\n      'gdfp_req': '1',\n      'sfv': DEFAULT_SAFEFRAME_VERSION,\n      'u_sd': this.win.devicePixelRatio,\n      'gct': this.getLocationQueryParameterValue('google_preview') || null,\n      'psts': getPageviewStateTokensForAdRequest(instances),\n    };\n  }\n\n  /**\n   * Constructs block-level url parameters with side effect of setting\n   * size_, jsonTargeting, and adKey_ fields.\n   * @return {!Object<string,string|boolean|number>}\n   */\n  getBlockParameters_() {\n    dev().assert(this.initialSize_);\n    dev().assert(this.jsonTargeting);\n    const tfcd = this.jsonTargeting && this.jsonTargeting[TFCD];\n    this.win['ampAdGoogleIfiCounter'] = this.win['ampAdGoogleIfiCounter'] || 1;\n    this.ifi_ = (this.isRefreshing && this.ifi_) ||\n        this.win['ampAdGoogleIfiCounter']++;\n    const pageLayoutBox = this.isSinglePageStoryAd ?\n      this.element.getPageLayoutBox() : null;\n    return Object.assign({\n      'iu': this.element.getAttribute('data-slot'),\n      'co': this.jsonTargeting &&\n          this.jsonTargeting['cookieOptOut'] ? '1' : null,\n      'adk': this.adKey,\n      'sz': this.isSinglePageStoryAd ? '1x1' : this.parameterSize,\n      'output': 'html',\n      'impl': 'ifr',\n      'tfcd': tfcd == undefined ? null : tfcd,\n      'adtest': isInManualExperiment(this.element) ? 'on' : null,\n      'ifi': this.ifi_,\n      'rc': this.refreshCount_ || null,\n      'frc': Number(this.fromResumeCallback) || null,\n      'fluid': this.isFluidRequest_ ? 'height' : null,\n      'fsf': this.forceSafeframe ? '1' : null,\n      'scp': serializeTargeting(\n          (this.jsonTargeting && this.jsonTargeting['targeting']) || null,\n          (this.jsonTargeting &&\n            this.jsonTargeting['categoryExclusions']) || null),\n      'spsa': this.isSinglePageStoryAd ?\n        `${pageLayoutBox.width}x${pageLayoutBox.height}` : null,\n    }, googleBlockParameters(this));\n  }\n\n  /**\n   * Populate's block-level state for ad URL construction.\n   * @param {?CONSENT_POLICY_STATE} consentState\n   * @visibleForTesting\n   */\n  populateAdUrlState(consentState) {\n    this.consentState = consentState;\n    // Allow for pub to override height/width via override attribute.\n    const width = Number(this.element.getAttribute('data-override-width')) ||\n      Number(this.element.getAttribute('width'));\n    const height = Number(this.element.getAttribute('data-override-height')) ||\n      Number(this.element.getAttribute('height'));\n    this.initialSize_ = this.isFluidRequest_ ? {width: 0, height: 0} :\n      (width && height ?\n        // width/height could be 'auto' in which case we fallback to measured.\n        {width, height} : this.getIntersectionElementLayoutBox());\n    this.jsonTargeting =\n      tryParseJson(this.element.getAttribute('json')) || {};\n    this.adKey = this.generateAdKey_(\n        `${this.initialSize_.width}x${this.initialSize_.height}`);\n    this.parameterSize = this.isFluidRequest_ ?\n      '320x50' : `${this.initialSize_.width}x${this.initialSize_.height}`;\n    const multiSizeDataStr = this.element.getAttribute('data-multi-size');\n    if (multiSizeDataStr) {\n      if (this.element.getAttribute('layout') == 'responsive') {\n        // TODO(levitzky) Define the behavior and remove this warning.\n        user().warn(TAG, 'Behavior of multi-size and responsive layout is ' +\n            'currently not well defined. Forcefully overriding layout to ' +\n            '`fixed`.');\n        this.element.setAttribute('layout', 'fixed');\n      }\n      const multiSizeValidation = this.element\n          .getAttribute('data-multi-size-validation') || 'true';\n      // The following call will check all specified multi-size dimensions,\n      // verify that they meet all requirements, and then return all the valid\n      // dimensions in an array.\n      const dimensions = getMultiSizeDimensions(\n          multiSizeDataStr,\n          this.initialSize_.width,\n          this.initialSize_.height,\n          multiSizeValidation == 'true',\n          this.isFluidRequest_);\n      if (dimensions.length) {\n        this.parameterSize += '|' + dimensions\n            .map(dimension => dimension.join('x'))\n            .join('|');\n      }\n    }\n  }\n\n  /** @override */\n  getConsentPolicy() {\n    // Ensure that build is not blocked by need for consent (delay will occur\n    // prior to RTC & ad URL construction).\n    return null;\n  }\n\n  /** @override */\n  getAdUrl(consentState, opt_rtcResponsesPromise) {\n    if (consentState == CONSENT_POLICY_STATE.UNKNOWN &&\n        this.element.getAttribute('data-npa-on-unknown-consent') != 'true') {\n      user().info(TAG, 'Ad request suppressed due to unknown consent');\n      this.getAdUrlDeferred.resolve('');\n      return Promise.resolve('');\n    }\n    if (this.iframe && !this.isRefreshing) {\n      dev().warn(TAG, `Frame already exists, sra: ${this.useSra}`);\n      this.getAdUrlDeferred.resolve('');\n      return Promise.resolve('');\n    }\n    opt_rtcResponsesPromise = opt_rtcResponsesPromise || Promise.resolve();\n    // TODO(keithwrightbos): SRA blocks currently unnecessarily generate full\n    // ad url.  This could be optimized however non-SRA ad url is required to\n    // fallback to non-SRA if single block.\n    this.populateAdUrlState(consentState);\n    // TODO: Check for required and allowed parameters. Probably use\n    // validateData, from 3p/3p/js, after noving it someplace common.\n    const startTime = Date.now();\n    const identityPromise = Services.timerFor(this.win)\n        .timeoutPromise(1000, this.identityTokenPromise_)\n        .catch(() => {\n          // On error/timeout, proceed.\n          return /**@type {!../../../ads/google/a4a/utils.IdentityToken}*/({});\n        });\n    const checkStillCurrent = this.verifyStillCurrent();\n    Promise.all([opt_rtcResponsesPromise, identityPromise])\n        .then(results => {\n          checkStillCurrent();\n          const rtcParams = this.mergeRtcResponses_(results[0]);\n          this.identityToken = results[1];\n          googleAdUrl(\n              this, DOUBLECLICK_BASE_URL, startTime, Object.assign(\n                  this.getBlockParameters_(), this.buildIdentityParams(),\n                  this.getPageParameters(consentState), rtcParams),\n              this.experimentIds)\n              .then(adUrl => this.getAdUrlDeferred.resolve(adUrl));\n        });\n    this.troubleshootData_.adUrl = this.getAdUrlDeferred.promise;\n    return this.getAdUrlDeferred.promise;\n  }\n\n  /**\n   * Converts identity token response to ad request parameters.\n   * @return {!Object<string,string>}\n   */\n  buildIdentityParams() {\n    return this.identityToken ? {\n      adsid: this.identityToken.token || null,\n      jar: this.identityToken.jar || null,\n      pucrd: this.identityToken.pucrd || null,\n    } : {};\n  }\n\n  /**\n   * Merges all of the rtcResponses into the JSON targeting and\n   * category exclusions.\n   * @param {?Array<!rtcResponseDef>} rtcResponseArray\n   * @private\n   */\n  mergeRtcResponses_(rtcResponseArray) {\n    if (!rtcResponseArray) {\n      return null;\n    }\n    const artc = [];\n    const ati = [];\n    const ard = [];\n    let exclusions;\n    rtcResponseArray.forEach(rtcResponse => {\n      if (!rtcResponse) {\n        return;\n      }\n      artc.push(rtcResponse.rtcTime);\n      ati.push(rtcResponse.error || RTC_SUCCESS);\n      ard.push(rtcResponse.callout);\n      if (rtcResponse.response) {\n        if (rtcResponse.response['targeting']) {\n          const rewrittenResponse = this.rewriteRtcKeys_(\n              rtcResponse.response['targeting'],\n              rtcResponse.callout);\n          this.jsonTargeting['targeting'] =\n              !!this.jsonTargeting['targeting'] ?\n                deepMerge(this.jsonTargeting['targeting'],\n                    rewrittenResponse) :\n                rewrittenResponse;\n        }\n        if (rtcResponse.response['categoryExclusions']) {\n          if (!exclusions) {\n            exclusions = {};\n            if (this.jsonTargeting['categoryExclusions']) {\n              this.jsonTargeting['categoryExclusions'].forEach(exclusion => {\n                exclusions[exclusion] = true;\n              });\n            }\n          }\n          rtcResponse.response['categoryExclusions'].forEach(exclusion => {\n            exclusions[exclusion] = true;\n          });\n        }\n      }\n    });\n    if (exclusions) {\n      this.jsonTargeting['categoryExclusions'] = Object.keys(exclusions);\n    }\n    return {'artc': artc.join() || null, 'ati': ati.join(), 'ard': ard.join()};\n  }\n\n  /** @override */\n  getCustomRealTimeConfigMacros_() {\n    /**\n     * This whitelist allow attributes on the amp-ad element to be used as\n     * macros for constructing the RTC URL. Add attributes here, in lowercase,\n     * to make them available.\n     */\n    const whitelist = {\n      'height': true,\n      'width': true,\n      'data-slot': true,\n      'data-multi-size': true,\n      'data-multi-size-validation': true,\n      'data-override-width': true,\n      'data-override-height': true,\n    };\n    return {\n      PAGEVIEWID: () => Services.documentInfoForDoc(this.element).pageViewId,\n      HREF: () => this.win.location.href,\n      REFERRER: opt_timeout => this.getReferrer_(opt_timeout),\n      TGT: () =>\n        JSON.stringify(\n            (tryParseJson(\n                this.element.getAttribute('json')) || {})['targeting']),\n      ADCID: opt_timeout => getOrCreateAdCid(\n          this.getAmpDoc(), 'AMP_ECID_GOOGLE', '_ga',\n          parseInt(opt_timeout, 10)),\n      ATTR: name => {\n        if (!whitelist[name.toLowerCase()]) {\n          dev().warn('TAG', `Invalid attribute ${name}`);\n        } else {\n          return this.element.getAttribute(name);\n        }\n      },\n      CANONICAL_URL: () =>\n        Services.documentInfoForDoc(this.element).canonicalUrl,\n    };\n  }\n\n  /**\n   * Returns the referrer or undefined if the referrer is not resolved\n   * before the given timeout\n   * @param {number=} opt_timeout\n   * @return {!(Promise<string>|Promise<undefined>)} A promise with a referrer or undefined\n   * if timed out\n   * @private\n   */\n  getReferrer_(opt_timeout) {\n    const timeoutInt = parseInt(opt_timeout, 10);\n    const referrerPromise = Services.viewerForDoc(this.getAmpDoc())\n        .getReferrerUrl();\n    if (isNaN(timeoutInt) || timeoutInt < 0) {\n      return referrerPromise;\n    }\n    return Services.timerFor(this.win)\n        .timeoutPromise(timeoutInt, referrerPromise)\n        .catch(() => undefined);\n  }\n\n  /**\n   * Appends the callout value to the keys of response to prevent a collision\n   * case caused by multiple vendors returning the same keys.\n   * @param {!Object<string, string>} response\n   * @param {string} callout\n   * @return {!Object<string, string>}\n   * @private\n   */\n  rewriteRtcKeys_(response, callout) {\n    // Only perform this substitution for vendor-defined URLs.\n    if (!RTC_VENDORS[callout] || RTC_VENDORS[callout].disableKeyAppend) {\n      return response;\n    }\n    const newResponse = {};\n    Object.keys(response).forEach(key => {\n      newResponse[`${key}_${callout}`] = response[key];\n    });\n    return newResponse;\n  }\n\n  /** @override */\n  onNetworkFailure(error, adUrl) {\n    dev().info(TAG, 'network error, attempt adding of error parameter', error);\n    return {adUrl: maybeAppendErrorParameter(adUrl, 'n')};\n  }\n\n  /** @override */\n  extractSize(responseHeaders) {\n    this.ampAnalyticsConfig_ = extractAmpAnalyticsConfig(this, responseHeaders);\n    this.qqid_ = responseHeaders.get(QQID_HEADER);\n    this.troubleshootData_.creativeId =\n        responseHeaders.get('google-creative-id');\n    this.troubleshootData_.lineItemId =\n        responseHeaders.get('google-lineitem-id');\n    if (this.ampAnalyticsConfig_) {\n      // Load amp-analytics extensions\n      this.extensions_./*OK*/installExtensionForDoc(\n          this.getAmpDoc(), 'amp-analytics');\n    }\n    // If the server returned a size, use that, otherwise use the size that we\n    // sent in the ad request.\n    let size = super.extractSize(responseHeaders);\n    if (size) {\n      this.returnedSize_ = size;\n      this.handleResize_(size.width, size.height);\n    } else {\n      size = this.getSlotSize();\n    }\n    // If this is a multi-size creative, fire delayed impression now. If it's\n    // fluid, wait until after resize happens.\n    if (this.isFluidRequest_ && !this.returnedSize_) {\n      this.fluidImpressionUrl_ = responseHeaders.get('X-AmpImps');\n    }\n\n    // If the response included a pageview state token, check for an existing\n    // token and remove it. Then save the new one to the module level object.\n    if (responseHeaders.get('amp-ff-pageview-tokens')) {\n      this.removePageviewStateToken();\n      this.setPageviewStateToken(\n          responseHeaders.get('amp-ff-pageview-tokens'));\n    }\n\n    return size;\n  }\n\n  /**\n   * Returns the width and height of the slot as defined by the width and height\n   * attributes, or the dimensions as computed by\n   * getIntersectionElementLayoutBox.\n   * @return {{width: number, height: number}|../../../src/layout-rect.LayoutRectDef}\n   */\n  getSlotSize() {\n    const width = Number(this.element.getAttribute('width'));\n    const height = Number(this.element.getAttribute('height'));\n    return width && height\n      ? {width, height}\n      // width/height could be 'auto' in which case we fallback to measured.\n      : this.getIntersectionElementLayoutBox();\n  }\n\n  /** @override */\n  tearDownSlot() {\n    super.tearDownSlot();\n    this.element.setAttribute('data-amp-slot-index',\n        this.win.ampAdSlotIdCounter++);\n    if (this.ampAnalyticsElement_) {\n      removeElement(this.ampAnalyticsElement_);\n      this.ampAnalyticsElement_ = null;\n    }\n    this.ampAnalyticsConfig_ = null;\n    this.jsonTargeting = null;\n    this.isAmpCreative_ = null;\n    this.isIdleRender_ = false;\n    this.parameterSize = null;\n    this.returnedSize_ = null;\n    // Reset SRA requests to allow for resumeCallback to re-fetch\n    // ad requests.  Assumes that unlayoutCallback will be called for all slots\n    // in rapid succession (meaning onLayoutMeasure initiated promise chain\n    // will not be started until resumeCallback).\n    sraRequests = null;\n    this.sraDeferred = new Deferred();\n    this.qqid_ = null;\n    this.consentState = null;\n    this.getAdUrlDeferred = new Deferred();\n    this.removePageviewStateToken();\n  }\n\n  /** @override */\n  renderNonAmpCreative() {\n    // If render idle with throttling, impose one second render delay for\n    // non-AMP creatives.  This is not done in the scheduler to ensure as many\n    // slots as possible are marked for layout given scheduler imposes 5 seconds\n    // past previous execution.\n    if (this.postAdResponseExperimentFeatures['render-idle-throttle'] &&\n          this.isIdleRender_) {\n      if (is3pThrottled(this.win)) {\n        return waitFor3pThrottle().then(() => super.renderNonAmpCreative());\n      } else {\n        incrementLoadingAds(this.win);\n        return super.renderNonAmpCreative(true);\n      }\n    }\n    return super.renderNonAmpCreative();\n  }\n\n  /** @override  */\n  unlayoutCallback() {\n    if (this.refreshManager_) {\n      this.refreshManager_.unobserve();\n    }\n    if (!this.useSra && this.isAmpCreative_) {\n      // Allow non-AMP creatives to remain unless SRA.\n      return false;\n    }\n    this.destroySafeFrameApi_();\n    return super.unlayoutCallback();\n  }\n\n  /** @visibleForTesting */\n  cleanupAfterTest() {\n    this.destroySafeFrameApi_();\n  }\n\n  /** @private */\n  destroySafeFrameApi_() {\n    if (!this.safeframeApi_) {\n      return;\n    }\n    this.safeframeApi_.destroy();\n    this.safeframeApi_ = null;\n  }\n\n  /** @override */\n  refresh(refreshEndCallback) {\n    this.refreshCount_++;\n    return super.refresh(refreshEndCallback);\n  }\n\n  /** @override */\n  onCreativeRender(creativeMetaData) {\n    super.onCreativeRender(creativeMetaData);\n    this.isAmpCreative_ = !!creativeMetaData;\n    if (creativeMetaData &&\n        !creativeMetaData.customElementExtensions.includes('amp-ad-exit')) {\n      // Capture phase click handlers on the ad if amp-ad-exit not present\n      // (assume it will handle capture).\n      dev().assert(this.iframe);\n      Navigation.installAnchorClickInterceptor(\n          this.getAmpDoc(), this.iframe.contentWindow);\n    }\n    if (this.ampAnalyticsConfig_) {\n      dev().assert(!this.ampAnalyticsElement_);\n      if (isReportingEnabled(this)) {\n        addCsiSignalsToAmpAnalyticsConfig(\n            this.win,\n            this.element,\n            this.ampAnalyticsConfig_,\n            this.qqid_,\n            !!creativeMetaData);\n      }\n      this.ampAnalyticsElement_ = insertAnalyticsElement(\n          this.element, this.ampAnalyticsConfig_, /*loadAnalytics*/ true,\n          !!this.postAdResponseExperimentFeatures['avr_disable_immediate']);\n    }\n    if (this.isRefreshing) {\n      dev().assert(this.refreshManager_);\n      this.refreshManager_.initiateRefreshCycle();\n      this.isRefreshing = false;\n      this.isRelayoutNeededFlag = false;\n    }\n\n    // Force size of frame to match creative or, if creative size is unknown,\n    // the slot. This ensures that the creative is centered in the former case,\n    // and not truncated in the latter.\n    const size = this.returnedSize_ || this.getSlotSize();\n    const isMultiSizeFluid = this.isFluidRequest_ && this.returnedSize_ &&\n        // TODO(@glevitzky, 11583) Remove this clause once we stop sending back\n        // the size header for fluid ads. Fluid size headers always come back as\n        // 0x0.\n        !(size.width == 0 && size.height == 0);\n    setStyles(dev().assertElement(this.iframe), {\n      width: `${size.width}px`,\n      height: `${size.height}px`,\n      position: isMultiSizeFluid ? 'relative' : null,\n    });\n    if (isMultiSizeFluid) {\n      // This is a fluid + multi-size request, where the returned creative is\n      // multi-size. The slot needs to not be styled with width: 100%, or the\n      // creative will be centered instead of left-aligned.\n      this.element.removeAttribute('height');\n      setStyles(this.element, {width: `${size.width}px`});\n    }\n\n    this.refreshManager_ = this.refreshManager_ ||\n        getRefreshManager(this, () => {\n          if (this.useSra) {\n            user().warn(TAG, 'Refresh not compatible with SRA.');\n            return false;\n          }\n          if (getEnclosingContainerTypes(this.element).filter(container =>\n            container != ValidAdContainerTypes['AMP-CAROUSEL'] &&\n                container != ValidAdContainerTypes['AMP-STICKY-AD']).length) {\n            user().warn(TAG,\n                'Refresh not compatible with ad-containers, except for ' +\n                'AMP-CAROUSEL and AMP-STICKY-AD');\n            return false;\n          }\n          return true;\n        });\n\n    this.postTroubleshootMessage();\n  }\n\n  /**\n   * @param {string} size\n   * @return {string} The ad unit hash key string.\n   * @private\n   */\n  generateAdKey_(size) {\n    const {element} = this;\n    const domFingerprint = domFingerprintPlain(element);\n    const slot = element.getAttribute('data-slot') || '';\n    const multiSize = element.getAttribute('data-multi-size') || '';\n    const string = `${slot}:${size}:${multiSize}:${domFingerprint}`;\n    return stringHash32(string);\n  }\n\n  /**\n   * Attempts to resize the ad, if the returned size is smaller than the primary\n   * dimensions.\n   * @param {number} width\n   * @param {number} height\n   * @private\n   */\n  handleResize_(width, height) {\n    const pWidth = this.element.getAttribute('width');\n    const pHeight = this.element.getAttribute('height');\n    // We want to resize only if neither returned dimension is larger than its\n    // primary counterpart, and if at least one of the returned dimensions\n    // differ from its primary counterpart.\n    if ((this.isFluidRequest_ && width && height) ||\n        ((width != pWidth || height != pHeight) &&\n         (width <= pWidth && height <= pHeight))) {\n      this.attemptChangeSize(height, width).catch(() => {});\n    }\n  }\n\n  /** @override */\n  sendXhrRequest(adUrl) {\n    if (!this.useSra) {\n      return super.sendXhrRequest(adUrl);\n    }\n    // Wait for SRA request which will call response promise when this block's\n    // response has been returned.\n    this.initiateSraRequests();\n    // Null response indicates single slot should execute using non-SRA method.\n    return this.sraDeferred.promise.then(\n        response => response || super.sendXhrRequest(adUrl));\n  }\n\n  /**\n   * @param {string} impressions\n   * @param {boolean=} scrubReferer\n   * @visibleForTesting\n   */\n  fireDelayedImpressions(impressions, scrubReferer) {\n    if (!impressions) {\n      return;\n    }\n    impressions.split(',').forEach(url => {\n      try {\n        if (!isSecureUrlDeprecated(url)) {\n          dev().warn(TAG, `insecure impression url: ${url}`);\n          return;\n        }\n        // Create amp-pixel and append to document to send impression.\n        this.win.document.body.appendChild(\n            createElementWithAttributes(\n                this.win.document,\n                'amp-pixel',\n                dict({\n                  'src': url,\n                  'referrerpolicy': scrubReferer ? 'no-referrer' : '',\n                })));\n      } catch (unusedError) {}\n    });\n  }\n\n  /**\n   * Groups slots by type and networkId from data-slot parameter.  Exposed for\n   * ease of testing.\n   * @return {!Promise<!Object<string,!Array<!Promise<!../../../src/base-element.BaseElement>>>>}\n   * @visibleForTesting\n   */\n  groupSlotsForSra() {\n    return groupAmpAdsByType(\n        this.win, this.element.getAttribute('type'), getNetworkId);\n  }\n\n  /**\n   * Executes SRA request via the following steps:\n   * - create only one executor per page\n   * - get all doubleclick amp-ad instances on the page\n   * - group by networkID allowing for separate SRA requests\n   * - for each grouping, construct SRA request\n   * - handle chunks for streaming response for each block\n   * @visibleForTesting\n   */\n  initiateSraRequests() {\n    if (sraRequests) {\n      return;\n    }\n    // Use cancellation of the first slot's promiseId as indication of\n    // unlayoutCallback execution.  Assume that if called for one slot, it will\n    // be called for all and we should cancel SRA execution.\n    const checkStillCurrent = this.verifyStillCurrent();\n    sraRequests = this.groupSlotsForSra()\n        .then(groupIdToBlocksAry => {\n          checkStillCurrent();\n          Object.keys(groupIdToBlocksAry).forEach(networkId => {\n            const blocks = dev().assert(groupIdToBlocksAry[networkId]);\n            // TODO: filter blocks with SRA disabled?\n            Promise.all(blocks).then(instances => {\n              dev().assert(instances.length);\n              checkStillCurrent();\n              // Exclude any instances that do not have an adPromise_ as this\n              // indicates they were invalid.\n              const typeInstances =\n              /** @type {!Array<!AmpAdNetworkDoubleclickImpl>}*/(instances)\n                    .filter(instance => {\n                      const isValid = instance.hasAdPromise();\n                      if (!isValid) {\n                        dev().info(TAG,\n                            'Ignoring instance without ad promise as ' +\n                            'likely invalid',\n                            instance.element);\n                      }\n                      return isValid;\n                    });\n              if (!typeInstances.length) {\n              // Only contained invalid elements.\n                return;\n              }\n              // Determine if more than one block for this element, if not do\n              // not set sra request promise which results in sending as non-SRA\n              // request (benefit is it allows direct cache method).\n              if (typeInstances.length == 1) {\n                dev().info(TAG, `single block in network ${networkId}`);\n                typeInstances[0].sraDeferred.resolve(null);\n                return;\n              }\n              let sraUrl;\n              // Construct and send SRA request.\n              // Chunk handler called with metadata and creative for each slot\n              // in order of URLs given which is then passed to resolver used\n              // for sendXhrRequest.\n              const sraRequestAdUrlResolvers =\n              typeInstances.map(instance => instance.sraDeferred.resolve);\n              const slotCallback = metaJsonCreativeGrouper(\n                  (creative, headersObj, done) => {\n                    checkStillCurrent();\n                    sraBlockCallbackHandler(creative, headersObj, done,\n                        sraRequestAdUrlResolvers, sraUrl);\n                  });\n              // TODO(keithwrightbos) - how do we handle per slot 204 response?\n              return constructSRARequest_(this, typeInstances)\n                  .then(sraUrlIn => {\n                    checkStillCurrent();\n                    sraUrl = sraUrlIn;\n                    return Services.xhrFor(this.win).fetch(sraUrl, {\n                      mode: 'cors',\n                      method: 'GET',\n                      credentials: 'include',\n                    });\n                  })\n                  .then(response => {\n                    checkStillCurrent();\n                    return lineDelimitedStreamer(\n                        this.win, response, slotCallback);\n                  })\n                  .catch(error => {\n                    if (isCancellation(error)) {\n                      // Cancellation should be propagated to slot promises\n                      // causing their adPromise chains within A4A to handle\n                      // appropriately.\n                      typeInstances.forEach(instance =>\n                        instance.sraDeferred.reject(error));\n                    } else if (!!this.win.document.querySelector(\n                        'meta[name=amp-ad-doubleclick-sra]') ||\n                        this.experimentIds.includes(\n                            DOUBLECLICK_SRA_EXP_BRANCHES.SRA_NO_RECOVER)) {\n                      // If publisher has explicitly enabled SRA mode (not\n                      // experiment), then assume error is network failure,\n                      // collapse slot, reset url to empty string to ensure\n                      // no fallback to frame GET (given expectation of SRA\n                      // consistency), and propagate error to A4A ad promise\n                      // chain.\n                      assignAdUrlToError(/** @type {!Error} */(error), sraUrl);\n                      this.warnOnError('SRA request failure', error);\n                      // Publisher explicitly wants SRA so do not attempt to\n                      // recover as SRA guarantees cannot be enforced.\n                      typeInstances.forEach(instance => {\n                        // Reset ad url to ensure layoutCallback does not\n                        // fallback to frame get which would lose SRA\n                        // guarantees.\n                        instance.resetAdUrl();\n                        instance.attemptCollapse();\n                        instance.sraDeferred.reject(error);\n                      });\n                    } else {\n                      // Opportunistic SRA used so fallback to individual\n                      // XHR requests.\n                      typeInstances.forEach(instance =>\n                        instance.sraDeferred.resolve(null));\n                    }\n                  });\n            });\n          });\n        });\n  }\n\n  /**\n   * @param {string} message\n   * @param {*} error\n   * @visibleForTesting\n   */\n  warnOnError(message, error) {\n    dev().warn(TAG, message, error);\n  }\n\n  /** @override */\n  getPreconnectUrls() {\n    return ['https://securepubads.g.doubleclick.net/'];\n  }\n\n  /** @override */\n  getNonAmpCreativeRenderingMethod(headerValue) {\n    return this.forceSafeframe || this.isFluidRequest_\n      ? XORIGIN_MODE.SAFEFRAME\n      : super.getNonAmpCreativeRenderingMethod(headerValue);\n  }\n\n  /**\n   * Note that location is parsed once on first access and cached.\n   * @param {string} parameterName\n   * @return {string|undefined} parameter value from window.location.search\n   * @visibleForTesting\n   */\n  getLocationQueryParameterValue(parameterName) {\n    windowLocationQueryParameters = windowLocationQueryParameters ||\n        parseQueryString((this.win.location && this.win.location.search) || '');\n    return windowLocationQueryParameters[parameterName];\n  }\n\n  /** @override */\n  getAdditionalContextMetadata(isSafeFrame = false) {\n    if (!this.isFluidRequest_ && !isSafeFrame) {\n      return;\n    }\n    const creativeSize = this.getCreativeSize();\n    dev().assert(creativeSize, 'this.getCreativeSize returned null');\n    this.safeframeApi_ = this.safeframeApi_ ||\n        new SafeframeHostApi(\n            this, this.isFluidRequest_,\n            /** @type {{height, width}} */(creativeSize),\n            this.fluidImpressionUrl_);\n\n    return this.safeframeApi_.getSafeframeNameAttr();\n  }\n\n  /**\n   * Emits a postMessage containing information about this slot to the DFP\n   * Troubleshoot UI. A promise is returned if a message is posted, otherwise\n   * null is returned. The promise is returned only for test convenience.\n   *\n   * @return {?Promise}\n   * @visibleForTesting\n   */\n  postTroubleshootMessage() {\n    if (!this.win.opener || !/[?|&]dfpdeb/.test(this.win.location.search)) {\n      return null;\n    }\n    dev().assert(this.troubleshootData_.adUrl, 'ad URL does not exist yet');\n    return this.troubleshootData_.adUrl.then(adUrl => {\n      const slotId = this.troubleshootData_.slotId + '_' +\n          this.troubleshootData_.slotIndex;\n      const payload = dict({\n        'gutData': JSON.stringify(dict({\n          'events': [{\n            'timestamp': Date.now(),\n            'slotid': slotId,\n            'messageId': 4,\n          }],\n          'slots': [{\n            'contentUrl': adUrl || '',\n            'id': slotId,\n            'leafAdUnitName': this.troubleshootData_.slotId,\n            'domId': slotId,\n            'lineItemId': this.troubleshootData_.lineItemId,\n            'creativeId': this.troubleshootData_.creativeId,\n          }],\n        })),\n        'userAgent': navigator.userAgent,\n        'referrer': this.win.location.href,\n        'messageType': 'LOAD',\n      });\n      this.win.opener./*OK*/postMessage(payload, '*');\n    });\n  }\n\n  /**\n   * Sets the pageview state token associated with the slot. Token does not\n   * expire.\n   * @param {string} token\n   */\n  setPageviewStateToken(token) {\n    tokensToInstances[token] = this;\n  }\n\n  /**\n   * Checks for the presence of a pageview token in the module level object\n   * and removes it if present.\n   */\n  removePageviewStateToken() {\n    for (const token in tokensToInstances) {\n      if (tokensToInstances[token] == this) {\n        delete tokensToInstances[token];\n        break;\n      }\n    }\n  }\n\n  /** @override */\n  getA4aAnalyticsVars(analyticsTrigger) {\n    return getCsiAmpAnalyticsVariables(analyticsTrigger, this, this.qqid_);\n  }\n\n  /** @override */\n  getA4aAnalyticsConfig() {\n    return getCsiAmpAnalyticsConfig();\n  }\n}\n\nAMP.extension(TAG, '0.1', AMP => {\n  AMP.registerElement(TAG, AmpAdNetworkDoubleclickImpl);\n});\n\n\n/** @visibleForTesting */\nexport function resetSraStateForTesting() {\n  sraRequests = null;\n}\n\n/** @visibleForTesting */\nexport function resetLocationQueryParametersForTesting() {\n  windowLocationQueryParameters = null;\n}\n\n/**\n * @param {!Element} element\n * @return {string} networkId from data-ad-slot attribute.\n * @visibleForTesting\n */\nexport function getNetworkId(element) {\n  const networkId = /^(?:\\/)?(\\d+)/.exec(\n      dev().assertString(element.getAttribute('data-slot')));\n  // TODO: guarantee data-ad-slot format as part of isValidElement?\n  return networkId ? networkId[1] : '';\n}\n\n\n/**\n * @param {!../../../extensions/amp-a4a/0.1/amp-a4a.AmpA4A} a4a\n * @param {!Array<!AmpAdNetworkDoubleclickImpl>} instances\n * @return {!Promise<string>} SRA request URL\n */\nfunction constructSRARequest_(a4a, instances) {\n  // TODO(bradfrizzell): Need to add support for RTC.\n  dev().assert(instances && instances.length);\n  const startTime = Date.now();\n  return Promise.all(\n      instances.map(instance => instance.getAdUrlDeferred.promise))\n      .then(() => googlePageParameters(a4a, startTime))\n      .then(googPageLevelParameters => {\n        const blockParameters = constructSRABlockParameters(instances);\n        return truncAndTimeUrl(DOUBLECLICK_BASE_URL,\n            Object.assign(blockParameters, googPageLevelParameters,\n                instances[0].getPageParameters(instances[0].consentState,\n                    instances)), startTime);\n      });\n}\n\n/**\n * Returns the pageview tokens that should be included in the ad request. Tokens\n * should come only from instances that are not being requested in this request.\n * @param {!Array<!AmpAdNetworkDoubleclickImpl>} instancesInAdRequest\n * @return {!Array<string>} Array of pageview tokens to include in the ad\n * request.\n */\nexport function getPageviewStateTokensForAdRequest(instancesInAdRequest) {\n  const pageviewStateTokensInAdRequest = [];\n  for (const token in tokensToInstances) {\n    if (!instancesInAdRequest.includes(\n        tokensToInstances[token])) {\n      pageviewStateTokensInAdRequest.push(token);\n    }\n  }\n  return pageviewStateTokensInAdRequest;\n}\n\n/**\n * Resets the tokensToInstances mapping for testing purposes.\n * @visibleForTesting\n */\nexport function resetTokensToInstancesMap() {\n  tokensToInstances = {};\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../../../src/services';\nimport {dev} from '../../../src/log';\nimport {dict, hasOwn} from '../../../src/utils/object';\nimport {getData} from '../../../src/event-helper';\nimport {getStyle} from '../../../src/style';\nimport {parseUrlDeprecated} from '../../../src/url';\nimport {setStyles} from '../../../src/style';\nimport {throttle} from '../../../src/utils/rate-limit';\nimport {tryParseJson} from '../../../src/json';\n\n/**\n * Used to manage messages for different Safeframe ad slots.\n *\n * Maps a sentinel value to an instance of the SafeframeHostApi to which that\n * sentinel value belongs.\n * @type {!Object<string, !SafeframeHostApi>}\n */\nexport const safeframeHosts = {};\n\n/** @private {boolean} */\nlet safeframeListenerCreated_ = false;\n\n/** @enum {string} */\nexport const MESSAGE_FIELDS = {\n  CHANNEL: 'c',\n  SENTINEL: 'e',\n  ENDPOINT_IDENTITY: 'i',\n  PAYLOAD: 'p',\n  SERVICE: 's',\n  MESSAGE: 'message',\n};\n\n/** @enum {string} */\nexport const SERVICE = {\n  GEOMETRY_UPDATE: 'geometry_update',\n  CREATIVE_GEOMETRY_UPDATE: 'creative_geometry_update',\n  EXPAND_REQUEST: 'expand_request',\n  EXPAND_RESPONSE: 'expand_response',\n  REGISTER_DONE: 'register_done',\n  COLLAPSE_REQUEST: 'collapse_request',\n  COLLAPSE_RESPONSE: 'collapse_response',\n  RESIZE_REQUEST: 'resize_request',\n  RESIZE_RESPONSE: 'resize_response',\n};\n\n/** @private {string} */\nconst TAG = 'AMP-DOUBLECLICK-SAFEFRAME';\n\n/** @const {string} */\nexport const SAFEFRAME_ORIGIN = 'https://tpc.googlesyndication.com';\n\n/**\n * Event listener callback for message events. If message is a Safeframe\n * message, handles the message. This listener is registered within\n * SafeframeHostApi.\n * @param {!Event} event\n */\nexport function safeframeListener(event) {\n  const data = tryParseJson(getData(event));\n  /** Only process messages that are valid Safeframe messages */\n  if (event.origin != SAFEFRAME_ORIGIN || !data) {\n    return;\n  }\n  const payload = tryParseJson(data[MESSAGE_FIELDS.PAYLOAD]) || {};\n  /**\n   * If the sentinel is provided at the top level, this is a message simply\n   * to setup the postMessage channel, so set it up.\n   */\n  const sentinel = data[MESSAGE_FIELDS.SENTINEL] || payload['sentinel'];\n  const safeframeHost = safeframeHosts[sentinel];\n  if (!safeframeHost) {\n    dev().warn(TAG, `Safeframe Host for sentinel: ${sentinel} not found.`);\n    return;\n  }\n  if (!safeframeHost.channel) {\n    safeframeHost.connectMessagingChannel(data[MESSAGE_FIELDS.CHANNEL]);\n  } else if (payload) {\n    // Currently we do not expect a payload on initial connection messages.\n    safeframeHost.processMessage(/** @type {!JsonObject} */(payload),\n        data[MESSAGE_FIELDS.SERVICE]);\n  }\n}\n\n/**\n * Sets up the host API for DoubleClick Safeframe to allow the following\n * Safeframe container APIs to work:\n *   - $sf.ext.expand()\n *   - $sf.ext.collapse()\n *   - $sf.ext.geom() Expand and collapse are both implemented utilizing AMP's\n *     built in element resizing.\n *\n * For geom, the host needs to send geometry updates into the container whenever\n *  a position change happens, at a max frequency of 1 message/second. To\n *  implement this messaging, we are leveraging the existing\n *  IntersectionObserver class that works with AMP elements. However, the\n *  safeframe iframe that we need to monitor is not an AMP element, but rather\n *  contained within an amp-ad. So, we are doing intersection observing on the\n *  amp-ad, and calculating the correct position for the iframe whenever we get\n *  an update.\n *\n * We pass an instance of this class into the IntersectionObserver class, which\n *  then calls the instance of send() below whenever an update occurs.\n */\nexport class SafeframeHostApi {\n\n  /**\n   * @param {!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl} baseInstance\n   * @param {boolean} isFluid\n   * @param {{width:number, height:number}} creativeSize\n   * @param {?string} fluidImpressionUrl\n   */\n  constructor(baseInstance, isFluid, creativeSize, fluidImpressionUrl) {\n    /** @private {!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl} */\n    this.baseInstance_ = baseInstance;\n\n    /** @private {!Function} */\n    this.checkStillCurrent_ = this.baseInstance_.verifyStillCurrent.bind(\n        this.baseInstance_)();\n\n    /** @private {!Window} */\n    this.win_ = this.baseInstance_.win;\n\n    /** @private {string} */\n    this.sentinel_ = this.baseInstance_.sentinel;\n\n    /** @private {?Element} */\n    this.iframe_ = null;\n\n    /** @type {?string} */\n    this.channel = null;\n\n    /** @private {?JsonObject} */\n    this.currentGeometry_ = null;\n\n    /** @private {number} */\n    this.endpointIdentity_ = Math.random();\n\n    /** @private {number} */\n    this.uid_ = Math.random();\n\n    /** @private {boolean} */\n    this.isFluid_ = isFluid;\n\n    /** @private {{width:number, height:number}} */\n    this.creativeSize_ = creativeSize;\n\n    /** @private {{width:number, height:number}} */\n    this.initialCreativeSize_ =\n      /** @private {{width:number, height:number}} */\n      (Object.assign({}, creativeSize));\n\n    /** @private {?string} */\n    this.fluidImpressionUrl_ = fluidImpressionUrl;\n\n    /** @private {?Promise} */\n    this.delay_ = null;\n\n    /** @private {../../../src/service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = this.baseInstance_.getViewport();\n\n    /** @private {boolean} */\n    this.isCollapsed_ = true;\n\n    /** @private {boolean} */\n    this.isRegistered_ = false;\n\n    // TODO: Make this page-level.\n    const sfConfig = Object(tryParseJson(\n        this.baseInstance_.element.getAttribute(\n            'data-safeframe-config')) || {});\n    /** @private {boolean} */\n    this.expandByOverlay_ = hasOwn(sfConfig, 'expandByOverlay') ?\n      sfConfig['expandByOverlay'] : true;\n\n    /** @private {boolean} */\n    this.expandByPush_ = hasOwn(sfConfig, 'expandByPush') ?\n      sfConfig['expandByPush'] : true;\n\n    /** @private {?Function} */\n    this.unlisten_ = null;\n\n    this.registerSafeframeHost();\n  }\n\n  /**\n   * Returns the Safeframe specific name attributes that are needed for the\n   * Safeframe creative to properly setup.\n   * @return {!JsonObject}\n   */\n  getSafeframeNameAttr() {\n    const attributes = dict({});\n    attributes['uid'] = this.uid_;\n    attributes['hostPeerName'] = this.win_.location.origin;\n    attributes['initialGeometry'] = this.getInitialGeometry();\n    attributes['permissions'] = JSON.stringify(\n        dict({\n          'expandByOverlay': this.expandByOverlay_,\n          'expandByPush': this.expandByPush_,\n          'readCookie': false,\n          'writeCookie': false,\n        }));\n    attributes['metadata'] = JSON.stringify(\n        dict({\n          'shared': {\n            'sf_ver': this.baseInstance_.safeframeVersion,\n            'ck_on': 1,\n            'flash_ver': '26.0.0',\n            // Once GPT Safeframe is updated to look in amp object,\n            // remove this canonical_url here.\n            'canonical_url': this.maybeGetCanonicalUrl(),\n            'amp': {\n              'canonical_url': this.maybeGetCanonicalUrl(),\n            },\n          },\n        }));\n    attributes['reportCreativeGeometry'] = this.isFluid_;\n    attributes['isDifferentSourceWindow'] = false;\n    attributes['sentinel'] = this.sentinel_;\n    return attributes;\n  }\n\n  /**\n   * Returns the canonical URL of the page, if the publisher allows\n   * it to be passed.\n   * @return {string|undefined}\n   * @visibleForTesting\n   */\n  maybeGetCanonicalUrl() {\n    // Don't allow for referrer policy same-origin,\n    // as Safeframe will always be a different origin.\n    // Don't allow for no-referrer.\n    const {canonicalUrl} = Services.documentInfoForDoc(\n        this.baseInstance_.getAmpDoc());\n    const metaReferrer = this.win_.document.querySelector(\n        \"meta[name='referrer']\");\n    if (!metaReferrer) {\n      return canonicalUrl;\n    }\n    switch (metaReferrer.getAttribute('content')) {\n      case 'same-origin':\n        return;\n      case 'no-referrer':\n        return;\n      case 'origin':\n        return parseUrlDeprecated(canonicalUrl).origin;\n    }\n    return canonicalUrl;\n  }\n\n  /**\n   * Returns the initialGeometry to assign to the name of the safeframe\n   * for rendering. This needs to be done differently than all the other\n   * geometry updates, because we don't actually have access to the\n   * rendered safeframe yet. Note that we are using getPageLayoutBox,\n   * which is not guaranteed to be perfectly accurate as it is from\n   * the last measure of the element. This is fine for our use case\n   * here, as even if the position is slightly off, we'll send the right\n   * size.\n   * @return {string}\n   */\n  getInitialGeometry() {\n    const ampAdBox = this.baseInstance_.getPageLayoutBox();\n    const heightOffset = (ampAdBox.height - this.creativeSize_.height) / 2;\n    const widthOffset = (ampAdBox.width - this.creativeSize_.width) / 2;\n    const iframeBox = /** @type {!../../../src/layout-rect.LayoutRectDef} */ ({\n      top: ampAdBox.top + heightOffset,\n      bottom: ampAdBox.bottom - heightOffset,\n      left: ampAdBox.left + widthOffset,\n      right: ampAdBox.right - widthOffset,\n      height: this.initialCreativeSize_.height,\n      width: this.initialCreativeSize_.width,\n    });\n    return this.formatGeom_(iframeBox);\n  }\n\n  /**\n   * Registers this instance as the host API for the current sentinel.\n   * If the global safeframe listener has not yet been created, it creates\n   * that as well.\n   */\n  registerSafeframeHost() {\n    dev().assert(this.sentinel_);\n    safeframeHosts[this.sentinel_] = safeframeHosts[this.sentinel_] || this;\n    if (!safeframeListenerCreated_) {\n      safeframeListenerCreated_ = true;\n      this.win_.addEventListener('message', safeframeListener, false);\n    }\n  }\n\n  /**\n   * Sends initial connection message to the safeframe to finish initialization.\n   * Also initializes the sending of geometry update messages to the frame.\n   * @param {string} channel\n   */\n  connectMessagingChannel(channel) {\n    // Set the iframe here, because when class is first created the iframe\n    // element does not yet exist on this.baseInstance_. The first time\n    // we receive a message we know that it now exists.\n    dev().assert(this.baseInstance_.iframe);\n    this.iframe_ = this.baseInstance_.iframe;\n    this.channel = channel;\n    this.setupGeom_();\n    this.sendMessage_({\n      'message': 'connect',\n      'c': this.channel,\n    }, '');\n  }\n\n  /**\n   * Creates IntersectionObserver instance for this SafeframeAPI instance.\n   * We utilize the existing IntersectionObserver class, by passing in this\n   * class for IO to use instead of SubscriptionApi for sending its update\n   * messages. The method 'send' below is triggered by IO every time that\n   * an update occurs.\n   * @private\n   */\n  setupGeom_() {\n    dev().assert(this.iframe_.contentWindow,\n        'Frame contentWindow unavailable.');\n    const throttledUpdate = throttle(\n        this.win_, this.updateGeometry_.bind(this), 1000);\n    const scrollUnlistener = this.viewport_.onScroll(throttledUpdate);\n    const changedUnlistener = this.viewport_.onChanged(throttledUpdate);\n    this.unlisten_ = () => {\n      scrollUnlistener();\n      changedUnlistener();\n    };\n    this.updateGeometry_();\n  }\n\n  /**\n   * Sends a geometry update message into the safeframe.\n   * @private\n   */\n  updateGeometry_() {\n    if (!this.iframe_) {\n      return;\n    }\n    this.viewport_.getClientRectAsync(this.iframe_).then(iframeBox => {\n      this.checkStillCurrent_();\n      const formattedGeom = this.formatGeom_(iframeBox);\n      this.sendMessage_({\n        newGeometry: formattedGeom,\n        uid: this.uid_,\n      }, SERVICE.GEOMETRY_UPDATE);\n    }).catch(err => dev().error(TAG, err));\n  }\n\n  /**\n   * Builds geometry update format expected by GPT Safeframe.\n   * Also sets this.currentGeometry as side effect.\n   * @param {!../../../src/layout-rect.LayoutRectDef} iframeBox The elementRect for the safeframe.\n   * @return {string} Safeframe formatted changes.\n   * @private\n   */\n  formatGeom_(iframeBox) {\n    const viewportSize = this.viewport_.getSize();\n    const scrollLeft = this.viewport_.getScrollLeft();\n    const scrollTop = this.viewport_.getScrollTop();\n    const currentGeometry = /** @type {JsonObject} */({\n      'windowCoords_t': 0,\n      'windowCoords_r': viewportSize.width,\n      'windowCoords_b': viewportSize.height,\n      'windowCoords_l': 0,\n      'frameCoords_t': iframeBox.top + scrollTop,\n      'frameCoords_r': iframeBox.right + scrollLeft,\n      'frameCoords_b': iframeBox.bottom + scrollTop,\n      'frameCoords_l': iframeBox.left + scrollLeft,\n      'posCoords_t': iframeBox.top,\n      'posCoords_b': iframeBox.bottom,\n      'posCoords_r': iframeBox.right,\n      'posCoords_l': iframeBox.left,\n      'styleZIndex': getStyle(this.baseInstance_.element, 'zIndex'),\n      // AMP's built in resize methodology that we use only allows expansion\n      // to the right and bottom, so we enforce that here.\n      'allowedExpansion_r': viewportSize.width -\n          iframeBox.width,\n      'allowedExpansion_b': viewportSize.height -\n          iframeBox.height,\n      'allowedExpansion_t': 0,\n      'allowedExpansion_l': 0,\n      'yInView': this.getPercInView(viewportSize.height,\n          iframeBox.top, iframeBox.bottom),\n      'xInView': this.getPercInView(viewportSize.width,\n          iframeBox.left, iframeBox.right),\n    });\n    this.currentGeometry_ = currentGeometry;\n    return JSON.stringify(currentGeometry);\n  }\n\n  /**\n   * Helper function to calculate both the xInView and yInView of the\n   * geometry update messages. In the case of a 400px wide viewport,\n   * with a 100px wide creative that starts at x position 50, if we\n   * are calculating xInView, rootBoundEnd is 400, boundingRectStart\n   * is 50, and boundingRectEnd is 150.\n   * @param {number} rootBoundEnd\n   * @param {number} boundingRectStart\n   * @param {number} boundingRectEnd\n   * @return {number}\n   */\n  getPercInView(rootBoundEnd, boundingRectStart, boundingRectEnd) {\n    const lengthInView = (boundingRectEnd >= rootBoundEnd) ?\n      rootBoundEnd - boundingRectStart : boundingRectEnd;\n    const percInView = lengthInView / (boundingRectEnd - boundingRectStart);\n    return Math.max(0, Math.min(1, percInView)) || 0;\n  }\n\n  /**\n   * Handles serializing and sending messages to the safeframe.\n   * @param {!Object} payload\n   * @param {string} serviceName\n   * @private\n   */\n  sendMessage_(payload, serviceName) {\n    if (!this.iframe_.contentWindow) {\n      dev().error(TAG, 'Frame contentWindow unavailable.');\n      return;\n    }\n    const message = dict();\n    message[MESSAGE_FIELDS.CHANNEL] = this.channel;\n    message[MESSAGE_FIELDS.PAYLOAD] = JSON.stringify(\n        /** @type {!JsonObject} */(payload));\n    message[MESSAGE_FIELDS.SERVICE] = serviceName;\n    message[MESSAGE_FIELDS.SENTINEL] = this.sentinel_;\n    message[MESSAGE_FIELDS.ENDPOINT_IDENTITY] = this.endpointIdentity_;\n    this.iframe_.contentWindow./*OK*/postMessage(\n        JSON.stringify(message), SAFEFRAME_ORIGIN);\n  }\n\n  /**\n   * Routes messages to their appropriate handler.\n   * @param {!JsonObject} payload\n   * @param {string} service\n   */\n  processMessage(payload, service) {\n    // We are not logging unexpected messages, and some expected\n    // messages are being dropped, like init_done, as we don't need them.\n    switch (service) {\n      case SERVICE.CREATIVE_GEOMETRY_UPDATE:\n        this.handleFluidMessage_(payload);\n        break;\n      case SERVICE.EXPAND_REQUEST:\n        this.handleExpandRequest_(payload);\n        break;\n      case SERVICE.REGISTER_DONE:\n        this.isRegistered_ = true;\n        break;\n      case SERVICE.COLLAPSE_REQUEST:\n        this.handleCollapseRequest_();\n        break;\n      case SERVICE.RESIZE_REQUEST:\n        this.handleResizeRequest_(payload);\n      default:\n        break;\n    }\n  }\n\n\n  /**\n   * @param {!JsonObject} payload\n   * @private\n   */\n  handleExpandRequest_(payload) {\n    if (!this.isRegistered_) {\n      return;\n    }\n    const expandHeight = Number(this.creativeSize_.height) +\n          payload['expand_b'] + payload['expand_t'];\n    const expandWidth = Number(this.creativeSize_.width) +\n          payload['expand_r'] + payload['expand_l'];\n    // Verify that if expanding by push, that expandByPush is allowed.\n    // If expanding by overlay, verify that expandByOverlay is allowed,\n    // and that we are only expanding within the bounds of the amp-ad.\n    if (isNaN(expandHeight) || isNaN(expandWidth) ||\n        (payload['push'] && !this.expandByPush_) ||\n        (!payload['push'] && !this.expandByOverlay_ &&\n         (expandWidth > this.creativeSize_.width ||\n          expandHeight > this.creativeSize_.height))) {\n      dev().error(TAG, 'Invalid expand values.');\n      this.sendResizeResponse(\n          /* SUCCESS? */ false, SERVICE.EXPAND_RESPONSE);\n      return;\n    }\n    // Can't expand to greater than the viewport size\n    if (expandHeight > this.viewport_.getSize().height ||\n        expandWidth > this.viewport_.getSize().width) {\n      this.sendResizeResponse(\n          /* SUCCESS? */ false, SERVICE.EXPAND_RESPONSE);\n      return;\n    }\n    this.handleSizeChange(expandHeight,\n        expandWidth,\n        SERVICE.EXPAND_RESPONSE);\n  }\n\n  /**\n   * @private\n   */\n  handleCollapseRequest_() {\n    // Only collapse if expanded.\n    if (this.isCollapsed_ || !this.isRegistered_) {\n      this.sendResizeResponse(\n          /* SUCCESS? */ false, SERVICE.COLLAPSE_RESPONSE);\n      return;\n    }\n    this.handleSizeChange(this.initialCreativeSize_.height,\n        this.initialCreativeSize_.width,\n        SERVICE.COLLAPSE_RESPONSE,\n        /** isCollapse */ true);\n  }\n\n  /**\n   * @param {number} height\n   * @param {number} width\n   * @param {string} messageType\n   */\n  resizeSafeframe(height, width, messageType) {\n    this.isCollapsed_ = messageType == SERVICE.COLLAPSE_RESPONSE;\n    this.baseInstance_.measureMutateElement(\n        /** MEASURER */ () => {\n          this.baseInstance_.getResource().measure();\n        },\n        /** MUTATOR */ () => {\n          if (this.iframe_) {\n            setStyles(this.iframe_, {\n              'height': height + 'px',\n              'width': width + 'px',\n            });\n            this.creativeSize_.height = height;\n            this.creativeSize_.width = width;\n          }\n          this.sendResizeResponse(/** SUCCESS */ true, messageType);\n        },\n        this.iframe_\n    );\n  }\n\n  /**\n   * Resizes the safeframe, and potentially the containing amp-ad element.\n   * Then sends a response message to the Safeframe creative.\n   *\n   * For expansion:\n   *  If the new size is fully contained within the bounds of the amp-ad,\n   *  we can resize immediately as there will be no reflow. However, if\n   *  the new size is larger than the amp-ad, then first we need to try\n   *  to resize the amp-ad, and only resize the safeframe if that succeeds.\n   * For collapse:\n   *  We always first want to attempt to collapse the amp-ad. Then,\n   *  regardless of whether that succeeds, we collapse the safeframe too.\n   * @param {number} height In pixels.\n   * @param {number} width In pixels.\n   * @param {string} messageType\n   * @param {boolean=} optIsCollapse Whether this is a collapse attempt.\n   */\n  handleSizeChange(height, width, messageType, optIsCollapse) {\n    return this.viewport_.getClientRectAsync(\n        this.baseInstance_.element).then(box => {\n      if (!optIsCollapse && width <= box.width && height <= box.height) {\n        this.resizeSafeframe(height, width, messageType);\n      } else {\n        this.resizeAmpAdAndSafeframe(height, width, messageType,\n            optIsCollapse);\n      }\n    });\n  }\n\n  /**\n   * @param {!JsonObject} payload\n   * @private\n   */\n  handleResizeRequest_(payload) {\n    if (!this.isRegistered_) {\n      return;\n    }\n    const resizeHeight = Number(this.creativeSize_.height) +\n          (payload['resize_b'] + payload['resize_t']);\n    const resizeWidth = Number(this.creativeSize_.width) +\n          (payload['resize_r'] + payload['resize_l']);\n\n    // Make sure we are actually resizing here.\n    if (isNaN(resizeWidth) || isNaN(resizeHeight) ||\n        resizeWidth > this.creativeSize_.width ||\n        resizeHeight > this.creativeSize_.height) {\n      dev().error(TAG, 'Invalid resize values.');\n      return;\n    }\n\n    this.resizeAmpAdAndSafeframe(resizeHeight, resizeWidth,\n        SERVICE.RESIZE_RESPONSE, true);\n  }\n\n  /**\n   * @param {boolean} success\n   * @param {string} messageType\n   */\n  sendResizeResponse(success, messageType) {\n    if (!this.iframe_) {\n      return;\n    }\n    this.viewport_.getClientRectAsync(this.iframe_).then(iframeBox => {\n      this.checkStillCurrent_();\n      const formattedGeom = this.formatGeom_(iframeBox);\n      this.sendMessage_({\n        uid: this.uid_,\n        success,\n        newGeometry: formattedGeom,\n        'expand_t': this.currentGeometry_['allowedExpansion_t'],\n        'expand_b': this.currentGeometry_['allowedExpansion_b'],\n        'expand_r': this.currentGeometry_['allowedExpansion_r'],\n        'expand_l': this.currentGeometry_['allowedExpansion_l'],\n        push: true,\n      }, messageType);\n    }).catch(err => dev().error(TAG, err));\n  }\n\n  /**\n   * Attempts to resize both the amp-ad and the Safeframe.\n   * If the amp-ad can not be resized, then if it was a collapse request,\n   * we will still collapse just the safeframe.\n   * @param {number} height\n   * @param {number} width\n   * @param {string} messageType\n   * @param {boolean=} opt_isShrinking True if collapsing or resizing smaller.\n   */\n  resizeAmpAdAndSafeframe(height, width, messageType, opt_isShrinking) {\n    // First, attempt to resize the Amp-Ad that is the parent of the\n    // safeframe\n    this.baseInstance_.attemptChangeSize(height, width).then(() => {\n      this.checkStillCurrent_();\n      // If this resize succeeded, we always resize the safeframe.\n      // resizeSafeframe also sends the resize response.\n      this.resizeSafeframe(height, width, messageType);\n    }, /** REJECT CALLBACK */ () => {\n      // If the resize initially failed, it may have been queued\n      // as a pendingChangeSize, which will cause the size change\n      // to execute upon the next user interaction. We don't want\n      // that for safeframe, so we reset it here.\n      this.baseInstance_.getResource().resetPendingChangeSize();\n      if (opt_isShrinking) {\n        // If this is a collapse or resize request, then even if resizing\n        // the amp-ad failed, still resize the iframe.\n        // resizeSafeframe also sends the resize response.\n        // Only register as collapsed if explicitly a collapse request.\n        this.resizeSafeframe(height, width, messageType);\n      } else {\n        // We were attempting to\n        // expand past the bounds of the amp-ad, and it failed. Thus,\n        // we need to send a failure message, and the safeframe is\n        // not resized.\n        this.sendResizeResponse(false, messageType);\n      }\n    }).catch(err => {\n      if (err.message == 'CANCELLED') {\n        dev().error(TAG, err);\n        return;\n      }\n      dev().error(TAG, `Resizing failed: ${err}`);\n      this.sendResizeResponse(false, messageType);\n    });\n  }\n\n  /**\n   * Handles Fluid-related messages dispatched from SafeFrame.\n   * @param {!JsonObject} payload\n   * @private\n   */\n  handleFluidMessage_(payload) {\n    let newHeight;\n    if (!payload || !(newHeight = parseInt(payload['height'], 10))) {\n      // TODO(levitzky) Add actual error handling here.\n      this.baseInstance_.forceCollapse();\n      return;\n    }\n    this.baseInstance_.attemptChangeHeight(newHeight)\n        .then(() => {\n          this.checkStillCurrent_();\n          this.onFluidResize_(newHeight);\n        }).catch(err => {\n          if (err.message == 'CANCELLED') {\n            dev().error(TAG, err);\n            return;\n          }\n          // TODO(levitzky) Add more error handling here\n          this.baseInstance_.forceCollapse();\n        });\n  }\n\n  /**\n   * Fires a delayed impression and notifies the Fluid creative that its\n   * container has been resized.\n   * @param {number} newHeight The height expanded to.\n   * @private\n   */\n  onFluidResize_(newHeight) {\n    const iframe = dev().assertElement(this.baseInstance_.iframe);\n    const iframeHeight = parseInt(getStyle(iframe, 'height'), 10) || 0;\n    if (iframeHeight != newHeight) {\n      setStyles(iframe, {height: `${newHeight}px`});\n    }\n    if (this.fluidImpressionUrl_) {\n      this.baseInstance_.fireDelayedImpressions(\n          this.fluidImpressionUrl_);\n      this.fluidImpressionUrl_ = null;\n    }\n    this.iframe_.contentWindow./*OK*/postMessage(\n        JSON.stringify(dict({'message': 'resize-complete', 'c': this.channel})),\n        SAFEFRAME_ORIGIN);\n  }\n\n  /**\n   * Unregister this Host API.\n   */\n  destroy() {\n    this.iframe_ = null;\n    delete safeframeHosts[this.sentinel_];\n    if (this.unlisten_) {\n      this.unlisten_();\n    }\n    if (Object.keys(safeframeHosts).length == 0) {\n      removeSafeframeListener();\n    }\n  }\n}\n\n/**\n * Removes the safeframe event listener.\n */\nexport function removeSafeframeListener() {\n  window.removeEventListener('message', safeframeListener, false);\n  safeframeListenerCreated_ = false;\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RENDERING_TYPE_HEADER, XORIGIN_MODE} from '../../amp-a4a/0.1/amp-a4a';\nimport {dev} from '../../../src/log';\nimport {getEnclosingContainerTypes} from '../../../ads/google/a4a/utils';\nimport {\n  isInManualExperiment,\n} from '../../../ads/google/a4a/traffic-experiments';\nimport {isObject} from '../../../src/types';\nimport {tryResolve} from '../../../src/utils/promise';\nimport {utf8Encode} from '../../../src/utils/bytes';\n\n/** @type {string} */\nconst TAG = 'amp-ad-network-doubleclick-impl';\n\n/**\n * @const {string}\n * @visibleForTesting\n */\nexport const TFCD = 'tagForChildDirectedTreatment';\n\n/** @private {!Array<function(!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>):?Object<string,string>>} */\nconst SRA_JOINERS = [\n  combineInventoryUnits, getCookieOptOut, getAdks, getSizes, getTfcd, isAdTest,\n  getTargetingAndExclusions, getExperimentIds, getIdentity, getForceSafeframe,\n  getPageOffsets, getContainers];\n\n/**\n  * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n  * @return {!Object<string, *>}\n  */\nexport function constructSRABlockParameters(impls) {\n  const parameters = {'output': 'ldjh', 'impl': 'fifs'};\n  SRA_JOINERS.forEach(joiner => Object.assign(parameters, joiner(impls)));\n  return parameters;\n}\n\n/**\n * Given array of instances, execute extractFn on each and return first non-\n * falsey value or null if none are truthy.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @param {function(!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl):?T} extractFn\n * @return {?T} value of first instance with non-null/undefined value or null\n *    if none can be found\n * @template T\n * @private\n */\nfunction getFirstInstanceValue_(impls, extractFn) {\n  for (let i = 0; i < impls.length; i++) {\n    const val = extractFn(impls[i]);\n    if (val) {\n      return val;\n    }\n  }\n  return null;\n}\n\n/**\n * Combines inventory unit paths for multiple blocks by building list of\n * unique path parts in iu_parts and then comma separated list of block\n * paths using index into iu_parts list.\n * Example: /123/foo/bar and /blah/foo/bar/123 =>\n *    iu_parts=123,foo,bar,blah & enc_prev_ius=/0/1/2,/3/1/2/0\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function combineInventoryUnits(impls) {\n  const uniqueIuNames = {};\n  const iuNamesOutput = [];\n  let uniqueIuNamesCount = 0;\n  const prevIusEncoded = [];\n  impls.forEach(instance => {\n    const iu = dev().assert(instance.element.getAttribute('data-slot'));\n    const componentNames = iu.split('/');\n    const encodedNames = [];\n    for (let i = 0; i < componentNames.length; i++) {\n      if (componentNames[i] == '') {\n        continue;\n      }\n      let index = uniqueIuNames[componentNames[i]];\n      if (index == undefined) {\n        iuNamesOutput.push(componentNames[i]);\n        uniqueIuNames[componentNames[i]] = (index = uniqueIuNamesCount++);\n      }\n      encodedNames.push(index);\n    }\n    prevIusEncoded.push(encodedNames.join('/'));\n  });\n  return {\n    'iu_parts': iuNamesOutput.join(),\n    'enc_prev_ius': prevIusEncoded.join(),\n  };\n}\n\n/**\n * Indicates SRA request is cookie opt out if any of the blocks includes\n * cookie opt out in targeting.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getCookieOptOut(impls) {\n  return getFirstInstanceValue_(impls, impl =>\n    impl.jsonTargeting &&\n         impl.jsonTargeting['cookieOptOut'] ? {'co': '1'} : null);\n}\n\n/**\n * Combine ad unit key of each block via comma separated values.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getAdks(impls) {\n  return ({'adks': impls.map(impl => dev().assert(impl.adKey)).join()});\n}\n\n/**\n * Combine block sizes via comma separated values.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getSizes(impls) {\n  return ({'prev_iu_szs': impls.map(impl =>\n    dev().assert(impl.parameterSize)).join()});\n}\n\n/**\n * Indicate SRA request is tagForChildDirectedTreatment if any blocks includes\n * in targeting.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getTfcd(impls) {\n  return getFirstInstanceValue_(impls, impl =>\n    impl.jsonTargeting && impl.jsonTargeting[TFCD] ?\n      {'tfcd': impl.jsonTargeting[TFCD]} : null);\n}\n\n/**\n * Indicate SRA request should include adtest=on if any block includes the\n * manual experiment id.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function isAdTest(impls) {\n  return getFirstInstanceValue_(impls, impl =>\n    isInManualExperiment(impl.element) ? {'adtest': 'on'} : null);\n}\n\n/**\n * Join block targeting values by separating by pipes (each key/value pair for\n * a given block is separated by =) and exclusions are given special excl_cat\n * key (list of categories are comma separated).\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getTargetingAndExclusions(impls) {\n  let hasScp = false;\n  const scps = [];\n  impls.forEach(impl => {\n    if (impl.jsonTargeting && (impl.jsonTargeting['targeting'] ||\n       impl.jsonTargeting['categoryExclusions'])) {\n      hasScp = true;\n      scps.push(serializeTargeting(\n          impl.jsonTargeting['targeting'] || null,\n          impl.jsonTargeting['categoryExclusions'] || null));\n    } else {\n      scps.push('');\n    }\n  });\n  return hasScp ? {'prev_scp': scps.join('|')} : null;\n}\n\n/**\n * Experiment ids are assumed to be page level given that is all that is\n * supported for SRA requests therefore block values are combined by building\n * the unique set of experiment ids which are comma separated (order does not\n * matter).\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getExperimentIds(impls) {\n  const eids = {};\n  const deid = (impls.length &&\n     /(?:#|,)deid=([\\d,]+)/i.exec(impls[0].win.location.hash)) || [];\n  (deid[1] || '').split(',').forEach(eid => eid && (eids[eid] = 1));\n  impls.forEach(impl => impl.experimentIds.forEach(eid => eids[eid] = 1));\n  const eidKeys = Object.keys(eids).join();\n  return eidKeys ? {'eid': eidKeys} : null;\n}\n\n/**\n * Identity token is page level therefore SRA uses the value of the first\n * block.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getIdentity(impls) {\n  return getFirstInstanceValue_(impls, impl => impl.buildIdentityParams());\n}\n\n/**\n * Combine force safeframe values for each block via comma separated numeric\n * values based on boolean value (e.g. false = 0, true = 1).  If none of the\n * blocks has force safeframe, parameter is not included in SRA request.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getForceSafeframe(impls) {\n  let safeframeForced = false;\n  const forceSafeframes = [];\n  impls.forEach(impl => {\n    safeframeForced = safeframeForced || impl.forceSafeframe;\n    forceSafeframes.push(Number(impl.forceSafeframe));\n  });\n  return safeframeForced ? {'fsfs': forceSafeframes.join()} : null;\n}\n\n/**\n * Combine page offset info for each block by constructing separate parameter\n * for left (adxs) and top (adyx) via comma separated.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getPageOffsets(impls) {\n  const adxs = [];\n  const adys = [];\n  impls.forEach(impl => {\n    const layoutBox = impl.getPageLayoutBox();\n    adxs.push(layoutBox.left);\n    adys.push(layoutBox.top);\n  });\n  return {'adxs': adxs.join(), 'adys': adys.join()};\n}\n\n/**\n * Combine which containers exist for each block (e.g. sticky) via pipe\n * separator (as block can have multiple values that are comma separated).  If\n * none of the blocks have a container, then parameter is not sent.\n * @param {!Array<!./amp-ad-network-doubleclick-impl.AmpAdNetworkDoubleclickImpl>} impls\n * @return {?Object<string,string>}\n * @visibleForTesting\n */\nexport function getContainers(impls) {\n  let hasAmpContainer = false;\n  const result = [];\n  impls.forEach(impl => {\n    const containers = getEnclosingContainerTypes(impl.element);\n    result.push(containers.join());\n    hasAmpContainer = hasAmpContainer || !!containers.length;\n  });\n  return hasAmpContainer ? {'acts': result.join('|')} : null;\n}\n\n/**\n * @param {?Object<string, (!Array<string>|string)>} targeting\n * @param {?(!Array<string>|string)} categoryExclusions\n * @return {?string}\n */\nexport function serializeTargeting(targeting, categoryExclusions) {\n  const serialized = targeting ?\n    Object.keys(targeting).map(key => serializeItem_(key, targeting[key])) :\n    [];\n  if (categoryExclusions) {\n    serialized.push(serializeItem_('excl_cat', categoryExclusions));\n  }\n  return serialized.length ? serialized.join('&') : null;\n}\n\n/**\n * @param {string} key\n * @param {(!Array<string>|string)} value\n * @return {string}\n * @private\n */\nfunction serializeItem_(key, value) {\n  const serializedValue =\n    (Array.isArray(value) ? value : [value]).map(encodeURIComponent).join();\n  return `${encodeURIComponent(key)}=${serializedValue}`;\n}\n\n/**\n * Callback for streaming SRA response given creative and JSON parsed Object\n * containing headers (as if request had been sent via non-SRA flow).  Creative\n * and headers object is converted to XHR FetchResponse object and passed to\n * resolver popped off stack of resolvers (in order of expected block responses)\n * such that sendXhrRequest is resolved from standard A4A flow.  Done boolean\n * used to verify array of resolvers is empty once all results are returned.\n * @param {string} creative\n * @param {!Object<string,string>} headersObj\n * @param {boolean} done\n * @param {!Array<function(?../../../src/utils/xhr-utils.FetchResponse)>} sraRequestAdUrlResolvers\n * @param {string} sraUrl url of SRA request for error reporting\n */\nexport function sraBlockCallbackHandler(\n  creative, headersObj, done, sraRequestAdUrlResolvers, sraUrl) {\n  const headerNames = Object.keys(headersObj);\n  if (headerNames.length == 1 &&\n      isObject(headersObj[headerNames[0]])) {\n    // TODO(keithwrightbos) - fix upstream so response does\n    // not improperly place headers under key.\n    headersObj =\n      /** @type {!Object} */(headersObj)[headerNames[0]];\n    headersObj = Object.keys(headersObj).reduce(\n        (newObj, key) => {\n          newObj[key.toLowerCase()] = headersObj[key];\n          return newObj;\n        }, {});\n  }\n  // Force safeframe rendering method.\n  headersObj[RENDERING_TYPE_HEADER.toLowerCase()] =\n      XORIGIN_MODE.SAFEFRAME;\n  // Construct pseudo fetch response to be passed down the A4A\n  // promise chain for this block.\n  const headers =\n/** @type {?../../../src/utils/xhr-utils.FetchResponseHeaders} */\n({\n  get: name => {\n    // TODO(keithwrightbos) - fix upstream so response writes\n    // all metadata values as strings.\n    let header = headersObj[name.toLowerCase()];\n    if (header && typeof header != 'string') {\n      header = JSON.stringify(header);\n    }\n    return header;\n  },\n  has: name => !!headersObj[name.toLowerCase()],\n});\n  const fetchResponse =\n/** @type {?../../../src/utils/xhr-utils.FetchResponse} */\n({\n  headers,\n  arrayBuffer: () => tryResolve(() => utf8Encode(creative)),\n});\n  // Pop head off of the array of resolvers as the response\n  // should match the order of blocks declared in the ad url.\n  // This allows the block to start rendering while the SRA\n  // response is streaming back to the client.\n  dev().assert(sraRequestAdUrlResolvers.shift())(fetchResponse);\n  // If done, expect array to be empty (ensures ad response\n  // included data for all slots).\n  if (done && sraRequestAdUrlResolvers.length) {\n    dev().warn(TAG, 'Premature end of SRA response',\n        sraRequestAdUrlResolvers.length, sraUrl);\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {startsWith} from '../../../src/string';\n\n/** @const @private {string} */\nconst GMOSSP_SRC_PREFIX_ = 'https://sp.gmossp-sp.jp/';\n\n/** @const @private {string} */\nconst GMOSSP_SRC_A4A_PREFIX_ = 'https://amp.sp.gmossp-sp.jp/_a4a/';\n\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function gmosspIsA4AEnabled(win, element, useRemoteHtml) {\n  let src;\n  return !useRemoteHtml && !!(src = element.getAttribute('src')) &&\n      !!element.getAttribute('data-use-a4a') &&\n      (startsWith(src, GMOSSP_SRC_PREFIX_) ||\n       startsWith(src, GMOSSP_SRC_A4A_PREFIX_));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const @private {string} */\nconst SRC_PREFIX_ = 'https://ib.3lift.com/';\n/**\n * @param {!Window} win\n * @param {!Element} element\n * @param {boolean} useRemoteHtml\n * @return {boolean}\n */\nexport function tripleliftIsA4AEnabled(win, element, useRemoteHtml) {\n  let src;\n  return !useRemoteHtml && !!element.getAttribute('data-use-a4a') && !!(src =\n    element.getAttribute('src')) && src.indexOf(SRC_PREFIX_) == 0;\n}\n","/* Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from '../../../src/utils/promise';\nimport {Services} from '../../../src/services';\nimport {user} from '../../../src/log';\n\n/**\n * Store loading ads info within window to ensure it can be properly stored\n * across separately compiled binaries that share load throttling.\n * @const ID of window variable used to track 3p ads waiting to load.\n */\nconst LOADING_ADS_WIN_ID_ = '3pla';\n\n/** @private {?Promise} resolves when no 3p throttle */\nlet throttlePromise_ = null;\n/** @private {?Function} resolver for throttle promise */\nlet throttlePromiseResolver_ = null;\n\n/**\n * @param {!Window} win\n * @return {boolean} Whether 3p is currently throttled.\n */\nexport function is3pThrottled(win) {\n  return !!win[LOADING_ADS_WIN_ID_];\n}\n\n/** @return {!Promise} resolves when no 3p throttle */\nexport function waitFor3pThrottle() {\n  return throttlePromise_ || Promise.resolve();\n}\n\n/**\n * @param {!Element} element\n * @return {?number} number if explicit value should be used otherwise super\n *    default should be used.\n */\nexport function getAmpAdRenderOutsideViewport(element) {\n  const rawValue = element.getAttribute('data-loading-strategy');\n  if (rawValue == null) {\n    return null;\n  }\n  // Ad opts into lazier loading strategy where we only load ads that are\n  // at closer given number of viewports away.\n  if (rawValue == 'prefer-viewability-over-views' || rawValue == '') {\n    return 1.25;\n  }\n  const errorMessage =\n      'Value of data-loading-strategy should be a float number in range ' +\n      'of [0, 3], but got ' + rawValue;\n  const viewportNumber =\n      user().assertNumber(parseFloat(rawValue), errorMessage);\n  user().assert(viewportNumber >= 0 && viewportNumber <= 3, errorMessage);\n  return viewportNumber;\n}\n\n/**\n * Increments loading ads count for throttling.\n * @param {!Window} win\n * @param {!Promise=} opt_loadingPromise\n */\nexport function incrementLoadingAds(win, opt_loadingPromise) {\n  if (win[LOADING_ADS_WIN_ID_] === undefined) {\n    win[LOADING_ADS_WIN_ID_] = 0;\n  }\n  win[LOADING_ADS_WIN_ID_]++;\n\n  if (!throttlePromise_) {\n    const deferred = new Deferred();\n    throttlePromise_ = deferred.promise;\n    throttlePromiseResolver_ = deferred.resolve;\n  }\n\n  Services.timerFor(win)\n      .timeoutPromise(1000, opt_loadingPromise)\n      .catch(() => {})\n      .then(() => {\n        if (!--win[LOADING_ADS_WIN_ID_]) {\n          throttlePromiseResolver_();\n          throttlePromise_ = null;\n          throttlePromiseResolver_ = null;\n        }\n      });\n}\n","/*!\n\nCopyright (C) 2014-2016 by Andrea Giammarchi - @WebReflection\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n// global window Object\n// optional polyfill info\n//    'auto' used by default, everything is feature detected\n//    'force' use the polyfill even if not fully needed\nfunction installCustomElements(window, polyfill) {'use strict';\n\n  // DO NOT USE THIS FILE DIRECTLY, IT WON'T WORK\n  // THIS IS A PROJECT BASED ON A BUILD SYSTEM\n  // THIS FILE IS JUST WRAPPED UP RESULTING IN\n  // build/document-register-element.node.js\n\n  var\n    document = window.document,\n    Object = window.Object\n  ;\n\n  var htmlClass = (function (info) {\n    // (C) Andrea Giammarchi - @WebReflection - MIT Style\n    var\n      catchClass = /^[A-Z]+[a-z]/,\n      filterBy = function (re) {\n        var arr = [], tag;\n        for (tag in register) {\n          if (re.test(tag)) arr.push(tag);\n        }\n        return arr;\n      },\n      add = function (Class, tag) {\n        tag = tag.toLowerCase();\n        if (!(tag in register)) {\n          register[Class] = (register[Class] || []).concat(tag);\n          register[tag] = (register[tag.toUpperCase()] = Class);\n        }\n      },\n      register = (Object.create || Object)(null),\n      htmlClass = {},\n      i, section, tags, Class\n    ;\n    for (section in info) {\n      for (Class in info[section]) {\n        tags = info[section][Class];\n        register[Class] = tags;\n        for (i = 0; i < tags.length; i++) {\n          register[tags[i].toLowerCase()] =\n          register[tags[i].toUpperCase()] = Class;\n        }\n      }\n    }\n    htmlClass.get = function get(tagOrClass) {\n      return typeof tagOrClass === 'string' ?\n        (register[tagOrClass] || (catchClass.test(tagOrClass) ? [] : '')) :\n        filterBy(tagOrClass);\n    };\n    htmlClass.set = function set(tag, Class) {\n      return (catchClass.test(tag) ?\n        add(tag, Class) :\n        add(Class, tag)\n      ), htmlClass;\n    };\n    return htmlClass;\n  }({\n    \"collections\": {\n      \"HTMLAllCollection\": [\n        \"all\"\n      ],\n      \"HTMLCollection\": [\n        \"forms\"\n      ],\n      \"HTMLFormControlsCollection\": [\n        \"elements\"\n      ],\n      \"HTMLOptionsCollection\": [\n        \"options\"\n      ]\n    },\n    \"elements\": {\n      \"Element\": [\n        \"element\"\n      ],\n      \"HTMLAnchorElement\": [\n        \"a\"\n      ],\n      \"HTMLAppletElement\": [\n        \"applet\"\n      ],\n      \"HTMLAreaElement\": [\n        \"area\"\n      ],\n      \"HTMLAttachmentElement\": [\n        \"attachment\"\n      ],\n      \"HTMLAudioElement\": [\n        \"audio\"\n      ],\n      \"HTMLBRElement\": [\n        \"br\"\n      ],\n      \"HTMLBaseElement\": [\n        \"base\"\n      ],\n      \"HTMLBodyElement\": [\n        \"body\"\n      ],\n      \"HTMLButtonElement\": [\n        \"button\"\n      ],\n      \"HTMLCanvasElement\": [\n        \"canvas\"\n      ],\n      \"HTMLContentElement\": [\n        \"content\"\n      ],\n      \"HTMLDListElement\": [\n        \"dl\"\n      ],\n      \"HTMLDataElement\": [\n        \"data\"\n      ],\n      \"HTMLDataListElement\": [\n        \"datalist\"\n      ],\n      \"HTMLDetailsElement\": [\n        \"details\"\n      ],\n      \"HTMLDialogElement\": [\n        \"dialog\"\n      ],\n      \"HTMLDirectoryElement\": [\n        \"dir\"\n      ],\n      \"HTMLDivElement\": [\n        \"div\"\n      ],\n      \"HTMLDocument\": [\n        \"document\"\n      ],\n      \"HTMLElement\": [\n        \"element\",\n        \"abbr\",\n        \"address\",\n        \"article\",\n        \"aside\",\n        \"b\",\n        \"bdi\",\n        \"bdo\",\n        \"cite\",\n        \"code\",\n        \"command\",\n        \"dd\",\n        \"dfn\",\n        \"dt\",\n        \"em\",\n        \"figcaption\",\n        \"figure\",\n        \"footer\",\n        \"header\",\n        \"i\",\n        \"kbd\",\n        \"mark\",\n        \"nav\",\n        \"noscript\",\n        \"rp\",\n        \"rt\",\n        \"ruby\",\n        \"s\",\n        \"samp\",\n        \"section\",\n        \"small\",\n        \"strong\",\n        \"sub\",\n        \"summary\",\n        \"sup\",\n        \"u\",\n        \"var\",\n        \"wbr\"\n      ],\n      \"HTMLEmbedElement\": [\n        \"embed\"\n      ],\n      \"HTMLFieldSetElement\": [\n        \"fieldset\"\n      ],\n      \"HTMLFontElement\": [\n        \"font\"\n      ],\n      \"HTMLFormElement\": [\n        \"form\"\n      ],\n      \"HTMLFrameElement\": [\n        \"frame\"\n      ],\n      \"HTMLFrameSetElement\": [\n        \"frameset\"\n      ],\n      \"HTMLHRElement\": [\n        \"hr\"\n      ],\n      \"HTMLHeadElement\": [\n        \"head\"\n      ],\n      \"HTMLHeadingElement\": [\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"h4\",\n        \"h5\",\n        \"h6\"\n      ],\n      \"HTMLHtmlElement\": [\n        \"html\"\n      ],\n      \"HTMLIFrameElement\": [\n        \"iframe\"\n      ],\n      \"HTMLImageElement\": [\n        \"img\"\n      ],\n      \"HTMLInputElement\": [\n        \"input\"\n      ],\n      \"HTMLKeygenElement\": [\n        \"keygen\"\n      ],\n      \"HTMLLIElement\": [\n        \"li\"\n      ],\n      \"HTMLLabelElement\": [\n        \"label\"\n      ],\n      \"HTMLLegendElement\": [\n        \"legend\"\n      ],\n      \"HTMLLinkElement\": [\n        \"link\"\n      ],\n      \"HTMLMapElement\": [\n        \"map\"\n      ],\n      \"HTMLMarqueeElement\": [\n        \"marquee\"\n      ],\n      \"HTMLMediaElement\": [\n        \"media\"\n      ],\n      \"HTMLMenuElement\": [\n        \"menu\"\n      ],\n      \"HTMLMenuItemElement\": [\n        \"menuitem\"\n      ],\n      \"HTMLMetaElement\": [\n        \"meta\"\n      ],\n      \"HTMLMeterElement\": [\n        \"meter\"\n      ],\n      \"HTMLModElement\": [\n        \"del\",\n        \"ins\"\n      ],\n      \"HTMLOListElement\": [\n        \"ol\"\n      ],\n      \"HTMLObjectElement\": [\n        \"object\"\n      ],\n      \"HTMLOptGroupElement\": [\n        \"optgroup\"\n      ],\n      \"HTMLOptionElement\": [\n        \"option\"\n      ],\n      \"HTMLOutputElement\": [\n        \"output\"\n      ],\n      \"HTMLParagraphElement\": [\n        \"p\"\n      ],\n      \"HTMLParamElement\": [\n        \"param\"\n      ],\n      \"HTMLPictureElement\": [\n        \"picture\"\n      ],\n      \"HTMLPreElement\": [\n        \"pre\"\n      ],\n      \"HTMLProgressElement\": [\n        \"progress\"\n      ],\n      \"HTMLQuoteElement\": [\n        \"blockquote\",\n        \"q\",\n        \"quote\"\n      ],\n      \"HTMLScriptElement\": [\n        \"script\"\n      ],\n      \"HTMLSelectElement\": [\n        \"select\"\n      ],\n      \"HTMLShadowElement\": [\n        \"shadow\"\n      ],\n      \"HTMLSlotElement\": [\n        \"slot\"\n      ],\n      \"HTMLSourceElement\": [\n        \"source\"\n      ],\n      \"HTMLSpanElement\": [\n        \"span\"\n      ],\n      \"HTMLStyleElement\": [\n        \"style\"\n      ],\n      \"HTMLTableCaptionElement\": [\n        \"caption\"\n      ],\n      \"HTMLTableCellElement\": [\n        \"td\",\n        \"th\"\n      ],\n      \"HTMLTableColElement\": [\n        \"col\",\n        \"colgroup\"\n      ],\n      \"HTMLTableElement\": [\n        \"table\"\n      ],\n      \"HTMLTableRowElement\": [\n        \"tr\"\n      ],\n      \"HTMLTableSectionElement\": [\n        \"thead\",\n        \"tbody\",\n        \"tfoot\"\n      ],\n      \"HTMLTemplateElement\": [\n        \"template\"\n      ],\n      \"HTMLTextAreaElement\": [\n        \"textarea\"\n      ],\n      \"HTMLTimeElement\": [\n        \"time\"\n      ],\n      \"HTMLTitleElement\": [\n        \"title\"\n      ],\n      \"HTMLTrackElement\": [\n        \"track\"\n      ],\n      \"HTMLUListElement\": [\n        \"ul\"\n      ],\n      \"HTMLUnknownElement\": [\n        \"unknown\",\n        \"vhgroupv\",\n        \"vkeygen\"\n      ],\n      \"HTMLVideoElement\": [\n        \"video\"\n      ]\n    },\n    \"nodes\": {\n      \"Attr\": [\n        \"node\"\n      ],\n      \"Audio\": [\n        \"audio\"\n      ],\n      \"CDATASection\": [\n        \"node\"\n      ],\n      \"CharacterData\": [\n        \"node\"\n      ],\n      \"Comment\": [\n        \"#comment\"\n      ],\n      \"Document\": [\n        \"#document\"\n      ],\n      \"DocumentFragment\": [\n        \"#document-fragment\"\n      ],\n      \"DocumentType\": [\n        \"node\"\n      ],\n      \"HTMLDocument\": [\n        \"#document\"\n      ],\n      \"Image\": [\n        \"img\"\n      ],\n      \"Option\": [\n        \"option\"\n      ],\n      \"ProcessingInstruction\": [\n        \"node\"\n      ],\n      \"ShadowRoot\": [\n        \"#shadow-root\"\n      ],\n      \"Text\": [\n        \"#text\"\n      ],\n      \"XMLDocument\": [\n        \"xml\"\n      ]\n    }\n  }));\n  \n  \n    \n  // passed at runtime, configurable\n  // via nodejs module\n  if (!polyfill) polyfill = 'auto';\n  \n  var\n    // V0 polyfill entry\n    REGISTER_ELEMENT = 'registerElement',\n  \n    // IE < 11 only + old WebKit for attributes + feature detection\n    EXPANDO_UID = '__' + REGISTER_ELEMENT + (window.Math.random() * 10e4 >> 0),\n  \n    // shortcuts and costants\n    ADD_EVENT_LISTENER = 'addEventListener',\n    ATTACHED = 'attached',\n    CALLBACK = 'Callback',\n    DETACHED = 'detached',\n    EXTENDS = 'extends',\n  \n    ATTRIBUTE_CHANGED_CALLBACK = 'attributeChanged' + CALLBACK,\n    ATTACHED_CALLBACK = ATTACHED + CALLBACK,\n    CONNECTED_CALLBACK = 'connected' + CALLBACK,\n    DISCONNECTED_CALLBACK = 'disconnected' + CALLBACK,\n    CREATED_CALLBACK = 'created' + CALLBACK,\n    DETACHED_CALLBACK = DETACHED + CALLBACK,\n  \n    ADDITION = 'ADDITION',\n    MODIFICATION = 'MODIFICATION',\n    REMOVAL = 'REMOVAL',\n  \n    DOM_ATTR_MODIFIED = 'DOMAttrModified',\n    DOM_CONTENT_LOADED = 'DOMContentLoaded',\n    DOM_SUBTREE_MODIFIED = 'DOMSubtreeModified',\n  \n    PREFIX_TAG = '<',\n    PREFIX_IS = '=',\n  \n    // valid and invalid node names\n    validName = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,\n    invalidNames = [\n      'ANNOTATION-XML',\n      'COLOR-PROFILE',\n      'FONT-FACE',\n      'FONT-FACE-SRC',\n      'FONT-FACE-URI',\n      'FONT-FACE-FORMAT',\n      'FONT-FACE-NAME',\n      'MISSING-GLYPH'\n    ],\n  \n    // registered types and their prototypes\n    types = [],\n    protos = [],\n  \n    // to query subnodes\n    query = '',\n  \n    // html shortcut used to feature detect\n    documentElement = document.documentElement,\n  \n    // ES5 inline helpers || basic patches\n    indexOf = types.indexOf || function (v) {\n      for(var i = this.length; i-- && this[i] !== v;){}\n      return i;\n    },\n  \n    // other helpers / shortcuts\n    OP = Object.prototype,\n    hOP = OP.hasOwnProperty,\n    iPO = OP.isPrototypeOf,\n  \n    defineProperty = Object.defineProperty,\n    empty = [],\n    gOPD = Object.getOwnPropertyDescriptor,\n    gOPN = Object.getOwnPropertyNames,\n    gPO = Object.getPrototypeOf,\n    sPO = Object.setPrototypeOf,\n  \n    // jshint proto: true\n    hasProto = !!Object.__proto__,\n  \n    // V1 helpers\n    fixGetClass = false,\n    DRECEV1 = '__dreCEv1',\n    customElements = window.customElements,\n    usableCustomElements = polyfill !== 'force' && !!(\n      customElements &&\n      customElements.define &&\n      customElements.get &&\n      customElements.whenDefined\n    ),\n    Dict = Object.create || Object,\n    Map = window.Map || function Map() {\n      var K = [], V = [], i;\n      return {\n        get: function (k) {\n          return V[indexOf.call(K, k)];\n        },\n        set: function (k, v) {\n          i = indexOf.call(K, k);\n          if (i < 0) V[K.push(k) - 1] = v;\n          else V[i] = v;\n        }\n      };\n    },\n    Promise = window.Promise || function (fn) {\n      var\n        notify = [],\n        done = false,\n        p = {\n          'catch': function () {\n            return p;\n          },\n          'then': function (cb) {\n            notify.push(cb);\n            if (done) setTimeout(resolve, 1);\n            return p;\n          }\n        }\n      ;\n      function resolve(value) {\n        done = true;\n        while (notify.length) notify.shift()(value);\n      }\n      fn(resolve);\n      return p;\n    },\n    justCreated = false,\n    constructors = Dict(null),\n    waitingList = Dict(null),\n    nodeNames = new Map(),\n    secondArgument = function (is) {\n      return is.toLowerCase();\n    },\n  \n    // used to create unique instances\n    create = Object.create || function Bridge(proto) {\n      // silly broken polyfill probably ever used but short enough to work\n      return proto ? ((Bridge.prototype = proto), new Bridge()) : this;\n    },\n  \n    // will set the prototype if possible\n    // or copy over all properties\n    setPrototype = sPO || (\n      hasProto ?\n        function (o, p) {\n          o.__proto__ = p;\n          return o;\n        } : (\n      (gOPN && gOPD) ?\n        (function(){\n          function setProperties(o, p) {\n            for (var\n              key,\n              names = gOPN(p),\n              i = 0, length = names.length;\n              i < length; i++\n            ) {\n              key = names[i];\n              if (!hOP.call(o, key)) {\n                defineProperty(o, key, gOPD(p, key));\n              }\n            }\n          }\n          return function (o, p) {\n            do {\n              setProperties(o, p);\n            } while ((p = gPO(p)) && !iPO.call(p, o));\n            return o;\n          };\n        }()) :\n        function (o, p) {\n          for (var key in p) {\n            o[key] = p[key];\n          }\n          return o;\n        }\n    )),\n  \n    // DOM shortcuts and helpers, if any\n  \n    MutationObserver = window.MutationObserver ||\n                       window.WebKitMutationObserver,\n  \n    HTMLElementPrototype = (\n      window.HTMLElement ||\n      window.Element ||\n      window.Node\n    ).prototype,\n  \n    IE8 = !iPO.call(HTMLElementPrototype, documentElement),\n  \n    safeProperty = IE8 ? function (o, k, d) {\n      o[k] = d.value;\n      return o;\n    } : defineProperty,\n  \n    isValidNode = IE8 ?\n      function (node) {\n        return node.nodeType === 1;\n      } :\n      function (node) {\n        return iPO.call(HTMLElementPrototype, node);\n      },\n  \n    targets = IE8 && [],\n  \n    attachShadow = HTMLElementPrototype.attachShadow,\n    cloneNode = HTMLElementPrototype.cloneNode,\n    dispatchEvent = HTMLElementPrototype.dispatchEvent,\n    getAttribute = HTMLElementPrototype.getAttribute,\n    hasAttribute = HTMLElementPrototype.hasAttribute,\n    removeAttribute = HTMLElementPrototype.removeAttribute,\n    setAttribute = HTMLElementPrototype.setAttribute,\n  \n    // replaced later on\n    createElement = document.createElement,\n    patchedCreateElement = createElement,\n  \n    // shared observer for all attributes\n    attributesObserver = MutationObserver && {\n      attributes: true,\n      characterData: true,\n      attributeOldValue: true\n    },\n  \n    // useful to detect only if there's no MutationObserver\n    DOMAttrModified = MutationObserver || function(e) {\n      doesNotSupportDOMAttrModified = false;\n      documentElement.removeEventListener(\n        DOM_ATTR_MODIFIED,\n        DOMAttrModified\n      );\n    },\n  \n    // will both be used to make DOMNodeInserted asynchronous\n    asapQueue,\n    asapTimer = 0,\n  \n    // internal flags\n    V0 = REGISTER_ELEMENT in document,\n    setListener = true,\n    justSetup = false,\n    doesNotSupportDOMAttrModified = true,\n    dropDomContentLoaded = true,\n  \n    // needed for the innerHTML helper\n    notFromInnerHTMLHelper = true,\n  \n    // optionally defined later on\n    onSubtreeModified,\n    callDOMAttrModified,\n    getAttributesMirror,\n    observer,\n    observe,\n  \n    // based on setting prototype capability\n    // will check proto or the expando attribute\n    // in order to setup the node once\n    patchIfNotAlready,\n    patch\n  ;\n  \n  // only if needed\n  if (!V0) {\n  \n    if (sPO || hasProto) {\n        patchIfNotAlready = function (node, proto) {\n          if (!iPO.call(proto, node)) {\n            setupNode(node, proto);\n          }\n        };\n        patch = setupNode;\n    } else {\n        patchIfNotAlready = function (node, proto) {\n          if (!node[EXPANDO_UID]) {\n            node[EXPANDO_UID] = Object(true);\n            setupNode(node, proto);\n          }\n        };\n        patch = patchIfNotAlready;\n    }\n  \n    if (IE8) {\n      doesNotSupportDOMAttrModified = false;\n      (function (){\n        var\n          descriptor = gOPD(HTMLElementPrototype, ADD_EVENT_LISTENER),\n          addEventListener = descriptor.value,\n          patchedRemoveAttribute = function (name) {\n            var e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n            e.attrName = name;\n            e.prevValue = getAttribute.call(this, name);\n            e.newValue = null;\n            e[REMOVAL] = e.attrChange = 2;\n            removeAttribute.call(this, name);\n            dispatchEvent.call(this, e);\n          },\n          patchedSetAttribute = function (name, value) {\n            var\n              had = hasAttribute.call(this, name),\n              old = had && getAttribute.call(this, name),\n              e = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true})\n            ;\n            setAttribute.call(this, name, value);\n            e.attrName = name;\n            e.prevValue = had ? old : null;\n            e.newValue = value;\n            if (had) {\n              e[MODIFICATION] = e.attrChange = 1;\n            } else {\n              e[ADDITION] = e.attrChange = 0;\n            }\n            dispatchEvent.call(this, e);\n          },\n          onPropertyChange = function (e) {\n            // jshint eqnull:true\n            var\n              node = e.currentTarget,\n              superSecret = node[EXPANDO_UID],\n              propertyName = e.propertyName,\n              event\n            ;\n            if (superSecret.hasOwnProperty(propertyName)) {\n              superSecret = superSecret[propertyName];\n              event = new CustomEvent(DOM_ATTR_MODIFIED, {bubbles: true});\n              event.attrName = superSecret.name;\n              event.prevValue = superSecret.value || null;\n              event.newValue = (superSecret.value = node[propertyName] || null);\n              if (event.prevValue == null) {\n                event[ADDITION] = event.attrChange = 0;\n              } else {\n                event[MODIFICATION] = event.attrChange = 1;\n              }\n              dispatchEvent.call(node, event);\n            }\n          }\n        ;\n        descriptor.value = function (type, handler, capture) {\n          if (\n            type === DOM_ATTR_MODIFIED &&\n            this[ATTRIBUTE_CHANGED_CALLBACK] &&\n            this.setAttribute !== patchedSetAttribute\n          ) {\n            this[EXPANDO_UID] = {\n              className: {\n                name: 'class',\n                value: this.className\n              }\n            };\n            this.setAttribute = patchedSetAttribute;\n            this.removeAttribute = patchedRemoveAttribute;\n            addEventListener.call(this, 'propertychange', onPropertyChange);\n          }\n          addEventListener.call(this, type, handler, capture);\n        };\n        defineProperty(HTMLElementPrototype, ADD_EVENT_LISTENER, descriptor);\n      }());\n    } else if (!MutationObserver) {\n      documentElement[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, DOMAttrModified);\n      documentElement.setAttribute(EXPANDO_UID, 1);\n      documentElement.removeAttribute(EXPANDO_UID);\n      if (doesNotSupportDOMAttrModified) {\n        onSubtreeModified = function (e) {\n          var\n            node = this,\n            oldAttributes,\n            newAttributes,\n            key\n          ;\n          if (node === e.target) {\n            oldAttributes = node[EXPANDO_UID];\n            node[EXPANDO_UID] = (newAttributes = getAttributesMirror(node));\n            for (key in newAttributes) {\n              if (!(key in oldAttributes)) {\n                // attribute was added\n                return callDOMAttrModified(\n                  0,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  ADDITION\n                );\n              } else if (newAttributes[key] !== oldAttributes[key]) {\n                // attribute was changed\n                return callDOMAttrModified(\n                  1,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  MODIFICATION\n                );\n              }\n            }\n            // checking if it has been removed\n            for (key in oldAttributes) {\n              if (!(key in newAttributes)) {\n                // attribute removed\n                return callDOMAttrModified(\n                  2,\n                  node,\n                  key,\n                  oldAttributes[key],\n                  newAttributes[key],\n                  REMOVAL\n                );\n              }\n            }\n          }\n        };\n        callDOMAttrModified = function (\n          attrChange,\n          currentTarget,\n          attrName,\n          prevValue,\n          newValue,\n          action\n        ) {\n          var e = {\n            attrChange: attrChange,\n            currentTarget: currentTarget,\n            attrName: attrName,\n            prevValue: prevValue,\n            newValue: newValue\n          };\n          e[action] = attrChange;\n          onDOMAttrModified(e);\n        };\n        getAttributesMirror = function (node) {\n          for (var\n            attr, name,\n            result = {},\n            attributes = node.attributes,\n            i = 0, length = attributes.length;\n            i < length; i++\n          ) {\n            attr = attributes[i];\n            name = attr.name;\n            if (name !== 'setAttribute') {\n              result[name] = attr.value;\n            }\n          }\n          return result;\n        };\n      }\n    }\n  \n    // set as enumerable, writable and configurable\n    document[REGISTER_ELEMENT] = function registerElement(type, options) {\n      upperType = type.toUpperCase();\n      if (setListener) {\n        // only first time document.registerElement is used\n        // we need to set this listener\n        // setting it by default might slow down for no reason\n        setListener = false;\n        if (MutationObserver) {\n          observer = (function(attached, detached){\n            function checkEmAll(list, callback) {\n              for (var i = 0, length = list.length; i < length; callback(list[i++])){}\n            }\n            return new MutationObserver(function (records) {\n              for (var\n                current, node, newValue,\n                i = 0, length = records.length; i < length; i++\n              ) {\n                current = records[i];\n                if (current.type === 'childList') {\n                  checkEmAll(current.addedNodes, attached);\n                  checkEmAll(current.removedNodes, detached);\n                } else {\n                  node = current.target;\n                  if (notFromInnerHTMLHelper &&\n                      node[ATTRIBUTE_CHANGED_CALLBACK] &&\n                      current.attributeName !== 'style') {\n                    newValue = getAttribute.call(node, current.attributeName);\n                    if (newValue !== current.oldValue) {\n                      node[ATTRIBUTE_CHANGED_CALLBACK](\n                        current.attributeName,\n                        current.oldValue,\n                        newValue\n                      );\n                    }\n                  }\n                }\n              }\n            });\n          }(executeAction(ATTACHED), executeAction(DETACHED)));\n          observe = function (node) {\n            observer.observe(\n              node,\n              {\n                childList: true,\n                subtree: true\n              }\n            );\n            return node;\n          };\n          observe(document);\n          if (attachShadow) {\n            HTMLElementPrototype.attachShadow = function () {\n              return observe(attachShadow.apply(this, arguments));\n            };\n          }\n        } else {\n          asapQueue = [];\n          document[ADD_EVENT_LISTENER]('DOMNodeInserted', onDOMNode(ATTACHED));\n          document[ADD_EVENT_LISTENER]('DOMNodeRemoved', onDOMNode(DETACHED));\n        }\n  \n        document[ADD_EVENT_LISTENER](DOM_CONTENT_LOADED, onReadyStateChange);\n        document[ADD_EVENT_LISTENER]('readystatechange', onReadyStateChange);\n  \n        HTMLElementPrototype.cloneNode = function (deep) {\n          var\n            node = cloneNode.call(this, !!deep),\n            i = getTypeIndex(node)\n          ;\n          if (-1 < i) patch(node, protos[i]);\n          if (deep && query.length) loopAndSetup(node.querySelectorAll(query));\n          return node;\n        };\n      }\n  \n      if (justSetup) return (justSetup = false);\n  \n      if (-2 < (\n        indexOf.call(types, PREFIX_IS + upperType) +\n        indexOf.call(types, PREFIX_TAG + upperType)\n      )) {\n        throwTypeError(type);\n      }\n  \n      if (!validName.test(upperType) || -1 < indexOf.call(invalidNames, upperType)) {\n        throw new Error('The type ' + type + ' is invalid');\n      }\n  \n      var\n        constructor = function () {\n          return extending ?\n            document.createElement(nodeName, upperType) :\n            document.createElement(nodeName);\n        },\n        opt = options || OP,\n        extending = hOP.call(opt, EXTENDS),\n        nodeName = extending ? options[EXTENDS].toUpperCase() : upperType,\n        upperType,\n        i\n      ;\n  \n      if (extending && -1 < (\n        indexOf.call(types, PREFIX_TAG + nodeName)\n      )) {\n        throwTypeError(nodeName);\n      }\n  \n      i = types.push((extending ? PREFIX_IS : PREFIX_TAG) + upperType) - 1;\n  \n      query = query.concat(\n        query.length ? ',' : '',\n        extending ? nodeName + '[is=\"' + type.toLowerCase() + '\"]' : nodeName\n      );\n  \n      constructor.prototype = (\n        protos[i] = hOP.call(opt, 'prototype') ?\n          opt.prototype :\n          create(HTMLElementPrototype)\n      );\n  \n      if (query.length) loopAndVerify(\n        document.querySelectorAll(query),\n        ATTACHED\n      );\n  \n      return constructor;\n    };\n  \n    document.createElement = (patchedCreateElement = function (localName, typeExtension) {\n      var\n        is = getIs(typeExtension),\n        node = is ?\n          createElement.call(document, localName, secondArgument(is)) :\n          createElement.call(document, localName),\n        name = '' + localName,\n        i = indexOf.call(\n          types,\n          (is ? PREFIX_IS : PREFIX_TAG) +\n          (is || name).toUpperCase()\n        ),\n        setup = -1 < i\n      ;\n      if (is) {\n        node.setAttribute('is', is = is.toLowerCase());\n        if (setup) {\n          setup = isInQSA(name.toUpperCase(), is);\n        }\n      }\n      notFromInnerHTMLHelper = !document.createElement.innerHTMLHelper;\n      if (setup) patch(node, protos[i]);\n      return node;\n    });\n  \n  }\n  \n  function ASAP() {\n    var queue = asapQueue.splice(0, asapQueue.length);\n    asapTimer = 0;\n    while (queue.length) {\n      queue.shift().call(\n        null, queue.shift()\n      );\n    }\n  }\n  \n  function loopAndVerify(list, action) {\n    for (var i = 0, length = list.length; i < length; i++) {\n      verifyAndSetupAndAction(list[i], action);\n    }\n  }\n  \n  function loopAndSetup(list) {\n    for (var i = 0, length = list.length, node; i < length; i++) {\n      node = list[i];\n      patch(node, protos[getTypeIndex(node)]);\n    }\n  }\n  \n  function executeAction(action) {\n    return function (node) {\n      if (isValidNode(node)) {\n        verifyAndSetupAndAction(node, action);\n        if (query.length) loopAndVerify(\n          node.querySelectorAll(query),\n          action\n        );\n      }\n    };\n  }\n  \n  function getTypeIndex(target) {\n    var\n      is = getAttribute.call(target, 'is'),\n      nodeName = target.nodeName.toUpperCase(),\n      i = indexOf.call(\n        types,\n        is ?\n            PREFIX_IS + is.toUpperCase() :\n            PREFIX_TAG + nodeName\n      )\n    ;\n    return is && -1 < i && !isInQSA(nodeName, is) ? -1 : i;\n  }\n  \n  function isInQSA(name, type) {\n    return -1 < query.indexOf(name + '[is=\"' + type + '\"]');\n  }\n  \n  function onDOMAttrModified(e) {\n    var\n      node = e.currentTarget,\n      attrChange = e.attrChange,\n      attrName = e.attrName,\n      target = e.target,\n      addition = e[ADDITION] || 2,\n      removal = e[REMOVAL] || 3\n    ;\n    if (notFromInnerHTMLHelper &&\n        (!target || target === node) &&\n        node[ATTRIBUTE_CHANGED_CALLBACK] &&\n        attrName !== 'style' && (\n          e.prevValue !== e.newValue ||\n          // IE9, IE10, and Opera 12 gotcha\n          e.newValue === '' && (\n            attrChange === addition ||\n            attrChange === removal\n          )\n    )) {\n      node[ATTRIBUTE_CHANGED_CALLBACK](\n        attrName,\n        attrChange === addition ? null : e.prevValue,\n        attrChange === removal ? null : e.newValue\n      );\n    }\n  }\n  \n  function onDOMNode(action) {\n    var executor = executeAction(action);\n    return function (e) {\n      asapQueue.push(executor, e.target);\n      if (asapTimer) clearTimeout(asapTimer);\n      asapTimer = setTimeout(ASAP, 1);\n    };\n  }\n  \n  function onReadyStateChange(e) {\n    if (dropDomContentLoaded) {\n      dropDomContentLoaded = false;\n      e.currentTarget.removeEventListener(DOM_CONTENT_LOADED, onReadyStateChange);\n    }\n    if (query.length) loopAndVerify(\n      (e.target || document).querySelectorAll(query),\n      e.detail === DETACHED ? DETACHED : ATTACHED\n    );\n    if (IE8) purge();\n  }\n  \n  function patchedSetAttribute(name, value) {\n    // jshint validthis:true\n    var self = this;\n    setAttribute.call(self, name, value);\n    onSubtreeModified.call(self, {target: self});\n  }\n  \n  function setupNode(node, proto) {\n    setPrototype(node, proto);\n    if (observer) {\n      observer.observe(node, attributesObserver);\n    } else {\n      if (doesNotSupportDOMAttrModified) {\n        node.setAttribute = patchedSetAttribute;\n        node[EXPANDO_UID] = getAttributesMirror(node);\n        node[ADD_EVENT_LISTENER](DOM_SUBTREE_MODIFIED, onSubtreeModified);\n      }\n      node[ADD_EVENT_LISTENER](DOM_ATTR_MODIFIED, onDOMAttrModified);\n    }\n    if (node[CREATED_CALLBACK] && notFromInnerHTMLHelper) {\n      node.created = true;\n      node[CREATED_CALLBACK]();\n      node.created = false;\n    }\n  }\n  \n  function purge() {\n    for (var\n      node,\n      i = 0,\n      length = targets.length;\n      i < length; i++\n    ) {\n      node = targets[i];\n      if (!documentElement.contains(node)) {\n        length--;\n        targets.splice(i--, 1);\n        verifyAndSetupAndAction(node, DETACHED);\n      }\n    }\n  }\n  \n  function throwTypeError(type) {\n    throw new Error('A ' + type + ' type is already registered');\n  }\n  \n  function verifyAndSetupAndAction(node, action) {\n    var\n      fn,\n      i = getTypeIndex(node)\n    ;\n    if (-1 < i) {\n      patchIfNotAlready(node, protos[i]);\n      i = 0;\n      if (action === ATTACHED && !node[ATTACHED]) {\n        node[DETACHED] = false;\n        node[ATTACHED] = true;\n        i = 1;\n        if (IE8 && indexOf.call(targets, node) < 0) {\n          targets.push(node);\n        }\n      } else if (action === DETACHED && !node[DETACHED]) {\n        node[ATTACHED] = false;\n        node[DETACHED] = true;\n        i = 1;\n      }\n      if (i && (fn = node[action + CALLBACK])) fn.call(node);\n    }\n  }\n  \n  \n  \n  // V1 in da House!\n  function CustomElementRegistry() {}\n  \n  CustomElementRegistry.prototype = {\n    constructor: CustomElementRegistry,\n    // a workaround for the stubborn WebKit\n    define: usableCustomElements ?\n      function (name, Class, options) {\n        if (options) {\n          CERDefine(name, Class, options);\n        } else {\n          var NAME = name.toUpperCase();\n          constructors[NAME] = {\n            constructor: Class,\n            create: [NAME]\n          };\n          nodeNames.set(Class, NAME);\n          customElements.define(name, Class);\n        }\n      } :\n      CERDefine,\n    get: usableCustomElements ?\n      function (name) {\n        return customElements.get(name) || get(name);\n      } :\n      get,\n    whenDefined: usableCustomElements ?\n      function (name) {\n        return Promise.race([\n          customElements.whenDefined(name),\n          whenDefined(name)\n        ]);\n      } :\n      whenDefined\n  };\n  \n  function CERDefine(name, Class, options) {\n    var\n      is = options && options[EXTENDS] || '',\n      CProto = Class.prototype,\n      proto = create(CProto),\n      attributes = Class.observedAttributes || empty,\n      definition = {prototype: proto}\n    ;\n    // TODO: is this needed at all since it's inherited?\n    // defineProperty(proto, 'constructor', {value: Class});\n    safeProperty(proto, CREATED_CALLBACK, {\n        value: function () {\n          if (justCreated) justCreated = false;\n          else if (!this[DRECEV1]) {\n            this[DRECEV1] = true;\n            new Class(this);\n            if (CProto[CREATED_CALLBACK])\n              CProto[CREATED_CALLBACK].call(this);\n            var info = constructors[nodeNames.get(Class)];\n            if (!usableCustomElements || info.create.length > 1) {\n              notifyAttributes(this);\n            }\n          }\n      }\n    });\n    safeProperty(proto, ATTRIBUTE_CHANGED_CALLBACK, {\n      value: function (name) {\n        if (-1 < indexOf.call(attributes, name))\n          CProto[ATTRIBUTE_CHANGED_CALLBACK].apply(this, arguments);\n      }\n    });\n    if (CProto[CONNECTED_CALLBACK]) {\n      safeProperty(proto, ATTACHED_CALLBACK, {\n        value: CProto[CONNECTED_CALLBACK]\n      });\n    }\n    if (CProto[DISCONNECTED_CALLBACK]) {\n      safeProperty(proto, DETACHED_CALLBACK, {\n        value: CProto[DISCONNECTED_CALLBACK]\n      });\n    }\n    if (is) definition[EXTENDS] = is;\n    name = name.toUpperCase();\n    constructors[name] = {\n      constructor: Class,\n      create: is ? [is, secondArgument(name)] : [name]\n    };\n    nodeNames.set(Class, name);\n    document[REGISTER_ELEMENT](name.toLowerCase(), definition);\n    whenDefined(name);\n    waitingList[name].r();\n  }\n  \n  function get(name) {\n    var info = constructors[name.toUpperCase()];\n    return info && info.constructor;\n  }\n  \n  function getIs(options) {\n    return typeof options === 'string' ?\n        options : (options && options.is || '');\n  }\n  \n  function notifyAttributes(self) {\n    var\n      callback = self[ATTRIBUTE_CHANGED_CALLBACK],\n      attributes = callback ? self.attributes : empty,\n      i = attributes.length,\n      attribute\n    ;\n    while (i--) {\n      attribute =  attributes[i]; // || attributes.item(i);\n      callback.call(\n        self,\n        attribute.name || attribute.nodeName,\n        null,\n        attribute.value || attribute.nodeValue\n      );\n    }\n  }\n  \n  function whenDefined(name) {\n    name = name.toUpperCase();\n    if (!(name in waitingList)) {\n      waitingList[name] = {};\n      waitingList[name].p = new Promise(function (resolve) {\n        waitingList[name].r = resolve;\n      });\n    }\n    return waitingList[name].p;\n  }\n  \n  function polyfillV1() {\n    if (customElements) delete window.customElements;\n    defineProperty(window, 'customElements', {\n      configurable: true,\n      value: new CustomElementRegistry()\n    });\n    defineProperty(window, 'CustomElementRegistry', {\n      configurable: true,\n      value: CustomElementRegistry\n    });\n    for (var\n      patchClass = function (name) {\n        var Class = window[name];\n        if (Class) {\n          window[name] = function CustomElementsV1(self) {\n            var info, isNative;\n            if (!self) self = this;\n            if (!self[DRECEV1]) {\n              justCreated = true;\n              info = constructors[nodeNames.get(self.constructor)];\n              isNative = usableCustomElements && info.create.length === 1;\n              self = isNative ?\n                Reflect.construct(Class, empty, info.constructor) :\n                document.createElement.apply(document, info.create);\n              self[DRECEV1] = true;\n              justCreated = false;\n              if (!isNative) notifyAttributes(self);\n            }\n            return self;\n          };\n          window[name].prototype = Class.prototype;\n          try {\n            Class.prototype.constructor = window[name];\n          } catch(WebKit) {\n            fixGetClass = true;\n            defineProperty(Class, DRECEV1, {value: window[name]});\n          }\n        }\n      },\n      Classes = htmlClass.get(/^HTML[A-Z]*[a-z]/),\n      i = Classes.length;\n      i--;\n      patchClass(Classes[i])\n    ) {}\n    (document.createElement = function (name, options) {\n      var is = getIs(options);\n      return is ?\n        patchedCreateElement.call(this, name, secondArgument(is)) :\n        patchedCreateElement.call(this, name);\n    });\n    if (!V0) {\n      justSetup = true;\n      document[REGISTER_ELEMENT]('');\n    }\n  }\n  \n  // if customElements is not there at all\n  if (!customElements || polyfill === 'force') polyfillV1();\n  else {\n    // if available test extends work as expected\n    try {\n      (function (DRE, options, name) {\n        options[EXTENDS] = 'a';\n        DRE.prototype = create(HTMLAnchorElement.prototype);\n        DRE.prototype.constructor = DRE;\n        window.customElements.define(name, DRE, options);\n        if (\n          getAttribute.call(document.createElement('a', {is: name}), 'is') !== name ||\n          (usableCustomElements && getAttribute.call(new DRE(), 'is') !== name)\n        ) {\n          throw options;\n        }\n      }(\n        function DRE() {\n          return Reflect.construct(HTMLAnchorElement, [], DRE);\n        },\n        {},\n        'document-register-element-a'\n      ));\n    } catch(o_O) {\n      // or force the polyfill if not\n      // and keep internal original reference\n      polyfillV1();\n    }\n  }\n  \n  try {\n    createElement.call(document, 'a', 'a');\n  } catch(FireFox) {\n    secondArgument = function (is) {\n      return {is: is.toLowerCase()};\n    };\n  }\n  \n}\n\nexports.installCustomElements = installCustomElements;\n\n","'use strict';\n\n/**\n * Constructs a ES6/Promises A+ Promise instance.\n *\n * @constructor\n * @param {function(function(*=), function (*=))} resolver\n */\nfunction Promise(resolver) {\n  if (!(this instanceof Promise)) {\n    throw new TypeError('Constructor Promise requires `new`');\n  }\n  if (!isFunction(resolver)) {\n    throw new TypeError('Must pass resolver function');\n  }\n\n  /**\n   * @type {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise}\n   * @private\n   */\n  this._state = PendingPromise;\n\n  /**\n   * @type {*}\n   * @private\n   */\n  this._value = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this._isChainEnd = true;\n\n  doResolve(\n    this,\n    adopter(this, FulfilledPromise),\n    adopter(this, RejectedPromise),\n    { then: resolver }\n  );\n}\n\n/****************************\n  Public Instance Methods\n ****************************/\n\n/**\n * Creates a new promise instance that will receive the result of this promise\n * as inputs to the onFulfilled or onRejected callbacks.\n *\n * @param {function(*)} onFulfilled\n * @param {function(*)} onRejected\n */\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  onFulfilled = isFunction(onFulfilled) ? onFulfilled : void 0;\n  onRejected = isFunction(onRejected) ? onRejected : void 0;\n\n  if (onFulfilled || onRejected) {\n    this._isChainEnd = false;\n  }\n\n  return this._state(\n    this._value,\n    onFulfilled,\n    onRejected\n  );\n};\n\n/**\n * Creates a new promise that will handle the rejected state of this promise.\n *\n * @param {function(*)} onRejected\n * @returns {!Promise}\n */\nPromise.prototype.catch = function(onRejected) {\n  return this.then(void 0, onRejected);\n};\n\n/****************************\n  Public Static Methods\n ****************************/\n\n/**\n * Creates a fulfilled Promise of value. If value is itself a then-able,\n * resolves with the then-able's value.\n *\n * @this {!Promise}\n * @param {*=} value\n * @returns {!Promise}\n */\nPromise.resolve = function(value) {\n  var Constructor = this;\n  var promise;\n\n  if (isObject(value) && value instanceof this) {\n    promise = value;\n  } else {\n    promise = new Constructor(function(resolve) {\n      resolve(value);\n    });\n  }\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a rejected Promise of reason.\n *\n * @this {!Promise}\n * @param {*=} reason\n * @returns {!Promise}\n */\nPromise.reject = function(reason) {\n  var Constructor = this;\n  var promise = new Constructor(function(_, reject) {\n    reject(reason);\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve with an array of the values of the\n * passed in promises. If any promise rejects, the returned promise will\n * reject.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.all = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    var length = promises.length;\n    var values = new Array(length);\n\n    if (length === 0) {\n      return resolve(values);\n    }\n\n    each(promises, function(promise, index) {\n      Constructor.resolve(promise).then(function(value) {\n        values[index] = value;\n        if (--length === 0) {\n          resolve(values);\n        }\n      }, reject);\n    });\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\n/**\n * Creates a Promise that will resolve or reject based on the first\n * resolved or rejected promise.\n *\n * @this {!Promise}\n * @param {!Array<Promise|*>} promises\n * @returns {!Promise}\n */\nPromise.race = function(promises) {\n  var Constructor = this;\n  var promise = new Constructor(function(resolve, reject) {\n    for (var i = 0; i < promises.length; i++) {\n      Constructor.resolve(promises[i]).then(resolve, reject);\n    }\n  });\n\n  return /** @type {!Promise} */(promise);\n};\n\nvar onPossiblyUnhandledRejection = function(reason, promise) {\n  throw reason;\n};\n\n/**\n * An internal use static function.\n */\nPromise._overrideUnhandledExceptionHandler = function(handler) {\n  onPossiblyUnhandledRejection = handler;\n};\n\n/****************************\n  Private functions\n ****************************/\n\n/**\n * The Fulfilled Promise state. Calls onFulfilled with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onFulfilled, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} value The current promise's resolved value.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} unused\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Fulfilled state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction FulfilledPromise(value, onFulfilled, unused, deferred) {\n  if (!onFulfilled) {\n    deferredAdopt(deferred, FulfilledPromise, value);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onFulfilled, value));\n  return deferred.promise;\n}\n\n/**\n * The Rejected Promise state. Calls onRejected with the resolved value of\n * this promise, creating a new promise.\n *\n * If there is no onRejected, returns the current promise to avoid an promise\n * instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} reason The current promise's rejection reason.\n * @param {function(*=)=} unused\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Rejected state from the\n *     Pending state.\n * @returns {!Promise}\n */\nfunction RejectedPromise(reason, unused, onRejected, deferred) {\n  if (!onRejected) {\n    deferredAdopt(deferred, RejectedPromise, reason);\n    return this;\n  }\n  if (!deferred) {\n    deferred = new Deferred(this.constructor);\n  }\n  defer(tryCatchDeferred(deferred, onRejected, reason));\n  return deferred.promise;\n}\n\n/**\n * The Pending Promise state. Eventually calls onFulfilled once the promise has\n * resolved, or onRejected once the promise rejects.\n *\n * If there is no onFulfilled and no onRejected, returns the current promise to\n * avoid an promise instance.\n *\n * @this {!Promise} The current promise\n * @param {*=} queue The current promise's pending promises queue.\n * @param {function(*=)=} onFulfilled\n * @param {function(*=)=} onRejected\n * @param {Deferred} deferred A deferred object that holds a promise and its\n *     resolve and reject functions. It IS NOT passed when called from\n *     Promise#then to save an object instance (since we may return the current\n *     promise). It IS passed in when adopting the Pending state from the\n *     Pending state of another promise.\n * @returns {!Promise}\n */\nfunction PendingPromise(queue, onFulfilled, onRejected, deferred) {\n  if (!deferred) {\n    if (!onFulfilled && !onRejected) { return this; }\n    deferred = new Deferred(this.constructor);\n  }\n  queue.push({\n    deferred: deferred,\n    onFulfilled: onFulfilled || deferred.resolve,\n    onRejected: onRejected || deferred.reject\n  });\n  return deferred.promise;\n}\n\n/**\n * Constructs a deferred instance that holds a promise and its resolve and\n * reject functions.\n *\n * @constructor\n */\nfunction Deferred(Promise) {\n  var deferred = this;\n  /** @type {!Promise} */\n  this.promise = new Promise(function(resolve, reject) {\n    /** @type {function(*=)} */\n    deferred.resolve = resolve;\n\n    /** @type {function(*=)} */\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n/**\n * Transitions the state of promise to another state. This is only ever called\n * on with a promise that is currently in the Pending state.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction adopt(promise, state, value, adoptee) {\n  var queue = promise._value;\n  promise._state = state;\n  promise._value = value;\n\n  if (adoptee && state === PendingPromise) {\n    adoptee._state(value, void 0, void 0, {\n      promise: promise,\n      resolve: void 0,\n      reject: void 0\n    });\n  }\n\n  for (var i = 0; i < queue.length; i++) {\n    var next = queue[i];\n    promise._state(\n      value,\n      next.onFulfilled,\n      next.onRejected,\n      next.deferred\n    );\n  }\n  queue.length = 0;\n\n  // Determine if this rejected promise will be \"handled\".\n  if (state === RejectedPromise && promise._isChainEnd) {\n    setTimeout(function() {\n      if (promise._isChainEnd) {\n        onPossiblyUnhandledRejection(value, promise);\n      }\n    }, 0);\n  }\n}\n\n/**\n * A partial application of adopt.\n *\n * @param {!Promise} promise\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @returns {function(*=)}\n */\nfunction adopter(promise, state) {\n  return function(value) {\n    adopt(promise, state, value);\n  };\n}\n\n/**\n * Updates a deferred promises state. Necessary for updating an adopting\n * promise's state when the adoptee resolves.\n *\n * @param {?Deferred} deferred\n * @param {function(this:Promise,*=,function(*=),function(*=),Deferred):!Promise} state\n * @param {*=} value\n */\nfunction deferredAdopt(deferred, state, value) {\n  if (deferred) {\n    var promise = deferred.promise;\n    promise._state = state;\n    promise._value = value;\n  }\n}\n\n/**\n * A no-op function to prevent double resolving.\n */\nfunction noop() {}\n\n/**\n * Tests if fn is a Function\n *\n * @param {*} fn\n * @returns {boolean}\n */\nfunction isFunction(fn) {\n  return typeof fn === 'function';\n}\n\n/**\n * Tests if fn is an Object\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Iterates over each element of an array, calling the iterator with the\n * element and its index.\n *\n * @param {!Array} collection\n * @param {function(*=,number)} iterator\n */\nfunction each(collection, iterator) {\n  for (var i = 0; i < collection.length; i++) {\n    iterator(collection[i], i);\n  }\n}\n\n/**\n * Creates a function that will attempt to resolve the deferred with the return\n * of fn. If any error is raised, rejects instead.\n *\n * @param {!Deferred} deferred\n * @param {function(*=)} fn\n * @param {*} arg\n * @returns {function()}\n */\nfunction tryCatchDeferred(deferred, fn, arg) {\n  var promise = deferred.promise;\n  var resolve = deferred.resolve;\n  var reject = deferred.reject;\n  return function() {\n    try {\n      var result = fn(arg);\n      doResolve(promise, resolve, reject, result, result);\n    } catch (e) {\n      reject(e);\n    }\n  };\n}\n\n/**\n * Queues and executes multiple deferred functions on another run loop.\n */\nvar defer = (function() {\n  /**\n   * Defers fn to another run loop.\n   */\n  var scheduleFlush;\n  if (typeof window !== 'undefined' && window.postMessage) {\n    window.addEventListener('message', flush);\n    scheduleFlush = function() {\n      window.postMessage('macro-task', '*');\n    };\n  } else {\n    scheduleFlush = function() {\n      setTimeout(flush, 0);\n    };\n  }\n\n  var queue = new Array(16);\n  var length = 0;\n\n  function flush() {\n    for (var i = 0; i < length; i++) {\n      var fn = queue[i];\n      queue[i] = null;\n      fn();\n    }\n    length = 0;\n  }\n\n  /**\n   * @param {function()} fn\n   */\n  function defer(fn) {\n    if (length === 0) { scheduleFlush(); }\n    queue[length++] = fn;\n  }\n\n  return defer;\n})();\n\n/**\n * The Promise resolution procedure.\n * https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n *\n * @param {!Promise} promise\n * @param {function(*=)} resolve\n * @param {function(*=)} reject\n * @param {*} value\n * @param {*=} context\n */\nfunction doResolve(promise, resolve, reject, value, context) {\n  var _reject = reject;\n  var then;\n  var _resolve;\n  try {\n    if (value === promise) {\n      throw new TypeError('Cannot fulfill promise with itself');\n    }\n    var isObj = isObject(value);\n    if (isObj && value instanceof promise.constructor) {\n      adopt(promise, value._state, value._value, value);\n    } else if (isObj && (then = value.then) && isFunction(then)) {\n      _resolve = function(value) {\n        _resolve = _reject = noop;\n        doResolve(promise, resolve, reject, value, value);\n      };\n      _reject = function(reason) {\n        _resolve = _reject = noop;\n        reject(reason);\n      };\n      then.call(\n        context,\n        function(value) { _resolve(value); },\n        function(reason) { _reject(reason); }\n      );\n    } else {\n      resolve(value);\n    }\n  } catch (e) {\n    _reject(e);\n  }\n}\n\nmodule.exports = Promise;\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {internalListenImplementation} from './event-helper-listen';\nimport {parseJson} from './json';\n\n\n/** @const */\nconst AMP_MESSAGE_PREFIX = 'amp-';\nexport const CONSTANTS = {\n  responseTypeSuffix: '-result',\n  messageIdFieldName: 'messageId',\n  payloadFieldName: 'payload',\n  contentFieldName: 'content',\n};\n\n/** @enum {string} */\nexport const MessageType = {\n  // For amp-ad\n  SEND_EMBED_STATE: 'send-embed-state',\n  EMBED_STATE: 'embed-state',\n  SEND_EMBED_CONTEXT: 'send-embed-context',\n  EMBED_CONTEXT: 'embed-context',\n  SEND_INTERSECTIONS: 'send-intersections',\n  INTERSECTION: 'intersection',\n  EMBED_SIZE: 'embed-size',\n  EMBED_SIZE_CHANGED: 'embed-size-changed',\n  EMBED_SIZE_DENIED: 'embed-size-denied',\n  NO_CONTENT: 'no-content',\n  GET_HTML: 'get-html',\n  GET_CONSENT_STATE: 'get-consent-state',\n\n  // For the frame to be placed in full overlay mode for lightboxes\n  FULL_OVERLAY_FRAME: 'full-overlay-frame',\n  FULL_OVERLAY_FRAME_RESPONSE: 'full-overlay-frame-response',\n  CANCEL_FULL_OVERLAY_FRAME: 'cancel-full-overlay-frame',\n  CANCEL_FULL_OVERLAY_FRAME_RESPONSE: 'cancel-full-overlay-frame-response',\n\n  // For amp-inabox\n  SEND_POSITIONS: 'send-positions',\n  POSITION: 'position',\n\n  // For amp-analytics' iframe-transport\n  SEND_IFRAME_TRANSPORT_EVENTS: 'send-iframe-transport-events',\n  IFRAME_TRANSPORT_EVENTS: 'iframe-transport-events',\n  IFRAME_TRANSPORT_RESPONSE: 'iframe-transport-response',\n\n  // For user-error-in-iframe\n  USER_ERROR_IN_IFRAME: 'user-error-in-iframe',\n};\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n\n/**\n * Serialize an AMP post message. Output looks like:\n * 'amp-011481323099490{\"type\":\"position\",\"sentinel\":\"12345\",\"foo\":\"bar\"}'\n * @param {string} type\n * @param {string} sentinel\n * @param {JsonObject=} data\n * @param {?string=} rtvVersion\n * @return {string}\n */\nexport function serializeMessage(type, sentinel, data = dict(),\n  rtvVersion = null) {\n  // TODO: consider wrap the data in a \"data\" field. { type, sentinal, data }\n  const message = data;\n  message['type'] = type;\n  message['sentinel'] = sentinel;\n  return AMP_MESSAGE_PREFIX + (rtvVersion || '') + JSON.stringify(message);\n}\n\n\n/**\n * Deserialize an AMP post message.\n * Returns null if it's not valid AMP message format.\n *\n * @param {*} message\n * @return {?JsonObject|undefined}\n */\nexport function deserializeMessage(message) {\n  if (!isAmpMessage(message)) {\n    return null;\n  }\n  const startPos = message.indexOf('{');\n  dev().assert(startPos != -1, 'JSON missing in %s', message);\n  try {\n    return parseJson(message.substr(startPos));\n  } catch (e) {\n    dev().error('MESSAGING', 'Failed to parse message: ' + message, e);\n    return null;\n  }\n}\n\n\n/**\n *  Returns true if message looks like it is an AMP postMessage\n *  @param {*} message\n *  @return {boolean}\n */\nexport function isAmpMessage(message) {\n  return (typeof message == 'string' &&\n      message.indexOf(AMP_MESSAGE_PREFIX) == 0 &&\n      message.indexOf('{') != -1);\n}\n\n/** @typedef {{creativeId: string, message: string}} */\nexport let IframeTransportEvent;\n// An event, and the transport ID of the amp-analytics tags that\n// generated it. For instance if the creative with transport\n// ID 2 sends \"hi\", then an IframeTransportEvent would look like:\n// { creativeId: \"2\", message: \"hi\" }\n// If the creative with transport ID 2 sent that, and also sent \"hello\",\n// and the creative with transport ID 3 sends \"goodbye\" then an *array* of 3\n// AmpAnalyticsIframeTransportEvent would be sent to the 3p frame like so:\n// [\n//   { creativeId: \"2\", message: \"hi\" }, // An AmpAnalyticsIframeTransportEvent\n//   { creativeId: \"2\", message: \"hello\" }, // Another\n//   { creativeId: \"3\", message: \"goodbye\" } // And another\n// ]\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assertHttpsUrl, parseUrlDeprecated} from './url';\nimport {dev, user} from './log';\nimport {dict} from './utils/object';\nimport {getContextMetadata} from '../src/iframe-attributes';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\nimport {setStyle} from './style';\nimport {startsWith} from './string';\nimport {tryParseJson} from './json';\nimport {urls} from './config';\n\n/** @type {!Object<string,number>} Number of 3p frames on the for that type. */\nlet count = {};\n\n/** @type {string} */\nlet overrideBootstrapBaseUrl;\n\n/** @const {string} */\nconst TAG = '3p-frame';\n\n/**\n * Produces the attributes for the ad template.\n * @param {!Window} parentWindow\n * @param {!AmpElement} element\n * @param {string=} opt_type\n * @param {Object=} opt_context\n * @return {!JsonObject} Contains\n *     - type, width, height, src attributes of <amp-ad> tag. These have\n *       precedence over the data- attributes.\n *     - data-* attributes of the <amp-ad> tag with the \"data-\" removed.\n *     - A _context object for internal use.\n */\nfunction getFrameAttributes(parentWindow, element, opt_type, opt_context) {\n  const type = opt_type || element.getAttribute('type');\n  user().assert(type, 'Attribute type required for <amp-ad>: %s', element);\n  const sentinel = generateSentinel(parentWindow);\n  let attributes = dict();\n  // Do these first, as the other attributes have precedence.\n  addDataAndJsonAttributes_(element, attributes);\n  attributes = getContextMetadata(parentWindow, element, sentinel,\n      attributes);\n  attributes['type'] = type;\n  Object.assign(attributes['_context'], opt_context);\n  return attributes;\n}\n\n/**\n * Creates the iframe for the embed. Applies correct size and passes the embed\n * attributes to the frame via JSON inside the fragment.\n * @param {!Window} parentWindow\n * @param {!AmpElement} parentElement\n * @param {string=} opt_type\n * @param {Object=} opt_context\n * @param {!{\n *   disallowCustom,\n *   allowFullscreen,\n * }=} opt_options Options for the created iframe.\n * @return {!Element} The iframe.\n */\nexport function getIframe(\n  parentWindow, parentElement, opt_type, opt_context,\n  {disallowCustom, allowFullscreen} = {}) {\n  // Check that the parentElement is already in DOM. This code uses a new and\n  // fast `isConnected` API and thus only used when it's available.\n  dev().assert(\n      parentElement['isConnected'] === undefined ||\n      parentElement['isConnected'] === true,\n      'Parent element must be in DOM');\n  const attributes =\n      getFrameAttributes(parentWindow, parentElement, opt_type, opt_context);\n  const iframe = parentWindow.document.createElement('iframe');\n\n  if (!count[attributes['type']]) {\n    count[attributes['type']] = 0;\n  }\n  count[attributes['type']] += 1;\n\n  const baseUrl = getBootstrapBaseUrl(\n      parentWindow, undefined, opt_type, disallowCustom);\n  const host = parseUrlDeprecated(baseUrl).hostname;\n  // This name attribute may be overwritten if this frame is chosen to\n  // be the master frame. That is ok, as we will read the name off\n  // for our uses before that would occur.\n  // @see https://github.com/ampproject/amphtml/blob/master/3p/integration.js\n  const name = JSON.stringify(dict({\n    'host': host,\n    'type': attributes['type'],\n    // https://github.com/ampproject/amphtml/pull/2955\n    'count': count[attributes['type']],\n    'attributes': attributes,\n  }));\n\n  iframe.src = baseUrl;\n  iframe.ampLocation = parseUrlDeprecated(baseUrl);\n  iframe.name = name;\n  // Add the check before assigning to prevent IE throw Invalid argument error\n  if (attributes['width']) {\n    iframe.width = attributes['width'];\n  }\n  if (attributes['height']) {\n    iframe.height = attributes['height'];\n  }\n  if (attributes['title']) {\n    iframe.title = attributes['title'];\n  }\n  if (allowFullscreen) {\n    iframe.setAttribute('allowfullscreen', 'true');\n  }\n  iframe.setAttribute('scrolling', 'no');\n  setStyle(iframe, 'border', 'none');\n  /** @this {!Element} */\n  iframe.onload = function() {\n    // Chrome does not reflect the iframe readystate.\n    this.readyState = 'complete';\n  };\n  if (isExperimentOn(parentWindow, 'no-sync-xhr-in-ads')) {\n    // Block synchronous XHR in ad. These are very rare, but super bad for UX\n    // as they block the UI thread for the arbitrary amount of time until the\n    // request completes.\n    iframe.setAttribute('allow', 'sync-xhr \\'none\\';');\n  }\n  iframe.setAttribute('data-amp-3p-sentinel',\n      attributes['_context']['sentinel']);\n  return iframe;\n}\n\n/**\n * Copies data- attributes from the element into the attributes object.\n * Removes the data- from the name and capitalizes after -. If there\n * is an attribute called json, parses the JSON and adds it to the\n * attributes.\n * @param {!Element} element\n * @param {!JsonObject} attributes The destination.\n * visibleForTesting\n */\nexport function addDataAndJsonAttributes_(element, attributes) {\n  const {dataset} = element;\n  for (const name in dataset) {\n    // data-vars- is reserved for amp-analytics\n    // see https://github.com/ampproject/amphtml/blob/master/extensions/amp-analytics/analytics-vars.md#variables-as-data-attribute\n    if (!startsWith(name, 'vars')) {\n      attributes[name] = dataset[name];\n    }\n  }\n  const json = element.getAttribute('json');\n  if (json) {\n    const obj = tryParseJson(json);\n    if (obj === undefined) {\n      throw user().createError(\n          'Error parsing JSON in json attribute in element %s',\n          element);\n    }\n    for (const key in obj) {\n      attributes[key] = obj[key];\n    }\n  }\n}\n\n/**\n * Preloads URLs related to the bootstrap iframe.\n * @param {!Window} win\n * @param {!./preconnect.Preconnect} preconnect\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n */\nexport function preloadBootstrap(\n  win, preconnect, opt_type, opt_disallowCustom) {\n  const url = getBootstrapBaseUrl(win, undefined, opt_type, opt_disallowCustom);\n  preconnect.preload(url, 'document');\n\n  // While the URL may point to a custom domain, this URL will always be\n  // fetched by it.\n  const scriptUrl = getMode().localDev\n    ? getAdsLocalhost(win) + '/dist.3p/current/integration.js'\n    : `${urls.thirdParty}/$internalRuntimeVersion$/f.js`;\n  preconnect.preload(scriptUrl, 'script');\n}\n\n/**\n * Returns the base URL for 3p bootstrap iframes.\n * @param {!Window} parentWindow\n * @param {boolean=} opt_strictForUnitTest\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n * @return {string}\n * @visibleForTesting\n */\nexport function getBootstrapBaseUrl(\n  parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) {\n  // The value is cached in a global variable called `bootstrapBaseUrl`;\n  const {bootstrapBaseUrl} = parentWindow;\n  if (bootstrapBaseUrl) {\n    return bootstrapBaseUrl;\n  }\n  return parentWindow.bootstrapBaseUrl = getCustomBootstrapBaseUrl(\n      parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) ||\n      getDefaultBootstrapBaseUrl(parentWindow);\n}\n\n/**\n * @param {string} url\n */\nexport function setDefaultBootstrapBaseUrlForTesting(url) {\n  overrideBootstrapBaseUrl = url;\n}\n\n/**\n * @param {*} win\n */\nexport function resetBootstrapBaseUrlForTesting(win) {\n  win.bootstrapBaseUrl = undefined;\n  win.defaultBootstrapSubDomain = undefined;\n}\n\n/**\n * Returns the default base URL for 3p bootstrap iframes.\n * @param {!Window} parentWindow\n * @param {string=} opt_srcFileBasename\n * @return {string}\n */\nexport function getDefaultBootstrapBaseUrl(parentWindow, opt_srcFileBasename) {\n  const srcFileBasename = opt_srcFileBasename || 'frame';\n  if (getMode().localDev || getMode().test) {\n    return overrideBootstrapBaseUrl || getAdsLocalhost(parentWindow)\n          + '/dist.3p/'\n          + (getMode().minified ? `$internalRuntimeVersion$/${srcFileBasename}`\n            : `current/${srcFileBasename}.max`)\n          + '.html';\n  }\n  // Ensure same sub-domain is used despite potentially different file.\n  parentWindow.defaultBootstrapSubDomain =\n      parentWindow.defaultBootstrapSubDomain || getSubDomain(parentWindow);\n  return 'https://' + parentWindow.defaultBootstrapSubDomain +\n      `.${urls.thirdPartyFrameHost}/$internalRuntimeVersion$/` +\n      `${srcFileBasename}.html`;\n}\n\n/**\n * @param {!Window} win\n * @return {string}\n */\nfunction getAdsLocalhost(win) {\n  let adsUrl = urls.thirdParty; // local dev with a non-localhost server\n  if (adsUrl.indexOf('ampproject.net') > -1) {\n    adsUrl = 'http://ads.localhost'; // local dev with a localhost server\n  }\n  return adsUrl + ':' + (win.location.port || win.parent.location.port);\n}\n\n/**\n * Sub domain on which the 3p iframe will be hosted.\n * Because we only calculate the URL once per page, this function is only\n * called once and hence all frames on a page use the same URL.\n * @param {!Window} win\n * @return {string}\n * @visibleForTesting\n */\nexport function getSubDomain(win) {\n  return 'd-' + getRandom(win);\n}\n\n/**\n * Generates a random non-negative integer.\n * @param {!Window} win\n * @return {string}\n */\nexport function getRandom(win) {\n  let rand;\n  if (win.crypto && win.crypto.getRandomValues) {\n    // By default use 2 32 bit integers.\n    const uint32array = new Uint32Array(2);\n    win.crypto.getRandomValues(uint32array);\n    rand = String(uint32array[0]) + uint32array[1];\n  } else {\n    // Fall back to Math.random.\n    rand = String(win.Math.random()).substr(2) + '0';\n  }\n  return rand;\n}\n\n/**\n * Returns the custom base URL for 3p bootstrap iframes if it exists.\n * Otherwise null.\n * @param {!Window} parentWindow\n * @param {boolean=} opt_strictForUnitTest\n * @param {string=} opt_type\n * @param {boolean=} opt_disallowCustom whether 3p url should not use meta tag.\n * @return {?string}\n */\nfunction getCustomBootstrapBaseUrl(\n  parentWindow, opt_strictForUnitTest, opt_type, opt_disallowCustom) {\n  const meta = parentWindow.document\n      .querySelector('meta[name=\"amp-3p-iframe-src\"]');\n  if (!meta) {\n    return null;\n  }\n  if (opt_disallowCustom) {\n    user().error(TAG, `3p iframe url disabled for ${opt_type || 'unknown'}`);\n    return null;\n  }\n  const url = assertHttpsUrl(meta.getAttribute('content'), meta);\n  user().assert(url.indexOf('?') == -1,\n      '3p iframe url must not include query string %s in element %s.',\n      url, meta);\n  // This is not a security primitive, we just don't want this to happen in\n  // practice. People could still redirect to the same origin, but they cannot\n  // redirect to the proxy origin which is the important one.\n  const parsed = parseUrlDeprecated(url);\n  user().assert((parsed.hostname == 'localhost' && !opt_strictForUnitTest) ||\n      parsed.origin != parseUrlDeprecated(parentWindow.location.href).origin,\n  '3p iframe url must not be on the same origin as the current document ' +\n      '%s (%s) in element %s. See https://github.com/ampproject/amphtml' +\n      '/blob/master/spec/amp-iframe-origin-policy.md for details.', url,\n  parsed.origin, meta);\n  return url + '?$internalRuntimeVersion$';\n}\n\n/**\n * Returns a randomized sentinel value for 3p iframes.\n * The format is \"%d-%d\" with the first value being the depth of current\n * window in the window hierarchy and the second a random integer.\n * @param {!Window} parentWindow\n * @return {string}\n * @visibleForTesting\n */\nexport function generateSentinel(parentWindow) {\n  let windowDepth = 0;\n  for (let win = parentWindow; win && win != win.parent; win = win.parent) {\n    windowDepth++;\n  }\n  return String(windowDepth) + '-' + getRandom(parentWindow);\n}\n\n/**\n * Resets the count of each 3p frame type\n * @visibleForTesting\n */\nexport function resetCountForTesting() {\n  count = {};\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {adConfig} from '../ads/_config';\nimport {dev} from '../src/log';\n\n/**\n * @param {AMP.BaseElement} adElement\n * @return {!Promise<string|undefined>} A promise for a CID or undefined if\n *     - the ad network does not request one or\n *     - `amp-analytics` which provides the CID service was not installed.\n */\nexport function getAdCid(adElement) {\n  const config = adConfig[adElement.element.getAttribute('type')];\n  if (!config || !config.clientIdScope) {\n    return Promise.resolve();\n  }\n  return getOrCreateAdCid(adElement.getAmpDoc(), config.clientIdScope,\n      config.clientIdCookieName);\n}\n\n/**\n * @param {!./service/ampdoc-impl.AmpDoc} ampDoc\n * @param {string} clientIdScope\n * @param {string=} opt_clientIdCookieName\n * @param {number=} opt_timeout\n * @return {!Promise<string|undefined>} A promise for a CID or undefined.\n */\nexport function getOrCreateAdCid(\n  ampDoc, clientIdScope, opt_clientIdCookieName, opt_timeout) {\n  const timeout = isNaN(opt_timeout) || opt_timeout == null ?\n    1000 : opt_timeout;\n  const cidPromise = Services.cidForDoc(ampDoc).then(cidService => {\n    if (!cidService) {\n      return;\n    }\n    return cidService.get({\n      scope: dev().assertString(clientIdScope),\n      createCookieIfNotPresent: true,\n      cookieName: opt_clientIdCookieName,\n    }, Promise.resolve(undefined)).catch(error => {\n      // Not getting a CID is not fatal.\n      dev().error('AD-CID', error);\n      return undefined;\n    });\n  });\n  // The CID should never be crucial for an ad. If it does not come within\n  // 1 second, assume it will never arrive.\n  return Services.timerFor(ampDoc.win)\n      .timeoutPromise(timeout, cidPromise, 'cid timeout').catch(error => {\n        // Timeout is not fatal.\n        dev().warn('AD-CID', error);\n        return undefined;\n      });\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {computedStyle} from './style';\nimport {dev} from './log';\nimport {getParentWindowFrameElement} from './service';\n\nconst AD_CONTAINER_PROP = '__AMP__AD_CONTAINER';\n\n/**\n * Tags that are allowed to have fixed positioning\n * @const {!Object<string, boolean>}\n */\nconst CONTAINERS = {\n  'AMP-FX-FLYING-CARPET': true,\n  'AMP-LIGHTBOX': true,\n  'AMP-STICKY-AD': true,\n  'AMP-LIGHTBOX-GALLERY': true,\n};\n\n/**\n * Determines if an element is fixed-positioned.\n * OK to use, because it's only called from onLayoutMeasure\n * @param {!Element} el\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPositionFixed(el, win) {\n  const {position} = computedStyle(win, el);\n  // We consider sticky positions as fixed, since they can be fixed.\n  return position == 'fixed' || position == 'sticky';\n}\n\n/**\n * @param {!Element} element\n * @param {!Window} win\n * @return {boolean} whether the element position is allowed. If the element\n * belongs to CONTAINERS, it is allowed to be position fixed.\n * If the element has a position fixed ancestor, it is not allowed.\n * This should only be called when a layout on the page was just forced\n * anyway.\n */\nexport function isAdPositionAllowed(element, win) {\n  let hasFixedAncestor = false;\n  let containers = 0;\n  let el = element;\n  do {\n    if (CONTAINERS[el.tagName]) {\n      // The containers must not themselves be contained in a fixed-position\n      // element. Continue the search.\n      containers++;\n      hasFixedAncestor = false;\n    } else if (isPositionFixed(dev().assertElement(el), win)) {\n      // Because certain blessed elements may contain a position fixed\n      // container (which contain an ad), we continue to search the\n      // ancestry tree.\n      hasFixedAncestor = true;\n    }\n    el = el.parentElement;\n  } while (el && el.tagName != 'BODY');\n  return !hasFixedAncestor && containers <= 1;\n}\n\n/**\n * Returns the blessed container element tagName if the ad is contained by one.\n * This is called during layout measure.\n * @param {!Element} element\n * @return {?string}\n */\nexport function getAdContainer(element) {\n  if (element[AD_CONTAINER_PROP] === undefined) {\n    let el = element.parentElement;\n    while (el && el.tagName != 'BODY') {\n      if (CONTAINERS[el.tagName]) {\n        return element[AD_CONTAINER_PROP] = el.tagName;\n      }\n      el = el.parentElement;\n    }\n    element[AD_CONTAINER_PROP] = null;\n  }\n  return element[AD_CONTAINER_PROP];\n}\n\n/**\n * Gets the resource ID of the amp-ad element containing the passed node.\n * If there is no containing amp-ad tag, then null will be returned.\n * TODO(jonkeller): Investigate whether non-A4A use case is needed. Issue 11436\n * @param {!Element} node\n * @param {!Window} topWin\n * @return {?string}\n */\nexport function getAmpAdResourceId(node, topWin) {\n  try {\n    const frameParent = getParentWindowFrameElement(node, topWin).parentElement;\n    if (frameParent.nodeName == 'AMP-AD') {\n      return String(frameParent.getResourceId());\n    }\n  } catch (e) {\n  }\n  // Whether we entered the catch above (e.g. due to attempt to access\n  // across xdomain boundary), or failed to enter the if further above, the\n  // node is not within a friendly amp-ad tag. So, there is no amp-ad\n  // resource ID. How to handle that is up to the caller, but see TODO above.\n  return null;\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common AMP events.\n * @enum {string}\n */\nexport const AmpEvents = {\n  BUILT: 'amp:built',\n  DOM_UPDATE: 'amp:dom-update',\n  VISIBILITY_CHANGE: 'amp:visibilitychange', // https://github.com/ampproject/amphtml/blob/master/ads/README.md#page-visibility\n  // The following codes are only used for testing.\n  // TODO(choumx): Move these to a separate enum so they can be DCE'd.\n  ATTACHED: 'amp:attached',\n  STUBBED: 'amp:stubbed',\n  LOAD_START: 'amp:load:start',\n  LOAD_END: 'amp:load:end',\n  ERROR: 'amp:error',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\n\n/**\n * Helper method to trigger analytics event if amp-analytics is available.\n * TODO: Do not expose this function\n * @param {!Element} target\n * @param {string} eventType\n * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n */\nexport function triggerAnalyticsEvent(target, eventType, opt_vars) {\n  Services.analyticsForDocOrNull(target).then(analytics => {\n    if (!analytics) {\n      return;\n    }\n    analytics.triggerEventForTarget(target, eventType, opt_vars);\n  });\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Commonly used signals across different elements and documents.\n * @enum {string}\n */\nexport const CommonSignals = {\n\n  /**\n   * The element has been built.\n   */\n  BUILT: 'built',\n\n  /**\n   * The initial contents of an element/document/embed have been loaded.\n   */\n  INI_LOAD: 'ini-load',\n\n  /**\n   * The element has been loaded.\n   */\n  LOAD_END: 'load-end',\n\n  /**\n   * The element has started loading.\n   */\n  LOAD_START: 'load-start',\n\n  /**\n   * Rendering has been confirmed to have been started.\n   */\n  RENDER_START: 'render-start',\n\n  /**\n   * The element has been unlaid out.\n   */\n  UNLOAD: 'unload',\n};\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows for runtime configuration. Internally, the runtime should\n * use the src/config.js module for various constants. We can use the\n * AMP_CONFIG global to translate user-defined configurations to this\n * module.\n * @type {!Object<string, string>}\n */\nconst env = self.AMP_CONFIG || {};\n\nconst thirdPartyFrameRegex = typeof env['thirdPartyFrameRegex'] == 'string' ?\n  new RegExp(env['thirdPartyFrameRegex']) : env['thirdPartyFrameRegex'];\n\nconst cdnProxyRegex = typeof env['cdnProxyRegex'] == 'string' ?\n  new RegExp(env['cdnProxyRegex']) : env['cdnProxyRegex'];\n\n/** @type {!Object<string, string|boolean|RegExp>} */\nexport const urls = {\n  thirdParty: env['thirdPartyUrl'] || 'https://3p.ampproject.net',\n  thirdPartyFrameHost: env['thirdPartyFrameHost'] || 'ampproject.net',\n  thirdPartyFrameRegex: thirdPartyFrameRegex || /^d-\\d+\\.ampproject\\.net$/,\n  cdn: env['cdnUrl'] || 'https://cdn.ampproject.org',\n  /* Note that cdnProxyRegex is only ever checked against origins\n   * (proto://host[:port]) so does not need to consider path\n   */\n  cdnProxyRegex: cdnProxyRegex ||\n      /^https:\\/\\/([a-zA-Z0-9_-]+\\.)?cdn\\.ampproject\\.org$/,\n  localhostRegex: /^https?:\\/\\/localhost(:\\d+)?$/,\n  errorReporting: env['errorReportingUrl'] ||\n      'https://amp-error-reporting.appspot.com/r',\n  localDev: env['localDev'] || false,\n};\n\nexport const config = {\n  urls,\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file will be imported by 3P scripts.\n\n/**\n * Possible consent policy state to proceed with.\n * @enum {number}\n */\nexport const CONSENT_POLICY_STATE = {\n  // Enum value has external dependency. Please do not change existing value.\n  // If new values are added, please notify the AMP for Ads team to assure\n  // correct Real Time Config behavior is maintained for Fast Fetch.\n  SUFFICIENT: 1,\n  INSUFFICIENT: 2,\n  UNKNOWN_NOT_REQUIRED: 3,\n  UNKNOWN: 4,\n};\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSENT_POLICY_STATE, // eslint-disable-line no-unused-vars\n} from './consent-state';\nimport {Services} from './services';\n\n/**\n * Returns a promise that resolve when all consent state the policy wait\n * for resolve. Or if consent service is not available.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} policyId\n * @return {!Promise<?CONSENT_POLICY_STATE>}\n */\nexport function getConsentPolicyState(ampdoc, policyId) {\n  return Services.consentPolicyServiceForDocOrNull(ampdoc)\n      .then(consentPolicy => {\n        if (!consentPolicy) {\n          return null;\n        }\n        return consentPolicy.whenPolicyResolved(\n            /** @type {string} */ (policyId));\n      });\n}\n\n/**\n * Returns a promise that resolves to a sharedData retrieved from consent\n * remote endpoint.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @param {string} policyId\n * @return {!Promise<?Object>}\n */\nexport function getConsentPolicySharedData(ampdoc, policyId) {\n  return Services.consentPolicyServiceForDocOrNull(ampdoc)\n      .then(consentPolicy => {\n        if (!consentPolicy) {\n          return null;\n        }\n        return consentPolicy.getMergedSharedData(\n            /** @type {string} */ (policyId));\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {endsWith} from './string';\nimport {\n  isProxyOrigin,\n  parseUrlDeprecated,\n  tryDecodeUriComponent,\n} from './url';\nimport {urls} from './config';\n\n\n/**\n * Returns the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * Returns the cookie's value or `null`.\n *\n * @param {!Window} win\n * @param {string} name\n * @return {?string}\n */\nexport function getCookie(win, name) {\n  const cookieString = tryGetDocumentCookieNoInline(win);\n  if (!cookieString) {\n    return null;\n  }\n  const cookies = cookieString.split(';');\n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    const eq = cookie.indexOf('=');\n    if (eq == -1) {\n      continue;\n    }\n    if (tryDecodeUriComponent(cookie.substring(0, eq).trim()) == name) {\n      const value = cookie.substring(eq + 1).trim();\n      return tryDecodeUriComponent(value, value);\n    }\n  }\n  return null;\n}\n\n/**\n * This method should not be inlined to prevent TryCatch deoptimization.\n * NoInline keyword at the end of function name also prevents Closure compiler\n * from inlining the function.\n * @param {!Window} win\n * @return {string}\n */\nfunction tryGetDocumentCookieNoInline(win) {\n  try {\n    return win.document.cookie;\n  } catch (e) {\n    // Act as if no cookie is available. Exceptions can be thrown when\n    // AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n    return '';\n  }\n}\n\n/**\n * Sets the value of the cookie. The cookie access is restricted and must\n * go through the privacy review. Before using this method please file a\n * GitHub issue with \"Privacy Review\" label.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {{\n *   highestAvailableDomain:(boolean|undefined),\n *   domain:(string|undefined)\n * }=} opt_options\n *     - highestAvailableDomain: If true, set the cookie at the widest domain\n *       scope allowed by the browser. E.g. on example.com if we are currently\n *       on www.example.com.\n *     - domain: Explicit domain to set.\n *     - allowOnProxyOrigin: Allow setting a cookie on the AMP Cache.\n */\nexport function setCookie(win, name, value, expirationTime, opt_options) {\n  checkOriginForSettingCookie(win, opt_options, name);\n  if (opt_options && opt_options.highestAvailableDomain) {\n    const parts = win.location.hostname.split('.');\n    let domain = parts[parts.length - 1];\n    for (let i = parts.length - 2; i >= 0; i--) {\n      domain = parts[i] + '.' + domain;\n      trySetCookie(win, name, value, expirationTime, domain);\n      if (getCookie(win, name) == value) {\n        return;\n      }\n    }\n  }\n  let domain = undefined;\n  if (opt_options && opt_options.domain) {\n    domain = opt_options.domain;\n  }\n  trySetCookie(win, name, value, expirationTime, domain);\n}\n\n/**\n * Attempt to set a cookie with the given params.\n *\n * @param {!Window} win\n * @param {string} name\n * @param {string} value\n * @param {time} expirationTime\n * @param {string|undefined} domain\n */\nfunction trySetCookie(win, name, value, expirationTime, domain) {\n  // We do not allow setting cookies on the domain that contains both\n  // the cdn. and www. hosts.\n  if (domain == 'ampproject.org') {\n    // Actively delete them.\n    value = 'delete';\n    expirationTime = 0;\n  }\n  const cookie = encodeURIComponent(name) + '=' +\n      encodeURIComponent(value) +\n      '; path=/' +\n      (domain ? '; domain=' + domain : '') +\n      '; expires=' + new Date(expirationTime).toUTCString();\n  try {\n    win.document.cookie = cookie;\n  } catch (ignore) {\n    // Do not throw if setting the cookie failed Exceptions can be thrown\n    // when AMP docs are opened on origins that do not allow setting\n    // cookies such as null origins.\n  }\n}\n\n/**\n * Throws if a given cookie should not be set on the given origin.\n * This is a defense-in-depth. Callers should never run into this.\n *\n * @param {!Window} win\n * @param {!Object|undefined} options\n * @param {string} name For the error message.\n */\nfunction checkOriginForSettingCookie(win, options, name) {\n  if (options && options.allowOnProxyOrigin) {\n    return;\n  }\n  if (isProxyOrigin(win.location.href)) {\n    throw new Error('Should never attempt to set cookie on proxy origin: '\n        + name);\n  }\n\n  const current = parseUrlDeprecated(win.location.href).hostname.toLowerCase();\n  const proxy = parseUrlDeprecated(urls.cdn).hostname.toLowerCase();\n  if (current == proxy || endsWith(current, '.' + proxy)) {\n    throw new Error('Should never attempt to set cookie on proxy origin.'\n        + ' (in depth check): ' + name);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Whether the document is ready.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isDocumentReady(doc) {\n  return doc.readyState != 'loading' && doc.readyState != 'uninitialized';\n}\n\n/**\n * Whether the document has loaded all the css and sub-resources.\n * @param {!Document} doc\n * @return {boolean}\n */\nfunction isDocumentComplete(doc) {\n  return doc.readyState == 'complete';\n}\n\n/**\n * Calls the callback when document is ready.\n * @param {!Document} doc\n * @param {function(!Document)} callback\n */\nexport function onDocumentReady(doc, callback) {\n  onDocumentState(doc, isDocumentReady, callback);\n}\n\n/**\n * Calls the callback when document's state satisfies the stateFn.\n * @param {!Document} doc\n * @param {function(!Document):boolean} stateFn\n * @param {function(!Document)} callback\n */\nfunction onDocumentState(doc, stateFn, callback) {\n  let ready = stateFn(doc);\n  if (ready) {\n    callback(doc);\n  } else {\n    const readyListener = () => {\n      if (stateFn(doc)) {\n        if (!ready) {\n          ready = true;\n          callback(doc);\n        }\n        doc.removeEventListener('readystatechange', readyListener);\n      }\n    };\n    doc.addEventListener('readystatechange', readyListener);\n  }\n}\n\n/**\n * Returns a promise that is resolved when document is ready.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentReady(doc) {\n  return new Promise(resolve => {\n    onDocumentReady(doc, resolve);\n  });\n}\n\n/**\n * Returns a promise that is resolved when document is complete.\n * @param {!Document} doc\n * @return {!Promise<!Document>}\n */\nexport function whenDocumentComplete(doc) {\n  return new Promise(resolve => {\n    onDocumentState(doc, isDocumentComplete, resolve);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {cssEscape} from '../third_party/css-escape/css-escape';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {startsWith} from './string';\nimport {toWin} from './types';\n\nconst HTML_ESCAPE_CHARS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n};\nconst HTML_ESCAPE_REGEX = /(&|<|>|\"|'|`)/g;\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_PROMISE =\n    '__AMP_UPG_PRM';\n\n/** @const {string} */\nexport const UPGRADE_TO_CUSTOMELEMENT_RESOLVER =\n    '__AMP_UPG_RES';\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * callback is executed.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @param {function()} callback\n */\nexport function waitForChild(parent, checkFunc, callback) {\n  if (checkFunc(parent)) {\n    callback();\n    return;\n  }\n  /** @const {!Window} */\n  const win = toWin(parent.ownerDocument.defaultView);\n  if (win.MutationObserver) {\n    /** @const {MutationObserver} */\n    const observer = new win.MutationObserver(() => {\n      if (checkFunc(parent)) {\n        observer.disconnect();\n        callback();\n      }\n    });\n    observer.observe(parent, {childList: true});\n  } else {\n    /** @const {number} */\n    const interval = win.setInterval(() => {\n      if (checkFunc(parent)) {\n        win.clearInterval(interval);\n        callback();\n      }\n    }, /* milliseconds */ 5);\n  }\n}\n\n/**\n * Waits until the child element is constructed. Once the child is found, the\n * promise is resolved.\n * @param {!Element} parent\n * @param {function(!Element):boolean} checkFunc\n * @return {!Promise}\n */\nexport function waitForChildPromise(parent, checkFunc) {\n  return new Promise(resolve => {\n    waitForChild(parent, checkFunc, resolve);\n  });\n}\n\n/**\n * Waits for document's body to be available.\n * Will be deprecated soon; use {@link AmpDoc#whenBodyAvailable} or\n * @{link DocumentState#onBodyAvailable} instead.\n * @param {!Document} doc\n * @param {function()} callback\n */\nexport function waitForBody(doc, callback) {\n  waitForChild(doc.documentElement, () => !!doc.body, callback);\n}\n\n\n/**\n * Waits for document's body to be available.\n * @param {!Document} doc\n * @return {!Promise}\n */\nexport function waitForBodyPromise(doc) {\n  return new Promise(resolve => {\n    waitForBody(doc, resolve);\n  });\n}\n\n\n/**\n * Removes the element.\n * @param {!Element} element\n */\nexport function removeElement(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n}\n\n\n/**\n * Removes all child nodes of the specified element.\n * @param {!Element} parent\n */\nexport function removeChildren(parent) {\n  while (parent.firstChild) {\n    parent.removeChild(parent.firstChild);\n  }\n}\n\n\n/**\n * Copies all children nodes of element \"from\" to element \"to\". Child nodes\n * are deeply cloned. Notice, that this method should be used with care and\n * preferably on smaller subtrees.\n * @param {!Element} from\n * @param {!Element|!DocumentFragment} to\n */\nexport function copyChildren(from, to) {\n  const frag = to.ownerDocument.createDocumentFragment();\n  for (let n = from.firstChild; n; n = n.nextSibling) {\n    frag.appendChild(n.cloneNode(true));\n  }\n  to.appendChild(frag);\n}\n\n/**\n * Insert the element in the root after the element named after or\n * if that is null at the beginning.\n * @param {!Element|!ShadowRoot} root\n * @param {!Element} element\n * @param {?Node} after\n */\nexport function insertAfterOrAtStart(root, element, after) {\n  const before = after ? after.nextSibling : root.firstChild;\n  root.insertBefore(element, before);\n}\n\n/**\n * Add attributes to an element.\n * @param {!Element} element\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function addAttributesToElement(element, attributes) {\n  for (const attr in attributes) {\n    element.setAttribute(attr, attributes[attr]);\n  }\n  return element;\n}\n\n/**\n * Create a new element on document with specified tagName and attributes.\n * @param {!Document} doc\n * @param {string} tagName\n * @param {!JsonObject<string, string>} attributes\n * @return {!Element} created element\n */\nexport function createElementWithAttributes(doc, tagName, attributes) {\n  const element = doc.createElement(tagName);\n  return addAttributesToElement(element, attributes);\n}\n\n/**\n * Returns true if node is connected (attached).\n * @param {!Node} node\n * @return {boolean}\n * @see https://dom.spec.whatwg.org/#connected\n */\nexport function isConnectedNode(node) {\n  const connected = node.isConnected;\n  if (connected !== undefined) {\n    return connected;\n  }\n\n  // \"An element is connected if its shadow-including root is a document.\"\n  let n = node;\n  do {\n    n = rootNodeFor(n);\n    if (n.host) {\n      n = n.host;\n    } else {\n      break;\n    }\n  } while (true);\n  return n.nodeType === Node.DOCUMENT_NODE;\n}\n\n/**\n * Returns the root for a given node. Does not cross shadow DOM boundary.\n * @param {!Node} node\n * @return {!Node}\n */\nexport function rootNodeFor(node) {\n  if (Node.prototype.getRootNode) {\n    // Type checker says `getRootNode` may return null.\n    return node.getRootNode() || node;\n  }\n  let n;\n  for (n = node; !!n.parentNode; n = n.parentNode) {}\n  return n;\n}\n\n/**\n * Finds the closest element that satisfies the callback from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {function(!Element):boolean} callback\n * @param {Element=} opt_stopAt optional elemnt to stop the search at.\n * @return {?Element}\n */\nexport function closest(element, callback, opt_stopAt) {\n  for (let el = element; el && el !== opt_stopAt; el = el.parentElement) {\n    if (callback(el)) {\n      return el;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest node that satisfies the callback from this node\n * up the DOM subtree.\n * @param {!Node} node\n * @param {function(!Node):boolean} callback\n * @return {?Node}\n */\nexport function closestNode(node, callback) {\n  for (let n = node; n; n = n.parentNode) {\n    if (callback(n)) {\n      return n;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds the closest element with the specified name from this element\n * up the DOM subtree.\n * @param {!Element} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function closestByTag(element, tagName) {\n  if (element.closest) {\n    return element.closest(tagName);\n  }\n  tagName = tagName.toUpperCase();\n  return closest(element, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Finds the closest element with the specified selector from this element\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element} closest ancestor if found.\n */\nexport function closestBySelector(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  return closest(element, el => {\n    return matches(el, selector);\n  });\n}\n\n/**\n * Checks if the given element matches the selector\n * @param  {!Element} el The element to verify\n * @param  {string} selector The selector to check against\n * @return {boolean} True if the element matched the selector. False otherwise.\n */\nexport function matches(el, selector) {\n  const matcher = el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector ||\n      el.oMatchesSelector;\n  if (matcher) {\n    return matcher.call(el, selector);\n  }\n  return false; // IE8 always returns false.\n}\n\n/**\n * Finds the first descendant element with the specified name.\n * @param {!Element|!Document|!ShadowRoot} element\n * @param {string} tagName\n * @return {?Element}\n */\nexport function elementByTag(element, tagName) {\n  let elements;\n  // getElementsByTagName() is not supported on ShadowRoot.\n  if (typeof element.getElementsByTagName === 'function') {\n    elements = element.getElementsByTagName(tagName);\n  } else {\n    elements = element./*OK*/querySelectorAll(tagName);\n  }\n  return (elements && elements[0]) || null;\n}\n\n\n/**\n * Finds the first child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function childElement(parent, callback) {\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n\n/**\n * Finds all child elements that satisfy the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {!Array<!Element>}\n */\nexport function childElements(parent, callback) {\n  const children = [];\n  for (let child = parent.firstElementChild; child;\n    child = child.nextElementSibling) {\n    if (callback(child)) {\n      children.push(child);\n    }\n  }\n  return children;\n}\n\n\n/**\n * Finds the last child element that satisfies the callback.\n * @param {!Element} parent\n * @param {function(!Element):boolean} callback\n * @return {?Element}\n */\nexport function lastChildElement(parent, callback) {\n  for (let child = parent.lastElementChild; child;\n    child = child.previousElementSibling) {\n    if (callback(child)) {\n      return child;\n    }\n  }\n  return null;\n}\n\n/**\n * Finds all child nodes that satisfy the callback.\n * These nodes can include Text, Comment and other child nodes.\n * @param {!Node} parent\n * @param {function(!Node):boolean} callback\n * @return {!Array<!Node>}\n */\nexport function childNodes(parent, callback) {\n  const nodes = [];\n  for (let child = parent.firstChild; child;\n    child = child.nextSibling) {\n    if (callback(child)) {\n      nodes.push(child);\n    }\n  }\n  return nodes;\n}\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet scopeSelectorSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setScopeSelectorSupportedForTesting(val) {\n  scopeSelectorSupported = val;\n}\n\n/**\n * Test that the :scope selector is supported and behaves correctly.\n * @param {!Element} parent\n * @return {boolean}\n */\nfunction isScopeSelectorSupported(parent) {\n  const doc = parent.ownerDocument;\n  try {\n    const testElement = doc.createElement('div');\n    const testChild = doc.createElement('div');\n    testElement.appendChild(testChild);\n    // NOTE(cvializ, #12383): Firefox's implementation is incomplete,\n    // therefore we test actual functionality of`:scope` as well.\n    return testElement./*OK*/querySelector(':scope div') === testChild;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Finds the first child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function childElementByAttr(parent, attr) {\n  return scopedQuerySelector/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the last child element that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {?Element}\n */\nexport function lastChildElementByAttr(parent, attr) {\n  return lastChildElement(parent, el => {\n    return el.hasAttribute(attr);\n  });\n}\n\n\n/**\n * Finds all child elements that has the specified attribute.\n * @param {!Element} parent\n * @param {string} attr\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByAttr(parent, attr) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> [${attr}]`);\n}\n\n\n/**\n * Finds the first child element that has the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {?Element}\n */\nexport function childElementByTag(parent, tagName) {\n  return scopedQuerySelector/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds all child elements with the specified tag name.\n * @param {!Element} parent\n * @param {string} tagName\n * @return {!NodeList<!Element>}\n */\nexport function childElementsByTag(parent, tagName) {\n  return scopedQuerySelectorAll/*OK*/(parent, `> ${tagName}`);\n}\n\n\n/**\n * Finds the first element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {?Element}\n */\nexport function scopedQuerySelector(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelector(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const element = root./*OK*/querySelector(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return element;\n}\n\n\n/**\n * Finds the every element that matches `selector`, scoped inside `root`.\n * Note: in IE, this causes a quick mutation of the element's class list.\n * @param {!Element} root\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nexport function scopedQuerySelectorAll(root, selector) {\n  if (scopeSelectorSupported == null) {\n    scopeSelectorSupported = isScopeSelectorSupported(root);\n  }\n  if (scopeSelectorSupported) {\n    return root./*OK*/querySelectorAll(`:scope ${selector}`);\n  }\n\n  // Only IE.\n  const unique = 'i-amphtml-scoped';\n  root.classList.add(unique);\n  const elements = root./*OK*/querySelectorAll(`.${unique} ${selector}`);\n  root.classList.remove(unique);\n  return elements;\n}\n\n\n/**\n * Returns element data-param- attributes as url parameters key-value pairs.\n * e.g. data-param-some-attr=value -> {someAttr: value}.\n * @param {!Element} element\n * @param {function(string):string=} opt_computeParamNameFunc to compute the\n *    parameter name, get passed the camel-case parameter name.\n * @param {!RegExp=} opt_paramPattern Regex pattern to match data attributes.\n * @return {!JsonObject}\n */\nexport function getDataParamsFromAttributes(element, opt_computeParamNameFunc,\n  opt_paramPattern) {\n  const computeParamNameFunc = opt_computeParamNameFunc || (key => key);\n  const {dataset} = element;\n  const params = dict();\n  const paramPattern = opt_paramPattern ? opt_paramPattern : /^param(.+)/;\n  for (const key in dataset) {\n    const matches = key.match(paramPattern);\n    if (matches) {\n      const param = matches[1][0].toLowerCase() + matches[1].substr(1);\n      params[computeParamNameFunc(param)] = dataset[key];\n    }\n  }\n  return params;\n}\n\n/**\n * Whether the element have a next node in the document order.\n * This means either:\n *  a. The element itself has a nextSibling.\n *  b. Any of the element ancestors has a nextSibling.\n * @param {!Element} element\n * @param {?Node} opt_stopNode\n * @return {boolean}\n */\nexport function hasNextNodeInDocumentOrder(element, opt_stopNode) {\n  let currentElement = element;\n  do {\n    if (currentElement.nextSibling) {\n      return true;\n    }\n  } while ((currentElement = currentElement.parentNode) &&\n            currentElement != opt_stopNode);\n  return false;\n}\n\n\n/**\n * Finds all ancestor elements that satisfy predicate.\n * @param {!Element} child\n * @param {function(!Element):boolean} predicate\n * @return {!Array<!Element>}\n */\nexport function ancestorElements(child, predicate) {\n  const ancestors = [];\n  for (let ancestor = child.parentElement; ancestor;\n    ancestor = ancestor.parentElement) {\n    if (predicate(ancestor)) {\n      ancestors.push(ancestor);\n    }\n  }\n  return ancestors;\n}\n\n\n/**\n * Finds all ancestor elements that has the specified tag name.\n * @param {!Element} child\n * @param {string} tagName\n * @return {!Array<!Element>}\n */\nexport function ancestorElementsByTag(child, tagName) {\n  tagName = tagName.toUpperCase();\n  return ancestorElements(child, el => {\n    return el.tagName == tagName;\n  });\n}\n\n/**\n * Returns a clone of the content of a template element.\n *\n * Polyfill to replace .content access for browsers that do not support\n * HTMLTemplateElements natively.\n *\n * @param {!HTMLTemplateElement|!Element} template\n * @return {!DocumentFragment}\n */\nexport function templateContentClone(template) {\n  if ('content' in template) {\n    return template.content.cloneNode(true);\n  } else {\n    const content = template.ownerDocument.createDocumentFragment();\n    copyChildren(template, content);\n    return content;\n  }\n}\n\n/**\n * Iterate over an array-like. Some collections like NodeList are\n * lazily evaluated in some browsers, and accessing `length` forces full\n * evaluation. We can improve performance by iterating until an element is\n * `undefined` to avoid checking the `length` property.\n * Test cases: https://jsperf.com/iterating-over-collections-of-elements\n * @param {!IArrayLike<T>} iterable\n * @param {function(T, number)} cb\n * @template T\n */\nexport function iterateCursor(iterable, cb) {\n  for (let i = 0, value; (value = iterable[i]) !== undefined; i++) {\n    cb(value, i);\n  }\n}\n\n/**\n * This method wraps around window's open method. It first tries to execute\n * `open` call with the provided target and if it fails, it retries the call\n * with the `_top` target. This is necessary given that in some embedding\n * scenarios, such as iOS' WKWebView, navigation to `_blank` and other targets\n * is blocked by default.\n *\n * @param {!Window} win\n * @param {string} url\n * @param {string} target\n * @param {string=} opt_features\n * @return {?Window}\n */\nexport function openWindowDialog(win, url, target, opt_features) {\n  // Try first with the specified target. If we're inside the WKWebView or\n  // a similar environments, this method is expected to fail by default for\n  // all targets except `_top`.\n  let res;\n  try {\n    res = win.open(url, target, opt_features);\n  } catch (e) {\n    dev().error('DOM', 'Failed to open url on target: ', target, e);\n  }\n\n  // Then try with `_top` target.\n  if (!res && target != '_top') {\n    res = win.open(url, '_top');\n  }\n  return res;\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n            element.getAttribute('type').toUpperCase() == 'APPLICATION/JSON';\n}\n\n/**\n * Whether the element is a script tag with application/json type.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isJsonLdScriptTag(element) {\n  return element.tagName == 'SCRIPT' &&\n      element.getAttribute('type').toUpperCase() == 'APPLICATION/LD+JSON';\n}\n\n/**\n * Whether the page's direction is right to left or not.\n * @param {!Document} doc\n * @return {boolean}\n */\nexport function isRTL(doc) {\n  const dir = doc.body.getAttribute('dir')\n                 || doc.documentElement.getAttribute('dir')\n                 || 'ltr';\n  return dir == 'rtl';\n}\n\n\n/**\n * Escapes an ident (ID or a class name) to be used as a CSS selector.\n *\n * See https://drafts.csswg.org/cssom/#serialize-an-identifier.\n *\n * @param {string} ident\n * @return {string}\n */\nexport function escapeCssSelectorIdent(ident) {\n  return cssEscape(ident);\n}\n\n/**\n * Escapes an ident in a way that can be used by :nth-child() psuedo-class.\n *\n * See https://github.com/w3c/csswg-drafts/issues/2306.\n *\n * @param {string|number} ident\n * @return {string}\n */\nexport function escapeCssSelectorNth(ident) {\n  const escaped = String(ident);\n  // Ensure it doesn't close the nth-child psuedo class.\n  dev().assert(escaped.indexOf(')') === -1);\n  return escaped;\n}\n\n/**\n * Escapes `<`, `>` and other HTML charcaters with their escaped forms.\n * @param {string} text\n * @return {string}\n */\nexport function escapeHtml(text) {\n  if (!text) {\n    return text;\n  }\n  return text.replace(HTML_ESCAPE_REGEX, escapeHtmlChar);\n}\n\n/**\n * @param {string} c\n * @return {string}\n */\nfunction escapeHtmlChar(c) {\n  return HTML_ESCAPE_CHARS[c];\n}\n\n/**\n * Tries to focus on the given element; fails silently if browser throws an\n * exception.\n * @param {!Element} element\n */\nexport function tryFocus(element) {\n  try {\n    element./*OK*/focus();\n  } catch (e) {\n    // IE <= 7 may throw exceptions when focusing on hidden items.\n  }\n}\n\n/**\n * Whether the given window is in an iframe or not.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isIframed(win) {\n  return win.parent && win.parent != win;\n}\n\n/**\n * Determines if this element is an AMP element\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isAmpElement(element) {\n  const tag = element.tagName;\n  // Use prefix to recognize AMP element. This is necessary because stub\n  // may not be attached yet.\n  return startsWith(tag, 'AMP-') &&\n      // Some \"amp-*\" elements are not really AMP elements. :smh:\n      !(tag == 'AMP-STICKY-AD-TOP-PADDING' || tag == 'AMP-BODY');\n}\n\n/**\n * Return a promise that resolve when an AMP element upgrade from HTMLElement\n * to CustomElement\n * @param {!Element} element\n * @return {!Promise<!Element>}\n */\nexport function whenUpgradedToCustomElement(element) {\n  dev().assert(isAmpElement(element), 'element is not AmpElement');\n  if (element.createdCallback) {\n    // Element already is CustomElement;\n    return Promise.resolve(element);\n  }\n  // If Element is still HTMLElement, wait for it to upgrade to customElement\n  // Note: use pure string to avoid obfuscation between versions.\n  if (!element[UPGRADE_TO_CUSTOMELEMENT_PROMISE]) {\n    const deferred = new Deferred();\n    element[UPGRADE_TO_CUSTOMELEMENT_PROMISE] = deferred.promise;\n    element[UPGRADE_TO_CUSTOMELEMENT_RESOLVER] = deferred.resolve;\n\n  }\n\n  return element[UPGRADE_TO_CUSTOMELEMENT_PROMISE];\n}\n\n/**\n * Replacement for `Element.requestFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n * @param {!Element} element\n */\nexport function fullscreenEnter(element) {\n  const requestFs = element.requestFullscreen\n   || element.requestFullScreen\n   || element.webkitRequestFullscreen\n   || element.webkitRequestFullScreen\n   || element.webkitEnterFullscreen\n   || element.webkitEnterFullScreen\n   || element.msRequestFullscreen\n   || element.msRequestFullScreen\n   || element.mozRequestFullscreen\n   || element.mozRequestFullScreen;\n  if (requestFs) {\n    requestFs.call(element);\n  }\n}\n\n/**\n * Replacement for `Document.exitFullscreen()` method.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n * @param {!Element} element\n */\nexport function fullscreenExit(element) {\n  let exitFs = element.cancelFullScreen\n               || element.exitFullscreen\n               || element.exitFullScreen\n               || element.webkitExitFullscreen\n               || element.webkitExitFullScreen\n               || element.webkitCancelFullScreen\n               || element.mozCancelFullScreen\n               || element.msExitFullscreen;\n  if (exitFs) {\n    exitFs.call(element);\n    return;\n  }\n  if (element.ownerDocument) {\n    exitFs = element.ownerDocument.cancelFullScreen\n             || element.ownerDocument.exitFullscreen\n             || element.ownerDocument.exitFullScreen\n             || element.ownerDocument.webkitExitFullscreen\n             || element.ownerDocument.webkitExitFullScreen\n             || element.ownerDocument.webkitCancelFullScreen\n             || element.ownerDocument.mozCancelFullScreen\n             || element.ownerDocument.msExitFullscreen;\n  }\n  if (exitFs) {\n    exitFs.call(element.ownerDocument);\n    return;\n  }\n}\n\n\n/**\n * Replacement for `Document.fullscreenElement`.\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isFullscreenElement(element) {\n  const isFullscreen = element.webkitDisplayingFullscreen;\n  if (isFullscreen) {\n    return true;\n  }\n  if (element.ownerDocument) {\n    const fullscreenElement = element.ownerDocument.fullscreenElement\n             || element.ownerDocument.webkitFullscreenElement\n             || element.ownerDocument.mozFullScreenElement\n             || element.webkitCurrentFullScreenElement;\n    if (fullscreenElement == element) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if node is not disabled.\n *\n * IE8 can return false positives, see {@link matches}.\n * @param {!Element} element\n * @return {boolean}\n * @see https://www.w3.org/TR/html5/forms.html#concept-fe-disabled\n */\nexport function isEnabled(element) {\n  return !(element.disabled || matches(element, ':disabled'));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getService,\n  getServicePromise,\n  getServicePromiseForDoc,\n  getServicePromiseOrNull,\n  getServicePromiseOrNullForDoc,\n  getTopWindow,\n} from './service';\nimport {toWin} from './types';\nimport {user} from './log';\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementService(win, id, extension, opt_element) {\n  return getElementServiceIfAvailable(win, id, extension, opt_element).then(\n      service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailable(win, id, extension, opt_element) {\n  const s = getServicePromiseOrNull(win, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n  return getElementServicePromiseOrNull(win, id, extension, opt_element);\n}\n\n/**\n * @param {!Window} win\n * @param {string} elementName Name of an extended custom element.\n * @return {boolean} Whether this element is scheduled to be loaded.\n */\nfunction isElementScheduled(win, elementName) {\n  // Set in custom-element.js\n  if (!win.ampExtendedElements) {\n    return false;\n  }\n  return !!win.ampExtendedElements[elementName];\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. Services.viewportForDoc(...)) for type safety and because the\n * factory should not be passed around.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an element,\n *     not the extension.\n * @return {!Promise<*>}\n */\nexport function getElementServiceForDoc(elementOrAmpDoc, id, extension,\n  opt_element) {\n  return getElementServiceIfAvailableForDoc(\n      elementOrAmpDoc, id, extension, opt_element)\n      .then(service => assertService(service, id, extension));\n}\n\n/**\n * Same as getElementService but produces null if the given element is not\n * actually available on the current page.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom extension that provides the\n *     implementation of this service.\n * @param {boolean=} opt_element Whether this service is provided by an\n *     element, not the extension.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDoc(\n  elementOrAmpDoc, id, extension, opt_element) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const s = getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (s);\n  }\n\n  return ampdoc.whenBodyAvailable()\n      .then(() => waitForExtensionIfPresent(\n          ampdoc.win, extension,\n          ampdoc.getHeadNode()))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNullForDoc(elementOrAmpDoc, id);\n        } else if (isElementScheduled(ampdoc.win, extension)) {\n          return getServicePromiseForDoc(elementOrAmpDoc, id);\n        }\n        return null;\n      });\n}\n\n/**\n * Returns a promise for service for the given id in the embed scope of\n * a given node, if it exists. Otherwise, falls back to ampdoc scope IFF\n * the given node is in the top-level window.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id of the service.\n * @param {string} extension Name of the custom element that provides\n *     the implementation of this service.\n * @return {!Promise<?Object>}\n */\nexport function getElementServiceIfAvailableForDocInEmbedScope(\n  elementOrAmpDoc, id, extension) {\n  const s = getExistingServiceForDocInEmbedScope(elementOrAmpDoc, id);\n  if (s) {\n    return /** @type {!Promise<?Object>} */ (Promise.resolve(s));\n  }\n  // Return embed-scope element service promise if scheduled.\n  if (elementOrAmpDoc.nodeType) {\n    const win = toWin(elementOrAmpDoc.ownerDocument.defaultView);\n    const topWin = getTopWindow(win);\n    // In embeds, doc-scope services are window-scope. But make sure to\n    // only do this for embeds (not the top window), otherwise we'd grab\n    // a promise from the wrong service holder which would never resolve.\n    if (win !== topWin) {\n      return getElementServicePromiseOrNull(win, id, extension);\n    } else {\n      // Fallback to ampdoc IFF the given node is _not_ FIE.\n      return getElementServiceIfAvailableForDoc(elementOrAmpDoc, id, extension);\n    }\n  }\n  return /** @type {!Promise<?Object>} */ (Promise.resolve(null));\n}\n\n/**\n * Throws user error if `service` is null.\n * @param {Object} service\n * @param {string} id\n * @param {string} extension\n * @return {!Object}\n * @private\n */\nfunction assertService(service, id, extension) {\n  return /** @type {!Object} */ (user().assert(service,\n      'Service %s was requested to be provided through %s, ' +\n      'but %s is not loaded in the current page. To fix this ' +\n      'problem load the JavaScript file for %s in this page.',\n      id, extension, extension, extension));\n}\n\n/**\n * Get list of all the extension JS files\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Array<string>}\n */\nexport function extensionScriptsInNode(head) {\n  // ampdoc.getHeadNode() can return null\n  if (!head) {\n    return [];\n  }\n  const scripts = [];\n  const list = head.querySelectorAll('script[custom-element]');\n  for (let i = 0; i < list.length; i++) {\n    scripts.push(list[i].getAttribute('custom-element'));\n  }\n  return scripts;\n}\n\n/**\n * Waits for an extension if its script is present\n * @param {!Window} win\n * @param {string} extension\n * @param {HTMLHeadElement|Element|ShadowRoot} head\n * @return {!Promise}\n * @private\n */\nfunction waitForExtensionIfPresent(win, extension, head) {\n  /**\n   * If there is an extension script wait for it to load before trying\n   * to get the service. Prevents a race condition when everything but\n   * the extensions is in cache. If there is no script then it's either\n   * not present, or the service was defined by a test. In those cases\n   * we don't wait around for an extension that does not exist.\n   */\n\n  // TODO(jpettitt) investigate registerExtension to short circuit\n  // the dom call in extensionScriptsInNode()\n  if (!extensionScriptsInNode(head).includes(extension)) {\n    return Promise.resolve();\n  }\n\n  const extensions = getService(win, 'extensions');\n  return /** @type {!Promise<?Object>} */ (\n    extensions.waitForExtension(win, extension));\n}\n\n/**\n * Returns the promise for service with `id` on the given window if available.\n * Otherwise, resolves with null (service was not registered).\n * @param {!Window} win\n * @param {string} id\n * @param {string} extension\n * @param {boolean=} opt_element\n * @return {!Promise<Object>}\n * @private\n */\nfunction getElementServicePromiseOrNull(win, id, extension, opt_element) {\n  return dom.waitForBodyPromise(win.document)\n      .then(() => waitForExtensionIfPresent(win, extension, win.document.head))\n      .then(() => {\n        // If this service is provided by an element, then we can't depend on\n        // the service (they may not use the element).\n        if (opt_element) {\n          return getServicePromiseOrNull(win, id);\n        } else if (isElementScheduled(win, extension)) {\n          return getServicePromise(win, id);\n        }\n        return null;\n      });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {AmpEvents} from './amp-events';\nimport {Services} from './services';\nimport {\n  USER_ERROR_SENTINEL,\n  dev,\n  duplicateErrorIfNecessary,\n  isUserErrorEmbed,\n  isUserErrorMessage,\n} from './log';\nimport {experimentTogglesOrNull, getBinaryType, isCanary} from './experiments';\nimport {exponentialBackoff} from './exponential-backoff';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\nimport {\n  isLoadErrorMessage,\n} from './event-helper';\nimport {isProxyOrigin} from './url';\nimport {makeBodyVisible} from './style-installer';\nimport {startsWith} from './string';\nimport {triggerAnalyticsEvent} from './analytics';\nimport {urls} from './config';\n\n/**\n * @const {string}\n */\nconst CANCELLED = 'CANCELLED';\n\n/**\n * @const {string}\n */\nconst BLOCK_BY_CONSENT = 'BLOCK_BY_CONSENT';\n\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD = 0.001;\n\n/**\n * The threshold for errors throttled because nothing can be done about\n * them, but we'd still like to report the rough number.\n * @const {number}\n */\nconst USER_ERROR_THROTTLE_THRESHOLD = 0.1;\n\n\n/**\n * Collects error messages, so they can be included in subsequent reports.\n * That allows identifying errors that might be caused by previous errors.\n */\nlet accumulatedErrorMessages = self.AMPErrors || [];\n// Use a true global, to avoid multi-module inclusion issues.\nself.AMPErrors = accumulatedErrorMessages;\n\n/**\n * Pushes element into array, keeping at most the most recent limit elements\n *\n * @param {!Array<T>} array\n * @param {T} element\n * @param {number} limit\n * @template T\n */\nfunction pushLimit(array, element, limit) {\n  if (array.length >= limit) {\n    array.splice(0, array.length - limit + 1);\n  }\n  array.push(element);\n}\n\n/**\n * A wrapper around our exponentialBackoff, to lazy initialize it to avoid an\n * un-DCE'able side-effect.\n * @param {function()} work the function to execute after backoff\n * @return {number} the setTimeout id\n */\nlet reportingBackoff = function(work) {\n  // Set reportingBackoff as the lazy-created function. JS Vooodoooo.\n  reportingBackoff = exponentialBackoff(1.5);\n  return reportingBackoff(work);\n};\n\n/**\n * Attempts to stringify a value, falling back to String.\n * @param {*} value\n * @return {string}\n */\nfunction tryJsonStringify(value) {\n  try {\n    // Cast is fine, because we really don't care here. Just trying.\n    return JSON.stringify(/** @type {!JsonObject} */ (value));\n  } catch (e) {\n    return String(value);\n  }\n}\n\n/**\n * The true JS engine, as detected by inspecting an Error stack. This should be\n * used with the userAgent to tell definitely. I.e., Chrome on iOS is really a\n * Safari JS engine.\n */\nlet detectedJsEngine;\n\n/**\n * @param {!Window} win\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n */\nexport function reportErrorForWin(win, error, opt_associatedElement) {\n  reportError(error, opt_associatedElement);\n  if (error && !!win && isUserErrorMessage(error.message)\n      && !isUserErrorEmbed(error.message)) {\n    reportErrorToAnalytics(/** @type {!Error} */(error), win);\n  }\n}\n\n/**\n * Reports an error. If the error has an \"associatedElement\" property\n * the element is marked with the `i-amphtml-element-error` and displays\n * the message itself. The message is always send to the console.\n * If the error has a \"messageArray\" property, that array is logged.\n * This way one gets the native fidelity of the console for things like\n * elements instead of stringification.\n * @param {*} error\n * @param {!Element=} opt_associatedElement\n * @return {!Error}\n */\nexport function reportError(error, opt_associatedElement) {\n  try {\n    // Convert error to the expected type.\n    let isValidError;\n    if (error) {\n      if (error.message !== undefined) {\n        error = duplicateErrorIfNecessary(/** @type {!Error} */(error));\n        isValidError = true;\n      } else {\n        const origError = error;\n        error = new Error(tryJsonStringify(origError));\n        error.origError = origError;\n      }\n    } else {\n      error = new Error('Unknown error');\n    }\n    // Report if error is not an expected type.\n    if (!isValidError && getMode().localDev && !getMode().test) {\n      setTimeout(function() {\n        const rethrow = new Error(\n            '_reported_ Error reported incorrectly: ' + error);\n        throw rethrow;\n      });\n    }\n\n    if (error.reported) {\n      return /** @type {!Error} */ (error);\n    }\n    error.reported = true;\n\n    // Update element.\n    const element = opt_associatedElement || error.associatedElement;\n    if (element && element.classList) {\n      element.classList.add('i-amphtml-error');\n      if (getMode().development) {\n        element.classList.add('i-amphtml-element-error');\n        element.setAttribute('error-message', error.message);\n      }\n    }\n\n    // Report to console.\n    if (self.console) {\n      const output = (console.error || console.log);\n      if (error.messageArray) {\n        output.apply(console, error.messageArray);\n      } else {\n        if (element) {\n          output.call(console, error.message, element);\n        } else if (!getMode().minified) {\n          output.call(console, error.stack);\n        } else {\n          output.call(console, error.message);\n        }\n      }\n    }\n    if (element && element.dispatchCustomEventForTesting) {\n      element.dispatchCustomEventForTesting(AmpEvents.ERROR, error.message);\n    }\n\n    // 'call' to make linter happy. And .call to make compiler happy\n    // that expects some @this.\n    reportErrorToServer['call'](undefined, undefined, undefined, undefined,\n        undefined, error);\n  } catch (errorReportingError) {\n    setTimeout(function() {\n      throw errorReportingError;\n    });\n  }\n  return /** @type {!Error} */ (error);\n}\n\n/**\n * Returns an error for a cancellation of a promise.\n * @return {!Error}\n */\nexport function cancellation() {\n  return new Error(CANCELLED);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isCancellation(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, CANCELLED);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, CANCELLED);\n  }\n  return false;\n}\n\n/**\n * Returns an error for component blocked by consent\n * @return {!Error}\n */\nexport function blockedByConsentError() {\n  return new Error(BLOCK_BY_CONSENT);\n}\n\n/**\n * @param {*} errorOrMessage\n * @return {boolean}\n */\nexport function isBlockedByConsent(errorOrMessage) {\n  if (!errorOrMessage) {\n    return false;\n  }\n  if (typeof errorOrMessage == 'string') {\n    return startsWith(errorOrMessage, BLOCK_BY_CONSENT);\n  }\n  if (typeof errorOrMessage.message == 'string') {\n    return startsWith(errorOrMessage.message, BLOCK_BY_CONSENT);\n  }\n  return false;\n}\n\n\n/**\n * Install handling of global unhandled exceptions.\n * @param {!Window} win\n */\nexport function installErrorReporting(win) {\n  win.onerror = /** @type {!Function} */ (reportErrorToServer);\n  win.addEventListener('unhandledrejection', event => {\n    if (event.reason &&\n      (event.reason.message === CANCELLED ||\n      event.reason.message === BLOCK_BY_CONSENT)) {\n      event.preventDefault();\n      return;\n    }\n    reportError(event.reason || new Error('rejected promise ' + event));\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @this {!Window|undefined}\n */\nfunction reportErrorToServer(message, filename, line, col, error) {\n  // Make an attempt to unhide the body.\n  if (this && this.document) {\n    makeBodyVisible(this.document);\n  }\n  if (getMode().localDev || getMode().development || getMode().test) {\n    return;\n  }\n  let hasNonAmpJs = false;\n  try {\n    hasNonAmpJs = detectNonAmpJs(self);\n  } catch (ignore) {\n    // Ignore errors during error report generation.\n  }\n  if (hasNonAmpJs && Math.random() > 0.01) {\n    // Only report 1% of errors on pages with non-AMP JS.\n    // These errors can almost never be acted upon, but spikes such as\n    // due to buggy browser extensions may be helpful to notify authors.\n    return;\n  }\n  const data = getErrorReportData(message, filename, line, col, error,\n      hasNonAmpJs);\n  if (data) {\n    // Report the error to viewer if it has the capability. The data passed\n    // to the viewer is exactly the same as the data passed to the server\n    // below.\n    maybeReportErrorToViewer(this, data);\n    reportingBackoff(() => {\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', urls.errorReporting, true);\n      xhr.send(JSON.stringify(data));\n    });\n  }\n}\n\n/**\n * Passes the given error data to the viewer if the following criteria is met:\n * - The viewer is a trusted viewer\n * - The viewer has the `errorReporter` capability\n * - The AMP doc is in single doc mode\n * - The AMP doc is opted-in for error interception (`<html>` tag has the\n *   `report-errors-to-viewer` attribute)\n *\n * @param {!Window} win\n * @param {!JsonObject} data Data from `getErrorReportData`.\n * @return {!Promise<boolean>} `Promise<True>` if the error was sent to the\n *     viewer, `Promise<False>` otherwise.\n * @visibleForTesting\n */\nexport function maybeReportErrorToViewer(win, data) {\n  const ampdocService = Services.ampdocServiceFor(win);\n  if (!ampdocService.isSingleDoc()) {\n    return Promise.resolve(false);\n  }\n  const ampdocSingle = ampdocService.getAmpDoc();\n  const htmlElement = ampdocSingle.getRootNode().documentElement;\n  const docOptedIn = htmlElement.hasAttribute('report-errors-to-viewer');\n  if (!docOptedIn) {\n    return Promise.resolve(false);\n  }\n\n  const viewer = Services.viewerForDoc(ampdocSingle);\n  if (!viewer.hasCapability('errorReporter')) {\n    return Promise.resolve(false);\n  }\n\n  return viewer.isTrustedViewer().then(viewerTrusted => {\n    if (!viewerTrusted) {\n      return false;\n    }\n    viewer.sendMessage('error', data);\n    return true;\n  });\n}\n\n/**\n * Signature designed, so it can work with window.onerror\n * @param {string|undefined} message\n * @param {string|undefined} filename\n * @param {string|undefined} line\n * @param {string|undefined} col\n * @param {*|undefined} error\n * @param {boolean} hasNonAmpJs\n * @return {!JsonObject|undefined} The data to post\n * visibleForTesting\n */\nexport function getErrorReportData(message, filename, line, col, error,\n  hasNonAmpJs) {\n  let expected = false;\n  if (error) {\n    if (error.message) {\n      message = error.message;\n    } else {\n      // This should never be a string, but sometimes it is.\n      message = String(error);\n    }\n    // An \"expected\" error is still an error, i.e. some features are disabled\n    // or not functioning fully because of it. However, it's an expected\n    // error. E.g. as is the case with some browser API missing (storage).\n    // Thus, the error can be classified differently by log aggregators.\n    // The main goal is to monitor that an \"expected\" error doesn't deteriorate\n    // over time. It's impossible to completely eliminate it.\n    if (error.expected) {\n      expected = true;\n    }\n  }\n  if (!message) {\n    message = 'Unknown error';\n  }\n  if (/_reported_/.test(message)) {\n    return;\n  }\n  if (message == CANCELLED) {\n    return;\n  }\n\n  const detachedWindow = !(self && self.window);\n  const throttleBase = Math.random();\n\n  // We throttle load errors and generic \"Script error.\" errors\n  // that have no information and thus cannot be acted upon.\n  if (isLoadErrorMessage(message) ||\n    // See https://github.com/ampproject/amphtml/issues/7353\n    // for context.\n    message == 'Script error.' ||\n    // Window has become detached, really anything can happen\n    // at this point.\n    detachedWindow) {\n    expected = true;\n\n    if (throttleBase > NON_ACTIONABLE_ERROR_THROTTLE_THRESHOLD) {\n      return;\n    }\n  }\n\n  const isUserError = isUserErrorMessage(message);\n\n  // Only report a subset of user errors.\n  if (isUserError && throttleBase > USER_ERROR_THROTTLE_THRESHOLD) {\n    return;\n  }\n\n  // This is the App Engine app in\n  // https://github.com/ampproject/error-tracker\n  // It stores error reports via https://cloud.google.com/error-reporting/\n  // for analyzing production issues.\n  const data = /** @type {!JsonObject} */ (Object.create(null));\n  data['v'] = getMode().rtvVersion;\n  data['noAmp'] = hasNonAmpJs ? '1' : '0';\n  data['m'] = message.replace(USER_ERROR_SENTINEL, '');\n  data['a'] = isUserError ? '1' : '0';\n\n  // Errors are tagged with \"ex\" (\"expected\") label to allow loggers to\n  // classify these errors as benchmarks and not exceptions.\n  data['ex'] = expected ? '1' : '0';\n  data['dw'] = detachedWindow ? '1' : '0';\n\n  let runtime = '1p';\n  if (self.context && self.context.location) {\n    data['3p'] = '1';\n    runtime = '3p';\n  } else if (getMode().runtime) {\n    runtime = getMode().runtime;\n  }\n  data['rt'] = runtime;\n\n  // TODO(erwinm): Remove ca when all systems read `bt` instead of `ca` to\n  // identify js binary type.\n  data['ca'] = isCanary(self) ? '1' : '0';\n\n  // Pass binary type.\n  data['bt'] = getBinaryType(self);\n\n  if (self.location.ancestorOrigins && self.location.ancestorOrigins[0]) {\n    data['or'] = self.location.ancestorOrigins[0];\n  }\n  if (self.viewerState) {\n    data['vs'] = self.viewerState;\n  }\n  // Is embedded?\n  if (self.parent && self.parent != self) {\n    data['iem'] = '1';\n  }\n\n  if (self.AMP && self.AMP.viewer) {\n    const resolvedViewerUrl = self.AMP.viewer.getResolvedViewerUrl();\n    const messagingOrigin = self.AMP.viewer.maybeGetMessagingOrigin();\n    if (resolvedViewerUrl) {\n      data['rvu'] = resolvedViewerUrl;\n    }\n    if (messagingOrigin) {\n      data['mso'] = messagingOrigin;\n    }\n  }\n\n  if (!detectedJsEngine) {\n    detectedJsEngine = detectJsEngineFromStack();\n  }\n  data['jse'] = detectedJsEngine;\n\n  const exps = [];\n  const experiments = experimentTogglesOrNull(self);\n  for (const exp in experiments) {\n    const on = experiments[exp];\n    exps.push(`${exp}=${on ? '1' : '0'}`);\n  }\n  data['exps'] = exps.join(',');\n\n  if (error) {\n    const tagName = error.associatedElement\n      ? error.associatedElement.tagName\n      : 'u'; // Unknown\n    data['el'] = tagName;\n\n    if (error.args) {\n      data['args'] = JSON.stringify(error.args);\n    }\n\n    if (!isUserError && !error.ignoreStack && error.stack) {\n      data['s'] = error.stack;\n    }\n\n    error.message += ' _reported_';\n  } else {\n    data['f'] = filename || '';\n    data['l'] = line || '';\n    data['c'] = col || '';\n  }\n  data['r'] = self.document.referrer;\n  data['ae'] = accumulatedErrorMessages.join(',');\n  data['fr'] = self.location.originalHash || self.location.hash;\n\n  pushLimit(accumulatedErrorMessages, message, 25);\n\n  return data;\n}\n\n/**\n * Returns true if it appears like there is non-AMP JS on the\n * current page.\n * @param {!Window} win\n * @return {boolean}\n * @visibleForTesting\n */\nexport function detectNonAmpJs(win) {\n  const scripts = win.document.querySelectorAll('script[src]');\n  for (let i = 0; i < scripts.length; i++) {\n    if (!isProxyOrigin(scripts[i].src.toLowerCase())) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Resets accumulated error messages for testing\n */\nexport function resetAccumulatedErrorMessagesForTesting() {\n  accumulatedErrorMessages = [];\n}\n\n/**\n * Does a series of checks on the stack of an thrown error to determine the\n * JS engine that is currently running. This gives a bit more information than\n * just the UserAgent, since browsers often allow overriding it to \"emulate\"\n * mobile.\n * @return {string}\n * @visibleForTesting\n */\nexport function detectJsEngineFromStack() {\n  /** @constructor */\n  function Fn() {}\n  Fn.prototype.t = function() {\n    throw new Error('message');\n  };\n  const object = new Fn();\n  try {\n    object.t();\n  } catch (e) {\n    const {stack} = e;\n\n    // Safari only mentions the method name.\n    if (startsWith(stack, 't@')) {\n      return 'Safari';\n    }\n\n    // Firefox mentions \"prototype\".\n    if (stack.indexOf('.prototype.t@') > -1) {\n      return 'Firefox';\n    }\n\n    // IE looks like Chrome, but includes a context for the base stack line.\n    // Explicitly, we're looking for something like:\n    // \"    at Global code (https://example.com/app.js:1:200)\" or\n    // \"    at Anonymous function (https://example.com/app.js:1:200)\"\n    // vs Chrome which has:\n    // \"    at https://example.com/app.js:1:200\"\n    const last = stack.split('\\n').pop();\n    if (/\\bat .* \\(/i.test(last)) {\n      return 'IE';\n    }\n\n    // Finally, chrome includes the error message in the stack.\n    if (startsWith(stack, 'Error: message')) {\n      return 'Chrome';\n    }\n  }\n\n  return 'unknown';\n}\n\n/**\n * @param {!Error} error\n * @param {!Window} win\n */\nexport function reportErrorToAnalytics(error, win) {\n  if (isExperimentOn(win, 'user-error-reporting')) {\n    const vars = {\n      'errorName': error.name,\n      'errorMessage': error.message,\n    };\n    triggerAnalyticsEvent(getRootElement_(win), 'user-error', vars);\n  }\n}\n\n/**\n * @param {!Window} win\n * @return {!Element}\n * @private\n */\nfunction getRootElement_(win) {\n  const root = Services.ampdocServiceFor(win).getAmpDoc().getRootNode();\n  return dev().assertElement(root.documentElement || root.body || root);\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Whether addEventListener supports options or only takes capture as a boolean\n  * @type {boolean|undefined}\n  * @visibleForTesting\n  */\nlet optsSupported;\n\n/**\n * Listens for the specified event on the element.\n *\n * Do not use this directly. This method is implemented as a shared\n * dependency. Use `listen()` in either `event-helper` or `3p-frame-messaging`,\n * depending on your use case.\n *\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function internalListenImplementation(element, eventType, listener,\n  opt_evtListenerOpts) {\n  let localElement = element;\n  let localListener = listener;\n  /**\n   * @type {?Function}\n   */\n  let wrapped;\n\n  wrapped = event => {\n    try {\n      return localListener(event);\n    } catch (e) {\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n  };\n  const optsSupported = detectEvtListenerOptsSupport();\n  let capture = false;\n  if (opt_evtListenerOpts) {\n    capture = opt_evtListenerOpts.capture;\n  }\n  localElement.addEventListener(\n      eventType,\n      wrapped,\n      optsSupported ? opt_evtListenerOpts : capture\n  );\n  return () => {\n    if (localElement) {\n      localElement.removeEventListener(\n          eventType,\n          wrapped,\n          optsSupported ? opt_evtListenerOpts : capture\n      );\n    }\n    // Ensure these are GC'd\n    localListener = null;\n    localElement = null;\n    wrapped = null;\n  };\n}\n\n/**\n * Tests whether the browser supports options as an argument of addEventListener\n * or not.\n *\n * @return {boolean}\n */\nexport function detectEvtListenerOptsSupport() {\n  // Only run the test once\n  if (optsSupported !== undefined) {\n    return optsSupported;\n  }\n\n  optsSupported = false;\n  try {\n    // Test whether browser supports EventListenerOptions or not\n    const options = {\n      get capture() {\n        optsSupported = true;\n      },\n    };\n    self.addEventListener('test-options', null, options);\n    self.removeEventListener('test-options', null, options);\n  } catch (err) {\n    // EventListenerOptions are not supported\n  }\n  return optsSupported;\n}\n\n/**\n  * Resets the test for whether addEventListener supports options or not.\n  */\nexport function resetEvtListenerOptsSupportForTesting() {\n  optsSupported = undefined;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {internalListenImplementation} from './event-helper-listen';\nimport {user} from './log';\n\n/** @const {string}  */\nconst LOAD_FAILURE_PREFIX = 'Failed to load:';\n\n/**\n * Returns a CustomEvent with a given type and detail; supports fallback for IE.\n * @param {!Window} win\n * @param {string} type\n * @param {!JsonObject|string|undefined|null} detail\n * @param {EventInit=} opt_eventInit\n * @return {!Event}\n */\nexport function createCustomEvent(win, type, detail, opt_eventInit) {\n  const eventInit = /** @type {!CustomEventInit} */ ({detail});\n  Object.assign(eventInit, opt_eventInit);\n  // win.CustomEvent is a function on Edge, Chrome, FF, Safari but\n  // is an object on IE 11.\n  if (typeof win.CustomEvent == 'function') {\n    return new win.CustomEvent(type, eventInit);\n  } else {\n    // Deprecated fallback for IE.\n    const e = win.document.createEvent('CustomEvent');\n    e.initCustomEvent(\n        type, !!eventInit.bubbles, !!eventInit.cancelable, detail);\n    return e;\n  }\n}\n\n/**\n * Listens for the specified event on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listen(element, eventType, listener, opt_evtListenerOpts) {\n  return internalListenImplementation(\n      element, eventType, listener, opt_evtListenerOpts);\n}\n\n/**\n * Returns the data property of an event with the correct type.\n * @param {!Event|{data: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getData(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.data);\n}\n\n/**\n * Returns the detail property of an event with the correct type.\n * @param {!Event|{detail: !JsonObject}} event\n * @return {?JsonObject|string|undefined}\n */\nexport function getDetail(event) {\n  return /** @type {?JsonObject|string|undefined} */ (event.detail);\n}\n\n/**\n * Listens for the specified event on the element and removes the listener\n * as soon as event has been received.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {function(!Event)} listener\n * @param {Object=} opt_evtListenerOpts\n * @return {!UnlistenDef}\n */\nexport function listenOnce(element, eventType, listener, opt_evtListenerOpts) {\n  let localListener = listener;\n  const unlisten = internalListenImplementation(element, eventType, event => {\n    try {\n      localListener(event);\n    } finally {\n      // Ensure listener is GC'd\n      localListener = null;\n      unlisten();\n    }\n  }, opt_evtListenerOpts);\n  return unlisten;\n}\n\n\n/**\n * Returns  a promise that will resolve as soon as the specified event has\n * fired on the element.\n * @param {!EventTarget} element\n * @param {string} eventType\n * @param {Object=} opt_evtListenerOpts\n * @param {function(!UnlistenDef)=} opt_cancel An optional function that, when\n *     provided, will be called with the unlistener. This gives the caller\n *     access to the unlistener, so it may be called manually when necessary.\n * @return {!Promise<!Event>}\n */\nexport function listenOncePromise(element, eventType, opt_evtListenerOpts,\n  opt_cancel) {\n  let unlisten;\n  const eventPromise = new Promise(resolve => {\n    unlisten = listenOnce(element, eventType, resolve, opt_evtListenerOpts);\n  });\n  eventPromise.then(unlisten, unlisten);\n  if (opt_cancel) {\n    opt_cancel(unlisten);\n  }\n  return eventPromise;\n}\n\n\n/**\n * Whether the specified element/window has been loaded already.\n * @param {!Element|!Window} eleOrWindow\n * @return {boolean}\n */\nexport function isLoaded(eleOrWindow) {\n  return !!(eleOrWindow.complete || eleOrWindow.readyState == 'complete'\n      // If the passed in thing is a Window, infer loaded state from\n      //\n      || (eleOrWindow.document\n          && eleOrWindow.document.readyState == 'complete'));\n}\n\n/**\n * Returns a promise that will resolve or fail based on the eleOrWindow's 'load'\n * and 'error' events. Optionally this method takes a timeout, which will reject\n * the promise if the resource has not loaded by then.\n * @param {T} eleOrWindow Supports both Elements and as a special case Windows.\n * @return {!Promise<T>}\n * @template T\n */\nexport function loadPromise(eleOrWindow) {\n  let unlistenLoad;\n  let unlistenError;\n  if (isLoaded(eleOrWindow)) {\n    return Promise.resolve(eleOrWindow);\n  }\n  const loadingPromise = new Promise((resolve, reject) => {\n    // Listen once since IE 5/6/7 fire the onload event continuously for\n    // animated GIFs.\n    const {tagName} = eleOrWindow;\n    if (tagName === 'AUDIO' || tagName === 'VIDEO') {\n      unlistenLoad = listenOnce(eleOrWindow, 'loadstart', resolve);\n    } else {\n      unlistenLoad = listenOnce(eleOrWindow, 'load', resolve);\n    }\n    // For elements, unlisten on error (don't for Windows).\n    if (tagName) {\n      unlistenError = listenOnce(eleOrWindow, 'error', reject);\n    }\n  });\n\n  return loadingPromise.then(() => {\n    if (unlistenError) {\n      unlistenError();\n    }\n    return eleOrWindow;\n  }, () => {\n    if (unlistenLoad) {\n      unlistenLoad();\n    }\n    failedToLoad(eleOrWindow);\n  });\n}\n\n/**\n * Emit error on load failure.\n * @param {!Element|!Window} eleOrWindow Supports both Elements and as a special\n *     case Windows.\n */\nfunction failedToLoad(eleOrWindow) {\n  // Report failed loads as user errors so that they automatically go\n  // into the \"document error\" bucket.\n  let target = eleOrWindow;\n  if (target && target.src) {\n    target = target.src;\n  }\n  throw user().createError(LOAD_FAILURE_PREFIX, target);\n}\n\n/**\n * Returns true if this error message is was created for a load error.\n * @param {string} message An error message\n * @return {boolean}\n */\nexport function isLoadErrorMessage(message) {\n  return message.indexOf(LOAD_FAILURE_PREFIX) != -1;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Experiments system allows a developer to opt-in to test\n * features that are not yet fully tested.\n *\n * Experiments page: https://cdn.ampproject.org/experiments.html *\n */\n\nimport {getCookie, setCookie} from './cookies';\nimport {hasOwn} from './utils/object';\nimport {parseQueryString} from './url';\n\n/** @const {string} */\nconst COOKIE_NAME = 'AMP_EXP';\n\n/** @const {number} */\nconst COOKIE_MAX_AGE_DAYS = 180; // 6 month\n\n/** @const {time} */\nconst COOKIE_EXPIRATION_INTERVAL = COOKIE_MAX_AGE_DAYS * 24 * 60 * 60 * 1000;\n\n/** @const {string} */\nconst TOGGLES_WINDOW_PROPERTY = '__AMP__EXPERIMENT_TOGGLES';\n\n/**\n * @typedef {{\n *   isTrafficEligible: function(!Window):boolean,\n *   branches: !Array<string>\n * }}\n */\nexport let ExperimentInfo;\n\n/**\n * Whether we are in canary.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function isCanary(win) {\n  return !!(win.AMP_CONFIG && win.AMP_CONFIG.canary);\n}\n\n/**\n * Returns binary type, e.g., canary, control, or production.\n * @param {!Window} win\n * @return {string}\n */\nexport function getBinaryType(win) {\n  return win.AMP_CONFIG && win.AMP_CONFIG.type ?\n    win.AMP_CONFIG.type : 'unknown';\n}\n\n/**\n * Whether the specified experiment is on or off.\n * @param {!Window} win\n * @param {string} experimentId\n * @return {boolean}\n */\nexport function isExperimentOn(win, experimentId) {\n  const toggles = experimentToggles(win);\n  return !!toggles[experimentId];\n}\n\n/**\n * Toggles the experiment on or off. Returns the actual value of the experiment\n * after toggling is done.\n * @param {!Window} win\n * @param {string} experimentId\n * @param {boolean=} opt_on\n * @param {boolean=} opt_transientExperiment  Whether to toggle the\n *     experiment state \"transiently\" (i.e., for this page load only) or\n *     durably (by saving the experiment IDs to the cookie after toggling).\n *     Default: false (save durably).\n * @return {boolean} New state for experimentId.\n */\nexport function toggleExperiment(win, experimentId, opt_on,\n  opt_transientExperiment) {\n  const currentlyOn = isExperimentOn(win, /*OK*/experimentId);\n  const on = !!(opt_on !== undefined ? opt_on : !currentlyOn);\n  if (on != currentlyOn) {\n    const toggles = experimentToggles(win);\n    toggles[experimentId] = on;\n\n    if (!opt_transientExperiment) {\n      const cookieToggles = getExperimentTogglesFromCookie(win);\n      cookieToggles[experimentId] = on;\n      saveExperimentTogglesToCookie(win, cookieToggles);\n    }\n  }\n  return on;\n}\n\n/**\n * Calculate whether the experiment is on or off based off of the\n * cookieFlag or the global config frequency given.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nexport function experimentToggles(win) {\n  if (win[TOGGLES_WINDOW_PROPERTY]) {\n    return win[TOGGLES_WINDOW_PROPERTY];\n  }\n  win[TOGGLES_WINDOW_PROPERTY] = Object.create(null);\n  const toggles = win[TOGGLES_WINDOW_PROPERTY];\n\n  // Read the default config of this build.\n  if (win.AMP_CONFIG) {\n    for (const experimentId in win.AMP_CONFIG) {\n      const frequency = win.AMP_CONFIG[experimentId];\n      if (typeof frequency === 'number' && frequency >= 0 && frequency <= 1) {\n        toggles[experimentId] = Math.random() < frequency;\n      }\n    }\n  }\n  // Read document level override from meta tag.\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-doc-opt-in'])\n      && win.AMP_CONFIG['allow-doc-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-doc-opt-in'];\n    const meta =\n        win.document.head.querySelector('meta[name=\"amp-experiments-opt-in\"]');\n    if (meta) {\n      const optedInExperiments = meta.getAttribute('content').split(',');\n      for (let i = 0; i < optedInExperiments.length; i++) {\n        if (allowed.indexOf(optedInExperiments[i]) != -1) {\n          toggles[optedInExperiments[i]] = true;\n        }\n      }\n    }\n  }\n\n  Object.assign(toggles, getExperimentTogglesFromCookie(win));\n\n  if (win.AMP_CONFIG\n      && Array.isArray(win.AMP_CONFIG['allow-url-opt-in'])\n      && win.AMP_CONFIG['allow-url-opt-in'].length > 0) {\n    const allowed = win.AMP_CONFIG['allow-url-opt-in'];\n    const hash = win.location.originalHash || win.location.hash;\n    const params = parseQueryString(hash);\n    for (let i = 0; i < allowed.length; i++) {\n      const param = params[`e-${allowed[i]}`];\n      if (param == '1') {\n        toggles[allowed[i]] = true;\n      }\n      if (param == '0') {\n        toggles[allowed[i]] = false;\n      }\n    }\n  }\n  return toggles;\n}\n\n/**\n * Returns the cached experiments toggles, or null if they have not been\n * computed yet.\n * @param {!Window} win\n * @return {Object<string, boolean>}\n */\nexport function experimentTogglesOrNull(win) {\n  return win[TOGGLES_WINDOW_PROPERTY] || null;\n}\n\n/**\n * Returns a set of experiment IDs currently on.\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n */\nfunction getExperimentTogglesFromCookie(win) {\n  const experimentCookie = getCookie(win, COOKIE_NAME);\n  const tokens = experimentCookie ? experimentCookie.split(/\\s*,\\s*/g) : [];\n\n  const toggles = Object.create(null);\n  for (let i = 0; i < tokens.length; i++) {\n    if (tokens[i].length == 0) {\n      continue;\n    }\n    if (tokens[i][0] == '-') {\n      toggles[tokens[i].substr(1)] = false;\n    } else {\n      toggles[tokens[i]] = true;\n    }\n  }\n\n  return toggles;\n}\n\n/**\n * Saves a set of experiment IDs currently on.\n * @param {!Window} win\n * @param {!Object<string, boolean>} toggles\n */\nfunction saveExperimentTogglesToCookie(win, toggles) {\n  const experimentIds = [];\n  for (const experiment in toggles) {\n    experimentIds.push((toggles[experiment] === false ? '-' : '') + experiment);\n  }\n\n  setCookie(win, COOKIE_NAME, experimentIds.join(','),\n      Date.now() + COOKIE_EXPIRATION_INTERVAL, {\n        // Set explicit domain, so the cookie gets send to sub domains.\n        domain: win.location.hostname,\n        allowOnProxyOrigin: true,\n      });\n}\n\n/**\n * See getExperimentTogglesFromCookie().\n * @param {!Window} win\n * @return {!Object<string, boolean>}\n * @visibleForTesting\n */\nexport function getExperimentToglesFromCookieForTesting(win) {\n  return getExperimentTogglesFromCookie(win);\n}\n\n/**\n * Resets the experimentsToggle cache for testing purposes.\n * @param {!Window} win\n * @visibleForTesting\n */\nexport function resetExperimentTogglesForTesting(win) {\n  setCookie(win, COOKIE_NAME, '', 0, {\n    domain: win.location.hostname,\n  });\n  win[TOGGLES_WINDOW_PROPERTY] = null;\n}\n\n/**\n * In some browser implementations of Math.random(), sequential calls of\n * Math.random() are correlated and can cause a bias.  In particular,\n * if the previous random() call was < 0.001 (as it will be if we select\n * into an experiment), the next value could be less than 0.5 more than\n * 50.7% of the time.  This provides an implementation that roots down into\n * the crypto API, when available, to produce less biased samples.\n *\n * @return {number} Pseudo-random floating-point value on the range [0, 1).\n */\nfunction slowButAccuratePrng() {\n  // TODO(tdrl): Implement.\n  return Math.random();\n}\n\n/**\n * Container for alternate random number generator implementations.  This\n * allows us to set an \"accurate\" PRNG for branch selection, but to mock it\n * out easily in tests.\n *\n * @visibleForTesting\n * @const {!{accuratePrng: function():number}}\n */\nexport const RANDOM_NUMBER_GENERATORS = {\n  accuratePrng: slowButAccuratePrng,\n};\n\n/**\n * Selects, uniformly at random, a single item from the array.\n * @param {!Array<string>} arr Object to select from.\n * @return {?string} Single item from arr or null if arr was empty.\n */\nfunction selectRandomItem(arr) {\n  const rn = RANDOM_NUMBER_GENERATORS.accuratePrng();\n  return arr[Math.floor(rn * arr.length)] || null;\n}\n\n/**\n * Selects which page-level experiment branches are enabled. If a given\n * experiment name is already set (including to the null / no branches selected\n * state), this won't alter its state.\n *\n * Check whether a given experiment is set using isExperimentOn(win,\n * experimentName) and, if it is on, look for which branch is selected in\n * win.experimentBranches[experimentName].\n *\n * @param {!Window} win Window context on which to save experiment\n *     selection state.\n * @param {!Object<string, !ExperimentInfo>} experiments  Set of experiments to\n *     configure for this page load.\n * @return {!Object<string, string>} Map of experiment names to selected\n *     branches.\n */\nexport function randomlySelectUnsetExperiments(win, experiments) {\n  win.experimentBranches = win.experimentBranches || {};\n  const selectedExperiments = {};\n  for (const experimentName in experiments) {\n    // Skip experimentName if it is not a key of experiments object or if it\n    // has already been populated by some other property.\n    if (!hasOwn(experiments, experimentName)) {\n      continue;\n    }\n    if (hasOwn(win.experimentBranches, experimentName)) {\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n      continue;\n    }\n\n    if (!experiments[experimentName].isTrafficEligible ||\n        !experiments[experimentName].isTrafficEligible(win)) {\n      win.experimentBranches[experimentName] = null;\n      continue;\n    }\n\n    // If we're in the experiment, but we haven't already forced a specific\n    // experiment branch (e.g., via a test setup), then randomize the branch\n    // choice.\n    if (!win.experimentBranches[experimentName] &&\n      isExperimentOn(win, /*OK*/experimentName)) {\n      const {branches} = experiments[experimentName];\n      win.experimentBranches[experimentName] = selectRandomItem(branches);\n      selectedExperiments[experimentName] =\n          win.experimentBranches[experimentName];\n    }\n  }\n  return selectedExperiments;\n}\n\n/**\n * Returns the experiment branch enabled for the given experiment ID.\n * For example, 'control' or 'experiment'.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @return {?string} Active experiment branch ID for experimentName (possibly\n *     null if experimentName has been tested but no branch was enabled).\n */\nexport function getExperimentBranch(win, experimentName) {\n  return win.experimentBranches ? win.experimentBranches[experimentName] : null;\n}\n\n/**\n * Force enable (or disable) a specific branch of a given experiment name.\n * Disables the experiment name altogether if branchId is falseish.\n *\n * @param {!Window} win Window context to check for experiment state.\n * @param {string} experimentName Name of the experiment to check.\n * @param {?string} branchId ID of branch to force or null to disable\n *     altogether.\n * @visibleForTesting\n */\nexport function forceExperimentBranch(win, experimentName, branchId) {\n  win.experimentBranches = win.experimentBranches || {};\n  toggleExperiment(win, experimentName, !!branchId, true);\n  win.experimentBranches[experimentName] = branchId;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(function()): number} Function that when invoked will\n *     call the passed in function. On every invocation the next\n *     invocation of the passed in function will be exponentially\n *     later. Returned function returns timeout id.\n */\nexport function exponentialBackoff(opt_base) {\n  const getTimeout = exponentialBackoffClock(opt_base);\n  return work => {\n    return setTimeout(work, getTimeout());\n  };\n}\n\n/**\n * @param {number=} opt_base Exponential base. Defaults to 2.\n * @return {function(): number} Function that when invoked will return\n *    a number that exponentially grows per invocation.\n */\nexport function exponentialBackoffClock(opt_base) {\n  const base = opt_base || 2;\n  let count = 0;\n  return () => {\n    let wait = Math.pow(base, count++);\n    wait += getJitter(wait);\n    return wait * 1000;\n  };\n}\n\n/**\n * Add jitter to avoid the thundering herd. This can e.g. happen when\n * we poll a backend and it fails for everyone at the same time.\n * We add up to 30% (default) longer or shorter than the given time.\n *\n * @param {number} wait the amount if base milliseconds\n * @param {number=} opt_perc the min/max percentage to add or sutract\n * @return {number}\n */\nexport function getJitter(wait, opt_perc) {\n  opt_perc = opt_perc || .3;\n  let jitter = wait * opt_perc * Math.random();\n  if (Math.random() > .5) {\n    jitter *= -1;\n  }\n  return jitter;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CommonSignals} from './common-signals';\nimport {Services} from './services';\nimport {\n  createElementWithAttributes,\n  removeElement,\n} from './dom';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {isArray, toWin} from './types';\nimport {triggerAnalyticsEvent} from './analytics';\n\n/**\n * Method to create scoped analytics element for any element.\n * TODO: Make this function private\n * @param {!Element} parentElement\n * @param {!JsonObject} config\n * @param {boolean=} loadAnalytics\n * @param {boolean=} disableImmediate\n * @return {!Element} created analytics element\n */\nexport function insertAnalyticsElement(\n  parentElement, config, loadAnalytics = false, disableImmediate = false) {\n  const doc = /** @type {!Document} */ (parentElement.ownerDocument);\n  const analyticsElem = createElementWithAttributes(\n      doc,\n      'amp-analytics', dict({\n        'sandbox': 'true',\n        'trigger': disableImmediate ? '' : 'immediate',\n      }));\n  const scriptElem = createElementWithAttributes(\n      doc,\n      'script', dict({\n        'type': 'application/json',\n      }));\n  scriptElem.textContent = JSON.stringify(config);\n  analyticsElem.appendChild(scriptElem);\n  analyticsElem.CONFIG = config;\n\n  // Force load analytics extension if script not included in page.\n  if (loadAnalytics) {\n    // Get Extensions service and force load analytics extension.\n    const extensions =\n        Services.extensionsFor(toWin(parentElement.ownerDocument.defaultView));\n    const ampdoc = Services.ampdoc(parentElement);\n    extensions./*OK*/installExtensionForDoc(ampdoc, 'amp-analytics');\n  } else {\n    Services.analyticsForDocOrNull(parentElement).then(analytics => {\n      dev().assert(analytics);\n    });\n  }\n  parentElement.appendChild(analyticsElem);\n  return analyticsElem;\n}\n\n/**\n * A class that handles customEvent reporting of extension element through\n * amp-analytics. This class is not exposed to extension element directly to\n * restrict the genration of the config Please use CustomEventReporterBuilder to\n * build a CustomEventReporter instance.\n */\nclass CustomEventReporter {\n  /**\n   * @param {!Element} parent\n   * @param {!JsonObject} config\n   */\n  constructor(parent, config) {\n    dev().assert(config['triggers'], 'Config must have triggers defined');\n    /** @private {string} */\n    this.id_ = parent.getResourceId();\n\n    /** @private {!AmpElement} */\n    this.parent_ = parent;\n\n    /** @private {JsonObject} */\n    this.config_ = config;\n\n    for (const event in config['triggers']) {\n      const eventType = config['triggers'][event]['on'];\n      dev().assert(eventType,\n          'CustomEventReporter config must specify trigger eventType');\n      const newEventType = this.getEventTypeInSandbox_(eventType);\n      config['triggers'][event]['on'] = newEventType;\n    }\n\n    this.parent_.signals().whenSignal(CommonSignals.LOAD_START).then(() => {\n      insertAnalyticsElement(this.parent_, config, false);\n    });\n  }\n\n  /**\n   * @param {string} eventType\n   * @param {!Object<string, string>=} opt_vars A map of vars and their values.\n   */\n  trigger(eventType, opt_vars) {\n    dev().assert(this.config_['triggers'][eventType],\n        'Cannot trigger non initiated eventType');\n    triggerAnalyticsEvent(this.parent_,\n        this.getEventTypeInSandbox_(eventType), opt_vars);\n  }\n  /**\n   * @param {string} eventType\n   * @return {string}\n   */\n  getEventTypeInSandbox_(eventType) {\n    return `sandbox-${this.id_}-${eventType}`;\n  }\n}\n\n\n/**\n * A builder class that enable extension elements to easily build and get a\n * CustomEventReporter instance. Its constructor requires the parent AMP\n * element. It provides two methods #track() and #build() to build the\n * CustomEventReporter instance.\n */\nexport class CustomEventReporterBuilder {\n  /** @param {!AmpElement} parent */\n  constructor(parent) {\n\n    /** @private {!AmpElement} */\n    this.parent_ = parent;\n\n    /** @private {?JsonObject} */\n    this.config_ = /** @type {JsonObject} */ ({\n      'requests': {},\n      'triggers': {},\n    });\n  }\n\n  /**\n   * The #track() method takes in a unique custom-event name, and the\n   * corresponding request url (or an array of request urls). One can call\n   * #track() multiple times with different eventType name (order doesn't\n   * matter) before #build() is called.\n   * @param {string} eventType\n   * @param {string|!Array<string>} request\n   */\n  track(eventType, request) {\n    request = isArray(request) ? request : [request];\n    dev().assert(!this.config_['triggers'][eventType],\n        'customEventReporterBuilder should not track same eventType twice');\n    const requestList = [];\n    for (let i = 0; i < request.length; i++) {\n      const requestName = `${eventType}-request-${i}`;\n      this.config_['requests'][requestName] = request[i];\n      requestList.push(requestName);\n    }\n    this.config_['triggers'][eventType] = {\n      'on': eventType,\n      'request': requestList,\n    };\n    return this;\n  }\n\n  /**\n   * Call the #build() method to build and get the CustomEventReporter instance.\n   * One CustomEventReporterBuilder instance can only build one reporter, which\n   * means #build() should only be called once after all eventType are added.\n   */\n  build() {\n    dev().assert(this.config_, 'CustomEventReporter already built');\n    const report = new CustomEventReporter(\n        this.parent_, /** @type {!JsonObject} */ (this.config_));\n    this.config_ = null;\n    return report;\n  }\n}\n\n\n/**\n * A helper method that should be used by all extension elements to add their\n * sandbox analytics tracking. This method takes care of insert and remove the\n * analytics tracker at the right time of the element lifecycle.\n * @param {!AmpElement} element\n * @param {!Promise<!JsonObject>} promise\n */\nexport function useAnalyticsInSandbox(element, promise) {\n  let analyticsElement = null;\n  let configPromise = promise;\n  // Listener to LOAD_START signal. Insert analytics element on LOAD_START\n  element.signals().whenSignal(CommonSignals.LOAD_START).then(() => {\n    if (analyticsElement || !configPromise) {\n      return;\n    }\n    configPromise.then(config => {\n      if (!configPromise) {\n        // If config promise resolve after unload, do nothing.\n        return;\n      }\n      configPromise = null;\n      analyticsElement = insertAnalyticsElement(element, config, false);\n    });\n  });\n\n  // Listener to UNLOAD signal. Destroy remove element on UNLOAD\n  element.signals().whenSignal(CommonSignals.UNLOAD).then(() => {\n    configPromise = null;\n    if (analyticsElement) {\n      removeElement(analyticsElement);\n      analyticsElement = null;\n    }\n  });\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CommonSignals} from './common-signals';\nimport {Observable} from './observable';\nimport {Services} from './services';\nimport {Signals} from './utils/signals';\nimport {closestBySelector, escapeHtml} from './dom';\nimport {dev, rethrowAsync, user} from './log';\nimport {disposeServicesForEmbed, getTopWindow} from './service';\nimport {isDocumentReady} from './document-ready';\nimport {layoutRectLtwh, moveLayoutRect} from './layout-rect';\nimport {loadPromise} from './event-helper';\nimport {\n  px,\n  resetStyles,\n  setImportantStyles,\n  setStyle,\n  setStyles,\n} from './style';\nimport {toWin} from './types';\n\n\n/** @const {string} */\nconst EMBED_PROP = '__AMP_EMBED__';\n\n/** @const {!Array<string>} */\nconst EXCLUDE_INI_LOAD =\n    ['AMP-AD', 'AMP-ANALYTICS', 'AMP-PIXEL', 'AMP-AD-EXIT'];\n\n\n/**\n * Parameters used to create the new \"friendly iframe\" embed.\n * - html: The complete content of an AMP embed, which is itself an AMP\n *   document. Can include whatever is normally allowed in an AMP document,\n *   except for AMP `<script>` declarations. Those should be passed as an\n *   array of `extensionIds`.\n * - extensionsIds: An optional array of AMP extension IDs used in this embed.\n * - fonts: An optional array of fonts used in this embed.\n *\n * @typedef {{\n *   host: (?AmpElement|undefined),\n *   url: string,\n *   html: string,\n *   extensionIds: (?Array<string>|undefined),\n *   fonts: (?Array<string>|undefined),\n * }}\n */\nexport let FriendlyIframeSpec;\n\n\n/**\n * @type {boolean|undefined}\n * @visibleForTesting\n */\nlet srcdocSupported;\n\n/**\n * @param {boolean|undefined} val\n * @visibleForTesting\n */\nexport function setSrcdocSupportedForTesting(val) {\n  srcdocSupported = val;\n}\n\n/**\n * Returns `true` if the Friendly Iframes are supported.\n * @return {boolean}\n */\nfunction isSrcdocSupported() {\n  if (srcdocSupported === undefined) {\n    srcdocSupported = 'srcdoc' in HTMLIFrameElement.prototype;\n  }\n  return srcdocSupported;\n}\n\n\n/**\n * Sets whether the embed is currently visible. The interpretation of visibility\n * is up to the embed parent. However, most of typical cases would rely on\n * whether the embed is currently in the viewport.\n * @param {!FriendlyIframeEmbed} embed\n * @param {boolean} visible\n * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.\n */\nexport function setFriendlyIframeEmbedVisible(embed, visible) {\n  embed.setVisible_(visible);\n}\n\n\n/**\n * Returns the embed created using `installFriendlyIframeEmbed` or `null`.\n * Caution: This will only return the FIE after the iframe has 'loaded'. If you\n * are checking before this signal you may be in a race condition that returns\n * null.\n * @param {!HTMLIFrameElement} iframe\n * @return {?FriendlyIframeEmbed}\n */\nexport function getFriendlyIframeEmbedOptional(iframe) {\n  return /** @type {?FriendlyIframeEmbed} */ (iframe[EMBED_PROP]);\n}\n\n\n/**\n * Creates the requested \"friendly iframe\" embed. Returns the promise that\n * will be resolved as soon as the embed is available. The actual\n * initialization of the embed will start as soon as the `iframe` is added\n * to the DOM.\n * @param {!HTMLIFrameElement} iframe\n * @param {!Element} container\n * @param {!FriendlyIframeSpec} spec\n * @param {function(!Window)=} opt_preinstallCallback\n * @return {!Promise<!FriendlyIframeEmbed>}\n */\nexport function installFriendlyIframeEmbed(iframe, container, spec,\n  opt_preinstallCallback) {\n  /** @const {!Window} */\n  const win = getTopWindow(toWin(iframe.ownerDocument.defaultView));\n  /** @const {!./service/extensions-impl.Extensions} */\n  const extensions = Services.extensionsFor(win);\n\n  setStyle(iframe, 'visibility', 'hidden');\n  iframe.setAttribute('referrerpolicy', 'unsafe-url');\n\n  // Pre-load extensions.\n  if (spec.extensionIds) {\n    spec.extensionIds.forEach(\n        extensionId => extensions.preloadExtension(extensionId));\n  }\n\n  const html = mergeHtml(spec);\n\n  // Receive the signal when iframe is ready: it's document is formed.\n  iframe.onload = () => {\n    // Chrome does not reflect the iframe readystate.\n    iframe.readyState = 'complete';\n  };\n  const registerViolationListener = () => {\n    iframe.contentWindow.addEventListener('securitypolicyviolation',\n        violationEvent => {\n          dev().warn('FIE', 'security policy violation', violationEvent);\n        });\n  };\n  let loadedPromise;\n  if (isSrcdocSupported()) {\n    iframe.srcdoc = html;\n    loadedPromise = loadPromise(iframe);\n    container.appendChild(iframe);\n    registerViolationListener();\n  } else {\n    iframe.src = 'about:blank';\n    container.appendChild(iframe);\n    const childDoc = iframe.contentWindow.document;\n    childDoc.open();\n    registerViolationListener();\n    childDoc.write(html);\n    // With document.write, `iframe.onload` arrives almost immediately, thus\n    // we need to wait for child's `window.onload`.\n    loadedPromise = loadPromise(iframe.contentWindow);\n    childDoc.close();\n  }\n\n  // Wait for document ready signal.\n  // This is complicated due to crbug.com/649201 on Chrome and a similar issue\n  // on Safari where newly created document's `readyState` immediately equals\n  // `complete`, even though the document itself is not yet available. There's\n  // no other reliable signal for `readyState` in a child window and thus\n  // we have to fallback to polling.\n  let readyPromise;\n  if (isIframeReady(iframe)) {\n    readyPromise = Promise.resolve();\n  } else {\n    readyPromise = new Promise(resolve => {\n      /** @const {number} */\n      const interval = win.setInterval(() => {\n        if (isIframeReady(iframe)) {\n          resolve();\n          win.clearInterval(interval);\n        }\n      }, /* milliseconds */ 5);\n\n      // For safety, make sure we definitely stop polling when child doc is\n      // loaded.\n      loadedPromise.catch(error => {\n        rethrowAsync(error);\n      }).then(() => {\n        resolve();\n        win.clearInterval(interval);\n      });\n    });\n  }\n\n  return readyPromise.then(() => {\n    const embed = new FriendlyIframeEmbed(iframe, spec, loadedPromise);\n    iframe[EMBED_PROP] = embed;\n\n    const childWin = /** @type {!Window} */ (iframe.contentWindow);\n    // Add extensions.\n    extensions.installExtensionsInChildWindow(\n        childWin, spec.extensionIds || [], opt_preinstallCallback);\n    // Ready to be shown.\n    embed.startRender_();\n    return embed;\n  });\n}\n\n\n/**\n * Returns `true` when iframe is ready.\n * @param {!HTMLIFrameElement} iframe\n * @return {boolean}\n */\nfunction isIframeReady(iframe) {\n  // This is complicated due to crbug.com/649201 on Chrome and a similar issue\n  // on Safari where newly created document's `readyState` immediately equals\n  // `complete`, even though the document itself is not yet available. There's\n  // no other reliable signal for `readyState` in a child window and thus\n  // the best way to check is to see the contents of the body.\n  const childDoc = iframe.contentWindow && iframe.contentWindow.document;\n  return !!(childDoc &&\n      isDocumentReady(childDoc) &&\n      childDoc.body &&\n      childDoc.body.firstChild);\n}\n\n\n/**\n * Merges base and fonts into html document.\n * @param {!FriendlyIframeSpec} spec\n */\nfunction mergeHtml(spec) {\n  const originalHtml = spec.html;\n  const originalHtmlUp = originalHtml.toUpperCase();\n\n  // Find the insertion point.\n  let ip = originalHtmlUp.indexOf('<HEAD');\n  if (ip != -1) {\n    ip = originalHtmlUp.indexOf('>', ip + 1) + 1;\n  }\n  if (ip == -1) {\n    ip = originalHtmlUp.indexOf('<BODY');\n  }\n  if (ip == -1) {\n    ip = originalHtmlUp.indexOf('<HTML');\n    if (ip != -1) {\n      ip = originalHtmlUp.indexOf('>', ip + 1) + 1;\n    }\n  }\n\n  const result = [];\n\n  // Preambule.\n  if (ip > 0) {\n    result.push(originalHtml.substring(0, ip));\n  }\n\n  // Add <BASE> tag.\n  result.push(`<base href=\"${escapeHtml(spec.url)}\">`);\n\n  // Load fonts.\n  if (spec.fonts) {\n    spec.fonts.forEach(font => {\n      result.push(\n          `<link href=\"${escapeHtml(font)}\" rel=\"stylesheet\" type=\"text/css\">`);\n    });\n  }\n\n  // Load CSP\n  result.push('<meta http-equiv=Content-Security-Policy ' +\n      'content=\"script-src \\'none\\';object-src \\'none\\';child-src \\'none\\'\">');\n\n  // Postambule.\n  if (ip > 0) {\n    result.push(originalHtml.substring(ip));\n  } else {\n    result.push(originalHtml);\n  }\n\n  return result.join('');\n}\n\n\n/**\n * Exposes `mergeHtml` for testing purposes.\n * @param {!FriendlyIframeSpec} spec\n * @visibleForTesting\n */\nexport function mergeHtmlForTesting(spec) {\n  return mergeHtml(spec);\n}\n\n\n/**\n * A \"friendly iframe\" embed. This is the iframe that's fully accessible to\n * the AMP runtime. It's similar to Shadow DOM in many respects, but it also\n * provides iframe/viewport measurements and enables the use of `vh`, `vw` and\n * `@media` CSS.\n *\n * The friendly iframe is managed by the top-level AMP Runtime. When it's\n * destroyed, the `destroy` method must be called to free up the shared\n * resources.\n */\nexport class FriendlyIframeEmbed {\n\n  /**\n   * @param {!HTMLIFrameElement} iframe\n   * @param {!FriendlyIframeSpec} spec\n   * @param {!Promise} loadedPromise\n   */\n  constructor(iframe, spec, loadedPromise) {\n    /** @const {!HTMLIFrameElement} */\n    this.iframe = iframe;\n\n    /** @const {!Window} */\n    this.win = /** @type{!Window} */(iframe.contentWindow);\n\n    /** @const {!FriendlyIframeSpec} */\n    this.spec = spec;\n\n    /** @const {?AmpElement} */\n    this.host = spec.host || null;\n\n    /** @const @private {time} */\n    this.startTime_ = Date.now();\n\n    /**\n     * Starts out as invisible. The interpretation of this flag is up to\n     * the emded parent.\n     * @private {boolean}\n     */\n    this.visible_ = false;\n\n    /** @private {!Observable<boolean>} */\n    this.visibilityObservable_ = new Observable();\n\n    /** @private @const */\n    this.signals_ = this.host ? this.host.signals() : new Signals();\n\n    /** @private @const {!Promise} */\n    this.winLoadedPromise_ = Promise.all([loadedPromise, this.whenReady()]);\n  }\n\n  /**\n   * Ensures that all resources from this iframe have been released.\n   */\n  destroy() {\n    Services.resourcesForDoc(this.iframe).removeForChildWindow(this.win);\n    disposeServicesForEmbed(this.win);\n  }\n\n  /**\n   * @return {time}\n   */\n  getStartTime() {\n    return this.startTime_;\n  }\n\n  /**\n   * Returns the base URL for the embedded document.\n   * @return {string}\n   */\n  getUrl() {\n    return this.spec.url;\n  }\n\n  /** @return {!Signals} */\n  signals() {\n    return this.signals_;\n  }\n\n  /**\n   * Returns a promise that will resolve when the embed document is ready.\n   * Notice that this signal coincides with the embed's `render-start`.\n   * @return {!Promise}\n   */\n  whenReady() {\n    return this.signals_.whenSignal(CommonSignals.RENDER_START);\n  }\n\n  /**\n   * Returns a promise that will resolve when the child window's `onload` event\n   * has been emitted. In friendly iframes this typically only includes font\n   * loading.\n   * @return {!Promise}\n   */\n  whenWindowLoaded() {\n    return this.winLoadedPromise_;\n  }\n\n  /**\n   * Returns a promise that will resolve when the initial load  of the embed's\n   * content has been completed.\n   * @return {!Promise}\n   */\n  whenIniLoaded() {\n    return this.signals_.whenSignal(CommonSignals.INI_LOAD);\n  }\n\n  /**\n   * @private\n   * @restricted\n   */\n  startRender_() {\n    if (this.host) {\n      this.host.renderStarted();\n    } else {\n      this.signals_.signal(CommonSignals.RENDER_START);\n    }\n    setStyle(this.iframe, 'visibility', '');\n    if (this.win.document && this.win.document.body) {\n      this.win.document.documentElement.classList.add('i-amphtml-fie');\n      setStyles(dev().assertElement(this.win.document.body), {\n        opacity: 1,\n        visibility: 'visible',\n        animation: 'none',\n      });\n    }\n\n    // Initial load signal signal.\n    let rect;\n    if (this.host) {\n      rect = this.host.getLayoutBox();\n    } else {\n      rect = layoutRectLtwh(\n          0, 0,\n          this.win./*OK*/innerWidth,\n          this.win./*OK*/innerHeight);\n    }\n    Promise.all([\n      this.whenReady(),\n      whenContentIniLoad(this.iframe, this.win, rect),\n    ]).then(() => {\n      this.signals_.signal(CommonSignals.INI_LOAD);\n    });\n  }\n\n  /**\n   * Whether the embed is currently visible. The interpretation of visibility\n   * is up to the embed parent. However, most of typical cases would rely on\n   * whether the embed is currently in the viewport.\n   * @return {boolean}\n   * TODO(dvoytenko): Re-evaluate and probably drop once layers are ready.\n   */\n  isVisible() {\n    return this.visible_;\n  }\n\n  /**\n   * See `isVisible` for more info.\n   * @param {function(boolean)} handler\n   * @return {!UnlistenDef}\n   */\n  onVisibilityChanged(handler) {\n    return this.visibilityObservable_.add(handler);\n  }\n\n  /**\n   * @param {boolean} visible\n   * @private\n   * @restricted\n   */\n  setVisible_(visible) {\n    if (this.visible_ != visible) {\n      this.visible_ = visible;\n      this.visibilityObservable_.fire(this.visible_);\n    }\n  }\n\n  /**\n   * @return {!HTMLBodyElement}\n   * @visibleForTesting\n   */\n  getBodyElement() {\n    return /** @type {!HTMLBodyElement} */ (\n      (this.iframe.contentDocument || this.iframe.contentWindow.document)\n          .body);\n  }\n\n  /**\n   * @return {!./service/resources-impl.Resources}\n   * @private\n   */\n  getResources_() {\n    return Services.resourcesForDoc(this.iframe);\n  }\n\n  /**\n   * Runs a measure/mutate cycle ensuring that the iframe change is propagated\n   * to the resource manager.\n   * @param {{measure: (function()|undefined), mutate: function()}} task\n   * @return {!Promise}\n   * @private\n   */\n  measureMutate_(task) {\n    return this.getResources_().measureMutateElement(this.iframe,\n        task.measure || null, task.mutate);\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  enterFullOverlayMode() {\n    const ampAdParent = dev().assertElement(this.iframe.parentNode);\n\n    // Security assertion. Otherwise any 3p frame could request lighbox mode.\n    user().assert(ampAdParent.tagName.toLowerCase() == 'amp-ad',\n        'Only <amp-ad> is allowed to enter lightbox mode.');\n\n    const bodyStyle = {\n      'background': 'transparent',\n      'position': 'absolute',\n      'bottom': 'auto',\n      'right': 'auto',\n\n      // Set for replacing with vsync values.\n      'top': '',\n      'left': '',\n      'width': '',\n      'height': '',\n    };\n\n    const iframeStyle = {\n      'position': 'fixed',\n      'left': 0,\n      'right': 0,\n      'bottom': 0,\n      'width': '100vw',\n      'top': 0,\n      'height': '100vh',\n    };\n\n    return this.measureMutate_({\n      measure: () => {\n        const rect = this.host ?\n          this.host.getLayoutBox() :\n          this.iframe./*OK*/getBoundingClientRect();\n\n        // Offset by scroll top as iframe will be position: fixed.\n        const dy = -Services.viewportForDoc(this.iframe).getScrollTop();\n        const {top, left, width, height} = moveLayoutRect(rect, /* dx */ 0, dy);\n\n        // Offset body by header height to prevent visual jump.\n        Object.assign(bodyStyle, {\n          'top': px(top),\n          'left': px(left),\n          'width': px(width),\n          'height': px(height),\n        });\n      },\n      mutate: () => {\n        // !important to prevent abuse e.g. box @ ltwh = 0, 0, 0, 0\n        setImportantStyles(this.iframe, iframeStyle);\n\n        // We need to override runtime-level !important rules\n        setImportantStyles(this.getBodyElement(), bodyStyle);\n      },\n    });\n  }\n\n  /**\n   * @return {!Promise}\n   */\n  leaveFullOverlayMode() {\n    return this.measureMutate_({\n      mutate: () => {\n        resetStyles(this.iframe, [\n          'position',\n          'left',\n          'right',\n          'top',\n          'bottom',\n          'width',\n          'height',\n        ]);\n\n        // we're not resetting background here as we need to set it to\n        // transparent permanently.\n        resetStyles(this.getBodyElement(), [\n          'position',\n          'top',\n          'left',\n          'width',\n          'height',\n          'bottom',\n          'right',\n        ]);\n      },\n    });\n  }\n}\n\n/**\n * Returns the promise that will be resolved when all content elements\n * have been loaded in the initially visible set.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {!Window} hostWin\n * @param {!./layout-rect.LayoutRectDef} rect\n * @return {!Promise}\n */\nexport function whenContentIniLoad(elementOrAmpDoc, hostWin, rect) {\n  return Services.resourcesForDoc(elementOrAmpDoc)\n      .getResourcesInRect(hostWin, rect)\n      .then(resources => {\n        const promises = [];\n        resources.forEach(r => {\n          if (!EXCLUDE_INI_LOAD.includes(r.element.tagName)) {\n            promises.push(r.loadedOnce());\n          }\n        });\n        return Promise.all(promises);\n      });\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isInFie(element) {\n  return !!closestBySelector(element, '.i-amphtml-fie');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {DomFingerprint} from './utils/dom-fingerprint';\nimport {Services} from './services';\nimport {dict} from './utils/object.js';\nimport {experimentToggles, isCanary} from './experiments';\nimport {getLengthNumeral} from './layout';\nimport {getModeObject} from './mode-object';\nimport {urls} from './config';\n\n/**\n * Produces the attributes for the ad template.\n * @param {!Window} parentWindow\n * @param {!AmpElement} element\n * @param {string} sentinel\n * @param {!JsonObject=} attributes\n * @return {!JsonObject}\n */\nexport function getContextMetadata(\n  parentWindow, element, sentinel, attributes) {\n  const startTime = Date.now();\n  const width = element.getAttribute('width');\n  const height = element.getAttribute('height');\n  attributes = attributes ? attributes : dict();\n  attributes['width'] = getLengthNumeral(width);\n  attributes['height'] = getLengthNumeral(height);\n  if (element.getAttribute('title')) {\n    attributes['title'] = element.getAttribute('title');\n  }\n  let locationHref = parentWindow.location.href;\n  // This is really only needed for tests, but whatever. Children\n  // see us as the logical origin, so telling them we are about:srcdoc\n  // will fail ancestor checks.\n  if (locationHref == 'about:srcdoc') {\n    locationHref = parentWindow.parent.location.href;\n  }\n\n  const docInfo = Services.documentInfoForDoc(element);\n  const viewer = Services.viewerForDoc(element);\n  const referrer = viewer.getUnconfirmedReferrerUrl();\n\n  // TODO(alanorozco): Redesign data structure so that fields not exposed by\n  // AmpContext are not part of this object.\n  const layoutRect = element.getPageLayoutBox();\n  attributes['_context'] = dict({\n    'ampcontextVersion': '$internalRuntimeVersion$',\n    'ampcontextFilepath': urls.thirdParty + '/$internalRuntimeVersion$' +\n        '/ampcontext-v0.js',\n    'sourceUrl': docInfo.sourceUrl,\n    'referrer': referrer,\n    'canonicalUrl': docInfo.canonicalUrl,\n    'pageViewId': docInfo.pageViewId,\n    'location': {\n      'href': locationHref,\n    },\n    'startTime': startTime,\n    'tagName': element.tagName,\n    'mode': getModeObject(),\n    'canary': isCanary(parentWindow),\n    'hidden': !viewer.isVisible(),\n    'initialLayoutRect': layoutRect ? {\n      'left': layoutRect.left,\n      'top': layoutRect.top,\n      'width': layoutRect.width,\n      'height': layoutRect.height,\n    } : null,\n    'initialIntersection': element.getIntersectionChangeEntry(),\n    'domFingerprint': DomFingerprint.generate(element),\n    'experimentToggles': experimentToggles(parentWindow),\n    'sentinel': sentinel,\n  });\n  const adSrc = element.getAttribute('src');\n  if (adSrc) {\n    attributes['src'] = adSrc;\n  }\n  return attributes;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {addAttributesToElement, closestBySelector} from './dom';\nimport {deserializeMessage, isAmpMessage} from './3p-frame-messaging';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {filterSplice} from './utils/array';\nimport {getData} from './event-helper';\nimport {parseUrlDeprecated} from './url';\nimport {setStyle} from './style';\nimport {tryParseJson} from './json';\n\n/**\n * Sentinel used to force unlistening after a iframe is detached.\n * @type {string}\n */\nconst UNLISTEN_SENTINEL = 'unlisten';\n\n/**\n * @typedef {{\n *   frame: !Element,\n *   events: !Object<string, !Array<function(!JsonObject)>>\n * }}\n */\nlet WindowEventsDef;\n\n/**\n * Returns a mapping from a URL's origin to an array of windows and their\n * listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {boolean=} opt_create create the mapping if it does not exist\n * @return {?Object<string, !Array<!WindowEventsDef>>}\n */\nfunction getListenFors(parentWin, opt_create) {\n  let {listeningFors} = parentWin;\n\n  if (!listeningFors && opt_create) {\n    listeningFors = parentWin.listeningFors = Object.create(null);\n  }\n  return listeningFors || null;\n}\n\n/**\n * Returns an array of WindowEventsDef that have had any listenFor listeners\n * registered for this sentinel.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {boolean=} opt_create create the array if it does not exist\n * @return {?Array<!WindowEventsDef>}\n */\nfunction getListenForSentinel(parentWin, sentinel, opt_create) {\n  const listeningFors = getListenFors(parentWin, opt_create);\n  if (!listeningFors) {\n    return listeningFors;\n  }\n\n  let listenSentinel = listeningFors[sentinel];\n  if (!listenSentinel && opt_create) {\n    listenSentinel = listeningFors[sentinel] = [];\n  }\n  return listenSentinel || null;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {!Element} iframe the iframe element who's context will trigger the\n *     event\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getOrCreateListenForEvents(parentWin, iframe, opt_is3P) {\n  const {origin} = parseUrlDeprecated(iframe.src);\n  const sentinel = getSentinel_(iframe, opt_is3P);\n  const listenSentinel = getListenForSentinel(parentWin, sentinel, true);\n\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    if (we.frame === iframe) {\n      windowEvents = we;\n      break;\n    }\n  }\n\n  if (!windowEvents) {\n    windowEvents = {\n      frame: iframe,\n      origin,\n      events: Object.create(null),\n    };\n    listenSentinel.push(windowEvents);\n  }\n\n  return windowEvents.events;\n}\n\n/**\n * Returns an mapping of event names to listenFor listeners.\n * @param {?Window} parentWin the window that created the iframe\n * @param {string} sentinel the sentinel of the message\n * @param {string} origin the source window's origin\n * @param {?Window} triggerWin the window that triggered the event\n * @return {?Object<string, !Array<function(!JsonObject, !Window, string)>>}\n */\nfunction getListenForEvents(parentWin, sentinel, origin, triggerWin) {\n  const listenSentinel = getListenForSentinel(parentWin, sentinel);\n\n  if (!listenSentinel) {\n    return listenSentinel;\n  }\n\n  // Find the entry for the frame.\n  // TODO(@nekodo): Add a WeakMap<Window, WindowEventsDef> cache to\n  //     speed up this process.\n  let windowEvents;\n  for (let i = 0; i < listenSentinel.length; i++) {\n    const we = listenSentinel[i];\n    const {contentWindow} = we.frame;\n    if (!contentWindow) {\n      setTimeout(dropListenSentinel, 0, listenSentinel);\n    } else if (sentinel === 'amp') {\n      // A non-3P code path, origin must match.\n      if (we.origin === origin && contentWindow == triggerWin) {\n        windowEvents = we;\n        break;\n      }\n    } else if (triggerWin == contentWindow ||\n        isDescendantWindow(contentWindow, triggerWin)) {\n      // 3p code path, we may accept messages from nested frames.\n      windowEvents = we;\n      break;\n    }\n  }\n\n  return windowEvents ? windowEvents.events : null;\n}\n\n/**\n * Checks whether one window is a descendant of another by climbing\n * the parent chain.\n * @param {?Window} ancestor potential ancestor window\n * @param {?Window} descendant potential descendant window\n * @return {boolean}\n */\nfunction isDescendantWindow(ancestor, descendant) {\n  for (let win = descendant; win && win != win.parent; win = win.parent) {\n    if (win == ancestor) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Removes any listenFors registed on listenSentinel that do not have\n * a contentWindow (the frame was removed from the DOM tree).\n * @param {!Array<!WindowEventsDef>} listenSentinel\n */\nfunction dropListenSentinel(listenSentinel) {\n  const noopData = dict({'sentinel': UNLISTEN_SENTINEL});\n\n  for (let i = listenSentinel.length - 1; i >= 0; i--) {\n    const windowEvents = listenSentinel[i];\n\n    if (!windowEvents.frame.contentWindow) {\n      listenSentinel.splice(i, 1);\n\n      const {events} = windowEvents;\n      for (const name in events) {\n        // Splice here, so that each unlisten does not shift the array\n        events[name].splice(0, Infinity).forEach(event => {\n          event(noopData);\n        });\n      }\n    }\n  }\n}\n\n/**\n * Registers the global listenFor event listener if it has yet to be.\n * @param {?Window} parentWin\n */\nfunction registerGlobalListenerIfNeeded(parentWin) {\n  if (parentWin.listeningFors) {\n    return;\n  }\n  const listenForListener = function(event) {\n    if (!getData(event)) {\n      return;\n    }\n    const data = parseIfNeeded(getData(event));\n    if (!data || !data['sentinel']) {\n      return;\n    }\n\n    const listenForEvents = getListenForEvents(\n        parentWin,\n        data['sentinel'],\n        event.origin,\n        event.source\n    );\n    if (!listenForEvents) {\n      return;\n    }\n\n    let listeners = listenForEvents[data['type']];\n    if (!listeners) {\n      return;\n    }\n\n    // We slice to avoid issues with adding another listener or unlistening\n    // during iteration. We could move to a Doubly Linked List with\n    // backtracking, but that's overly complicated.\n    listeners = listeners.slice();\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener(data, event.source, event.origin);\n    }\n  };\n\n  parentWin.addEventListener('message', listenForListener);\n}\n\n/**\n * Allows listening for message from the iframe. Returns an unlisten\n * function to remove the listener.\n *\n * @param {?Element} iframe\n * @param {string} typeOfMessage\n * @param {?function(!JsonObject, !Window, string)} callback Called when a\n *     message of this type arrives for this iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @param {boolean=} opt_includingNestedWindows set to true if a messages from\n *     nested frames should also be accepted.\n * @return {!UnlistenDef}\n */\nexport function listenFor(\n  iframe, typeOfMessage, callback, opt_is3P, opt_includingNestedWindows) {\n  dev().assert(iframe.src, 'only iframes with src supported');\n  dev().assert(!iframe.parentNode, 'cannot register events on an attached ' +\n      'iframe. It will cause hair-pulling bugs like #2942');\n  dev().assert(callback);\n  const parentWin = iframe.ownerDocument.defaultView;\n\n  registerGlobalListenerIfNeeded(parentWin);\n\n  const listenForEvents = getOrCreateListenForEvents(\n      parentWin,\n      iframe,\n      opt_is3P\n  );\n\n\n  let events = listenForEvents[typeOfMessage] ||\n    (listenForEvents[typeOfMessage] = []);\n\n  let unlisten;\n  let listener = function(data, source, origin) {\n    // Exclude nested frames if necessary.\n    // Note that the source was already verified to be either the contentWindow\n    // of the iframe itself or a descendant window within it.\n    if (!opt_includingNestedWindows && source != iframe.contentWindow) {\n      return;\n    }\n\n    if (data.sentinel == UNLISTEN_SENTINEL) {\n      unlisten();\n      return;\n    }\n    callback(data, source, origin);\n  };\n\n  events.push(listener);\n\n  return unlisten = function() {\n    if (listener) {\n      const index = events.indexOf(listener);\n      if (index > -1) {\n        events.splice(index, 1);\n      }\n      // Make sure references to the unlisten function do not keep\n      // alive too much.\n      listener = null;\n      events = null;\n      callback = null;\n    }\n  };\n}\n\n/**\n * Returns a promise that resolves when one of given messages has been observed\n * for the first time. And remove listener for all other messages.\n * @param {!Element} iframe\n * @param {string|!Array<string>} typeOfMessages\n * @param {boolean=} opt_is3P\n * @return {!Promise<!{data: !JsonObject, source: !Window, origin: string}>}\n */\nexport function listenForOncePromise(iframe, typeOfMessages, opt_is3P) {\n  const unlistenList = [];\n  if (typeof typeOfMessages == 'string') {\n    typeOfMessages = [typeOfMessages];\n  }\n  return new Promise(resolve => {\n    for (let i = 0; i < typeOfMessages.length; i++) {\n      const message = typeOfMessages[i];\n      const unlisten = listenFor(iframe, message, (data, source, origin) => {\n        for (let i = 0; i < unlistenList.length; i++) {\n          unlistenList[i]();\n        }\n        resolve({data, source, origin});\n      }, opt_is3P);\n      unlistenList.push(unlisten);\n    }\n  });\n}\n\n/**\n * Posts a message to the iframe.\n * @param {!Element} iframe The iframe.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {string} targetOrigin origin of the target.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessage(iframe, type, object, targetOrigin, opt_is3P) {\n  postMessageToWindows(iframe,\n      [{win: iframe.contentWindow, origin: targetOrigin}], type, object,\n      opt_is3P);\n}\n\n/**\n * Posts an identical message to multiple target windows with the same\n * sentinel.\n * The message is serialized only once.\n * @param {!Element} iframe The iframe.\n * @param {!Array<{win: !Window, origin: string}>} targets to send the message\n *     to, pairs of window and its origin.\n * @param {string} type Type of the message.\n * @param {!JsonObject} object Message payload.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n */\nexport function postMessageToWindows(iframe, targets, type, object, opt_is3P) {\n  if (!iframe.contentWindow) {\n    return;\n  }\n  object['type'] = type;\n  object['sentinel'] = getSentinel_(iframe, opt_is3P);\n  let payload = object;\n  if (opt_is3P) {\n    // Serialize ourselves because that is much faster in Chrome.\n    payload = 'amp-' + JSON.stringify(object);\n  }\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i];\n    target.win./*OK*/postMessage(payload, target.origin);\n  }\n}\n\n/**\n * Gets the sentinel string.\n * @param {!Element} iframe The iframe.\n * @param {boolean=} opt_is3P set to true if the iframe is 3p.\n * @return {string} Sentinel string.\n * @private\n */\nfunction getSentinel_(iframe, opt_is3P) {\n  return opt_is3P ? iframe.getAttribute('data-amp-3p-sentinel') : 'amp';\n}\n\n/**\n * JSON parses event.data if it needs to be\n * @param {*} data\n * @return {?JsonObject} object message\n * @private\n * @visibleForTesting\n */\nexport function parseIfNeeded(data) {\n  if (typeof data == 'string') {\n    if (data.charAt(0) == '{') {\n      data = tryParseJson(data, e => {\n        dev().warn('IFRAME-HELPER',\n            'Postmessage could not be parsed. ' +\n            'Is it in a valid JSON format?', e);\n      }) || null;\n    } else if (isAmpMessage(data)) {\n      data = deserializeMessage(data);\n    } else {\n      data = null;\n    }\n  }\n  return /** @type {?JsonObject} */ (data);\n}\n\n\n\n/**\n * Manages a postMessage API for an iframe with a subscription message and\n * a way to broadcast messages to all subscribed windows, which\n * in turn must all be descendants of the contentWindow of the iframe.\n */\nexport class SubscriptionApi {\n  /**\n   * @param {!Element} iframe The iframe.\n   * @param {string} type Type of the subscription message.\n   * @param {boolean} is3p set to true if the iframe is 3p.\n   * @param {function(!JsonObject, !Window, string)} requestCallback Callback\n   *     invoked whenever a new window subscribes.\n   */\n  constructor(iframe, type, is3p, requestCallback) {\n    /** @private @const {!Element} */\n    this.iframe_ = iframe;\n    /** @private @const {boolean} */\n    this.is3p_ = is3p;\n    /** @private @const {!Array<{win: !Window, origin: string}>} */\n    this.clientWindows_ = [];\n\n    /** @private @const {!UnlistenDef} */\n    this.unlisten_ = listenFor(this.iframe_, type, (data, source, origin) => {\n      // This message might be from any window within the iframe, we need\n      // to keep track of which windows want to be sent updates.\n      if (!this.clientWindows_.some(entry => entry.win == source)) {\n        this.clientWindows_.push({win: source, origin});\n      }\n      requestCallback(data, source, origin);\n    }, this.is3p_,\n        // For 3P frames we also allow nested frames within them to subscribe..\n    this.is3p_ /* opt_includingNestedWindows */);\n  }\n\n  /**\n   * Sends a message to all subscribed windows.\n   * @param {string} type Type of the message.\n   * @param {!JsonObject} data Message payload.\n   */\n  send(type, data) {\n    // Remove clients that have been removed from the DOM.\n    filterSplice(this.clientWindows_, client => !!client.win.parent);\n    postMessageToWindows(\n        this.iframe_,\n        this.clientWindows_,\n        type,\n        data,\n        this.is3p_);\n  }\n\n  /**\n   * Destroys iframe.\n   */\n  destroy() {\n    this.unlisten_();\n    this.clientWindows_.length = 0;\n  }\n}\n\n/**\n * @param {!Element} element\n * @return {boolean}\n */\nexport function looksLikeTrackingIframe(element) {\n  const box = element.getLayoutBox();\n  // This heuristic is subject to change.\n  if (box.width > 10 || box.height > 10) {\n    return false;\n  }\n  // Iframe is not tracking iframe if open with user interaction\n  return !closestBySelector(element, '.i-amphtml-overlay');\n}\n\n// Most common ad sizes\n// Array of [width, height] pairs.\nconst adSizes = [\n  [300, 250],\n  [320, 50],\n  [300, 50],\n  [320, 100],\n];\n\n/**\n * Guess whether this element might be an ad.\n * @param {!Element} element An amp-iframe element.\n * @return {boolean}\n * @visibleForTesting\n */\nexport function isAdLike(element) {\n  const box = element.getLayoutBox();\n  const {height, width} = box;\n  for (let i = 0; i < adSizes.length; i++) {\n    const refWidth = adSizes[i][0];\n    const refHeight = adSizes[i][1];\n    if (refHeight > height) {\n      continue;\n    }\n    if (refWidth > width) {\n      continue;\n    }\n    // Fuzzy matching to account for padding.\n    if (height - refHeight <= 20 && width - refWidth <= 20) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {!Element} iframe\n * @private\n */\nexport function disableScrollingOnIframe(iframe) {\n  addAttributesToElement(iframe, dict({'scrolling': 'no'}));\n\n  // This shouldn't work, but it does on Firefox.\n  // https://stackoverflow.com/a/15494969\n  setStyle(iframe, 'overflow', 'hidden');\n\n  return iframe;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './utils/promise';\nimport {Services} from './services';\nimport {\n  addParamsToUrl,\n  isProxyOrigin,\n  parseQueryString,\n  parseUrlDeprecated,\n} from './url';\nimport {dev, user} from './log';\nimport {getMode} from './mode';\nimport {isExperimentOn} from './experiments';\n\nconst TIMEOUT_VALUE = 8000;\n\nlet trackImpressionPromise = null;\n\nconst DEFAULT_APPEND_URL_PARAM = [\n  'gclid',\n  'gclsrc',\n];\n\n/**\n * A function to get the trackImpressionPromise;\n * @return {!Promise}\n */\nexport function getTrackImpressionPromise() {\n  return dev().assert(trackImpressionPromise);\n}\n\n/**\n * Function that reset the trackImpressionPromise only for testing\n * @visibleForTesting\n */\nexport function resetTrackImpressionPromiseForTesting() {\n  trackImpressionPromise = null;\n}\n\n/**\n * Emit a HTTP request to a destination defined on the incoming URL.\n * Launched for trusted viewer. Otherwise guarded by experiment.\n * @param {!Window} win\n */\nexport function maybeTrackImpression(win) {\n  const deferred = new Deferred();\n  const {promise, resolve: resolveImpression} = deferred;\n\n\n  trackImpressionPromise = Services.timerFor(win).timeoutPromise(TIMEOUT_VALUE,\n      promise, 'TrackImpressionPromise timeout').catch(error => {\n    dev().warn('IMPRESSION', error);\n  });\n\n  const viewer = Services.viewerForDoc(win.document);\n  const isTrustedViewerPromise = viewer.isTrustedViewer();\n  const isTrustedReferrerPromise = viewer.isTrustedReferrer();\n  Promise.all([\n    isTrustedViewerPromise,\n    isTrustedReferrerPromise,\n  ]).then(results => {\n    const isTrustedViewer = results[0];\n    const isTrustedReferrer = results[1];\n    // Currently this feature is launched for trusted viewer and trusted\n    // referrer, but still experiment guarded for all AMP docs.\n    if (!isTrustedViewer && !isTrustedReferrer && !isExperimentOn(win, 'alp')) {\n      resolveImpression();\n      return;\n    }\n\n    const replaceUrlPromise = handleReplaceUrl(win);\n    const clickUrlPromise = handleClickUrl(win);\n\n    Promise.all([replaceUrlPromise, clickUrlPromise]).then(() => {\n      resolveImpression();\n    }, () => {});\n  });\n}\n\n/**\n * Signal that impression tracking is not relevant in this environment.\n */\nexport function doNotTrackImpression() {\n  trackImpressionPromise = Promise.resolve();\n}\n\n/**\n * Handle the getReplaceUrl and return a promise when url is replaced Only\n * handles replaceUrl when viewer indicates AMP to do so. Viewer should indicate\n * by setting the legacy replaceUrl init param and add `replaceUrl` to its\n * capability param. Future plan is to change the type of legacy init replaceUrl\n * param from url string to boolean value. Please NOTE replaceUrl and adLocation\n * will never arrive at same time, so there is no race condition on the order of\n * handling url replacement.\n * @param {!Window} win\n * @return {!Promise}\n */\nfunction handleReplaceUrl(win) {\n  const viewer = Services.viewerForDoc(win.document);\n\n  // ReplaceUrl substitution doesn't have to wait until the document is visible\n  if (!viewer.getParam('replaceUrl')) {\n    // The init replaceUrl param serve as a signal on whether replaceUrl is\n    // required for this doc.\n    return Promise.resolve();\n  }\n\n  if (!viewer.hasCapability('replaceUrl')) {\n    // If Viewer is not capability of providing async replaceUrl, use the legacy\n    // init replaceUrl param.\n    viewer.replaceUrl(viewer.getParam('replaceUrl') || null);\n    return Promise.resolve();\n  }\n\n  // request async replaceUrl is viewer support getReplaceUrl.\n  return viewer.sendMessageAwaitResponse('getReplaceUrl', /* data */ undefined)\n      .then(response => {\n        if (!response || typeof response != 'object') {\n          dev().warn('IMPRESSION', 'get invalid replaceUrl response');\n          return;\n        }\n        viewer.replaceUrl(response['replaceUrl'] || null);\n      }, err => {\n        dev().warn('IMPRESSION', 'Error request replaceUrl from viewer', err);\n      });\n}\n\n\n/**\n * Perform the impression request if it has been provided via\n * the click param in the viewer arguments. Returns a promise.\n * @param {!Window} win\n * @return {!Promise}\n */\nfunction handleClickUrl(win) {\n  const viewer = Services.viewerForDoc(win.document);\n  /** @const {string|undefined} */\n  const clickUrl = viewer.getParam('click');\n\n\n  if (!clickUrl) {\n    return Promise.resolve();\n  }\n\n  if (clickUrl.indexOf('https://') != 0) {\n    user().warn('IMPRESSION',\n        'click fragment param should start with https://. Found ',\n        clickUrl);\n    return Promise.resolve();\n  }\n\n  if (win.location.hash) {\n    // This is typically done using replaceState inside the viewer.\n    // If for some reason it failed, get rid of the fragment here to\n    // avoid duplicate tracking.\n    win.location.hash = '';\n  }\n\n  // TODO(@zhouyx) need test with a real response.\n  return viewer.whenFirstVisible().then(() => {\n    return invoke(win, dev().assertString(clickUrl));\n  }).then(response => {\n    applyResponse(win, response);\n  }).catch(err => {\n    user().warn('IMPRESSION', 'Error on request clickUrl: ', err);\n  });\n}\n\n/**\n * Send the url to ad server and wait for its response\n * @param {!Window} win\n * @param {string} clickUrl\n * @return {!Promise<?JsonObject>}\n */\nfunction invoke(win, clickUrl) {\n  if (getMode().localDev && !getMode().test) {\n    clickUrl = 'http://localhost:8000/impression-proxy?url=' + clickUrl;\n  }\n  return Services.xhrFor(win).fetchJson(clickUrl, {\n    credentials: 'include',\n    // All origins are allows to send these requests.\n    requireAmpResponseSourceOrigin: false,\n  }).then(res => {\n    // Treat 204 no content response specially\n    if (res.status == 204) {\n      return null;\n    }\n    return res.json();\n  });\n}\n\n/**\n * parse the response back from ad server\n * Set for analytics purposes\n * @param {!Window} win\n * @param {?JsonObject} response\n */\nfunction applyResponse(win, response) {\n  if (!response) {\n    return;\n  }\n\n  const adLocation = response['location'];\n  const adTracking = response['tracking_url'];\n\n  // If there is a tracking_url, need to track it\n  // Otherwise track the location\n  const trackUrl = adTracking || adLocation;\n\n  if (trackUrl && !isProxyOrigin(trackUrl)) {\n    // To request the provided trackUrl for tracking purposes.\n    new Image().src = trackUrl;\n  }\n\n  // Replace the location href params with new location params we get (if any).\n  if (adLocation) {\n    if (!win.history.replaceState) {\n      return;\n    }\n\n    const viewer = Services.viewerForDoc(win.document);\n    const currentHref = win.location.href;\n    const url = parseUrlDeprecated(adLocation);\n    const params = parseQueryString(url.search);\n    const newHref = addParamsToUrl(currentHref, params);\n    // TODO: Avoid overwriting the fragment parameter.\n    win.history.replaceState(null, '', newHref);\n    viewer.maybeUpdateFragmentForCct();\n  }\n}\n\n/**\n * Return a promise that whether appending extra url params to outgoing link is\n * required.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n * @return {!Promise<boolean>}\n */\nexport function shouldAppendExtraParams(ampdoc) {\n  return ampdoc.whenReady().then(() => {\n    return !!ampdoc.getBody().querySelector(\n        'amp-analytics[type=googleanalytics]');\n  });\n}\n\n/**\n * Return the extra url params string that should be appended to outgoing link\n * @param {!Window} win\n * @param {!Element} target\n * @return {string}\n */\nexport function getExtraParamsUrl(win, target) {\n  // Get an array with extra params that needs to append.\n  const url = parseUrlDeprecated(win.location.href);\n  const params = parseQueryString(url.search);\n  const appendParams = [];\n  for (let i = 0; i < DEFAULT_APPEND_URL_PARAM.length; i++) {\n    const param = DEFAULT_APPEND_URL_PARAM[i];\n    if (typeof params[param] !== 'undefined') {\n      appendParams.push(param);\n    }\n  }\n\n  // Check if the param already exists\n  const additionalUrlParams = target.getAttribute('data-amp-addparams');\n  let {href} = target;\n  if (additionalUrlParams) {\n    href = addParamsToUrl(href, parseQueryString(additionalUrlParams));\n  }\n  const loc = parseUrlDeprecated(href);\n  const existParams = parseQueryString(loc.search);\n  for (let i = appendParams.length - 1; i >= 0; i--) {\n    const param = appendParams[i];\n    if (typeof existParams[param] !== 'undefined') {\n      appendParams.splice(i, 1);\n    }\n  }\n  return getQueryParamUrl(appendParams);\n}\n\n/**\n * Helper method to convert an query param array to string\n * @param {!Array<string>} params\n * @return {string}\n */\nfunction getQueryParamUrl(params) {\n  let url = '';\n  for (let i = 0; i < params.length; i++) {\n    const param = params[i];\n    url += (i == 0) ?\n      `${param}=QUERY_PARAM(${param})` :\n      `&${param}=QUERY_PARAM(${param})`;\n  }\n  return url;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SubscriptionApi} from './iframe-helper';\nimport {dev} from './log';\nimport {dict} from './utils/object';\nimport {isArray, isFiniteNumber} from './types';\nimport {layoutRectLtwh, moveLayoutRect, rectIntersection} from './layout-rect';\n\n/**\n * The structure that defines the rectangle used in intersection observers.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number,\n * }}\n */\nexport let DOMRect;\n\nexport const DEFAULT_THRESHOLD =\n    [0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,\n      0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1];\n\n/** @typedef {{\n *    element: !Element,\n *    currentThresholdSlot: number,\n *  }}\n */\nlet ElementIntersectionStateDef;\n\n/** @const @private */\nconst TAG = 'INTERSECTION-OBSERVER';\n\n/** @const @private */\nconst INIT_TIME = Date.now();\n\n/**\n * A function to get the element's current IntersectionObserverEntry\n * regardless of the intersetion ratio. Only available when element is not\n * nested in a container iframe.\n * TODO: support opt_iframe if there's valid use cases.\n * @param {!./layout-rect.LayoutRectDef} element element's rect\n * @param {?./layout-rect.LayoutRectDef} owner element's owner rect\n * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n * @return {!IntersectionObserverEntry} A change entry.\n */\nexport function getIntersectionChangeEntry(\n  element, owner, hostViewport) {\n  const intersection = rectIntersection(element, owner, hostViewport) ||\n      layoutRectLtwh(0, 0, 0, 0);\n  const ratio = intersectionRatio(intersection, element);\n  return calculateChangeEntry(\n      element, hostViewport, intersection, ratio);\n}\n\n/**\n * @param {!Window} win\n * @return {boolean}\n */\nexport function nativeIntersectionObserverSupported(win) {\n  return 'IntersectionObserver' in win &&\n      'IntersectionObserverEntry' in win &&\n      'intersectionRatio' in win.IntersectionObserverEntry.prototype;\n}\n\n/**\n * A class to help amp-iframe and amp-ad nested iframe listen to intersection\n * change.\n */\nexport class IntersectionObserverApi {\n  /**\n   * @param {!AMP.BaseElement} baseElement\n   * @param {!Element} iframe\n   * @param {boolean=} opt_is3p\n   */\n  constructor(baseElement, iframe, opt_is3p) {\n    /** @private @const {!AMP.BaseElement} */\n    this.baseElement_ = baseElement;\n\n    /** @private {?IntersectionObserverPolyfill} */\n    this.intersectionObserver_ = null;\n\n    /** @private {boolean} */\n    this.shouldObserve_ = false;\n\n    /** @private {boolean} */\n    this.isInViewport_ = false;\n\n    /** @private {?function()} */\n    this.unlistenOnDestroy_ = null;\n\n    /** @private @const {!./service/viewport/viewport-impl.Viewport} */\n    this.viewport_ = baseElement.getViewport();\n\n    /** @private {?SubscriptionApi} */\n    this.subscriptionApi_ = new SubscriptionApi(\n        iframe, 'send-intersections', opt_is3p || false, () => {\n          this.startSendingIntersection_();\n        });\n\n    this.intersectionObserver_ = new IntersectionObserverPolyfill(entries => {\n      // Remove target info from cross origin iframe.\n      for (let i = 0; i < entries.length; i++) {\n        delete entries[i]['target'];\n      }\n      this.subscriptionApi_.send('intersection', dict({'changes': entries}));\n    }, {threshold: DEFAULT_THRESHOLD});\n    this.intersectionObserver_.tick(this.viewport_.getRect());\n\n    /** @const {function()} */\n    this.fire = () => {\n      if (!this.shouldObserve_ || !this.isInViewport_) {\n        return;\n      }\n      this.intersectionObserver_.tick(this.viewport_.getRect());\n    };\n  }\n\n  /**\n   * Function to start listening to viewport event. and observer intersection\n   * change on the element.\n   */\n  startSendingIntersection_() {\n    this.shouldObserve_ = true;\n    this.intersectionObserver_.observe(this.baseElement_.element);\n    this.baseElement_.getVsync().measure(() => {\n      this.isInViewport_ = this.baseElement_.isInViewport();\n      this.fire();\n    });\n\n    const unlistenViewportScroll = this.viewport_.onScroll(this.fire);\n    const unlistenViewportChange = this.viewport_.onChanged(this.fire);\n    this.unlistenOnDestroy_ = () => {\n      unlistenViewportScroll();\n      unlistenViewportChange();\n    };\n  }\n\n  /**\n   * Enable to the PositionObserver to listen to viewport events\n   * @param {boolean} inViewport\n   */\n  onViewportCallback(inViewport) {\n    this.isInViewport_ = inViewport;\n  }\n\n  /**\n   * Clean all listenrs\n   */\n  destroy() {\n    this.shouldObserve_ = false;\n    this.intersectionObserver_ = null;\n    if (this.unlistenOnDestroy_) {\n      this.unlistenOnDestroy_();\n      this.unlistenOnDestroy_ = null;\n    }\n    this.subscriptionApi_.destroy();\n    this.subscriptionApi_ = null;\n  }\n}\n\n\n/**\n * The IntersectionObserverPolyfill class lets any element receive its\n * intersection data with the viewport. It acts like native browser supported\n * IntersectionObserver.\n * The IntersectionObserver receives a callback function and an optional option\n * as params. Whenever the element intersection ratio cross a threshold value,\n * IntersectionObserverPolyfill will call the provided callback function with\n * the change entry.\n * @visibleForTesting\n */\nexport class IntersectionObserverPolyfill {\n  /**\n   * @param {function(!Array<!IntersectionObserverEntry>)} callback\n   * @param {Object=} opt_option\n   */\n  constructor(callback, opt_option) {\n    /** @private @const {function(!Array<!IntersectionObserverEntry>)} */\n    this.callback_ = callback;\n\n    // The input threshold can be a number or an array of numbers.\n    let threshold = opt_option && opt_option.threshold;\n    if (threshold) {\n      threshold = isArray(threshold) ?\n        threshold : [threshold];\n    } else {\n      threshold = [0];\n    }\n\n    for (let i = 0; i < threshold.length; i++) {\n      dev().assert(isFiniteNumber(threshold[i]), 'Threshold should be a ' +\n          'finite number or an array of finite numbers');\n    }\n\n    /**\n     * A list of threshold, sorted in increasing numeric order\n     * @private @const {!Array}\n     */\n    this.threshold_ = threshold.sort();\n    dev().assert(this.threshold_[0] >= 0 &&\n        this.threshold_[this.threshold_.length - 1] <= 1,\n    'Threshold should be in the range from \"[0, 1]\"');\n\n    /** @private {?./layout-rect.LayoutRectDef} */\n    this.lastViewportRect_ = null;\n\n    /** @private {./layout-rect.LayoutRectDef|undefined} */\n    this.lastIframeRect_ = undefined;\n\n    /**\n     * Store a list of observed elements and their current threshold slot which\n     * their intersection ratio fills, range from [0, this.threshold_.length]\n     * @private {Array<!ElementIntersectionStateDef>}\n     */\n    this.observeEntries_ = [];\n  }\n\n  /**\n   */\n  disconnect() {\n    this.observeEntries_.length = 0;\n  }\n\n  /**\n   * Provide a way to observe the intersection change for a specific element\n   * Please note IntersectionObserverPolyfill only support AMP element now\n   * TODO: Support non AMP element\n   * @param {!Element} element\n   */\n  observe(element) {\n    // Check the element is an AMP element.\n    dev().assert(element.getLayoutBox);\n\n    // If the element already exists in current observeEntries, do nothing\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      if (this.observeEntries_[i].element === element) {\n        dev().warn(TAG, 'should observe same element once');\n        return;\n      }\n    }\n\n    const newState = {\n      element,\n      currentThresholdSlot: 0,\n    };\n\n    // Get the new observed element's first changeEntry based on last viewport\n    if (this.lastViewportRect_) {\n      const change = this.getValidIntersectionChangeEntry_(\n          newState, this.lastViewportRect_, this.lastIframeRect_);\n      if (change) {\n        this.callback_([change]);\n      }\n    }\n\n    // push new observed element\n    this.observeEntries_.push(newState);\n  }\n\n  /**\n   * Provide a way to unobserve intersection change for a specified element\n   * @param {!Element} element\n   */\n  unobserve(element) {\n    // find the unobserved element in observeEntries\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      if (this.observeEntries_[i].element === element) {\n        this.observeEntries_.splice(i, 1);\n        return;\n      }\n    }\n    dev().warn(TAG, 'unobserve non-observed element');\n  }\n\n  /**\n   * Tick function that update the DOMRect of the root of observed elements.\n   * Caller needs to make sure to pass in the correct container.\n   * Note: the opt_iframe param is the iframe position relative to the host doc,\n   * The iframe must be a non-scrollable iframe.\n   * @param {!./layout-rect.LayoutRectDef} hostViewport\n   * @param {./layout-rect.LayoutRectDef=} opt_iframe\n   */\n  tick(hostViewport, opt_iframe) {\n\n    if (opt_iframe) {\n      // If element inside an iframe. Adjust origin to the iframe.left/top.\n      hostViewport =\n          moveLayoutRect(hostViewport, -opt_iframe.left, -opt_iframe.top);\n      opt_iframe =\n          moveLayoutRect(opt_iframe, -opt_iframe.left, -opt_iframe.top);\n    }\n\n    this.lastViewportRect_ = hostViewport;\n    this.lastIframeRect_ = opt_iframe;\n\n    const changes = [];\n\n    for (let i = 0; i < this.observeEntries_.length; i++) {\n      const change = this.getValidIntersectionChangeEntry_(\n          this.observeEntries_[i], hostViewport, opt_iframe);\n      if (change) {\n        changes.push(change);\n      }\n    }\n\n    if (changes.length) {\n      this.callback_(changes);\n    }\n  }\n\n  /**\n   * Return a change entry for one element that should be compatible with\n   * IntersectionObserverEntry if it's valid with current config.\n   * When the new intersection ratio doesn't cross one of a threshold value,\n   * the function will return null.\n   *\n   * @param {!ElementIntersectionStateDef} state\n   * @param {!./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n   * @param {./layout-rect.LayoutRectDef=} opt_iframe iframe container rect\n   * @return {?IntersectionObserverEntry} A valid change entry or null if ratio\n   * @private\n   */\n  getValidIntersectionChangeEntry_(state, hostViewport, opt_iframe) {\n    const {element} = state;\n\n    // Normalize container LayoutRect to be relative to page\n    let ownerRect = null;\n\n    // If opt_iframe is provided, all LayoutRect has position relative to\n    // the iframe.\n    // If opt_iframe is not provided, all LayoutRect has position relative to\n    // the host document.\n    const elementRect = element.getLayoutBox();\n    const owner = element.getOwner();\n    ownerRect = owner && owner.getLayoutBox();\n\n    // calculate intersectionRect. that the element intersects with hostViewport\n    // and intersects with owner element and container iframe if exists.\n    const intersectionRect =\n        rectIntersection(elementRect, ownerRect, hostViewport, opt_iframe) ||\n        layoutRectLtwh(0, 0, 0, 0);\n    // calculate ratio, call callback based on new ratio value.\n    const ratio = intersectionRatio(intersectionRect, elementRect);\n    const newThresholdSlot = getThresholdSlot(this.threshold_, ratio);\n\n    if (newThresholdSlot == state.currentThresholdSlot) {\n      return null;\n    }\n    state.currentThresholdSlot = newThresholdSlot;\n\n    // To get same behavior as native IntersectionObserver set hostViewport null\n    // if inside an iframe\n    const changeEntry = calculateChangeEntry(elementRect,\n        (opt_iframe ? null : hostViewport), intersectionRect, ratio);\n    changeEntry.target = element;\n    return changeEntry;\n  }\n}\n\n/**\n * Returns the ratio of the smaller box's area to the larger box's area.\n * @param {!./layout-rect.LayoutRectDef} smaller\n * @param {!./layout-rect.LayoutRectDef} larger\n * @return {number}\n */\nfunction intersectionRatio(smaller, larger) {\n  return (smaller.width * smaller.height) / (larger.width * larger.height);\n}\n\n/**\n * Returns the slot number that the current ratio fills in.\n * @param {!Array} sortedThreshold valid sorted IoB threshold\n * @param {number} ratio Range from [0, 1]\n * @return {number} Range from [0, threshold.length]\n * @visibleForTesting\n */\nexport function getThresholdSlot(sortedThreshold, ratio) {\n  let startIdx = 0;\n  let endIdx = sortedThreshold.length;\n  // 0 is a special case that does not fit into [small, large) range\n  if (ratio == 0) {\n    return 0;\n  }\n  let mid = ((startIdx + endIdx) / 2) | 0;\n  while (startIdx < mid) {\n    const midValue = sortedThreshold[mid];\n    // In the range of [small, large)\n    if (ratio < midValue) {\n      endIdx = mid;\n    } else {\n      startIdx = mid;\n    }\n    mid = ((startIdx + endIdx) / 2) | 0;\n  }\n  return endIdx;\n}\n\n/**\n * Helper function to calculate the IntersectionObserver change entry.\n * @param {!./layout-rect.LayoutRectDef} element element's rect\n * @param {?./layout-rect.LayoutRectDef} hostViewport hostViewport's rect\n * @param {!./layout-rect.LayoutRectDef} intersection\n * @param {number} ratio\n * @return {!IntersectionObserverEntry}}\n */\nfunction calculateChangeEntry(\n  element, hostViewport, intersection, ratio) {\n  // If element not in an iframe.\n  // adjust all LayoutRect to hostViewport Origin.\n  let boundingClientRect = element;\n  let rootBounds = hostViewport;\n  // If no hostViewport is provided, element is inside an non-scrollable iframe.\n  // Every Layoutrect has already adjust their origin according to iframe\n  // rect origin. LayoutRect position is relative to iframe origin,\n  // thus relative to iframe's viewport origin because the viewport is at the\n  // iframe origin. No need to adjust position here.\n\n  if (hostViewport) {\n    // If element not in an iframe.\n    // adjust all LayoutRect to hostViewport Origin.\n    rootBounds = /** @type {!./layout-rect.LayoutRectDef} */ (rootBounds);\n    intersection = moveLayoutRect(intersection, -hostViewport.left,\n        -hostViewport.top);\n    // The element is relative to (0, 0), while the viewport moves. So, we must\n    // adjust.\n    boundingClientRect = moveLayoutRect(boundingClientRect,\n        -hostViewport.left, -hostViewport.top);\n    // Now, move the viewport to (0, 0)\n    rootBounds = moveLayoutRect(rootBounds,\n        -hostViewport.left, -hostViewport.top);\n  }\n\n  return /** @type {!IntersectionObserverEntry} */ ({\n    time: (typeof performance !== 'undefined' && performance.now) ?\n      performance.now() : Date.now() - INIT_TIME,\n    rootBounds,\n    boundingClientRect,\n    intersectionRect: intersection,\n    intersectionRatio: ratio,\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview This module declares JSON types as defined in the\n * {@link http://json.org/}.\n */\n\nimport {isObject} from './types';\n\n\n// NOTE Type are changed to {*} because of\n// https://github.com/google/closure-compiler/issues/1999\n\n/**\n * JSON scalar. It's either string, number or boolean.\n * @typedef {*} should be string|number|boolean\n */\nlet JSONScalarDef;\n\n\n/**\n * JSON object. It's a map with string keys and JSON values.\n * @typedef {*} should be !Object<string, ?JSONValueDef>\n */\nlet JSONObjectDef;\n\n\n/**\n * JSON array. It's an array with JSON values.\n * @typedef {*} should be !Array<?JSONValueDef>\n */\nlet JSONArrayDef;\n\n\n/**\n * JSON value. It's either a scalar, an object or an array.\n * @typedef {*} should be !JSONScalarDef|!JSONObjectDef|!JSONArrayDef\n */\nlet JSONValueDef;\n\n/**\n * Recreates objects with prototype-less copies.\n * @param {!JsonObject} obj\n * @return {!JsonObject}\n */\nexport function recreateNonProtoObject(obj) {\n  const copy = Object.create(null);\n  for (const k in obj) {\n    if (!hasOwnProperty(obj, k)) {\n      continue;\n    }\n    const v = obj[k];\n    copy[k] = isObject(v) ? recreateNonProtoObject(v) : v;\n  }\n  return /** @type {!JsonObject} */ (copy);\n}\n\n/**\n * Returns a value from an object for a field-based expression. The expression\n * is a simple nested dot-notation of fields, such as `field1.field2`. If any\n * field in a chain does not exist or is not an object or array, the returned\n * value will be `undefined`.\n *\n * @param {!JsonObject} obj\n * @param {string} expr\n * @return {*}\n */\nexport function getValueForExpr(obj, expr) {\n  // The `.` indicates \"the object itself\".\n  if (expr == '.') {\n    return obj;\n  }\n  // Otherwise, navigate via properties.\n  const parts = expr.split('.');\n  let value = obj;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    if (part &&\n        value &&\n        value[part] !== undefined &&\n        hasOwnProperty(value, part)\n    ) {\n      value = value[part];\n      continue;\n    }\n    value = undefined;\n    break;\n  }\n  return value;\n}\n\n/**\n * Simple wrapper around JSON.parse that casts the return value\n * to JsonObject.\n * Create a new wrapper if an array return value is desired.\n * @param {*} json JSON string to parse\n * @return {?JsonObject} May be extend to parse arrays.\n */\nexport function parseJson(json) {\n  return /** @type {?JsonObject} */(JSON.parse(/** @type {string} */ (json)));\n}\n\n/**\n * Parses the given `json` string without throwing an exception if not valid.\n * Returns `undefined` if parsing fails.\n * Returns the `Object` corresponding to the JSON string when parsing succeeds.\n * @param {*} json JSON string to parse\n * @param {function(!Error)=} opt_onFailed Optional function that will be called\n *     with the error if parsing fails.\n * @return {?JsonObject|undefined} May be extend to parse arrays.\n */\nexport function tryParseJson(json, opt_onFailed) {\n  try {\n    return parseJson(json);\n  } catch (e) {\n    if (opt_onFailed) {\n      opt_onFailed(e);\n    }\n    return undefined;\n  }\n}\n\n/**\n * Recursively checks strict equality of items in nested arrays and objects.\n *\n * @param {JSONValueDef} a\n * @param {JSONValueDef} b\n * @param {number} depth The maximum recursion depth. Must be finite.\n * @return {boolean}\n * @throws {Error} If depth argument is not finite.\n */\nexport function recursiveEquals(a, b, depth = 3) {\n  if (!isFinite(depth)) {\n    throw new Error('depth arg must be finite: ' + depth);\n  }\n  if (a === b) {\n    return true;\n  }\n  // Only check shallow equality for depth < 1.\n  if (depth < 1) {\n    return false;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!recursiveEquals(a[i], b[i], depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    const keysA = Object.keys(/** @type {!Object} */ (a));\n    const keysB = Object.keys(/** @type {!Object} */ (b));\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n    for (let i = 0; i < keysA.length; i++) {\n      const keyA = keysA[i];\n      const valueA = a[keyA];\n      const valueB = b[keyA];\n      if (!recursiveEquals(valueA, valueB, depth - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * @param {*} obj\n * @param {string} key\n * @return {boolean}\n */\nfunction hasOwnProperty(obj, key) {\n  if (obj == null || typeof obj != 'object') {\n    return false;\n  }\n  return Object.prototype.hasOwnProperty.call(\n      /** @type {!Object} */ (obj), key);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The structure that combines position and size for an element. The exact\n * interpretation of position and size depends on the use case.\n *\n * @typedef {{\n *   top: number,\n *   bottom: number,\n *   left: number,\n *   right: number,\n *   width: number,\n *   height: number,\n *   x: number,\n *   y: number\n * }}\n */\nexport let LayoutRectDef;\n\n\n/**\n * The structure that represents the margins of an Element.\n *\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nexport let LayoutMarginsDef;\n\n\n/**\n * The structure that represents a requested change to the margins of an\n * Element. Any new values specified will replace existing ones (rather than\n * being additive).\n *\n * @typedef {{\n *   top: (number|undefined),\n *   right: (number|undefined),\n *   bottom: (number|undefined),\n *   left: (number|undefined)\n * }}\n */\nexport let LayoutMarginsChangeDef;\n\n/**\n* RelativePositions\n*\n* Describes the relative position of an element to another (whether the\n* first is inside the second, on top of the second or on the bottom\n* @enum {string}\n*/\nexport const RelativePositions = {\n  INSIDE: 'inside',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n};\n\n/**\n * Creates a layout rect based on the left, top, width and height parameters\n * in that order.\n * @param {number} left\n * @param {number} top\n * @param {number} width\n * @param {number} height\n * @return {!LayoutRectDef}\n */\nexport function layoutRectLtwh(left, top, width, height) {\n  return {\n    left,\n    top,\n    width,\n    height,\n    bottom: top + height,\n    right: left + width,\n    x: left,\n    y: top,\n  };\n}\n\n\n/**\n * Creates a layout rect based on the DOMRect, e.g. obtained from calling\n * getBoundingClientRect.\n * @param {!ClientRect} rect\n * @return {!LayoutRectDef}\n */\nexport function layoutRectFromDomRect(rect) {\n  return layoutRectLtwh(Number(rect.left), Number(rect.top),\n      Number(rect.width), Number(rect.height));\n}\n\n/**\n * Returns true if the specified two rects overlap by a single pixel.\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectsOverlap(r1, r2) {\n  return (r1.top <= r2.bottom && r2.top <= r1.bottom &&\n      r1.left <= r2.right && r2.left <= r1.right);\n}\n\n\n/**\n * Returns the intersection between a, b or null if there is none.\n * @param {...?LayoutRectDef|undefined} var_args\n * @return {?LayoutRectDef}\n */\nexport function rectIntersection(var_args) {\n  let x0 = -Infinity;\n  let x1 = Infinity;\n  let y0 = -Infinity;\n  let y1 = Infinity;\n  for (let i = 0; i < arguments.length; i++) {\n    const current = arguments[i];\n    if (!current) {\n      continue;\n    }\n    x0 = Math.max(x0, current.left);\n    x1 = Math.min(x1, current.left + current.width);\n    y0 = Math.max(y0, current.top);\n    y1 = Math.min(y1, current.top + current.height);\n    if (x1 < x0 || y1 < y0) {\n      return null;\n    }\n  }\n  if (x1 == Infinity) {\n    return null;\n  }\n  return layoutRectLtwh(x0, y0, x1 - x0, y1 - y0);\n}\n\n/**\n * Returns the position of r2 relative to r1\n * @param {!LayoutRectDef} r1\n * @param {!LayoutRectDef} r2\n * @return {RelativePositions}\n */\nexport function layoutRectsRelativePos(r1, r2) {\n  if (r1.top < r2.top) {\n    return RelativePositions.TOP;\n  } else if (r1.bottom > r2.bottom) {\n    return RelativePositions.BOTTOM;\n  } else {\n    return RelativePositions.INSIDE;\n  }\n}\n\n/**\n * Expand the layout rect using multiples of width and height.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dw Expansion in width, specified as a multiple of width.\n * @param {number} dh Expansion in height, specified as a multiple of height.\n * @return {!LayoutRectDef}\n */\nexport function expandLayoutRect(rect, dw, dh) {\n  return layoutRectLtwh(rect.left - rect.width * dw,\n      rect.top - rect.height * dh,\n      rect.width * (1 + dw * 2),\n      rect.height * (1 + dh * 2));\n}\n\n/**\n * Moves the layout rect using dx and dy.\n * @param {!LayoutRectDef} rect Original rect.\n * @param {number} dx Move horizontally with this value.\n * @param {number} dy Move vertically with this value.\n * @return {!LayoutRectDef}\n */\nexport function moveLayoutRect(rect, dx, dy) {\n  if ((dx == 0 && dy == 0) ||\n      (rect.width == 0 && rect.height == 0)) {\n    return rect;\n  }\n  return layoutRectLtwh(rect.left + dx, rect.top + dy,\n      rect.width, rect.height);\n}\n\n\n/**\n * @param {!LayoutMarginsDef} margins\n * @param {!LayoutMarginsChangeDef} change\n * @return {boolean}\n */\nexport function areMarginsChanged(margins, change) {\n  return (change.top !== undefined && change.top != margins.top) ||\n      (change.right !== undefined && change.right != margins.right) ||\n      (change.bottom !== undefined && change.bottom != margins.bottom) ||\n      (change.left !== undefined && change.left != margins.left);\n}\n\n/**\n * @param {!LayoutRectDef} from\n * @param {!LayoutRectDef} to\n * @return {boolean}\n */\nexport function layoutRectSizeEquals(from, to) {\n  return from.width == to.width &&\n      from.height === to.height;\n}\n\n/**\n * @param {?LayoutRectDef} r1\n * @param {?LayoutRectDef} r2\n * @return {boolean}\n */\nexport function layoutRectEquals(r1, r2) {\n  if (!r1 || !r2) {\n    return false;\n  }\n  return r1.left == r2.left && r1.top == r2.top &&\n      r1.width == r2.width && r1.height == r2.height;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements element layout. See https://goo.gl/9avXuT for\n * details.\n */\n\nimport {dev, user} from './log';\nimport {htmlFor} from './static-template';\nimport {isFiniteNumber} from './types';\nimport {setStyle, setStyles} from './style';\nimport {startsWith} from './string';\n\n/**\n * @enum {string}\n */\nexport const Layout = {\n  NODISPLAY: 'nodisplay',\n  FIXED: 'fixed',\n  FIXED_HEIGHT: 'fixed-height',\n  RESPONSIVE: 'responsive',\n  CONTAINER: 'container',\n  FILL: 'fill',\n  FLEX_ITEM: 'flex-item',\n  FLUID: 'fluid',\n  INTRINSIC: 'intrinsic',\n};\n\n\n/**\n * Layout priorities to use with BaseElement#getLayoutPriority() and\n * BaseElement#updateLayoutPriority().\n * @enum {number}\n */\nexport const LayoutPriority = {\n  CONTENT: 0,\n  METADATA: 1,\n  ADS: 2,\n  BACKGROUND: 3,\n};\n\n\n/**\n * CSS Length type. E.g. \"1px\" or \"20vh\".\n * @typedef {string}\n */\nexport let LengthDef;\n\n\n/**\n * @typedef {{\n *   width: string,\n *   height: string\n * }}\n */\nlet DimensionsDef;\n\n\n/**\n * The set of elements with natural dimensions, that is, elements\n * which have a known dimension either based on their value specified here,\n * or, if the value is null, a dimension specific to the browser.\n * `hasNaturalDimensions` checks for membership in this set.\n * `getNaturalDimensions` determines the dimensions for an element in the\n *    set and caches it.\n * @type {!Object<string, ?DimensionsDef>}\n * @private  Visible for testing only!\n */\nexport const naturalDimensions_ = {\n  'AMP-PIXEL': {width: '0px', height: '0px'},\n  'AMP-ANALYTICS': {width: '1px', height: '1px'},\n  // TODO(dvoytenko): audio should have width:auto.\n  'AMP-AUDIO': null,\n  'AMP-SOCIAL-SHARE': {width: '60px', height: '44px'},\n};\n\n\n/**\n * Elements that the progess can be shown for. This set has to be externalized\n * since the element's implementation may not be downloaded yet.\n * @enum {boolean}\n * @private  Visible for testing only!\n */\nexport const LOADING_ELEMENTS_ = {\n  'AMP-ANIM': true,\n  'AMP-BRIGHTCOVE': true,\n  'AMP-GOOGLE-DOCUMENT-EMBED': true,\n  'AMP-EMBED': true,\n  'AMP-FACEBOOK': true,\n  'AMP-FACEBOOK-COMMENTS': true,\n  'AMP-FACEBOOK-LIKE': true,\n  'AMP-FACEBOOK-PAGE': true,\n  'AMP-IFRAME': true,\n  'AMP-IMG': true,\n  'AMP-INSTAGRAM': true,\n  'AMP-LIST': true,\n  'AMP-OOYALA-PLAYER': true,\n  'AMP-PINTEREST': true,\n  'AMP-PLAYBUZZ': true,\n  'AMP-VIDEO': true,\n  'AMP-YOUTUBE': true,\n};\n\n\n/**\n * @param {string} s\n * @return {Layout|undefined} Returns undefined in case of failure to parse\n *   the layout string.\n */\nexport function parseLayout(s) {\n  for (const k in Layout) {\n    if (Layout[k] == s) {\n      return Layout[k];\n    }\n  }\n  return undefined;\n}\n\n\n/**\n * @param {!Layout} layout\n * @return {string}\n */\nexport function getLayoutClass(layout) {\n  return 'i-amphtml-layout-' + layout;\n}\n\n\n/**\n * Whether an element with this layout inherently defines the size.\n * @param {!Layout} layout\n * @return {boolean}\n */\nexport function isLayoutSizeDefined(layout) {\n  return (layout == Layout.FIXED ||\n      layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE ||\n      layout == Layout.FILL ||\n      layout == Layout.FLEX_ITEM ||\n      layout == Layout.FLUID ||\n      layout == Layout.INTRINSIC);\n}\n\n\n/**\n * Whether the tag is an internal (service) AMP tag.\n * @param {!Node|string} tag\n * @return {boolean}\n */\nexport function isInternalElement(tag) {\n  const tagName = (typeof tag == 'string') ? tag : tag.tagName;\n  return tagName && startsWith(tagName.toLowerCase(), 'i-');\n}\n\n\n/**\n * Parses the CSS length value. If no units specified, the assumed value is\n * \"px\". Returns undefined in case of parsing error.\n * @param {string|undefined|null} s\n * @return {!LengthDef|undefined}\n */\nexport function parseLength(s) {\n  if (typeof s == 'number') {\n    return s + 'px';\n  }\n  if (!s) {\n    return undefined;\n  }\n  if (!/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)?$/.test(s)) {\n    return undefined;\n  }\n  if (/^\\d+(\\.\\d+)?$/.test(s)) {\n    return s + 'px';\n  }\n  return s;\n}\n\n\n\n/**\n * Asserts that the supplied value is a non-percent CSS Length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {!LengthDef}\n */\nexport function assertLength(length) {\n  user().assert(\n      /^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|cm|mm|q|in|pc|pt)$/.test(length),\n      'Invalid length value: %s', length);\n  return /** @type {!LengthDef} */ (length);\n}\n\n\n\n\n/**\n * Asserts that the supplied value is a CSS Length value\n * (including percent unit).\n * @param {!LengthDef|string} length\n * @return {!LengthDef}\n */\nexport function assertLengthOrPercent(length) {\n  user().assert(/^\\d+(\\.\\d+)?(px|em|rem|vh|vw|vmin|vmax|%)$/.test(length),\n      'Invalid length or percent value: %s', length);\n  return length;\n}\n\n\n/**\n * Returns units from the CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {string}\n */\nexport function getLengthUnits(length) {\n  assertLength(length);\n  dev().assertString(length);\n  const m = user().assert(length.match(/[a-z]+/i),\n      'Failed to read units from %s', length);\n  return m[0];\n}\n\n\n/**\n * Returns the numeric value of a CSS length value.\n * @param {!LengthDef|string|null|undefined} length\n * @return {number|undefined}\n */\nexport function getLengthNumeral(length) {\n  const res = parseFloat(length);\n  return isFiniteNumber(res) ? res : undefined;\n}\n\n\n/**\n * Determines whether the tagName is a known element that has natural dimensions\n * in our runtime or the browser.\n * @param {string} tagName The element tag name.\n * @return {boolean}\n */\nexport function hasNaturalDimensions(tagName) {\n  tagName = tagName.toUpperCase();\n  return naturalDimensions_[tagName] !== undefined;\n}\n\n\n/**\n * Determines the default dimensions for an element which could vary across\n * different browser implementations, like <audio> for instance.\n * This operation can only be completed for an element whitelisted by\n * `hasNaturalDimensions`.\n * @param {!Element} element\n * @return {DimensionsDef}\n */\nexport function getNaturalDimensions(element) {\n  const tagName = element.tagName.toUpperCase();\n  dev().assert(naturalDimensions_[tagName] !== undefined);\n  if (!naturalDimensions_[tagName]) {\n    const doc = element.ownerDocument;\n    const naturalTagName = tagName.replace(/^AMP\\-/, '');\n    const temp = doc.createElement(naturalTagName);\n    // For audio, should no-op elsewhere.\n    temp.controls = true;\n    setStyles(temp, {\n      position: 'absolute',\n      visibility: 'hidden',\n    });\n    doc.body.appendChild(temp);\n    naturalDimensions_[tagName] = {\n      width: (temp./*OK*/offsetWidth || 1) + 'px',\n      height: (temp./*OK*/offsetHeight || 1) + 'px',\n    };\n    doc.body.removeChild(temp);\n  }\n  return /** @type {DimensionsDef} */ (naturalDimensions_[tagName]);\n}\n\n\n/**\n * Whether the loading can be shown for the specified elemeent. This set has\n * to be externalized since the element's implementation may not be\n * downloaded yet.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isLoadingAllowed(element) {\n  const tagName = element.tagName.toUpperCase();\n  if (tagName == 'AMP-AD' || tagName == 'AMP-EMBED') {\n    return true;\n  }\n  return LOADING_ELEMENTS_[tagName] || false;\n}\n\n\n/**\n * Applies layout to the element. Visible for testing only.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this method is used for server-side rendering (SSR) and\n * any changes made to it must be made in coordination with caches that\n * implement SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @param {!Element} element\n * @return {!Layout}\n */\nexport function applyStaticLayout(element) {\n  // Check if the layout has already been done by server-side rendering. The\n  // document may be visible to the user if the boilerplate was removed so\n  // please take care in making changes here.\n  const completedLayoutAttr = element.getAttribute('i-amphtml-layout');\n  if (completedLayoutAttr) {\n    const layout = /** @type {!Layout} */ (dev().assert(\n        parseLayout(completedLayoutAttr)));\n    if ((layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC)\n      && element.firstElementChild) {\n      // Find sizer, but assume that it might not have been parsed yet.\n      element.sizerElement =\n          element.querySelector('i-amphtml-sizer') || undefined;\n    } else if (layout == Layout.NODISPLAY) {\n      applyNoDisplayLayout(element);\n    }\n    return layout;\n  }\n\n  // If the layout was already done by server-side rendering (SSR), then the\n  // code below will not run. Any changes below will necessitate a change to SSR\n  // and must be coordinated with caches that implement SSR. See bit.ly/amp-ssr.\n\n  // Parse layout from the element.\n  const layoutAttr = element.getAttribute('layout');\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const sizesAttr = element.getAttribute('sizes');\n  const heightsAttr = element.getAttribute('heights');\n\n  // Input layout attributes.\n  const inputLayout = layoutAttr ? parseLayout(layoutAttr) : null;\n  user().assert(inputLayout !== undefined, 'Unknown layout: %s', layoutAttr);\n  /** @const {string|null|undefined} */\n  const inputWidth = (widthAttr && widthAttr != 'auto') ?\n    parseLength(widthAttr) : widthAttr;\n  user().assert(inputWidth !== undefined, 'Invalid width value: %s', widthAttr);\n  /** @const {string|null|undefined} */\n  const inputHeight = (heightAttr && heightAttr != 'fluid') ?\n    parseLength(heightAttr) : heightAttr;\n  user().assert(inputHeight !== undefined, 'Invalid height value: %s',\n      heightAttr);\n\n  // Effective layout attributes. These are effectively constants.\n  let width;\n  let height;\n  let layout;\n\n  // Calculate effective width and height.\n  if ((!inputLayout || inputLayout == Layout.FIXED ||\n      inputLayout == Layout.FIXED_HEIGHT) &&\n      (!inputWidth || !inputHeight) && hasNaturalDimensions(element.tagName)) {\n    // Default width and height: handle elements that do not specify a\n    // width/height and are defined to have natural browser dimensions.\n    const dimensions = getNaturalDimensions(element);\n    width = (inputWidth || inputLayout == Layout.FIXED_HEIGHT) ? inputWidth :\n      dimensions.width;\n    height = inputHeight || dimensions.height;\n  } else {\n    width = inputWidth;\n    height = inputHeight;\n  }\n\n  // Calculate effective layout.\n  if (inputLayout) {\n    layout = inputLayout;\n  } else if (!width && !height) {\n    layout = Layout.CONTAINER;\n  } else if (height == 'fluid') {\n    layout = Layout.FLUID;\n  } else if (height && (!width || width == 'auto')) {\n    layout = Layout.FIXED_HEIGHT;\n  } else if (height && width && (sizesAttr || heightsAttr)) {\n    layout = Layout.RESPONSIVE;\n  } else {\n    layout = Layout.FIXED;\n  }\n\n  // Verify layout attributes.\n  if (layout == Layout.FIXED || layout == Layout.FIXED_HEIGHT ||\n      layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(height, 'Expected height to be available: %s', heightAttr);\n  }\n  if (layout == Layout.FIXED_HEIGHT) {\n    user().assert(!width || width == 'auto',\n        'Expected width to be either absent or equal \"auto\" ' +\n        'for fixed-height layout: %s', widthAttr);\n  }\n  if (layout == Layout.FIXED || layout == Layout.RESPONSIVE ||\n      layout == Layout.INTRINSIC) {\n    user().assert(width && width != 'auto',\n        'Expected width to be available and not equal to \"auto\": %s',\n        widthAttr);\n  }\n\n  if (layout == Layout.RESPONSIVE || layout == Layout.INTRINSIC) {\n    user().assert(getLengthUnits(width) == getLengthUnits(height),\n        'Length units should be the same for width and height: %s, %s',\n        widthAttr, heightAttr);\n  } else {\n    user().assert(heightsAttr === null,\n        'Unexpected \"heights\" attribute for none-responsive layout');\n  }\n\n  // Apply UI.\n  element.classList.add(getLayoutClass(layout));\n  if (isLayoutSizeDefined(layout)) {\n    element.classList.add('i-amphtml-layout-size-defined');\n  }\n  if (layout == Layout.NODISPLAY) {\n    // CSS defines layout=nodisplay automatically with `display:none`. Thus\n    // no additional styling is needed.\n    applyNoDisplayLayout(element);\n  } else if (layout == Layout.FIXED) {\n    setStyles(element, {\n      width: dev().assertString(width),\n      height: dev().assertString(height),\n    });\n  } else if (layout == Layout.FIXED_HEIGHT) {\n    setStyle(element, 'height', dev().assertString(height));\n  } else if (layout == Layout.RESPONSIVE) {\n    const sizer = element.ownerDocument.createElement('i-amphtml-sizer');\n    setStyles(sizer, {\n      display: 'block',\n      paddingTop:\n        ((getLengthNumeral(height) / getLengthNumeral(width)) * 100) + '%',\n    });\n    element.insertBefore(sizer, element.firstChild);\n    element.sizerElement = sizer;\n  } else if (layout == Layout.INTRINSIC) {\n    // Intrinsic uses an svg inside the sizer element rather than the padding\n    // trick Note a naked svg won't work becasue other thing expect the\n    // i-amphtml-sizer element\n    const sizer = htmlFor(element)`\n      <i-amphtml-sizer class=\"i-amphtml-sizer\">\n        <img class=\"i-amphtml-intrinsic-sizer\" />\n      </i-amphtml-sizer>`;\n    const intrinsicSizer = sizer.firstElementChild;\n    intrinsicSizer.setAttribute('src',\n        `data:image/svg+xml;charset=utf-8,<svg height=\"${height}\" width=\"${width}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`);\n    element.insertBefore(sizer, element.firstChild);\n    // TODO(jpettitt): sizer is leaked and can't be cleaned up.\n    element.sizerElement = intrinsicSizer;\n  } else if (layout == Layout.FILL) {\n    // Do nothing.\n  } else if (layout == Layout.CONTAINER) {\n    // Do nothing. Elements themselves will check whether the supplied\n    // layout value is acceptable. In particular container is only OK\n    // sometimes.\n  } else if (layout == Layout.FLEX_ITEM) {\n    // Set height and width to a flex item if they exist.\n    // The size set to a flex item could be overridden by `display: flex` later.\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    if (height) {\n      setStyle(element, 'height', height);\n    }\n  } else if (layout == Layout.FLUID) {\n    element.classList.add('i-amphtml-layout-awaiting-size');\n    if (width) {\n      setStyle(element, 'width', width);\n    }\n    setStyle(element, 'height', 0);\n  }\n  return layout;\n}\n\n\n/**\n * @param {!Element} element\n */\nfunction applyNoDisplayLayout(element) {\n  // TODO(dvoytenko, #9353): once `toggleLayoutDisplay` API has been deployed\n  // everywhere, switch all relevant elements to this API. In the meantime,\n  // simply unblock display toggling via `style=\"display: ...\"`.\n  setStyle(element, 'display', 'none');\n  element.classList.add('i-amphtml-display');\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {getModeObject} from './mode-object';\nimport {isEnumValue} from './types';\n\n/**\n * Triple zero width space.\n *\n * This is added to user error messages, so that we can later identify\n * them, when the only thing that we have is the message. This is the\n * case in many browsers when the global exception handler is invoked.\n *\n * @const {string}\n */\nexport const USER_ERROR_SENTINEL = '\\u200B\\u200B\\u200B';\n\n\n/**\n * Four zero width space.\n *\n * @const {string}\n */\nexport const USER_ERROR_EMBED_SENTINEL = '\\u200B\\u200B\\u200B\\u200B';\n\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a user error.\n */\nexport function isUserErrorMessage(message) {\n  return message.indexOf(USER_ERROR_SENTINEL) >= 0;\n}\n\n/**\n * @param {string} message\n * @return {boolean} Whether this message was a a user error from an iframe embed.\n */\nexport function isUserErrorEmbed(message) {\n  return message.indexOf(USER_ERROR_EMBED_SENTINEL) >= 0;\n}\n\n\n/**\n * @enum {number}\n * @private Visible for testing only.\n */\nexport const LogLevel = {\n  OFF: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 3,\n  FINE: 4,\n};\n\n/**\n * Sets reportError function. Called from error.js to break cyclic\n * dependency.\n * @param {function(*, !Element=)|undefined} fn\n */\nexport function setReportError(fn) {\n  self.reportError = fn;\n}\n\n/**\n * @type {!LogLevel|undefined}\n * @private\n */\nlet levelOverride_ = undefined;\n\n/**\n * @param {!LogLevel} level\n */\nexport function overrideLogLevel(level) {\n  levelOverride_ = level;\n}\n\n/**\n * Logging class. Use of sentinel string instead of a boolean to check user/dev\n * errors because errors could be rethrown by some native code as a new error,\n * and only a message would survive. Also, some browser don’t support a 5th\n * error object argument in window.onerror. List of supporting browser can be\n * found here:\n * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n * @final\n * @private Visible for testing only.\n */\nexport class Log {\n  /**\n   * opt_suffix will be appended to error message to identify the type of the\n   * error message. We can't rely on the error object to pass along the type\n   * because some browsers do not have this param in its window.onerror API.\n   * See:\n   * https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html\n   *\n   * @param {!Window} win\n   * @param {function(!./mode.ModeDef):!LogLevel} levelFunc\n   * @param {string=} opt_suffix\n   */\n  constructor(win, levelFunc, opt_suffix) {\n    /**\n     * In tests we use the main test window instead of the iframe where\n     * the tests runs because only the former is relayed to the console.\n     * @const {!Window}\n     */\n    this.win = (getMode().test && win.AMP_TEST_IFRAME) ? win.parent : win;\n\n    /** @private @const {function(!./mode.ModeDef):!LogLevel} */\n    this.levelFunc_ = levelFunc;\n\n    /** @private @const {!LogLevel} */\n    this.level_ = this.defaultLevel_();\n\n    /** @private @const {string} */\n    this.suffix_ = opt_suffix || '';\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  getLevel_() {\n    return (levelOverride_ !== undefined) ? levelOverride_ : this.level_;\n  }\n\n  /**\n   * @return {!LogLevel}\n   * @private\n   */\n  defaultLevel_() {\n    // No console - can't enable logging.\n    if (!this.win.console || !this.win.console.log) {\n      return LogLevel.OFF;\n    }\n\n    // Logging has been explicitly disabled.\n    if (getMode().log == '0') {\n      return LogLevel.OFF;\n    }\n\n    // Logging is enabled for tests directly.\n    if (getMode().test && this.win.ENABLE_LOG) {\n      return LogLevel.FINE;\n    }\n\n    // LocalDev by default allows INFO level, unless overriden by `#log`.\n    if (getMode().localDev && !getMode().log) {\n      return LogLevel.INFO;\n    }\n\n    // Delegate to the specific resolver.\n    return this.levelFunc_(getModeObject());\n  }\n\n  /**\n   * @param {string} tag\n   * @param {string} level\n   * @param {!Array} messages\n   */\n  msg_(tag, level, messages) {\n    if (this.getLevel_() != LogLevel.OFF) {\n      let fn = this.win.console.log;\n      if (level == 'ERROR') {\n        fn = this.win.console.error || fn;\n      } else if (level == 'INFO') {\n        fn = this.win.console.info || fn;\n      } else if (level == 'WARN') {\n        fn = this.win.console.warn || fn;\n      }\n      if (getMode().localDev) {\n        messages.unshift('[' + tag + ']');\n      }\n      fn.apply(this.win.console, messages);\n    }\n  }\n\n  /**\n   * Whether the logging is enabled.\n   * @return {boolean}\n   */\n  isEnabled() {\n    return this.getLevel_() != LogLevel.OFF;\n  }\n\n  /**\n   * Reports a fine-grained message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  fine(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.FINE) {\n      this.msg_(tag, 'FINE', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a informational message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  info(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.INFO) {\n      this.msg_(tag, 'INFO', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports a warning message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  warn(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.WARN) {\n      this.msg_(tag, 'WARN', Array.prototype.slice.call(arguments, 1));\n    }\n  }\n\n  /**\n   * Reports an error message. If the logging is disabled, the error is rethrown\n   * asynchronously.\n   * @param {string} tag\n   * @param {...*} var_args\n   * @return {!Error|undefined}\n   * @private\n   */\n  error_(tag, var_args) {\n    if (this.getLevel_() >= LogLevel.ERROR) {\n      this.msg_(tag, 'ERROR', Array.prototype.slice.call(arguments, 1));\n    } else {\n      const error = createErrorVargs.apply(null,\n          Array.prototype.slice.call(arguments, 1));\n      this.prepareError_(error);\n      return error;\n    }\n  }\n\n  /**\n   * Reports an error message.\n   * @param {string} tag\n   * @param {...*} var_args\n   */\n  error(tag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.name = tag || error.name;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Reports an error message and marks with an expected property. If the\n   * logging is disabled, the error is rethrown asynchronously.\n   * @param {string} unusedTag\n   * @param {...*} var_args\n   */\n  expectedError(unusedTag, var_args) {\n    const error = this.error_.apply(this, arguments);\n    if (error) {\n      error.expected = true;\n      // reportError is installed globally per window in the entry point.\n      self.reportError(error);\n    }\n  }\n\n  /**\n   * Creates an error object.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    return error;\n  }\n\n  /**\n   * Creates an error object with its expected property set to true.\n   * @param {...*} var_args\n   * @return {!Error}\n   */\n  createExpectedError(var_args) {\n    const error = createErrorVargs.apply(null, arguments);\n    this.prepareError_(error);\n    error.expected = true;\n    return error;\n  }\n\n  /**\n   * Throws an error if the first argument isn't trueish.\n   *\n   * Supports argument substitution into the message via %s placeholders.\n   *\n   * Throws an error object that has two extra properties:\n   * - associatedElement: This is the first element provided in the var args.\n   *   It can be used for improved display of error messages.\n   * - messageArray: The elements of the substituted message as non-stringified\n   *   elements in an array. When e.g. passed to console.error this yields\n   *   native displays of things like HTML elements.\n   *\n   * @param {T} shouldBeTrueish The value to assert. The assert fails if it does\n   *     not evaluate to true.\n   * @param {string=} opt_message The assertion message\n   * @param {...*} var_args Arguments substituted into %s in the message.\n   * @return {T} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 0\n   */\n  assert(shouldBeTrueish, opt_message, var_args) {\n    let firstElement;\n    if (!shouldBeTrueish) {\n      const message = opt_message || 'Assertion failed';\n      const splitMessage = message.split('%s');\n      const first = splitMessage.shift();\n      let formatted = first;\n      const messageArray = [];\n      pushIfNonEmpty(messageArray, first);\n      for (let i = 2; i < arguments.length; i++) {\n        const val = arguments[i];\n        if (val && val.tagName) {\n          firstElement = val;\n        }\n        const nextConstant = splitMessage.shift();\n        messageArray.push(val);\n        pushIfNonEmpty(messageArray, nextConstant.trim());\n        formatted += toString(val) + nextConstant;\n      }\n      const e = new Error(formatted);\n      e.fromAssert = true;\n      e.associatedElement = firstElement;\n      e.messageArray = messageArray;\n      this.prepareError_(e);\n      // reportError is installed globally per window in the entry point.\n      self.reportError(e);\n      throw e;\n    }\n    return shouldBeTrueish;\n  }\n\n  /**\n   * Throws an error if the first argument isn't an Element\n   *\n   * Otherwise see `assert` for usage\n   *\n   * @param {*} shouldBeElement\n   * @param {string=} opt_message The assertion message\n   * @return {!Element} The value of shouldBeTrueish.\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertElement(shouldBeElement, opt_message) {\n    const shouldBeTrueish = shouldBeElement && shouldBeElement.nodeType == 1;\n    this.assert(shouldBeTrueish, (opt_message || 'Element expected') + ': %s',\n        shouldBeElement);\n    return /** @type {!Element} */ (shouldBeElement);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a string. The string can\n   * be empty.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeString\n   * @param {string=} opt_message The assertion message\n   * @return {string} The string value. Can be an empty string.\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertString(shouldBeString, opt_message) {\n    this.assert(typeof shouldBeString == 'string',\n        (opt_message || 'String expected') + ': %s', shouldBeString);\n    return /** @type {string} */ (shouldBeString);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a number. The allowed values\n   * include `0` and `NaN`.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeNumber\n   * @param {string=} opt_message The assertion message\n   * @return {number} The number value. The allowed values include `0`\n   *   and `NaN`.\n   */\n  assertNumber(shouldBeNumber, opt_message) {\n    this.assert(typeof shouldBeNumber == 'number',\n        (opt_message || 'Number expected') + ': %s', shouldBeNumber);\n    return /** @type {number} */ (shouldBeNumber);\n  }\n\n  /**\n   * Throws an error if the first argument isn't a boolean.\n   *\n   * For more details see `assert`.\n   *\n   * @param {*} shouldBeBoolean\n   * @param {string=} opt_message The assertion message\n   * @return {boolean} The boolean value.\n   */\n  assertBoolean(shouldBeBoolean, opt_message) {\n    this.assert(!!shouldBeBoolean === shouldBeBoolean,\n        (opt_message || 'Boolean expected') + ': %s', shouldBeBoolean);\n    return /** @type {boolean} */ (shouldBeBoolean);\n  }\n\n  /**\n   * Asserts and returns the enum value. If the enum doesn't contain such a\n   * value, the error is thrown.\n   *\n   * @param {!Object<T>} enumObj\n   * @param {string} s\n   * @param {string=} opt_enumName\n   * @return {T}\n   * @template T\n   * eslint \"google-camelcase/google-camelcase\": 2\n   */\n  assertEnumValue(enumObj, s, opt_enumName) {\n    if (isEnumValue(enumObj, s)) {\n      return s;\n    }\n    this.assert(false,\n        'Unknown %s value: \"%s\"',\n        opt_enumName || 'enum', s);\n  }\n\n  /**\n   * @param {!Error} error\n   * @private\n   */\n  prepareError_(error) {\n    error = duplicateErrorIfNecessary(error);\n    if (this.suffix_) {\n      if (!error.message) {\n        error.message = this.suffix_;\n      } else if (error.message.indexOf(this.suffix_) == -1) {\n        error.message += this.suffix_;\n      }\n    } else if (isUserErrorMessage(error.message)) {\n      error.message = error.message.replace(USER_ERROR_SENTINEL, '');\n    }\n  }\n}\n\n/**\n * @param {string|!Element} val\n * @return {string}\n */\nfunction toString(val) {\n  // Do check equivalent to `val instanceof Element` without cross-window bug\n  if (val && val.nodeType == 1) {\n    return val.tagName.toLowerCase() + (val.id ? '#' + val.id : '');\n  }\n  return /** @type {string} */ (val);\n}\n\n\n/**\n * @param {!Array} array\n * @param {*} val\n */\nfunction pushIfNonEmpty(array, val) {\n  if (val != '') {\n    array.push(val);\n  }\n}\n\n/**\n * Some exceptions (DOMException, namely) have read-only message.\n * @param {!Error} error\n * @return {!Error};\n */\nexport function duplicateErrorIfNecessary(error) {\n  const {message} = error;\n  const test = String(Math.random());\n  error.message = test;\n\n  if (error.message === test) {\n    error.message = message;\n    return error;\n  }\n\n  const e = new Error(error.message);\n  // Copy all the extraneous things we attach.\n  for (const prop in error) {\n    e[prop] = error[prop];\n  }\n  // Ensure these are copied.\n  e.stack = error.stack;\n  return e;\n}\n\n/**\n * @param {...*} var_args\n * @return {!Error}\n * @visibleForTesting\n */\nexport function createErrorVargs(var_args) {\n  let error = null;\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (arg instanceof Error && !error) {\n      error = duplicateErrorIfNecessary(arg);\n    } else {\n      if (message) {\n        message += ' ';\n      }\n      message += arg;\n    }\n  }\n\n  if (!error) {\n    error = new Error(message);\n  } else if (message) {\n    error.message = message + ': ' + error.message;\n  }\n  return error;\n}\n\n\n/**\n * Rethrows the error without terminating the current context. This preserves\n * whether the original error designation is a user error or a dev error.\n * @param {...*} var_args\n */\nexport function rethrowAsync(var_args) {\n  const error = createErrorVargs.apply(null, arguments);\n  setTimeout(() => {\n    // reportError is installed globally per window in the entry point.\n    self.reportError(error);\n    throw error;\n  });\n}\n\n\n/**\n * Cache for logs. We do not use a Service since the service module depends\n * on Log and closure literally can't even.\n * @type {{user: ?Log, dev: ?Log, userForEmbed: ?Log}}\n */\nself.log = (self.log || {\n  user: null,\n  dev: null,\n  userForEmbed: null,\n});\n\nconst logs = self.log;\n\n/**\n * Eventually holds a constructor for Log objects. Lazily initialized, so we\n * can avoid ever referencing the real constructor except in JS binaries\n * that actually want to include the implementation.\n * @type {?Function}\n */\nlet logConstructor = null;\n\n/**\n * Initializes log contructor.\n */\nexport function initLogConstructor() {\n  logConstructor = Log;\n  // Initialize instances for use. If a binary (an extension for example) that\n  // does not call `initLogConstructor` invokes `dev()` or `user()` earlier than\n  // the binary that does call `initLogConstructor` (amp.js), the extension will\n  // throw an error as that extension will never be able to initialize the log\n  // instances and we also don't want it to call `initLogConstructor` either\n  // (since that will cause the Log implementation to be bundled into that\n  // binary). So we must initialize the instances eagerly so that they are ready\n  // for use (stored globally) after the main binary calls `initLogConstructor`.\n  dev();\n  user();\n}\n\n/**\n * Resets log contructor for testing.\n */\nexport function resetLogConstructorForTesting() {\n  logConstructor = null;\n}\n\n/**\n * Publisher level log.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Development mode is enabled via `#development=1` or logging is explicitly\n *     enabled via `#log=D` where D >= 1.\n *  3. AMP.setLogLevel(D) is called, where D >= 1.\n *\n * @param {!Element=} opt_element\n * @return {!Log}\n */\nexport function user(opt_element) {\n  if (!logs.user) {\n    logs.user = getUserLogger(USER_ERROR_SENTINEL);\n  }\n  if (!isFromEmbed(logs.user.win, opt_element)) {\n    return logs.user;\n  } else {\n    if (logs.userForEmbed) {\n      return logs.userForEmbed;\n    }\n    return logs.userForEmbed = getUserLogger(USER_ERROR_EMBED_SENTINEL);\n  }\n}\n\n/**\n * Getter for user logger\n * @param {string=} suffix\n * @return {!Log}\n */\nfunction getUserLogger(suffix) {\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (mode.development || logNum >= 1) {\n      return LogLevel.FINE;\n    }\n    return LogLevel.WARN;\n  }, suffix);\n}\n\n/**\n * AMP development log. Calls to `devLog().assert` and `dev.fine` are stripped\n * in the PROD binary. However, `devLog().assert` result is preserved in either\n * case.\n *\n * Enabled in the following conditions:\n *  1. Not disabled using `#log=0`.\n *  2. Logging is explicitly enabled via `#log=D`, where D >= 2.\n *  3. AMP.setLogLevel(D) is called, where D >= 2.\n *\n * @return {!Log}\n */\nexport function dev() {\n  if (logs.dev) {\n    return logs.dev;\n  }\n  if (!logConstructor) {\n    throw new Error('failed to call initLogConstructor');\n  }\n  return logs.dev = new logConstructor(self, mode => {\n    const logNum = parseInt(mode.log, 10);\n    if (logNum >= 3) {\n      return LogLevel.FINE;\n    }\n    if (logNum >= 2) {\n      return LogLevel.INFO;\n    }\n    return LogLevel.OFF;\n  });\n}\n\n/**\n * @param {!Window} win\n * @param {!Element=} opt_element\n * @return {boolean} isEmbed\n */\nexport function isFromEmbed(win, opt_element) {\n  if (!opt_element) {\n    return false;\n  }\n  return opt_element.ownerDocument.defaultView != win;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\n\n/**\n * Provides info about the current app. This return value may be cached and\n * passed around as it will always be DCE'd.\n * @param {?Window=} opt_win\n * @return {!./mode.ModeDef}\n */\nexport function getModeObject(opt_win) {\n  return {\n    localDev: getMode(opt_win).localDev,\n    development: getMode(opt_win).development,\n    filter: getMode(opt_win).filter,\n    minified: getMode(opt_win).minified,\n    lite: getMode(opt_win).lite,\n    test: getMode(opt_win).test,\n    log: getMode(opt_win).log,\n    version: getMode(opt_win).version,\n    rtvVersion: getMode(opt_win).rtvVersion,\n  };\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {parseQueryString_} from './url-parse-query-string';\n\n/**\n * @typedef {{\n *   localDev: boolean,\n *   development: boolean,\n *   filter: (string|undefined),\n *   minified: boolean,\n *   lite: boolean,\n *   test: boolean,\n *   log: (string|undefined),\n *   version: string,\n *   rtvVersion: string,\n * }}\n */\nexport let ModeDef;\n\n/** @type {string} */\nconst version = '$internalRuntimeVersion$';\n\n/**\n * `rtvVersion` is the prefixed version we serve off of the cdn.\n * The prefix denotes canary(00) or prod(01) or an experiment version ( > 01).\n * @type {string}\n */\nlet rtvVersion = '';\n\n/**\n * Provides info about the current app.\n * @param {?Window=} opt_win\n * @return {!ModeDef}\n */\nexport function getMode(opt_win) {\n  const win = opt_win || self;\n  if (win.AMP_MODE) {\n    return win.AMP_MODE;\n  }\n  return win.AMP_MODE = getMode_(win);\n}\n\n/**\n * Provides info about the current app.\n * @param {!Window} win\n * @return {!ModeDef}\n */\nfunction getMode_(win) {\n  // Magic constants that are replaced by closure compiler.\n  // IS_MINIFIED is always replaced with true when closure compiler is used\n  // while IS_DEV is only replaced when `gulp dist` is called without the\n  // --fortesting flag.\n  const IS_DEV = true;\n  const IS_MINIFIED = false;\n\n  const localDevEnabled = !!(self.AMP_CONFIG && self.AMP_CONFIG.localDev);\n  const runningTests = IS_DEV && !!(win.AMP_TEST || win.__karma__);\n  const isLocalDev = IS_DEV && (localDevEnabled || runningTests);\n  const hashQuery = parseQueryString_(\n      // location.originalHash is set by the viewer when it removes the fragment\n      // from the URL.\n      win.location.originalHash || win.location.hash);\n\n  const searchQuery = parseQueryString_(win.location.search);\n\n  if (!rtvVersion) {\n    rtvVersion = getRtvVersion(win, isLocalDev);\n  }\n\n  // The `minified`, `test` and `localDev` properties are replaced\n  // as boolean literals when we run `gulp dist` without the `--fortesting`\n  // flags. This improved DCE on the production file we deploy as the code\n  // paths for localhost/testing/development are eliminated.\n  return {\n    localDev: isLocalDev,\n    // Triggers validation or enable pub level logging. Validation can be\n    // bypassed via #validate=0.\n    // Note that AMP_DEV_MODE flag is used for testing purposes.\n    development: !!(hashQuery['development'] == '1' || win.AMP_DEV_MODE),\n    examiner: hashQuery['development'] == '2',\n    // Allows filtering validation errors by error category. For the\n    // available categories, see ErrorCategory in validator/validator.proto.\n    filter: hashQuery['filter'],\n    // amp-geo override\n    geoOverride: hashQuery['amp-geo'],\n    minified: IS_MINIFIED,\n    // Whether document is in an amp-lite viewer. It signal that the user\n    // would prefer to use less bandwidth.\n    lite: searchQuery['amp_lite'] != undefined,\n    test: runningTests,\n    log: hashQuery['log'],\n    version,\n    rtvVersion,\n  };\n}\n\n/**\n * Retrieve the `rtvVersion` which will have a numeric prefix\n * denoting canary/prod/experiment (unless `isLocalDev` is true).\n *\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n */\nfunction getRtvVersion(win, isLocalDev) {\n  // If it's local dev then we won't actually have a full version so\n  // just use the version.\n  if (isLocalDev) {\n    return version;\n  }\n\n  if (win.AMP_CONFIG && win.AMP_CONFIG.v) {\n    return win.AMP_CONFIG.v;\n  }\n\n  // Currently `$internalRuntimeVersion$` and thus `mode.version` contain only\n  // major version. The full version however must also carry the minor version.\n  // We will default to production default `01` minor version for now.\n  // TODO(erwinmombay): decide whether $internalRuntimeVersion$ should contain\n  // minor version.\n  return `01${version}`;\n}\n\n\n/**\n * @param {!Window} win\n * @param {boolean} isLocalDev\n * @return {string}\n * @visibleForTesting\n */\nexport function getRtvVersionForTesting(win, isLocalDev) {\n  return getRtvVersion(win, isLocalDev);\n}\n\n\n/** @visibleForTesting */\nexport function resetRtvVersionForTesting() {\n  rtvVersion = '';\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * This class helps to manage observers. Observers can be added, removed or\n * fired through and instance of this class.\n * @template TYPE\n */\nexport class Observable {\n\n  /**\n   * Creates an instance of Observable.\n   */\n  constructor() {\n    /** @type {?Array<function(TYPE)>} */\n    this.handlers_ = null;\n  }\n\n  /**\n   * Adds the observer to this instance.\n   * @param {function(TYPE)} handler Observer's handler.\n   * @return {!UnlistenDef}\n   */\n  add(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n    return () => {\n      this.remove(handler);\n    };\n  }\n\n  /**\n   * Removes the observer from this instance.\n   * @param {function(TYPE)} handler Observer's instance.\n   */\n  remove(handler) {\n    if (!this.handlers_) {\n      return;\n    }\n    const index = this.handlers_.indexOf(handler);\n    if (index > -1) {\n      this.handlers_.splice(index, 1);\n    }\n  }\n\n  /**\n   * Removes all observers.\n   */\n  removeAll() {\n    if (!this.handlers_) {\n      return;\n    }\n    this.handlers_.length = 0;\n  }\n\n  /**\n   * Fires an event. All observers are called.\n   * @param {TYPE=} opt_event\n   */\n  fire(opt_event) {\n    if (!this.handlers_) {\n      return;\n    }\n    const handlers = this.handlers_;\n    for (let i = 0; i < handlers.length; i++) {\n      const handler = handlers[i];\n      handler(opt_event);\n    }\n  }\n\n  /**\n   * Returns number of handlers. Mostly needed for tests.\n   * @return {number}\n   */\n  getHandlerCount() {\n    if (!this.handlers_) {\n      return 0;\n    }\n    return this.handlers_.length;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getMode} from './mode';\nimport {install as installArrayIncludes} from './polyfills/array-includes';\nimport {install as installCustomElements} from './polyfills/custom-elements';\nimport {\n  install as installDOMTokenListToggle,\n} from './polyfills/domtokenlist-toggle';\nimport {install as installDocContains} from './polyfills/document-contains';\nimport {install as installMathSign} from './polyfills/math-sign';\nimport {install as installObjectAssign} from './polyfills/object-assign';\nimport {install as installPromise} from './polyfills/promise';\nimport {installCustomElements as installRegisterElement} from\n  'document-register-element/build/document-register-element.patched';\nimport {isExperimentOn} from './experiments';\n\nif (isExperimentOn(self, 'custom-elements-v1') || getMode().test) {\n  installCustomElements(self, class {});\n} else {\n  installRegisterElement(self, 'auto');\n}\ninstallDOMTokenListToggle(self);\ninstallMathSign(self);\ninstallObjectAssign(self);\ninstallPromise(self);\ninstallDocContains(self);\ninstallArrayIncludes(self);\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Returns true if the element is in the array and false otherwise.\n *\n * @param {*} value\n * @param {number=} opt_fromIndex\n * @return {boolean}\n * @this {Array}\n */\nfunction includes(value, opt_fromIndex) {\n  const fromIndex = opt_fromIndex || 0;\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    const other = this[i];\n    // If value has been found OR (value is NaN AND other is NaN)\n    /*eslint \"no-self-compare\": 0*/\n    if (other === value || (value !== value && other !== other)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n* Sets the Array.contains polyfill if it does not exist.\n* @param {!Window} win\n*/\nexport function install(win) {\n  if (!win.Array.prototype.includes) {\n    win.Object.defineProperty(Array.prototype, 'includes', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: includes,\n    });\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {{\n *   promise: !Promise<undefined>,\n *   resolve: function(),\n * }}\n */\nlet DeferredDef;\n\n/**\n * @typedef {!Function}\n */\nlet CustomElementConstructorDef;\n\n/**\n * @typedef {{\n *  name: string,\n *  ctor: !CustomElementConstructorDef,\n * }}\n */\nlet CustomElementDef;\n\n/**\n * Validates the custom element's name.\n * This intentionally ignores \"valid\" higher Unicode Code Points.\n * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n */\nconst VALID_NAME = /^[a-z][a-z0-9._]*-[a-z0-9._-]*$/;\nconst INVALID_NAMES = [\n  'annotation-xml',\n  'color-profile',\n  'font-face',\n  'font-face-src',\n  'font-face-uri',\n  'font-face-format',\n  'font-face-name',\n  'missing-glyph',\n];\n\n/**\n * Asserts that the custom element name conforms to the spec.\n *\n * @param {!Function} SyntaxError\n * @param {string} name\n */\nfunction assertValidName(SyntaxError, name) {\n  if (!VALID_NAME.test(name) || INVALID_NAMES.indexOf(name) >= 0) {\n    throw new SyntaxError(`invalid custom element name \"${name}\"`);\n  }\n}\n\n/**\n * Does win have a full Custom Elements registry?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction hasCustomElements(win) {\n  const {customElements} = win;\n\n  return !!(\n    customElements &&\n    customElements.define &&\n    customElements.get &&\n    customElements.whenDefined);\n}\n\n/**\n * Was HTMLElement already patched for this window?\n *\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isPatched(win) {\n  const tag = win.HTMLElement.toString();\n  return tag.indexOf('[native code]') === -1;\n}\n\n/**\n * The public Custom Elements API.\n */\nclass CustomElementRegistry {\n  /**\n   * @param {!Window} win\n   * @param {!Registry} registry\n   */\n  constructor(win, registry) {\n    /**\n     * @const @private\n     */\n    this.win_ = win;\n\n    /**\n     * @const @private\n     */\n    this.registry_ = registry;\n\n    /**\n     * @type {!Object<string, DeferredDef>}\n     * @private\n     * @const\n     */\n    this.pendingDefines_ = this.win_.Object.create(null);\n  }\n\n  /**\n   * Register the custom element.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object=} options\n   */\n  define(name, ctor, options) {\n    this.registry_.define(name, ctor, options);\n\n    // If anyone is waiting for this custom element to be defined, resolve\n    // their promise.\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      deferred.resolve();\n      delete pending[name];\n    }\n  }\n\n  /**\n   * Get the constructor of the (already defined) custom element.\n   *\n   * @param {string} name\n   * @return {!CustomElementConstructorDef|undefined}\n   */\n  get(name) {\n    const def = this.registry_.getByName(name);\n    if (def) {\n      return def.ctor;\n    }\n  }\n\n  /**\n   * Returns a promise that waits until the custom element is defined.\n   * If the custom element is already defined, returns a resolved promise.\n   *\n   * @param {string} name\n   * @return {!Promise<undefined>}\n   */\n  whenDefined(name) {\n    const {Promise, SyntaxError} = this.win_;\n    assertValidName(SyntaxError, name);\n\n    if (this.registry_.getByName(name)) {\n      return Promise.resolve();\n    }\n\n    const pending = this.pendingDefines_;\n    const deferred = pending[name];\n    if (deferred) {\n      return deferred.promise;\n    }\n\n    let resolve;\n    const promise = new /*OK*/Promise(res => resolve = res);\n    pending[name] = {\n      promise,\n      resolve,\n    };\n\n    return promise;\n  }\n\n  /**\n   * Upgrade all custom elements inside root.\n   *\n   * @param {!Node} root\n   */\n  upgrade(root) {\n    this.registry_.upgrade(root);\n  }\n}\n\n/**\n * This internal APIs necessary to run the CustomElementRegistry.\n * Since Registry is never exposed externally, all methods are actually\n * available on the instance.\n */\nclass Registry {\n  /**\n   * @param {!Window} win\n   */\n  constructor(win) {\n    /**\n     * @private @const\n     */\n    this.win_ = win;\n\n    /**\n     * @private @const\n     */\n    this.doc_ = win.document;\n\n    /**\n     * @type {!Object<string, !CustomElementDef>}\n     * @private\n     * @const\n     */\n    this.definitions_ = win.Object.create(null);\n\n    /**\n     * A up-to-date DOM selector for all custom elements.\n     * @type {string}\n     */\n    this.query_ = '';\n\n    /**\n     * The currently upgrading element.\n     * @private {Element}\n     */\n    this.current_ = null;\n  }\n\n  /**\n   * The currently-being-upgraded custom element.\n   *\n   * When an already created (through the DOM parsing APIs, or innerHTML)\n   * custom element node is being upgraded, we can't just create a new node\n   * (it's illegal in the spec). But we still need to run the custom element's\n   * constructor code on the node. We avoid this conundrum by running the\n   * constructor while returning this current node in the HTMLElement\n   * class constructor (the base class of all custom elements).\n   *\n   * @return {Element}\n   */\n  current() {\n    const current = this.current_;\n    this.current_ = null;\n    return current;\n  }\n\n  /**\n   * Finds the custom element definition by name.\n   *\n   * @param {string} name\n   * @return {CustomElementDef|undefined}\n   */\n  getByName(name) {\n    const definition = this.definitions_[name];\n    if (definition) {\n      return definition;\n    }\n  }\n\n  /**\n   * Finds the custom element definition by constructor instance.\n   *\n   * @param {CustomElementConstructorDef} ctor\n   * @return {CustomElementDef|undefined}\n   */\n  getByConstructor(ctor) {\n    const definitions = this.definitions_;\n\n    for (const name in definitions) {\n      const def = definitions[name];\n      if (def.ctor === ctor) {\n        return def;\n      }\n    }\n  }\n\n  /**\n   * Registers the custom element definition, and upgrades all elements by that\n   * name in the root document.\n   *\n   * @param {string} name\n   * @param {!CustomElementConstructorDef} ctor\n   * @param {!Object|undefined} options\n   */\n  define(name, ctor, options) {\n    const {Error, SyntaxError} = this.win_;\n\n    if (options) {\n      throw new Error('Extending native custom elements is not supported');\n    }\n\n    assertValidName(SyntaxError, name);\n\n    if (this.getByName(name) ||\n        this.getByConstructor(ctor)) {\n      throw new Error(`duplicate definition \"${name}\"`);\n    }\n\n    // TODO(jridgewell): Record connectedCallback, disconnectedCallback,\n    // adoptedCallback, attributeChangedCallback, and observedAttributes.\n    // TODO(jridgewell): If attributeChangedCallback, gather observedAttributes\n    this.definitions_[name] = {\n      name,\n      ctor,\n    };\n\n    this.observe_(name);\n    this.upgrade(this.doc_, name);\n  }\n\n  /**\n   * Upgrades custom elements descendants of root (but not including root).\n   *\n   * When called with an opt_query, it both upgrades and connects the custom\n   * elements (this is used during the custom element define algorithm).\n   *\n   * @param {!Node} root\n   * @param {string=} opt_query\n   */\n  upgrade(root, opt_query) {\n    // Only CustomElementRegistry.p.define provides a query (the newly defined\n    // custom element). In this case, we are both upgrading _and_ connecting\n    // the custom elements.\n    const newlyDefined = !!opt_query;\n    const query = opt_query || this.query_;\n    const upgradeCandidates = this.queryAll_(root, query);\n\n    for (let i = 0; i < upgradeCandidates.length; i++) {\n      const candidate = upgradeCandidates[i];\n      if (newlyDefined) {\n        this.connectedCallback_(candidate);\n      } else {\n        this.upgradeSelf(candidate);\n      }\n    }\n  }\n\n  /**\n   * Upgrades the custom element node, if a custom element has been registered\n   * by this name.\n   *\n   * @param {!Node} node\n   */\n  upgradeSelf(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n  }\n\n  /**\n   * @param {!Node} root\n   * @param {string} query\n   * @return {!Array|!NodeList}\n   */\n  queryAll_(root, query) {\n    if (!query || !root.querySelectorAll) {\n      // Nothing to do...\n      return [];\n    }\n\n    return root.querySelectorAll(query);\n  }\n\n  /**\n   * Upgrades the (already created via DOM parsing) custom element.\n   *\n   * @param {!Element} node\n   * @param {!CustomElementDef} def\n   */\n  upgradeSelf_(node, def) {\n    const {ctor} = def;\n    if (node instanceof ctor) {\n      return;\n    }\n\n    // Despite how it looks, this is not a useless construction.\n    // HTMLElementPolyfill (the base class of all custom elements) will return\n    // the current node, allowing the custom element's subclass constructor to\n    // run on the node. The node itself is already constructed, so the return\n    // value is just the node.\n    this.current_ = node;\n    const el = new ctor();\n\n    if (el !== node) {\n      throw new this.win_.Error(\n          'Constructor illegally returned a different instance.');\n    }\n  }\n\n  /**\n   * Fires connectedCallback on the custom element, if it has one.\n   * This also upgrades the custom element, since it may not have been\n   * accessible via the root document before (a detached DOM tree).\n   *\n   * @param {!Node} node\n   */\n  connectedCallback_(node) {\n    const def = this.getByName(node.localName);\n    if (!def) {\n      return;\n    }\n    this.upgradeSelf_(/** @type {!Element} */(node), def);\n    // TODO(jridgewell): It may be appropriate to adoptCallback, if the node\n    // used to be in another doc.\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.connectedCallback) {\n      node.connectedCallback();\n    }\n  }\n\n  /**\n   * Fires disconnectedCallback on the custom element, if it has one.\n   *\n   * @param {!Node} node\n   */\n  disconnectedCallback_(node) {\n    // TODO(jridgewell): I should be calling the definitions connectedCallback\n    // with node as the context.\n    if (node.disconnectedCallback) {\n      node.disconnectedCallback();\n    }\n  }\n\n  /**\n   * Records name as a registered custom element to observe.\n   *\n   * Starts the Mutation Observer if this is the first registered custom\n   * element. This is deferred until the first custom element is defined to\n   * speed up initial rendering of the page.\n   *\n   * Mutation Observers are conveniently available in every browser we care\n   * about. When a node is connected to the root document, all custom\n   * elements (including that node iteself) will be upgraded and call\n   * connectedCallback. When a node is disconnectedCallback from the root\n   * document, all custom elements will call disconnectedCallback.\n   *\n   * @param {string} name\n   */\n  observe_(name) {\n    if (this.query_) {\n      this.query_ += `,${name}`;\n      return;\n    }\n\n    this.query_ = name;\n\n    // The first registered name starts the mutation observer.\n    const observer = new this.win_.MutationObserver(records => {\n      if (records) {\n        this.handleRecords_(records);\n      }\n    });\n    observer.observe(this.doc_, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  /**\n   * Handle all the Mutation Observer's Mutation Records.\n   * All added custom elements will be upgraded (if not already) and call\n   * connectedCallback. All removed custom elements will call\n   * disconnectedCallback.\n   *\n   * @param {!Array<!MutationRecord>} records\n   */\n  handleRecords_(records) {\n    for (let i = 0; i < records.length; i++) {\n      const record = records[i];\n      if (!record) {\n        continue;\n      }\n\n      const {addedNodes, removedNodes} = record;\n      for (let i = 0; i < addedNodes.length; i++) {\n        const node = addedNodes[i];\n        const connectedCandidates = this.queryAll_(node, this.query_);\n        this.connectedCallback_(node);\n        for (let i = 0; i < connectedCandidates.length; i++) {\n          this.connectedCallback_(connectedCandidates[i]);\n        }\n      }\n\n      for (let i = 0; i < removedNodes.length; i++) {\n        const node = removedNodes[i];\n        const disconnectedCandidates = this.queryAll_(node, this.query_);\n        this.disconnectedCallback_(node);\n        for (let i = 0; i < disconnectedCandidates.length; i++) {\n          this.disconnectedCallback_(disconnectedCandidates[i]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Does the polyfilling.\n * @param {!Window} win\n */\nfunction polyfill(win) {\n  const {HTMLElement, Element, Node, Document, Object, document} = win;\n  const {createElement, cloneNode, importNode} = document;\n\n  const registry = new Registry(win);\n  const customElements = new CustomElementRegistry(win, registry);\n\n  // Expose the custom element registry.\n  // Object.getOwnPropertyDescriptor(window, 'customElements')\n  // {get: ƒ, set: undefined, enumerable: true, configurable: true}\n  Object.defineProperty(win, 'customElements', {\n    enumerable: true,\n    configurable: true,\n    // writable: false,\n    value: customElements,\n  });\n\n  // Patch createElement to immediately upgrade the custom element.\n  // This has the added benefit that it avoids the \"already created but needs\n  // constructor code run\" chicken-and-egg problem.\n  Document.prototype.createElement = function createElementPolyfill(name) {\n    const def = registry.getByName(name);\n    if (def) {\n      return new def.ctor();\n    }\n    return createElement.apply(this, arguments);\n  };\n\n  // Patch importNode to immediately upgrade custom elements.\n  // TODO(jridgewell): Can fire adoptedCallback for cross doc imports.\n  Document.prototype.importNode = function importNodePolyfill() {\n    const imported = importNode.apply(this, arguments);\n    if (imported) {\n      registry.upgradeSelf(imported);\n      registry.upgrade(imported);\n    }\n    return imported;\n  };\n\n  // Patch cloneNode to immediately upgrade custom elements.\n  Node.prototype.cloneNode = function cloneNodePolyfill() {\n    const cloned = cloneNode.apply(this, arguments);\n    registry.upgradeSelf(cloned);\n    registry.upgrade(cloned);\n    return cloned;\n  };\n\n  // Patch the innerHTML setter to immediately upgrade custom elements.\n  // Note, this could technically fire connectedCallbacks if this node was\n  // connected, but we leave that to the Mutation Observer.\n  const innerHTMLDesc = Object.getOwnPropertyDescriptor(Element.prototype,\n      'innerHTML');\n  const innerHTMLSetter = innerHTMLDesc.set;\n  innerHTMLDesc.set = function(html) {\n    innerHTMLSetter.call(this, html);\n    registry.upgrade(this);\n  };\n  Object.defineProperty(Element.prototype, 'innerHTML', innerHTMLDesc);\n\n  /**\n   * You can't use the real HTMLElement constructor, because you can't subclass\n   * it without using native classes. So, mock its approximation using\n   * createElement.\n   */\n  function HTMLElementPolyfill() {\n    const {constructor} = this;\n\n    // If we're upgrading an already created custom element, we can't create\n    // another new node (by the spec, it must be the same node).\n    let el = registry.current();\n\n    // If there's not a already created custom element, we're being invoked via\n    // `new`ing the constructor.\n    //\n    // Technically, we could get here via createElement, but we patched that.\n    // If it the custom element was registered, the patch turned it into a\n    // `new` call.\n    // If it was not registered, the native createElement is used. And if\n    // native createElement is being used and we got to this code, we're really\n    // in an infinite loop (a native createElement call just below) so we've\n    // got bigger problems.\n    //\n    // So just take my word we got here via `new`.\n    if (!el) {\n      // The custom element definition is an invariant. If the custom element\n      // is registered, everything works. If it's not, it throws in the member\n      // property access (only defined custom elements can be directly\n      // constructed via `new`).\n      const def = registry.getByConstructor(constructor);\n      el = createElement.call(document, def.name);\n    }\n\n    // Finally, if the node was already constructed, we need to reset it's\n    // prototype to the custom element prototype. And if it wasn't already\n    // constructed, we created a new node via native createElement, and we need\n    // to reset it's prototype. Basically always reset the prototype.\n    Object.setPrototypeOf(el, constructor.prototype);\n    return el;\n  }\n  subClass(Object, HTMLElement, HTMLElementPolyfill);\n\n  // Expose the polyfilled HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementPolyfill;\n}\n\n/**\n * Wraps HTMLElement in a Reflect.construct constructor, so that transpiled\n * classes can `_this = superClass.call(this)` during their construction.\n *\n * This is only used when Custom Elements v1 is already available _and_ we're\n * using transpiled classes (which use ES5 construction idioms).\n *\n * @param {!Window} win\n */\nfunction wrapHTMLElement(win) {\n  const {HTMLElement, Reflect, Object} = win;\n  /**\n   */\n  function HTMLElementWrapper() {\n    const ctor = /** @type {function(...?):?|undefined} */(\n      /** @type {!HTMLElement} */(this).constructor);\n\n    // Reflect.construct allows us to construct a new HTMLElement without using\n    // `new` (which will always fail because native HTMLElement is a restricted\n    // constructor).\n    return Reflect.construct(HTMLElement, [], ctor);\n  }\n  subClass(Object, HTMLElement, HTMLElementWrapper);\n\n  // Expose the wrapped HTMLElement constructor for everyone to extend from.\n  win.HTMLElement = HTMLElementWrapper;\n}\n\n/**\n * Setups up prototype inheritance\n *\n * @param {!Object} Object\n * @param {!Function} superClass\n * @param {!Function} subClass\n */\nfunction subClass(Object, superClass, subClass) {\n  // Object.getOwnPropertyDescriptor(superClass.prototype, 'constructor')\n  // {value: ƒ, writable: true, enumerable: false, configurable: true}\n  subClass.prototype = Object.create(superClass.prototype, {\n    constructor: {\n      // enumerable: false,\n      configurable: true,\n      writable: true,\n      value: subClass,\n    },\n  });\n}\n\n/**\n * Polyfills Custom Elements v1 API. This has 4 modes:\n *\n * 1. Custom elements v1 already supported, using native classes\n * 2. Custom elements v1 already supported, using transpiled classes\n * 3. Custom elements v1 not supported, using native classes\n * 4. Custom elements v1 not supported, using transpiled classes\n *\n * In mode 1, nothing is done. In mode 2, a minimal polyfill is used to support\n * extending the HTMLElement base class. In mode 3 and 4, a full polyfill is\n * done.\n *\n * @param {!Window} win\n * @param {!Function} ctor\n */\nexport function install(win, ctor) {\n  if (isPatched(win)) {\n    return;\n  }\n\n  let install = true;\n  let installWrapper = false;\n\n  if (hasCustomElements(win)) {\n    // If ctor is constructable without new, it's a function. That means it was\n    // compiled down, and we need to do the minimal polyfill because all you\n    // cannot extend HTMLElement without native classes.\n    try {\n      const {Object, Reflect} = win;\n\n      // \"Construct\" ctor using ES5 idioms\n      const instance = Object.create(ctor.prototype);\n      ctor.call(instance);\n\n      // If that succeeded, we're in a transpiled environment\n      // Let's find out if we can wrap HTMLElement and avoid a full patch.\n      installWrapper = !!(Reflect && Reflect.construct);\n    } catch (e) {\n\n      // The ctor threw when we constructed is via ES5, so it's a real class.\n      // We're ok to not install the polyfill.\n      install = false;\n    }\n  }\n\n  if (installWrapper) {\n    wrapHTMLElement(win);\n  } else if (install) {\n    polyfill(win);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `document.contains()` method. Notice that according to spec\n * `document.contains` is inclusionary.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Node/contains\n * @param {?Node} node\n * @return {boolean}\n * @this {Node}\n */\nfunction documentContainsPolyfill(node) {\n  // Per spec, \"contains\" method is inclusionary\n  // i.e. `node.contains(node) == true`. However, we still need to test\n  // equality to the document itself.\n  return node == this || this.documentElement.contains(node);\n}\n\n\n/**\n * Polyfills `HTMLDocument.contains` API.\n * @param {!Window} win\n */\nexport function install(win) {\n  // HTMLDocument is undefined in Internet Explorer 10, but it has Document,\n  // so we use that as a fallback.\n  const documentClass = win.HTMLDocument || win.Document;\n  if (!documentClass.prototype.contains) {\n    win.Object.defineProperty(documentClass.prototype, 'contains', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: documentContainsPolyfill,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Polyfill for `DOMTokenList.prototype.toggle(token, opt_force)` method. This\n * is specially important because IE does not support `opt_force` attribute. See\n * https://goo.gl/hgKNYY for details.\n * @param {string} token\n * @param {boolean=} opt_force\n * @this {DOMTokenList}\n * @return {boolean}\n */\nfunction domTokenListTogglePolyfill(token, opt_force) {\n  const remove = opt_force === undefined ? this.contains(token) : !opt_force;\n  if (remove) {\n    this.remove(token);\n    return false;\n  } else {\n    this.add(token);\n    return true;\n  }\n}\n\n\n/**\n * Polyfills `DOMTokenList.prototype.toggle` API in IE.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (isIe(win) && win.DOMTokenList) {\n    win.Object.defineProperty(win.DOMTokenList.prototype, 'toggle', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: domTokenListTogglePolyfill,\n    });\n  }\n}\n\n\n/**\n * Whether the current browser is a IE browser.\n * @param {!Window} win\n * @return {boolean}\n */\nfunction isIe(win) {\n  return /Trident|MSIE|IEMobile/i.test(win.navigator.userAgent);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Parses the number x and returns its sign. For positive x returns 1, for\n * negative, -1. For 0 and -0, returns 0 and -0 respectively. For any number\n * that parses to NaN, returns NaN.\n *\n * @param {number} x\n * @return {number}\n */\nexport function sign(x) {\n  x = Number(x);\n\n  // If x is 0, -0, or NaN, return it.\n  if (!x) {\n    return x;\n  }\n\n  return x > 0 ? 1 : -1;\n}\n\n\n/**\n * Sets the Math.sign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Math.sign) {\n    win.Object.defineProperty(win.Math, 'sign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: sign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {hasOwnProperty} = Object.prototype;\n\n/**\n * Copies values of all enumerable own properties from one or more source\n * objects (provided as extended arguments to the function) to a target object.\n *\n * @param {!Object} target\n * @param {...Object} var_args\n * @return {!Object}\n */\nexport function assign(target, var_args) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  const output = Object(target);\n  for (let i = 1; i < arguments.length; i++) {\n    const source = arguments[i];\n    if (source != null) {\n      for (const key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          output[key] = source[key];\n        }\n      }\n    }\n  }\n  return output;\n}\n\n\n/**\n * Sets the Object.assign polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Object.assign) {\n    win.Object.defineProperty(win.Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign,\n    });\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as Promise from 'promise-pjs/promise';\n\n/**\n * Sets the Promise polyfill if it does not exist.\n * @param {!Window} win\n */\nexport function install(win) {\n  if (!win.Promise) {\n    win.Promise = /** @type {?} */ (Promise);\n    // In babel the * export is an Object with a default property.\n    // In closure compiler it is the Promise function itself.\n    if (Promise.default) {\n      win.Promise = Promise.default;\n    }\n    // We copy the individual static methods, because closure\n    // compiler flattens the polyfill namespace.\n    win.Promise.resolve = Promise.resolve;\n    win.Promise.reject = Promise.reject;\n    win.Promise.all = Promise.all;\n    win.Promise.race = Promise.race;\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev} from './log';\nimport {getServicePromise} from './service';\n\n/**\n * A map of services that delay rendering. The key is the name of the service\n * and the value is a DOM query which is used to check if the service is needed\n * in the current document.\n * Do not add a service unless absolutely necessary.\n *\n * \\   \\  /  \\  /   / /   \\     |   _  \\     |  \\ |  | |  | |  \\ |  |  / _____|\n *  \\   \\/    \\/   / /  ^  \\    |  |_)  |    |   \\|  | |  | |   \\|  | |  |  __\n *   \\            / /  /_\\  \\   |      /     |  . `  | |  | |  . `  | |  | |_ |\n *    \\    /\\    / /  _____  \\  |  |\\  \\----.|  |\\   | |  | |  |\\   | |  |__| |\n *     \\__/  \\__/ /__/     \\__\\ | _| `._____||__| \\__| |__| |__| \\__|  \\______|\n *\n * The equivalent of this list is used for server-side rendering (SSR) and any\n * changes made to it must be made in coordination with caches that implement\n * SSR. For more information on SSR see bit.ly/amp-ssr.\n *\n * @const {!Object<string, string>}\n */\nconst SERVICES = {\n  'amp-dynamic-css-classes': '[custom-element=amp-dynamic-css-classes]',\n  'variant': 'amp-experiment',\n  'amp-story': 'amp-story[standalone]',\n};\n\n/**\n * Maximum milliseconds to wait for all extensions to load before erroring.\n * @const\n */\nconst LOAD_TIMEOUT = 3000;\n\n/**\n * Detects any render delaying services that are required on the page, and\n * returns a promise with a timeout.\n * @param {!Window} win\n * @return {!Promise<!Array<*>>} resolves to an Array that has the same length\n *     as the detected render delaying services\n */\nexport function waitForServices(win) {\n  const promises = includedServices(win).map(service => {\n    return Services.timerFor(win).timeoutPromise(\n        LOAD_TIMEOUT,\n        getServicePromise(win, service),\n        `Render timeout waiting for service ${service} to be ready.`\n    );\n  });\n  return Promise.all(promises);\n}\n\n/**\n * Returns true if the page has a render delaying service.\n * @param {!Window} win\n * @return {boolean}\n */\nexport function hasRenderDelayingServices(win) {\n  return includedServices(win).length > 0;\n}\n\n/**\n * Detects which, if any, render-delaying extensions are included on the page.\n * @param {!Window} win\n * @return {!Array<string>}\n */\nexport function includedServices(win) {\n  /** @const {!Document} */\n  const doc = win.document;\n  dev().assert(doc.body);\n\n  return Object.keys(SERVICES).filter(service => {\n    return doc.querySelector(SERVICES[service]);\n  });\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Registration and getter functions for AMP services.\n *\n * Invariant: Service getters never return null for registered services.\n */\n\n// src/polyfills.js must be the first import.\nimport './polyfills'; // eslint-disable-line sort-imports-es6-autofix/sort-imports-es6\n\nimport {Deferred} from './utils/promise';\nimport {dev} from './log';\nimport {toWin} from './types';\n\n\n/**\n * Holds info about a service.\n * - obj: Actual service implementation when available.\n * - promise: Promise for the obj.\n * - resolve: Function to resolve the promise with the object.\n * - context: Argument for ctor, either a window or an ampdoc.\n * - ctor: Function that constructs and returns the service.\n * @typedef {{\n *   obj: (?Object),\n *   promise: (?Promise),\n *   resolve: (?function(!Object)),\n *   context: (?Window|?./service/ampdoc-impl.AmpDoc),\n *   ctor: (?function(new:Object, !Window)|\n *          ?function(new:Object, !./service/ampdoc-impl.AmpDoc)),\n * }}\n */\nlet ServiceHolderDef;\n\n\n/**\n * This interface provides a `dispose` method that will be called by\n * runtime when a service needs to be disposed of.\n * @interface\n */\nexport class Disposable {\n\n  /**\n   * Instructs the service to release any resources it might be holding. Can\n   * be called only once in the lifecycle of a service.\n   */\n  dispose() {}\n}\n\n\n/**\n * This interface provides a `adoptEmbedWindow` method that will be called by\n * runtime for a new embed window.\n * @interface\n */\nexport class EmbeddableService {\n\n  /**\n   * Instructs the service to adopt the embed window and add any necessary\n   * listeners and resources.\n   * @param {!Window} unusedEmbedWin\n   */\n  adoptEmbedWindow(unusedEmbedWin) {}\n}\n\n\n/**\n * Returns a service with the given id. Assumes that it has been registered\n * already.\n * @param {!Window} win\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceInEmbedScope(win, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n  if (local) {\n    return local;\n  }\n  if (opt_fallbackToTopWin) {\n    return getService(win, id);\n  }\n  return null;\n}\n\n/**\n * Returns a service with the given id. Assumes that it has been constructed\n * already.\n *\n * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n * services since sometimes we only have the FIE Document for context.\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @param {boolean=} opt_fallbackToTopWin\n * @return {Object} The service.\n */\nexport function getExistingServiceForDocInEmbedScope(\n  nodeOrDoc, id, opt_fallbackToTopWin) {\n  // First, try to resolve via local (embed) window.\n  if (nodeOrDoc.nodeType) {\n    // If a node is passed, try to resolve via this node.\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    const local = getLocalExistingServiceForEmbedWinOrNull(win, id);\n    if (local) {\n      return local;\n    }\n  }\n  // If an ampdoc is passed or fallback is allowed, continue resolving.\n  if (!nodeOrDoc.nodeType || opt_fallbackToTopWin) {\n    return getServiceForDocDeprecated(nodeOrDoc, id);\n  }\n  return null;\n}\n\n/**\n * Installs a service override on amp-doc level.\n * @param {!Window} embedWin\n * @param {string} id\n * @param {!Object} service The service.\n */\nexport function installServiceInEmbedScope(embedWin, id, service) {\n  const topWin = getTopWindow(embedWin);\n  dev().assert(embedWin != topWin,\n      'Service override can only be installed in embed window: %s', id);\n  dev().assert(!getLocalExistingServiceForEmbedWinOrNull(embedWin, id),\n      'Service override has already been installed: %s', id);\n  registerServiceInternal(embedWin, embedWin, id, () => service);\n  getServiceInternal(embedWin, id); // Force service to build.\n}\n\n/**\n * @param {!Window} embedWin\n * @param {string} id\n * @return {?Object}\n */\nfunction getLocalExistingServiceForEmbedWinOrNull(embedWin, id) {\n  // Note that this method currently only resolves against the given window.\n  // It does not try to go all the way up the parent window chain. We can change\n  // this in the future, but for now this gives us a better performance.\n  const topWin = getTopWindow(embedWin);\n  if (embedWin != topWin && isServiceRegistered(embedWin, id)) {\n    return getServiceInternal(embedWin, id);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Registers a service given a class to be used as implementation.\n * @param {!Window} win\n * @param {string} id of the service.\n * @param {function(new:Object, !Window)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilder(win,\n  id,\n  constructor,\n  opt_instantiate) {\n  win = getTopWindow(win);\n  registerServiceInternal(win, win, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(win, id);\n  }\n}\n\n\n/**\n * Returns a service and registers it given a class to be used as\n * implementation.\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id of the service.\n * @param {function(new:Object, !./service/ampdoc-impl.AmpDoc)} constructor\n * @param {boolean=} opt_instantiate Whether to immediately create the service\n */\nexport function registerServiceBuilderForDoc(nodeOrDoc,\n  id,\n  constructor,\n  opt_instantiate) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  registerServiceInternal(holder, ampdoc, id, constructor);\n  if (opt_instantiate) {\n    getServiceInternal(holder, id);\n  }\n}\n\n\n/**\n * Returns a service for the given id and window (a per-window singleton). Users\n * should typically wrap this as a special purpose function (e.g.\n * `Services.vsyncFor(win)`) for type safety and because the factory should not\n * be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @template T\n * @return {T}\n */\nexport function getService(win, id) {\n  win = getTopWindow(win);\n  return getServiceInternal(win, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and window. Also expects an\n * element that has the actual implementation. The promise resolves when the\n * implementation loaded. Users should typically wrap this as a special purpose\n * function (e.g. `Services.vsyncFor(win)`) for type safety and because the\n * factory should not be passed around.\n * @param {!Window} win\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nexport function getServicePromise(win, id) {\n  return getServicePromiseInternal(win, id);\n}\n\n\n/**\n * Returns a service or null with the given id.\n * @param {!Window} win\n * @param {string} id\n * @return {?Object} The service.\n */\nexport function getExistingServiceOrNull(win, id) {\n  win = getTopWindow(win);\n  if (isServiceRegistered(win, id)) {\n    return getServiceInternal(win, id);\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * Like getServicePromise but returns null if the service was never registered.\n * @param {!Window} win\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNull(win, id) {\n  return getServicePromiseOrNullInternal(win, id);\n}\n\n\n/**\n * Returns a service for the given id and ampdoc (a per-ampdoc singleton).\n * Expects service `id` to be registered.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDoc(elementOrAmpDoc, id) {\n  const ampdoc = getAmpdoc(elementOrAmpDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * tl;dr -- Use getServiceForDoc() instead of this.\n *\n * Privileged variant of getServiceForDoc() that accepts non-element params,\n * e.g. window.document. This is currently necessary for doc-level services\n * used in startup, e.g. Chunks. Eventually we want to remove this function\n * and have callers find the appropriate AmpDoc and use getServiceForDoc().\n *\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @param {string} id\n * @return {T}\n * @template T\n */\nexport function getServiceForDocDeprecated(nodeOrDoc, id) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  return getServiceInternal(holder, id);\n}\n\n\n/**\n * Returns a promise for a service for the given id and ampdoc. Also expects\n * a service that has the actual implementation. The promise resolves when\n * the implementation loaded.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {!Promise<!Object>}\n */\nexport function getServicePromiseForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n\n/**\n * Like getServicePromiseForDoc but returns null if the service was never\n * registered for this ampdoc.\n * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n * @param {string} id\n * @return {?Promise<!Object>}\n */\nexport function getServicePromiseOrNullForDoc(elementOrAmpDoc, id) {\n  return getServicePromiseOrNullInternal(\n      getAmpdocServiceHolder(elementOrAmpDoc), id);\n}\n\n/**\n * Set the parent and top windows on a child window (friendly iframe).\n * @param {!Window} win\n * @param {!Window} parentWin\n */\nexport function setParentWindow(win, parentWin) {\n  win.__AMP_PARENT = parentWin;\n  win.__AMP_TOP = getTopWindow(parentWin);\n}\n\n\n/**\n * Returns the parent window for a child window (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getParentWindow(win) {\n  return win.__AMP_PARENT || win;\n}\n\n\n/**\n * Returns the top window where AMP Runtime is installed for a child window\n * (friendly iframe).\n * @param {!Window} win\n * @return {!Window}\n */\nexport function getTopWindow(win) {\n  return win.__AMP_TOP || win;\n}\n\n\n/**\n * Returns the parent \"friendly\" iframe if the node belongs to a child window.\n * @param {!Node} node\n * @param {!Window} topWin\n * @return {?HTMLIFrameElement}\n */\nexport function getParentWindowFrameElement(node, topWin) {\n  const childWin = (node.ownerDocument || node).defaultView;\n  if (childWin && childWin != topWin && getTopWindow(childWin) == topWin) {\n    try {\n      return /** @type {?HTMLIFrameElement} */ (childWin.frameElement);\n    } catch (e) {\n      // Ignore the error.\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc}\n */\nexport function getAmpdoc(nodeOrDoc) {\n  if (nodeOrDoc.nodeType) {\n    const win = toWin(/** @type {!Document} */ (\n      nodeOrDoc.ownerDocument || nodeOrDoc).defaultView);\n    return getAmpdocService(win).getAmpDoc(/** @type {!Node} */ (nodeOrDoc));\n  }\n  return /** @type {!./service/ampdoc-impl.AmpDoc} */ (nodeOrDoc);\n}\n\n\n/**\n * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n * @return {!./service/ampdoc-impl.AmpDoc|!Window}\n */\nfunction getAmpdocServiceHolder(nodeOrDoc) {\n  const ampdoc = getAmpdoc(nodeOrDoc);\n  return ampdoc.isSingleDoc() ? ampdoc.win : ampdoc;\n}\n\n\n/**\n * This is essentially a duplicate of `ampdoc.js`, but necessary to avoid\n * circular dependencies.\n * @param {!Window} win\n * @return {!./service/ampdoc-impl.AmpDocService}\n */\nfunction getAmpdocService(win) {\n  return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n    getService(win, 'ampdoc'));\n}\n\n\n/**\n * Get service `id` from `holder`. Assumes the service\n * has already been registered.\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {Object}\n * @template T\n */\nfunction getServiceInternal(holder, id) {\n  dev().assert(isServiceRegistered(holder, id),\n      `Expected service ${id} to be registered`);\n  const services = getServices(holder);\n  const s = services[id];\n  if (!s.obj) {\n    dev().assert(s.ctor, `Service ${id} registered without ctor nor impl.`);\n    dev().assert(s.context, `Service ${id} registered without context.`);\n    s.obj = new s.ctor(s.context);\n    dev().assert(s.obj, `Service ${id} constructed to null.`);\n    s.ctor = null;\n    s.context = null;\n    // The service may have been requested already, in which case we have a\n    // pending promise we need to fulfill.\n    if (s.resolve) {\n      s.resolve(s.obj);\n    }\n  }\n  return s.obj;\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {!Window|!./service/ampdoc-impl.AmpDoc} context Win or AmpDoc.\n * @param {string} id of the service.\n * @param {?function(new:Object, !Window)|?function(new:Object, !./service/ampdoc-impl.AmpDoc)} ctor Constructor function to new the service. Called with context.\n */\nfunction registerServiceInternal(holder, context, id, ctor) {\n  const services = getServices(holder);\n  let s = services[id];\n\n  if (!s) {\n    s = services[id] = {\n      obj: null,\n      promise: null,\n      resolve: null,\n      context: null,\n      ctor: null,\n    };\n  }\n\n  if (s.ctor || s.obj) {\n    // Service already registered.\n    return;\n  }\n\n  s.ctor = ctor;\n  s.context = context;\n\n  // The service may have been requested already, in which case there is a\n  // pending promise that needs to fulfilled.\n  if (s.resolve) {\n    // getServiceInternal will resolve the promise.\n    getServiceInternal(holder, id);\n  }\n}\n\n/**\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {!Promise<!Object>}\n */\nfunction getServicePromiseInternal(holder, id) {\n  const cached = getServicePromiseOrNullInternal(holder, id);\n  if (cached) {\n    return cached;\n  }\n  // Service is not registered.\n\n  // TODO(@cramforce): Add a check that if the element is eventually registered\n  // that the service is actually provided and this promise resolves.\n  const deferred = new Deferred();\n  const {promise, resolve} = deferred;\n\n  const services = getServices(holder);\n  services[id] = {\n    obj: null,\n    promise,\n    resolve,\n    context: null,\n    ctor: null,\n  };\n  return promise;\n}\n\n\n/**\n * Returns a promise for service `id` if the service has been registered\n * on `holder`.\n * @param {!Object} holder\n * @param {string} id of the service.\n * @return {?Promise<!Object>}\n */\nfunction getServicePromiseOrNullInternal(holder, id) {\n  const services = getServices(holder);\n  const s = services[id];\n  if (s) {\n    if (s.promise) {\n      return s.promise;\n    } else {\n      // Instantiate service if not already instantiated.\n      getServiceInternal(holder, id);\n      return s.promise = Promise.resolve(/** @type {!Object} */ (s.obj));\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the object that holds the services registered in a holder.\n * @param {!Object} holder\n * @return {!Object<string,!ServiceHolderDef>}\n */\nfunction getServices(holder) {\n  let {services} = holder;\n  if (!services) {\n    services = holder.services = {};\n  }\n  return services;\n}\n\n\n/**\n * Whether the specified service implements `Disposable` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isDisposable(service) {\n  return typeof service.dispose == 'function';\n}\n\n\n/**\n * Asserts that the specified service implements `Disposable` interface and\n * typecasts the instance to `Disposable`.\n * @param {!Object} service\n * @return {!Disposable}\n */\nexport function assertDisposable(service) {\n  dev().assert(isDisposable(service), 'required to implement Disposable');\n  return /** @type {!Disposable} */ (service);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * ampdoc scope.\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc\n */\nexport function disposeServicesForDoc(ampdoc) {\n  disposeServicesInternal(ampdoc);\n}\n\n\n/**\n * Disposes all disposable (implements `Disposable` interface) services in\n * embed scope.\n * @param {!Window} embedWin\n */\nexport function disposeServicesForEmbed(embedWin) {\n  disposeServicesInternal(embedWin);\n}\n\n\n/**\n * @param {!Object} holder Object holding the service instances.\n */\nfunction disposeServicesInternal(holder) {\n  // TODO(dvoytenko): Consider marking holder as destroyed for later-arriving\n  // service to be canceled automatically.\n  const services = getServices(holder);\n  for (const id in services) {\n    if (!Object.prototype.hasOwnProperty.call(services, id)) {\n      continue;\n    }\n    const serviceHolder = services[id];\n    if (serviceHolder.obj) {\n      disposeServiceInternal(id, serviceHolder.obj);\n    } else if (serviceHolder.promise) {\n      serviceHolder.promise.then(\n          instance => disposeServiceInternal(id, instance));\n    }\n  }\n}\n\n\n/**\n * @param {string} id\n * @param {!Object} service\n */\nfunction disposeServiceInternal(id, service) {\n  if (!isDisposable(service)) {\n    return;\n  }\n  try {\n    assertDisposable(service).dispose();\n  } catch (e) {\n    // Ensure that a failure to dispose a service does not disrupt other\n    // services.\n    dev().error('SERVICE', 'failed to dispose service', id, e);\n  }\n}\n\n\n/**\n * Whether the specified service implements `EmbeddableService` interface.\n * @param {!Object} service\n * @return {boolean}\n */\nexport function isEmbeddable(service) {\n  return typeof service.adoptEmbedWindow == 'function';\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n */\nexport function adoptServiceForEmbed(embedWin, serviceId) {\n  const adopted = adoptServiceForEmbedIfEmbeddable(embedWin, serviceId);\n  dev().assert(adopted, `Service ${serviceId} not found on parent ` +\n      'or doesn\\'t implement EmbeddableService.');\n}\n\n\n/**\n * Adopts an embeddable (implements `EmbeddableService` interface) service\n * in embed scope.\n * @param {!Window} embedWin\n * @param {string} serviceId\n * @return {boolean}\n */\nexport function adoptServiceForEmbedIfEmbeddable(embedWin, serviceId) {\n  const frameElement = /** @type {!Node} */ (dev().assert(\n      embedWin.frameElement,\n      'frameElement not found for embed'));\n  const ampdoc = getAmpdoc(frameElement);\n  const holder = getAmpdocServiceHolder(ampdoc);\n  if (!isServiceRegistered(holder, serviceId)) {\n    return false;\n  }\n  const service = getServiceForDocDeprecated(frameElement, serviceId);\n  if (!isEmbeddable(service)) {\n    return false;\n  }\n  service.adoptEmbedWindow(embedWin);\n  return true;\n}\n\n\n/**\n * Resets a single service, so it gets recreated on next getService invocation.\n * @param {!Object} holder\n * @param {string} id of the service.\n */\nexport function resetServiceForTesting(holder, id) {\n  if (holder.services) {\n    holder.services[id] = null;\n  }\n}\n\n/**\n * @param {!Object} holder Object holding the service instance.\n * @param {string} id of the service.\n * @return {boolean}\n */\nfunction isServiceRegistered(holder, id) {\n  const service = holder.services && holder.services[id];\n  // All registered services must have an implementation or a constructor.\n  return !!(service && (service.ctor || service.obj));\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from '../services';\nimport {\n  closestByTag,\n  escapeCssSelectorIdent,\n  isIframed,\n  openWindowDialog,\n} from '../dom';\nimport {dev, user} from '../log';\nimport {\n  getExtraParamsUrl,\n  shouldAppendExtraParams,\n} from '../impression';\nimport {getMode} from '../mode';\nimport {\n  installServiceInEmbedScope,\n  registerServiceBuilderForDoc,\n} from '../service';\nimport {toWin} from '../types';\n\nconst TAG = 'navigation';\n/** @private @const {string} */\nconst EVENT_TYPE_CLICK = 'click';\n/** @private @const {string} */\nconst EVENT_TYPE_CONTEXT_MENU = 'contextmenu';\n\n/** @private @const {string} */\nconst ORIG_HREF_ATTRIBUTE = 'data-a4a-orig-href';\n\n/**\n * Install navigation service for ampdoc, which handles navigations from anchor\n * tag clicks and other runtime features like AMP.navigateTo().\n *\n * Immediately instantiates the service.\n *\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n */\nexport function installGlobalNavigationHandlerForDoc(ampdoc) {\n  registerServiceBuilderForDoc(\n      ampdoc,\n      TAG,\n      Navigation,\n      /* opt_instantiate */ true);\n}\n\n/**\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {!Event} e\n * @visibleForTesting\n */\nexport function maybeExpandUrlParamsForTesting(ampdoc, e) {\n  maybeExpandUrlParams(ampdoc, e);\n}\n\n/**\n * Intercept any click on the current document and prevent any\n * linking to an identifier from pushing into the history stack.\n * @implements {../service.EmbeddableService}\n * @visibleForTesting\n */\nexport class Navigation {\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   * @param {(!Document|!ShadowRoot)=} opt_rootNode\n   */\n  constructor(ampdoc, opt_rootNode) {\n    /** @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc = ampdoc;\n\n    /** @private @const {!Document|!ShadowRoot} */\n    this.rootNode_ = opt_rootNode || ampdoc.getRootNode();\n\n    /** @private @const {!./viewport/viewport-impl.Viewport} */\n    this.viewport_ = Services.viewportForDoc(this.ampdoc);\n\n    /** @private @const {!./viewer-impl.Viewer} */\n    this.viewer_ = Services.viewerForDoc(this.ampdoc);\n\n    /** @private @const {!./history-impl.History} */\n    this.history_ = Services.historyForDoc(this.ampdoc);\n\n    const platform = Services.platformFor(this.ampdoc.win);\n    /** @private @const {boolean} */\n    this.isIosSafari_ = platform.isIos() && platform.isSafari();\n\n    /** @private @const {boolean} */\n    this.isIframed_ =\n        isIframed(this.ampdoc.win) && this.viewer_.isOvertakeHistory();\n\n    /** @private @const {boolean} */\n    this.isEmbed_ = this.rootNode_ != this.ampdoc.getRootNode();\n\n    /** @private @const {boolean} */\n    this.isInABox_ = getMode(this.ampdoc.win).runtime == 'inabox';\n\n\n    /** @private @const {!function(!Event)|undefined} */\n    this.boundHandle_ = this.handle_.bind(this);\n    this.rootNode_.addEventListener(EVENT_TYPE_CLICK, this.boundHandle_);\n    this.rootNode_.addEventListener(EVENT_TYPE_CONTEXT_MENU, this.boundHandle_);\n    /** @private {boolean} */\n    this.appendExtraParams_ = false;\n    shouldAppendExtraParams(this.ampdoc).then(res => {\n      this.appendExtraParams_ = res;\n    });\n\n    /**\n     * Lazy-generated list of A2A-enabled navigation features.\n     * @private {?Array<string>}\n     */\n    this.a2aFeatures_ = null;\n  }\n\n  /**\n   * Registers a handler that performs URL replacement on the href\n   * of an ad click.\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   * @param {!Window} win\n   */\n  static installAnchorClickInterceptor(ampdoc, win) {\n    win.document.documentElement.addEventListener('click',\n        maybeExpandUrlParams.bind(null, ampdoc), /* capture */ true);\n  }\n\n  /** @override */\n  adoptEmbedWindow(embedWin) {\n    installServiceInEmbedScope(embedWin, TAG,\n        new Navigation(this.ampdoc, embedWin.document));\n  }\n\n  /**\n   * Removes all event listeners.\n   */\n  cleanup() {\n    if (this.boundHandle_) {\n      this.rootNode_.removeEventListener(EVENT_TYPE_CLICK, this.boundHandle_);\n      this.rootNode_.removeEventListener(\n          EVENT_TYPE_CONTEXT_MENU, this.boundHandle_);\n    }\n  }\n\n  /**\n   * Navigates a window to a URL.\n   *\n   * If opt_requestedBy matches a feature name in a <meta> tag with attribute\n   * name=\"amp-to-amp-navigation\", then treats the URL as an AMP URL (A2A).\n   *\n   * @param {!Window} win\n   * @param {string} url\n   * @param {string=} opt_requestedBy\n   */\n  navigateTo(win, url, opt_requestedBy) {\n    const urlService = Services.urlForDoc(this.ampdoc);\n    if (!urlService.isProtocolValid(url)) {\n      user().error(TAG, 'Cannot navigate to invalid protocol: ' + url);\n      return;\n    }\n\n    // If this redirect was requested by a feature that opted into A2A,\n    // try to ask the viewer to navigate this AMP URL.\n    if (opt_requestedBy) {\n      if (!this.a2aFeatures_) {\n        this.a2aFeatures_ = this.queryA2AFeatures_();\n      }\n      if (this.a2aFeatures_.includes(opt_requestedBy)) {\n        if (this.viewer_.navigateToAmpUrl(url, opt_requestedBy)) {\n          return;\n        }\n      }\n    }\n\n    // Otherwise, perform normal behavior of navigating the top frame.\n    win.top.location.href = url;\n  }\n\n  /**\n   * @return {!Array<string>}\n   * @private\n   */\n  queryA2AFeatures_() {\n    const meta = this.rootNode_.querySelector(\n        'meta[name=\"amp-to-amp-navigation\"]');\n    if (meta && meta.hasAttribute('content')) {\n      return meta.getAttribute('content').split(',').map(s => s.trim());\n    }\n    return [];\n  }\n\n  /**\n   * Intercept any click on the current document and prevent any\n   * linking to an identifier from pushing into the history stack.\n   *\n   * This also handles custom protocols (e.g. whatsapp://) when iframed\n   * on iOS Safari.\n   *\n   * @param {!Event} e\n   * @private\n   */\n  handle_(e) {\n    if (e.defaultPrevented) {\n      return;\n    }\n    const target = closestByTag(dev().assertElement(e.target), 'A');\n    if (!target || !target.href) {\n      return;\n    }\n    if (e.type == EVENT_TYPE_CLICK) {\n      this.handleClick_(target, e);\n    } else if (e.type == EVENT_TYPE_CONTEXT_MENU) {\n      // Handles contextmenu click. Note that currently this only deals\n      // with url variable substitution and expansion, as there is\n      // straightforward way of determining what the user clicked in the\n      // context menu, required for A2A navigation and custom link protocol\n      // handling.\n      // TODO(alabiaga): investigate fix for handling A2A and custom link\n      // protocols.\n      this.expandVarsForAnchor_(target);\n    }\n  }\n\n  /**\n   * @param {!Element} target\n   * @param {!Event} e\n   * @private\n   */\n  handleClick_(target, e) {\n    this.expandVarsForAnchor_(target);\n\n    const location = this.parseUrl_(target.href);\n\n    // Handle AMP-to-AMP navigation if rel=amphtml.\n    if (this.handleA2AClick_(e, target, location)) {\n      return;\n    }\n\n    // Handle navigating to custom protocol if applicable.\n    if (this.handleCustomProtocolClick_(e, target, location)) {\n      return;\n    }\n\n    // Finally, handle normal click-navigation behavior.\n    this.handleNavClick_(e, target, location);\n  }\n\n  /**\n   * @param {!Element} el\n   * @private\n   */\n  expandVarsForAnchor_(el) {\n    // First check if need to handle external link decoration.\n    let defaultExpandParamsUrl = null;\n    if (this.appendExtraParams_ && !this.isEmbed_) {\n      // Only decorate outgoing link when needed to and is not in FIE.\n      defaultExpandParamsUrl = getExtraParamsUrl(this.ampdoc.win, el);\n    }\n\n    const urlReplacements = Services.urlReplacementsForDoc(el);\n    urlReplacements.maybeExpandLink(el, defaultExpandParamsUrl);\n  }\n\n  /**\n   * Handles clicking on a custom protocol link.\n   * Returns true if the navigation was handled. Otherwise, returns false.\n   * @param {!Event} e\n   * @param {!Element} target\n   * @param {!Location} location\n   * @return {boolean}\n   * @private\n   */\n  handleCustomProtocolClick_(e, target, location) {\n    // Handle custom protocols only if the document is iframed.\n    if (!this.isIframed_) {\n      return false;\n    }\n\n    /** @const {!Window} */\n    const win = toWin(target.ownerDocument.defaultView);\n    const url = target.href;\n    const {protocol} = location;\n\n    // On Safari iOS, custom protocol links will fail to open apps when the\n    // document is iframed - in order to go around this, we set the top.location\n    // to the custom protocol href.\n    const isFTP = protocol == 'ftp:';\n\n    // In case of FTP Links in embedded documents always open then in _blank.\n    if (isFTP) {\n      openWindowDialog(win, url, '_blank');\n      e.preventDefault();\n      return true;\n    }\n\n    const isNormalProtocol = /^(https?|mailto):$/.test(protocol);\n    if (this.isIosSafari_ && !isNormalProtocol) {\n      openWindowDialog(win, url, '_top');\n      // Without preventing default the page would should an alert error twice\n      // in the case where there's no app to handle the custom protocol.\n      e.preventDefault();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Handles clicking on an AMP link.\n   * Returns true if the navigation was handled. Otherwise, returns false.\n   * @param {!Event} e\n   * @param {!Element} target\n   * @param {!Location} location\n   * @return {boolean}\n   * @private\n   */\n  handleA2AClick_(e, target, location) {\n    if (!target.hasAttribute('rel')) {\n      return false;\n    }\n    const relations = target.getAttribute('rel').split(' ').map(s => s.trim());\n    if (!relations.includes('amphtml')) {\n      return false;\n    }\n    // The viewer may not support the capability for navigating AMP links.\n    if (this.viewer_.navigateToAmpUrl(location.href, '<a rel=amphtml>')) {\n      e.preventDefault();\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   * Handles clicking on a link with hash navigation.\n   * @param {!Event} e\n   * @param {!Element} target\n   * @param {!Location} tgtLoc\n   * @private\n   */\n  handleNavClick_(e, target, tgtLoc) {\n    // In test mode, we're not able to properly fix the anchor tag's base URL.\n    // So, we have to use the (mocked) window's location instead.\n    const baseHref = getMode().test && !this.isEmbed_\n      ? this.ampdoc.win.location.href\n      : '';\n    const curLoc = this.parseUrl_(baseHref);\n    const tgtHref = `${tgtLoc.origin}${tgtLoc.pathname}${tgtLoc.search}`;\n    const curHref = `${curLoc.origin}${curLoc.pathname}${curLoc.search}`;\n\n    // If the current target anchor link is the same origin + path\n    // as the current document then we know we are just linking to an\n    // identifier in the document. Otherwise, it's an external navigation.\n    if (!tgtLoc.hash || tgtHref != curHref) {\n      if (this.isEmbed_ || this.isInABox_) {\n        // Target in the embed must be either _top or _blank. If none specified,\n        // force to _blank.\n        const targetAttr = (target.getAttribute('target') || '').toLowerCase();\n        if (targetAttr != '_top' && targetAttr != '_blank') {\n          target.setAttribute('target', '_blank');\n        }\n      }\n      return;\n    }\n\n    // We prevent default so that the current click does not push\n    // into the history stack as this messes up the external documents\n    // history which contains the amp document.\n    e.preventDefault();\n\n    // For an embed, do not perform scrolling or global history push - both have\n    // significant UX and browser problems.\n    if (this.isEmbed_) {\n      return;\n    }\n\n    // Look for the referenced element.\n    const hash = tgtLoc.hash.slice(1);\n    let elem = null;\n    if (hash) {\n      const escapedHash = escapeCssSelectorIdent(hash);\n      elem = (this.rootNode_.getElementById(hash) ||\n          // Fallback to anchor[name] if element with id is not found.\n          // Linking to an anchor element with name is obsolete in html5.\n          this.rootNode_./*OK*/querySelector(`a[name=\"${escapedHash}\"]`));\n    }\n\n    // If possible do update the URL with the hash. As explained above\n    // we do `replace` to avoid messing with the container's history.\n    if (tgtLoc.hash != curLoc.hash) {\n      this.history_.replaceStateForTarget(tgtLoc.hash).then(() => {\n        this.scrollToElement_(elem, hash);\n      });\n    } else {\n      // If the hash did not update just scroll to the element.\n      this.scrollToElement_(elem, hash);\n    }\n  }\n\n  /**\n   * Scrolls the page to the given element.\n   * @param {?Element} elem\n   * @param {string} hash\n   * @private\n   */\n  scrollToElement_(elem, hash) {\n    // Scroll to the element if found.\n    if (elem) {\n      // The first call to scrollIntoView overrides browsers' default scrolling\n      // behavior. The second call insides setTimeout allows us to scroll to\n      // that element properly. Without doing this, the viewport will not catch\n      // the updated scroll position on iOS Safari and hence calculate the wrong\n      // scrollTop for the scrollbar jumping the user back to the top for\n      // failing to calculate the new jumped offset. Without the first call\n      // there will be a visual jump due to browser scroll. See\n      // https://github.com/ampproject/amphtml/issues/5334 for more details.\n      this.viewport_./*OK*/scrollIntoView(elem);\n      Services.timerFor(this.ampdoc.win).delay(() =>\n        this.viewport_./*OK*/scrollIntoView(dev().assertElement(elem)), 1);\n    } else {\n      dev().warn(TAG,\n          `failed to find element with id=${hash} or a[name=${hash}]`);\n    }\n  }\n\n  /**\n   * @param {string} url\n   * @return {!Location}\n   * @private\n   */\n  parseUrl_(url) {\n    // Must use URL parsing scoped to this.rootNode_ for correct FIE behavior.\n    return Services.urlForDoc(this.rootNode_).parse(url);\n  }\n}\n\n/**\n * Handle click on links and replace variables in the click URL.\n * The function changes the actual href value and stores the\n * template in the ORIGINAL_HREF_ATTRIBUTE attribute\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {!Event} e\n */\nfunction maybeExpandUrlParams(ampdoc, e) {\n  const target = closestByTag(dev().assertElement(e.target), 'A');\n  if (!target || !target.href) {\n    // Not a click on a link.\n    return;\n  }\n  const hrefToExpand =\n      target.getAttribute(ORIG_HREF_ATTRIBUTE) || target.getAttribute('href');\n  if (!hrefToExpand) {\n    return;\n  }\n  const vars = {\n    'CLICK_X': () => {\n      return e.pageX;\n    },\n    'CLICK_Y': () => {\n      return e.pageY;\n    },\n  };\n  const newHref = Services.urlReplacementsForDoc(ampdoc).expandUrlSync(\n      hrefToExpand, vars, undefined, /* opt_whitelist */ {\n        // For now we only allow to replace the click location vars\n        // and nothing else.\n        // NOTE: Addition to this whitelist requires additional review.\n        'CLICK_X': true,\n        'CLICK_Y': true,\n      });\n  if (newHref != hrefToExpand) {\n    // Store original value so that later clicks can be processed with\n    // freshest values.\n    if (!target.getAttribute(ORIG_HREF_ATTRIBUTE)) {\n      target.setAttribute(ORIG_HREF_ATTRIBUTE, hrefToExpand);\n    }\n    target.setAttribute('href', newHref);\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {hasOwn} from '../../utils/object';\nimport {rethrowAsync, user} from '../../log';\nimport {tryResolve} from '../../utils/promise';\n\n/** @private @const {string} */\nconst PARSER_IGNORE_FLAG = '`';\n\n/** @private @const {string} */\nconst TAG = 'Expander';\n\n/** A whitelist for replacements whose values should not be %-encoded. */\n/** @const {Object<string, boolean>} */\nexport const NOENCODE_WHITELIST = {'ANCESTOR_ORIGIN': true};\n\n/** Rudamentary parser to handle nested Url replacement. */\nexport class Expander {\n\n  /**\n   * Link this instance of parser to the calling UrlReplacment\n   * @param {!../variable-source.VariableSource|null} variableSource the keywords to replace\n   */\n  constructor(variableSource) {\n    this.variableSource_ = variableSource;\n  }\n\n\n  /**\n   * take the template url and return a promise of its evaluated value\n   * @param {string} url url to be substituted\n   * @param {!Object<string, *>=} opt_bindings additional one-off bindings\n   * @param {!Object<string, *>=} opt_collectVars Object passed in to collect\n   *   variable resolutions.\n   * @param {boolean=} opt_sync If the method should resolve syncronously.\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *   that can be substituted.\n   * @return {!Promise<string>|string}\n   */\n  expand(url, opt_bindings, opt_collectVars, opt_sync, opt_whiteList) {\n    if (!url.length) {\n      return opt_sync ? url : Promise.resolve(url);\n    }\n    const expr = this.variableSource_\n        .getExpr(opt_bindings, /*opt_ignoreArgs */ true, opt_whiteList);\n\n    const matches = this.findMatches_(url, expr);\n    // if no keywords move on\n    if (!matches.length) {\n      return opt_sync ? url : Promise.resolve(url);\n    }\n    return this.parseUrlRecursively_(url, matches, opt_bindings,\n        opt_collectVars, opt_sync);\n  }\n\n\n  /**\n   * Structures the regex matching into the desired format\n   * @param {string} url url to be substituted\n   * @param {RegExp} expression regex containing all keywords\n   * @return {Array<Object<string, string|number>>} array of objects representing\n   *  matching keywords\n   */\n  findMatches_(url, expression) {\n    const matches = [];\n    url.replace(expression, (match, name, startPosition) => {\n      const {length} = match;\n      const stopPosition = length + startPosition - 1;\n      const info = {\n        start: startPosition,\n        stop: stopPosition,\n        name,\n        length,\n      };\n      matches.push(info);\n    });\n    return matches;\n  }\n\n\n  /**\n   * @param {string} url\n   * @param {!Array<Object<string, string|number>>} matches Array of objects\n   *   representing matching keywords.\n   * @param {!Object<string, *>=} opt_bindings Additional one-off bindings.\n   * @param {!Object<string, *>=} opt_collectVars Object passed in to collect\n   *   variable resolutions.\n   * @param {boolean=} opt_sync\n   * @return {!Promise<string>|string}\n   */\n  parseUrlRecursively_(url, matches, opt_bindings, opt_collectVars, opt_sync) {\n    const stack = [];\n    let urlIndex = 0;\n    let matchIndex = 0;\n    let match = matches[matchIndex];\n    let numOfPendingCalls = 0;\n    let ignoringChars = false;\n    let nextArgShouldBeRaw = false;\n\n    const evaluateNextLevel = () => {\n      let builder = '';\n      const results = [];\n\n      while (urlIndex < url.length && matchIndex <= matches.length) {\n        if (match && urlIndex === match.start) {\n          let binding;\n          // find out where this keyword is coming from\n          if (opt_bindings && hasOwn(opt_bindings, match.name)) {\n            // the optional bindings\n            binding = {\n              // This construction helps us save the match name and determine\n              // precedence of resolution choices in #expandBinding_ later.\n              name: match.name,\n              prioritized: opt_bindings[match.name],\n            };\n          } else {\n            // or the global source\n            binding = this.variableSource_.get(match.name);\n            binding.name = match.name;\n          }\n\n          urlIndex = match.stop + 1;\n          match = matches[++matchIndex];\n\n          if (url[urlIndex] === '(') {\n            // if we hit a left parenthesis we still need to get args\n            urlIndex++;\n            numOfPendingCalls++;\n            stack.push(binding);\n            // trim space in between args\n            if (builder.trim().length) {\n              results.push(builder);\n            }\n            results.push(evaluateNextLevel());\n          } else {\n            if (builder.length) {\n              results.push(builder);\n            }\n            results.push(this.evaluateBinding_(binding,\n                /* opt_args */ undefined, opt_collectVars, opt_sync));\n          }\n\n          builder = '';\n        }\n\n        else if (url[urlIndex] === PARSER_IGNORE_FLAG) {\n          if (!ignoringChars) {\n            ignoringChars = true;\n            nextArgShouldBeRaw = true;\n            user().assert(builder.trim() === '',\n                `The substring \"${builder}\" was lost during url-replacement. ` +\n                'Please ensure the url syntax is correct');\n            builder = '';\n          } else {\n            ignoringChars = false;\n          }\n          urlIndex++;\n        }\n\n        else if (numOfPendingCalls && url[urlIndex] === ',' && !ignoringChars) {\n          if (builder.length) {\n            const nextArg = nextArgShouldBeRaw ? builder : builder.trim();\n            results.push(nextArg);\n            nextArgShouldBeRaw = false;\n          }\n          // support existing two comma format\n          // eg CLIENT_ID(__ga,,ga-url)\n          if (url[urlIndex + 1] === ',') {\n            results.push(''); // TODO(ccordry): may want this to be undefined at some point\n            urlIndex++;\n          }\n          builder = '';\n          urlIndex++;\n        }\n\n        // Invoke a function on every right parenthesis unless the stack is\n        // empty.\n        else if (numOfPendingCalls && url[urlIndex] === ')' && !ignoringChars) {\n          urlIndex++;\n          numOfPendingCalls--;\n          const binding = stack.pop();\n          const nextArg = nextArgShouldBeRaw ? builder : builder.trim();\n          results.push(nextArg);\n          nextArgShouldBeRaw = false;\n          const value = this.evaluateBinding_(binding, /* opt_args */ results,\n              opt_collectVars, opt_sync);\n          return value;\n        }\n\n        else {\n          builder += url[urlIndex];\n          urlIndex++;\n        }\n\n        //capture trailing characters\n        if (urlIndex === url.length && builder.length) {\n          results.push(builder);\n        }\n      }\n\n      if (opt_sync) {\n        return results.join('');\n      }\n\n      return Promise.all(results)\n          .then(promiseArray => promiseArray.join(''))\n          .catch(e => {\n            rethrowAsync(e);\n            return '';\n          });\n    };\n\n    return evaluateNextLevel();\n  }\n\n\n  /**\n   * Called when a binding is ready to be resolved. Determines which version of\n   * binding to use and if syncronous or asyncronous version should be called.\n   * @param {Object<string, *>} bindingInfo An object containing the name of macro\n   *   and value to be resolved.\n   * @param {Array=} opt_args Arguments passed to the macro.\n   * @param {!Object<string, *>=} opt_collectVars Object passed in to collect\n   *   variable resolutions.\n   * @param {*=} opt_sync Whether the binding should be resolved synchronously.\n   */\n  evaluateBinding_(bindingInfo, opt_args, opt_collectVars, opt_sync) {\n    const {name} = bindingInfo;\n    let binding;\n    if (bindingInfo.prioritized) {\n      // If a binding is passed in through opt_bindings it always takes\n      // precedence.\n      binding = bindingInfo.prioritized;\n    } else if (opt_sync && bindingInfo.sync) {\n      // Use the sync resolution if avaliable when called synchronously.\n      binding = bindingInfo.sync;\n    } else if (opt_sync) {\n      // If there is no sync resolution we can not wait.\n      user().error(TAG, 'ignoring async replacement key: ', bindingInfo.name);\n      binding = '';\n    } else {\n      // Prefer the async over the sync but it may not exist.\n      binding = bindingInfo.async || bindingInfo.sync;\n    }\n    return opt_sync ?\n      this.evaluateBindingSync_(binding, name, opt_args, opt_collectVars) :\n      this.evaluateBindingAsync_(binding, name, opt_args, opt_collectVars);\n  }\n\n\n  /**\n   * Resolves binding to value to be substituted asyncronously.\n   * @param {*} binding Container for sync/async resolutions.\n   * @param {string} name\n   * @param {?Array=} opt_args Arguments to be passed if binding is function.\n   * @param {!Object<string, *>=} opt_collectVars Object passed in to collect\n   *   variable resolutions.\n   * @return {!Promise<string>} Resolved value.\n   */\n  evaluateBindingAsync_(binding, name, opt_args, opt_collectVars) {\n    let value;\n    try {\n      if (typeof binding === 'function') {\n        if (opt_args) {\n          value = Promise.all(opt_args)\n              .then(args => binding.apply(null, args));\n        } else {\n          value = tryResolve(binding);\n        }\n      } else {\n        value = Promise.resolve(binding);\n      }\n      return value.then(val => {\n        let result;\n\n        if (val == null) {\n          result = '';\n        } else {\n          result = NOENCODE_WHITELIST[name] ? val : encodeURIComponent(val);\n        }\n\n        if (opt_collectVars) {\n          opt_collectVars[name] = result;\n        }\n        return result;\n      }).catch(e => {\n        rethrowAsync(e);\n        if (opt_collectVars) {\n          opt_collectVars[name] = '';\n        }\n        return Promise.resolve('');\n      });\n\n    } catch (e) {\n      // Report error, but do not disrupt URL replacement. This will\n      // interpolate as the empty string.\n      rethrowAsync(e);\n      if (opt_collectVars) {\n        opt_collectVars[name] = '';\n      }\n      return Promise.resolve('');\n    }\n  }\n\n\n  /**\n   * Resolves binding to value to be substituted asyncronously.\n   * @param {*} binding Container for sync/async resolutions.\n   * @param {string} name\n   * @param {?Array=} opt_args Arguments to be passed if binding is function.\n   * @param {!Object<string, *>=} opt_collectVars Object passed in to collect\n   *   variable resolutions.\n   * @return {string} Resolved value.\n   */\n  evaluateBindingSync_(binding, name, opt_args, opt_collectVars) {\n    try {\n      const value = typeof binding === 'function' ?\n        binding.apply(null, opt_args) : binding;\n\n      let result;\n\n      if (value && value.then) {\n        // If binding is passed in as opt_binding we try to resolve it and it\n        // may return a promise.\n        user().error(TAG, 'ignoring async macro resolution');\n        result = '';\n      } else if (typeof value === 'string' || typeof value === 'number') {\n        // Normal case.\n        result = NOENCODE_WHITELIST[name] ? value.toString() :\n          encodeURIComponent(/** @type {string} */ (value));\n      } else {\n        // Most likely a broken binding gets us here.\n        result = '';\n      }\n\n      if (opt_collectVars) {\n        opt_collectVars[name] = result;\n      }\n\n      return result;\n    } catch (e) {\n      // Report error, but do not disrupt URL replacement. This will\n      // interpolate as the empty string.\n      rethrowAsync(e);\n      if (opt_collectVars) {\n        opt_collectVars[name] = '';\n      }\n      return '';\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AsyncResolverDef,\n  ResolverReturnDef,\n  SyncResolverDef,\n  VariableSource,\n  getNavigationData,\n  getTimingDataAsync,\n  getTimingDataSync,\n} from './variable-source';\nimport {Expander, NOENCODE_WHITELIST} from './url-expander/expander';\nimport {Services} from '../services';\nimport {WindowInterface} from '../window-interface';\nimport {\n  addParamsToUrl,\n  getSourceUrl,\n  parseQueryString,\n  parseUrlDeprecated,\n  removeAmpJsParamsFromUrl,\n  removeFragment,\n  removeSearch,\n} from '../url';\nimport {dev, rethrowAsync, user} from '../log';\nimport {getTrackImpressionPromise} from '../impression.js';\nimport {hasOwn} from '../utils/object';\nimport {\n  installServiceInEmbedScope,\n  registerServiceBuilderForDoc,\n} from '../service';\nimport {isExperimentOn} from '../experiments';\nimport {isProtocolValid} from '../url';\nimport {tryResolve} from '../utils/promise';\n\n/** @private @const {string} */\nconst TAG = 'UrlReplacements';\nconst EXPERIMENT_DELIMITER = '!';\nconst VARIANT_DELIMITER = '.';\nconst GEO_DELIM = ',';\nconst ORIGINAL_HREF_PROPERTY = 'amp-original-href';\nconst ORIGINAL_VALUE_PROPERTY = 'amp-original-value';\n\n/**\n * Returns a encoded URI Component, or an empty string if the value is nullish.\n * @param {*} val\n * @return {string}\n */\nfunction encodeValue(val) {\n  if (val == null) {\n    return '';\n  }\n  return encodeURIComponent(/** @type {string} */(val));\n}\n\n/**\n * Returns a function that executes method on a new Date instance. This is a\n * byte saving hack.\n *\n * @param {string} method\n * @return {!SyncResolverDef}\n */\nfunction dateMethod(method) {\n  return () => new Date()[method]();\n}\n\n/**\n * Returns a function that returns property of screen. This is a byte saving\n * hack.\n *\n * @param {!Screen} screen\n * @param {string} property\n * @return {!SyncResolverDef}\n */\nfunction screenProperty(screen, property) {\n  return () => screen[property];\n}\n\n/**\n * Class to provide variables that pertain to top level AMP window.\n */\nexport class GlobalVariableSource extends VariableSource {\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    super(ampdoc);\n\n    /** @private {?Promise<?Object<string, string>>} */\n    this.variants_ = null;\n\n    /** @private {?Promise<?ShareTrackingFragmentsDef>} */\n    this.shareTrackingFragments_ = null;\n  }\n\n  /**\n   * Utility function for setting resolver for timing data that supports\n   * sync and async.\n   * @param {string} varName\n   * @param {string} startEvent\n   * @param {string=} endEvent\n   * @return {!VariableSource}\n   * @private\n   */\n  setTimingResolver_(varName, startEvent, endEvent) {\n    return this.setBoth(varName, () => {\n      return getTimingDataSync(this.ampdoc.win, startEvent, endEvent);\n    }, () => {\n      return getTimingDataAsync(this.ampdoc.win, startEvent, endEvent);\n    });\n  }\n\n  /** @override */\n  initialize() {\n    /** @const {!./viewport/viewport-impl.Viewport} */\n    const viewport = Services.viewportForDoc(this.ampdoc);\n\n    // Returns a random value for cache busters.\n    this.set('RANDOM', () => Math.random());\n\n    // Provides a counter starting at 1 per given scope.\n    const counterStore = Object.create(null);\n    this.set('COUNTER', scope => {\n      return counterStore[scope] = (counterStore[scope] | 0) + 1;\n    });\n\n    // Returns the canonical URL for this AMP document.\n    this.set('CANONICAL_URL', this.getDocInfoUrl_('canonicalUrl'));\n\n    // Returns the host of the canonical URL for this AMP document.\n    this.set('CANONICAL_HOST', this.getDocInfoUrl_('canonicalUrl', 'host'));\n\n    // Returns the hostname of the canonical URL for this AMP document.\n    this.set('CANONICAL_HOSTNAME', this.getDocInfoUrl_('canonicalUrl',\n        'hostname'));\n\n    // Returns the path of the canonical URL for this AMP document.\n    this.set('CANONICAL_PATH', this.getDocInfoUrl_('canonicalUrl', 'pathname'));\n\n    // Returns the referrer URL.\n    this.setAsync('DOCUMENT_REFERRER', /** @type {AsyncResolverDef} */(() => {\n      return Services.viewerForDoc(this.ampdoc).getReferrerUrl();\n    }));\n\n    // Like DOCUMENT_REFERRER, but returns null if the referrer is of\n    // same domain or the corresponding CDN proxy.\n    this.setAsync('EXTERNAL_REFERRER', /** @type {AsyncResolverDef} */(() => {\n      return Services.viewerForDoc(this.ampdoc).getReferrerUrl()\n          .then(referrer => {\n            if (!referrer) {\n              return null;\n            }\n            const referrerHostname = parseUrlDeprecated(getSourceUrl(referrer))\n                .hostname;\n            const currentHostname =\n                WindowInterface.getHostname(this.ampdoc.win);\n            return referrerHostname === currentHostname ? null : referrer;\n          });\n    }));\n\n    // Returns the title of this AMP document.\n    this.set('TITLE', () => {\n      // The environment may override the title and set originalTitle. Prefer\n      // that if available.\n      return this.ampdoc.win.document['originalTitle'] ||\n          this.ampdoc.win.document.title;\n    });\n\n    // Returns the URL for this AMP document.\n    this.set('AMPDOC_URL', () => {\n      return removeFragment(\n          this.addReplaceParamsIfMissing_(\n              this.ampdoc.win.location.href));\n    });\n\n    // Returns the host of the URL for this AMP document.\n    this.set('AMPDOC_HOST', () => {\n      const url = parseUrlDeprecated(this.ampdoc.win.location.href);\n      return url && url.host;\n    });\n\n    // Returns the hostname of the URL for this AMP document.\n    this.set('AMPDOC_HOSTNAME', () => {\n      const url = parseUrlDeprecated(this.ampdoc.win.location.href);\n      return url && url.hostname;\n    });\n\n    // Returns the Source URL for this AMP document.\n    const expandSourceUrl = () => {\n      const docInfo = Services.documentInfoForDoc(this.ampdoc);\n      return removeFragment(this.addReplaceParamsIfMissing_(docInfo.sourceUrl));\n    };\n    this.setBoth('SOURCE_URL',\n        () => expandSourceUrl(),\n        () => getTrackImpressionPromise().then(() => expandSourceUrl()));\n\n    // Returns the host of the Source URL for this AMP document.\n    this.set('SOURCE_HOST', this.getDocInfoUrl_('sourceUrl', 'host'));\n\n    // Returns the hostname of the Source URL for this AMP document.\n    this.set('SOURCE_HOSTNAME', this.getDocInfoUrl_('sourceUrl', 'hostname'));\n\n    // Returns the path of the Source URL for this AMP document.\n    this.set('SOURCE_PATH', this.getDocInfoUrl_('sourceUrl', 'pathname'));\n\n    // Returns a random string that will be the constant for the duration of\n    // single page view. It should have sufficient entropy to be unique for\n    // all the page views a single user is making at a time.\n    this.set('PAGE_VIEW_ID', this.getDocInfoUrl_('pageViewId'));\n\n    this.setBoth('QUERY_PARAM', (param, defaultValue = '') => {\n      return this.getQueryParamData_(param, defaultValue);\n    }, (param, defaultValue = '') => {\n      return getTrackImpressionPromise().then(() => {\n        return this.getQueryParamData_(param, defaultValue);\n      });\n    });\n\n    // Returns the value of the given field name in the fragment query string.\n    // Second parameter is an optional default value.\n    // For example, if location is 'pub.com/amp.html?x=1#y=2' then\n    // FRAGMENT_PARAM(y) returns '2' and FRAGMENT_PARAM(z, 3) returns 3.\n    this.setAsync('FRAGMENT_PARAM',\n        this.getViewerIntegrationValue_('fragmentParam', 'FRAGMENT_PARAM'));\n\n    // Returns the first item in the ancestorOrigins array, if available.\n    this.setAsync('ANCESTOR_ORIGIN',\n        this.getViewerIntegrationValue_('ancestorOrigin', 'ANCESTOR_ORIGIN'));\n\n    /**\n     * Stores client ids that were generated during this page view\n     * indexed by scope.\n     * @type {?Object<string, string>}\n     */\n    let clientIds = null;\n    // Synchronous alternative. Only works for scopes that were previously\n    // requested using the async method.\n    this.setBoth('CLIENT_ID', scope => {\n      if (!clientIds) {\n        return null;\n      }\n      return clientIds[dev().assertString(scope)];\n    }, (scope, opt_userNotificationId, opt_cookieName) => {\n      user().assertString(scope,\n          'The first argument to CLIENT_ID, the fallback' +\n          /*OK*/' Cookie name, is required');\n      let consent = Promise.resolve();\n\n      // If no `opt_userNotificationId` argument is provided then\n      // assume consent is given by default.\n      if (opt_userNotificationId) {\n        consent = Services.userNotificationManagerForDoc(this.ampdoc)\n            .then(service => {\n              return service.get(opt_userNotificationId);\n            });\n      }\n      return Services.cidForDoc(this.ampdoc).then(cid => {\n        return cid.get({\n          scope: dev().assertString(scope),\n          createCookieIfNotPresent: true,\n          cookieName: opt_cookieName,\n        }, consent);\n      }).then(cid => {\n        if (!clientIds) {\n          clientIds = Object.create(null);\n        }\n\n        // A temporary work around to extract Client ID from _ga cookie. #5761\n        // TODO: replace with \"filter\" when it's in place. #2198\n        const cookieName = opt_cookieName || scope;\n        if (cid && cookieName == '_ga') {\n          if (typeof cid === 'string') {\n            cid = extractClientIdFromGaCookie(cid);\n          } else {\n            // TODO(@jridgewell, #11120): remove once #11120 is figured out.\n            // Do not log the CID directly, that's PII.\n            dev().error(TAG, 'non-string cid, what is it?', Object.keys(cid));\n          }\n        }\n\n        clientIds[scope] = cid;\n        return cid;\n      });\n    });\n\n    // Returns assigned variant name for the given experiment.\n    this.setAsync('VARIANT', /** @type {AsyncResolverDef} */(experiment => {\n      return this.getVariantsValue_(variants => {\n        const variant = variants[/** @type {string} */(experiment)];\n        user().assert(variant !== undefined,\n            'The value passed to VARIANT() is not a valid experiment name:' +\n                experiment);\n        // When no variant assigned, use reserved keyword 'none'.\n        return variant === null ? 'none' : /** @type {string} */(variant);\n      }, 'VARIANT');\n    }));\n\n    // Returns all assigned experiment variants in a serialized form.\n    this.setAsync('VARIANTS', /** @type {AsyncResolverDef} */(() => {\n      return this.getVariantsValue_(variants => {\n        const experiments = [];\n        for (const experiment in variants) {\n          const variant = variants[experiment];\n          experiments.push(\n              experiment + VARIANT_DELIMITER + (variant || 'none'));\n        }\n        return experiments.join(EXPERIMENT_DELIMITER);\n      }, 'VARIANTS');\n    }));\n\n    // Returns assigned geo value for geoType or all groups.\n    this.setAsync('AMP_GEO', /** @type {AsyncResolverDef} */(geoType => {\n      return this.getGeo_(geos => {\n        if (geoType) {\n          user().assert(geoType === 'ISOCountry',\n              'The value passed to AMP_GEO() is not valid name:' + geoType);\n          return /** @type {string} */ (geos[geoType] || 'unknown');\n        }\n        return /** @type {string} */ (geos.ISOCountryGroups.join(GEO_DELIM));\n      }, 'AMP_GEO');\n    }));\n\n    // Returns incoming share tracking fragment.\n    this.setAsync('SHARE_TRACKING_INCOMING', /** @type {AsyncResolverDef} */(\n      () => {\n        return this.getShareTrackingValue_(fragments => {\n          return fragments.incomingFragment;\n        }, 'SHARE_TRACKING_INCOMING');\n      }));\n\n    // Returns outgoing share tracking fragment.\n    this.setAsync('SHARE_TRACKING_OUTGOING', /** @type {AsyncResolverDef} */(\n      () => {\n        return this.getShareTrackingValue_(fragments => {\n          return fragments.outgoingFragment;\n        }, 'SHARE_TRACKING_OUTGOING');\n      }));\n\n    // Returns the number of milliseconds since 1 Jan 1970 00:00:00 UTC.\n    this.set('TIMESTAMP', dateMethod('getTime'));\n\n    // Returns the human readable timestamp in format of\n    // 2011-01-01T11:11:11.612Z.\n    this.set('TIMESTAMP_ISO', dateMethod('toISOString'));\n\n    // Returns the user's time-zone offset from UTC, in minutes.\n    this.set('TIMEZONE', dateMethod('getTimezoneOffset'));\n\n    // Returns the IANA timezone code\n    this.set('TIMEZONE_CODE', () => {\n      let tzCode;\n      if ('Intl' in this.ampdoc.win &&\n        'DateTimeFormat' in this.ampdoc.win.Intl) {\n        // It could be undefined (i.e. IE11)\n        tzCode = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n      }\n\n      return tzCode || '';\n    });\n\n    // Returns a promise resolving to viewport.getScrollTop.\n    this.set('SCROLL_TOP', () => viewport.getScrollTop());\n\n    // Returns a promise resolving to viewport.getScrollLeft.\n    this.set('SCROLL_LEFT', () => viewport.getScrollLeft());\n\n    // Returns a promise resolving to viewport.getScrollHeight.\n    this.set('SCROLL_HEIGHT', () => viewport.getScrollHeight());\n\n    // Returns a promise resolving to viewport.getScrollWidth.\n    this.set('SCROLL_WIDTH', () => viewport.getScrollWidth());\n\n    // Returns the viewport height.\n    this.set('VIEWPORT_HEIGHT', () => viewport.getHeight());\n\n    // Returns the viewport width.\n    this.set('VIEWPORT_WIDTH', () => viewport.getWidth());\n\n\n    const {screen} = this.ampdoc.win;\n    // Returns screen.width.\n    this.set('SCREEN_WIDTH', screenProperty(screen, 'width'));\n\n    // Returns screen.height.\n    this.set('SCREEN_HEIGHT', screenProperty(screen, 'height'));\n\n    // Returns screen.availHeight.\n    this.set('AVAILABLE_SCREEN_HEIGHT', screenProperty(screen, 'availHeight'));\n\n    // Returns screen.availWidth.\n    this.set('AVAILABLE_SCREEN_WIDTH', screenProperty(screen, 'availWidth'));\n\n    // Returns screen.ColorDepth.\n    this.set('SCREEN_COLOR_DEPTH', screenProperty(screen, 'colorDepth'));\n\n    // Returns document characterset.\n    this.set('DOCUMENT_CHARSET', () => {\n      const doc = this.ampdoc.win.document;\n      return doc.characterSet || doc.charset;\n    });\n\n    // Returns the browser language.\n    this.set('BROWSER_LANGUAGE', () => {\n      const nav = this.ampdoc.win.navigator;\n      return (nav.language || nav.userLanguage || nav.browserLanguage || '')\n          .toLowerCase();\n    });\n\n    // Returns the user agent.\n    this.set('USER_AGENT', () => {\n      const nav = this.ampdoc.win.navigator;\n      return nav.userAgent;\n    });\n\n    // Returns the time it took to load the whole page. (excludes amp-* elements\n    // that are not rendered by the system yet.)\n    this.setTimingResolver_(\n        'PAGE_LOAD_TIME', 'navigationStart', 'loadEventStart');\n\n    // Returns the time it took to perform DNS lookup for the domain.\n    this.setTimingResolver_(\n        'DOMAIN_LOOKUP_TIME', 'domainLookupStart', 'domainLookupEnd');\n\n    // Returns the time it took to connect to the server.\n    this.setTimingResolver_(\n        'TCP_CONNECT_TIME', 'connectStart', 'connectEnd');\n\n    // Returns the time it took for server to start sending a response to the\n    // request.\n    this.setTimingResolver_(\n        'SERVER_RESPONSE_TIME', 'requestStart', 'responseStart');\n\n    // Returns the time it took to download the page.\n    this.setTimingResolver_(\n        'PAGE_DOWNLOAD_TIME', 'responseStart', 'responseEnd');\n\n    // Returns the time it took for redirects to complete.\n    this.setTimingResolver_(\n        'REDIRECT_TIME', 'navigationStart', 'fetchStart');\n\n    // Returns the time it took for DOM to become interactive.\n    this.setTimingResolver_(\n        'DOM_INTERACTIVE_TIME', 'navigationStart', 'domInteractive');\n\n    // Returns the time it took for content to load.\n    this.setTimingResolver_(\n        'CONTENT_LOAD_TIME', 'navigationStart', 'domContentLoadedEventStart');\n\n    // Access: Reader ID.\n    this.setAsync('ACCESS_READER_ID', /** @type {AsyncResolverDef} */(() => {\n      return this.getAccessValue_(accessService => {\n        return accessService.getAccessReaderId();\n      }, 'ACCESS_READER_ID');\n    }));\n\n    // Access: data from the authorization response.\n    this.setAsync('AUTHDATA', /** @type {AsyncResolverDef} */(field => {\n      user().assert(field,\n          'The first argument to AUTHDATA, the field, is required');\n      return this.getAccessValue_(accessService => {\n        return accessService.getAuthdataField(field);\n      }, 'AUTHDATA');\n    }));\n\n    // Returns an identifier for the viewer.\n    this.setAsync('VIEWER', () => {\n      return Services.viewerForDoc(this.ampdoc)\n          .getViewerOrigin().then(viewer => {\n            return viewer == undefined ? '' : viewer;\n          });\n    });\n\n    // Returns the total engaged time since the content became viewable.\n    this.setAsync('TOTAL_ENGAGED_TIME', () => {\n      return Services.activityForDoc(this.ampdoc).then(activity => {\n        return activity.getTotalEngagedTime();\n      });\n    });\n\n    // Returns the incremental engaged time since the last push under the\n    // same name.\n    this.setAsync('INCREMENTAL_ENGAGED_TIME', (name, reset) => {\n      return Services.activityForDoc(this.ampdoc).then(activity => {\n        return activity.getIncrementalEngagedTime(name, reset !== 'false');\n      });\n    });\n\n    this.set('NAV_TIMING', (startAttribute, endAttribute) => {\n      user().assert(startAttribute, 'The first argument to NAV_TIMING, the ' +\n          'start attribute name, is required');\n      return getTimingDataSync(\n          this.ampdoc.win,\n          /**@type {string}*/(startAttribute),\n          /**@type {string}*/(endAttribute));\n    });\n    this.setAsync('NAV_TIMING', (startAttribute, endAttribute) => {\n      user().assert(startAttribute, 'The first argument to NAV_TIMING, the ' +\n          'start attribute name, is required');\n      return getTimingDataAsync(\n          this.ampdoc.win,\n          /**@type {string}*/(startAttribute),\n          /**@type {string}*/(endAttribute));\n    });\n\n    this.set('NAV_TYPE', () => {\n      return getNavigationData(this.ampdoc.win, 'type');\n    });\n\n    this.set('NAV_REDIRECT_COUNT', () => {\n      return getNavigationData(this.ampdoc.win, 'redirectCount');\n    });\n\n    // returns the AMP version number\n    this.set('AMP_VERSION', () => '$internalRuntimeVersion$');\n\n    this.set('BACKGROUND_STATE', () => {\n      return Services.viewerForDoc(this.ampdoc).isVisible() ? '0' : '1';\n    });\n\n    this.setAsync('VIDEO_STATE', (id, property) => {\n      const root = this.ampdoc.getRootNode();\n      const video = user().assertElement(\n          root.getElementById(/** @type {string} */ (id)),\n          `Could not find an element with id=\"${id}\" for VIDEO_STATE`);\n      return Services.videoManagerForDoc(this.ampdoc)\n          .getAnalyticsDetails(video)\n          .then(details => details ? details[property] : '');\n    });\n\n    this.setAsync('STORY_PAGE_INDEX', this.getStoryValue_('pageIndex',\n        'STORY_PAGE_INDEX'));\n\n    this.setAsync('STORY_PAGE_ID', this.getStoryValue_('pageId',\n        'STORY_PAGE_ID'));\n\n    this.setAsync('FIRST_CONTENTFUL_PAINT', () => {\n      return tryResolve(() =>\n        Services.performanceFor(this.ampdoc.win).getFirstContentfulPaint());\n    });\n\n    this.setAsync('FIRST_VIEWPORT_READY', () => {\n      return tryResolve(() =>\n        Services.performanceFor(this.ampdoc.win).getFirstViewportReady());\n    });\n\n    this.setAsync('MAKE_BODY_VISIBLE', () => {\n      return tryResolve(() =>\n        Services.performanceFor(this.ampdoc.win).getMakeBodyVisible());\n    });\n\n    this.setAsync('AMP_STATE', key => {\n      return Services.bindForDocOrNull(this.ampdoc).then(bind => {\n        if (!bind) {\n          return '';\n        }\n        return bind.getStateValue(/** @type {string} */ (key));\n      });\n    });\n  }\n\n  /**\n   * Merges any replacement parameters into a given URL's query string,\n   * preferring values set in the original query string.\n   * @param {string} orig The original URL\n   * @return {string} The resulting URL\n   * @private\n   */\n  addReplaceParamsIfMissing_(orig) {\n    const {replaceParams} =\n    /** @type {!Object} */ (Services.documentInfoForDoc(this.ampdoc));\n    const url = parseUrlDeprecated(removeAmpJsParamsFromUrl(orig));\n    const params = parseQueryString(url.search);\n    return addParamsToUrl(removeSearch(orig),\n        /** @type {!JsonObject} **/ (Object.assign({}, replaceParams, params)));\n  }\n\n  /**\n   * Resolves the value via one of document info's urls.\n   * @param {string} field A field on the docInfo\n   * @param {string=} opt_urlProp A subproperty of the field\n   * @return {T}\n   * @template T\n   */\n  getDocInfoUrl_(field, opt_urlProp) {\n    return () => {\n      const docInfo = Services.documentInfoForDoc(this.ampdoc);\n      const value = docInfo[field];\n      return opt_urlProp ? parseUrlDeprecated(value)[opt_urlProp] : value;\n    };\n  }\n\n  /**\n   * Resolves the value via access service. If access service is not configured,\n   * the resulting value is `null`.\n   * @param {function(!../../extensions/amp-access/0.1/access-vars.AccessVars):(T|!Promise<T>)} getter\n   * @param {string} expr\n   * @return {T|null}\n   * @template T\n   * @private\n   */\n  getAccessValue_(getter, expr) {\n    return Promise.all([\n      Services.accessServiceForDocOrNull(this.ampdoc),\n      Services.subscriptionsServiceForDocOrNull(this.ampdoc),\n    ]).then(services => {\n      const service = /** @type {?../../extensions/amp-access/0.1/access-vars.AccessVars} */ (\n        services[0] || services[1]);\n      if (!service) {\n        // Access/subscriptions service is not installed.\n        user().error(\n            TAG,\n            'Access or subsciptions service is not installed to access: ',\n            expr);\n        return null;\n      }\n      return getter(service);\n    });\n  }\n\n  /**\n   * Return the QUERY_PARAM from the current location href\n   * @param {*} param\n   * @param {string} defaultValue\n   * @return {string}\n   * @private\n   */\n  getQueryParamData_(param, defaultValue) {\n    user().assert(param,\n        'The first argument to QUERY_PARAM, the query string ' +\n        'param is required');\n    const url = parseUrlDeprecated(\n        removeAmpJsParamsFromUrl(this.ampdoc.win.location.href));\n    const params = parseQueryString(url.search);\n    const key = user().assertString(param);\n    const {replaceParams} = Services.documentInfoForDoc(this.ampdoc);\n    if (typeof params[key] !== 'undefined') {\n      return params[key];\n    }\n    if (typeof replaceParams[key] !== 'undefined') {\n      return /** @type {string} */(replaceParams[key]);\n    }\n    return defaultValue;\n  }\n\n  /**\n   * Resolves the value via amp-experiment's variants service.\n   * @param {function(!Object<string, string>):(?string)} getter\n   * @param {string} expr\n   * @return {!Promise<?string>}\n   * @template T\n   * @private\n   */\n  getVariantsValue_(getter, expr) {\n    if (!this.variants_) {\n      this.variants_ = Services.variantForOrNull(this.ampdoc.win);\n    }\n    return this.variants_.then(variants => {\n      user().assert(variants,\n          'To use variable %s, amp-experiment should be configured',\n          expr);\n      return getter(variants);\n    });\n  }\n\n  /**\n   * Resolves the value via geo service.\n   * @param {function(Object<string, string>)} getter\n   * @param {string} expr\n   * @return {!Promise<Object<string,(string|Array<string>)>>}\n   * @template T\n   * @private\n   */\n  getGeo_(getter, expr) {\n    return Services.geoForDocOrNull(this.ampdoc)\n        .then(geo => {\n          user().assert(geo,\n              'To use variable %s, amp-geo should be configured',\n              expr);\n          return getter(geo);\n        });\n  }\n\n  /**\n   * Resolves the value via amp-share-tracking's service.\n   * @param {function(!ShareTrackingFragmentsDef):T} getter\n   * @param {string} expr\n   * @return {!Promise<T>}\n   * @template T\n   * @private\n   */\n  getShareTrackingValue_(getter, expr) {\n    if (!this.shareTrackingFragments_) {\n      this.shareTrackingFragments_ =\n          Services.shareTrackingForOrNull(this.ampdoc.win);\n    }\n    return this.shareTrackingFragments_.then(fragments => {\n      user().assert(fragments, 'To use variable %s, ' +\n          'amp-share-tracking should be configured',\n      expr);\n      return getter(/** @type {!ShareTrackingFragmentsDef} */ (fragments));\n    });\n  }\n\n  /**\n   * Resolves the value via amp-story's service.\n   * @param {string} property\n   * @param {string} name\n   * @return {!AsyncResolverDef}\n   * @private\n   */\n  getStoryValue_(property, name) {\n    return () => {\n      const service = Services.storyVariableServiceForOrNull(this.ampdoc.win);\n      return service.then(storyVariables => {\n        user().assert(storyVariables,\n            'To use variable %s amp-story should be configured', name);\n        return storyVariables[property];\n      });\n    };\n  }\n\n  /**\n   * Resolves the value via amp-viewer-integration's service.\n   * @param {string} property\n   * @param {string} name\n   * @return {!AsyncResolverDef}\n   * @private\n   */\n  getViewerIntegrationValue_(property, name) {\n    return /** @type {!AsyncResolverDef} */ (\n      (param, defaultValue = '') => {\n        const service =\n            Services.viewerIntegrationVariableServiceForOrNull(this.ampdoc.win);\n        return service.then(viewerIntegrationVariables => {\n          user().assert(viewerIntegrationVariables, 'To use variable %s ' +\n              'amp-viewer-integration must be installed', name);\n          return viewerIntegrationVariables[property](param, defaultValue);\n        });\n      });\n  }\n}\n\n/**\n * This class replaces substitution variables with their values.\n * Document new values in ../spec/amp-var-substitutions.md\n * @package For export\n */\nexport class UrlReplacements {\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   * @param {!VariableSource} variableSource\n   */\n  constructor(ampdoc, variableSource) {\n    /** @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc = ampdoc;\n\n    /** @type {VariableSource} */\n    this.variableSource_ = variableSource;\n\n    /** @type {!Expander} */\n    this.expander_ = new Expander(this.variableSource_);\n  }\n\n\n  /**\n   * Synchronously expands the provided source by replacing all known variables\n   * with their resolved values. Optional `opt_bindings` can be used to add new\n   * variables or override existing ones.  Any async bindings are ignored.\n   * @param {string} source\n   * @param {!Object<string, (ResolverReturnDef|!SyncResolverDef)>=} opt_bindings\n   * @param {!Object<string, ResolverReturnDef>=} opt_collectVars\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of\n   *     names that can be substituted.\n   * @return {string}\n   */\n  expandStringSync(source, opt_bindings, opt_collectVars, opt_whiteList) {\n    return /** @type {string} */ (\n      this.expand_(source, opt_bindings, opt_collectVars, /* opt_sync */ true,\n          opt_whiteList));\n  }\n\n  /**\n   * Expands the provided source by replacing all known variables with their\n   * resolved values. Optional `opt_bindings` can be used to add new variables\n   * or override existing ones.\n   * @param {string} source\n   * @param {!Object<string, *>=} opt_bindings\n   * @return {!Promise<string>}\n   */\n  expandStringAsync(source, opt_bindings) {\n    return /** @type {!Promise<string>} */ (this.expand_(source, opt_bindings));\n  }\n\n  /**\n   * Synchronously expands the provided URL by replacing all known variables\n   * with their resolved values. Optional `opt_bindings` can be used to add new\n   * variables or override existing ones.  Any async bindings are ignored.\n   * @param {string} url\n   * @param {!Object<string, (ResolverReturnDef|!SyncResolverDef)>=} opt_bindings\n   * @param {!Object<string, ResolverReturnDef>=} opt_collectVars\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of\n   *     names that can be substituted.\n   * @return {string}\n   */\n  expandUrlSync(url, opt_bindings, opt_collectVars, opt_whiteList) {\n    return this.ensureProtocolMatches_(url, /** @type {string} */ (this.expand_(\n        url, opt_bindings, opt_collectVars, /* opt_sync */ true,\n        opt_whiteList)));\n  }\n\n  /**\n   * Expands the provided URL by replacing all known variables with their\n   * resolved values. Optional `opt_bindings` can be used to add new variables\n   * or override existing ones.\n   * @param {string} url\n   * @param {!Object<string, *>=} opt_bindings\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *     that can be substituted.\n   * @return {!Promise<string>}\n   */\n  expandUrlAsync(url, opt_bindings, opt_whiteList) {\n    return /** @type {!Promise<string>} */ (\n      this.expand_(url, opt_bindings, undefined, undefined,\n          opt_whiteList).then(\n          replacement => this.ensureProtocolMatches_(url, replacement)));\n  }\n\n  /**\n   * Expands an input element value attribute with variable substituted.\n   * @param {!HTMLInputElement} element\n   * @return {!Promise<string>}\n   */\n  expandInputValueAsync(element) {\n    return /** @type {!Promise<string>} */ (\n      this.expandInputValue_(element, /*opt_sync*/ false));\n  }\n\n  /**\n   * Expands an input element value attribute with variable substituted.\n   * @param {!HTMLInputElement} element\n   * @return {string} Replaced string for testing\n   */\n  expandInputValueSync(element) {\n    return /** @type {string} */ (\n      this.expandInputValue_(element, /*opt_sync*/ true));\n  }\n\n  /**\n   * Expands in input element value attribute with variable substituted.\n   * @param {!HTMLInputElement} element\n   * @param {boolean=} opt_sync\n   * @return {string|!Promise<string>}\n   */\n  expandInputValue_(element, opt_sync) {\n    dev().assert(element.tagName == 'INPUT' &&\n        (element.getAttribute('type') || '').toLowerCase() == 'hidden',\n    'Input value expansion only works on hidden input fields: %s', element);\n\n    const whitelist = this.getWhitelistForElement_(element);\n    if (!whitelist) {\n      return opt_sync ? element.value : Promise.resolve(element.value);\n    }\n    if (element[ORIGINAL_VALUE_PROPERTY] === undefined) {\n      element[ORIGINAL_VALUE_PROPERTY] = element.value;\n    }\n    const result = this.expand_(\n        element[ORIGINAL_VALUE_PROPERTY] || element.value,\n        /* opt_bindings */ undefined,\n        /* opt_collectVars */ undefined,\n        /* opt_sync */ opt_sync,\n        /* opt_whitelist */ whitelist);\n\n    if (opt_sync) {\n      return element.value = result;\n    }\n    return result.then(newValue => {\n      element.value = newValue;\n      return newValue;\n    });\n  }\n\n  /**\n   * Returns a replacement whitelist from elements' data-amp-replace attribute.\n   * @param {!Element} element\n   * @param {!Object<string, boolean>=} opt_supportedReplacement Optional supported\n   * replacement that filters whitelist to a subset.\n   * @return {!Object<string, boolean>|undefined}\n   */\n  getWhitelistForElement_(element, opt_supportedReplacement) {\n    const whitelist = element.getAttribute('data-amp-replace');\n    if (!whitelist) {\n      return;\n    }\n    const requestedReplacements = {};\n    whitelist.trim().split(/\\s+/).forEach(replacement => {\n      if (!opt_supportedReplacement ||\n          hasOwn(opt_supportedReplacement, replacement)) {\n        requestedReplacements[replacement] = true;\n      } else {\n        user().warn('URL', 'Ignoring unsupported replacement', replacement);\n      }\n    });\n    return requestedReplacements;\n  }\n\n  /**\n    * Returns whether variable substitution is allowed for given url.\n    * @param {!Location} url\n    * @return {boolean}\n    */\n  isAllowedOrigin_(url) {\n    const docInfo = Services.documentInfoForDoc(this.ampdoc);\n    if (url.origin == parseUrlDeprecated(docInfo.canonicalUrl).origin ||\n        url.origin == parseUrlDeprecated(docInfo.sourceUrl).origin) {\n      return true;\n    }\n\n    const meta = this.ampdoc.getRootNode().querySelector(\n        'meta[name=amp-link-variable-allowed-origin]');\n\n    if (meta && meta.hasAttribute('content')) {\n      const whitelist = meta.getAttribute('content').trim().split(/\\s+/);\n      for (let i = 0; i < whitelist.length; i++) {\n        if (url.origin == parseUrlDeprecated(whitelist[i]).origin) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Replaces values in the link of an anchor tag if\n   * - the link opts into it (via data-amp-replace argument)\n   * - the destination is the source or canonical origin of this doc.\n   * @param {!Element} element An anchor element.\n   * @param {?string} defaultUrlParams to expand link if caller request.\n   * @return {string|undefined} Replaced string for testing\n   */\n  maybeExpandLink(element, defaultUrlParams) {\n    dev().assert(element.tagName == 'A');\n    const supportedReplacements = {\n      'CLIENT_ID': true,\n      'QUERY_PARAM': true,\n    };\n    const additionalUrlParameters =\n        element.getAttribute('data-amp-addparams') || '';\n    const whitelist = this.getWhitelistForElement_(\n        element, supportedReplacements);\n\n    if (!whitelist && !additionalUrlParameters && !defaultUrlParams) {\n      return;\n    }\n    // ORIGINAL_HREF_PROPERTY has the value of the href \"pre-replacement\".\n    // We set this to the original value before doing any work and use it\n    // on subsequent replacements, so that each run gets a fresh value.\n    let href = dev().assertString(\n        element[ORIGINAL_HREF_PROPERTY] || element.getAttribute('href'));\n    const url = parseUrlDeprecated(href);\n    if (element[ORIGINAL_HREF_PROPERTY] == null) {\n      element[ORIGINAL_HREF_PROPERTY] = href;\n    }\n    if (additionalUrlParameters) {\n      href = addParamsToUrl(\n          href,\n          parseQueryString(additionalUrlParameters));\n    }\n\n    const isAllowedOrigin = this.isAllowedOrigin_(url);\n    if (!isAllowedOrigin) {\n      if (whitelist) {\n        user().warn('URL', 'Ignoring link replacement', href,\n            ' because the link does not go to the document\\'s' +\n            ' source, canonical, or whitelisted origin.');\n      }\n      return element.href = href;\n    }\n\n    // Note that defaultUrlParams is treated differently than\n    // additionalUrlParameters in two ways #1: If the outgoing url origin is not\n    // whitelisted: additionalUrlParameters are always appended by not expanded,\n    // defaultUrlParams will not be appended. #2: If the expansion function is\n    // not whitelisted: additionalUrlParamters will not be expanded,\n    // defaultUrlParams will by default support QUERY_PARAM, and will still be\n    // expanded.\n    if (defaultUrlParams) {\n      if (!whitelist || !whitelist['QUERY_PARAM']) {\n        // override whitelist and expand defaultUrlParams;\n        const overrideWhitelist = {'QUERY_PARAM': true};\n        defaultUrlParams = this.expandUrlSync(\n            defaultUrlParams,\n            /* opt_bindings */ undefined,\n            /* opt_collectVars */ undefined,\n            /* opt_whitelist */ overrideWhitelist);\n      }\n      href = addParamsToUrl(href, parseQueryString(defaultUrlParams));\n    }\n\n    if (whitelist) {\n      href = this.expandUrlSync(\n          href,\n          /* opt_bindings */ undefined,\n          /* opt_collectVars */ undefined,\n          /* opt_whitelist */ whitelist);\n    }\n\n    return element.href = href;\n  }\n\n  /**\n   * @param {string} url\n   * @param {!Object<string, *>=} opt_bindings\n   * @param {!Object<string, *>=} opt_collectVars\n   * @param {boolean=} opt_sync\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *     that can be substituted.\n   * @return {!Promise<string>|string}\n   * @private\n   */\n  expand_(url, opt_bindings, opt_collectVars, opt_sync, opt_whiteList) {\n    const isV2ExperimentOn = isExperimentOn(this.ampdoc.win,\n        'url-replacement-v2');\n    if (isV2ExperimentOn) {\n      // TODO(ccordy) support opt_collectVars && opt_whitelist\n      return this.expander_./*OK*/expand(url, opt_bindings, opt_collectVars,\n          opt_sync, opt_whiteList);\n    }\n\n    // existing parsing method\n    const expr = this.variableSource_.getExpr(opt_bindings);\n    let replacementPromise;\n    let replacement = url.replace(expr, (match, name, opt_strargs) => {\n      let args = [];\n      if (typeof opt_strargs == 'string') {\n        args = opt_strargs.split(/,\\s*/);\n      }\n      if (opt_whiteList && !opt_whiteList[name]) {\n        // Do not perform substitution and just return back the original\n        // match, so that the string doesn't change.\n        return match;\n      }\n      let binding;\n      if (opt_bindings && (name in opt_bindings)) {\n        binding = opt_bindings[name];\n      } else if ((binding = this.variableSource_.get(name))) {\n        if (opt_sync) {\n          binding = binding.sync;\n          if (!binding) {\n            user().error(TAG, 'ignoring async replacement key: ', name);\n            return '';\n          }\n        } else {\n          binding = binding.async || binding.sync;\n        }\n      }\n      let val;\n      try {\n        val = (typeof binding == 'function') ?\n          binding.apply(null, args) : binding;\n      } catch (e) {\n        // Report error, but do not disrupt URL replacement. This will\n        // interpolate as the empty string.\n        if (opt_sync) {\n          val = '';\n        }\n        rethrowAsync(e);\n      }\n      // In case the produced value is a promise, we don't actually\n      // replace anything here, but do it again when the promise resolves.\n      if (val && val.then) {\n        if (opt_sync) {\n          user().error(TAG, 'ignoring promise value for key: ', name);\n          return '';\n        }\n        /** @const {Promise<string>} */\n        const p = val.catch(err => {\n          // Report error, but do not disrupt URL replacement. This will\n          // interpolate as the empty string.\n          rethrowAsync(err);\n        }).then(v => {\n          replacement = replacement.replace(match,\n              NOENCODE_WHITELIST[match] ? v : encodeValue(v));\n          if (opt_collectVars) {\n            opt_collectVars[match] = v;\n          }\n        });\n        if (replacementPromise) {\n          replacementPromise = replacementPromise.then(() => p);\n        } else {\n          replacementPromise = p;\n        }\n        return match;\n      }\n      if (opt_collectVars) {\n        opt_collectVars[match] = val;\n      }\n      return NOENCODE_WHITELIST[match] ? val : encodeValue(val);\n    });\n\n    if (replacementPromise) {\n      replacementPromise = replacementPromise.then(() => replacement);\n    }\n\n    if (opt_sync) {\n      return replacement;\n    }\n    return replacementPromise || Promise.resolve(replacement);\n  }\n\n  /**\n   * Collects all substitutions in the provided URL and expands them to the\n   * values for known variables. Optional `opt_bindings` can be used to add\n   * new variables or override existing ones.\n   * @param {string} url\n   * @param {!Object<string, *>=} opt_bindings\n   * @return {!Promise<!Object<string, *>>}\n   */\n  collectVars(url, opt_bindings) {\n    const vars = Object.create(null);\n    return this.expand_(url, opt_bindings, vars).then(() => vars);\n  }\n\n  /**\n   * Collects substitutions in the `src` attribute of the given element\n   * that are _not_ whitelisted via `data-amp-replace` opt-in attribute.\n   * @param {!Element} element\n   * @return {!Array<string>}\n   */\n  collectUnwhitelistedVarsSync(element) {\n    const url = element.getAttribute('src');\n    const vars = Object.create(null);\n    this.expandStringSync(url, /* opt_bindings */ undefined, vars);\n    const varNames = Object.keys(vars);\n\n    const whitelist = this.getWhitelistForElement_(element);\n    if (whitelist) {\n      return varNames.filter(v => !whitelist[v]);\n    } else {\n      // All vars are unwhitelisted if the element has no whitelist.\n      return varNames;\n    }\n  }\n\n  /**\n   * Ensures that the protocol of the original url matches the protocol of the\n   * replacement url. Returns the replacement if they do, the original if they\n   * do not.\n   * @param {string} url\n   * @param {string} replacement\n   * @return {string}\n   */\n  ensureProtocolMatches_(url, replacement) {\n    const newProtocol = parseUrlDeprecated(replacement, /* opt_nocache */ true)\n        .protocol;\n    const oldProtocol = parseUrlDeprecated(url, /* opt_nocache */ true)\n        .protocol;\n    if (newProtocol != oldProtocol) {\n      user().error(TAG, 'Illegal replacement of the protocol: ', url);\n      return url;\n    }\n    user().assert(isProtocolValid(replacement),\n        'The replacement url has invalid protocol: %s', replacement);\n\n    return replacement;\n  }\n\n  /**\n   * @return {VariableSource}\n   */\n  getVariableSource() {\n    return this.variableSource_;\n  }\n}\n\n/**\n * Extracts client ID from a _ga cookie.\n * https://developers.google.com/analytics/devguides/collection/analyticsjs/cookies-user-id\n * @param {string} gaCookie\n * @return {string}\n */\nexport function extractClientIdFromGaCookie(gaCookie) {\n  return gaCookie.replace(/^(GA1|1)\\.[\\d-]+\\./, '');\n}\n\n/**\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n */\nexport function installUrlReplacementsServiceForDoc(ampdoc) {\n  registerServiceBuilderForDoc(\n      ampdoc,\n      'url-replace',\n      function(doc) {\n        return new UrlReplacements(doc, new GlobalVariableSource(doc));\n      });\n}\n\n\n/**\n * @param {!./ampdoc-impl.AmpDoc} ampdoc\n * @param {!Window} embedWin\n * @param {!VariableSource} varSource\n */\nexport function installUrlReplacementsForEmbed(ampdoc, embedWin, varSource) {\n  installServiceInEmbedScope(embedWin, 'url-replace',\n      new UrlReplacements(ampdoc, varSource));\n}\n\n/**\n * @typedef {{incomingFragment: string, outgoingFragment: string}}\n */\nlet ShareTrackingFragmentsDef;\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {dev} from '../log';\nimport {isFiniteNumber} from '../types';\nimport {loadPromise} from '../event-helper';\n\n/** @typedef {string|number|boolean|undefined|null} */\nlet ResolverReturnDef;\n\n/** @typedef {function(...*):ResolverReturnDef} */\nexport let SyncResolverDef;\n\n/** @typedef {function(...*):!Promise<ResolverReturnDef>} */\nexport let AsyncResolverDef;\n\n/** @typedef {{sync: SyncResolverDef, async: AsyncResolverDef}} */\nlet ReplacementDef;\n\n\n/**\n * Returns navigation timing information based on the start and end events.\n * The data for the timing events is retrieved from performance.timing API.\n * If start and end events are both given, the result is the difference between\n * the two. If only start event is given, the result is the timing value at\n * start event.\n * @param {!Window} win\n * @param {string} startEvent\n * @param {string=} endEvent\n * @return {!Promise<ResolverReturnDef>}\n */\nexport function getTimingDataAsync(win, startEvent, endEvent) {\n  return loadPromise(win).then(() => {\n    return getTimingDataSync(win, startEvent, endEvent);\n  });\n}\n\n/**\n * Returns navigation timing information based on the start and end events.\n * The data for the timing events is retrieved from performance.timing API.\n * If start and end events are both given, the result is the difference between\n * the two. If only start event is given, the result is the timing value at\n * start event. Enforces synchronous evaluation.\n * @param {!Window} win\n * @param {string} startEvent\n * @param {string=} endEvent\n * @return {ResolverReturnDef} undefined if API is not available, empty string\n *    if it is not yet available, or value as string\n */\nexport function getTimingDataSync(win, startEvent, endEvent) {\n  const timingInfo = win['performance'] && win['performance']['timing'];\n  if (!timingInfo || timingInfo['navigationStart'] == 0) {\n    // Navigation timing API is not supported.\n    return;\n  }\n\n  const metric = (endEvent === undefined)\n    ? timingInfo[startEvent]\n    : timingInfo[endEvent] - timingInfo[startEvent];\n\n  if (!isFiniteNumber(metric) || metric < 0) {\n    // The metric is not supported.\n    return;\n  } else {\n    return metric;\n  }\n}\n\n/**\n * Returns navigation information from the current browsing context.\n * @param {!Window} win\n * @param {string} attribute\n * @return {ResolverReturnDef}\n * @private\n */\nexport function getNavigationData(win, attribute) {\n  const navigationInfo = win['performance'] &&\n    win['performance']['navigation'];\n  if (!navigationInfo || navigationInfo[attribute] === undefined) {\n    // PerformanceNavigation interface is not supported or attribute is not\n    // implemented.\n    return;\n  }\n  return navigationInfo[attribute];\n}\n\n\n/**\n * A class to provide variable substitution related features. Extend this class\n * and override initialize() to add more supported variables.\n */\nexport class VariableSource {\n  /**\n   * @param {!./ampdoc-impl.AmpDoc} ampdoc\n   */\n  constructor(ampdoc) {\n    /** @protected @const {!./ampdoc-impl.AmpDoc} */\n    this.ampdoc = ampdoc;\n\n    /** @private {!RegExp|undefined} */\n    this.replacementExpr_ = undefined;\n\n    /** @private {!RegExp|undefined} */\n    this.replacementExprV2_ = undefined;\n\n    /** @private @const {!Object<string, !ReplacementDef>} */\n    this.replacements_ = Object.create(null);\n\n    /** @private {boolean} */\n    this.initialized_ = false;\n\n    this.getUrlMacroWhitelist_();\n  }\n\n  /**\n   * Lazily initialize the default replacements.\n   * @private\n   */\n  initialize_() {\n    this.initialize();\n    this.initialized_ = true;\n  }\n\n  /**\n   * Override this method to set all the variables supported by derived class.\n   */\n  initialize() {\n    // Needs to be implemented by derived classes.\n  }\n\n  /**\n   * Method exists to assist stubbing in tests.\n   * @param {string} name\n   * @return {!ReplacementDef}\n   */\n  get(name) {\n    if (!this.initialized_) {\n      this.initialize_();\n    }\n\n    return this.replacements_[name];\n  }\n\n  /**\n   * Sets a synchronous value resolver for the variable with the specified name.\n   * The value resolver may optionally take an extra parameter.\n   * Can be called in conjunction with setAsync to allow for additional\n   * asynchronous resolver where expand will use async and expandSync the sync\n   * version.\n   * @param {string} varName\n   * @param {!SyncResolverDef} syncResolver\n   * @return {!VariableSource}\n   */\n  set(varName, syncResolver) {\n    dev().assert(varName.indexOf('RETURN') == -1);\n    this.replacements_[varName] =\n        this.replacements_[varName] || {sync: undefined, async: undefined};\n    this.replacements_[varName].sync = syncResolver;\n    this.replacementExpr_ = undefined;\n    this.replacementExprV2_ = undefined;\n    return this;\n  }\n\n  /**\n   * Sets an async value resolver for the variable with the specified name.\n   * The value resolver may optionally take an extra parameter.\n   * Can be called in conjuction with setAsync to allow for additional\n   * asynchronous resolver where expand will use async and expandSync the sync\n   * version.\n   * @param {string} varName\n   * @param {!AsyncResolverDef} asyncResolver\n   * @return {!VariableSource}\n   */\n  setAsync(varName, asyncResolver) {\n    dev().assert(varName.indexOf('RETURN') == -1);\n    this.replacements_[varName] =\n        this.replacements_[varName] || {sync: undefined, async: undefined};\n    this.replacements_[varName].async = asyncResolver;\n    this.replacementExpr_ = undefined;\n    this.replacementExprV2_ = undefined;\n    return this;\n  }\n\n  /**\n   * Helper method to set both sync and async resolvers.\n   * @param {string} varName\n   * @param {!SyncResolverDef} syncResolver\n   * @param {!AsyncResolverDef} asyncResolver\n   * @return {!VariableSource}\n   */\n  setBoth(varName, syncResolver, asyncResolver) {\n    return this.set(varName, syncResolver).setAsync(varName, asyncResolver);\n  }\n\n  /**\n   * Returns a Regular expression that can be used to detect all the variables\n   * in a template.\n   * @param {!Object<string, *>=} opt_bindings\n   * @param {boolean=} isV2 Flag to ignore capture of args.\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *   that can be substituted.\n   */\n  getExpr(opt_bindings, isV2, opt_whiteList) {\n    if (!this.initialized_) {\n      this.initialize_();\n    }\n\n    const additionalKeys = opt_bindings ? Object.keys(opt_bindings) : null;\n    if (additionalKeys && additionalKeys.length > 0) {\n      const allKeys = Object.keys(this.replacements_);\n      additionalKeys.forEach(key => {\n        if (this.replacements_[key] === undefined) {\n          allKeys.push(key);\n        }\n      });\n      return this.buildExpr_(allKeys, isV2, opt_whiteList);\n    }\n    if (!this.replacementExpr_ && !isV2) {\n      this.replacementExpr_ = this.buildExpr_(\n          Object.keys(this.replacements_));\n    }\n    // sometimes the v1 expand will be called before the v2\n    // so we need to cache both versions\n    if (!this.replacementExprV2_ && isV2) {\n      this.replacementExprV2_ = this.buildExpr_(\n          Object.keys(this.replacements_), isV2, opt_whiteList);\n    }\n\n    return isV2 ? this.replacementExprV2_ :\n      this.replacementExpr_;\n  }\n\n  /**\n   * @param {!Array<string>} keys\n   * @param {boolean=} isV2 flag to ignore capture of args\n   * @param {!Object<string, boolean>=} opt_whiteList Optional white list of names\n   *   that can be substituted.\n   * @return {!RegExp}\n   * @private\n   */\n  buildExpr_(keys, isV2, opt_whiteList) {\n    // If a whitelist is present, the keys must belong to the whitelist.\n    // We filter the keys one last time to ensure no unwhitelisted key is\n    // allowed.\n    if (this.getUrlMacroWhitelist_()) {\n      keys = keys.filter(key => this.getUrlMacroWhitelist_().includes(key));\n    }\n    // If a whitelist is passed into the call to GlobalVariableSource.expand_\n    // then we only resolve values contained in the whitelist.\n    if (opt_whiteList) {\n      keys = keys.filter(key => opt_whiteList[key]);\n    }\n    // The keys must be sorted to ensure that the longest keys are considered\n    // first. This avoids a problem where a RANDOM conflicts with RANDOM_ONE.\n    keys.sort((s1, s2) => s2.length - s1.length);\n    // Keys that start with a `$` need to be escaped so that they do not\n    // interfere with the regex that is constructed.\n    const escaped = keys.map(key => {\n      if (key[0] === '$') {\n        return '\\\\' + key;\n      }\n      return key;\n    });\n\n    const all = escaped.join('|');\n    // Match the given replacement patterns, as well as optionally\n    // arguments to the replacement behind it in parentheses.\n    // Example string that match\n    // FOO_BAR\n    // FOO_BAR(arg1)\n    // FOO_BAR(arg1,arg2)\n    // FOO_BAR(arg1, arg2)\n    let regexStr = '\\\\$?(' + all + ')';\n    // ignore the capturing of arguments in new parser\n    if (!isV2) {\n      regexStr += '(?:\\\\(((?:\\\\s*[0-9a-zA-Z-_.]*\\\\s*(?=,|\\\\)),?)*)\\\\s*\\\\))?';\n    }\n    return new RegExp(regexStr, 'g');\n  }\n\n  /**\n   * @return {?Array<string>} The whitelist of allowed AMP variables. (if provided in\n   *     a meta tag).\n   * @private\n   */\n  getUrlMacroWhitelist_() {\n    if (this.variableWhitelist_) {\n      return this.variableWhitelist_;\n    }\n\n    const {head} = this.ampdoc.getRootNode();\n    if (!head) {\n      return null;\n    }\n\n    // A meta[name=\"amp-allowed-url-macros\"] tag, if present,\n    // contains, in its content attribute, a whitelist of variable substitution.\n    const meta =\n      head.querySelector('meta[name=\"amp-allowed-url-macros\"]');\n    if (!meta) {\n      return null;\n    }\n\n    /**\n     * The whitelist of variables allowed for variable substitution.\n     * @private {?Array<string>}\n     */\n    this.variableWhitelist_ = meta.getAttribute('content').split(',')\n        .map(variable => variable.trim());\n    return this.variableWhitelist_;\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getAmpdoc,\n  getExistingServiceForDocInEmbedScope,\n  getExistingServiceOrNull,\n  getService,\n  getServiceForDoc,\n  getServiceForDocDeprecated,\n  getServicePromiseForDoc,\n} from './service';\nimport {\n  getElementServiceForDoc,\n  getElementServiceIfAvailable,\n  getElementServiceIfAvailableForDoc,\n  getElementServiceIfAvailableForDocInEmbedScope,\n} from './element-service';\n\n/** @typedef {!../extensions/amp-subscriptions/0.1/amp-subscriptions.SubscriptionService} */\nexport let SubscriptionService;\n\nexport class Services {\n  /**\n   * Hint: Add extensions folder path to compile.js with\n   * warnings cannot find modules.\n   */\n\n  /**\n   * Returns a promise for the Access service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'access', 'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Access service or a promise for null if the\n   * service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>}\n   */\n  static accessServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-access/0.1/amp-access.AccessService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'access',\n          'amp-access')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!SubscriptionService>}\n   */\n  static subscriptionsServiceForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!SubscriptionService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Returns a promise for the Subscriptions service.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?SubscriptionService>}\n   */\n  static subscriptionsServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?SubscriptionService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc, 'subscriptions',\n          'amp-subscriptions')));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/action-impl.ActionService}\n   */\n  static actionServiceForDoc(nodeOrDoc) {\n    return /** @type {!./service/action-impl.ActionService} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'action', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!Activity>}\n   */\n  static activityForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!Activity>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'activity', 'amp-analytics'));\n  }\n\n  /**\n   * Returns the global instance of the `AmpDocService` service that can be\n   * used to resolve an ampdoc for any node: either in the single-doc or\n   * shadow-doc environment.\n   * @param {!Window} window\n   * @return {!./service/ampdoc-impl.AmpDocService}\n   */\n  static ampdocServiceFor(window) {\n    return /** @type {!./service/ampdoc-impl.AmpDocService} */ (\n      getService(window, 'ampdoc'));\n  }\n\n  /**\n   * Returns the AmpDoc for the specified context node.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/ampdoc-impl.AmpDoc}\n   */\n  static ampdoc(elementOrAmpDoc) {\n    return getAmpdoc(elementOrAmpDoc);\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @param {boolean=} loadAnalytics\n   * @return {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDoc(elementOrAmpDoc, loadAnalytics = false) {\n    if (loadAnalytics) {\n      // Get Extensions service and force load analytics extension.\n      const ampdoc = getAmpdoc(elementOrAmpDoc);\n      Services.extensionsFor(ampdoc.win)./*OK*/installExtensionForDoc(\n          ampdoc, 'amp-analytics');\n    }\n    return /** @type {!Promise<!../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceForDoc(elementOrAmpDoc, 'amp-analytics-instrumentation',\n          'amp-analytics'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>}\n   */\n  static analyticsForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-analytics/0.1/instrumentation.InstrumentationService>} */ (\n      getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'amp-analytics-instrumentation', 'amp-analytics'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/batched-xhr-impl.BatchedXhr}\n   */\n  static batchedXhrFor(window) {\n    return /** @type {!./service/batched-xhr-impl.BatchedXhr} */ (\n      getService(window, 'batched-xhr'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>}\n   */\n  static bindForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-bind/0.1/bind-impl.Bind>} */ (\n      getElementServiceIfAvailableForDocInEmbedScope(\n          elementOrAmpDoc, 'bind', 'amp-bind'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/cid-impl.Cid>}\n   */\n  static cidForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/cid-impl.Cid>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'cid'));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/navigation.Navigation}\n   */\n  static navigationForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/navigation.Navigation} */ (\n      getServiceForDoc(elementOrAmpDoc, 'navigation'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/crypto-impl.Crypto}\n   */\n  static cryptoFor(window) {\n    return (/** @type {!./service/crypto-impl.Crypto} */ (\n      getService(window, 'crypto')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/document-info-impl.DocumentInfoDef} Info about the doc\n   */\n  static documentInfoForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/document-info-impl.DocInfo} */ (\n      getServiceForDoc(elementOrAmpDoc, 'documentInfo')).get();\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/document-state.DocumentState}\n   */\n  static documentStateFor(window) {\n    return getService(window, 'documentState');\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/extensions-impl.Extensions}\n   */\n  static extensionsFor(window) {\n    return /** @type {!./service/extensions-impl.Extensions} */ (\n      getService(window, 'extensions'));\n  }\n\n  /**\n   * Returns service implemented in service/history-impl.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/history-impl.History}\n   */\n  static historyForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/history-impl.History} */ (\n      getServiceForDoc(elementOrAmpDoc, 'history'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!./input.Input}\n   */\n  static inputFor(win) {\n    return getService(win, 'input');\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/layers-impl.LayoutLayers}\n   */\n  static layersForDoc(elementOrAmpDoc) {\n    return /** @type {!./service/layers-impl.LayoutLayers} */ (\n      getServiceForDoc(elementOrAmpDoc, 'layers'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceFor(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getService(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/performance-impl.Performance}\n   */\n  static performanceForOrNull(window) {\n    return /** @type {!./service/performance-impl.Performance}*/ (\n      getExistingServiceOrNull(window, 'performance'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/platform-impl.Platform}\n   */\n  static platformFor(window) {\n    return /** @type {!./service/platform-impl.Platform} */ (\n      getService(window, 'platform'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Resources is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/resources-impl.Resources}\n   */\n  static resourcesForDoc(nodeOrDoc) {\n    return /** @type {!./service/resources-impl.Resources} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'resources'));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?{incomingFragment: string, outgoingFragment: string}>}\n   */\n  static shareTrackingForOrNull(win) {\n    return (/** @type {!Promise<?{incomingFragment: string, outgoingFragment: string}>} */ (\n      getElementServiceIfAvailable(win, 'share-tracking',\n          'amp-share-tracking', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>}\n   */\n  static storyVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/variable-service.StoryVariableDef>} */\n      (getElementServiceIfAvailable(win, 'story-variable', 'amp-story',\n          true)));\n  }\n\n  /**\n   * Version of the story store service depends on which version of amp-story\n   * the publisher is loading. They all have the same implementation.\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>}\n   */\n  static storyStoreServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService|?../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService>} */\n      (getElementServiceIfAvailable(win, 'story-store', 'amp-story')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-store-service.AmpStoryStoreService} */\n      (getExistingServiceOrNull(win, 'story-store')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestService(win) {\n    return (/** @type {?../extensions/amp-story/1.0/amp-story-request-service.AmpStoryRequestService} */\n      (getExistingServiceOrNull(win, 'story-request')));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/1.0/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization', 'amp-story', true)));\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/1.0/localization.LocalizationService}\n   */\n  static localizationService(win) {\n    return getService(win, 'localization');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-store-service.AmpStoryStoreService}\n   */\n  static storyStoreServiceV01(win) {\n    return getService(win, 'story-store');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/amp-story-request-service.AmpStoryRequestService}\n   */\n  static storyRequestServiceV01(win) {\n    return getService(win, 'story-request-v01');\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>}\n   */\n  static localizationServiceForOrNullV01(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-story/0.1/localization.LocalizationService>} */\n      (getElementServiceIfAvailable(win, 'localization-v01', 'amp-story',\n          true)));\n  }\n\n  /**\n   * TODO(#14357): Remove this when amp-story:0.1 is deprecated.\n   * @param {!Window} win\n   * @return {!../extensions/amp-story/0.1/localization.LocalizationService}\n   */\n  static localizationServiceV01(win) {\n    return getService(win, 'localization-v01');\n  }\n\n  /**\n   * @param {!Window} win\n   * @return {?Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>}\n   */\n  static viewerIntegrationVariableServiceForOrNull(win) {\n    return (\n    /** @type {!Promise<?../extensions/amp-viewer-integration/0.1/variable-service.ViewerIntegrationVariableDef>} */\n      (getElementServiceIfAvailable(win, 'viewer-integration-variable',\n          'amp-viewer-integration', true)));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>}\n   */\n  static webAnimationServiceFor(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-animation/0.1/web-animation-service.WebAnimationService>} */\n      (getElementServiceForDoc(\n          elementOrAmpDoc, 'web-animation', 'amp-animation')));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/storage-impl.Storage>}\n   */\n  static storageForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/storage-impl.Storage>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'storage'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/template-impl.Templates}\n   */\n  static templatesFor(window) {\n    return /** @type {!./service/template-impl.Templates} */ (\n      getService(window, 'templates'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/timer-impl.Timer}\n   */\n  static timerFor(window) {\n    return /** @type {!./service/timer-impl.Timer} */ (\n      getService(window, 'timer'));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-replacements-impl.UrlReplacements}\n   */\n  static urlReplacementsForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-replacements-impl.UrlReplacements} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url-replace', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>}\n   */\n  static userNotificationManagerForDoc(elementOrAmpDoc) {\n    return (/** @type {!Promise<!../extensions/amp-user-notification/0.1/amp-user-notification.UserNotificationManager>} */\n      (getElementServiceForDoc(elementOrAmpDoc, 'userNotificationManager',\n          'amp-user-notification')));\n  }\n\n  /**\n   * Returns a promise for the consentPolicy Service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>}\n   */\n  static consentPolicyServiceForDocOrNull(elementOrAmpDoc) {\n    return (/** @type {!Promise<?../extensions/amp-consent/0.1/consent-policy-manager.ConsentPolicyManager>} */\n      (getElementServiceIfAvailableForDoc(elementOrAmpDoc,\n          'consentPolicyManager', 'amp-consent')));\n  }\n\n  /**\n   * Returns a promise for the geo service or a promise for null if\n   * the service is not available on the current page.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>}\n   */\n  static geoForDocOrNull(elementOrAmpDoc) {\n    return /** @type {!Promise<?../extensions/amp-geo/0.1/amp-geo.GeoDef>} */ (\n      getElementServiceIfAvailableForDoc(\n          elementOrAmpDoc, 'geo', 'amp-geo', true));\n  }\n\n  /**\n   * Unlike most service getters, passing `Node` is necessary for some FIE-scope\n   * services since sometimes we only have the FIE Document for context.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/url-impl.Url}\n   */\n  static urlForDoc(nodeOrDoc) {\n    return /** @type {!./service/url-impl.Url} */ (\n      getExistingServiceForDocInEmbedScope(\n          nodeOrDoc, 'url', /* opt_fallbackToTopWin */ true));\n  }\n\n  /**\n   * Returns a promise for the experiment variants or a promise for null if it\n   * is not available on the current page.\n   * @param {!Window} win\n   * @return {!Promise<?Object<string>>}\n   */\n  static variantForOrNull(win) {\n    return /** @type {!Promise<?Object<string>>} */ (\n      getElementServiceIfAvailable(win, 'variant', 'amp-experiment', true));\n  }\n\n  /**\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!./service/video-service-interface.VideoServiceInterface}\n   */\n  static videoManagerForDoc(elementOrAmpDoc) {\n    return (\n      /** @type {!./service/video-service-interface.VideoServiceInterface} */ (\n        getServiceForDoc(elementOrAmpDoc, 'video-manager')));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewer is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewer-impl.Viewer}\n   */\n  static viewerForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewer-impl.Viewer} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewer'));\n  }\n\n  /**\n   * Returns promise for the viewer. This is an unusual case and necessary only\n   * for services that need reference to the viewer before it has been\n   * initialized. Most of the code, however, just should use `viewerForDoc`.\n   * @param {!Element|!./service/ampdoc-impl.AmpDoc} elementOrAmpDoc\n   * @return {!Promise<!./service/viewer-impl.Viewer>}\n   */\n  static viewerPromiseForDoc(elementOrAmpDoc) {\n    return /** @type {!Promise<!./service/viewer-impl.Viewer>} */ (\n      getServicePromiseForDoc(elementOrAmpDoc, 'viewer'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/vsync-impl.Vsync}\n   */\n  static vsyncFor(window) {\n    return /** @type {!./service/vsync-impl.Vsync} */ (\n      getService(window, 'vsync'));\n  }\n\n  /**\n   * Uses getServiceForDocDeprecated() since Viewport is a startup service.\n   * @param {!Node|!./service/ampdoc-impl.AmpDoc} nodeOrDoc\n   * @return {!./service/viewport/viewport-impl.Viewport}\n   */\n  static viewportForDoc(nodeOrDoc) {\n    return /** @type {!./service/viewport/viewport-impl.Viewport} */ (\n      getServiceForDocDeprecated(nodeOrDoc, 'viewport'));\n  }\n\n  /**\n   * @param {!Window} window\n   * @return {!./service/xhr-impl.Xhr}\n   */\n  static xhrFor(window) {\n    return /** @type {!./service/xhr-impl.Xhr} */ (getService(window, 'xhr'));\n  }\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from './log';\nimport {map} from './utils/object.js';\n\nlet container;\n\n/**\n * Creates the html helper for the doc.\n *\n * @param {!Element|!Document} nodeOrDoc\n * @return {function(!Array<string>):!Element}\n */\nexport function htmlFor(nodeOrDoc) {\n  const doc = nodeOrDoc.ownerDocument || nodeOrDoc;\n  if (!container || container.ownerDocument !== doc) {\n    container = doc.createElement('div');\n  }\n\n  return html;\n}\n\n/**\n * A tagged template literal helper to generate static DOM trees.\n * This must be used as a tagged template, ie\n *\n * ```\n * const div = html`<div><span></span></div>`;\n * ```\n *\n * Only the root element and its subtree will be returned. DO NOT use this to\n * render subtree's with dynamic content, it WILL result in an error!\n *\n * @param {!Array<string>} strings\n * @return {!Element}\n */\nfunction html(strings) {\n  dev().assert(strings.length === 1, 'Improper html template tag usage.');\n  container./*OK*/innerHTML = strings[0];\n\n  const el = container.firstElementChild;\n  dev().assert(el, 'No elements in template');\n  dev().assert(!el.nextElementSibling, 'Too many root elements in template');\n\n  // Clear to free memory.\n  container./*OK*/innerHTML = '';\n\n  return el;\n}\n\n/**\n * Queries an element for all elements with a \"ref\" attribute, removing\n * the attribute afterwards.\n * Returns a named map of all ref elements.\n *\n * @param {!Element} root\n * @return {!Object<string, !Element>}\n */\nexport function htmlRefs(root) {\n  const elements = root.querySelectorAll('[ref]');\n  const refs = map();\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n    const ref = dev().assert(element.getAttribute('ref'), 'Empty ref attr');\n    element.removeAttribute('ref');\n    dev().assert(refs[ref] === undefined, 'Duplicate ref');\n    refs[ref] = element;\n  }\n\n  return refs;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {string} _match\n * @param {string} character\n * @return {string}\n */\nfunction toUpperCase(_match, character) {\n  return character.toUpperCase();\n}\n\n/**\n * @param {string} match\n * @return {string}\n */\nfunction prependDashAndToLowerCase(match) {\n  return '-' + match.toLowerCase();\n}\n\n/**\n * @param {string} name Attribute name containing dashes.\n * @return {string} Dashes removed and successive character sent to upper case.\n * visibleForTesting\n */\nexport function dashToCamelCase(name) {\n  return name.replace(/-([a-z])/g, toUpperCase);\n}\n\n/**\n * Converts a string that is in camelCase to one that is in dash-case.\n *\n * @param {string} string The string to convert.\n * @return {string} The string in dash-case.\n */\nexport function camelCaseToDash(string) {\n  return string.replace(/(?!^)[A-Z]/g, prependDashAndToLowerCase);\n}\n\n/**\n * @param {string} name Attribute name with dashes\n * @return {string} Dashes replaced by underlines.\n */\nexport function dashToUnderline(name) {\n  return name.replace('-', '_');\n}\n\n/**\n * Polyfill for String.prototype.endsWith.\n * @param {string} string\n * @param {string} suffix\n * @return {boolean}\n */\nexport function endsWith(string, suffix) {\n  const index = string.length - suffix.length;\n  return index >= 0 && string.indexOf(suffix, index) == index;\n}\n\n/**\n * Polyfill for String.prototype.startsWith.\n * @param {string} string\n * @param {string} prefix\n * @return {boolean}\n */\nexport function startsWith(string, prefix) {\n  if (prefix.length > string.length) {\n    return false;\n  }\n  return string.lastIndexOf(prefix, 0) == 0;\n}\n\n/**\n * Expands placeholders in a given template string with values.\n *\n * Placeholders use ${key-name} syntax and are replaced with the value\n * returned from the given getter function.\n *\n * @param {string} template The template string to expand.\n * @param {function(string):*} getter Function used to retrieve a value for a\n *   placeholder. Returns values will be coerced into strings.\n * @param {number=} opt_maxIterations Number of times to expand the template.\n *   Defaults to 1, but should be set to a larger value your placeholder tokens\n *   can be expanded to other placeholder tokens. Take caution with large values\n *   as recursively expanding a string can be exponentially expensive.\n */\nexport function expandTemplate(template, getter, opt_maxIterations) {\n  const maxIterations = opt_maxIterations || 1;\n  for (let i = 0; i < maxIterations; i++) {\n    let matches = 0;\n    template = template.replace(/\\${([^}]*)}/g, (_a, b) => {\n      matches++;\n      return getter(b);\n    });\n    if (!matches) {\n      break;\n    }\n  }\n  return template;\n}\n\n/**\n * Hash function djb2a\n * This is intended to be a simple, fast hashing function using minimal code.\n * It does *not* have good cryptographic properties.\n * @param {string} str\n * @return {string} 32-bit unsigned hash of the string\n */\nexport function stringHash32(str) {\n  const {length} = str;\n  let hash = 5381;\n  for (let i = 0; i < length; i++) {\n    hash = hash * 33 ^ str.charCodeAt(i);\n  }\n  // Convert from 32-bit signed to unsigned.\n  return String(hash >>> 0);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Services} from './services';\nimport {dev, rethrowAsync} from './log';\nimport {insertAfterOrAtStart, waitForBody} from './dom';\nimport {map} from './utils/object';\nimport {setStyles} from './style';\nimport {waitForServices} from './render-delaying-services';\n\nconst TRANSFORMER_PROP = '__AMP_CSS_TR';\nconst STYLE_MAP_PROP = '__AMP_CSS_SM';\nconst bodyVisibleSentinel = '__AMP_BODY_VISIBLE';\n\n\n/**\n * Adds the given css text to the given ampdoc.\n *\n * The style tags will be at the beginning of the head before all author\n * styles. One element can be the main runtime CSS. This is guaranteed\n * to always be the first stylesheet in the doc.\n *\n * @param {!./service/ampdoc-impl.AmpDoc} ampdoc The ampdoc that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are available.\n *     Not using a promise, because this is synchronous when possible.\n *     for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesForDoc(\n  ampdoc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const cssRoot = ampdoc.getHeadNode();\n  const style = insertStyleElement(\n      cssRoot,\n      maybeTransform(cssRoot, cssText),\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    const rootNode = ampdoc.getRootNode();\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(rootNode, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(rootNode, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Adds the given css text to the given document.\n * TODO(dvoytenko, #10705): Remove this method once FIE/ampdoc migration is\n * done.\n *\n * @param {!Document} doc The document that should get the new styles.\n * @param {string} cssText\n * @param {?function(!Element)|undefined} cb Called when the new styles are\n *     available. Not using a promise, because this is synchronous when\n *     possible. for better performance.\n * @param {boolean=} opt_isRuntimeCss If true, this style tag will be inserted\n *     as the first element in head and all style elements will be positioned\n *     after.\n * @param {string=} opt_ext\n * @return {!Element}\n */\nexport function installStylesLegacy(\n  doc, cssText, cb, opt_isRuntimeCss, opt_ext) {\n  const style = insertStyleElement(\n      dev().assertElement(doc.head),\n      cssText,\n      opt_isRuntimeCss || false,\n      opt_ext || null);\n\n  if (cb) {\n    // Styles aren't always available synchronously. E.g. if there is a\n    // pending style download, it will have to finish before the new\n    // style is visible.\n    // For this reason we poll until the style becomes available.\n    // Sync case.\n    if (styleLoaded(doc, style)) {\n      cb(style);\n      return style;\n    }\n    // Poll until styles are available.\n    const interval = setInterval(() => {\n      if (styleLoaded(doc, style)) {\n        clearInterval(interval);\n        cb(style);\n      }\n    }, 4);\n  }\n  return style;\n}\n\n\n/**\n * Creates the properly configured style element.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @param {boolean} isRuntimeCss\n * @param {?string} ext\n * @return {!Element}\n */\nfunction insertStyleElement(cssRoot, cssText, isRuntimeCss, ext) {\n  let styleMap = cssRoot[STYLE_MAP_PROP];\n  if (!styleMap) {\n    styleMap = cssRoot[STYLE_MAP_PROP] = map();\n  }\n\n  const isExtCss = !isRuntimeCss &&\n      (ext && ext != 'amp-custom' && ext != 'amp-keyframes');\n  const key =\n      isRuntimeCss ? 'amp-runtime' :\n        isExtCss ? `amp-extension=${ext}` : null;\n\n  // Check if it has already been created or discovered.\n  if (key) {\n    const existing = getExistingStyleElement(cssRoot, styleMap, key);\n    if (existing) {\n      return existing;\n    }\n  }\n\n  // Create the new style element and append to cssRoot.\n  const doc = (cssRoot.ownerDocument || cssRoot);\n  const style = doc.createElement('style');\n  style./*OK*/textContent = cssText;\n  let afterElement = null;\n  // Make sure that we place style tags after the main runtime CSS. Otherwise\n  // the order is random.\n  if (isRuntimeCss) {\n    style.setAttribute('amp-runtime', '');\n  } else if (isExtCss) {\n    style.setAttribute('amp-extension', ext || '');\n    afterElement = dev().assertElement(getExistingStyleElement(\n        cssRoot, styleMap, 'amp-runtime'));\n  } else {\n    if (ext) {\n      style.setAttribute(ext, '');\n    }\n    afterElement = cssRoot.lastChild;\n  }\n  insertAfterOrAtStart(cssRoot, style, afterElement);\n  if (key) {\n    styleMap[key] = style;\n  }\n  return style;\n}\n\n\n/**\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {!Object<string, !Element>} styleMap\n * @param {string} key\n * @return {?Element}\n */\nfunction getExistingStyleElement(cssRoot, styleMap, key) {\n  // Already cached.\n  if (styleMap[key]) {\n    return styleMap[key];\n  }\n  // Check if the style has already been added by the server layout.\n  const existing = cssRoot./*OK*/querySelector(`style[${key}]`);\n  if (existing) {\n    styleMap[key] = existing;\n    return existing;\n  }\n  // Nothing found.\n  return null;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {function(string):string} transformer\n */\nexport function installCssTransformer(cssRoot, transformer) {\n  cssRoot[TRANSFORMER_PROP] = transformer;\n}\n\n\n/**\n * Applies a transformer to the CSS text if it has been registered.\n * @param {!Element|!ShadowRoot} cssRoot\n * @param {string} cssText\n * @return {string}\n */\nfunction maybeTransform(cssRoot, cssText) {\n  const transformer = cssRoot[TRANSFORMER_PROP];\n  return transformer ? transformer(cssText) : cssText;\n}\n\n\n/**\n * Sets the document's body opacity to 1.\n * If the body is not yet available (because our script was loaded\n * synchronously), polls until it is.\n * @param {!Document} doc The document who's body we should make visible.\n * @param {boolean=} opt_waitForServices Whether the body visibility should\n *     be blocked on key services being loaded.\n */\nexport function makeBodyVisible(doc, opt_waitForServices) {\n  dev().assert(doc.defaultView, 'Passed in document must have a defaultView');\n  const win = /** @type {!Window} */ (doc.defaultView);\n  if (win[bodyVisibleSentinel]) {\n    return;\n  }\n  const set = () => {\n    win[bodyVisibleSentinel] = true;\n    setStyles(dev().assertElement(doc.body), {\n      opacity: 1,\n      visibility: 'visible',\n      'animation': 'none',\n    });\n    renderStartedNoInline(doc);\n  };\n  try {\n    waitForBody(doc, () => {\n      if (win[bodyVisibleSentinel]) {\n        return;\n      }\n      win[bodyVisibleSentinel] = true;\n      if (opt_waitForServices) {\n        waitForServices(win).catch(reason => {\n          rethrowAsync(reason);\n          return [];\n        }).then(services => {\n          set();\n          if (services.length > 0) {\n            Services.resourcesForDoc(doc)./*OK*/schedulePass(\n                1, /* relayoutAll */ true);\n          }\n          try {\n            const perf = Services.performanceFor(win);\n            perf.tick('mbv');\n            perf.flush();\n          } catch (e) {}\n        });\n      } else {\n        set();\n      }\n    });\n  } catch (e) {\n    // If there was an error during the logic above (such as service not\n    // yet installed, definitely try to make the body visible.\n    set();\n    // Avoid errors in the function to break execution flow as this is\n    // often called as a last resort.\n    rethrowAsync(e);\n  }\n}\n\n\n/**\n * @param {!Document} doc\n */\nfunction renderStartedNoInline(doc) {\n  try {\n    Services.resourcesForDoc(doc).renderStarted();\n  } catch (e) {\n    // `makeBodyVisible` is called in the error-processing cycle and thus\n    // could be triggered when runtime's initialization is incomplete which\n    // would cause unrelated errors to be thrown here.\n  }\n}\n\n\n/**\n * Indicates that the body is always visible. For instance, in case of PWA.\n * @param {!Window} win\n */\nexport function bodyAlwaysVisible(win) {\n  win[bodyVisibleSentinel] = true;\n}\n\n\n/**\n * Checks whether a style element was registered in the DOM.\n * @param {!Document|!ShadowRoot} doc\n * @param {!Element} style\n * @return {boolean}\n */\nfunction styleLoaded(doc, style) {\n  const sheets = doc.styleSheets;\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    if (sheet.ownerNode == style) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Note: loaded by 3p system. Cannot rely on babel polyfills.\nimport {map} from './utils/object.js';\nimport {startsWith} from './string';\n\n\n/** @type {Object<string, string>} */\nlet propertyNameCache;\n\n/** @const {!Array<string>} */\nconst vendorPrefixes = ['Webkit', 'webkit', 'Moz', 'moz', 'ms', 'O', 'o'];\n\n\n/**\n * @export\n * @param {string} camelCase camel cased string\n * @return {string} title cased string\n */\nexport function camelCaseToTitleCase(camelCase) {\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n}\n\n/**\n * Checks the style if a prefixed version of a property exists and returns\n * it or returns an empty string.\n * @private\n * @param {!Object} style\n * @param {string} titleCase the title case version of a css property name\n * @return {string} the prefixed property name or null.\n */\nfunction getVendorJsPropertyName_(style, titleCase) {\n  for (let i = 0; i < vendorPrefixes.length; i++) {\n    const propertyName = vendorPrefixes[i] + titleCase;\n    if (style[propertyName] !== undefined) {\n      return propertyName;\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the possibly prefixed JavaScript property name of a style property\n * (ex. WebkitTransitionDuration) given a camelCase'd version of the property\n * (ex. transitionDuration).\n * @export\n * @param {!Object} style\n * @param {string} camelCase the camel cased version of a css property name\n * @param {boolean=} opt_bypassCache bypass the memoized cache of property\n *   mapping\n * @return {string}\n */\nexport function getVendorJsPropertyName(style, camelCase, opt_bypassCache) {\n  if (startsWith(camelCase, '--')) {\n    // CSS vars are returned as is.\n    return camelCase;\n  }\n  if (!propertyNameCache) {\n    propertyNameCache = map();\n  }\n  let propertyName = propertyNameCache[camelCase];\n  if (!propertyName || opt_bypassCache) {\n    propertyName = camelCase;\n    if (style[camelCase] === undefined) {\n      const titleCase = camelCaseToTitleCase(camelCase);\n      const prefixedPropertyName = getVendorJsPropertyName_(style, titleCase);\n\n      if (style[prefixedPropertyName] !== undefined) {\n        propertyName = prefixedPropertyName;\n      }\n    }\n    if (!opt_bypassCache) {\n      propertyNameCache[camelCase] = propertyName;\n    }\n  }\n  return propertyName;\n}\n\n\n/**\n * Sets the CSS styles of the specified element with !important. The styles\n * are specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setImportantStyles(element, styles) {\n  for (const k in styles) {\n    element.style.setProperty(\n        getVendorJsPropertyName(styles, k), styles[k].toString(), 'important');\n  }\n}\n\n\n/**\n * Sets the CSS style of the specified element with optional units, e.g. \"px\".\n * @param {?Element} element\n * @param {string} property\n * @param {*} value\n * @param {string=} opt_units\n * @param {boolean=} opt_bypassCache\n */\nexport function setStyle(element, property, value, opt_units, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (propertyName) {\n    element.style[propertyName] =\n      /** @type {string} */ (opt_units ? value + opt_units : value);\n  }\n}\n\n\n/**\n * Returns the value of the CSS style of the specified element.\n * @param {!Element} element\n * @param {string} property\n * @param {boolean=} opt_bypassCache\n * @return {*}\n */\nexport function getStyle(element, property, opt_bypassCache) {\n  const propertyName = getVendorJsPropertyName(element.style, property,\n      opt_bypassCache);\n  if (!propertyName) {\n    return undefined;\n  }\n  return element.style[propertyName];\n}\n\n\n/**\n * Sets the CSS styles of the specified element. The styles\n * a specified as a map from CSS property names to their values.\n * @param {!Element} element\n * @param {!Object<string, *>} styles\n */\nexport function setStyles(element, styles) {\n  for (const k in styles) {\n    setStyle(element, k, styles[k]);\n  }\n}\n\n\n/**\n * Shows or hides the specified element.\n * @param {!Element} element\n * @param {boolean=} opt_display\n */\nexport function toggle(element, opt_display) {\n  if (opt_display === undefined) {\n    opt_display = getStyle(element, 'display') == 'none';\n  }\n  setStyle(element, 'display', opt_display ? '' : 'none');\n}\n\n\n/**\n * Returns a pixel value.\n * @param {number} value\n * @return {string}\n */\nexport function px(value) {\n  return `${value}px`;\n}\n\n/**\n * Returns a degree value.\n * @param {number} value\n * @return {string}\n */\nexport function deg(value) {\n  return `${value}deg`;\n}\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function translateX(value) {\n  if (typeof value == 'string') {\n    return `translateX(${value})`;\n  }\n  return `translateX(${px(value)})`;\n}\n\n\n/**\n * Returns a \"translateX\" for CSS \"transform\" property.\n * @param {number|string} x\n * @param {(number|string)=} opt_y\n * @return {string}\n */\nexport function translate(x, opt_y) {\n  if (typeof x == 'number') {\n    x = px(x);\n  }\n  if (opt_y === undefined) {\n    return `translate(${x})`;\n  }\n  if (typeof opt_y == 'number') {\n    opt_y = px(opt_y);\n  }\n  return `translate(${x}, ${opt_y})`;\n}\n\n\n/**\n * Returns a \"scale\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function scale(value) {\n  return `scale(${value})`;\n}\n\n/**\n * Returns a \"rotate\" for CSS \"transform\" property.\n * @param {number|string} value\n * @return {string}\n */\nexport function rotate(value) {\n  if (typeof value == 'number') {\n    value = deg(value);\n  }\n  return `rotate(${value})`;\n}\n\n/**\n * Remove alpha value from a rgba color value.\n * Return the new color property with alpha equals if has the alpha value.\n * Caller needs to make sure the input color value is a valid rgba/rgb value\n * @param {string} rgbaColor\n * @return {string}\n */\nexport function removeAlphaFromColor(rgbaColor) {\n  return rgbaColor.replace(\n      /\\(([^,]+),([^,]+),([^,)]+),[^)]+\\)/g, '($1,$2,$3, 1)');\n}\n\n/**\n * Gets the computed style of the element. The helper is necessary to enforce\n * the possible `null` value returned by a buggy Firefox.\n *\n * @param {!Window} win\n * @param {!Element} el\n * @return {!Object<string, string>}\n */\nexport function computedStyle(win, el) {\n  const style = /** @type {?CSSStyleDeclaration} */(win.getComputedStyle(el));\n  return /** @type {!Object<string, string>} */(style) || map();\n}\n\n\n/**\n * Resets styles that were set dynamically (i.e. inline)\n * @param {!Element} element\n * @param {!Array<string>} properties\n */\nexport function resetStyles(element, properties) {\n  const styleObj = {};\n  properties.forEach(prop => {\n    styleObj[prop] = null;\n  });\n  setStyles(element, styleObj);\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* @const */\nconst toString_ = Object.prototype.toString;\n\n/**\n * Returns the ECMA [[Class]] of a value\n * @param {*} value\n * @return {string}\n */\nfunction toString(value) {\n  return toString_.call(value);\n}\n\n/**\n * Determines if value is actually an Array.\n * @param {*} value\n * @return {boolean}\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n\n/**\n * Converts an array-like object to an array.\n * @param {?IArrayLike<T>|string} arrayLike\n * @return {!Array<T>}\n * @template T\n */\nexport function toArray(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  }\n  const array = new Array(arrayLike.length);\n  for (let i = 0; i < arrayLike.length; i++) {\n    array[i] = arrayLike[i];\n  }\n  return array;\n}\n\n/**\n * Determines if value is actually an Object.\n * @param {*} value\n * @return {boolean}\n */\nexport function isObject(value) {\n  return toString(value) === '[object Object]';\n}\n\n/**\n * Determines if value is of number type and finite.\n * NaN and Infinity are not considered a finite number.\n * String numbers are not considered numbers.\n * @param {*} value\n * @return {boolean}\n */\nexport function isFiniteNumber(value) {\n  return (typeof value === 'number' && isFinite(value));\n}\n\n/**\n * Checks whether `s` is a valid value of `enumObj`.\n *\n * @param {!Object<T>} enumObj\n * @param {T} s\n * @return {boolean}\n * @template T\n */\nexport function isEnumValue(enumObj, s) {\n  for (const k in enumObj) {\n    if (enumObj[k] === s) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Externs declare that access `defaultView` from `document` or\n * `ownerDocument` is of type `(Window|null)` but most of our parameter types\n * assume that it is never null. This is OK in practice as we ever only get\n * null on disconnected documents or old IE.\n * This helper function casts it into just a simple Window return type.\n *\n * @param {!Window|null} winOrNull\n * @return {!Window}\n */\nexport function toWin(winOrNull) {\n  return /** @type {!Window} */ (winOrNull);\n}\n\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\n\nconst regex = /(?:^[#?]?|&)([^=&]+)(?:=([^&]*))?/g;\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * DO NOT import the function from this file. Instead, import parseQueryString\n * from `src/url.js`.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString_(queryString) {\n  const params = /** @type {!JsonObject} */ (Object.create(null));\n  if (!queryString) {\n    return params;\n  }\n\n  let match;\n  while ((match = regex.exec(queryString))) {\n    const name = tryDecodeUriComponent_(match[1], match[1]);\n    const value = match[2] ? tryDecodeUriComponent_(match[2], match[2]) : '';\n    params[name] = value;\n  }\n  return params;\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * DO NOT import the function from this file. Instead, import\n * tryDecodeUriComponent from `src/url.js`.\n *\n * @param {string} component\n * @param {string=} fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent_(component, fallback = '') {\n  try {\n    return decodeURIComponent(component);\n  } catch (e) {\n    return fallback;\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LruCache} from './utils/lru-cache';\nimport {dict} from './utils/object';\nimport {endsWith, startsWith} from './string';\nimport {getMode} from './mode';\nimport {isArray} from './types';\nimport {parseQueryString_} from './url-parse-query-string';\nimport {tryDecodeUriComponent_} from './url-try-decode-uri-component';\nimport {urls} from './config';\nimport {user} from './log';\n\n/**\n * @type {!JsonObject}\n */\nconst SERVING_TYPE_PREFIX = dict({\n  // No viewer\n  'c': true,\n  // In viewer\n  'v': true,\n  // Ad landing page\n  'a': true,\n  // Ad\n  'ad': true,\n});\n\n/**\n * Cached a-tag to avoid memory allocation during URL parsing.\n * @type {HTMLAnchorElement}\n */\nlet a;\n\n/**\n * We cached all parsed URLs. As of now there are no use cases\n * of AMP docs that would ever parse an actual large number of URLs,\n * but we often parse the same one over and over again.\n * @type {LruCache}\n */\nlet cache;\n\n/** @private @const Matches amp_js_* parameters in query string. */\nconst AMP_JS_PARAMS_REGEX = /[?&]amp_js[^&]*/;\n\n/** @private @const Matches amp_gsa parameters in query string. */\nconst AMP_GSA_PARAMS_REGEX = /[?&]amp_gsa[^&]*/;\n\n/** @private @const Matches amp_r parameters in query string. */\nconst AMP_R_PARAMS_REGEX = /[?&]amp_r[^&]*/;\n\n/** @private @const Matches usqp parameters from goog experiment in query string. */\nconst GOOGLE_EXPERIMENT_PARAMS_REGEX = /[?&]usqp[^&]*/;\n\nconst INVALID_PROTOCOLS = [\n  /*eslint no-script-url: 0*/ 'javascript:',\n  /*eslint no-script-url: 0*/ 'data:',\n  /*eslint no-script-url: 0*/ 'vbscript:',\n];\n\n/** @const {string} */\nexport const SOURCE_ORIGIN_PARAM = '__amp_source_origin';\n\n/**\n * Returns the correct origin for a given window.\n * @param {!Window} win\n * @return {string} origin\n */\nexport function getWinOrigin(win) {\n  return win.origin || parseUrlDeprecated(win.location.href).origin;\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {string} url\n * @param {boolean=} opt_nocache\n * @return {!Location}\n */\nexport function parseUrlDeprecated(url, opt_nocache) {\n  if (!a) {\n    a = /** @type {!HTMLAnchorElement} */ (self.document.createElement('a'));\n    cache = self.UrlCache || (self.UrlCache = new LruCache(100));\n  }\n\n  return parseUrlWithA(a, url, opt_nocache ? null : cache);\n}\n\n/**\n * Returns a Location-like object for the given URL. If it is relative,\n * the URL gets resolved.\n * Consider the returned object immutable. This is enforced during\n * testing by freezing the object.\n * @param {!HTMLAnchorElement} a\n * @param {string} url\n * @param {LruCache=} opt_cache\n * @return {!Location}\n * @restricted\n */\nexport function parseUrlWithA(a, url, opt_cache) {\n  if (opt_cache && opt_cache.has(url)) {\n    return opt_cache.get(url);\n  }\n\n  a.href = url;\n\n  // IE11 doesn't provide full URL components when parsing relative URLs.\n  // Assigning to itself again does the trick #3449.\n  if (!a.protocol) {\n    a.href = a.href;\n  }\n\n  const info = /** @type {!Location} */({\n    href: a.href,\n    protocol: a.protocol,\n    host: a.host,\n    hostname: a.hostname,\n    port: a.port == '0' ? '' : a.port,\n    pathname: a.pathname,\n    search: a.search,\n    hash: a.hash,\n    origin: null, // Set below.\n  });\n\n  // Some IE11 specific polyfills.\n  // 1) IE11 strips out the leading '/' in the pathname.\n  if (info.pathname[0] !== '/') {\n    info.pathname = '/' + info.pathname;\n  }\n\n  // 2) For URLs with implicit ports, IE11 parses to default ports while\n  // other browsers leave the port field empty.\n  if ((info.protocol == 'http:' && info.port == 80)\n      || (info.protocol == 'https:' && info.port == 443)) {\n    info.port = '';\n    info.host = info.hostname;\n  }\n\n  // For data URI a.origin is equal to the string 'null' which is not useful.\n  // We instead return the actual origin which is the full URL.\n  if (a.origin && a.origin != 'null') {\n    info.origin = a.origin;\n  } else if (info.protocol == 'data:' || !info.host) {\n    info.origin = info.href;\n  } else {\n    info.origin = info.protocol + '//' + info.host;\n  }\n\n  // Freeze during testing to avoid accidental mutation.\n  const frozen = (getMode().test && Object.freeze) ? Object.freeze(info) : info;\n\n  if (opt_cache) {\n    opt_cache.put(url, frozen);\n  }\n\n  return frozen;\n}\n\n/**\n * Appends the string just before the fragment part (or optionally\n * to the front of the query string) of the URL.\n * @param {string} url\n * @param {string} paramString\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function appendEncodedParamStringToUrl(url, paramString,\n  opt_addToFront) {\n  if (!paramString) {\n    return url;\n  }\n  const mainAndFragment = url.split('#', 2);\n  const mainAndQuery = mainAndFragment[0].split('?', 2);\n\n  let newUrl = mainAndQuery[0] + (\n    mainAndQuery[1]\n      ? (opt_addToFront\n        ? `?${paramString}&${mainAndQuery[1]}`\n        : `?${mainAndQuery[1]}&${paramString}`)\n      : `?${paramString}`);\n  newUrl += mainAndFragment[1] ? `#${mainAndFragment[1]}` : '';\n  return newUrl;\n}\n/**\n * Appends a query string field and value to a url. `key` and `value`\n * will be ran through `encodeURIComponent` before appending.\n * @param {string} url\n * @param {string} key\n * @param {string} value\n * @param {boolean=} opt_addToFront\n * @return {string}\n */\nexport function addParamToUrl(url, key, value, opt_addToFront) {\n  const field = `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n  return appendEncodedParamStringToUrl(url, field, opt_addToFront);\n}\n\n/**\n * Appends query string fields and values to a url. The `params` objects'\n * `key`s and `value`s will be transformed into query string keys/values.\n * @param {string} url\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function addParamsToUrl(url, params) {\n  return appendEncodedParamStringToUrl(url, serializeQueryString(params));\n}\n\n/**\n * Serializes the passed parameter map into a query string with both keys\n * and values encoded.\n * @param {!JsonObject<string, string|!Array<string>>} params\n * @return {string}\n */\nexport function serializeQueryString(params) {\n  const s = [];\n  for (const k in params) {\n    const v = params[k];\n    if (v == null) {\n      continue;\n    } else if (isArray(v)) {\n      for (let i = 0; i < v.length; i++) {\n        const sv = /** @type {string} */ (v[i]);\n        s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n      }\n    } else {\n      const sv = /** @type {string} */ (v);\n      s.push(`${encodeURIComponent(k)}=${encodeURIComponent(sv)}`);\n    }\n  }\n  return s.join('&');\n}\n\n/**\n * Returns `true` if the URL is secure: either HTTPS or localhost (for testing).\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isSecureUrlDeprecated(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return (url.protocol == 'https:' ||\n      url.hostname == 'localhost' ||\n      endsWith(url.hostname, '.localhost'));\n}\n\n/**\n * Asserts that a given url is HTTPS or protocol relative. It's a user-level\n * assert.\n *\n * Provides an exception for localhost.\n *\n * @param {?string|undefined} urlString\n * @param {!Element|string} elementContext Element where the url was found.\n * @param {string=} sourceName Used for error messages.\n * @return {string}\n */\nexport function assertHttpsUrl(\n  urlString, elementContext, sourceName = 'source') {\n  user().assert(urlString != null, '%s %s must be available',\n      elementContext, sourceName);\n  // (erwinm, #4560): type cast necessary until #4560 is fixed.\n  const theUrlString = /** @type {string} */ (urlString);\n  user().assert(isSecureUrlDeprecated(theUrlString) || /^(\\/\\/)/.test(theUrlString),\n      '%s %s must start with ' +\n      '\"https://\" or \"//\" or be relative and served from ' +\n      'either https or from localhost. Invalid value: %s',\n      elementContext, sourceName, theUrlString);\n  return theUrlString;\n}\n\n/**\n * Asserts that a given url is an absolute HTTP or HTTPS URL.\n * @param {string} urlString\n * @return {string}\n */\nexport function assertAbsoluteHttpOrHttpsUrl(urlString) {\n  user().assert(/^https?\\:/i.test(urlString),\n      'URL must start with \"http://\" or \"https://\". Invalid value: %s',\n      urlString);\n  return parseUrlDeprecated(urlString).href;\n}\n\n\n/**\n * Parses the query string of an URL. This method returns a simple key/value\n * map. If there are duplicate keys the latest value is returned.\n *\n * This function is implemented in a separate file to avoid a circular\n * dependency.\n *\n * @param {string} queryString\n * @return {!JsonObject}\n */\nexport function parseQueryString(queryString) {\n  return parseQueryString_(queryString);\n}\n\n/**\n * Returns the URL without fragment. If URL doesn't contain fragment, the same\n * string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function removeFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return url;\n  }\n  return url.substring(0, index);\n}\n\n/**\n * Returns the fragment from the URL. If the URL doesn't contain fragment,\n * the empty string is returned.\n * @param {string} url\n * @return {string}\n */\nexport function getFragment(url) {\n  const index = url.indexOf('#');\n  if (index == -1) {\n    return '';\n  }\n  return url.substring(index);\n}\n\n/**\n * Returns whether the URL has the origin of a proxy.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isProxyOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.cdnProxyRegex.test(url.origin);\n}\n\n/**\n * For proxy-origin URLs, returns the serving type. Otherwise, returns null.\n * E.g., 'https://amp-com.cdn.ampproject.org/a/s/amp.com/amp_document.html'\n * returns 'a'.\n * @param {string|!Location} url URL of an AMP document.\n * @return {?string}\n */\nexport function getProxyServingType(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  if (!isProxyOrigin(url)) {\n    return null;\n  }\n  const path = url.pathname.split('/', 2);\n  return path[1];\n}\n\n/**\n * Returns whether the URL origin is localhost.\n * @param {string|!Location} url URL of an AMP document.\n * @return {boolean}\n */\nexport function isLocalhostOrigin(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return urls.localhostRegex.test(url.origin);\n}\n\n/**\n * Returns whether the URL has valid protocol.\n * Deep link protocol is valid, but not javascript etc.\n * @param {string|!Location} url\n * @return {boolean}\n */\nexport function isProtocolValid(url) {\n  if (!url) {\n    return true;\n  }\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n  return !INVALID_PROTOCOLS.includes(url.protocol);\n}\n\n/**\n * Returns a URL without AMP JS parameters.\n * @param {string} url\n * @return {string}\n */\nexport function removeAmpJsParamsFromUrl(url) {\n  const parsed = parseUrlDeprecated(url);\n  const search = removeAmpJsParamsFromSearch(parsed.search);\n  return parsed.origin + parsed.pathname + search + parsed.hash;\n\n}\n\n/**\n * Returns a URL without a query string.\n * @param {string} url\n * @return {string}\n */\nexport function removeSearch(url) {\n  const index = url.indexOf('?');\n  if (index == -1) {\n    return url;\n  }\n  const fragment = getFragment(url);\n  return url.substring(0, index) + fragment;\n}\n\n/**\n * Removes parameters that start with amp js parameter pattern and returns the\n * new search string.\n * @param {string} urlSearch\n * @return {string}\n */\nfunction removeAmpJsParamsFromSearch(urlSearch) {\n  if (!urlSearch || urlSearch == '?') {\n    return '';\n  }\n  const search = urlSearch\n      .replace(AMP_JS_PARAMS_REGEX, '')\n      .replace(AMP_GSA_PARAMS_REGEX, '')\n      .replace(AMP_R_PARAMS_REGEX, '')\n      .replace(GOOGLE_EXPERIMENT_PARAMS_REGEX, '')\n      .replace(/^[?&]/, ''); // Removes first ? or &.\n  return search ? '?' + search : '';\n}\n\n/**\n * Returns the source URL of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string}\n */\nexport function getSourceUrl(url) {\n  if (typeof url == 'string') {\n    url = parseUrlDeprecated(url);\n  }\n\n  // Not a proxy URL - return the URL itself.\n  if (!isProxyOrigin(url)) {\n    return url.href;\n  }\n\n  // A proxy URL.\n  // Example path that is being matched here.\n  // https://cdn.ampproject.org/c/s/www.origin.com/foo/\n  // The /s/ is optional and signals a secure origin.\n  const path = url.pathname.split('/');\n  const prefix = path[1];\n  user().assert(SERVING_TYPE_PREFIX[prefix],\n      'Unknown path prefix in url %s', url.href);\n  const domainOrHttpsSignal = path[2];\n  const origin = domainOrHttpsSignal == 's'\n    ? 'https://' + decodeURIComponent(path[3])\n    : 'http://' + decodeURIComponent(domainOrHttpsSignal);\n  // Sanity test that what we found looks like a domain.\n  user().assert(origin.indexOf('.') > 0, 'Expected a . in origin %s', origin);\n  path.splice(1, domainOrHttpsSignal == 's' ? 3 : 2);\n  return origin + path.join('/') +\n      removeAmpJsParamsFromSearch(url.search) + (url.hash || '');\n}\n\n/**\n * Returns the source origin of an AMP document for documents served\n * on a proxy origin or directly.\n * @param {string|!Location} url URL of an AMP document.\n * @return {string} The source origin of the URL.\n */\nexport function getSourceOrigin(url) {\n  return parseUrlDeprecated(getSourceUrl(url)).origin;\n}\n\n/**\n * Returns absolute URL resolved based on the relative URL and the base.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n */\nexport function resolveRelativeUrl(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  if (typeof URL == 'function') {\n    return new URL(relativeUrlString, baseUrl.href).toString();\n  }\n  return resolveRelativeUrlFallback_(relativeUrlString, baseUrl);\n}\n\n/**\n * Fallback for URL resolver when URL class is not available.\n * @param {string} relativeUrlString\n * @param {string|!Location} baseUrl\n * @return {string}\n * @private Visible for testing.\n */\nexport function resolveRelativeUrlFallback_(relativeUrlString, baseUrl) {\n  if (typeof baseUrl == 'string') {\n    baseUrl = parseUrlDeprecated(baseUrl);\n  }\n  relativeUrlString = relativeUrlString.replace(/\\\\/g, '/');\n  const relativeUrl = parseUrlDeprecated(relativeUrlString);\n\n  // Absolute URL.\n  if (startsWith(relativeUrlString.toLowerCase(), relativeUrl.protocol)) {\n    return relativeUrl.href;\n  }\n\n  // Protocol-relative URL.\n  if (startsWith(relativeUrlString, '//')) {\n    return baseUrl.protocol + relativeUrlString;\n  }\n\n  // Absolute path.\n  if (startsWith(relativeUrlString, '/')) {\n    return baseUrl.origin + relativeUrlString;\n  }\n\n  // Relative path.\n  return baseUrl.origin + baseUrl.pathname.replace(/\\/[^/]*$/, '/')\n      + relativeUrlString;\n}\n\n\n/**\n * Add \"__amp_source_origin\" query parameter to the URL.\n * @param {!Window} win\n * @param {string} url\n * @return {string}\n */\nexport function getCorsUrl(win, url) {\n  checkCorsUrl(url);\n  const sourceOrigin = getSourceOrigin(win.location.href);\n  return addParamToUrl(url, SOURCE_ORIGIN_PARAM, sourceOrigin);\n}\n\n\n/**\n * Checks if the url has __amp_source_origin and throws if it does.\n * @param {string} url\n */\nexport function checkCorsUrl(url) {\n  const parsedUrl = parseUrlDeprecated(url);\n  const query = parseQueryString(parsedUrl.search);\n  user().assert(!(SOURCE_ORIGIN_PARAM in query),\n      'Source origin is not allowed in %s', url);\n}\n\n/**\n * Tries to decode a URI component, falling back to opt_fallback (or an empty\n * string)\n *\n * @param {string} component\n * @param {string=} opt_fallback\n * @return {string}\n */\nexport function tryDecodeUriComponent(component, opt_fallback) {\n  return tryDecodeUriComponent_(component, opt_fallback);\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Compares if two arrays contains exactly same elements of same number\n * of same order.\n * Notice that it does NOT handle NaN case as expected\n *\n * @param {!Array<T>} arr1\n * @param {!Array<T>} arr2\n * @return {boolean}\n * @template T\n */\nexport function areEqualOrdered(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * A bit like Array#filter, but removes elements that filter false from the\n * array. Returns the filtered items.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} filter\n * @return {!Array<T>}\n * @template T\n */\nexport function filterSplice(array, filter) {\n  const splice = [];\n  let index = 0;\n  for (let i = 0; i < array.length; i++) {\n    const item = array[i];\n    if (filter(item, i, array)) {\n      if (index < i) {\n        array[index] = item;\n      }\n      index++;\n    } else {\n      splice.push(item);\n    }\n  }\n\n  if (index < array.length) {\n    array.length = index;\n  }\n\n  return splice;\n}\n\n/**\n * Returns the index of the first element matching the predicate.\n * Like Array#findIndex.\n *\n * @param {!Array<T>} array\n * @param {function(T, number, !Array<T>):boolean} predicate\n * @return {number}\n * @template T\n */\nexport function findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Converts the given iterator to an array.\n *\n * @param {!Iterator<T>} iterator\n * @return {Array<T>}\n * @template T\n */\nexport function fromIterator(iterator) {\n  const array = [];\n  for (let e = iterator.next(); !e.done; e = iterator.next()) {\n    array.push(e.value);\n  }\n  return array;\n}\n\n/**\n * Adds item to array if it is not already present.\n *\n * @param {Array<T>} array\n * @param {T} item\n * @template T\n */\nexport function pushIfNotExist(array, item) {\n  if (array.indexOf(item) < 0) {\n    array.push(item);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {bytesToString, stringToBytes, utf8Encode} from './bytes';\n\n/**\n * Character mapping from base64url to base64.\n * @const {!Object<string, string>}\n */\nconst base64UrlDecodeSubs = {'-': '+', '_': '/', '.': '='};\n\n/**\n * Character mapping from base64 to base64url.\n * @const {!Object<string, string>}\n */\nconst base64UrlEncodeSubs = {'+': '-', '/': '_', '=': '.'};\n\n/**\n * Converts a string which is in base64url encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64UrlDecodeToBytes(str) {\n  const encoded = atob(str.replace(/[-_.]/g, ch => base64UrlDecodeSubs[ch]));\n  return stringToBytes(encoded);\n}\n\n/**\n * Converts a string which is in base64 encoding into a Uint8Array\n * containing the decoded value.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function base64DecodeToBytes(str) {\n  return stringToBytes(atob(str));\n}\n\n/**\n * Converts a bytes array into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64UrlEncodeFromBytes(bytes) {\n  const str = bytesToString(bytes);\n  return btoa(str).replace(/[+/=]/g, ch => base64UrlEncodeSubs[ch]);\n}\n\n/**\n * Converts a string into base64url encoded string.\n * base64url is defined in RFC 4648. It is sometimes referred to as \"web safe\".\n * @param {string} str\n * @return {string}\n */\nexport function base64UrlEncodeFromString(str) {\n  const bytes = utf8Encode(str);\n  return base64UrlEncodeFromBytes(bytes);\n}\n\n/**\n * Converts a bytes array into base64 encoded string.\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function base64EncodeFromBytes(bytes) {\n  return btoa(bytesToString(bytes));\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/**\n * Interpret a byte array as a UTF-8 string.\n * @param {!BufferSource} bytes\n * @return {string}\n */\nexport function utf8Decode(bytes) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder('utf-8').decode(bytes);\n  }\n  const asciiString = bytesToString(new Uint8Array(bytes.buffer || bytes));\n  return decodeURIComponent(escape(asciiString));\n}\n\n/**\n * Turn a string into UTF-8 bytes.\n * @param {string} string\n * @return {!Uint8Array}\n */\nexport function utf8Encode(string) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder('utf-8').encode(string);\n  }\n  return stringToBytes(unescape(encodeURIComponent(string)));\n}\n\n/**\n * Converts a string which holds 8-bit code points, such as the result of atob,\n * into a Uint8Array with the corresponding bytes.\n * If you have a string of characters, you probably want to be using utf8Encode.\n * @param {string} str\n * @return {!Uint8Array}\n */\nexport function stringToBytes(str) {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    const charCode = str.charCodeAt(i);\n    dev().assert(charCode <= 255, 'Characters must be in range [0,255]');\n    bytes[i] = charCode;\n  }\n  return bytes;\n}\n\n/**\n * Converts a 8-bit bytes array into a string\n * @param {!Uint8Array} bytes\n * @return {string}\n */\nexport function bytesToString(bytes) {\n  // Intentionally avoids String.fromCharCode.apply so we don't suffer a\n  // stack overflow. #10495, https://jsperf.com/bytesToString-2\n  const array = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = String.fromCharCode(bytes[i]);\n  }\n  return array.join('');\n}\n\n/**\n * Converts a 4-item byte array to an unsigned integer.\n * Assumes bytes are big endian.\n * @param {!Uint8Array} bytes\n * @return {number}\n */\nexport function bytesToUInt32(bytes) {\n  if (bytes.length != 4) {\n    throw new Error('Received byte array with length != 4');\n  }\n  const val = (bytes[0] & 0xFF) << 24 |\n     (bytes[1] & 0xFF) << 16 |\n     (bytes[2] & 0xFF) << 8 |\n     (bytes[3] & 0xFF);\n  // Convert to unsigned.\n  return val >>> 0;\n}\n\n/**\n * Generate a random bytes array with specific length using\n * win.crypto.getRandomValues. Return null if it is not available.\n * @param {!Window} win\n * @param {number} length\n * @return {?Uint8Array}\n */\nexport function getCryptoRandomBytesArray(win, length) {\n  if (!win.crypto || !win.crypto.getRandomValues) {\n    return null;\n  }\n\n  // Widely available in browsers we support:\n  // http://caniuse.com/#search=getRandomValues\n  const uint8array = new Uint8Array(length);\n  win.crypto.getRandomValues(uint8array);\n  return uint8array;\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {stringHash32} from '../string';\n\n\n/**\n * Gets a string of concatenated element names and relative positions\n * of the DOM element and its parentElement's (up to 25).  Relative position\n * is the index of nodes with this tag within the parent's children.\n * The order is from the inner to outer nodes in DOM hierarchy.\n *\n * If a DOM hierarchy is the following:\n *\n * <div id='id1' ...>\n *   <div id='id2' ...>\n *     <table ...>       // table:0\n *       <tr>            // tr:0\n *         <td>...</td>  // td:0\n *         <td>          // td:1\n *           <amp-ad ...></amp-ad>\n *         </td>\n *       </tr>\n *       <tr>...</tr>    // tr:1\n *     </table>\n *   </div>\n * </div>\n *\n * With the amp-ad element passed in:\n * 'amp-ad.0,td.1,tr.0,table.0,div/id2.0,div/id1.0'\n *\n * Note: 25 is chosen arbitrarily.\n *\n * @param {?Element} element DOM node from which to get fingerprint.\n * @return {string} Concatenated element ids.\n */\nexport function domFingerprintPlain(element) {\n  const ids = [];\n  let level = 0;\n  while (element && element.nodeType == /* element */ 1 && level < 25) {\n    let id = '';\n    if (element.id) {\n      id = `/${element.id}`;\n    }\n    const nodeName = element.nodeName.toLowerCase();\n    ids.push(`${nodeName}${id}${indexWithinParent(element)}`);\n    level++;\n    element = element.parentElement;\n  }\n  return ids.join();\n}\n\n\nexport class DomFingerprint {\n  /**\n   * Calculates ad slot DOM fingerprint.  This key is intended to\n   * identify \"same\" ad unit across many page views. This is\n   * based on where the ad appears within the page's DOM structure.\n   *\n   * @param {?Element} element The DOM element from which to collect\n   *     the DOM chain element IDs.  If null, DOM chain element IDs are not\n   *     included in the hash.\n   * @return {string} The ad unit hash key string.\n   */\n  static generate(element) {\n    return stringHash32(domFingerprintPlain(element));\n  }\n}\n\n\n/**\n * Gets a string showing the index of an element within\n * the children of its parent, counting only nodes with the same tag.\n * Stop at 25, just to have a limit.\n * @param {!Element} element DOM node to get index of.\n * @return {string} '.<index>' or ''.\n */\nfunction indexWithinParent(element) {\n  const {nodeName} = element;\n  // Find my index within my parent's children\n  let i = 0;\n  let count = 0;\n  let sibling = element.previousElementSibling;\n  // Different browsers have different children.\n  // So count only nodes with the same tag.\n  // Use a limit for the tags, so that different browsers get the same\n  // count. So 25 and higher all return no index.\n  while (sibling && count < 25 && i < 100) {\n    if (sibling.nodeName == nodeName) {\n      count++;\n    }\n    i++;\n    sibling = sibling.previousElementSibling;\n  }\n  // If we got to the end, then the count is accurate; otherwise skip count.\n  return count < 25 && i < 100 ? `.${count}` : '';\n}\n","/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {dev} from '../log';\n\n/** @const {string} */\nconst TAG = 'lru-cache';\n\n/**\n * @template T\n */\nexport class LruCache {\n  /**\n   * @param {number} capacity\n   */\n  constructor(capacity) {\n    /** @private @const {number} */\n    this.capacity_ = capacity;\n\n    /** @private {number} */\n    this.size_ = 0;\n\n    /**\n     * An incrementing counter to define the last access.\n     * @private {number}\n     */\n    this.access_ = 0;\n\n    /** @private {!Object<(number|string), {payload: T, access: number}>} */\n    this.cache_ = Object.create(null);\n  }\n\n  /**\n   * Returns whether key is cached.\n   *\n   * @param {number|string} key\n   * @return {boolean}\n   */\n  has(key) {\n    return !!this.cache_[key];\n  }\n\n  /**\n   * @param {number|string} key\n   * @return {T} The cached payload.\n   */\n  get(key) {\n    const cacheable = this.cache_[key];\n    if (cacheable) {\n      cacheable.access = ++this.access_;\n      return cacheable.payload;\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {number|string} key\n   * @param {T} payload The payload to cache.\n   */\n  put(key, payload) {\n    if (!this.has(key)) {\n      this.size_++;\n    }\n    this.cache_[key] = {payload, access: this.access_};\n    this.evict_();\n  }\n\n  /**\n   * Evicts the oldest cache entry, if we've exceeded capacity.\n   */\n  evict_() {\n    if (this.size_ <= this.capacity_) {\n      return;\n    }\n\n    dev().warn(TAG, 'Trimming LRU cache');\n    const cache = this.cache_;\n    let oldest = this.access_ + 1;\n    let oldestKey;\n    for (const key in cache) {\n      const {access} = cache[key];\n      if (access < oldest) {\n        oldest = access;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey !== undefined) {\n      delete cache[oldestKey];\n      this.size_--;\n    }\n  }\n}\n","/**\n * Copyright 2015 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {isObject} from '../types';\n\n/* @const */\nconst hasOwn_ = Object.prototype.hasOwnProperty;\n\n/**\n * Returns a map-like object.\n * If opt_initial is provided, copies its own properties into the\n * newly created object.\n * @param {T=} opt_initial This should typically be an object literal.\n * @return {T}\n * @template T\n */\nexport function map(opt_initial) {\n  const obj = Object.create(null);\n  if (opt_initial) {\n    Object.assign(obj, opt_initial);\n  }\n  return obj;\n}\n\n/**\n * Return an empty JsonObject or makes the passed in object literal\n * an JsonObject.\n * The JsonObject type is just a simple object that is at-dict.\n * See\n * https://github.com/google/closure-compiler/wiki/@struct-and-@dict-Annotations\n * for what a dict is type-wise.\n * The linter enforces that the argument is, in fact, at-dict like.\n * @param {!Object=} opt_initial\n * @return {!JsonObject}\n */\nexport function dict(opt_initial) {\n  // We do not copy. The linter enforces that the passed in object is a literal\n  // and thus the caller cannot have a reference to it.\n  return /** @type {!JsonObject} */ (opt_initial || {});\n}\n\n/**\n * Checks if the given key is a property in the map.\n *\n * @param {T}  obj a map like property.\n * @param {string}  key\n * @return {boolean}\n * @template T\n */\nexport function hasOwn(obj, key) {\n  return hasOwn_.call(obj, key);\n}\n\n/**\n * Returns obj[key] iff key is obj's own property (is not inherited).\n * Otherwise, returns undefined.\n *\n * @param {Object} obj\n * @param {string} key\n * @return {*}\n */\nexport function ownProperty(obj, key) {\n  if (hasOwn(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Deep merges source into target.\n *\n * @param {!Object} target\n * @param {!Object} source\n * @param {number} depth The maximum merge depth. If exceeded, Object.assign\n *                       will be used instead.\n * @return {!Object}\n * @throws {Error} If source contains a circular reference.\n * Note: Only nested objects are deep-merged, primitives and arrays are not.\n */\nexport function deepMerge(target, source, depth = 10) {\n  // Keep track of seen objects to detect recursive references.\n  const seen = [];\n\n  /** @type {!Array<{t: !Object, s: !Object, d: number}>} */\n  const queue = [];\n  queue.push({t: target, s: source, d: 0});\n\n  // BFS to ensure objects don't have recursive references at shallower depths.\n  while (queue.length > 0) {\n    const {t, s, d} = queue.shift();\n    if (seen.includes(s)) {\n      throw new Error('Source object has a circular reference.');\n    }\n    seen.push(s);\n    if (t === s) {\n      continue;\n    }\n    if (d > depth) {\n      Object.assign(t, s);\n      continue;\n    }\n    Object.keys(s).forEach(key => {\n      const newValue = s[key];\n      // Perform a deep merge IFF both target and source have the same key\n      // whose corresponding values are objects.\n      if (hasOwn(t, key)) {\n        const oldValue = t[key];\n        if (isObject(newValue) && isObject(oldValue)) {\n          queue.push({t: oldValue, s: newValue, d: d + 1});\n          return;\n        }\n      }\n      t[key] = newValue;\n    });\n  }\n  return target;\n}\n\n/**\n * @param {!Object} o An object to remove properties from\n * @param {!Array<string>} props A list of properties to remove from the Object\n * @return {!Object} An object with the given properties removed\n */\nexport function omit(o, props) {\n  return Object.keys(o).reduce((acc, key) => {\n    if (!props.includes(key)) {\n      acc[key] = o[key];\n    }\n    return acc;\n  }, {});\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a Deferred struct, which holds a pending promise and its associated\n * resolve and reject functions.\n *\n * This is preferred instead of creating a Promise instance to extract the\n * resolve/reject functions yourself:\n *\n * ```\n * // Avoid doing\n * let resolve;\n * const promise = new Promise(res => {\n *   resolve = res;\n * });\n *\n * // Good\n * const deferred = new Deferred();\n * const { promise, resolve } = deferred;\n * ```\n *\n * @template T\n */\nexport class Deferred {\n  /**\n   * Creates an instance of Deferred.\n   */\n  constructor() {\n    let resolve, reject;\n\n    /**\n     * @const {!Promise<T>}\n     */\n    this.promise = new /*OK*/Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n\n    /**\n     * @const {function(T=)}\n     */\n    this.resolve = resolve;\n\n    /**\n     * @const {function(*=)}\n     */\n    this.reject = reject;\n  }\n}\n\n/**\n * Creates a promise resolved to the return value of fn.\n * If fn sync throws, it will cause the promise to reject.\n *\n * @param {function():T} fn\n * @return {!Promise<T>}\n * @template T\n */\nexport function tryResolve(fn) {\n  return new Promise(resolve => {\n    resolve(fn());\n  });\n}\n\n/**\n * Returns a promise which resolves if a threshold amount of the given promises\n * resolve, and rejects otherwise.\n * @param {!Array<!Promise>} promises The array of promises to test.\n * @param {number} count The number of promises that must resolve for the\n *     returned promise to resolve.\n * @return {!Promise} A promise that resolves if any of the given promises\n *     resolve, and which rejects otherwise.\n */\nexport function some(promises, count = 1) {\n  return new Promise((resolve, reject) => {\n    count = Math.max(count, 0);\n    const extra = promises.length - count;\n    if (extra < 0) {\n      reject(new Error('not enough promises to resolve'));\n    }\n    if (promises.length == 0) {\n      resolve([]);\n    }\n    const values = [];\n    const reasons = [];\n\n    const onFulfilled = value => {\n      if (values.length < count) {\n        values.push(value);\n      }\n      if (values.length == count) {\n        resolve(values);\n      }\n    };\n    const onRejected = reason => {\n      if (reasons.length <= extra) {\n        reasons.push(reason);\n      }\n      if (reasons.length > extra) {\n        reject(reasons);\n      }\n    };\n    for (let i = 0; i < promises.length; i++) {\n      Promise.resolve(promises[i]).then(onFulfilled, onRejected);\n    }\n  });\n}\n\n/**\n * Resolves with the result of the last promise added.\n * @implements {IThenable}\n */\nexport class LastAddedResolver {\n  /**\n   * @param {!Array<!Promise>=} opt_promises\n   */\n  constructor(opt_promises) {\n    let resolve_, reject_;\n    /** @private @const {!Promise} */\n    this.promise_ = new Promise((resolve, reject) => {\n      resolve_ = resolve;\n      reject_ = reject;\n    });\n\n    /** @private */\n    this.resolve_ = resolve_;\n\n    /** @private */\n    this.reject_ = reject_;\n\n    /** @private */\n    this.count_ = 0;\n\n    if (opt_promises) {\n      for (let i = 0; i < opt_promises.length; i++) {\n        this.add(opt_promises[i]);\n      }\n    }\n  }\n\n  /**\n   * Add a promise to possibly be resolved.\n   * @param {!Promise} promise\n   * @return {!Promise}\n   */\n  add(promise) {\n    const countAtAdd = ++this.count_;\n    Promise.resolve(promise).then(result => {\n      if (this.count_ === countAtAdd) {\n        this.resolve_(result);\n      }\n    }, error => {\n      // Don't follow behavior of Promise.all and Promise.race error so that\n      // this will only reject when most recently added promise fails.\n      if (this.count_ === countAtAdd) {\n        this.reject_(error);\n      }\n    });\n    return this.promise_;\n  }\n\n  /** @override */\n  then(opt_resolve, opt_reject) {\n    return this.promise_.then(opt_resolve, opt_reject);\n  }\n}\n","/**\n * Copyright 2016 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wraps a given callback and applies a rate limit.\n * It throttles the calls so that no consequent calls have time interval\n * smaller than the given minimal interval.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function throttle(win, callback, minInterval) {\n  let locker = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {!Object} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    // Lock the fire for minInterval milliseconds\n    locker = win.setTimeout(waiter, minInterval);\n\n    callback.apply(null, args);\n  }\n\n  /**\n   * Waiter function\n   */\n  function waiter() {\n    locker = 0;\n    // If during the period there're invocations queued up, fire once.\n    if (nextCallArgs) {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    if (locker) {\n      nextCallArgs = args;\n    } else {\n      fire(args);\n    }\n  };\n}\n\n/**\n * Wraps a given callback and applies a wait timer, so that minInterval\n * milliseconds must pass since the last call before the callback is actually\n * invoked.\n *\n * @param {!Window} win\n * @param {function(...*)} callback\n * @param {number} minInterval the minimum time interval in millisecond\n * @return {function(...*)}\n */\nexport function debounce(win, callback, minInterval) {\n  let locker = 0;\n  let timestamp = 0;\n  let nextCallArgs = null;\n\n  /**\n   * @param {?Array} args\n   */\n  function fire(args) {\n    nextCallArgs = null;\n    callback.apply(null, args);\n  }\n\n  /**\n   * Wait function for debounce\n   */\n  function waiter() {\n    locker = 0;\n    const remaining = minInterval - (win.Date.now() - timestamp);\n    if (remaining > 0) {\n      locker = win.setTimeout(waiter, remaining);\n    } else {\n      fire(nextCallArgs);\n    }\n  }\n\n  return function(...args) {\n    timestamp = win.Date.now();\n    nextCallArgs = args;\n    if (!locker) {\n      locker = win.setTimeout(waiter, minInterval);\n    }\n  };\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Deferred} from './promise';\nimport {map} from './object';\n\n\n/**\n * This object tracts signals and allows blocking until a signal has been\n * received.\n */\nexport class Signals {\n\n  /**\n   * Creates an instance of Signals.\n   */\n  constructor() {\n    /**\n     * A mapping from a signal name to the signal response: either time or\n     * an error.\n     * @private @const {!Object<string, (time|!Error)>}\n     */\n    this.map_ = map();\n\n    /**\n     * A mapping from a signal name to the signal promise, resolve and reject.\n     * Only allocated when promise has been requested.\n     * @private {?Object<string, {\n     *   promise: !Promise,\n     *   resolve: (function(time)|undefined),\n     *   reject: (function(!Error)|undefined)\n     * }>}\n     */\n    this.promiseMap_ = null;\n  }\n\n  /**\n   * Returns the current known value of the signal. If signal is not yet\n   * available, `null` is returned.\n   * @param {string} name\n   * @return {number|!Error|null}\n   */\n  get(name) {\n    return this.map_[name] || null;\n  }\n\n  /**\n   * Returns the promise that's resolved when the signal is triggered. The\n   * resolved value is the time of the signal.\n   * @param {string} name\n   * @return {!Promise<time>}\n   */\n  whenSignal(name) {\n    let promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (!promiseStruct) {\n      const result = this.map_[name];\n      if (result != null) {\n        // Immediately resolve signal.\n        const promise = typeof result == 'number' ?\n          Promise.resolve(result) :\n          Promise.reject(result);\n        promiseStruct = {promise};\n      } else {\n        // Allocate the promise/resolver for when the signal arrives in the\n        // future.\n        const deferred = new Deferred();\n        const {promise, resolve, reject} = deferred;\n\n        promiseStruct = {promise, resolve, reject};\n      }\n      if (!this.promiseMap_) {\n        this.promiseMap_ = map();\n      }\n      this.promiseMap_[name] = promiseStruct;\n    }\n    return promiseStruct.promise;\n  }\n\n  /**\n   * Triggers the signal with the specified name on the element. The time is\n   * optional; if not provided, the current time is used. The associated\n   * promise is resolved with the resulting time.\n   * @param {string} name\n   * @param {time=} opt_time\n   */\n  signal(name, opt_time) {\n    if (this.map_[name] != null) {\n      // Do not duplicate signals.\n      return;\n    }\n    const time = opt_time || Date.now();\n    this.map_[name] = time;\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && promiseStruct.resolve) {\n      promiseStruct.resolve(time);\n      promiseStruct.resolve = undefined;\n      promiseStruct.reject = undefined;\n    }\n  }\n\n  /**\n   * Rejects the signal. Indicates that the signal will never succeed. The\n   * associated signal is rejected.\n   * @param {string} name\n   * @param {!Error} error\n   */\n  rejectSignal(name, error) {\n    if (this.map_[name] != null) {\n      // Do not duplicate signals.\n      return;\n    }\n    this.map_[name] = error;\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && promiseStruct.reject) {\n      promiseStruct.reject(error);\n      promiseStruct.resolve = undefined;\n      promiseStruct.reject = undefined;\n    }\n  }\n\n  /**\n   * Resets all signals.\n   * @param {string} name\n   */\n  reset(name) {\n    if (this.map_[name]) {\n      delete this.map_[name];\n    }\n    // Reset promise it has already been resolved.\n    const promiseStruct = this.promiseMap_ && this.promiseMap_[name];\n    if (promiseStruct && !promiseStruct.resolve) {\n      delete this.promiseMap_[name];\n    }\n  }\n}\n","/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An interface to interact with browser window object.\n * Mainly used to mock out read only APIs in test.\n * See test-helper.js#mockWindowInterface\n */\nexport class WindowInterface {\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getDocumentReferrer(win) {\n    return win.document.referrer;\n  }\n\n  /**\n   * @static\n   * @param {!Window} win\n   * @return {string}\n   */\n  static getHostname(win) {\n    return win.location.hostname;\n  }\n}\n","/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */\n\n\n/**\n * This regex consists of 4 matching capture groups and one (non-matching) fallback:\n *\n * - (\\0), catch the null terminator character so it may be replaced by UTF\n *   Replacement Char\n * - ^(-)$, catch a solitary dash char, so that it may be backslash escaped.\n *   This is a separate capture group so that the legal-chars (group 4) doesn't\n *   capture it first, since that group doesn't need to escape its dash.\n * - ([\\x01-\\x1f\\x7f]|^-?[0-9]), catch a UTF control char, or any leading\n *   number (with an optional leading dash). The control or the number (but not\n *   the leading dash) must be hex-escaped,.\n * - ([\\x80-\\uffff0-9a-zA-Z_-]+), catch legal-chars, with the exception of a\n *   solitary dash, which will already have matched in group 1.\n * - [^], finally, a catch-all that allows us to backslash escape the char.\n *\n * Together, this matches everything necessary for CSS.escape.\n */\nvar regex = /(\\0)|^(-)$|([\\x01-\\x1f\\x7f]|^-?[0-9])|([\\x80-\\uffff0-9a-zA-Z_-]+)|[^]/g;\n\nfunction escaper(match, nil, dash, hexEscape, chars) {\n  // Chars is the legal-chars (group 4) capture\n  if (chars) {\n    return chars;\n  }\n  // Nil is the null terminator (group 1) capture\n  if (nil) {\n    return '\\uFFFD';\n  }\n  // Both UTF control chars, and leading numbers (with optional leading dash)\n  // (group 3) must be backslash escaped with a trailing space.  Funnily, the\n  // leading dash must not be escaped, but the number. :shrug:\n  if (hexEscape) {\n    return match.slice(0, -1) + '\\\\' + match.slice(-1).charCodeAt(0).toString(16) + ' '\n  }\n  // Finally, the solitary dash and the catch-all chars require backslash\n  // escaping.\n  return '\\\\' + match;\n}\n\n/**\n * https://drafts.csswg.org/cssom/#serialize-an-identifier\n * @param {string} value\n * @return {string}\n */\nexport function cssEscape(value) {\n  return String(value).replace(regex, escaper);\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhZHMvX2E0YS1jb25maWcuanMiLCJhZHMvX2NvbmZpZy5qcyIsImFkcy9nb29nbGUvYTRhL2V4cGVyaW1lbnQtdXRpbHMuanMiLCJhZHMvZ29vZ2xlL2E0YS9saW5lLWRlbGltaXRlZC1yZXNwb25zZS1oYW5kbGVyLmpzIiwiYWRzL2dvb2dsZS9hNGEvdHJhZmZpYy1leHBlcmltZW50cy5qcyIsImFkcy9nb29nbGUvYTRhL3VybC1idWlsZGVyLmpzIiwiYWRzL2dvb2dsZS9hNGEvdXRpbHMuanMiLCJhZHMvZ29vZ2xlL3V0aWxzLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9hNGEtdmFyaWFibGUtc291cmNlLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9hbXAtYTRhLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9jYWxsb3V0LXZlbmRvcnMuanMiLCJleHRlbnNpb25zL2FtcC1hNGEvMC4xL3JlYWwtdGltZS1jb25maWctbWFuYWdlci5qcyIsImV4dGVuc2lvbnMvYW1wLWE0YS8wLjEvcmVmcmVzaC1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXItd3JhcHBlci5qcyIsImV4dGVuc2lvbnMvYW1wLWE0YS8wLjEvcmVmcmVzaC1tYW5hZ2VyLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9zaWduYXR1cmUtdmVyaWZpZXIuanMiLCJleHRlbnNpb25zL2FtcC1hZC1uZXR3b3JrLWFkc2Vuc2UtaW1wbC8wLjEvYWRzZW5zZS1hNGEtY29uZmlnLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYWQtbmV0d29yay1jbG91ZGZsYXJlLWltcGwvMC4xL2Nsb3VkZmxhcmUtYTRhLWNvbmZpZy5qcyIsImV4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC8wLjEvYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5qcyIsImV4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC8wLjEvc2FmZWZyYW1lLWhvc3QuanMiLCJleHRlbnNpb25zL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwvMC4xL3NyYS11dGlscy5qcyIsImV4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstZ21vc3NwLWltcGwvMC4xL2dtb3NzcC1hNGEtY29uZmlnLmpzIiwiZXh0ZW5zaW9ucy9hbXAtYWQtbmV0d29yay10cmlwbGVsaWZ0LWltcGwvMC4xL3RyaXBsZWxpZnQtYTRhLWNvbmZpZy5qcyIsImV4dGVuc2lvbnMvYW1wLWFkLzAuMS9jb25jdXJyZW50LWxvYWQuanMiLCJub2RlX21vZHVsZXMvZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudC9idWlsZC9kb2N1bWVudC1yZWdpc3Rlci1lbGVtZW50LnBhdGNoZWQuanMiLCJub2RlX21vZHVsZXMvcHJvbWlzZS1wanMvcHJvbWlzZS5qcyIsInNyYy8zcC1mcmFtZS1tZXNzYWdpbmcuanMiLCJzcmMvM3AtZnJhbWUuanMiLCJzcmMvYWQtY2lkLmpzIiwic3JjL2FkLWhlbHBlci5qcyIsInNyYy9hbXAtZXZlbnRzLmpzIiwic3JjL2FuYWx5dGljcy5qcyIsInNyYy9jb21tb24tc2lnbmFscy5qcyIsInNyYy9jb25maWcuanMiLCJzcmMvY29uc2VudC1zdGF0ZS5qcyIsInNyYy9jb25zZW50LmpzIiwic3JjL2Nvb2tpZXMuanMiLCJzcmMvZG9jdW1lbnQtcmVhZHkuanMiLCJzcmMvZG9tLmpzIiwic3JjL2VsZW1lbnQtc2VydmljZS5qcyIsInNyYy9lcnJvci5qcyIsInNyYy9ldmVudC1oZWxwZXItbGlzdGVuLmpzIiwic3JjL2V2ZW50LWhlbHBlci5qcyIsInNyYy9leHBlcmltZW50cy5qcyIsInNyYy9leHBvbmVudGlhbC1iYWNrb2ZmLmpzIiwic3JjL2V4dGVuc2lvbi1hbmFseXRpY3MuanMiLCJzcmMvZnJpZW5kbHktaWZyYW1lLWVtYmVkLmpzIiwic3JjL2lmcmFtZS1hdHRyaWJ1dGVzLmpzIiwic3JjL2lmcmFtZS1oZWxwZXIuanMiLCJzcmMvaW1wcmVzc2lvbi5qcyIsInNyYy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXItcG9seWZpbGwuanMiLCJzcmMvanNvbi5qcyIsInNyYy9sYXlvdXQtcmVjdC5qcyIsInNyYy9sYXlvdXQuanMiLCJzcmMvbG9nLmpzIiwic3JjL21vZGUtb2JqZWN0LmpzIiwic3JjL21vZGUuanMiLCJzcmMvb2JzZXJ2YWJsZS5qcyIsInNyYy9wb2x5ZmlsbHMuanMiLCJzcmMvcG9seWZpbGxzL2FycmF5LWluY2x1ZGVzLmpzIiwic3JjL3BvbHlmaWxscy9jdXN0b20tZWxlbWVudHMuanMiLCJzcmMvcG9seWZpbGxzL2RvY3VtZW50LWNvbnRhaW5zLmpzIiwic3JjL3BvbHlmaWxscy9kb210b2tlbmxpc3QtdG9nZ2xlLmpzIiwic3JjL3BvbHlmaWxscy9tYXRoLXNpZ24uanMiLCJzcmMvcG9seWZpbGxzL29iamVjdC1hc3NpZ24uanMiLCJzcmMvcG9seWZpbGxzL3Byb21pc2UuanMiLCJzcmMvcmVuZGVyLWRlbGF5aW5nLXNlcnZpY2VzLmpzIiwic3JjL3NlcnZpY2UuanMiLCJzcmMvc2VydmljZS9uYXZpZ2F0aW9uLmpzIiwic3JjL3NlcnZpY2UvdXJsLWV4cGFuZGVyL2V4cGFuZGVyLmpzIiwic3JjL3NlcnZpY2UvdXJsLXJlcGxhY2VtZW50cy1pbXBsLmpzIiwic3JjL3NlcnZpY2UvdmFyaWFibGUtc291cmNlLmpzIiwic3JjL3NlcnZpY2VzLmpzIiwic3JjL3N0YXRpYy10ZW1wbGF0ZS5qcyIsInNyYy9zdHJpbmcuanMiLCJzcmMvc3R5bGUtaW5zdGFsbGVyLmpzIiwic3JjL3N0eWxlLmpzIiwic3JjL3R5cGVzLmpzIiwic3JjL3VybC1wYXJzZS1xdWVyeS1zdHJpbmcuanMiLCJzcmMvdXJsLXRyeS1kZWNvZGUtdXJpLWNvbXBvbmVudC5qcyIsInNyYy91cmwuanMiLCJzcmMvdXRpbHMvYXJyYXkuanMiLCJzcmMvdXRpbHMvYmFzZTY0LmpzIiwic3JjL3V0aWxzL2J5dGVzLmpzIiwic3JjL3V0aWxzL2RvbS1maW5nZXJwcmludC5qcyIsInNyYy91dGlscy9scnUtY2FjaGUuanMiLCJzcmMvdXRpbHMvb2JqZWN0LmpzIiwic3JjL3V0aWxzL3Byb21pc2UuanMiLCJzcmMvdXRpbHMvcmF0ZS1saW1pdC5qcyIsInNyYy91dGlscy9zaWduYWxzLmpzIiwic3JjL3dpbmRvdy1pbnRlcmZhY2UuanMiLCJ0aGlyZF9wYXJ0eS9jc3MtZXNjYXBlL2Nzcy1lc2NhcGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O1FDb0RnQixjLEdBQUEsYzs7QUFwQ2hCOztBQUdBOztBQUlBOztBQUlBOztBQUNBOztBQUtBOzs7Ozs7Ozs7Ozs7O0FBYUEsSUFBSSxvQkFBSjs7QUFFQTs7OztBQWhEQTs7Ozs7Ozs7Ozs7Ozs7OztBQW9ETyxTQUFTLGNBQVQsR0FBMEI7QUFDL0IsTUFBSSxDQUFDLFdBQUwsRUFBa0I7QUFDaEIsa0JBQWMsaUJBQUk7QUFDaEIsc0RBRGdCO0FBRWhCLGdCQUFVO0FBQUEsZUFBTSxJQUFOO0FBQUEsT0FGTTtBQUdoQixxQkFBZTtBQUFBLGVBQU0sSUFBTjtBQUFBLE9BSEM7QUFJaEIsK0RBSmdCO0FBS2hCLCtEQUxnQjtBQU1oQixtREFOZ0I7QUFPaEIsY0FBUTtBQUFBLGVBQU0sSUFBTjtBQUFBO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVpnQixLQUFKLENBQWQ7QUFjRDs7QUFFRCxTQUFPLFdBQVA7QUFDRDs7QUFFRDs7OztBQUlPLElBQU0sZ0RBQW9CO0FBQy9CLFlBQVUseURBRHFCO0FBRS9CLGdCQUFjLDZEQUZpQjtBQUcvQixnQkFBYyx5REFIaUI7QUFJL0Isb0JBQWtCO0FBSmEsQ0FBMUI7Ozs7OztBQzdFUDs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQTs7Ozs7Ozs7Ozs7O0FBWUEsSUFBSSwyQkFBSjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ08sSUFBTSw4QkFBVztBQUN0QixZQUFVO0FBQ1IsNEJBQXdCLElBRGhCO0FBRVIs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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbjZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QWhCLElBQXFCLElBQXJCLEdBQTRCLE1BQU0sS0FBTixDQUFZLENBQUMsQ0FBYixFQUFnQixVQUFoQixDQUEyQixDQUEzQixFQUE4QixRQUE5QixDQUF1QyxFQUF2QyxDQUE1QixHQUF5RSxHQUFoRjtBQUNEO0FBQ0Q7QUFDQTtBQUNBLFNBQU8sT0FBTyxLQUFkO0FBQ0Q7O0FBRUQ7Ozs7O0FBS08sU0FBUyxTQUFULENBQW1CLEtBQW5CLEVBQTBCO0FBQy9CLFNBQU8sT0FBTyxLQUFQLEVBQWMsT0FBZCxDQUFzQixLQUF0QixFQUE2QixPQUE3QixDQUFQO0FBQ0QiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIGFkc2Vuc2VJc0E0QUVuYWJsZWQsXG59IGZyb20gJy4uL2V4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstYWRzZW5zZS1pbXBsLzAuMS9hZHNlbnNlLWE0YS1jb25maWcnO1xuaW1wb3J0IHtcbiAgY2xvdWRmbGFyZUlzQTRBRW5hYmxlZCxcbn0gZnJvbVxuICAnLi4vZXh0ZW5zaW9ucy9hbXAtYWQtbmV0d29yay1jbG91ZGZsYXJlLWltcGwvMC4xL2Nsb3VkZmxhcmUtYTRhLWNvbmZpZyc7XG5pbXBvcnQge1xuICBnbW9zc3BJc0E0QUVuYWJsZWQsXG59IGZyb21cbiAgJy4uL2V4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstZ21vc3NwLWltcGwvMC4xL2dtb3NzcC1hNGEtY29uZmlnJztcbmltcG9ydCB7bWFwfSBmcm9tICcuLi9zcmMvdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7XG4gIHRyaXBsZWxpZnRJc0E0QUVuYWJsZWQsXG59IGZyb21cbiAgJy4uL2V4dGVuc2lvbnMvYW1wLWFkLW5ldHdvcmstdHJpcGxlbGlmdC1pbXBsLzAuMS90cmlwbGVsaWZ0LWE0YS1jb25maWcnO1xuXG4vKipcbiAqIFJlZ2lzdHJ5IGZvciBBNEEgKEFNUCBBZHMgZm9yIEFNUEhUTUwgcGFnZXMpIFwiaXMgc3VwcG9ydGVkXCIgcHJlZGljYXRlcy5cbiAqIElmIGFuIGFkIG5ldHdvcmssIHtAY29kZSAke05FVFdPUkt9fSwgaXMgcmVnaXN0ZXJlZCBpbiB0aGlzIG9iamVjdCwgdGhlbiB0aGVcbiAqIHtAY29kZSA8YW1wLWFkIHR5cGU9XCIke05FVFdPUkt9XCI+fSBpbXBsZW1lbnRhdGlvbiB3aWxsIGxvb2sgdXAgaXRzIHByZWRpY2F0ZVxuICogaGVyZS4gSWYgdGhlcmUgaXMgYSBwcmVkaWNhdGUgYW5kIGl0IGFuZCByZXR1cm5zIHtAY29kZSB0cnVlfSwgdGhlblxuICoge0Bjb2RlIGFtcC1hZH0gd2lsbCBhdHRlbXB0IHRvIHJlbmRlciB0aGUgYWQgdmlhIHRoZSBBNEEgcGF0aHdheSAoZmV0Y2hcbiAqIGFkIGNyZWF0aXZlIHZpYSBlYXJseSBYSFIgQ09SUyByZXF1ZXN0OyB2ZXJpZnkgdGhhdCBpdCBpcyB2YWxpZGF0ZWQgQU1QO1xuICogYW5kIHRoZW4gcmVuZGVyIGRpcmVjdGx5IGluIHRoZSBob3N0IHBhZ2UgYnkgc3BsaWNpbmcgaW50byB0aGUgaG9zdCBET00pLlxuICogT3RoZXJ3aXNlLCBpdCB3aWxsIGF0dGVtcHQgdG8gcmVuZGVyIHRoZSBhZCB2aWEgdGhlIGV4aXN0aW5nIFwiM3AgaWZyYW1lXCJcbiAqIHBhdGh3YXkgKGRlbGF5IGxvYWQgaW50byBhIGNyb3NzLWRvbWFpbiBpZnJhbWUpLlxuICpcbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgZnVuY3Rpb24oIVdpbmRvdywgIUVsZW1lbnQpOiBib29sZWFuPn1cbiAqL1xubGV0IGE0YVJlZ2lzdHJ5O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGE0YSByZWdpc3RyeSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEE0QVJlZ2lzdHJ5KCkge1xuICBpZiAoIWE0YVJlZ2lzdHJ5KSB7XG4gICAgYTRhUmVnaXN0cnkgPSBtYXAoe1xuICAgICAgJ2Fkc2Vuc2UnOiBhZHNlbnNlSXNBNEFFbmFibGVkLFxuICAgICAgJ2FkemVyayc6ICgpID0+IHRydWUsXG4gICAgICAnZG91YmxlY2xpY2snOiAoKSA9PiB0cnVlLFxuICAgICAgJ3RyaXBsZWxpZnQnOiB0cmlwbGVsaWZ0SXNBNEFFbmFibGVkLFxuICAgICAgJ2Nsb3VkZmxhcmUnOiBjbG91ZGZsYXJlSXNBNEFFbmFibGVkLFxuICAgICAgJ2dtb3NzcCc6IGdtb3NzcElzQTRBRW5hYmxlZCxcbiAgICAgICdmYWtlJzogKCkgPT4gdHJ1ZSxcbiAgICAgIC8vIFRPRE86IEFkZCBuZXcgYWQgbmV0d29yayBpbXBsZW1lbnRhdGlvbiBcImlzIGVuYWJsZWRcIiBmdW5jdGlvbnMgaGVyZS5cbiAgICAgIC8vIE5vdGU6IGlmIHlvdSBhZGQgYSBmdW5jdGlvbiBoZXJlIHRoYXQgcmVxdWlyZXMgYSBuZXcgXCJpbXBvcnRcIiwgYWJvdmUsXG4gICAgICAvLyB5b3UnbGwgcHJvYmFibHkgYWxzbyBuZWVkIHRvIGFkZCBhIHdoaXRlbGlzdCBleGNlcHRpb24gdG9cbiAgICAgIC8vIGJ1aWxkLXN5c3RlbS9kZXAtY2hlY2stY29uZmlnLmpzIGluIHRoZSBcImZpbGVzTWF0Y2hpbmc6ICdhZHMvKiovKi5qcydcbiAgICAgIC8vIHJ1bGUuXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYTRhUmVnaXN0cnk7XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IG1hcHBpbmcgc2lnbmluZyBzZXJ2ZXIgbmFtZXMgdG8gdGhlaXIgY29ycmVzcG9uZGluZyBVUkxzLlxuICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3Qgc2lnbmluZ1NlcnZlclVSTHMgPSB7XG4gICdnb29nbGUnOiAnaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvYW1wLWFkLXZlcmlmeWluZy1rZXlzZXQuanNvbicsXG4gICdnb29nbGUtZGV2JzogJ2h0dHBzOi8vY2RuLmFtcHByb2plY3Qub3JnL2FtcC1hZC12ZXJpZnlpbmcta2V5c2V0LWRldi5qc29uJyxcbiAgJ2Nsb3VkZmxhcmUnOiAnaHR0cHM6Ly9hbXAuY2xvdWRmbGFyZS5jb20vYW1wLWFkLXZlcmlmeWluZy1rZXlzZXQuanNvbicsXG4gICdjbG91ZGZsYXJlLWRldic6ICdodHRwczovL2FtcC5jbG91ZGZsYXJlLmNvbS9hbXAtYWQtdmVyaWZ5aW5nLWtleXNldC1kZXYuanNvbicsXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICAgcHJlZmV0Y2g6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgcHJlY29ubmVjdDogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICByZW5kZXJTdGFydEltcGxlbWVudGVkOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogICBjbGllbnRJZFNjb3BlOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIGNsaWVudElkQ29va2llTmFtZTogKHN0cmluZ3x1bmRlZmluZWQpLFxuICogICBjb25zZW50SGFuZGxpbmdPdmVycmlkZTogKGJvb2xlYW58dW5kZWZpbmVkKSxcbiAqICAgcmVtb3RlSFRNTERpc2FibGVkOiAoYm9vbGVhbnx1bmRlZmluZWQpLFxuICogICBmdWxsV2lkdGhIZWlnaHRSYXRpbzogKG51bWJlcnx1bmRlZmluZWQpLFxuICogfX1cbiAqL1xubGV0IEFkTmV0d29ya0NvbmZpZ0RlZjtcblxuLyoqXG4gKiBUaGUgY29uZmlnIG9mIGVhY2ggYWQgbmV0d29yay5cbiAqIFBsZWFzZSBrZWVwIHRoZSBsaXN0IGFscGhhYmV0aWMgb3JkZXIuXG4gKlxuICogeW91ck5ldHdvcmtOYW1lOiB7ICAvLyBUaGlzIGlzIHRoZSBcInR5cGVcIiBhdHRyaWJ1dGUgb2YgPGFtcC1hZD5cbiAqXG4gKiAgIC8vIExpc3Qgb2YgVVJMcyBmb3IgcHJlZmV0Y2hcbiAqICAgcHJlZmV0Y2g6IHN0cmluZ3xhcnJheVxuICpcbiAqICAgLy8gTGlzdCBvZiBob3N0cyBmb3IgcHJlY29ubmVjdFxuICogICBwcmVjb25uZWN0OiBzdHJpbmd8YXJyYXlcbiAqXG4gKiAgIC8vIFRoZSBzY29wZSB1c2VkIHRvIHByb3ZpZGUgQ0lEcyB0byBhZHNcbiAqICAgY2xpZW50SWRTY29wZTogc3RyaW5nXG4gKlxuICogICAvLyBUaGUgY29va2llIG5hbWUgdG8gc3RvcmUgdGhlIENJRC4gSW4gYWJzZW5jZSwgYGNsaWVudElkU2NvcGVgIGlzIHVzZWQuXG4gKiAgIGNsaWVudElkQ29va2llTmFtZTogc3RyaW5nXG4gKlxuICogICAvLyBJZiB0aGUgYWQgbmV0d29yayBpcyB3aWxsaW5nIHRvIG92ZXJyaWRlIHRoZSBjb25zZW50IGhhbmRsaW5nLCB3aGljaFxuICogICAvLyBieSBkZWZhdWx0IGlzIGJsb2NraW5nIGFkIGxvYWQgdW50aWwgdGhlIGNvbnNlbnQgaXMgYWNjZXB0ZWQuXG4gKiAgIGNvbnNlbnRIYW5kbGluZ092ZXJyaWRlOiBib29sZWFuXG4gKlxuICogICAvLyBXaGV0aGVyIHJlbmRlci1zdGFydCBBUEkgaGFzIGJlZW4gaW1wbGVtZW50ZWRcbiAqICAgLy8gV2UgaGlnaGx5IHJlY29tbWVuZCBhbGwgbmV0d29ya3MgdG8gaW1wbGVtZW50IHRoZSBBUEksXG4gKiAgIC8vIHNlZSBkZXRhaWxzIGluIHRoZSBSRUFETUUubWRcbiAqICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogYm9vbGVhblxuICpcbiAqICAgLy8gVGhlIHdpZHRoIC8gaGVpZ2h0IHJhdGlvIGZvciBmdWxsIHdpZHRoIGFkIHVuaXRzLlxuICogICAvLyBJZiBhYnNlbnQsIGl0IG1lYW5zIHRoZSBuZXR3b3JrIGRvZXMgbm90IHN1cHBvcnQgZnVsbCB3aWR0aCBhZCB1bml0cy5cbiAqICAgLy8gRXhhbXBsZSB2YWx1ZTogMS4yXG4gKiAgIGZ1bGxXaWR0aEhlaWdodFJhdGlvOiBudW1iZXJcbiAqIH1cbiAqXG4gKiBAY29uc3QgeyFPYmplY3Q8c3RyaW5nLCAhQWROZXR3b3JrQ29uZmlnRGVmPn19XG4gKi9cbmV4cG9ydCBjb25zdCBhZENvbmZpZyA9IHtcbiAgJ19waW5nXyc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICAgIGNsaWVudElkU2NvcGU6ICdfUElOR18nLFxuICAgIGNvbnNlbnRIYW5kbGluZ092ZXJyaWRlOiB0cnVlLFxuICB9LFxuXG4gICcyNHNtaSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vanNuLjI0c21pLm5ldC9zbWkuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2RhdGEuMjRzbWkubmV0JyxcbiAgfSxcblxuICAnYTgnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3N0YXRpY3MuYTgubmV0L2FtcC9hZC5qcycsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYTknOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fzc29jLmpzJyxcbiAgfSxcblxuICAnYWNjZXNzdHJhZGUnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2guYWNjZXNzdHJhZGUubmV0L2pzL2FtcC9hbXAuanMnLFxuICB9LFxuXG4gICdhZGFnaW8nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2pzLXNzbC5uZW9kYXRhZ3JvdXAuY29tL2FkYWdpb19hbXAuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2FkLWF3cy1pdC5uZW9kYXRhZ3JvdXAuY29tJyxcbiAgICAgICdodHRwczovL3RyYWNrZXIubmVvZGF0YWdyb3VwLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZGJsYWRlJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93ZWIuYWRibGFkZS5jb20vanMvYWRzL2FzeW5jL3Nob3cuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3N0YXRpY2QuY2RuLmFkYmxhZGUuY29tJyxcbiAgICAgICdodHRwczovL3N0YXRpYy5hZGJsYWRlLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZGJ1dGxlcic6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vc2VydmVkYnlhZGJ1dGxlci5jb20vYXBwLmpzJyxcbiAgfSxcblxuICAnYWRmb3JtJzoge30sXG5cbiAgJ2FkZm94Jzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly95YXN0YXRpYy5uZXQvcGNvZGUvYWRmb3gvbG9hZGVyLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZGdlbmVyYXRpb24nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2kuc29jZG0uY29tL3Nkay9qcy9hZGctc2NyaXB0LWxvYWRlci5qcycsXG4gIH0sXG5cbiAgJ2FkaGVzZSc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZGluY3ViZSc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZGl0aW9uJzoge30sXG5cbiAgJ2FkbWFuJzoge30sXG5cbiAgJ2FkbWFubWVkaWEnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYWRtaXhlcic6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2ludi1uZXRzLmFkbWl4ZXIubmV0JyxcbiAgICAgICdodHRwczovL2Nkbi5hZG1peGVyLm5ldCcsXG4gICAgXSxcbiAgfSxcblxuICAnYWRvY2Vhbic6IHt9LFxuXG4gICdhZHBpY2tlcic6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZHBsdWdnJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93d3cuYWRwbHVnZy5jb20vc2VydmUvanMvYWQuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2FkcmVhY3Rvcic6IHt9LFxuXG4gICdhZHNlbnNlJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9wYWdlYWQyLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9wYWdlYWQvanMvYWRzYnlnb29nbGUuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2dvb2dsZWFkcy5nLmRvdWJsZWNsaWNrLm5ldCcsXG4gICAgY2xpZW50SWRTY29wZTogJ0FNUF9FQ0lEX0dPT0dMRScsXG4gICAgY2xpZW50SWRDb29raWVOYW1lOiAnX2dhJyxcbiAgICByZW1vdGVIVE1MRGlzYWJsZWQ6IHRydWUsXG4gICAgbWFzdGVyRnJhbWVBY2Nlc3NpYmxlVHlwZTogJ2dvb2dsZV9uZXR3b3JrJyxcbiAgICBmdWxsV2lkdGhIZWlnaHRSYXRpbzogMS4yLFxuICAgIGNvbnNlbnRIYW5kbGluZ092ZXJyaWRlOiB0cnVlLFxuICB9LFxuXG4gICdhZHNuYXRpdmUnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3N0YXRpYy5hZHNuYXRpdmUuY29tL3N0YXRpYy9qcy9yZW5kZXIudjEuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2FwaS5hZHNuYXRpdmUuY29tJyxcbiAgfSxcblxuICAnYWRzcGVlZCc6IHtcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9nLmFkc3BlZWQubmV0JyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZHNwaXJpdCc6IHt9LFxuXG4gICdhZHN0aXInOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2pzLmFkLXN0aXIuY29tL2pzL2Fkc3Rpcl9hc3luYy5qcycsXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vYWQuYWQtc3Rpci5jb20nLFxuICB9LFxuXG4gICdhZHRlY2gnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3MuYW9sY2RuLmNvbS9vcy9hZHMvYWRzV3JhcHBlcjMuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL21hZHMuYXQuYXR3b2xhLmNvbScsXG4gICAgICAnaHR0cHM6Ly9ha2EtY2RuLmFkdGVjaHVzLmNvbScsXG4gICAgXSxcbiAgfSxcblxuICAnYWR0aHJpdmUnOiB7XG4gICAgcHJlZmV0Y2g6IFtcbiAgICAgICdodHRwczovL3d3dy5nb29nbGV0YWdzZXJ2aWNlcy5jb20vdGFnL2pzL2dwdC5qcycsXG4gICAgXSxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9wYXJ0bmVyLmdvb2dsZWFkc2VydmljZXMuY29tJyxcbiAgICAgICdodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldCcsXG4gICAgICAnaHR0cHM6Ly90cGMuZ29vZ2xlc3luZGljYXRpb24uY29tJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2FkdW5pdHknOiB7XG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vY29udGVudC5hZHVuaXR5LmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZHVwdGVjaCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vcy5kLmFkdXAtdGVjaC5jb20vanNhcGknLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2QuYWR1cC10ZWNoLmNvbScsXG4gICAgICAnaHR0cHM6Ly9tLmFkdXAtdGVjaC5jb20nLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYWR2ZW50aXZlJzoge1xuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2Fkcy5hZHZlbnRpdmUuY29tJyxcbiAgICAgICdodHRwczovL2FtcC5hZHZlbnRpdmVkZXYuY29tJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2FkdmVybGluZSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYWRzLmFkdmVybGluZS5jb20vcmljaG1lZGlhcy9hbXAuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2FkbmV4dC5mcicsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdhZHZlcnRpY3VtJzoge30sXG5cbiAgJ2FkdmVydHNlcnZlJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2FkemVyayc6IHt9LFxuXG4gICdhZmZpbGlhdGViJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly90cmFjay5hZmZpbGlhdGUtYi5jb20vYW1wL2EuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2FqYSc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jZG4uYXMuYW1hbmFkLmFkdGRwLmNvbS9zZGsvYXNvdC12Mi5qcycsXG4gIH0sXG5cbiAgJ2FwcHZhZG9yJzoge1xuICAgIHByZWZldGNoOiBbXG4gICAgICAnaHR0cHM6Ly9jZG4uYXB2ZHIuY29tL2pzL1Zhc3RBZFVuaXQubWluLmpzJyxcbiAgICAgICdodHRwczovL2Nkbi5hcHZkci5jb20vanMvVmlkZW9BZC5taW4uanMnLFxuICAgICAgJ2h0dHBzOi8vY2RuLmFwdmRyLmNvbS9qcy9WaWRlb0FkM1BBUy5taW4uanMnLFxuICAgICAgJ2h0dHBzOi8vY2RuLmFwdmRyLmNvbS9qcy9WaWRlb0FkQXV0b1BsYXkubWluLmpzJyxcbiAgICAgICdodHRwczovL2Nkbi5hcHZkci5jb20vanMvVmlkZW9BZE5hdGl2ZS5taW4uanMnLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYW1vYWQnOiB7XG4gICAgcHJlZmV0Y2g6IFtcbiAgICAgICdodHRwczovL2ouYW1vYWQuY29tL2pzL2EuanMnLFxuICAgICAgJ2h0dHBzOi8vai5hbW9hZC5jb20vanMvbi5qcycsXG4gICAgXSxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9kLmFtb2FkLmNvbScsXG4gICAgICAnaHR0cHM6Ly9pLmFtb2FkLmNvbScsXG4gICAgICAnaHR0cHM6Ly9tLmFtb2FkLmNvbScsXG4gICAgICAnaHR0cHM6Ly92LmFtb2FkLmNvbScsXG4gICAgXSxcbiAgfSxcblxuICAnYXBwbmV4dXMnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2FjZG4uYWRueHMuY29tL2FzdC9hc3QuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2liLmFkbnhzLmNvbScsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYXRvbXgnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3MuYXRvLm14L3AuanMnLFxuICB9LFxuXG4gICdiZW9waW5pb24nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3dpZGdldC5iZW9waW5pb24uY29tL3Nkay5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vdC5iZW9waW5pb24uY29tJyxcbiAgICAgICdodHRwczovL3MuYmVvcGluaW9uLmNvbScsXG4gICAgICAnaHR0cHM6Ly9kYXRhLmJlb3Bpbmlvbi5jb20nLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnYmlkdGVsbGVjdCc6IHt9LFxuXG4gICdicmFpbnknOiB7fSxcblxuICAnYnJpbmdodWInOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zdGF0aWMuYmgtY2RuLmNvbScsXG4gICAgICAnaHR0cHM6Ly9jb3JlLWFwaS5icmluZ2h1Yi5pbycsXG4gICAgXSxcbiAgfSxcblxuICAnYnJvYWRzdHJlZXRhZHMnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Nkbi5icm9hZHN0cmVldGFkcy5jb20vaW5pdC0yLm1pbi5qcycsXG4gIH0sXG5cbiAgJ2NhYWphaW5mZWVkJzoge1xuICAgIHByZWZldGNoOiBbXG4gICAgICAnaHR0cHM6Ly9jZG4uYW1hbmFkLmFkdGRwLmNvbS9zZGsvYWphYW1wLmpzJyxcbiAgICBdLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2FkLmFtYW5hZC5hZHRkcC5jb20nLFxuICAgIF0sXG4gIH0sXG5cbiAgJ2NhcGlycyc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdjYXByb2ZpdHgnOiB7XG4gICAgcHJlZmV0Y2g6IFtcbiAgICAgICdodHRwczovL2Nkbi5jYXByb2ZpdHguY29tL3BmeC5taW4uanMnLFxuICAgICAgJ2h0dHBzOi8vY2RuLmNhcHJvZml0eC5jb20vdGFncy9hbXAvcHJvZml0eF9hbXAuanMnLFxuICAgIF0sXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vYWQuY2Fwcm9maXR4LmFkdGRwLmNvbScsXG4gIH0sXG5cbiAgJ2NlZGF0byc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdjaGFyZ2VhZHMnOiB7fSxcblxuICAnY29sb21iaWEnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3N0YXRpYy5jbG1idGVjaC5jb20vYWQvY29tbW9ucy9qcy9jb2xvbWJpYS1hbXAuanMnLFxuICB9LFxuXG4gICdjb25uYXRpeCc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdjb250ZW50YWQnOiB7fSxcblxuXG4gICdjcml0ZW8nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3N0YXRpYy5jcml0ZW8ubmV0L2pzL2xkL3B1Ymxpc2hlcnRhZy5qcycsXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vY2FzLmNyaXRlby5jb20nLFxuICB9LFxuXG4gICdjc2EnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3d3dy5nb29nbGUuY29tL2Fkc2Vuc2Uvc2VhcmNoL2Fkcy5qcycsXG4gIH0sXG5cbiAgJ2RhYmxlJzoge1xuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3N0YXRpYy5kYWJsZS5pbycsXG4gICAgICAnaHR0cHM6Ly9hcGkuZGFibGUuaW8nLFxuICAgICAgJ2h0dHBzOi8vaW1hZ2VzLmRhYmxlLmlvJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2RpcmVjdGFkdmVydCc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdkaXN0cm9zY2FsZSc6IHtcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9jLmpzcmRuLmNvbScsXG4gICAgICAnaHR0cHM6Ly9zLmpzcmRuLmNvbScsXG4gICAgICAnaHR0cHM6Ly9pLmpzcmRuLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdkb3RhbmRhZHMnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2FtcC5hZC5kb3RhbmRhZC5jb20vZG90YW5kYWRzQW1wLmpzJyxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9iYWwuYWQuZG90YW5kYWQuY29tJyxcbiAgfSxcblxuICAnZWFkdic6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICAgIGNsaWVudElkU2NvcGU6ICdBTVBfRUNJRF9FQURWJyxcbiAgICBwcmVmZXRjaDogW1xuICAgICAgJ2h0dHBzOi8vd3d3LmVhZHYuaXQvdHJhY2svZXNyLm1pbi5qcycsXG4gICAgICAnaHR0cHM6Ly93d3cuZWFkdi5pdC90cmFjay9lYWQubWluLmpzJyxcbiAgICBdLFxuICB9LFxuXG4gICdlYXMnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2FtcC5lbWVkaWF0ZS5ldS9hbXAudjAuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2VuZ2FnZXlhJzoge30sXG5cbiAgJ2VwZWV4Jzoge30sXG5cbiAgJ2VwbGFubmluZyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vdXMuaW1nLmUtcGxhbm5pbmcubmV0L2xheWVycy9lcGwtYW1wLmpzJyxcbiAgfSxcblxuICAnZXpvaWMnOiB7XG4gICAgcHJlZmV0Y2g6IFtcbiAgICAgICdodHRwczovL3d3dy5nb29nbGV0YWdzZXJ2aWNlcy5jb20vdGFnL2pzL2dwdC5qcycsXG4gICAgICAnaHR0cHM6Ly9nLmV6b2ljLm5ldC9lem9pYy9hbXBhZC5qcycsXG4gICAgXSxcbiAgICBjbGllbnRJZFNjb3BlOiAnQU1QX0VDSURfRVpPSUMnLFxuICAgIGNvbnNlbnRIYW5kbGluZ092ZXJyaWRlOiB0cnVlLFxuICB9LFxuXG4gICdmMWUnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2ltZy5hay5pbXBhY3QtYWQuanAvdXRpbC9mMWVfYW1wLm1pbi5qcycsXG4gIH0sXG5cbiAgJ2YxaCc6IHtcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9pbWcuYWsuaW1wYWN0LWFkLmpwJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdmYWtlJzoge30sXG5cbiAgJ2ZlbG1hdCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vdC5mZWxtYXQubmV0L2pzL2ZtYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdmbGl0ZSc6IHt9LFxuXG4gICdmbHVjdCc6IHtcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9jZG4tZmx1Y3Quc2guYWRpbmdvLmpwJyxcbiAgICAgICdodHRwczovL3Muc2guYWRpbmdvLmpwJyxcbiAgICAgICdodHRwczovL2kuYWRpbmdvLmpwJyxcbiAgICBdLFxuICB9LFxuXG4gICdmdXNpb24nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Fzc2V0cy5hZHRvbWFmdXNpb24ubmV0L2Z1c2lvbi9sYXRlc3QvZnVzaW9uLWFtcC5taW4uanMnLFxuICB9LFxuXG4gICdnZW5pZWVzc3AnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2pzLmdzc3BjbG4uanAvbC9hbXAuanMnLFxuICB9LFxuXG4gICdnaXJhZmYnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnZ21vc3NwJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jZG4uZ21vc3NwLXNwLmpwL2Fkcy9hbXAuanMnLFxuICB9LFxuXG4gICdndW1ndW0nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2cyLmd1bWd1bS5jb20vamF2YXNjcmlwdHMvYWQuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2hvbGRlcic6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vaS5ob2xkZXIuY29tLnVhL2pzMi9ob2xkZXIvYWpheC9hbXB2MS5qcycsXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vaC5ob2xkZXIuY29tLnVhJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdpYmlsbGJvYXJkJzoge30sXG5cbiAgJ2ltZWRpYSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vaS5pbWVkaWEuY3ovanMvaW0zLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdpbW9iaWxlJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9zcGFtcC5pLW1vYmlsZS5jby5qcC9zY3JpcHQvYW1wLmpzJyxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9zcGFkLmktbW9iaWxlLmNvLmpwJyxcbiAgfSxcbiAgJ2ltb25vbXknOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcbiAgJ2ltcHJvdmVkaWdpdGFsJzoge30sXG5cbiAgJ2luZHVzdHJ5YnJhaW5zJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93ZWIuaW5kdXN0cnlicmFpbnMuY29tL2pzL2Fkcy9hc3luYy9zaG93LmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zdGF0aWNkLmNkbi5pbmR1c3RyeWJyYWlucy5jb20nLFxuICAgICAgJ2h0dHBzOi8vc3RhdGljLmluZHVzdHJ5YnJhaW5zLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdpbm1vYmknOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2NmLmNkbi5pbm1vYmkuY29tL2FkL2lubW9iaS5zZWN1cmUuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2lubml0eSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vY2RuLmlubml0eS5uZXQvYWRtYW5hZ2VyLmpzJyxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9hcy5pbm5pdHkuY29tJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdpeCc6IHtcbiAgICBwcmVmZXRjaDogW1xuICAgICAgJ2h0dHBzOi8vanMtc2VjLmluZGV4d3cuY29tL2FwbC9hbXAuanMnLFxuICAgIF0sXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vYXMtc2VjLmNhc2FsZW1lZGlhLmNvbScsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAna2FyZ28nOiB7fSxcblxuICAna2lvc2tlZCc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdraXhlcic6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vY2RuLmtpeGVyLmNvbS9hZC9sb2FkLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdrdWFkaW8nOiB7fSxcblxuICAnbGlnYXR1cyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vc3NsLmxpZ2F0dXMuY29tL3JlbmRlci9saWdyZW5kLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdsb2NrZXJkb21lJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jZG4yLmxvY2tlcmRvbWVjZG4uY29tL19qcy9hbXAuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ2xva2EnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2xva2EtY2RuLmFrYW1haXplZC5uZXQvc2NlbmUvYW1wLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zY2VuZS1mcm9udC5sb2thcGxhdGZvcm0uY29tJyxcbiAgICAgICdodHRwczovL2xva2EtbWF0ZXJpYWxzLmFrYW1haXplZC5uZXQnLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnbWFkcyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vZXUyLm1hZHNvbmUuY29tL2pzL3RhZ3MuanMnLFxuICB9LFxuXG4gICdtYW50aXMtZGlzcGxheSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYXNzZXRzLm1hbnRpc2FkbmV0d29yay5jb20vbWFudG9kZWEubWluLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9tYW50b2RlYS5tYW50aXNhZG5ldHdvcmsuY29tJyxcbiAgICAgICdodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbScsXG4gICAgICAnaHR0cHM6Ly9yZXNpemUubWFudGlzYWRuZXR3b3JrLmNvbScsXG4gICAgXSxcbiAgfSxcblxuICAnbWFudGlzLXJlY29tbWVuZCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYXNzZXRzLm1hbnRpc2FkbmV0d29yay5jb20vcmVjb21tZW5kLm1pbi5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vbWFudG9kZWEubWFudGlzYWRuZXR3b3JrLmNvbScsXG4gICAgICAnaHR0cHM6Ly9yZXNpemUubWFudGlzYWRuZXR3b3JrLmNvbScsXG4gICAgXSxcbiAgfSxcblxuICAnbWVkaWFpbXBhY3QnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2VjLW5zLnNhc2Nkbi5jb20vZGlmZi8yNTEvcGFnZXMvYW1wX2RlZmF1bHQuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3d3MjUxLnNtYXJ0YWRzZXJ2ZXIuY29tJyxcbiAgICAgICdodHRwczovL3N0YXRpYy5zYXNjZG4uY29tLycsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdtZWRpYW5ldCc6IHtcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9jb250ZXh0dWFsLm1lZGlhLm5ldCcsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnbWVkaWF2aW5lJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9hbXAubWVkaWF2aW5lLmNvbS93cmFwcGVyLm1pbi5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vcGFydG5lci5nb29nbGVhZHNlcnZpY2VzLmNvbScsXG4gICAgICAnaHR0cHM6Ly9zZWN1cmVwdWJhZHMuZy5kb3VibGVjbGljay5uZXQnLFxuICAgICAgJ2h0dHBzOi8vdHBjLmdvb2dsZXN5bmRpY2F0aW9uLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICAgIGNvbnNlbnRIYW5kbGluZ092ZXJyaWRlOiB0cnVlLFxuICB9LFxuXG4gICdtZWR5YW5ldCc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdtZWcnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnbWljcm9hZCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vai5taWNyb2FkLm5ldC9qcy9jYW1wLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zLXJ0Yi5zZW5kLm1pY3JvYWQuanAnLFxuICAgICAgJ2h0dHBzOi8vcy1ydGIuc2VuZC5taWNyb2FkaW5jLmNvbScsXG4gICAgICAnaHR0cHM6Ly9jYWNoZS5zZW5kLm1pY3JvYWQuanAnLFxuICAgICAgJ2h0dHBzOi8vY2FjaGUuc2VuZC5taWNyb2FkaW5jLmNvbScsXG4gICAgICAnaHR0cHM6Ly9kZWIuc2VuZC5taWNyb2FkLmpwJyxcbiAgICBdLFxuICB9LFxuXG4gICdtaXhpbWVkaWEnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnbWl4cG8nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Nkbi5taXhwby5jb20vanMvbG9hZGVyLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9wbGF5ZXIxLm1peHBvLmNvbScsXG4gICAgICAnaHR0cHM6Ly9wbGF5ZXIyLm1peHBvLmNvbScsXG4gICAgXSxcbiAgfSxcblxuICAnbW9uZXRpemVyMTAxJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ215dGFyZ2V0Jzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9hZC5tYWlsLnJ1L3N0YXRpYy9hZHMtYXN5bmMuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ215d2lkZ2V0Jzoge1xuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2xpa2Vtb3JlLWZlLmdvLm1haWwucnUnLFxuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9saWtlbW9yZS1nby5pbWdzbWFpbC5ydS93aWRnZXRfYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICduYXRpdm8nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3MubnR2LmlvL3NlcnZlL2xvYWQuanMnLFxuICB9LFxuXG4gICduYXZlZ2cnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnbmVuZCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vanMxLm5lbmQubmV0L2pzL2FtcC5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vb3V0cHV0Lm5lbmQubmV0JyxcbiAgICAgICdodHRwczovL2ltZzEubmVuZC5uZXQnLFxuICAgIF0sXG4gIH0sXG5cbiAgJ25ldGxldGl4Jzoge1xuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2NhbGwubmV0emF0aGxldGVuLW1lZGlhLmRlJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ25vZGR1cyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vbm9kZHVzLmNvbS9hbXBfbG9hZGVyLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdub2t0YSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vc3RhdGljLnZpcmd1bC5jb20vdGhlbWUvbW9ja3Vwcy9ub2t0YWFtcC9hbXBqcy5qcycsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnb3BlbmFkc3RyZWFtJzoge30sXG5cbiAgJ29wZW54Jzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnc2VydmljZXMuY29tL3RhZy9qcy9ncHQuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3BhcnRuZXIuZ29vZ2xlYWRzZXJ2aWNlcy5jb20nLFxuICAgICAgJ2h0dHBzOi8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0JyxcbiAgICAgICdodHRwczovL3RwYy5nb29nbGVzeW5kaWNhdGlvbi5jb20nLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnb3V0YnJhaW4nOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vd2lkZ2V0cy5vdXRicmFpbi5jb20vd2lkZ2V0QU1QL291dGJyYWluQU1QLm1pbi5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vb2RiLm91dGJyYWluLmNvbScsXG4gICAgXSxcbiAgICBjb25zZW50SGFuZGxpbmdPdmVycmlkZTogdHJ1ZSxcbiAgfSxcblxuICAncGl4ZWxzJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jZG4uYWRzZmFjdG9yLm5ldC9hbXAvcGl4ZWxzLWFtcC5taW4uanMnLFxuICAgIGNsaWVudElkQ29va2llTmFtZTogJ19fQUYnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3BsaXN0YSc6IHt9LFxuXG4gICdwb2x5bW9ycGhpY2Fkcyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vd3d3LnBvbHltb3JwaGljYWRzLmpwL2pzL2FtcC5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vaW1nLnBvbHltb3JwaGljYWRzLmpwJyxcbiAgICAgICdodHRwczovL2FkLnBvbHltb3JwaGljYWRzLmpwJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3BvcGluJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3Bvc3RxdWFyZSc6IHt9LFxuXG4gICdwdWJleGNoYW5nZSc6IHt9LFxuXG4gICdwdWJndXJ1Jzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3B1Ym1hdGljJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9hZHMucHVibWF0aWMuY29tL0FkU2VydmVyL2pzL2FtcC5qcycsXG4gIH0sXG5cbiAgJ3B1Ym1pbmUnOiB7XG4gICAgcHJlZmV0Y2g6IFtcbiAgICAgICdodHRwczovL3MucHVibWluZS5jb20vaGVhZC5qcycsXG4gICAgICAnaHR0cHM6Ly9zLnB1Ym1pbmUuY29tL3Nob3dhZC5qcycsXG4gICAgXSxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9kZWxpdmVyeS5nLnN3aXRjaGFkaHViLmNvbScsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAncHVsc2Vwb2ludCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYWRzLmNvbnRleHR3ZWIuY29tL1RhZ1B1Ymxpc2gvZ2V0anMuc3RhdGljLmpzJyxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly90YWcuY29udGV4dHdlYi5jb20nLFxuICB9LFxuXG4gICdwdXJjaCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vcmFtcC5wdXJjaC5jb20vc2VydmUvY3JlYXRpdmVfYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdxdW9yYWFkJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9hLnF1b3JhLmNvbS9hbXBfYWQuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2FtcGFkLnF1b3JhLmNvbScsXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAncmVhbGNsaWNrJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3JlbGFwJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3JldmNvbnRlbnQnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2xhYnMtY2RuLnJldmNvbnRlbnQuY29tL2J1aWxkL2FtcGh0bWwvcmV2Y29udGVudC5hbXAubWluLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly90cmVuZHMucmV2Y29udGVudC5jb20nLFxuICAgICAgJ2h0dHBzOi8vY2RuLnJldmNvbnRlbnQuY29tJyxcbiAgICAgICdodHRwczovL2ltZy5yZXZjb250ZW50LmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdyZXZqZXQnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Nkbi5yZXZqZXQuY29tL35jZG4vSlMvMDMvYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdydWJpY29uJzoge30sXG5cbiAgJ3Nla2luZG8nOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnc2hhcmV0aHJvdWdoJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3NrbGlrJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jLmltZWRpYS5jei9qcy9hbXAuanMnLFxuICB9LFxuXG4gICdzbGltY3V0bWVkaWEnOiB7XG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vc2IuZnJlZXNrcmVlbi5jb20nLFxuICAgICAgJ2h0dHBzOi8vc3RhdGljLmZyZWVza3JlZW4uY29tJyxcbiAgICAgICdodHRwczovL3ZpZGVvLmZyZWVza3JlZW4uY29tJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3NtYXJ0YWRzZXJ2ZXInOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2VjLW5zLnNhc2Nkbi5jb20vZGlmZi9qcy9hbXAudjAuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL3N0YXRpYy5zYXNjZG4uY29tJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdzbWFydGNsaXAnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Nkbi5zbWFydGNsaXAubmV0L2FtcC9hbXAudjAuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL2Rlcy5zbWFydGNsaXAubmV0JyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdzbWkyJzoge1xuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3NvZ291YWQnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3RoZXRhLnNvZ291Y2RuLmNvbS93YXAvanMvYXcuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3NvcnRhYmxlJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnc2VydmljZXMuY29tL3RhZy9qcy9ncHQuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3RhZ3MtY2RuLmRlcGxveWFkcy5jb20nLFxuICAgICAgJ2h0dHBzOi8vcGFydG5lci5nb29nbGVhZHNlcnZpY2VzLmNvbScsXG4gICAgICAnaHR0cHM6Ly9zZWN1cmVwdWJhZHMuZy5kb3VibGVjbGljay5uZXQnLFxuICAgICAgJ2h0dHBzOi8vdHBjLmdvb2dsZXN5bmRpY2F0aW9uLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICdzb3Zybic6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYXAubGlqaXQuY29tL3d3dy9zb3Zybl9hbXAvc292cm5fYWRzLmpzJyxcbiAgfSxcblxuICAnc3BvdHgnOiB7XG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vanMuc3BvdHgudHYnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3N1bm1lZGlhJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly92b2QuYWRkZXZ3ZWIuY29tL3N1bm1lZGlhL2FtcC9hZHMvc3VubWVkaWEuanMnLFxuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL3N0YXRpYy5hZGRldndlYi5jb20nLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3N3b29wJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly93d3cuc3dvb3AtYW1wLmNvbS9hbXAuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3d3dy5zd3BzdmMuY29tJyxcbiAgICAgICdodHRwczovL2NsaWVudC5zd3BjbGQuY29tJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3RhYm9vbGEnOiB7fSxcblxuICAndGVhZHMnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2Nkbi50ZWFkcy50di9tZWRpYS9mb3JtYXQvdjMvdGVhZHMtZm9ybWF0Lm1pbi5qcycsXG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vY2RuMi50ZWFkcy50dicsXG4gICAgICAnaHR0cHM6Ly9hLnRlYWRzLnR2JyxcbiAgICAgICdodHRwczovL3QudGVhZHMudHYnLFxuICAgIF0sXG4gIH0sXG5cbiAgJ3RyaXBsZWxpZnQnOiB7fSxcblxuICAndHJ1Z2F6ZSc6IHtcbiAgICBjbGllbnRJZFNjb3BlOiAnX190Z19hbXAnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3Vhcyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9waG9lbml4LmpzJyxcbiAgfSxcblxuICAndXpvdSc6IHtcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zcGVlZS1hZC5ha2FtYWl6ZWQubmV0JyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3VucnVseSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vdmlkZW8udW5ydWx5bWVkaWEuY29tL2FtcC1kZW1vL25hdGl2ZS1sb2FkZXIuanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3ZhbHVlY29tbWVyY2UnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL2FtcC52YWx1ZWNvbW1lcmNlLmNvbS9hbXBfYnJpZGdlLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9hZC5qcC5hcC52YWx1ZWNvbW1lcmNlLmNvbScsXG4gICAgICAnaHR0cHM6Ly9hZC5vbWtzLnZhbHVlY29tbWVyY2UuY29tJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3ZpZGVvaW50ZWxsaWdlbmNlJzoge1xuICAgIHByZWNvbm5lY3Q6ICdodHRwczovL3Mudmktc2VydmUuY29tJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd2aWRlb25vdyc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd2aXJhbGl6ZSc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd2bWZpdmUnOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL21hbi52bTVhcGlzLmNvbS9kaXN0L2Fkbi13ZWItc2RrLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly92YXdwcm8udm01YXBpcy5jb20nLFxuICAgICAgJ2h0dHBzOi8vdmFoZnJvbnQudm01YXBpcy5jb20nLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnd2ViZWRpYWRzJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9ldTEud2JkZHMuY29tL2FtcC5taW4uanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL2dvdXRlZS50b3AnLFxuICAgICAgJ2h0dHBzOi8vbWVkaWFhdGhheS5vcmcudWsnLFxuICAgIF0sXG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnd2Vib3JhbWEtZGlzcGxheSc6IHtcbiAgICBwcmVmZXRjaDogW1xuICAgICAgJ2h0dHBzOi8vY3N0YXRpYy53ZWJvcmFtYS5mci9qcy9hZHZlcnRpc2VydjIvYWRwZXJmX2xhdW5jaF8xLjAuMF9zY3JhbWJsZWQuanMnLFxuICAgICAgJ2h0dHBzOi8vY3N0YXRpYy53ZWJvcmFtYS5mci9qcy9hZHZlcnRpc2VydjIvYWRwZXJmX2NvcmVfMS4wLjBfc2NyYW1ibGVkLmpzJyxcbiAgICBdLFxuICB9LFxuXG4gICd3aWRlc3BhY2UnOiB7fSxcblxuICAnd2lzdGVyaWEnOiB7XG4gICAgcmVuZGVyU3RhcnRJbXBsZW1lbnRlZDogdHJ1ZSxcbiAgfSxcblxuICAnd3BtZWRpYSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vc3RkLndwY2RuLnBsL3dwanNsaWIvd3Bqc2xpYi1hbXAuanMnLFxuICAgIHByZWNvbm5lY3Q6IFtcbiAgICAgICdodHRwczovL3d3dy53cC5wbCcsXG4gICAgICAnaHR0cHM6Ly92LndwaW1nLnBsJyxcbiAgICBdLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3hsaWZ0Jzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9jZG4ueC1saWZ0LmpwL3Jlc291cmNlcy9jb21tb24veGxpZnRfYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd5YWhvbyc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vcy55aW1nLmNvbS9vcy9hbXBhZC9kaXNwbGF5LmpzJyxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly91cy5hZHNlcnZlci55YWhvby5jb20nLFxuICB9LFxuXG4gICd5YWhvb2pwJzoge1xuICAgIHByZWZldGNoOiBbXG4gICAgICAnaHR0cHM6Ly9zLnlpbWcuanAvaW1hZ2VzL2xpc3RpbmcvdG9vbC95YWRzL3lkbi9hbXAvYW1wLmpzJyxcbiAgICAgICdodHRwczovL3lhZHMuYy55aW1nLmpwL2pzL3lhZHMuanMnLFxuICAgIF0sXG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8veWFkcy55YWhvby5jby5qcCcsXG4gIH0sXG5cbiAgJ3lhbmRleCc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8veWFzdGF0aWMubmV0L3BhcnRuZXItY29kZS9sb2FkZXJzL2NvbnRleHRfYW1wLmpzJyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd5ZW5nbyc6IHtcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd5aWVsZGJvdCc6IHtcbiAgICBwcmVmZXRjaDogW1xuICAgICAgJ2h0dHBzOi8vY2RuLnlsZGJ0LmNvbS9qcy95aWVsZGJvdC5pbnRlbnQuYW1wLmpzJyxcbiAgICAgICdodHRwczovL21zZy55bGRidC5jb20vanMveWJtc2cuaHRtbCcsXG4gICAgXSxcbiAgICBwcmVjb25uZWN0OiAnaHR0cHM6Ly9pLnlsZGJ0LmNvbScsXG4gIH0sXG5cbiAgJ3lpZWxkbW8nOiB7XG4gICAgcHJlZmV0Y2g6ICdodHRwczovL3N0YXRpYy55aWVsZG1vLmNvbS95bS4xLmpzJyxcbiAgICBwcmVjb25uZWN0OiBbXG4gICAgICAnaHR0cHM6Ly9zLnlpZWxkbW8uY29tJyxcbiAgICAgICdodHRwczovL2Fkcy55aWVsZG1vLmNvbScsXG4gICAgXSxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd5aWVsZG9uZSc6IHtcbiAgICBwcmVmZXRjaDogJ2h0dHBzOi8vaW1nLmFrLmltcGFjdC1hZC5qcC9pYy9wb25lL2NvbW1vbmpzL3lvbmUtYW1wLmpzJyxcbiAgfSxcblxuICAneWllbGRwcm8nOiB7XG4gICAgcHJlY29ubmVjdDogJ2h0dHBzOi8vY3JlYXRpdmVzLnlpZWxkcHJvLmV1JyxcbiAgICByZW5kZXJTdGFydEltcGxlbWVudGVkOiB0cnVlLFxuICB9LFxuXG4gICd6ZWRvJzoge1xuICAgIHByZWZldGNoOiAnaHR0cHM6Ly9zczMuemVkby5jb20vZ2Vja28vdGFnL0dlY2tvLmFtcC5taW4uanMnLFxuICAgIHJlbmRlclN0YXJ0SW1wbGVtZW50ZWQ6IHRydWUsXG4gIH0sXG5cbiAgJ3plcmduZXQnOiB7fSxcblxuICAnenVja3MnOiB7XG4gICAgcHJlY29ubmVjdDogW1xuICAgICAgJ2h0dHBzOi8vai56dWNrcy5uZXQuemltZy5qcCcsXG4gICAgICAnaHR0cHM6Ly9zaC56dWNrcy5uZXQnLFxuICAgICAgJ2h0dHBzOi8vay56dWNrcy5uZXQnLFxuICAgICAgJ2h0dHBzOi8vc3RhdGljLnp1Y2tzLm5ldC56aW1nLmpwJyxcbiAgICBdLFxuICB9LFxuXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEV4cGVyaW1lbnRJbmZvLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGZvcmNlRXhwZXJpbWVudEJyYW5jaCxcbiAgZ2V0RXhwZXJpbWVudEJyYW5jaCxcbiAgcmFuZG9tbHlTZWxlY3RVbnNldEV4cGVyaW1lbnRzLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtcbiAgYWRkRXhwZXJpbWVudElkVG9FbGVtZW50LFxufSBmcm9tICcuL3RyYWZmaWMtZXhwZXJpbWVudHMnO1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHNlbGVjdCBpbnRvIGV4cGVyaW1lbnQgYW5kIGZvcmNlcyBicmFuY2ggaWYgc2VsZWN0ZWQuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gYnJhbmNoZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHBOYW1lXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRBZGRFeHBJZFRvRWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0QW5kU2V0RXhwZXJpbWVudHMoXG4gIHdpbiwgZWxlbWVudCwgYnJhbmNoZXMsIGV4cE5hbWUsIG9wdEFkZEV4cElkVG9FbGVtZW50KSB7XG4gIGNvbnN0IGV4cGVyaW1lbnRJZCA9IGV4cFV0aWxzLm1heWJlU2VsZWN0RXhwZXJpbWVudChcbiAgICAgIHdpbiwgZWxlbWVudCwgYnJhbmNoZXMsIGV4cE5hbWUpO1xuICBpZiAoISFleHBlcmltZW50SWQpIHtcbiAgICBhZGRFeHBlcmltZW50SWRUb0VsZW1lbnQob3B0QWRkRXhwSWRUb0VsZW1lbnQgP1xuICAgICAgZXhwZXJpbWVudElkIDogdW5kZWZpbmVkLCBlbGVtZW50KTtcbiAgICBmb3JjZUV4cGVyaW1lbnRCcmFuY2god2luLCBleHBOYW1lLCBleHBlcmltZW50SWQpO1xuICB9XG4gIHJldHVybiBleHBlcmltZW50SWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50VXRpbHMge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBzZWxlY3Rpb25CcmFuY2hlc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpbWVudE5hbWVcbiAgICovXG4gIG1heWJlU2VsZWN0RXhwZXJpbWVudChcbiAgICB3aW4sIGVsZW1lbnQsIHNlbGVjdGlvbkJyYW5jaGVzLCBleHBlcmltZW50TmFtZSkge1xuICAgIGNvbnN0IGV4cGVyaW1lbnRJbmZvTWFwID1cbiAgICAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCAhRXhwZXJpbWVudEluZm8+fSAqLyAoe30pO1xuICAgIGV4cGVyaW1lbnRJbmZvTWFwW2V4cGVyaW1lbnROYW1lXSA9IHtcbiAgICAgIGlzVHJhZmZpY0VsaWdpYmxlOiAoKSA9PiB0cnVlLFxuICAgICAgYnJhbmNoZXM6IHNlbGVjdGlvbkJyYW5jaGVzLFxuICAgIH07XG4gICAgcmFuZG9tbHlTZWxlY3RVbnNldEV4cGVyaW1lbnRzKHdpbiwgZXhwZXJpbWVudEluZm9NYXApO1xuICAgIHJldHVybiBnZXRFeHBlcmltZW50QnJhbmNoKHdpbiwgZXhwZXJpbWVudE5hbWUpO1xuICB9XG59XG5cbi8qKlxuICogRXhwZXJpbWVudFV0aWxzIHNpbmdsZXRvbi5cbiAqIEB0eXBlIHshRXhwZXJpbWVudFV0aWxzfVxuKi9cbmNvbnN0IGV4cFV0aWxzID0gbmV3IEV4cGVyaW1lbnRVdGlscygpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7dHJ5UGFyc2VKc29ufSBmcm9tICcuLi8uLi8uLi9zcmMvanNvbic7XG5cbi8qKlxuICAqIEhhbmRsZXMgYW4gWEhSIHJlc3BvbnNlIGJ5IGNhbGxpbmcgbGluZUNhbGxiYWNrIGZvciBlYWNoIGxpbmUgZGVsaW5lYXRpb24uXG4gICogVXNlcyBzdHJlYW1pbmcgd2hlcmUgcG9zc2libGUgb3RoZXJ3aXNlIGZhbGxzIGJhY2sgdG8gdGV4dC5cbiAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAqIEBwYXJhbSB7IS4uLy4uLy4uL3NyYy91dGlscy94aHItdXRpbHMuRmV0Y2hSZXNwb25zZX0gcmVzcG9uc2VcbiAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgYm9vbGVhbil9IGxpbmVDYWxsYmFja1xuICAqIEBwcml2YXRlXG4gICovXG5leHBvcnQgZnVuY3Rpb24gbGluZURlbGltaXRlZFN0cmVhbWVyKHdpbiwgcmVzcG9uc2UsIGxpbmVDYWxsYmFjaykge1xuICBsZXQgbGluZSA9ICcnO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICogQHBhcmFtIHtib29sZWFufSBkb25lXG4gICAqL1xuICBmdW5jdGlvbiBzdHJlYW1lcih0ZXh0LCBkb25lKSB7XG4gICAgY29uc3QgcmVnZXggPSAvKFteXFxuXSopKFxcbik/L2c7XG4gICAgbGV0IG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHRleHQpKSkge1xuICAgICAgbGluZSArPSBtYXRjaFsxXTtcbiAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICBsaW5lQ2FsbGJhY2sobGluZSwgZG9uZSAmJiByZWdleC5sYXN0SW5kZXggPT09IHRleHQubGVuZ3RoKTtcbiAgICAgICAgbGluZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2V4Lmxhc3RJbmRleCA9PT0gdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghcmVzcG9uc2UuYm9keSB8fCAhd2luLlRleHREZWNvZGVyKSB7XG4gICAgcmVzcG9uc2UudGV4dCgpLnRoZW4odGV4dCA9PiBzdHJlYW1lcih0ZXh0LCB0cnVlKSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgY29uc3QgcmVhZGVyID0gLyoqIEB0eXBlICFSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIgKi8gKFxuICAgIHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCkpO1xuICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gY2h1bmsocmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdC52YWx1ZSkge1xuICAgICAgc3RyZWFtZXIoXG4gICAgICAgICAgZGVjb2Rlci5kZWNvZGUoXG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7IUFycmF5QnVmZmVyfSAqLyhyZXN1bHQudmFsdWUpLCB7J3N0cmVhbSc6IHRydWV9KSxcbiAgICAgICAgICByZXN1bHQuZG9uZSk7XG4gICAgfVxuICAgIGlmICghcmVzdWx0LmRvbmUpIHtcbiAgICAgIC8vIE1vcmUgY2h1bmtzIHRvIHJlYWQuXG4gICAgICByZWFkZXIucmVhZCgpLnRoZW4oY2h1bmspO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICAqIEdpdmVuIGVhY2ggbGluZSwgZ3JvdXBzIHN1Y2ggdGhhdCB0aGUgZmlyc3QgaXMgSlNPTiBwYXJzZWQgYW5kIHNlY29uZFxuICAqIGh0bWwgdW5lc2NhcGVkLlxuICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAhT2JqZWN0PHN0cmluZywgKj4sIGJvb2xlYW4pfSBjYWxsYmFja1xuICAqIEBwcml2YXRlXG4gICovXG5leHBvcnQgZnVuY3Rpb24gbWV0YUpzb25DcmVhdGl2ZUdyb3VwZXIoY2FsbGJhY2spIHtcbiAgbGV0IGZpcnN0O1xuICByZXR1cm4gZnVuY3Rpb24obGluZSwgZG9uZSkge1xuICAgIGlmIChmaXJzdCkge1xuICAgICAgY29uc3QgbWV0YWRhdGEgPVxuICAgICAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgKj59ICovKHRyeVBhcnNlSnNvbihmaXJzdCkgfHwge30pO1xuICAgICAgY29uc3QgbG93ZXJDYXNlZE1ldGFkYXRhID1cbiAgICAgICAgICBPYmplY3Qua2V5cyhtZXRhZGF0YSkucmVkdWNlKChuZXdPYmosIGtleSkgPT4ge1xuICAgICAgICAgICAgbmV3T2JqW2tleS50b0xvd2VyQ2FzZSgpXSA9IG1ldGFkYXRhW2tleV07XG4gICAgICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgICAgICAgIH0sIHt9KTtcbiAgICAgIGNhbGxiYWNrKHVuZXNjYXBlTGluZURlbGltaXRlZEh0bWxfKGxpbmUpLCBsb3dlckNhc2VkTWV0YWRhdGEsIGRvbmUpO1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJzdCA9IGxpbmU7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAgKiBVbmVzY2FwZXMgY2hhcmFjdGVycyB0aGF0IGFyZSBlc2NhcGVkIGluIGxpbmUtZGVsaW1pdGVkIEpTT04tSFRNTC5cbiAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbCBBbiBodG1sIHNuaXBwZXQuXG4gICogQHJldHVybiB7c3RyaW5nfVxuICAqIEBwcml2YXRlXG4gICovXG5mdW5jdGlvbiB1bmVzY2FwZUxpbmVEZWxpbWl0ZWRIdG1sXyhodG1sKSB7XG4gIHJldHVybiBodG1sLnJlcGxhY2UoXG4gICAgICAvXFxcXChufHJ8XFxcXCkvZyxcbiAgICAgIChfLCBtYXRjaCkgPT4gbWF0Y2ggPT0gJ24nID8gJ1xcbicgOiBtYXRjaCA9PSAncicgPyAnXFxyJyA6ICdcXFxcJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBNYWNoaW5lcnkgZm9yIGRvaW5nIFwidHJhZmZpYy1sZXZlbFwiIGV4cGVyaW1lbnRzLiAgVGhhdCBpcywgcmF0aGVyIHRoYW5cbiAqIGEgc2luZ2xlIHVzZXIgY2hvb3NpbmcgdG8gb3B0LWluIHRvIGFuIGV4cGVyaW1lbnRhbCB2ZXJzaW9uIG9mIGEgbW9kdWxlLFxuICogdGhpcyBmcmFtZXdvcmsgYWxsb3dzIHlvdSB0byBkbyByYW5kb21pemVkLCBjb250cm9sbGVkIGV4cGVyaW1lbnRzIG9uIGFsbFxuICogQU1QIHBhZ2UgbG9hZHMgdG8sIGZvciBleGFtcGxlLCB0ZXN0IHJlbGF0aXZlIHBlcmZvcm1hbmNlIG9yIGxvb2sgZm9yXG4gKiBpbXBhY3RzIG9uIGNsaWNrLXRocm91Z2hzLlxuICovXG5cbmltcG9ydCB7XG4gIEVYUEVSSU1FTlRfQVRUUklCVVRFLFxuICBtZXJnZUV4cGVyaW1lbnRJZHMsXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtcbiAgRXhwZXJpbWVudEluZm8sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaXNFeHBlcmltZW50T24sXG59IGZyb20gJy4uLy4uLy4uL3NyYy9leHBlcmltZW50cyc7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMnO1xuaW1wb3J0IHtwYXJzZVF1ZXJ5U3RyaW5nfSBmcm9tICcuLi8uLi8uLi9zcmMvdXJsJztcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiAgICBjb250cm9sOiBzdHJpbmcsXG4gKiAgICBleHBlcmltZW50OiBzdHJpbmdcbiAqICB9fSAqL1xuZXhwb3J0IGxldCBBNGFFeHBlcmltZW50QnJhbmNoZXM7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSBAcHJpdmF0ZSAqL1xuZXhwb3J0IGNvbnN0IE1BTlVBTF9FWFBFUklNRU5UX0lEID0gJzExNzE1MjYzMic7XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgQWQgdGFnIEVsZW1lbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBleHBlcmltZW50IGV4dHJhY3RlZCBmcm9tIHBhZ2UgdXJsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFVybEV4cGVyaW1lbnRJZCh3aW4sIGVsZW1lbnQpIHtcbiAgY29uc3QgZXhwUGFyYW0gPSBTZXJ2aWNlcy52aWV3ZXJGb3JEb2MoZWxlbWVudCkuZ2V0UGFyYW0oJ2V4cCcpIHx8XG4gICAgcGFyc2VRdWVyeVN0cmluZyh3aW4ubG9jYXRpb24uc2VhcmNoKVsnZXhwJ107XG4gIGlmICghZXhwUGFyYW0pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBBbGxvdyBmb3IgcGVyIHR5cGUgZXhwZXJpbWVudCBjb250cm9sIHdpdGggRG91YmxlY2xpY2sga2V5IHNldCBmb3IgJ2RhJ1xuICAvLyBhbmQgQWRTZW5zZSB1c2luZyAnYWEnLiAgRmFsbGJhY2sgdG8gJ2E0YScgaWYgdHlwZSBzcGVjaWZpYyBpcyBtaXNzaW5nLlxuICBjb25zdCBleHBLZXlzID0gW1xuICAgIChlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpIHx8ICcnKS50b0xvd2VyQ2FzZSgpID09ICdkb3VibGVjbGljaycgP1xuICAgICAgJ2RhJyA6ICdhYScsXG4gICAgJ2E0YScsXG4gIF07XG4gIGxldCBhcmc7XG4gIGxldCBtYXRjaDtcbiAgZXhwS2V5cy5mb3JFYWNoKGtleSA9PiBhcmcgPSBhcmcgfHxcbiAgICAoKG1hdGNoID0gbmV3IFJlZ0V4cChgKD86XnwsKSR7a2V5fTooLT9cXFxcZCspYCkuZXhlYyhleHBQYXJhbSkpICYmXG4gICAgICBtYXRjaFsxXSkpO1xuICByZXR1cm4gYXJnIHx8IG51bGw7XG59XG5cbi8qKlxuICogU2V0cyBvZiBleHBlcmltZW50IElEcyBjYW4gYmUgYXR0YWNoZWQgdG8gRWxlbWVudHMgdmlhIGF0dHJpYnV0ZXMuICBJblxuICogdGhhdCBjYXNlLCB3ZSBlbmNvZGUgdGhlbSBhcyBhIHN0cmluZyBjb250YWluaW5nIGEgY29tbWEtc2VwYXJhdGVkIGxpc3RcbiAqIG9mIGV4cGVyaW1lbnQgSURzLiAgVGhpcyBwYXJzZXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBmcm9tIGEgc3RyaW5nIGludG9cbiAqIGEgbGlzdCBvZiBJRCBzdHJpbmdzLiAgSWYgdGhlIGlucHV0IHN0cmluZyBpcyBlbXB0eSBvciBudWxsLCB0aGlzIHJldHVybnNcbiAqIHRoZSBlbXB0eSBsaXN0LiAgVGhpcyBkb2VzIG5vIHZhbGlkaXR5IGNoZWNraW5nIG9uIHRoZSBJRCBmb3JtYXRzIC0tIGZvclxuICogdGhhdCwgdXNlIHZhbGlkYXRlRXhwZXJpbWVudElkcy5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IGlkU3RyaW5nICBTdHJpbmcgdG8gcGFyc2UuXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn0gIExpc3Qgb2YgZXhwZXJpbWVudCBJRHMgKHBvc3NpYmx5IGVtcHR5KS5cbiAqIEBzZWUgdmFsaWRhdGVFeHBlcmltZW50SWRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4cGVyaW1lbnRJZHMoaWRTdHJpbmcpIHtcbiAgaWYgKGlkU3RyaW5nKSB7XG4gICAgcmV0dXJuIGlkU3RyaW5nLnNwbGl0KCcsJyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IGlzIGEgbWVtYmVyIG9mIHRoZSBnaXZlbiBleHBlcmltZW50IGJyYW5jaC5cbiAqIEkuZS4sIHdoZXRoZXIgdGhlIGVsZW1lbnQncyBkYXRhLWV4cGVyaW1lbnQtaWQgYXR0cmlidXRlIGNvbnRhaW5zIHRoZSBpZFxuICogdmFsdWUgKHBvc3NpYmx5IGJlY2F1c2UgdGhlIGhvc3QgcGFnZSBVUkwgY29udGFpbnMgYSAnZXhwPWE0YTpYJyBwYXJhbWV0ZXJcbiAqIGFuZCAjbWF5YmVTZXRFeHBlcmltZW50RnJvbVVybCBoYXMgYWRkZWQgdGhlIGFwcHJvcHJpYXRlIEVJRCkuXG4gKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGNoZWNrIGZvciBtZW1iZXJzaGlwIGluIGEgc3BlY2lmaWNcbiAqICAgZXhwZXJpbWVudC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gaWQgRXhwZXJpbWVudCBJRCB0byBjaGVjayBmb3Igb24gYGVsZW1lbnRgLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5FeHBlcmltZW50KGVsZW1lbnQsIGlkKSB7XG4gIHJldHVybiBwYXJzZUV4cGVyaW1lbnRJZHMoZWxlbWVudC5nZXRBdHRyaWJ1dGUoRVhQRVJJTUVOVF9BVFRSSUJVVEUpKS5zb21lKFxuICAgICAgeCA9PiB7IHJldHVybiB4ID09PSBpZDsgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgaXMgYSBtZW1iZXIgb2YgdGhlICdtYW51YWxseSB0cmlnZ2VyZWRcbiAqIFwiZXhwZXJpbWVudFwiIGJyYW5jaCcuICBJLmUuLCB3aGV0aGVyIHRoZSBlbGVtZW50J3MgZGF0YS1leHBlcmltZW50LWlkXG4gKiBhdHRyaWJ1dGUgY29udGFpbnMgdGhlIE1BTlVBTF9FWFBFUklNRU5UX0lEIHZhbHVlIChob3BlZnVsbHkgYmVjYXVzZSB0aGVcbiAqIHVzZXIgaGFzIG1hbnVhbGx5IHNwZWNpZmllZCAnZXhwPWE0YTotMScgaW4gdGhlIGhvc3QgcGFnZSBVUkwgYW5kXG4gKiAjbWF5YmVTZXRFeHBlcmltZW50RnJvbVVybCBoYXMgYWRkZWQgaXQpLlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgIEVsZW1lbnQgdG8gY2hlY2sgZm9yIG1hbnVhbCBleHBlcmltZW50IG1lbWJlcnNoaXAuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbk1hbnVhbEV4cGVyaW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gaXNJbkV4cGVyaW1lbnQoZWxlbWVudCwgTUFOVUFMX0VYUEVSSU1FTlRfSUQpO1xufVxuXG4vKipcbiAqIFByZWRpY2F0ZSB0byBjaGVjayB3aGV0aGVyIEE0QSBoYXMgbGF1bmNoZWQgeWV0IG9yIG5vdC5cbiAqIElmIGl0IGhhcyBub3QgeWV0IGxhdW5jaGVkLCB0aGVuIHRoZSBleHBlcmltZW50YWwgYnJhbmNoIHNlcnZlcyBBNEEsIGFuZFxuICogY29udHJvbC9maWxsZXIgZG8gbm90LiBJZiBpdCBoYXMgbm90LCB0aGVuIHRoZSBmaWxsZXIgYW5kIGNvbnRyb2wgYnJhbmNoIGRvXG4gKiBzZXJ2ZSBBNEEsIGFuZCB0aGUgZXhwZXJpbWVudGFsIGJyYW5jaCBkb2VzIG5vdC5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpbiAgSG9zdCB3aW5kb3cgZm9yIHRoZSBhZC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnQgIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZS1sYXVuY2ggbWVtYmVyc2hpcC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNMYXVuY2hlZCh3aW4sIGVsZW1lbnQpIHtcbiAgc3dpdGNoIChlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpKSB7XG4gICAgY2FzZSAnYWRzZW5zZSc6XG4gICAgICByZXR1cm4gaXNFeHBlcmltZW50T24od2luLCAnYTRhRmFzdEZldGNoQWRTZW5zZUxhdW5jaGVkJyk7XG4gICAgY2FzZSAnZG91YmxlY2xpY2snOlxuICAgICAgcmV0dXJuIGlzRXhwZXJpbWVudE9uKHdpbiwgJ2E0YUZhc3RGZXRjaERvdWJsZWNsaWNrTGF1bmNoZWQnKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIHRoYXQgYWxsIHN0cmluZyBleHBlcmltZW50IElEcyBpbiBhIGxpc3QgYXJlIHN5bnRhY3RpY2FsbHkgdmFsaWRcbiAqIChpbnRlZ2VyIGJhc2UgMTApLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IGlkTGlzdCAgTGlzdCBvZiBleHBlcmltZW50IElEcy4gIENhbiBiZSBlbXB0eS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgYWxsIGxpc3QgZWxlbWVudHMgYXJlIHZhbGlkIGV4cGVyaW1lbnQgSURzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVFeHBlcmltZW50SWRzKGlkTGlzdCkge1xuICByZXR1cm4gaWRMaXN0LmV2ZXJ5KGlkID0+IHsgcmV0dXJuICFpc05hTihwYXJzZUludChpZCwgMTApKTsgfSk7XG59XG5cbi8qKlxuICogQWRkcyBhIHNpbmdsZSBleHBlcmltZW50SUQgdG8gYW4gZWxlbWVudCBpZmYgaXQncyBhIHZhbGlkIGV4cGVyaW1lbnQgSUQuXG4gKiBOby1vcHMgaWYgdGhlIGV4cGVyaW1lbnRJZCBpcyB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBleHBlcmltZW50SWQgIElEIHRvIGFkZCB0byB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0byBhZGQgdGhlIGV4cGVyaW1lbnQgSUQgdG8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeHBlcmltZW50SWRUb0VsZW1lbnQoZXhwZXJpbWVudElkLCBlbGVtZW50KSB7XG4gIGlmICghZXhwZXJpbWVudElkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGN1cnJlbnRFaWRzID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoRVhQRVJJTUVOVF9BVFRSSUJVVEUpO1xuICBpZiAoY3VycmVudEVpZHMgJiYgdmFsaWRhdGVFeHBlcmltZW50SWRzKHBhcnNlRXhwZXJpbWVudElkcyhjdXJyZW50RWlkcykpKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoRVhQRVJJTUVOVF9BVFRSSUJVVEUsXG4gICAgICAgIG1lcmdlRXhwZXJpbWVudElkcyhbZXhwZXJpbWVudElkXSwgY3VycmVudEVpZHMpKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShFWFBFUklNRU5UX0FUVFJJQlVURSwgZXhwZXJpbWVudElkKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKiBAdHlwZWRlZiB7e25hbWU6IHN0cmluZywgdmFsdWU6IChzdHJpbmd8bnVtYmVyfG51bGwpfX0gKi9cbmV4cG9ydCBsZXQgUXVlcnlQYXJhbWV0ZXJEZWY7XG5cbi8qKlxuICogQnVpbGRzIGEgVVJMIGZyb20gcXVlcnkgcGFyYW1ldGVycywgdHJ1bmNhdGluZyB0byBhIG1heGltdW0gbGVuZ3RoIGlmXG4gKiBuZWNlc3NhcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVybCBzY2hlbWUsIGRvbWFpbiwgYW5kIHBhdGggZm9yIHRoZSBVUkwuXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLHN0cmluZ3xudW1iZXJ8bnVsbD59IHF1ZXJ5UGFyYW1zIHF1ZXJ5IHBhcmFtZXRlcnMgZm9yXG4gKiAgICAgdGhlIFVSTC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhMZW5ndGggbGVuZ3RoIHRvIHRydW5jYXRlIHRoZSBVUkwgdG8gaWYgbmVjZXNzYXJ5LlxuICogQHBhcmFtIHs/UXVlcnlQYXJhbWV0ZXJEZWY9fSBvcHRfdHJ1bmNhdGlvblF1ZXJ5UGFyYW0gcXVlcnkgcGFyYW1ldGVyIHRvXG4gKiAgICAgYXBwZW5kIHRvIHRoZSBVUkwgaWZmIGFueSBxdWVyeSBwYXJhbWV0ZXJzIHdlcmUgdHJ1bmNhdGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZnVsbHkgY29uc3RydWN0ZWQgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRVcmwoXG4gIGJhc2VVcmwsIHF1ZXJ5UGFyYW1zLCBtYXhMZW5ndGgsIG9wdF90cnVuY2F0aW9uUXVlcnlQYXJhbSkge1xuICBjb25zdCBlbmNvZGVkUGFyYW1zID0gW107XG4gIGNvbnN0IGVuY29kZWRUcnVuY2F0aW9uUGFyYW0gPVxuICAgICAgb3B0X3RydW5jYXRpb25RdWVyeVBhcmFtICYmXG4gICAgICAhKG9wdF90cnVuY2F0aW9uUXVlcnlQYXJhbS52YWx1ZSA9PSBudWxsIHx8XG4gICAgICBvcHRfdHJ1bmNhdGlvblF1ZXJ5UGFyYW0udmFsdWUgPT09ICcnKSA/XG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChvcHRfdHJ1bmNhdGlvblF1ZXJ5UGFyYW0ubmFtZSkgKyAnPScgK1xuICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhvcHRfdHJ1bmNhdGlvblF1ZXJ5UGFyYW0udmFsdWUpKSA6XG4gICAgICAgIG51bGw7XG4gIGxldCBjYXBhY2l0eSA9IG1heExlbmd0aCAtIGJhc2VVcmwubGVuZ3RoO1xuICBpZiAoZW5jb2RlZFRydW5jYXRpb25QYXJhbSkge1xuICAgIGNhcGFjaXR5IC09IGVuY29kZWRUcnVuY2F0aW9uUGFyYW0ubGVuZ3RoICsgMTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocXVlcnlQYXJhbXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbHVlID0gcXVlcnlQYXJhbXNba2V5XTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBlbmNvZGVkTmFtZUFuZFNlcCA9IGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nO1xuICAgIGNvbnN0IGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKTtcbiAgICBjb25zdCBmdWxsTGVuZ3RoID0gZW5jb2RlZE5hbWVBbmRTZXAubGVuZ3RoICsgZW5jb2RlZFZhbHVlLmxlbmd0aCArIDE7XG4gICAgaWYgKGZ1bGxMZW5ndGggPiBjYXBhY2l0eSkge1xuICAgICAgY29uc3QgdHJ1bmNhdGVkVmFsdWUgPSBlbmNvZGVkVmFsdWVcbiAgICAgICAgICAuc3Vic3RyKDAsIGNhcGFjaXR5IC0gZW5jb2RlZE5hbWVBbmRTZXAubGVuZ3RoIC0gMSlcbiAgICAgIC8vIERvbid0IGVuZCB3aXRoIGEgcGFydGlhbGx5IHRydW5jYXRlZCBlc2NhcGUgc2VxdWVuY2VcbiAgICAgICAgICAucmVwbGFjZSgvJVxcdz8kLywgJycpO1xuICAgICAgaWYgKHRydW5jYXRlZFZhbHVlKSB7XG4gICAgICAgIGVuY29kZWRQYXJhbXMucHVzaChlbmNvZGVkTmFtZUFuZFNlcCArIHRydW5jYXRlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmNvZGVkVHJ1bmNhdGlvblBhcmFtKSB7XG4gICAgICAgIGVuY29kZWRQYXJhbXMucHVzaChlbmNvZGVkVHJ1bmNhdGlvblBhcmFtKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlbmNvZGVkUGFyYW1zLnB1c2goZW5jb2RlZE5hbWVBbmRTZXAgKyBlbmNvZGVkVmFsdWUpO1xuICAgIGNhcGFjaXR5IC09IGZ1bGxMZW5ndGg7XG4gIH1cbiAgaWYgKCFlbmNvZGVkUGFyYW1zLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlVXJsO1xuICB9XG4gIHJldHVybiBiYXNlVXJsICsgJz8nICsgZW5jb2RlZFBhcmFtcy5qb2luKCcmJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtEb21GaW5nZXJwcmludH0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL2RvbS1maW5nZXJwcmludCc7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMnO1xuaW1wb3J0IHtidWlsZFVybH0gZnJvbSAnLi91cmwtYnVpbGRlcic7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9vYmplY3QnO1xuaW1wb3J0IHtnZXRCaW5hcnlUeXBlfSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtnZXRNb2RlfSBmcm9tICcuLi8uLi8uLi9zcmMvbW9kZSc7XG5pbXBvcnQge2dldE9yQ3JlYXRlQWRDaWR9IGZyb20gJy4uLy4uLy4uL3NyYy9hZC1jaWQnO1xuaW1wb3J0IHtnZXRUaW1pbmdEYXRhU3luY30gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2UvdmFyaWFibGUtc291cmNlJztcbmltcG9ydCB7XG4gIGlzRXhwZXJpbWVudE9uLFxuICB0b2dnbGVFeHBlcmltZW50LFxufSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtwYXJzZUpzb259IGZyb20gJy4uLy4uLy4uL3NyYy9qc29uJztcbmltcG9ydCB7d2hlblVwZ3JhZGVkVG9DdXN0b21FbGVtZW50fSBmcm9tICcuLi8uLi8uLi9zcmMvZG9tJztcblxuLyoqIEB0eXBlIHtzdHJpbmd9ICAqL1xuY29uc3QgQU1QX0FOQUxZVElDU19IRUFERVIgPSAnWC1BbXBBbmFseXRpY3MnO1xuXG4vKiogQGNvbnN0IHtudW1iZXJ9ICovXG5jb25zdCBNQVhfVVJMX0xFTkdUSCA9IDE2Mzg0O1xuXG4vKiogQGVudW0ge3N0cmluZ30gKi9cbmNvbnN0IEFtcEFkSW1wbGVtZW50YXRpb24gPSB7XG4gIEFNUF9BRF9YSFJfVE9fSUZSQU1FOiAnMicsXG4gIEFNUF9BRF9YSFJfVE9fSUZSQU1FX09SX0FNUDogJzMnLFxuICBBTVBfQURfSUZSQU1FX0dFVDogJzUnLFxufTtcblxuLyoqIEBjb25zdCB7IU9iamVjdH0gKi9cbmV4cG9ydCBjb25zdCBWYWxpZEFkQ29udGFpbmVyVHlwZXMgPSB7XG4gICdBTVAtQ0FST1VTRUwnOiAnYWMnLFxuICAnQU1QLUZYLUZMWUlORy1DQVJQRVQnOiAnZmMnLFxuICAnQU1QLUxJR0hUQk9YJzogJ2xiJyxcbiAgJ0FNUC1TVElDS1ktQUQnOiAnc2EnLFxufTtcblxuLyoqXG4gKiBTZWUgYFZpc2liaWxpdHlTdGF0ZWAgZW51bS5cbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IHZpc2liaWxpdHlTdGF0ZUNvZGVzID0ge1xuICAndmlzaWJsZSc6ICcxJyxcbiAgJ2hpZGRlbic6ICcyJyxcbiAgJ3ByZXJlbmRlcic6ICczJyxcbiAgJ3VubG9hZGVkJzogJzUnLFxufTtcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IFFRSURfSEVBREVSID0gJ1gtUVFJRCc7XG5cbi8qKlxuICogRWxlbWVudCBhdHRyaWJ1dGUgdGhhdCBzdG9yZXMgZXhwZXJpbWVudCBJRHMuXG4gKlxuICogTm90ZTogVGhpcyBhdHRyaWJ1dGUgc2hvdWxkIGJlIHVzZWQgb25seSBmb3IgdHJhY2tpbmcgZXhwZXJpbWVudGFsXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgQU1QIHRhZ3MsIGUuZy4sIGJ5IEFNUEhUTUwgaW1wbGVtZW50b3JzLiAgSXQgc2hvdWxkIG5vdCBiZVxuICogYWRkZWQgYnkgYSBwdWJsaXNoZXIgcGFnZS5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgY29uc3QgRVhQRVJJTUVOVF9BVFRSSUJVVEUgPSAnZGF0YS1leHBlcmltZW50LWlkJztcblxuLyoqIEB0eXBlZGVmIHt7dXJsczogIUFycmF5PHN0cmluZz59fVxuICovXG5leHBvcnQgbGV0IEFtcEFuYWx5dGljc0NvbmZpZ0RlZjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7e2luc3RhbnRMb2FkOiBib29sZWFuLCB3cml0ZUluQm9keTogYm9vbGVhbn19XG4gKi9cbmV4cG9ydCBsZXQgTmFtZWZyYW1lRXhwZXJpbWVudENvbmZpZztcblxuLyoqXG4gKiBAY29uc3QgeyEuL3VybC1idWlsZGVyLlF1ZXJ5UGFyYW1ldGVyRGVmfVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBUUlVOQ0FUSU9OX1BBUkFNID0ge25hbWU6ICd0cnVuYycsIHZhbHVlOiAnMSd9O1xuXG4vKiogQGNvbnN0IHtPYmplY3R9ICovXG5jb25zdCBDRE5fUFJPWFlfUkVHRVhQID0gL15odHRwczpcXC9cXC8oW2EtekEtWjAtOV8tXStcXC4pP2NkblxcLmFtcHByb2plY3RcXC5vcmcoKFxcLy4qKXwoJCkpKy87XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgbmF2aWdhdGlvbiBzdGFydCB1c2luZyB0aGUgcGVyZm9ybWFuY2UgQVBJIG9yIDAgaWYgbm90XG4gKiBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gKiBGZWF0dXJlIGRldGVjdGlvbiBpcyB1c2VkIGZvciBzYWZldHkgb24gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGVcbiAqIHBlcmZvcm1hbmNlIEFQSS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGdldE5hdlN0YXJ0KHdpbikge1xuICByZXR1cm4gKHdpblsncGVyZm9ybWFuY2UnXSAmJiB3aW5bJ3BlcmZvcm1hbmNlJ11bJ3RpbWluZyddICYmXG4gICAgICB3aW5bJ3BlcmZvcm1hbmNlJ11bJ3RpbWluZyddWyduYXZpZ2F0aW9uU3RhcnQnXSkgfHwgMDtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIEdvb2dsZSBBZHMgc3VwcG9ydHMgdGhlIEE0QSByZW5kZXJpbmcgcGF0aHdheSBpcyB2YWxpZCBmb3IgdGhlXG4gKiBlbnZpcm9ubWVudCBieSBlbnN1cmluZyBuYXRpdmUgY3J5cHRvIHN1cHBvcnQgYW5kIHBhZ2Ugb3JpZ2luYXRlZCBpbiB0aGVcbiAqIHtAY29kZSBjZG4uYW1wcHJvamVjdC5vcmd9IENETiA8ZW0+b3I8L2VtPiB3ZSBtdXN0IGJlIHJ1bm5pbmcgaW4gbG9jYWxcbiAqIGRldiBtb2RlLlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luICBIb3N0IHdpbmRvdyBmb3IgdGhlIGFkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gIFdoZXRoZXIgR29vZ2xlIEFkcyBzaG91bGQgYXR0ZW1wdCB0byByZW5kZXIgdmlhIHRoZSBBNEFcbiAqICAgcGF0aHdheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzR29vZ2xlQWRzQTRBVmFsaWRFbnZpcm9ubWVudCh3aW4pIHtcbiAgcmV0dXJuIHN1cHBvcnRzTmF0aXZlQ3J5cHRvKHdpbikgJiYgKFxuICAgICEhaXNDZG5Qcm94eSh3aW4pIHx8IGdldE1vZGUod2luKS5sb2NhbERldiB8fCBnZXRNb2RlKHdpbikudGVzdCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgbmF0aXZlIGNyeXB0byBpcyBzdXBwb3J0ZWQgZm9yIHdpbi5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luICBIb3N0IHdpbmRvdyBmb3IgdGhlIGFkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBuYXRpdmUgY3J5cHRvIGlzIHN1cHBvcnRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzTmF0aXZlQ3J5cHRvKHdpbikge1xuICByZXR1cm4gd2luLmNyeXB0byAmJiAod2luLmNyeXB0by5zdWJ0bGUgfHwgd2luLmNyeXB0by53ZWJraXRTdWJ0bGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUFNUC5CYXNlRWxlbWVudH0gYW1wRWxlbWVudCBUaGUgZWxlbWVudCBvbiB3aG9zZSBsaWZlY3ljbGUgdGhpc1xuICogICAgcmVwb3J0ZXIgd2lsbCBiZSByZXBvcnRpbmcuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHJlcG9ydGluZyBpcyBlbmFibGVkIGZvciB0aGlzIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVwb3J0aW5nRW5hYmxlZChhbXBFbGVtZW50KSB7XG4gIC8vIENhcnZlLW91dHM6IFdlIG9ubHkgd2FudCB0byBlbmFibGUgcHJvZmlsaW5nIHBpbmdiYWNrcyB3aGVuOlxuICAvLyAgIC0gVGhlIGFkIGlzIGZyb20gb25lIG9mIHRoZSBHb29nbGUgbmV0d29ya3MgKEFkU2Vuc2Ugb3IgRG91YmxlY2xpY2spLlxuICAvLyAgIC0gVGhlIGFkIHNsb3QgaXMgaW4gdGhlIEE0QS12cy0zcCBhbXAtYWQgY29udHJvbCBicmFuY2ggKGVpdGhlciB2aWFcbiAgLy8gICAgIGludGVybmFsLCBjbGllbnQtc2lkZSBzZWxlY3Rpb24gb3IgdmlhIGV4dGVybmFsLCBHb29nbGUgU2VhcmNoXG4gIC8vICAgICBzZWxlY3Rpb24pLlxuICAvLyAgIC0gV2UgaGF2ZW4ndCB0dXJuZWQgb2ZmIHByb2ZpbGluZyB2aWEgdGhlIHJhdGUgY29udHJvbHMgaW5cbiAgLy8gICAgIGJ1aWxkLXN5c3RlbS9nbG9iYWwtY29uZmlnL3tjYW5hcnkscHJvZH0tY29uZmlnLmpzb25cbiAgLy8gSWYgYW55IG9mIHRob3NlIGZhaWwsIHdlIHVzZSB0aGUgYEJhc2VMaWZlY3ljbGVSZXBvcnRlcmAsIHdoaWNoIGlzIGFcbiAgLy8gYSBuby1vcCAoc2VuZHMgbm8gcGluZ3MpLlxuICBjb25zdCB0eXBlID0gYW1wRWxlbWVudC5lbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpO1xuICBjb25zdCB7d2lufSA9IGFtcEVsZW1lbnQ7XG4gIC8vIEluIGxvY2FsIGRldiBtb2RlLCBuZWl0aGVyIHRoZSBjYW5hcnkgbm9yIHByb2QgY29uZmlnIGZpbGVzIGlzIGF2YWlsYWJsZSxcbiAgLy8gc28gbWFudWFsbHkgc2V0IHRoZSBwcm9maWxpbmcgcmF0ZSwgZm9yIHRlc3RpbmcvZGV2LlxuICBpZiAoZ2V0TW9kZShhbXBFbGVtZW50LndpbikubG9jYWxEZXYgJiYgIWdldE1vZGUoYW1wRWxlbWVudC53aW4pLnRlc3QpIHtcbiAgICB0b2dnbGVFeHBlcmltZW50KHdpbiwgJ2E0YVByb2ZpbGluZ1JhdGUnLCB0cnVlLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gKHR5cGUgPT0gJ2RvdWJsZWNsaWNrJyB8fCB0eXBlID09ICdhZHNlbnNlJykgJiZcbiAgICAgIGlzRXhwZXJpbWVudE9uKHdpbiwgJ2E0YVByb2ZpbGluZ1JhdGUnKTtcbn1cblxuLyoqXG4gKiBIYXMgc2lkZS1lZmZlY3Qgb2YgaW5jcmVtZW50aW5nIGlmaSBjb3VudGVyIG9uIHdpbmRvdy5cbiAqIEBwYXJhbSB7IS4uLy4uLy4uL2V4dGVuc2lvbnMvYW1wLWE0YS8wLjEvYW1wLWE0YS5BbXBBNEF9IGE0YVxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPj19IG9wdF9leHBlcmltZW50SWRzIEFueSBleHBlcmltZW50cyBJRHMgKGluIGFkZGl0aW9uXG4gKiAgICAgdG8gdGhvc2Ugc3BlY2lmaWVkIG9uIHRoZSBhZCBlbGVtZW50KSB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGVcbiAqICAgICByZXF1ZXN0LlxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsbnVsbHxudW1iZXJ8c3RyaW5nPn0gYmxvY2sgbGV2ZWwgcGFyYW1ldGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ29vZ2xlQmxvY2tQYXJhbWV0ZXJzKGE0YSwgb3B0X2V4cGVyaW1lbnRJZHMpIHtcbiAgY29uc3Qge2VsZW1lbnQ6IGFkRWxlbWVudCwgd2lufSA9IGE0YTtcbiAgY29uc3Qgc2xvdFJlY3QgPSBhNGEuZ2V0UGFnZUxheW91dEJveCgpO1xuICBjb25zdCBpZnJhbWVEZXB0aCA9IGlmcmFtZU5lc3RpbmdEZXB0aCh3aW4pO1xuICBjb25zdCBlbmNsb3NpbmdDb250YWluZXJzID0gZ2V0RW5jbG9zaW5nQ29udGFpbmVyVHlwZXMoYWRFbGVtZW50KTtcbiAgbGV0IGVpZHMgPSBhZEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWV4cGVyaW1lbnQtaWQnKTtcbiAgaWYgKG9wdF9leHBlcmltZW50SWRzKSB7XG4gICAgZWlkcyA9IG1lcmdlRXhwZXJpbWVudElkcyhvcHRfZXhwZXJpbWVudElkcywgZWlkcyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAnYWRmJzogRG9tRmluZ2VycHJpbnQuZ2VuZXJhdGUoYWRFbGVtZW50KSxcbiAgICAnbmhkJzogaWZyYW1lRGVwdGgsXG4gICAgJ2VpZCc6IGVpZHMsXG4gICAgJ2FkeCc6IHNsb3RSZWN0LmxlZnQsXG4gICAgJ2FkeSc6IHNsb3RSZWN0LnRvcCxcbiAgICAnb2lkJzogJzInLFxuICAgICdhY3QnOiBlbmNsb3NpbmdDb250YWluZXJzLmxlbmd0aCA/IGVuY2xvc2luZ0NvbnRhaW5lcnMuam9pbigpIDogbnVsbCxcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgbWF0Y2hpbmcgdHlwaW5nIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVsZW1lbnQpOnN0cmluZ30gZ3JvdXBGblxuICogQHJldHVybiB7IVByb21pc2U8IU9iamVjdDxzdHJpbmcsIUFycmF5PCFQcm9taXNlPCEuLi8uLi8uLi9zcmMvYmFzZS1lbGVtZW50LkJhc2VFbGVtZW50Pj4+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQW1wQWRzQnlUeXBlKHdpbiwgdHlwZSwgZ3JvdXBGbikge1xuICAvLyBMb29rIGZvciBhbXAtYWQgZWxlbWVudHMgb2YgY29ycmVjdCB0eXBlIG9yIHRob3NlIGNvbnRhaW5lZCB3aXRoaW5cbiAgLy8gc3RhbmRhcmQgY29udGFpbmVyIHR5cGUuICBOb3RlIHRoYXQgZGlzcGxheSBub25lIGNvbnRhaW5lcnMgd2lsbCBub3QgYmVcbiAgLy8gaW5jbHVkZWQgYXMgdGhleSB3aWxsIG5ldmVyIGJlIG1lYXN1cmVkLlxuICAvLyBUT0RPKGtlaXRod3JpZ2h0Ym9zKTogd2hhdCBhYm91dCBzbG90cyB0aGF0IGJlY29tZSBtZWFzdXJlZCBkdWUgdG8gcmVtb3ZhbFxuICAvLyBvZiBkaXNwbGF5IG5vbmUgKGUuZy4gdXNlciByZXNpemVzIHZpZXdwb3J0IGFuZCBtZWRpYSBzZWxlY3RvciBtYWtlc1xuICAvLyB2aXNpYmxlKS5cbiAgY29uc3QgYW1wQWRTZWxlY3RvciA9XG4gICAgICByID0+IHIuZWxlbWVudC4vKk9LKi9xdWVyeVNlbGVjdG9yKGBhbXAtYWRbdHlwZT0ke3R5cGV9XWApO1xuICByZXR1cm4gU2VydmljZXMucmVzb3VyY2VzRm9yRG9jKHdpbi5kb2N1bWVudCkuZ2V0TWVhc3VyZWRSZXNvdXJjZXMod2luLFxuICAgICAgciA9PiB7XG4gICAgICAgIGNvbnN0IGlzQW1wQWRUeXBlID0gci5lbGVtZW50LnRhZ05hbWUgPT0gJ0FNUC1BRCcgJiZcbiAgICAgICAgICByLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT0gdHlwZTtcbiAgICAgICAgaWYgKGlzQW1wQWRUeXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNBbXBBZENvbnRhaW5lckVsZW1lbnQgPVxuICAgICAgICAgIE9iamVjdC5rZXlzKFZhbGlkQWRDb250YWluZXJUeXBlcykuaW5jbHVkZXMoci5lbGVtZW50LnRhZ05hbWUpICYmXG4gICAgICAgICAgISFhbXBBZFNlbGVjdG9yKHIpO1xuICAgICAgICByZXR1cm4gaXNBbXBBZENvbnRhaW5lckVsZW1lbnQ7XG4gICAgICB9KVxuICAgICAgLy8gTmVlZCB0byB3YWl0IG9uIGFueSBjb250YWluZWQgZWxlbWVudCByZXNvbHV0aW9uIGZvbGxvd2VkIGJ5IGJ1aWxkXG4gICAgICAvLyBvZiBjaGlsZCBhZC5cbiAgICAgIC50aGVuKHJlc291cmNlcyA9PiBQcm9taXNlLmFsbChyZXNvdXJjZXMubWFwKFxuICAgICAgICAgIHJlc291cmNlID0+IHtcbiAgICAgICAgICAgIGlmIChyZXNvdXJjZS5lbGVtZW50LnRhZ05hbWUgPT0gJ0FNUC1BRCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlLmVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNdXN0IGJlIGNvbnRhaW5lciBlbGVtZW50IHNvIG5lZWQgdG8gd2FpdCBmb3IgY2hpbGQgYW1wLWFkIHRvXG4gICAgICAgICAgICAvLyBiZSB1cGdyYWRlZC5cbiAgICAgICAgICAgIHJldHVybiB3aGVuVXBncmFkZWRUb0N1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZGV2KCkuYXNzZXJ0RWxlbWVudChhbXBBZFNlbGVjdG9yKHJlc291cmNlKSkpO1xuICAgICAgICAgIH0pKSlcbiAgICAgIC8vIEdyb3VwIGJ5IG5ldHdvcmtJZC5cbiAgICAgIC50aGVuKGVsZW1lbnRzID0+IGVsZW1lbnRzLnJlZHVjZSgocmVzdWx0LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGdyb3VwSWQgPSBncm91cEZuKGVsZW1lbnQpO1xuICAgICAgICAocmVzdWx0W2dyb3VwSWRdIHx8IChyZXN1bHRbZ3JvdXBJZF0gPSBbXSkpLnB1c2goZWxlbWVudC5nZXRJbXBsKCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwge30pKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyEgLi4vLi4vLi4vZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9hbXAtYTRhLkFtcEE0QX0gYTRhXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRUaW1lXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhT2JqZWN0PHN0cmluZyxudWxsfG51bWJlcnxzdHJpbmc+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdvb2dsZVBhZ2VQYXJhbWV0ZXJzKGE0YSwgc3RhcnRUaW1lKSB7XG4gIGNvbnN0IHt3aW59ID0gYTRhO1xuICBjb25zdCBhbXBEb2MgPSBhNGEuZ2V0QW1wRG9jKCk7XG4gIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgZ2V0T3JDcmVhdGVBZENpZChhbXBEb2MsICdBTVBfRUNJRF9HT09HTEUnLCAnX2dhJyksXG4gICAgU2VydmljZXMudmlld2VyRm9yRG9jKGFtcERvYykuZ2V0UmVmZXJyZXJVcmwoKV0pXG4gICAgICAudGhlbihwcm9taXNlUmVzdWx0cyA9PiB7XG4gICAgICAgIGNvbnN0IGNsaWVudElkID0gcHJvbWlzZVJlc3VsdHNbMF07XG4gICAgICAgIGNvbnN0IGRvY3VtZW50SW5mbyA9IFNlcnZpY2VzLmRvY3VtZW50SW5mb0ZvckRvYyhhbXBEb2MpO1xuICAgICAgICAvLyBSZWFkIGJ5IEdQVCBmb3IgR0EvR1BUIGludGVncmF0aW9uLlxuICAgICAgICB3aW4uZ2FHbG9iYWwgPSB3aW4uZ2FHbG9iYWwgfHxcbiAgICAgICAge2NpZDogY2xpZW50SWQsIGhpZDogZG9jdW1lbnRJbmZvLnBhZ2VWaWV3SWR9O1xuICAgICAgICBjb25zdCB7c2NyZWVufSA9IHdpbjtcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBTZXJ2aWNlcy52aWV3cG9ydEZvckRvYyhhbXBEb2MpO1xuICAgICAgICBjb25zdCB2aWV3cG9ydFJlY3QgPSB2aWV3cG9ydC5nZXRSZWN0KCk7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0U2l6ZSA9IHZpZXdwb3J0LmdldFNpemUoKTtcbiAgICAgICAgY29uc3QgdmlzaWJpbGl0eVN0YXRlID0gU2VydmljZXMudmlld2VyRm9yRG9jKGFtcERvYylcbiAgICAgICAgICAgIC5nZXRWaXNpYmlsaXR5U3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAnaXNfYW1wJzogYTRhLmlzWGhyQWxsb3dlZCgpID9cbiAgICAgICAgICAgIEFtcEFkSW1wbGVtZW50YXRpb24uQU1QX0FEX1hIUl9UT19JRlJBTUVfT1JfQU1QIDpcbiAgICAgICAgICAgIEFtcEFkSW1wbGVtZW50YXRpb24uQU1QX0FEX0lGUkFNRV9HRVQsXG4gICAgICAgICAgJ2FtcF92JzogJyRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJCcsXG4gICAgICAgICAgJ2RfaW1wJzogJzEnLFxuICAgICAgICAgICdjJzogZ2V0Q29ycmVsYXRvcih3aW4sIGFtcERvYywgY2xpZW50SWQpLFxuICAgICAgICAgICdnYV9jaWQnOiB3aW4uZ2FHbG9iYWwuY2lkIHx8IG51bGwsXG4gICAgICAgICAgJ2dhX2hpZCc6IHdpbi5nYUdsb2JhbC5oaWQgfHwgbnVsbCxcbiAgICAgICAgICAnZHQnOiBzdGFydFRpbWUsXG4gICAgICAgICAgJ2Jpdyc6IHZpZXdwb3J0UmVjdC53aWR0aCxcbiAgICAgICAgICAnYmloJzogdmlld3BvcnRSZWN0LmhlaWdodCxcbiAgICAgICAgICAndV9hdyc6IHNjcmVlbiA/IHNjcmVlbi5hdmFpbFdpZHRoIDogbnVsbCxcbiAgICAgICAgICAndV9haCc6IHNjcmVlbiA/IHNjcmVlbi5hdmFpbEhlaWdodCA6IG51bGwsXG4gICAgICAgICAgJ3VfY2QnOiBzY3JlZW4gPyBzY3JlZW4uY29sb3JEZXB0aCA6IG51bGwsXG4gICAgICAgICAgJ3Vfdyc6IHNjcmVlbiA/IHNjcmVlbi53aWR0aCA6IG51bGwsXG4gICAgICAgICAgJ3VfaCc6IHNjcmVlbiA/IHNjcmVlbi5oZWlnaHQgOiBudWxsLFxuICAgICAgICAgICd1X3R6JzogLW5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSxcbiAgICAgICAgICAndV9oaXMnOiBnZXRIaXN0b3J5TGVuZ3RoKHdpbiksXG4gICAgICAgICAgJ2lzdyc6IHdpbiAhPSB3aW4udG9wID8gdmlld3BvcnRTaXplLndpZHRoIDogbnVsbCxcbiAgICAgICAgICAnaXNoJzogd2luICE9IHdpbi50b3AgPyB2aWV3cG9ydFNpemUuaGVpZ2h0IDogbnVsbCxcbiAgICAgICAgICAnYXJ0JzogZ2V0QW1wUnVudGltZVR5cGVQYXJhbWV0ZXIod2luKSxcbiAgICAgICAgICAndmlzJzogdmlzaWJpbGl0eVN0YXRlQ29kZXNbdmlzaWJpbGl0eVN0YXRlXSB8fCAnMCcsXG4gICAgICAgICAgJ3Njcl94Jzogdmlld3BvcnQuZ2V0U2Nyb2xsTGVmdCgpLFxuICAgICAgICAgICdzY3JfeSc6IHZpZXdwb3J0LmdldFNjcm9sbFRvcCgpLFxuICAgICAgICAgICdiYyc6IGdldEJyb3dzZXJDYXBhYmlsaXRpZXNCaXRtYXAod2luKSB8fCBudWxsLFxuICAgICAgICAgICdkZWJ1Z19leHBlcmltZW50X2lkJzpcbiAgICAgICAgICAgICAgKC8oPzojfCwpZGVpZD0oW1xcZCxdKykvaS5leGVjKHdpbi5sb2NhdGlvbi5oYXNoKSB8fCBbXSlbMV0gfHxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgJ3VybCc6IGRvY3VtZW50SW5mby5jYW5vbmljYWxVcmwsXG4gICAgICAgICAgJ3RvcCc6IHdpbiAhPSB3aW4udG9wID8gdG9wV2luZG93VXJsT3JEb21haW4od2luKSA6IG51bGwsXG4gICAgICAgICAgJ2xvYyc6IHdpbi5sb2NhdGlvbi5ocmVmID09IGRvY3VtZW50SW5mby5jYW5vbmljYWxVcmwgP1xuICAgICAgICAgICAgbnVsbCA6IHdpbi5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICdyZWYnOiBwcm9taXNlUmVzdWx0c1sxXSB8fCBudWxsLFxuICAgICAgICB9O1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshLi4vLi4vLi4vZXh0ZW5zaW9ucy9hbXAtYTRhLzAuMS9hbXAtYTRhLkFtcEE0QX0gYTRhXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVybFxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0VGltZVxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZyxudWxsfG51bWJlcnxzdHJpbmc+fSBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+PX0gb3B0X2V4cGVyaW1lbnRJZHMgQW55IGV4cGVyaW1lbnRzIElEcyAoaW4gYWRkaXRpb25cbiAqICAgICB0byB0aG9zZSBzcGVjaWZpZWQgb24gdGhlIGFkIGVsZW1lbnQpIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZVxuICogICAgIHJlcXVlc3QuXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxzdHJpbmc+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ29vZ2xlQWRVcmwoXG4gIGE0YSwgYmFzZVVybCwgc3RhcnRUaW1lLCBwYXJhbWV0ZXJzLCBvcHRfZXhwZXJpbWVudElkcykge1xuICAvLyBUT0RPOiBNYXliZSBhZGQgY2hlY2tzIGluIGNhc2UgdGhlc2UgcHJvbWlzZXMgZmFpbC5cbiAgY29uc3QgYmxvY2tMZXZlbFBhcmFtZXRlcnMgPSBnb29nbGVCbG9ja1BhcmFtZXRlcnMoYTRhLCBvcHRfZXhwZXJpbWVudElkcyk7XG4gIHJldHVybiBnb29nbGVQYWdlUGFyYW1ldGVycyhhNGEsIHN0YXJ0VGltZSlcbiAgICAgIC50aGVuKHBhZ2VMZXZlbFBhcmFtZXRlcnMgPT4ge1xuICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtZXRlcnMsIGJsb2NrTGV2ZWxQYXJhbWV0ZXJzLCBwYWdlTGV2ZWxQYXJhbWV0ZXJzKTtcbiAgICAgICAgcmV0dXJuIHRydW5jQW5kVGltZVVybChiYXNlVXJsLCBwYXJhbWV0ZXJzLCBzdGFydFRpbWUpO1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVcmxcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsbnVsbHxudW1iZXJ8c3RyaW5nPn0gcGFyYW1ldGVyc1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0VGltZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNBbmRUaW1lVXJsKGJhc2VVcmwsIHBhcmFtZXRlcnMsIHN0YXJ0VGltZSkge1xuICByZXR1cm4gYnVpbGRVcmwoXG4gICAgICBiYXNlVXJsLCBwYXJhbWV0ZXJzLCBNQVhfVVJMX0xFTkdUSCAtIDEwLCBUUlVOQ0FUSU9OX1BBUkFNKVxuICAgICsgJyZkdGQ9JyArIGVsYXBzZWRUaW1lV2l0aENlaWxpbmcoRGF0ZS5ub3coKSwgc3RhcnRUaW1lKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBpZnJhbWVOZXN0aW5nRGVwdGgod2luKSB7XG4gIGxldCB3ID0gd2luO1xuICBsZXQgZGVwdGggPSAwO1xuICB3aGlsZSAodyAhPSB3LnBhcmVudCAmJiBkZXB0aCA8IDEwMCkge1xuICAgIHcgPSB3LnBhcmVudDtcbiAgICBkZXB0aCsrO1xuICB9XG4gIGRldigpLmFzc2VydCh3ID09IHdpbi50b3ApO1xuICByZXR1cm4gZGVwdGg7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeUxlbmd0aCh3aW4pIHtcbiAgLy8gV2UgaGF2ZSBzZWVuIGNhc2VzIHdoZXJlIGFjY2Vzc2luZyBoaXN0b3J5IGxlbmd0aCBjYXVzZXMgZXJyb3JzLlxuICB0cnkge1xuICAgIHJldHVybiB3aW4uaGlzdG9yeS5sZW5ndGg7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ30gaG9zdG5hbWUgcG9ydGlvbiBvZiB1cmxcbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEhvc3QodXJsKSB7XG4gIHJldHVybiAoL14oPzpodHRwcz86XFwvXFwvKT8oW15cXC9cXD86XSspL2kuZXhlYyh1cmwpIHx8IFtdKVsxXSB8fCB1cmw7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvcFdpbmRvd1VybE9yRG9tYWluKHdpbikge1xuICBjb25zdCB7YW5jZXN0b3JPcmlnaW5zfSA9IHdpbi5sb2NhdGlvbjtcbiAgaWYgKGFuY2VzdG9yT3JpZ2lucykge1xuICAgIGNvbnN0IHtvcmlnaW59ID0gd2luLmxvY2F0aW9uO1xuICAgIGNvbnN0IHRvcE9yaWdpbiA9IGFuY2VzdG9yT3JpZ2luc1thbmNlc3Rvck9yaWdpbnMubGVuZ3RoIC0gMV07XG4gICAgaWYgKG9yaWdpbiA9PSB0b3BPcmlnaW4pIHtcbiAgICAgIHJldHVybiB3aW4udG9wLmxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIH1cbiAgICBjb25zdCBzZWNvbmRGcm9tVG9wID0gc2Vjb25kV2luZG93RnJvbVRvcCh3aW4pO1xuICAgIGlmIChzZWNvbmRGcm9tVG9wID09IHdpbiB8fFxuICAgICAgICBvcmlnaW4gPT0gYW5jZXN0b3JPcmlnaW5zW2FuY2VzdG9yT3JpZ2lucy5sZW5ndGggLSAyXSkge1xuICAgICAgcmV0dXJuIGV4dHJhY3RIb3N0KHNlY29uZEZyb21Ub3AuLypPSyovZG9jdW1lbnQucmVmZXJyZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0cmFjdEhvc3QodG9wT3JpZ2luKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHdpbi50b3AubG9jYXRpb24uaG9zdG5hbWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBjb25zdCBzZWNvbmRGcm9tVG9wID0gc2Vjb25kV2luZG93RnJvbVRvcCh3aW4pO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZXh0cmFjdEhvc3Qoc2Vjb25kRnJvbVRvcC4vKk9LKi9kb2N1bWVudC5yZWZlcnJlcik7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshV2luZG93fVxuICovXG5mdW5jdGlvbiBzZWNvbmRXaW5kb3dGcm9tVG9wKHdpbikge1xuICBsZXQgc2Vjb25kRnJvbVRvcCA9IHdpbjtcbiAgbGV0IGRlcHRoID0gMDtcbiAgd2hpbGUgKHNlY29uZEZyb21Ub3AucGFyZW50ICE9IHNlY29uZEZyb21Ub3AucGFyZW50LnBhcmVudCAmJlxuICAgICAgICBkZXB0aCA8IDEwMCkge1xuICAgIHNlY29uZEZyb21Ub3AgPSBzZWNvbmRGcm9tVG9wLnBhcmVudDtcbiAgICBkZXB0aCsrO1xuICB9XG4gIGRldigpLmFzc2VydChzZWNvbmRGcm9tVG9wLnBhcmVudCA9PSB3aW4udG9wKTtcbiAgcmV0dXJuIHNlY29uZEZyb21Ub3A7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICogQHJldHVybiB7KG51bWJlcnxzdHJpbmcpfVxuICovXG5mdW5jdGlvbiBlbGFwc2VkVGltZVdpdGhDZWlsaW5nKHRpbWUsIHN0YXJ0KSB7XG4gIGNvbnN0IGR1cmF0aW9uID0gdGltZSAtIHN0YXJ0O1xuICBpZiAoZHVyYXRpb24gPj0gMWU2KSB7XG4gICAgcmV0dXJuICdNJztcbiAgfSBlbHNlIGlmIChkdXJhdGlvbiA+PSAwKSB7XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xuICB9XG4gIHJldHVybiAnLU0nO1xufVxuXG4vKipcbiAqIGBub2RlT3JEb2NgIG11c3QgYmUgcGFzc2VkIGZvciBjb3JyZWN0IGJlaGF2aW9yIGluIHNoYWRvdyBBTVAgKFBXQSkgY2FzZS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuLi8uLi8uLi9zcmMvc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfY2lkXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZWxhdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29ycmVsYXRvcih3aW4sIGVsZW1lbnRPckFtcERvYywgb3B0X2NpZCkge1xuICBpZiAoIXdpbi5hbXBBZFBhZ2VDb3JyZWxhdG9yKSB7XG4gICAgd2luLmFtcEFkUGFnZUNvcnJlbGF0b3IgPSBpc0V4cGVyaW1lbnRPbih3aW4sICdleHAtbmV3LWNvcnJlbGF0b3InKSA/XG4gICAgICBNYXRoLmZsb29yKDQ1MDM1OTk2MjczNzA0OTYgKiBNYXRoLnJhbmRvbSgpKSA6XG4gICAgICBtYWtlQ29ycmVsYXRvcihcbiAgICAgICAgICBTZXJ2aWNlcy5kb2N1bWVudEluZm9Gb3JEb2MoZWxlbWVudE9yQW1wRG9jKS5wYWdlVmlld0lkLCBvcHRfY2lkKTtcbiAgfVxuICByZXR1cm4gd2luLmFtcEFkUGFnZUNvcnJlbGF0b3I7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhZ2VWaWV3SWRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2NsaWVudElkXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIG1ha2VDb3JyZWxhdG9yKHBhZ2VWaWV3SWQsIG9wdF9jbGllbnRJZCkge1xuICBjb25zdCBwYWdlVmlld0lkTnVtZXJpYyA9IE51bWJlcihwYWdlVmlld0lkIHx8IDApO1xuICBpZiAob3B0X2NsaWVudElkKSB7XG4gICAgcmV0dXJuIHBhZ2VWaWV3SWROdW1lcmljICsgKChvcHRfY2xpZW50SWQucmVwbGFjZSgvXFxEL2csICcnKSAlIDFlNikgKiAxZTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIHRoaXMgY2FzZSwgcGFnZVZpZXdJZE51bWVyaWMgaXMgb25seSA0IGRpZ2l0cyA9PiB0b28gbG93IGVudHJvcHlcbiAgICAvLyB0byBiZSB1c2VmdWwgYXMgYSBwYWdlIGNvcnJlbGF0b3IuICBTbyBzeW50aGVzaXplIG9uZSBmcm9tIHNjcmF0Y2guXG4gICAgLy8gNDUwMzU5OTYyNzM3MDQ5NiA9PSAyXjUyLiAgVGhlIGd1YXJhbnRlZWQgcmFuZ2Ugb2YgSlMgTnVtYmVyIGlzIGF0IGxlYXN0XG4gICAgLy8gMl41MyAtIDEuXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoNDUwMzU5OTYyNzM3MDQ5NiAqIE1hdGgucmFuZG9tKCkpO1xuICB9XG59XG5cblxuLyoqXG4gKiBDb2xsZWN0IGFkZGl0aW9uYWwgZGltZW5zaW9ucyBmb3IgdGhlIGJyZGltIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luIFRoZSB3aW5kb3cgZm9yIHdoaWNoIHdlIHJlYWQgdGhlIGJyb3dzZXIgZGltZW5zaW9ucy5cbiAqIEBwYXJhbSB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfXxudWxsfSB2aWV3cG9ydFNpemVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkaXRpb25hbERpbWVuc2lvbnMod2luLCB2aWV3cG9ydFNpemUpIHtcbiAgLy8gU29tZSBicm93c2VycyB0aHJvdyBlcnJvcnMgb24gc29tZSBvZiB0aGVzZS5cbiAgbGV0IHNjcmVlblgsIHNjcmVlblksIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBpbm5lcldpZHRoLCBpbm5lckhlaWdodDtcbiAgdHJ5IHtcbiAgICBzY3JlZW5YID0gd2luLnNjcmVlblg7XG4gICAgc2NyZWVuWSA9IHdpbi5zY3JlZW5ZO1xuICB9IGNhdGNoIChlKSB7fVxuICB0cnkge1xuICAgIG91dGVyV2lkdGggPSB3aW4ub3V0ZXJXaWR0aDtcbiAgICBvdXRlckhlaWdodCA9IHdpbi5vdXRlckhlaWdodDtcbiAgfSBjYXRjaCAoZSkge31cbiAgdHJ5IHtcbiAgICBpbm5lcldpZHRoID0gdmlld3BvcnRTaXplLndpZHRoO1xuICAgIGlubmVySGVpZ2h0ID0gdmlld3BvcnRTaXplLmhlaWdodDtcbiAgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIFt3aW4uc2NyZWVuTGVmdCxcbiAgICB3aW4uc2NyZWVuVG9wLFxuICAgIHNjcmVlblgsXG4gICAgc2NyZWVuWSxcbiAgICB3aW4uc2NyZWVuID8gd2luLnNjcmVlbi5hdmFpbFdpZHRoIDogdW5kZWZpbmVkLFxuICAgIHdpbi5zY3JlZW4gPyB3aW4uc2NyZWVuLmF2YWlsVG9wIDogdW5kZWZpbmVkLFxuICAgIG91dGVyV2lkdGgsXG4gICAgb3V0ZXJIZWlnaHQsXG4gICAgaW5uZXJXaWR0aCxcbiAgICBpbm5lckhlaWdodF0uam9pbigpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW1wLWFuYWx5dGljcyBjb25maWcgZm9yIGEgbmV3IENTSSB0cmlnZ2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IG9uIFRoZSBuYW1lIG9mIHRoZSBhbmFseXRpY3MgdHJpZ2dlci5cbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IHBhcmFtcyBQYXJhbXMgdG8gYmUgaW5jbHVkZWQgb24gdGhlIHBpbmcuXG4gKiBAcmV0dXJuIHshSnNvbk9iamVjdH1cbiAqL1xuZnVuY3Rpb24gY3NpVHJpZ2dlcihvbiwgcGFyYW1zKSB7XG4gIHJldHVybiBkaWN0KHtcbiAgICAnb24nOiBvbixcbiAgICAncmVxdWVzdCc6ICdjc2knLFxuICAgICdzYW1wbGVTcGVjJzoge1xuICAgICAgLy8gUGluZ3MgYXJlIHNhbXBsZWQgb24gYSBwZXItcGFnZXZpZXcgYmFzaXMuIEEgcHJlZml4IGlzIGluY2x1ZGVkIGluIHRoZVxuICAgICAgLy8gc2FtcGxlT24gc3BlYyBzbyB0aGF0IHRoZSBoYXNoIGlzIG9ydGhvZ29uYWwgdG8gYW55IG90aGVyIHNhbXBsaW5nIGluXG4gICAgICAvLyBhbXAuXG4gICAgICAnc2FtcGxlT24nOiAnYTRhLWNzaS0ke3BhZ2VWaWV3SWR9JyxcbiAgICAgICd0aHJlc2hvbGQnOiAxLCAvLyAxJSBzYW1wbGVcbiAgICB9LFxuICAgICdzZWxlY3Rvcic6ICdhbXAtYWQnLFxuICAgICdzZWxlY3Rpb25NZXRob2QnOiAnY2xvc2VzdCcsXG4gICAgJ2V4dHJhVXJsUGFyYW1zJzogcGFyYW1zLFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFtcC1hbmFseXRpY3MgY29uZmlnIGZvciBHb29nbGUgYWRzIG5ldHdvcmsgaW1wbHMuXG4gKiBAcmV0dXJuIHshSnNvbk9iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENzaUFtcEFuYWx5dGljc0NvbmZpZygpIHtcbiAgcmV0dXJuIGRpY3Qoe1xuICAgICdyZXF1ZXN0cyc6IHtcbiAgICAgICdjc2knOiAnaHR0cHM6Ly9jc2kuZ3N0YXRpYy5jb20vY3NpPycsXG4gICAgfSxcbiAgICAndHJhbnNwb3J0Jzogeyd4aHJwb3N0JzogZmFsc2V9LFxuICAgICd0cmlnZ2Vycyc6IHtcbiAgICAgICdhZFJlcXVlc3RTdGFydCc6IGNzaVRyaWdnZXIoJ2FkLXJlcXVlc3Qtc3RhcnQnLCB7XG4gICAgICAgIC8vIGFmcyA9PiBhZCBmZXRjaCBzdGFydFxuICAgICAgICAnbWV0LmE0YSc6ICdhZnNfbHZ0LiR7dmlld2VyTGFzdFZpc2libGVUaW1lfX5hZnMuJHt0aW1lfScsXG4gICAgICB9KSxcbiAgICAgICdhZFJlc3BvbnNlRW5kJzogY3NpVHJpZ2dlcignYWQtcmVzcG9uc2UtZW5kJywge1xuICAgICAgICAvLyBhZmUgPT4gYWQgZmV0Y2ggZW5kXG4gICAgICAgICdtZXQuYTRhJzogJ2FmZS4ke3RpbWV9JyxcbiAgICAgIH0pLFxuICAgICAgJ2FkUmVuZGVyU3RhcnQnOiBjc2lUcmlnZ2VyKCdhZC1yZW5kZXItc3RhcnQnLCB7XG4gICAgICAgIC8vIGFzdCA9PiBhZCBzY2hlZHVsZSB0aW1lXG4gICAgICAgIC8vIGFycyA9PiBhZCByZW5kZXIgc3RhcnRcbiAgICAgICAgJ21ldC5hNGEnOlxuICAgICAgICAgICAgJ2FzdC4ke3NjaGVkdWxlVGltZX1+YXJzX2x2dC4ke3ZpZXdlckxhc3RWaXNpYmxlVGltZX1+YXJzLiR7dGltZX0nLFxuICAgICAgICAncXFpZCc6ICcke3FxaWR9JyxcbiAgICAgIH0pLFxuICAgICAgJ2FkSWZyYW1lTG9hZGVkJzogY3NpVHJpZ2dlcignYWQtaWZyYW1lLWxvYWRlZCcsIHtcbiAgICAgICAgLy8gYWlsID0+IGFkIGlmcmFtZSBsb2FkZWRcbiAgICAgICAgJ21ldC5hNGEnOiAnYWlsLiR7dGltZX0nLFxuICAgICAgfSksXG4gICAgfSxcbiAgICAnZXh0cmFVcmxQYXJhbXMnOiB7XG4gICAgICAncyc6ICdhbXBhZCcsXG4gICAgICAnY3R4JzogJzInLFxuICAgICAgJ2MnOiAnJHtjb3JyZWxhdG9yfScsXG4gICAgICAnc2xvdElkJzogJyR7c2xvdElkfScsXG4gICAgICAvLyBUaW1lIHRoYXQgdGhlIGJlYWNvbiB3YXMgYWN0dWFsbHkgc2VudC4gTm90ZSB0aGF0IHRoZXJlIGNhbiBiZSBkZWxheXNcbiAgICAgIC8vIGJldHdlZW4gdGhlIHRpbWUgYXQgd2hpY2ggdGhlIGV2ZW50IGlzIGZpcmVkIGFuZCB3aGVuICR7bm93TXN9IGlzXG4gICAgICAvLyBldmFsdWF0ZWQgd2hlbiB0aGUgVVJMIGlzIGJ1aWx0IGJ5IGFtcC1hbmFseXRpY3MuXG4gICAgICAncHVpZCc6ICcke3JlcXVlc3RDb3VudH1+JHt0aW1lc3RhbXB9JyxcbiAgICB9LFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHZhcmlhYmxlcyB0byBiZSBpbmNsdWRlZCBpbiB0aGUgYW1wLWFuYWx5dGljcyBldmVudCBmb3IgQTRBLlxuICogQHBhcmFtIHtzdHJpbmd9IGFuYWx5dGljc1RyaWdnZXIgVGhlIG5hbWUgb2YgdGhlIGFuYWx5dGljcyB0cmlnZ2VyLlxuICogQHBhcmFtIHshQU1QLkJhc2VFbGVtZW50fSBhNGEgVGhlIEE0QSBlbGVtZW50LlxuICogQHBhcmFtIHs/c3RyaW5nfSBxcWlkIFRoZSBxdWVyeSBJRCBvciBudWxsIGlmIHRoZSBxdWVyeSBJRCBoYXMgbm90IGJlZW4gc2V0XG4gKiAgICAgeWV0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3NpQW1wQW5hbHl0aWNzVmFyaWFibGVzKGFuYWx5dGljc1RyaWdnZXIsIGE0YSwgcXFpZCkge1xuICBjb25zdCB7d2lufSA9IGE0YTtcbiAgY29uc3QgYW1wZG9jID0gYTRhLmdldEFtcERvYygpO1xuICBjb25zdCB2aWV3ZXIgPSBTZXJ2aWNlcy52aWV3ZXJGb3JEb2MoYW1wZG9jKTtcbiAgY29uc3QgbmF2U3RhcnQgPSBnZXROYXZTdGFydCh3aW4pO1xuICBjb25zdCB2YXJzID0ge1xuICAgICdjb3JyZWxhdG9yJzogZ2V0Q29ycmVsYXRvcih3aW4sIGFtcGRvYyksXG4gICAgJ3Nsb3RJZCc6IGE0YS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtc2xvdC1pbmRleCcpLFxuICAgICd2aWV3ZXJMYXN0VmlzaWJsZVRpbWUnOiB2aWV3ZXIuZ2V0TGFzdFZpc2libGVUaW1lKCkgLSBuYXZTdGFydCxcbiAgfTtcbiAgaWYgKHFxaWQpIHtcbiAgICB2YXJzWydxcWlkJ10gPSBxcWlkO1xuICB9XG4gIGlmIChhbmFseXRpY3NUcmlnZ2VyID09ICdhZC1yZW5kZXItc3RhcnQnKSB7XG4gICAgdmFyc1snc2NoZWR1bGVUaW1lJ10gPSBhNGEuZWxlbWVudC5sYXlvdXRTY2hlZHVsZVRpbWUgLSBuYXZTdGFydDtcbiAgfVxuICByZXR1cm4gdmFycztcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyBjb25maWd1cmF0aW9uIHVzZWQgdG8gYnVpbGQgYW1wLWFuYWx5dGljcyBlbGVtZW50IGZvciBhY3RpdmUgdmlldy5cbiAqXG4gKiBAcGFyYW0geyEuLi8uLi8uLi9leHRlbnNpb25zL2FtcC1hNGEvMC4xL2FtcC1hNGEuQW1wQTRBfSBhNGFcbiAqIEBwYXJhbSB7IS4uLy4uLy4uL3NyYy91dGlscy94aHItdXRpbHMuRmV0Y2hSZXNwb25zZUhlYWRlcnN9IHJlc3BvbnNlSGVhZGVyc1xuICogICBYSFIgc2VydmljZSBGZXRjaFJlc3BvbnNlSGVhZGVycyBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzcG9uc2VcbiAqICAgaGVhZGVycy5cbiAqIEByZXR1cm4gez9Kc29uT2JqZWN0fSBjb25maWcgb3IgbnVsbCBpZiBpbnZhbGlkL21pc3NpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0QW1wQW5hbHl0aWNzQ29uZmlnKGE0YSwgcmVzcG9uc2VIZWFkZXJzKSB7XG4gIGlmICghcmVzcG9uc2VIZWFkZXJzLmhhcyhBTVBfQU5BTFlUSUNTX0hFQURFUikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IGFuYWx5dGljc0NvbmZpZyA9XG4gICAgICAgIHBhcnNlSnNvbihyZXNwb25zZUhlYWRlcnMuZ2V0KEFNUF9BTkFMWVRJQ1NfSEVBREVSKSk7XG4gICAgZGV2KCkuYXNzZXJ0KEFycmF5LmlzQXJyYXkoYW5hbHl0aWNzQ29uZmlnWyd1cmwnXSkpO1xuICAgIGNvbnN0IHVybHMgPSBhbmFseXRpY3NDb25maWdbJ3VybCddO1xuICAgIGlmICghdXJscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IC8qKiBAdHlwZSB7SnNvbk9iamVjdH0qLyAoe1xuICAgICAgJ3RyYW5zcG9ydCc6IHsnYmVhY29uJzogZmFsc2UsICd4aHJwb3N0JzogZmFsc2V9LFxuICAgICAgJ3RyaWdnZXJzJzoge1xuICAgICAgICAnY29udGludW91c1Zpc2libGUnOiB7XG4gICAgICAgICAgJ29uJzogJ3Zpc2libGUnLFxuICAgICAgICAgICd2aXNpYmlsaXR5U3BlYyc6IHtcbiAgICAgICAgICAgICdzZWxlY3Rvcic6ICdhbXAtYWQnLFxuICAgICAgICAgICAgJ3NlbGVjdGlvbk1ldGhvZCc6ICdjbG9zZXN0JyxcbiAgICAgICAgICAgICd2aXNpYmxlUGVyY2VudGFnZU1pbic6IDUwLFxuICAgICAgICAgICAgJ2NvbnRpbnVvdXNUaW1lTWluJzogMTAwMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIERpc2NvdmVyIGFuZCBidWlsZCB2aXNpYmlsaXR5IGVuZHBvaW50cy5cbiAgICBjb25zdCByZXF1ZXN0cyA9IGRpY3QoKTtcbiAgICBmb3IgKGxldCBpZHggPSAxOyBpZHggPD0gdXJscy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAvLyBUT0RPOiBFbnN1cmUgdXJsIGlzIHZhbGlkIGFuZCBub3QgZnJlZWZvcm0gSlM/XG4gICAgICByZXF1ZXN0c1tgdmlzaWJpbGl0eSR7aWR4fWBdID0gYCR7dXJsc1tpZHggLSAxXX1gO1xuICAgIH1cbiAgICAvLyBTZWN1cml0eSByZXZpZXcgbmVlZGVkIGhlcmUuXG4gICAgY29uZmlnWydyZXF1ZXN0cyddID0gcmVxdWVzdHM7XG4gICAgY29uZmlnWyd0cmlnZ2VycyddWydjb250aW51b3VzVmlzaWJsZSddWydyZXF1ZXN0J10gPVxuICAgICAgICBPYmplY3Qua2V5cyhyZXF1ZXN0cyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGV2KCkuZXJyb3IoJ0FNUC1BNEEnLCAnSW52YWxpZCBhbmFseXRpY3MnLCBlcnIsXG4gICAgICAgIHJlc3BvbnNlSGVhZGVycy5nZXQoQU1QX0FOQUxZVElDU19IRUFERVIpKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBBZGQgbmV3IGV4cGVyaW1lbnQgSURzIHRvIGEgKHBvc3NpYmx5IGVtcHR5KSBleGlzdGluZyBzZXQgb2YgZXhwZXJpbWVudCBJRHMuXG4gKiBUaGUge0Bjb2RlIGN1cnJlbnRJZFN0cmluZ30gbWF5IGJlIHtAY29kZSBudWxsfSBvciB7QGNvZGUgJyd9LCBidXQgaWYgaXQgaXNcbiAqIHBvcHVsYXRlZCwgaXQgbXVzdCBjb250YWluIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgaW50ZWdlciBleHBlcmltZW50IElEc1xuICogKHBlciB7QGNvZGUgcGFyc2VFeHBlcmltZW50SWRzKCl9KS4gIFJldHVybnMgdGhlIG5ldyBzZXQgb2YgSURzLCBlbmNvZGVkXG4gKiBhcyBhIGNvbW1hLXNlcGFyYXRlZCBsaXN0LiAgRG9lcyBub3QgZGUtZHVwbGljYXRlIElEIGVudHJpZXMuXG4gKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gbmV3SWRzIElEcyB0byBtZXJnZSBpbi4gU2hvdWxkIGNvbnRhaW4gc3RyaW5naWZpZWRcbiAqICAgICBpbnRlZ2VyIChiYXNlIDEwKSBleHBlcmltZW50IElEcy5cbiAqIEBwYXJhbSB7P3N0cmluZ30gY3VycmVudElkU3RyaW5nICBJZiBwcmVzZW50LCBhIHN0cmluZyBjb250YWluaW5nIGFcbiAqICAgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgaW50ZWdlciBleHBlcmltZW50IElEcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gIE5ldyBleHBlcmltZW50IGxpc3Qgc3RyaW5nLCBpbmNsdWRpbmcgbmV3SWQgaWZmIGl0IGlzXG4gKiAgIGEgdmFsaWQgKGludGVnZXIpIGV4cGVyaW1lbnQgSUQuXG4gKiBAc2VlIHBhcnNlRXhwZXJpbWVudElkcywgdmFsaWRhdGVFeHBlcmltZW50SWRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUV4cGVyaW1lbnRJZHMobmV3SWRzLCBjdXJyZW50SWRTdHJpbmcpIHtcbiAgY29uc3QgbmV3SWRTdHJpbmcgPSBuZXdJZHMuZmlsdGVyKG5ld0lkID0+IE51bWJlcihuZXdJZCkpLmpvaW4oJywnKTtcbiAgY3VycmVudElkU3RyaW5nID0gY3VycmVudElkU3RyaW5nIHx8ICcnO1xuICByZXR1cm4gY3VycmVudElkU3RyaW5nICsgKGN1cnJlbnRJZFN0cmluZyAmJiBuZXdJZFN0cmluZyA/ICcsJyA6ICcnKVxuICAgICAgKyBuZXdJZFN0cmluZztcbn1cblxuLyoqXG4gKiBBZGRzIHR3byBDU0kgc2lnbmFscyB0byB0aGUgZ2l2ZW4gYW1wLWFuYWx5dGljcyBjb25maWd1cmF0aW9uIG9iamVjdCwgb25lXG4gKiBmb3IgcmVuZGVyLXN0YXJ0LCBhbmQgb25lIGZvciBpbmktbG9hZC5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBUaGUgYWQgc2xvdC5cbiAqIEBwYXJhbSB7IUpzb25PYmplY3R9IGNvbmZpZyBUaGUgb3JpZ2luYWwgY29uZmlnIG9iamVjdC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gcXFpZFxuICogQHBhcmFtIHtib29sZWFufSBpc1ZlcmlmaWVkQW1wQ3JlYXRpdmVcbiAqIEByZXR1cm4gez9Kc29uT2JqZWN0fSBjb25maWcgb3IgbnVsbCBpZiBpbnZhbGlkL21pc3NpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRDc2lTaWduYWxzVG9BbXBBbmFseXRpY3NDb25maWcoXG4gIHdpbiwgZWxlbWVudCwgY29uZmlnLCBxcWlkLCBpc1ZlcmlmaWVkQW1wQ3JlYXRpdmUpIHtcbiAgLy8gQWRkIENTSSBwaW5nYmFja3MuXG4gIGNvbnN0IGNvcnJlbGF0b3IgPSBnZXRDb3JyZWxhdG9yKHdpbiwgZWxlbWVudCk7XG4gIGNvbnN0IHNsb3RJZCA9IE51bWJlcihlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtc2xvdC1pbmRleCcpKTtcbiAgY29uc3QgZWlkcyA9IGVuY29kZVVSSUNvbXBvbmVudChcbiAgICAgIGVsZW1lbnQuZ2V0QXR0cmlidXRlKEVYUEVSSU1FTlRfQVRUUklCVVRFKSk7XG4gIGNvbnN0IGFkVHlwZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gIGNvbnN0IGluaXRUaW1lID1cbiAgICAgIE51bWJlcihnZXRUaW1pbmdEYXRhU3luYyh3aW4sICduYXZpZ2F0aW9uU3RhcnQnKSB8fCBEYXRlLm5vdygpKTtcbiAgY29uc3QgZGVsdGFUaW1lID0gTWF0aC5yb3VuZCh3aW4ucGVyZm9ybWFuY2UgJiYgd2luLnBlcmZvcm1hbmNlLm5vdyA/XG4gICAgd2luLnBlcmZvcm1hbmNlLm5vdygpIDogKERhdGUubm93KCkgLSBpbml0VGltZSkpO1xuICBjb25zdCBiYXNlQ3NpVXJsID0gJ2h0dHBzOi8vY3NpLmdzdGF0aWMuY29tL2NzaT9zPWE0YScgK1xuICAgICAgYCZjPSR7Y29ycmVsYXRvcn0mc2xvdElkPSR7c2xvdElkfSZxcWlkLiR7c2xvdElkfT0ke3FxaWR9YCArXG4gICAgICBgJmR0PSR7aW5pdFRpbWV9YCArXG4gICAgICAoZWlkcyAhPSAnbnVsbCcgPyBgJmUuJHtzbG90SWR9PSR7ZWlkc31gIDogJycpICtcbiAgICAgIGAmcmxzPSRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJCZhZHQuJHtzbG90SWR9PSR7YWRUeXBlfWA7XG4gIGNvbnN0IGlzQW1wU3VmZml4ID0gaXNWZXJpZmllZEFtcENyZWF0aXZlID8gJ0ZyaWVuZGx5JyA6ICdDcm9zc0RvbWFpbic7XG4gIGNvbmZpZ1sndHJpZ2dlcnMnXVsnY29udGludW91c1Zpc2libGVJbmlMb2FkJ10gPSB7XG4gICAgJ29uJzogJ2luaS1sb2FkJyxcbiAgICAnc2VsZWN0b3InOiAnYW1wLWFkJyxcbiAgICAnc2VsZWN0aW9uTWV0aG9kJzogJ2Nsb3Nlc3QnLFxuICAgICdyZXF1ZXN0JzogJ2luaUxvYWRDc2knLFxuICB9O1xuICBjb25maWdbJ3RyaWdnZXJzJ11bJ2NvbnRpbnVvdXNWaXNpYmxlUmVuZGVyU3RhcnQnXSA9IHtcbiAgICAnb24nOiAncmVuZGVyLXN0YXJ0JyxcbiAgICAnc2VsZWN0b3InOiAnYW1wLWFkJyxcbiAgICAnc2VsZWN0aW9uTWV0aG9kJzogJ2Nsb3Nlc3QnLFxuICAgICdyZXF1ZXN0JzogJ3JlbmRlclN0YXJ0Q3NpJyxcbiAgfTtcbiAgY29uZmlnWydyZXF1ZXN0cyddWydpbmlMb2FkQ3NpJ10gPSBiYXNlQ3NpVXJsICtcbiAgICAgIGAmbWV0LmE0YS4ke3Nsb3RJZH09aW5pTG9hZENzaSR7aXNBbXBTdWZmaXh9LiR7ZGVsdGFUaW1lfWA7XG4gIGNvbmZpZ1sncmVxdWVzdHMnXVsncmVuZGVyU3RhcnRDc2knXSA9IGJhc2VDc2lVcmwgK1xuICAgICAgYCZtZXQuYTRhLiR7c2xvdElkfT1yZW5kZXJTdGFydENzaSR7aXNBbXBTdWZmaXh9LiR7ZGVsdGFUaW1lfWA7XG5cbiAgLy8gQWRkIENTSSBwaW5nIGZvciB2aXNpYmlsaXR5LlxuICBjb25maWdbJ3JlcXVlc3RzJ11bJ3Zpc2liaWxpdHlDc2knXSA9IGJhc2VDc2lVcmwgK1xuICAgICAgYCZtZXQuYTRhLiR7c2xvdElkfT12aXNpYmlsaXR5Q3NpLiR7ZGVsdGFUaW1lfWA7XG4gIGNvbmZpZ1sndHJpZ2dlcnMnXVsnY29udGludW91c1Zpc2libGUnXVsncmVxdWVzdCddLnB1c2goJ3Zpc2liaWxpdHlDc2knKTtcbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHR3by1sZXR0ZXIgY29kZXMgcmVwcmVzZW50aW5nIHRoZSBhbXAtYWQgY29udGFpbmVyc1xuICogZW5jbG9zaW5nIHRoZSBnaXZlbiBhZCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGFkRWxlbWVudFxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmNsb3NpbmdDb250YWluZXJUeXBlcyhhZEVsZW1lbnQpIHtcbiAgY29uc3QgY29udGFpbmVyVHlwZVNldCA9IHt9O1xuICBmb3IgKGxldCBlbCA9IGFkRWxlbWVudC5wYXJlbnRFbGVtZW50LCBjb3VudGVyID0gMDtcbiAgICBlbCAmJiBjb3VudGVyIDwgMjA7IGVsID0gZWwucGFyZW50RWxlbWVudCwgY291bnRlcisrKSB7XG4gICAgY29uc3QgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoVmFsaWRBZENvbnRhaW5lclR5cGVzW3RhZ05hbWVdKSB7XG4gICAgICBjb250YWluZXJUeXBlU2V0W1ZhbGlkQWRDb250YWluZXJUeXBlc1t0YWdOYW1lXV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoY29udGFpbmVyVHlwZVNldCk7XG59XG5cbi8qKlxuICogQXBwZW5kcyBwYXJhbWV0ZXIgdG8gYWQgcmVxdWVzdCBpbmRpY2F0aW5nIGVycm9yIHN0YXRlIHNvIGxvbmcgYXMgZXJyb3JcbiAqIHBhcmFtZXRlciBpcyBub3QgYWxyZWFkeSBwcmVzZW50IG9yIHVybCBoYXMgYmVlbiB0cnVuY2F0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gYWRVcmwgdXNlZCBmb3IgbmV0d29yayByZXF1ZXN0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVyVmFsdWUgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IHBvdGVudGlhbGx5IG1vZGlmaWVkIHVybCwgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXliZUFwcGVuZEVycm9yUGFyYW1ldGVyKGFkVXJsLCBwYXJhbWV0ZXJWYWx1ZSkge1xuICBkZXYoKS5hc3NlcnQoISFhZFVybCAmJiAhIXBhcmFtZXRlclZhbHVlKTtcbiAgLy8gQWRkIHBhcmFtZXRlciBpbmRpY2F0aW5nIGVycm9yIHNvIGxvbmcgYXMgdGhlIHVybCBoYXMgbm90IGFscmVhZHkgYmVlblxuICAvLyB0cnVuY2F0ZWQgYW5kIGVycm9yIHBhcmFtZXRlciBpcyBub3QgYWxyZWFkeSBwcmVzZW50LiAgTm90ZSB0aGF0IHdlIGFzc3VtZVxuICAvLyB0aGF0IGFkZGVkLCBlcnJvciBwYXJhbWV0ZXIgbGVuZ3RoIHdpbGwgYmUgbGVzcyB0aGFuIHRydW5jYXRpb24gcGFyYW1ldGVyXG4gIC8vIHNvIGFkZGluZyB3aWxsIG5vdCBjYXVzZSBsZW5ndGggdG8gZXhjZWVkIG1heGltdW0uXG4gIGlmIChuZXcgUmVnRXhwKGBbP3wmXSgke2VuY29kZVVSSUNvbXBvbmVudChUUlVOQ0FUSU9OX1BBUkFNLm5hbWUpfT1gICtcbiAgICAgIGAke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoVFJVTkNBVElPTl9QQVJBTS52YWx1ZSkpfXxhZXQ9W14mXSopJGApXG4gICAgICAudGVzdChhZFVybCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbW9kaWZpZWRBZFVybCA9IGFkVXJsICsgYCZhZXQ9JHtwYXJhbWV0ZXJWYWx1ZX1gO1xuICBkZXYoKS5hc3NlcnQobW9kaWZpZWRBZFVybC5sZW5ndGggPD0gTUFYX1VSTF9MRU5HVEgpO1xuICByZXR1cm4gbW9kaWZpZWRBZFVybDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtZXJpY2FsIGNvZGUgcmVwcmVzZW50aW5nIHRoZSBiaW5hcnkgdHlwZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluYXJ5VHlwZU51bWVyaWNhbENvZGUodHlwZSkge1xuICByZXR1cm4ge1xuICAgICdwcm9kdWN0aW9uJzogJzAnLFxuICAgICdjb250cm9sJzogJzEnLFxuICAgICdjYW5hcnknOiAnMicsXG4gIH1bdHlwZV0gfHwgbnVsbDtcbn1cblxuLyoqIEBjb25zdCB7IVJlZ0V4cH0gKi9cbmNvbnN0IElERU5USVRZX0RPTUFJTl9SRUdFWFBfID0gL1xcLmdvb2dsZVxcLig/OmNvbT9cXC4pP1thLXpdezIsM30kLztcblxuLyoqIEB0eXBlZGVmIHt7XG4gICAgICB0b2tlbjogKHN0cmluZ3x1bmRlZmluZWQpLFxuICAgICAgamFyOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gICAgICBwdWNyZDogKHN0cmluZ3x1bmRlZmluZWQpLFxuICAgICAgZnJlc2hMaWZldGltZVNlY3M6IChudW1iZXJ8dW5kZWZpbmVkKSxcbiAgICAgIHZhbGlkTGlmZXRpbWVTZWNzOiAobnVtYmVyfHVuZGVmaW5lZCksXG4gICAgICBmZXRjaFRpbWVNczogKG51bWJlcnx1bmRlZmluZWQpXG4gICB9fSAqL1xuZXhwb3J0IGxldCBJZGVudGl0eVRva2VuO1xuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuLi8uLi8uLi9zcmMvc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICogQHJldHVybiB7IVByb21pc2U8IUlkZW50aXR5VG9rZW4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRlbnRpdHlUb2tlbih3aW4sIGVsZW1lbnRPckFtcERvYykge1xuICB3aW5bJ2dvb2dfaWRlbnRpdHlfcHJvbSddID0gd2luWydnb29nX2lkZW50aXR5X3Byb20nXSB8fFxuICAgICAgZXhlY3V0ZUlkZW50aXR5VG9rZW5GZXRjaCh3aW4sIGVsZW1lbnRPckFtcERvYyk7XG4gIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPCFJZGVudGl0eVRva2VuPn0gKi8od2luWydnb29nX2lkZW50aXR5X3Byb20nXSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IS4uLy4uLy4uL3NyYy9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gKiBAcGFyYW0ge251bWJlcj19IHJlZGlyZWN0c1JlbWFpbmluZyAoZGVmYXVsdCAxKVxuICogQHBhcmFtIHtzdHJpbmc9fSBkb21haW5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3RhcnRUaW1lXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhSWRlbnRpdHlUb2tlbj59XG4gKi9cbmZ1bmN0aW9uIGV4ZWN1dGVJZGVudGl0eVRva2VuRmV0Y2god2luLCBlbGVtZW50T3JBbXBEb2MsIHJlZGlyZWN0c1JlbWFpbmluZyA9IDEsXG4gIGRvbWFpbiA9IHVuZGVmaW5lZCwgc3RhcnRUaW1lID0gRGF0ZS5ub3coKSkge1xuICBjb25zdCB1cmwgPSBnZXRJZGVudGl0eVRva2VuUmVxdWVzdFVybCh3aW4sIGVsZW1lbnRPckFtcERvYywgZG9tYWluKTtcbiAgcmV0dXJuIFNlcnZpY2VzLnhockZvcih3aW4pLmZldGNoSnNvbih1cmwsIHtcbiAgICBtb2RlOiAnY29ycycsXG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICBhbXBDb3JzOiBmYWxzZSxcbiAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICB9KS50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4ob2JqID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBvYmpbJ25ld1Rva2VuJ107XG4gICAgICAgIGNvbnN0IGphciA9IG9ialsnMXBfamFyJ10gfHwgJyc7XG4gICAgICAgIGNvbnN0IHB1Y3JkID0gb2JqWydwdWNyZCddIHx8ICcnO1xuICAgICAgICBjb25zdCBmcmVzaExpZmV0aW1lU2VjcyA9IHBhcnNlSW50KG9ialsnZnJlc2hMaWZldGltZVNlY3MnXSB8fCAnJywgMTApO1xuICAgICAgICBjb25zdCB2YWxpZExpZmV0aW1lU2VjcyA9IHBhcnNlSW50KG9ialsndmFsaWRMaWZldGltZVNlY3MnXSB8fCAnJywgMTApO1xuICAgICAgICBjb25zdCBhbHREb21haW4gPSBvYmpbJ2FsdERvbWFpbiddO1xuICAgICAgICBjb25zdCBmZXRjaFRpbWVNcyA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIGlmIChJREVOVElUWV9ET01BSU5fUkVHRVhQXy50ZXN0KGFsdERvbWFpbikpIHtcbiAgICAgICAgICBpZiAoIXJlZGlyZWN0c1JlbWFpbmluZy0tKSB7XG4gICAgICAgICAgICAvLyBNYXggcmVkaXJlY3RzLCBsb2c/XG4gICAgICAgICAgICByZXR1cm4ge2ZldGNoVGltZU1zfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGVJZGVudGl0eVRva2VuRmV0Y2goXG4gICAgICAgICAgICAgIHdpbiwgZWxlbWVudE9yQW1wRG9jLCByZWRpcmVjdHNSZW1haW5pbmcsIGFsdERvbWFpbiwgc3RhcnRUaW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChmcmVzaExpZmV0aW1lU2VjcyA+IDAgJiYgdmFsaWRMaWZldGltZVNlY3MgPiAwICYmXG4gICAgICAgICAgICB0eXBlb2YgdG9rZW4gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4ge3Rva2VuLCBqYXIsIHB1Y3JkLCBmcmVzaExpZmV0aW1lU2VjcywgdmFsaWRMaWZldGltZVNlY3MsXG4gICAgICAgICAgICBmZXRjaFRpbWVNc307XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuaW5nIGVtcHR5XG4gICAgICAgIHJldHVybiB7ZmV0Y2hUaW1lTXN9O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCh1bnVzZWRFcnIgPT4ge1xuICAgICAgICAvLyBUT0RPIGxvZz9cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IS4uLy4uLy4uL3NyYy9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gKiBAcGFyYW0ge3N0cmluZz19IGRvbWFpblxuICogQHJldHVybiB7c3RyaW5nfSB1cmxcbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRlbnRpdHlUb2tlblJlcXVlc3RVcmwod2luLCBlbGVtZW50T3JBbXBEb2MsXG4gIGRvbWFpbiA9IHVuZGVmaW5lZCkge1xuICBpZiAoIWRvbWFpbiAmJiB3aW4gIT0gd2luLnRvcCAmJiB3aW4ubG9jYXRpb24uYW5jZXN0b3JPcmlnaW5zKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IElERU5USVRZX0RPTUFJTl9SRUdFWFBfLmV4ZWMoXG4gICAgICAgIHdpbi5sb2NhdGlvbi5hbmNlc3Rvck9yaWdpbnNbd2luLmxvY2F0aW9uLmFuY2VzdG9yT3JpZ2lucy5sZW5ndGggLSAxXSk7XG4gICAgZG9tYWluID0gKG1hdGNoZXMgJiYgbWF0Y2hlc1swXSkgfHwgdW5kZWZpbmVkO1xuICB9XG4gIGRvbWFpbiA9IGRvbWFpbiB8fCAnLmdvb2dsZS5jb20nO1xuICBjb25zdCBjYW5vbmljYWwgPVxuICAgIGV4dHJhY3RIb3N0KFNlcnZpY2VzLmRvY3VtZW50SW5mb0ZvckRvYyhlbGVtZW50T3JBbXBEb2MpLmNhbm9uaWNhbFVybCk7XG4gIHJldHVybiBgaHR0cHM6Ly9hZHNlcnZpY2Uke2RvbWFpbn0vYWRzaWQvaW50ZWdyYXRvci5qc29uP2RvbWFpbj0ke2Nhbm9uaWNhbH1gO1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB3ZSBhcmUgcnVubmluZyBvbiB0aGUgQU1QIENETi5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDZG5Qcm94eSh3aW4pIHtcbiAgcmV0dXJuIENETl9QUk9YWV9SRUdFWFAudGVzdCh3aW4ubG9jYXRpb24ub3JpZ2luKTtcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZXMgdGhlIGZpZWxkcyBvZiB0aGUgZ2l2ZW4gTmFtZWZyYW1lIGV4cGVyaW1lbnQgY29uZmlnIG9iamVjdC5cbiAqIEBwYXJhbSB7IS4uLy4uLy4uL3NyYy91dGlscy94aHItdXRpbHMuRmV0Y2hSZXNwb25zZUhlYWRlcnN9IGhlYWRlcnNcbiAqIEBwYXJhbSB7IU5hbWVmcmFtZUV4cGVyaW1lbnRDb25maWd9IG5hbWVmcmFtZUNvbmZpZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TmFtZWZyYW1lRXhwZXJpbWVudENvbmZpZ3MoaGVhZGVycywgbmFtZWZyYW1lQ29uZmlnKSB7XG4gIGNvbnN0IG5hbWVmcmFtZUV4cGVyaW1lbnRIZWFkZXIgPSBoZWFkZXJzLmdldCgnYW1wLW5hbWVmcmFtZS1leHAnKTtcbiAgaWYgKG5hbWVmcmFtZUV4cGVyaW1lbnRIZWFkZXIpIHtcbiAgICBuYW1lZnJhbWVFeHBlcmltZW50SGVhZGVyLnNwbGl0KCc7JykuZm9yRWFjaChjb25maWcgPT4ge1xuICAgICAgaWYgKGNvbmZpZyA9PSAnaW5zdGFudExvYWQnIHx8IGNvbmZpZyA9PSAnd3JpdGVJbkJvZHknKSB7XG4gICAgICAgIG5hbWVmcmFtZUNvbmZpZ1tjb25maWddID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEVudW0gZm9yIGJyb3dzZXIgY2FwYWJpbGl0aWVzLiBOT1RFOiBTaW5jZSBKUyBpcyAzMi1iaXQsIGRvIG5vdCBhZGQgYW55bW9yZVxuICogdGhhbiAzMiBjYXBhYmlsaXRpZXMgdG8gdGhpcyBlbnVtLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuY29uc3QgQ2FwYWJpbGl0eSA9IHtcbiAgU1ZHX1NVUFBPUlRFRDogMSA8PCAwLFxuICBTQU5EQk9YSU5HX0FMTE9XX1RPUF9OQVZJR0FUSU9OX0JZX1VTRVJfQUNUSVZBVElPTl9TVVBQT1JURUQ6IDEgPDwgMSxcbiAgU0FOREJPWElOR19BTExPV19QT1BVUFNfVE9fRVNDQVBFX1NBTkRCT1hfU1VQUE9SVEVEOiAxIDw8IDIsXG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBiaXRtYXAgcmVwcmVzZW50aW5nIHdoYXQgZmVhdHVyZXMgYXJlIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRCcm93c2VyQ2FwYWJpbGl0aWVzQml0bWFwKHdpbikge1xuICBsZXQgYnJvd3NlckNhcGFiaWxpdGllcyA9IDA7XG4gIGNvbnN0IGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgaWYgKHdpbi5TVkdFbGVtZW50ICYmIGRvYy5jcmVhdGVFbGVtZW50TlMpIHtcbiAgICBicm93c2VyQ2FwYWJpbGl0aWVzIHw9IENhcGFiaWxpdHkuU1ZHX1NVUFBPUlRFRDtcbiAgfVxuICBjb25zdCBpZnJhbWVFbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgaWYgKGlmcmFtZUVsLnNhbmRib3ggJiYgaWZyYW1lRWwuc2FuZGJveC5zdXBwb3J0cykge1xuICAgIGlmIChpZnJhbWVFbC5zYW5kYm94LnN1cHBvcnRzKCdhbGxvdy10b3AtbmF2aWdhdGlvbi1ieS11c2VyLWFjdGl2YXRpb24nKSkge1xuICAgICAgYnJvd3NlckNhcGFiaWxpdGllcyB8PVxuICAgICAgICBDYXBhYmlsaXR5LlNBTkRCT1hJTkdfQUxMT1dfVE9QX05BVklHQVRJT05fQllfVVNFUl9BQ1RJVkFUSU9OX1NVUFBPUlRFRDtcbiAgICB9XG4gICAgaWYgKGlmcmFtZUVsLnNhbmRib3guc3VwcG9ydHMoJ2FsbG93LXBvcHVwcy10by1lc2NhcGUtc2FuZGJveCcpKSB7XG4gICAgICBicm93c2VyQ2FwYWJpbGl0aWVzIHw9XG4gICAgICAgIENhcGFiaWxpdHkuU0FOREJPWElOR19BTExPV19QT1BVUFNfVE9fRVNDQVBFX1NBTkRCT1hfU1VQUE9SVEVEO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJvd3NlckNhcGFiaWxpdGllcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGVudW0gdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBBTVAgYmluYXJ5IHR5cGUsIG9yIG51bGwgaWYgdGhpcyBpcyBhXG4gKiBjYW5vbmljYWwgcGFnZS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgYmluYXJ5IHR5cGUgZW51bS5cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW1wUnVudGltZVR5cGVQYXJhbWV0ZXIod2luKSB7XG4gIGNvbnN0IGFydCA9IGdldEJpbmFyeVR5cGVOdW1lcmljYWxDb2RlKGdldEJpbmFyeVR5cGUod2luKSk7XG4gIHJldHVybiBpc0NkblByb3h5KHdpbikgJiYgYXJ0ICE9ICcwJyA/IGFydCA6IG51bGw7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHt1c2VyfSBmcm9tICcuLi8uLi9zcmMvbG9nJztcblxuLyoqXG4gKiBBcHByb3ZlZCBoZWlnaHQgZm9yIEFkU2Vuc2UgZnVsbC13aWR0aCByZXNwb25zaXZlIGFkcy5cbiAqIEBjb25zdCB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgQURTRU5TRV9SU1BWX1dISVRFTElTVEVEX0hFSUdIVCA9IDMyMDtcblxuLyoqXG4gKiBHaXZlbiB0aGUgYW1wLWFkIGRhdGEgYXR0cmlidXRlIGNvbnRhaW5pbmcgdGhlIG11bHRpLXNpemUgZGltZW5zaW9ucywgYW5kIGFcbiAqIHNldCBvZiBwcmltYXJ5IGRpbWVuc2lvbnMsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gYWxsIHZhbGlkIG11bHRpLXNpemVcbiAqIFt3aWR0aCwgaGVpZ2h0XSBwYWlycyBpbiBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbXVsdGlTaXplRGF0YVN0ciBUaGUgYW1wLWFkIGRhdGEgYXR0cmlidXRlIGNvbnRhaW5pbmcgdGhlXG4gKiAgIG11bHRpLXNpemUgZGltZW5zaW9ucy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmltYXJ5V2lkdGggVGhlIHByaW1hcnkgd2lkdGggb2YgdGhlIGFkIHNsb3QuXG4gKiBAcGFyYW0ge251bWJlcn0gcHJpbWFyeUhlaWdodCBUaGUgcHJpbWFyeSBoZWlnaHQgb2YgdGhlIGFkIHNsb3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG11bHRpU2l6ZVZhbGlkYXRpb24gQSBmbGFnIHRoYXQgaWYgc2V0IHRvIHRydWUgd2lsbCBlbmZvcmNlXG4gKiAgIHRoZSBydWxlIHRoYXQgZW5zdXJlcyBtdWx0aS1zaXplIGRpbWVuc2lvbnMgYXJlIG5vIGxlc3MgdGhhbiAyLzNyZHMgb2ZcbiAqICAgdGhlaXIgcHJpbWFyeSBkaW1lbnNpb24ncyBjb3VudGVycGFydC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGlzRmx1aWQgSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBhZCBzbG90IGlzIEZsdWlkLWVuYWJsZWQuXG4gKiBAcmV0dXJuIHs/QXJyYXk8IUFycmF5PG51bWJlcj4+fSBBbiBhcnJheSBvZiBkaW1lbnNpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXVsdGlTaXplRGltZW5zaW9ucyhcbiAgbXVsdGlTaXplRGF0YVN0cixcbiAgcHJpbWFyeVdpZHRoLFxuICBwcmltYXJ5SGVpZ2h0LFxuICBtdWx0aVNpemVWYWxpZGF0aW9uLFxuICBpc0ZsdWlkID0gZmFsc2UpIHtcblxuICBjb25zdCBkaW1lbnNpb25zID0gW107XG4gIGNvbnN0IGFycmF5T2ZTaXplU3RycyA9IG11bHRpU2l6ZURhdGFTdHIuc3BsaXQoJywnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5T2ZTaXplU3Rycy5sZW5ndGg7IGkrKykge1xuXG4gICAgY29uc3Qgc2l6ZVN0ciA9IGFycmF5T2ZTaXplU3Ryc1tpXTtcbiAgICBjb25zdCBzaXplID0gc2l6ZVN0ci5zcGxpdCgneCcpO1xuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgZWFjaCBzaXplIGlzIHNwZWNpZmllZCBpbiB0aGUgZm9ybSBXeEguXG4gICAgaWYgKHNpemUubGVuZ3RoICE9IDIpIHtcbiAgICAgIHVzZXIoKS5lcnJvcignQU1QLUFEJywgYEludmFsaWQgbXVsdGktc2l6ZSBkYXRhIGZvcm1hdCAnJHtzaXplU3RyfScuYCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aCA9IE51bWJlcihzaXplWzBdKTtcbiAgICBjb25zdCBoZWlnaHQgPSBOdW1iZXIoc2l6ZVsxXSk7XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCBib3RoIGRpbWVuc2lvbnMgZ2l2ZW4gYXJlIHBvc2l0aXZlIG51bWJlcnMuXG4gICAgaWYgKCF2YWxpZGF0ZURpbWVuc2lvbnMod2lkdGgsIGhlaWdodCxcbiAgICAgICAgdyA9PiBpc05hTih3KSB8fCB3IDw9IDAsXG4gICAgICAgIGggPT4gaXNOYU4oaCkgfHwgaCA8PSAwLFxuICAgICAgICBiYWRQYXJhbXMgPT4gYmFkUGFyYW1zLm1hcChiYWRQYXJhbSA9PlxuICAgICAgICAgIGBJbnZhbGlkICR7YmFkUGFyYW0uZGltfSBvZiAke2JhZFBhcmFtLnZhbH0gYCArXG4gICAgICAgICAgICAnZ2l2ZW4gZm9yIHNlY29uZGFyeSBzaXplLicpLmpvaW4oJyAnKSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRoYXQgc2Vjb25kYXJ5IHNpemUgaXMgbm90IGxhcmdlciB0aGFuIHByaW1hcnkgc2l6ZS5cbiAgICBpZiAoIWlzRmx1aWQgJiYgIXZhbGlkYXRlRGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0LFxuICAgICAgICB3ID0+IHcgPiBwcmltYXJ5V2lkdGgsXG4gICAgICAgIGggPT4gaCA+IHByaW1hcnlIZWlnaHQsXG4gICAgICAgIGJhZFBhcmFtcyA9PiBiYWRQYXJhbXMubWFwKGJhZFBhcmFtID0+XG4gICAgICAgICAgYFNlY29uZGFyeSAke2JhZFBhcmFtLmRpbX0gJHtiYWRQYXJhbS52YWx9IGAgK1xuICAgICAgICAgICAgYGNhbid0IGJlIGxhcmdlciB0aGFuIHRoZSBwcmltYXJ5ICR7YmFkUGFyYW0uZGltfS5gKS5qb2luKCcgJykpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB0aGF0IGlmIG11bHRpLXNpemUtdmFsaWRhdGlvbiBpcyBvbiwgdGhhdCB0aGUgc2Vjb25kYXJ5IHNpemVzXG4gICAgLy8gYXJlIGF0IGxlYXN0IG1pblJhdGlvIG9mIHRoZSBwcmltYXJ5IHNpemUuXG4gICAgaWYgKG11bHRpU2l6ZVZhbGlkYXRpb24pIHtcbiAgICAgIC8vIFRoZSBtaW5pbXVtIHJhdGlvIG9mIGVhY2ggc2Vjb25kYXJ5IGRpbWVuc2lvbiB0byBpdHMgY29ycmVzcG9uZGluZ1xuICAgICAgLy8gcHJpbWFyeSBkaW1lbnNpb24uXG4gICAgICBjb25zdCBtaW5SYXRpbyA9IDIgLyAzO1xuICAgICAgY29uc3QgbWluV2lkdGggPSBtaW5SYXRpbyAqIHByaW1hcnlXaWR0aDtcbiAgICAgIGNvbnN0IG1pbkhlaWdodCA9IG1pblJhdGlvICogcHJpbWFyeUhlaWdodDtcbiAgICAgIGlmICghdmFsaWRhdGVEaW1lbnNpb25zKHdpZHRoLCBoZWlnaHQsXG4gICAgICAgICAgdyA9PiB3IDwgbWluV2lkdGgsXG4gICAgICAgICAgaCA9PiBoIDwgbWluSGVpZ2h0LFxuICAgICAgICAgIGJhZFBhcmFtcyA9PiBiYWRQYXJhbXMubWFwKGJhZFBhcmFtID0+XG4gICAgICAgICAgICBgU2Vjb25kYXJ5ICR7YmFkUGFyYW0uZGltfSAke2JhZFBhcmFtLnZhbH0gaXMgYCArXG4gICAgICAgICAgICAgIGBzbWFsbGVyIHRoYW4gMi8zcmRzIG9mIHRoZSBwcmltYXJ5ICR7YmFkUGFyYW0uZGltfS5gKVxuICAgICAgICAgICAgICAuam9pbignICcpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQYXNzZWQgYWxsIGNoZWNrcyEgUHVzaCBhZGRpdGlvbmFsIHNpemUgdG8gZGltZW5zaW9ucy5cbiAgICBkaW1lbnNpb25zLnB1c2goW3dpZHRoLCBoZWlnaHRdKTtcbiAgfVxuXG4gIHJldHVybiBkaW1lbnNpb25zO1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIGEgZ2l2ZW4gd2lkdGggb3IgaGVpZ2h0IHZpb2xhdGVzXG4gKiBzb21lIGNvbmRpdGlvbi5cbiAqXG4gKiBDaGVja3MgdGhlIHdpZHRoIGFuZCBoZWlnaHQgYWdhaW5zdCB0aGVpciBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbnMuIElmXG4gKiBlaXRoZXIgb2YgdGhlIGNvbmRpdGlvbnMgZmFpbCwgdGhlIGVycm9yQnVpbGRlciBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gKiB0aGUgYXBwcm9wcmlhdGUgYXJndW1lbnRzLCBpdHMgcmVzdWx0IHdpbGwgYmUgbG9nZ2VkIHRvIHVzZXIoKS5lcnJvciwgYW5kXG4gKiB2YWxpZGF0ZURpbWVuc2lvbnMgd2lsbCByZXR1cm4gZmFsc2UuIE90aGVyd2lzZSwgdmFsaWRhdGVEaW1lbnNpb25zIHdpbGxcbiAqIG9ubHkgcmV0dXJuIHRydWUuXG4gKlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IHdpZHRoXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gaGVpZ2h0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChudW1iZXJ8c3RyaW5nKSk6IGJvb2xlYW59IHdpZHRoQ29uZFxuICogQHBhcmFtIHtmdW5jdGlvbigobnVtYmVyfHN0cmluZykpOiBib29sZWFufSBoZWlnaHRDb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFBcnJheTx7ZGltOiBzdHJpbmcsIHZhbDogKG51bWJlcnxzdHJpbmcpfT4pOiBzdHJpbmc9fSBlcnJvckJ1aWxkZXJcbiAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHByb2R1Y2UgYW4gaW5mb3JtYXRpdmUgZXJyb3IgbWVzc2FnZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0LCB3aWR0aENvbmQsIGhlaWdodENvbmQsIGVycm9yQnVpbGRlcilcbntcbiAgY29uc3QgYmFkUGFyYW1zID0gW107XG4gIGlmICh3aWR0aENvbmQod2lkdGgpKSB7XG4gICAgYmFkUGFyYW1zLnB1c2goe2RpbTogJ3dpZHRoJywgdmFsOiB3aWR0aH0pO1xuICB9XG4gIGlmIChoZWlnaHRDb25kKGhlaWdodCkpIHtcbiAgICBiYWRQYXJhbXMucHVzaCh7ZGltOiAnaGVpZ2h0JywgdmFsOiBoZWlnaHR9KTtcbiAgfVxuICBpZiAoYmFkUGFyYW1zLmxlbmd0aCkge1xuICAgIHVzZXIoKS53YXJuKCdBTVAtQUQnLCBlcnJvckJ1aWxkZXIoYmFkUGFyYW1zKSk7XG4gIH1cbiAgcmV0dXJuICFiYWRQYXJhbXMubGVuZ3RoO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcyc7XG5pbXBvcnQge1xuICBWYXJpYWJsZVNvdXJjZSxcbiAgZ2V0TmF2aWdhdGlvbkRhdGEsXG4gIGdldFRpbWluZ0RhdGFBc3luYyxcbiAgZ2V0VGltaW5nRGF0YVN5bmMsXG59IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3ZhcmlhYmxlLXNvdXJjZSc7XG5pbXBvcnQge3VzZXJ9IGZyb20gJy4uLy4uLy4uL3NyYy9sb2cnO1xuXG5cbmNvbnN0IFdISVRFTElTVEVEX1ZBUklBQkxFUyA9IFtcbiAgJ0FNUERPQ19IT1NUJyxcbiAgJ0FNUERPQ19IT1NUTkFNRScsXG4gICdBTVBET0NfVVJMJyxcbiAgJ0FNUF9WRVJTSU9OJyxcbiAgJ0FWQUlMQUJMRV9TQ1JFRU5fSEVJR0hUJyxcbiAgJ0FWQUlMQUJMRV9TQ1JFRU5fV0lEVEgnLFxuICAnQkFDS0dST1VORF9TVEFURScsXG4gICdCUk9XU0VSX0xBTkdVQUdFJyxcbiAgJ0NBTk9OSUNBTF9IT1NUJyxcbiAgJ0NBTk9OSUNBTF9IT1NUTkFNRScsXG4gICdDQU5PTklDQUxfUEFUSCcsXG4gICdDQU5PTklDQUxfVVJMJyxcbiAgJ0NMSUVOVF9JRCcsXG4gICdDT1VOVEVSJyxcbiAgJ0RPQ1VNRU5UX0NIQVJTRVQnLFxuICAnRE9DVU1FTlRfUkVGRVJSRVInLFxuICAnRklSU1RfQ09OVEVOVEZVTF9QQUlOVCcsXG4gICdGSVJTVF9WSUVXUE9SVF9SRUFEWScsXG4gICdNQUtFX0JPRFlfVklTSUJMRScsXG4gICdQQUdFX1ZJRVdfSUQnLFxuICAnUkFORE9NJyxcbiAgJ1NDUkVFTl9DT0xPUl9ERVBUSCcsXG4gICdTQ1JFRU5fSEVJR0hUJyxcbiAgJ1NDUkVFTl9XSURUSCcsXG4gICdTQ1JPTExfSEVJR0hUJyxcbiAgJ1NDUk9MTF9MRUZUJyxcbiAgJ1NDUk9MTF9UT1AnLFxuICAnU0NST0xMX1dJRFRIJyxcbiAgJ1NIQVJFX1RSQUNLSU5HX0lOQ09NSU5HJyxcbiAgJ1NIQVJFX1RSQUNLSU5HX09VVEdPSU5HJyxcbiAgJ1NPVVJDRV9IT1NUJyxcbiAgJ1NPVVJDRV9IT1NUTkFNRScsXG4gICdTT1VSQ0VfUEFUSCcsXG4gICdTT1VSQ0VfVVJMJyxcbiAgJ1RJTUVTVEFNUCcsXG4gICdUSU1FWk9ORScsXG4gICdUSU1FWk9ORV9DT0RFJyxcbiAgJ1RJVExFJyxcbiAgJ1RPVEFMX0VOR0FHRURfVElNRScsXG4gICdVU0VSX0FHRU5UJyxcbiAgJ1ZBUklBTlQnLFxuICAnVkFSSUFOVFMnLFxuICAnVklFV0VSJyxcbiAgJ1ZJRVdQT1JUX0hFSUdIVCcsXG4gICdWSUVXUE9SVF9XSURUSCcsXG5dO1xuXG4vKiogUHJvdmlkZXMgQTRBIHNwZWNpZmljIHZhcmlhYmxlIHN1YnN0aXR1dGlvbi4gKi9cbmV4cG9ydCBjbGFzcyBBNEFWYXJpYWJsZVNvdXJjZSBleHRlbmRzIFZhcmlhYmxlU291cmNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSAgeyEuLi8uLi8uLi9zcmMvc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGFtcGRvY1xuICAgKiBAcGFyYW0gIHshV2luZG93fSBlbWJlZFdpblxuICAgKi9cbiAgY29uc3RydWN0b3IoYW1wZG9jLCBlbWJlZFdpbikge1xuICAgIHN1cGVyKGFtcGRvYyk7XG4gICAgLyoqIEBwcml2YXRlIHtWYXJpYWJsZVNvdXJjZX0gZ2xvYmFsIHZhcmlhYmxlIHNvdXJjZSBmb3IgZmFsbGJhY2suICovXG4gICAgdGhpcy5nbG9iYWxWYXJpYWJsZVNvdXJjZV8gPSBTZXJ2aWNlcy51cmxSZXBsYWNlbWVudHNGb3JEb2MoYW1wZG9jKVxuICAgICAgICAuZ2V0VmFyaWFibGVTb3VyY2UoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSBlbWJlZFdpbjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLnNldCgnQURfTkFWX1RJTUlORycsIChzdGFydEF0dHJpYnV0ZSwgZW5kQXR0cmlidXRlKSA9PiB7XG4gICAgICB1c2VyKCkuYXNzZXJ0KHN0YXJ0QXR0cmlidXRlLCAnVGhlIGZpcnN0IGFyZ3VtZW50IHRvIEFEX05BVl9USU1JTkcsIHRoZScgK1xuICAgICAgICAgICcgc3RhcnQgYXR0cmlidXRlIG5hbWUsIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm4gZ2V0VGltaW5nRGF0YVN5bmMoXG4gICAgICAgICAgdGhpcy53aW5fLFxuICAgICAgICAgIC8qKkB0eXBlIHtzdHJpbmd9Ki8oc3RhcnRBdHRyaWJ1dGUpLFxuICAgICAgICAgIC8qKkB0eXBlIHtzdHJpbmd9Ki8oZW5kQXR0cmlidXRlKSk7XG4gICAgfSkuc2V0QXN5bmMoJ0FEX05BVl9USU1JTkcnLCAoc3RhcnRBdHRyaWJ1dGUsIGVuZEF0dHJpYnV0ZSkgPT4ge1xuICAgICAgdXNlcigpLmFzc2VydChzdGFydEF0dHJpYnV0ZSwgJ1RoZSBmaXJzdCBhcmd1bWVudCB0byBBRF9OQVZfVElNSU5HLCB0aGUnICtcbiAgICAgICAgICAnIHN0YXJ0IGF0dHJpYnV0ZSBuYW1lLCBpcyByZXF1aXJlZCcpO1xuICAgICAgcmV0dXJuIGdldFRpbWluZ0RhdGFBc3luYyhcbiAgICAgICAgICB0aGlzLndpbl8sXG4gICAgICAgICAgLyoqQHR5cGUge3N0cmluZ30qLyhzdGFydEF0dHJpYnV0ZSksXG4gICAgICAgICAgLyoqQHR5cGUge3N0cmluZ30qLyhlbmRBdHRyaWJ1dGUpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0KCdBRF9OQVZfVFlQRScsICgpID0+IHtcbiAgICAgIHJldHVybiBnZXROYXZpZ2F0aW9uRGF0YSh0aGlzLndpbl8sICd0eXBlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldCgnQURfTkFWX1JFRElSRUNUX0NPVU5UJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldE5hdmlnYXRpb25EYXRhKHRoaXMud2luXywgJ3JlZGlyZWN0Q291bnQnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0KCdIVE1MX0FUVFInLFxuICAgICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKC4uLiopfSAqLyh0aGlzLmh0bWxBdHRyaWJ1dGVCaW5kaW5nXy5iaW5kKHRoaXMpKSk7XG5cbiAgICBmb3IgKGxldCB2ID0gMDsgdiA8IFdISVRFTElTVEVEX1ZBUklBQkxFUy5sZW5ndGg7IHYrKykge1xuICAgICAgY29uc3QgdmFyTmFtZSA9IFdISVRFTElTVEVEX1ZBUklBQkxFU1t2XTtcbiAgICAgIGNvbnN0IHJlc29sdmVycyA9IHRoaXMuZ2xvYmFsVmFyaWFibGVTb3VyY2VfLmdldCh2YXJOYW1lKTtcbiAgICAgIHRoaXMuc2V0KHZhck5hbWUsIHJlc29sdmVycy5zeW5jKS5zZXRBc3luYyh2YXJOYW1lLCByZXNvbHZlcnMuYXN5bmMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGJpbmRpbmcgZm9yIGdldHRpbmcgYXR0cmlidXRlcyBmcm9tIHRoZSBET00uXG4gICAqIE1vc3Qgc3VjaCBiaW5kaW5ncyBhcmUgcHJvdmlkZWQgaW4gc3JjL3NlcnZpY2UvdXJsLXJlcGxhY2VtZW50cy1pbXBsLCBidXRcbiAgICogdGhpcyBvbmUgbmVlZHMgYWNjZXNzIHRvIHRoaXMud2luXy5kb2N1bWVudCwgd2hpY2ggaWYgdGhlIGFtcC1hbmFseXRpY3NcbiAgICogdGFnIGlzIGNvbnRhaW5lZCB3aXRoaW4gYW4gYW1wLWFkIHRhZyB3aWxsIE5PVCBiZSB0aGUgcGFyZW50L3B1Ymxpc2hlclxuICAgKiBwYWdlLiBIZW5jZSB0aGUgbmVlZCB0byBwdXQgaXQgaGVyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNzc1NlbGVjdG9yIEVsZW1lbnRzIG1hdGNoaW5nIHRoaXMgc2VsZWN0b3Igd2lsbCBiZVxuICAgKiAgICAgaW5jbHVkZWQsIHByb3ZpZGVkIHRoZXkgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGF0dHJpYnV0ZU5hbWVzXG4gICAqICAgICBzZXQsIHVwIHRvIGEgbWF4IG9mIDEwLiBNYXkgYmUgVVJJIGVuY29kZWQuXG4gICAqIEBwYXJhbSB7Li4uc3RyaW5nfSB2YXJfYXJncyBBZGRpdGlvbmFsIHBhcmFtcyB3aWxsIGJlIHRoZSBuYW1lcyBvZlxuICAgKiAgICAgYXR0cmlidXRlcyB3aG9zZSB2YWx1ZXMgd2lsbCBiZSByZXR1cm5lZC4gVGhlcmUgc2hvdWxkIGJlIGF0IGxlYXN0IDEuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmdpZmllZCBKU09OIGFycmF5IGNvbnRhaW5pbmcgb25lIG1lbWJlciBmb3IgZWFjaFxuICAgKiAgICAgbWF0Y2hpbmcgZWxlbWVudC4gRWFjaCBtZW1iZXIgd2lsbCBjb250YWluIHRoZSBuYW1lcyBhbmQgdmFsdWVzIG9mIHRoZVxuICAgKiAgICAgc3BlY2lmaWVkIGF0dHJpYnV0ZXMsIGlmIHRoZSBjb3JyZXNwb25kaW5nIGVsZW1lbnQgaGFzIHRoYXQgYXR0cmlidXRlLlxuICAgKiAgICAgTm90ZSB0aGF0IGlmIGFuIGVsZW1lbnQgbWF0Y2hlcyB0aGUgY3NzU2VsZWN0ZWQgYnV0IGhhcyBub25lIG9mIHRoZVxuICAgKiAgICAgcmVxdWVzdGVkIGF0dHJpYnV0ZXMsIHRoZW4gbm90aGluZyB3aWxsIGJlIGluY2x1ZGVkIGluIHRoZSBhcnJheVxuICAgKiAgICAgZm9yIHRoYXQgZWxlbWVudC5cbiAgICovXG4gIGh0bWxBdHRyaWJ1dGVCaW5kaW5nXyhjc3NTZWxlY3RvciwgdmFyX2FyZ3MpIHtcbiAgICAvLyBHZW5lcmF0ZSBhbiBlcnJvciBpZiBjc3NTZWxlY3RvciBtYXRjaGVzIG1vcmUgdGhhbiB0aGlzIG1hbnkgZWxlbWVudHNcbiAgICBjb25zdCBIVE1MX0FUVFJfTUFYX0VMRU1FTlRTX1RPX1RSQVZFUlNFID0gMjA7XG5cbiAgICAvLyBPZiB0aGUgZWxlbWVudHMgbWF0Y2hlZCBieSBjc3NTZWxlY3Rvciwgc2VlIHdoaWNoIGNvbnRhaW4gb25lIG9yIG1vcmVcbiAgICAvLyBvZiB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgYXQgbW9zdCB0aGlzIG1hbnkuXG4gICAgY29uc3QgSFRNTF9BVFRSX01BWF9FTEVNRU5UU19UT19SRVRVUk4gPSAxMDtcblxuICAgIC8vIE9ubHkgYWxsb3cgYXQgbW9zdCB0aGlzIG1hbnkgYXR0cmlidXRlTmFtZXMgdG8gYmUgc3BlY2lmaWVkLlxuICAgIGNvbnN0IEhUTUxfQVRUUl9NQVhfQVRUUlMgPSAxMDtcblxuICAgIGNvbnN0IFRBRyA9ICdBNEFWYXJpYWJsZVNvdXJjZSc7XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVOYW1lcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgaWYgKCFjc3NTZWxlY3RvciB8fCAhYXR0cmlidXRlTmFtZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJ1tdJztcbiAgICB9XG4gICAgaWYgKGF0dHJpYnV0ZU5hbWVzLmxlbmd0aCA+IEhUTUxfQVRUUl9NQVhfQVRUUlMpIHtcbiAgICAgIHVzZXIoKS5lcnJvcihUQUcsIGBBdCBtb3N0ICR7SFRNTF9BVFRSX01BWF9BVFRSU30gbWF5IGJlIHJlcXVlc3RlZC5gKTtcbiAgICAgIHJldHVybiAnW10nO1xuICAgIH1cbiAgICBjc3NTZWxlY3RvciA9IGRlY29kZVVSSShjc3NTZWxlY3Rvcik7XG4gICAgbGV0IGVsZW1lbnRzO1xuICAgIHRyeSB7XG4gICAgICBlbGVtZW50cyA9IHRoaXMud2luXy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGNzc1NlbGVjdG9yKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB1c2VyKCkuZXJyb3IoVEFHLCBgSW52YWxpZCBzZWxlY3RvcjogJHtjc3NTZWxlY3Rvcn1gKTtcbiAgICAgIHJldHVybiAnW10nO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gSFRNTF9BVFRSX01BWF9FTEVNRU5UU19UT19UUkFWRVJTRSkge1xuICAgICAgdXNlcigpLmVycm9yKFRBRywgJ0NTUyBzZWxlY3RvciBtYXkgbWF0Y2ggYXQgbW9zdCAnICtcbiAgICAgICAgICBgJHtIVE1MX0FUVFJfTUFYX0VMRU1FTlRTX1RPX1RSQVZFUlNFfSBlbGVtZW50cy5gKTtcbiAgICAgIHJldHVybiAnW10nO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICByZXN1bHQubGVuZ3RoIDwgSFRNTF9BVFRSX01BWF9FTEVNRU5UU19UT19SRVRVUk47ICsraSkge1xuICAgICAgY29uc3QgY3VycmVudFJlc3VsdCA9IHt9O1xuICAgICAgbGV0IGZvdW5kQXRMZWFzdE9uZUF0dHIgPSBmYWxzZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXR0cmlidXRlTmFtZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWVzW2pdO1xuICAgICAgICBpZiAoZWxlbWVudHNbaV0uaGFzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgY3VycmVudFJlc3VsdFthdHRyaWJ1dGVOYW1lXSA9XG4gICAgICAgICAgICAgIGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICBmb3VuZEF0TGVhc3RPbmVBdHRyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kQXRMZWFzdE9uZUF0dHIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtBNEFWYXJpYWJsZVNvdXJjZX0gZnJvbSAnLi9hNGEtdmFyaWFibGUtc291cmNlJztcbmltcG9ydCB7XG4gIENPTlNFTlRfUE9MSUNZX1NUQVRFLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG59IGZyb20gJy4uLy4uLy4uL3NyYy9jb25zZW50LXN0YXRlJztcbmltcG9ydCB7TGF5b3V0LCBpc0xheW91dFNpemVEZWZpbmVkfSBmcm9tICcuLi8uLi8uLi9zcmMvbGF5b3V0JztcbmltcG9ydCB7TGF5b3V0UHJpb3JpdHl9IGZyb20gJy4uLy4uLy4uL3NyYy9sYXlvdXQnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzJztcbmltcG9ydCB7U2lnbmF0dXJlVmVyaWZpZXIsIFZlcmlmaWNhdGlvblN0YXR1c30gZnJvbSAnLi9zaWduYXR1cmUtdmVyaWZpZXInO1xuaW1wb3J0IHtcbiAgYXNzZXJ0SHR0cHNVcmwsXG4gIHRyeURlY29kZVVyaUNvbXBvbmVudCxcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL3VybCc7XG5pbXBvcnQge2NhbmNlbGxhdGlvbiwgaXNDYW5jZWxsYXRpb259IGZyb20gJy4uLy4uLy4uL3NyYy9lcnJvcic7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnRXaXRoQXR0cmlidXRlc30gZnJvbSAnLi4vLi4vLi4vc3JjL2RvbSc7XG5pbXBvcnQge2RldiwgZHVwbGljYXRlRXJyb3JJZk5lY2Vzc2FyeSwgdXNlcn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9vYmplY3QnO1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVTZW50aW5lbCxcbiAgZ2V0RGVmYXVsdEJvb3RzdHJhcEJhc2VVcmwsXG59IGZyb20gJy4uLy4uLy4uL3NyYy8zcC1mcmFtZSc7XG5pbXBvcnQge1xuICBnZXRBbXBBZFJlbmRlck91dHNpZGVWaWV3cG9ydCxcbiAgaW5jcmVtZW50TG9hZGluZ0FkcyxcbiAgaXMzcFRocm90dGxlZCxcbn0gZnJvbSAnLi4vLi4vYW1wLWFkLzAuMS9jb25jdXJyZW50LWxvYWQnO1xuaW1wb3J0IHtnZXRCaW5hcnlUeXBlfSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtnZXRCaW5hcnlUeXBlTnVtZXJpY2FsQ29kZX0gZnJvbSAnLi4vLi4vLi4vYWRzL2dvb2dsZS9hNGEvdXRpbHMnO1xuaW1wb3J0IHtnZXRDb25zZW50UG9saWN5U3RhdGV9IGZyb20gJy4uLy4uLy4uL3NyYy9jb25zZW50JztcbmltcG9ydCB7Z2V0Q29udGV4dE1ldGFkYXRhfSBmcm9tICcuLi8uLi8uLi9zcmMvaWZyYW1lLWF0dHJpYnV0ZXMnO1xuaW1wb3J0IHtnZXRNb2RlfSBmcm9tICcuLi8uLi8uLi9zcmMvbW9kZSc7XG5pbXBvcnQge2luc2VydEFuYWx5dGljc0VsZW1lbnR9IGZyb20gJy4uLy4uLy4uL3NyYy9leHRlbnNpb24tYW5hbHl0aWNzJztcbmltcG9ydCB7XG4gIGluc3RhbGxGcmllbmRseUlmcmFtZUVtYmVkLFxuICBzZXRGcmllbmRseUlmcmFtZUVtYmVkVmlzaWJsZSxcbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2ZyaWVuZGx5LWlmcmFtZS1lbWJlZCc7XG5pbXBvcnQge1xuICBpbnN0YWxsVXJsUmVwbGFjZW1lbnRzRm9yRW1iZWQsXG59IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3VybC1yZXBsYWNlbWVudHMtaW1wbCc7XG5pbXBvcnQge2lzQWRQb3NpdGlvbkFsbG93ZWR9IGZyb20gJy4uLy4uLy4uL3NyYy9hZC1oZWxwZXInO1xuaW1wb3J0IHtpc0FycmF5LCBpc0VudW1WYWx1ZSwgaXNPYmplY3R9IGZyb20gJy4uLy4uLy4uL3NyYy90eXBlcyc7XG5pbXBvcnQge2lzRXhwZXJpbWVudE9ufSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtwYXJzZUpzb259IGZyb20gJy4uLy4uLy4uL3NyYy9qc29uJztcbmltcG9ydCB7c2V0U3R5bGV9IGZyb20gJy4uLy4uLy4uL3NyYy9zdHlsZSc7XG5pbXBvcnQge3NpZ25pbmdTZXJ2ZXJVUkxzfSBmcm9tICcuLi8uLi8uLi9hZHMvX2E0YS1jb25maWcnO1xuaW1wb3J0IHt0cmlnZ2VyQW5hbHl0aWNzRXZlbnR9IGZyb20gJy4uLy4uLy4uL3NyYy9hbmFseXRpY3MnO1xuaW1wb3J0IHt0cnlSZXNvbHZlfSBmcm9tICcuLi8uLi8uLi9zcmMvdXRpbHMvcHJvbWlzZSc7XG5pbXBvcnQge3V0ZjhEZWNvZGV9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9ieXRlcyc7XG5cbi8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbmNvbnN0IE1FVEFEQVRBX1NUUklOR1MgPSBbXG4gICc8c2NyaXB0IGFtcC1hZC1tZXRhZGF0YSB0eXBlPWFwcGxpY2F0aW9uL2pzb24+JyxcbiAgJzxzY3JpcHQgdHlwZT1cImFwcGxpY2F0aW9uL2pzb25cIiBhbXAtYWQtbWV0YWRhdGE+JyxcbiAgJzxzY3JpcHQgdHlwZT1hcHBsaWNhdGlvbi9qc29uIGFtcC1hZC1tZXRhZGF0YT4nXTtcblxuLy8gVE9ETyh0ZHJsKTogVGVtcG9yYXJ5LCB3aGlsZSB3ZSdyZSB2ZXJpZnlpbmcgd2hldGhlciBTYWZlRnJhbWUgaXMgYW5cbi8vIGFjY2VwdGFibGUgc29sdXRpb24gdG8gdGhlICdTYWZhcmkgb24gaU9TIGRvZXNuJ3QgZmV0Y2ggaWZyYW1lIHNyYyBmcm9tXG4vLyBjYWNoZScgaXNzdWUuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FtcHByb2plY3QvYW1waHRtbC9pc3N1ZXMvNTYxNFxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9TQUZFRlJBTUVfVkVSU0lPTiA9ICcxLTAtMjMnO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgQ1JFQVRJVkVfU0laRV9IRUFERVIgPSAnWC1DcmVhdGl2ZVNpemUnO1xuXG4vKiogQHR5cGUge3N0cmluZ30gQHZpc2libGVGb3JUZXN0aW5nICovXG5leHBvcnQgY29uc3QgUkVOREVSSU5HX1RZUEVfSEVBREVSID0gJ1gtQW1wQWRSZW5kZXInO1xuXG4vKiogQHR5cGUge3N0cmluZ30gQHZpc2libGVGb3JUZXN0aW5nICovXG5leHBvcnQgY29uc3QgU0FGRUZSQU1FX1ZFUlNJT05fSEVBREVSID0gJ1gtQW1wU2FmZUZyYW1lVmVyc2lvbic7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSBAdmlzaWJsZUZvclRlc3RpbmcgKi9cbmV4cG9ydCBjb25zdCBFWFBFUklNRU5UX0ZFQVRVUkVfSEVBREVSX05BTUUgPSAnYW1wLWZmLWV4cHMnO1xuXG4vKiogQHR5cGUge3N0cmluZ30gQHZpc2liaWxlRm9yVGVzdGluZyAqL1xuZXhwb3J0IGNvbnN0IFNBTkRCT1hfSEVBREVSID0gJ2FtcC1mZi1zYW5kYm94JztcblxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5jb25zdCBUQUcgPSAnYW1wLWE0YSc7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IE5PX0NPTlRFTlRfUkVTUE9OU0UgPSAnTk8tQ09OVEVOVC1SRVNQT05TRSc7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IE5FVFdPUktfRkFJTFVSRSA9ICdORVRXT1JLLUZBSUxVUkUnO1xuXG4vKiogQHR5cGUge3N0cmluZ30gKi9cbmV4cG9ydCBjb25zdCBJTlZBTElEX1NQU0FfUkVTUE9OU0UgPSAnSU5WQUxJRC1TUFNBLVJFU1BPTlNFJztcblxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgSUZSQU1FX0dFVCA9ICdJRlJBTUUtR0VUJztcblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgWE9SSUdJTl9NT0RFID0ge1xuICBDTElFTlRfQ0FDSEU6ICdjbGllbnRfY2FjaGUnLFxuICBTQUZFRlJBTUU6ICdzYWZlZnJhbWUnLFxuICBOQU1FRlJBTUU6ICduYW1lZnJhbWUnLFxuICBJRlJBTUVfR0VUOiAnaWZyYW1lX2dldCcsXG59O1xuXG4vKiogQHR5cGUgeyFPYmplY3R9IEBwcml2YXRlICovXG5jb25zdCBTSEFSRURfSUZSQU1FX1BST1BFUlRJRVMgPSBkaWN0KHtcbiAgJ2ZyYW1lYm9yZGVyJzogJzAnLFxuICAnYWxsb3dmdWxsc2NyZWVuJzogJycsXG4gICdhbGxvd3RyYW5zcGFyZW5jeSc6ICcnLFxuICAnc2Nyb2xsaW5nJzogJ25vJyxcbiAgJ21hcmdpbndpZHRoJzogJzAnLFxuICAnbWFyZ2luaGVpZ2h0JzogJzAnLFxufSk7XG5cbi8qKiBAdHlwZWRlZiB7e3dpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfX0gKi9cbmV4cG9ydCBsZXQgU2l6ZUluZm9EZWY7XG5cbi8qKiBAdHlwZWRlZiB7e1xuICAgICAgbWluaWZpZWRDcmVhdGl2ZTogc3RyaW5nLFxuICAgICAgY3VzdG9tRWxlbWVudEV4dGVuc2lvbnM6ICFBcnJheTxzdHJpbmc+LFxuICAgICAgY3VzdG9tU3R5bGVzaGVldHM6ICFBcnJheTx7aHJlZjogc3RyaW5nfT4sXG4gICAgICBpbWFnZXM6IChBcnJheTxzdHJpbmc+fHVuZGVmaW5lZCksXG4gICAgICBjdGFUeXBlOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gICAgICBjdGFVcmw6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAgICB9fSAqL1xuZXhwb3J0IGxldCBDcmVhdGl2ZU1ldGFEYXRhRGVmO1xuXG4vKipcbiAqIE5hbWUgb2YgQTRBIGxpZmVjeWNsZSB0cmlnZ2Vycy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBBbmFseXRpY3NUcmlnZ2VyID0ge1xuICBBRF9SRVFVRVNUX1NUQVJUOiAnYWQtcmVxdWVzdC1zdGFydCcsXG4gIEFEX1JFU1BPTlNFX0VORDogJ2FkLXJlc3BvbnNlLWVuZCcsXG4gIEFEX1JFTkRFUl9TVEFSVDogJ2FkLXJlbmRlci1zdGFydCcsXG4gIEFEX1JFTkRFUl9FTkQ6ICdhZC1yZW5kZXItZW5kJyxcbiAgQURfSUZSQU1FX0xPQURFRDogJ2FkLWlmcmFtZS1sb2FkZWQnLFxuICAvLyBUaGlzIHRyaWdnZXIgaXMgbm90IHBhcnQgb2YgdGhlIG5vcm1hbCBhZHMgbGlmZWN5Y2xlIGFuZCBvbmx5IGZpcmVzIHdoZW4gYW5cbiAgLy8gYWQgaXMgcmVmcmVzaGVkLlxuICBBRF9SRUZSRVNIOiAnYWQtcmVmcmVzaCcsXG59O1xuXG4vKipcbiAqIE1hcHMgdGhlIG5hbWVzIG9mIGxpZmVjeWNsZSBldmVudHMgdG8gYW5hbHl0aWNzIHRyaWdnZXJzLlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIUFuYWx5dGljc1RyaWdnZXI+fVxuICovXG5jb25zdCBMSUZFQ1lDTEVfU1RBR0VfVE9fQU5BTFlUSUNTX1RSSUdHRVIgPSB7XG4gICdhZFJlcXVlc3RTdGFydCc6IEFuYWx5dGljc1RyaWdnZXIuQURfUkVRVUVTVF9TVEFSVCxcbiAgJ2FkUmVxdWVzdEVuZCc6IEFuYWx5dGljc1RyaWdnZXIuQURfUkVTUE9OU0VfRU5ELFxuICAncmVuZGVyRnJpZW5kbHlTdGFydCc6IEFuYWx5dGljc1RyaWdnZXIuQURfUkVOREVSX1NUQVJULFxuICAncmVuZGVyQ3Jvc3NEb21haW5TdGFydCc6IEFuYWx5dGljc1RyaWdnZXIuQURfUkVOREVSX1NUQVJULFxuICAncmVuZGVyU2FmZUZyYW1lU3RhcnQnOiBBbmFseXRpY3NUcmlnZ2VyLkFEX1JFTkRFUl9TVEFSVCxcbiAgJ3JlbmRlckZyaWVuZGx5RW5kJzogQW5hbHl0aWNzVHJpZ2dlci5BRF9SRU5ERVJfRU5ELFxuICAncmVuZGVyQ3Jvc3NEb21haW5FbmQnOiBBbmFseXRpY3NUcmlnZ2VyLkFEX1JFTkRFUl9FTkQsXG4gICdmcmllbmRseUlmcmFtZUluaUxvYWQnOiBBbmFseXRpY3NUcmlnZ2VyLkFEX0lGUkFNRV9MT0FERUQsXG4gICdjcm9zc0RvbWFpbklmcmFtZUxvYWRlZCc6IEFuYWx5dGljc1RyaWdnZXIuQURfSUZSQU1FX0xPQURFRCxcbn07XG5cbi8qKlxuICogVGhlIHNhbmRib3hpbmcgZmxhZ3MgdG8gdXNlIHdoZW4gYXBwbHlpbmcgdGhlIFwic2FuZGJveFwiIGF0dHJpYnV0ZSB0byBhZFxuICogaWZyYW1lcy4gU2VlIGh0dHA6Ly9nby9tZG4vSFRNTC9FbGVtZW50L2lmcmFtZSNhdHRyLXNhbmRib3guXG4gKiBAY29uc3Qge3N0cmluZ30gQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBJRlJBTUVfU0FOREJPWElOR19GTEFHUyA9ICdhbGxvdy1mb3JtcyBhbGxvdy1wb2ludGVyLWxvY2sgJyArXG4gICAgJ2FsbG93LXBvcHVwcyBhbGxvdy1wb3B1cHMtdG8tZXNjYXBlLXNhbmRib3ggYWxsb3ctc2FtZS1vcmlnaW4gJyArXG4gICAgJ2FsbG93LXNjcmlwdHMgYWxsb3ctdG9wLW5hdmlnYXRpb24tYnktdXNlci1hY3RpdmF0aW9uJztcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRoYXQgZW5zdXJlcyBhbnkgZXJyb3IgdGhyb3duIGlzIGhhbmRsZWQgYnkgb3B0aW9uYWxcbiAqIG9uRXJyb3IgaGFuZGxlciAoaWYgbm9uZSBwcm92aWRlZCBvciBoYW5kbGVyIHRocm93cywgZXJyb3IgaXMgc3dhbGxvd2VkIGFuZFxuICogdW5kZWZpbmVkIGlzIHJldHVybmVkKS5cbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBmbiB0byBwcm90ZWN0XG4gKiBAcGFyYW0ge1Q9fSBpblRoaXMgQW4gb3B0aW9uYWwgb2JqZWN0IHRvIHVzZSBhcyB0aGUgJ3RoaXMnIG9iamVjdFxuICogICAgd2hlbiBjYWxsaW5nIHRoZSBmdW5jdGlvbi4gIElmIG5vdCBwcm92aWRlZCwgdW5kZWZpbmVkIGlzIGJvdW5kIGFzIHRoaXNcbiAqICAgIHdoZW4gY2FsbGluZyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odGhpczpULCAhRXJyb3IsIC4uLiopOj89fSBvbkVycm9yIGZ1bmN0aW9uIGdpdmVuIGVycm9yXG4gKiAgICBhbmQgYXJndW1lbnRzIHByb3ZpZGVkIHRvIGZ1bmN0aW9uIGNhbGwuXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IHByb3RlY3RlZCBmdW5jdGlvblxuICogQHRlbXBsYXRlIFRcbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdGVjdEZ1bmN0aW9uV3JhcHBlcihcbiAgZm4sIGluVGhpcyA9IHVuZGVmaW5lZCwgb25FcnJvciA9IHVuZGVmaW5lZCkge1xuICByZXR1cm4gKC4uLmZuQXJncykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoaW5UaGlzLCBmbkFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBJZGVhbGx5IHdlIGNvdWxkIHVzZSBbZXJyLCAuLi52YXJfYXJnc10gYnV0IGxpbnRlciBkaXNhbGxvd3NcbiAgICAgICAgICAvLyBzcHJlYWQgc28gaW5zdGVhZCB1c2luZyB1bnNoaWZ0IDooXG4gICAgICAgICAgZm5BcmdzLnVuc2hpZnQoZXJyKTtcbiAgICAgICAgICByZXR1cm4gb25FcnJvci5hcHBseShpblRoaXMsIGZuQXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGNhcHR1cmVFcnIpIHtcbiAgICAgICAgICAvLyBzd2FsbG93IGVycm9yIGlmIGVycm9yIGhhbmRsZXIgdGhyb3dzLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBJbiB0aGUgZXZlbnQgb2Ygbm8gb3B0aW9uYWwgb24gZXJyb3IgZnVuY3Rpb24gb3IgaXRzIGV4ZWN1dGlvbiB0aHJvd3MsXG4gICAgICAvLyByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG59XG5cbi8qKiBBYnN0cmFjdCBjbGFzcyBmb3IgQU1QIEFkIEZhc3QgRmV0Y2ggZW5hYmxlZCBuZXR3b3JrcyAqL1xuZXhwb3J0IGNsYXNzIEFtcEE0QSBleHRlbmRzIEFNUC5CYXNlRWxlbWVudCB7XG4gIC8vIFRPRE86IEFkZCBtb3JlIGVycm9yIGhhbmRsaW5nIHRocm91Z2hvdXQgY29kZS5cbiAgLy8gVE9ETzogSGFuZGxlIGNyZWF0aXZlcyB0aGF0IGRvIG5vdCBmaWxsLlxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgZGV2KCkuYXNzZXJ0KEFNUC5BbXBBZFVJSGFuZGxlcik7XG4gICAgZGV2KCkuYXNzZXJ0KEFNUC5BbXBBZFhPcmlnaW5JZnJhbWVIYW5kbGVyKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2U8dW5kZWZpbmVkPn0gKi9cbiAgICB0aGlzLmtleXNldFByb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2U8P0NyZWF0aXZlTWV0YURhdGFEZWY+fSAqL1xuICAgIHRoaXMuYWRQcm9taXNlXyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSB7bnVtYmVyfSB1bmlxdWUgSUQgb2YgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgcHJvbWlzZSB0byBhbGxvd1xuICAgICAqIGZvciBjYW5jZWxsYXRpb24uXG4gICAgICovXG4gICAgdGhpcy5wcm9taXNlSWRfID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3N0cmluZ30gKi9cbiAgICB0aGlzLmFkVXJsXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez8uLi8uLi8uLi9zcmMvZnJpZW5kbHktaWZyYW1lLWVtYmVkLkZyaWVuZGx5SWZyYW1lRW1iZWR9ICovXG4gICAgdGhpcy5mcmllbmRseUlmcmFtZUVtYmVkXyA9IG51bGw7XG5cbiAgICAvKiogez9BTVAuQW1wQWRVSUhhbmRsZXJ9ICovXG4gICAgdGhpcy51aUhhbmRsZXIgPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/QU1QLkFtcEFkWE9yaWdpbklmcmFtZUhhbmRsZXJ9ICovXG4gICAgdGhpcy54T3JpZ2luSWZyYW1lSGFuZGxlcl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSB3aGV0aGVyIGNyZWF0aXZlIGhhcyBiZWVuIHZlcmlmaWVkIGFzIEFNUCAqL1xuICAgIHRoaXMuaXNWZXJpZmllZEFtcENyZWF0aXZlXyA9IGZhbHNlO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/QXJyYXlCdWZmZXJ9ICovXG4gICAgdGhpcy5jcmVhdGl2ZUJvZHlfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhpcyB3aXRoIHRoZSBzbG90IHdpZHRoL2hlaWdodCBhdHRyaWJ1dGVzLCBhbmQgb3ZlcnJpZGVcbiAgICAgKiBsYXRlciB3aXRoIHdoYXQgdGhlIG5ldHdvcmsgaW1wbGVtZW50YXRpb24gcmV0dXJucyB2aWEgZXh0cmFjdFNpemUuXG4gICAgICogTm90ZTogRWl0aGVyIHZhbHVlIG1heSBiZSAnYXV0bycgKGkuZS4sIG5vbi1udW1lcmljKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlIHs/KHt3aWR0aCwgaGVpZ2h0fXwuLi8uLi8uLi9zcmMvbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZil9XG4gICAgICovXG4gICAgdGhpcy5jcmVhdGl2ZVNpemVfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Py4uLy4uLy4uL3NyYy9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmfSAqL1xuICAgIHRoaXMub3JpZ2luYWxTbG90U2l6ZV8gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogTm90ZShrZWl0aHdyaWdodGJvcykgLSBlbnN1cmUgdGhlIGRlZmF1bHQgaGVyZSBpcyBudWxsIHNvIHRoYXQgaW9zXG4gICAgICogdXNlcyBzYWZlZnJhbWUgd2hlbiByZXNwb25zZSBoZWFkZXIgaXMgbm90IHNwZWNpZmllZC5cbiAgICAgKiBAcHJpdmF0ZSB7P1hPUklHSU5fTU9ERX1cbiAgICAgKi9cbiAgICB0aGlzLmV4cGVyaW1lbnRhbE5vbkFtcENyZWF0aXZlUmVuZGVyTWV0aG9kXyA9XG4gICAgICAgIHRoaXMuZ2V0Tm9uQW1wQ3JlYXRpdmVSZW5kZXJpbmdNZXRob2QoKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBpZnJhbWUgY29udGFpbmluZyB0aGUgYWQgc2hvdWxkIGJlIHNhbmRib3hlZCB2aWEgdGhlXG4gICAgICogXCJzYW5kYm94XCIgYXR0cmlidXRlLlxuICAgICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvdWxkU2FuZGJveF8gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBub3Rpb24gb2YgY3VycmVudCB0aW1lLCBpbiBtcy4gIFRoZSB2YWx1ZSBpcyBub3QgbmVjZXNzYXJpbHlcbiAgICAgKiBhYnNvbHV0ZSwgc28gc2hvdWxkIGJlIHVzZWQgb25seSBmb3IgY29tcHV0aW5nIGRlbHRhcy4gIFdoZW4gYXZhaWxhYmxlLFxuICAgICAqIHRoZSBwZXJmb3JtYW5jZSBzeXN0ZW0gd2lsbCBiZSB1c2VkOyBvdGhlcndpc2UgRGF0ZS5ub3coKSB3aWxsIGJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAY29uc3Qge2Z1bmN0aW9uKCk6bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZ2V0Tm93XyA9ICh0aGlzLndpbi5wZXJmb3JtYW5jZSAmJiB0aGlzLndpbi5wZXJmb3JtYW5jZS5ub3cpID9cbiAgICAgIHRoaXMud2luLnBlcmZvcm1hbmNlLm5vdy5iaW5kKHRoaXMud2luLnBlcmZvcm1hbmNlKSA6IERhdGUubm93O1xuXG4gICAgLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc2VudGluZWwgPSBnZW5lcmF0ZVNlbnRpbmVsKHdpbmRvdyk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBzbG90IHNob3VsZCBiZSBjb2xsYXBzZWQgb3Igbm90LiBNYXJrZWRcbiAgICAgKiB0cnVlIGlmIHRoZSBhZCByZXNwb25zZSBoYXMgc3RhdHVzIDIwNCwgaXMgbnVsbCwgb3IgaGFzIGEgbnVsbFxuICAgICAqIGFycmF5QnVmZmVyLlxuICAgICAqIEBwcml2YXRlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNDb2xsYXBzZWRfID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBGcmFtZSBpbiB3aGljaCB0aGUgY3JlYXRpdmUgcmVuZGVycyAoZnJpZW5kbHkgaWYgdmFsaWRhdGVkIEFNUCwgeGRvbWFpblxuICAgICAqIG90aGVyd2lzZSkuXG4gICAgICogez9IVE1MSWZyYW1lRWxlbWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUT0RPKGtlaXRod3JpZ2h0Ym9zKSAtIHJlbW92ZSBvbmNlIHJlc3VtZSBiZWhhdmlvciBpcyB2ZXJpZmllZC5cbiAgICAgKiB7Ym9vbGVhbn0gd2hldGhlciBtb3N0IHJlY2VudCBhZCByZXF1ZXN0IHdhcyBnZW5lcmF0ZWQgYXMgcGFydFxuICAgICAqICAgIG9mIHJlc3VtZSBjYWxsYmFjay5cbiAgICAgKi9cbiAgICB0aGlzLmZyb21SZXN1bWVDYWxsYmFjayA9IGZhbHNlO1xuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5zYWZlZnJhbWVWZXJzaW9uID0gREVGQVVMVF9TQUZFRlJBTUVfVkVSU0lPTjtcblxuICAgIC8qKlxuICAgICAqIEBwcm90ZWN0ZWQge2Jvb2xlYW59IEluZGljYXRlcyB3aGV0aGVyIHRoZSBhZCBpcyBjdXJyZW50bHkgaW4gdGhlXG4gICAgICogICAgcHJvY2VzcyBvZiBiZWluZyByZWZyZXNoZWQuXG4gICAgICovXG4gICAgdGhpcy5pc1JlZnJlc2hpbmcgPSBmYWxzZTtcblxuICAgIC8qKiBAcHJvdGVjdGVkIHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNSZWxheW91dE5lZWRlZEZsYWcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgYXMgYSBzaWduYWwgaW4gc29tZSBvZiB0aGUgQ1NJIHBpbmdzLlxuICAgICAqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVsZWFzZVR5cGVfID0gZ2V0QmluYXJ5VHlwZU51bWVyaWNhbENvZGUoZ2V0QmluYXJ5VHlwZSh0aGlzLndpbikpIHx8XG4gICAgICAgICctMSc7XG5cbiAgICAvKipcbiAgICAgKiBNYXBwaW5nIG9mIGZlYXR1cmUgbmFtZSB0byB2YWx1ZSBleHRyYWN0ZWQgZnJvbSBhZCByZXNwb25zZSBoZWFkZXJcbiAgICAgKiBhbXAtZmYtZXhwcyB3aXRoIGNvbW1hIHNlcGFyYXRlZCBwYWlycyBvZiAnPScgc2VwYXJhdGVkIGtleS92YWx1ZS5cbiAgICAgKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsc3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLnBvc3RBZFJlc3BvbnNlRXhwZXJpbWVudEZlYXR1cmVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBmb3IgYW1wLWFuYWx5dGljcy4gSWYgbnVsbCwgbm8gYW1wLWFuYWx5dGljcyBlbGVtZW50XG4gICAgICogd2lsbCBiZSBpbnNlcnRlZCBhbmQgbm8gYW5hbHl0aWNzIGV2ZW50cyB3aWxsIGJlIGZpcmVkLlxuICAgICAqIFRoaXMgd2lsbCBiZSBpbml0aWFsaXplZCBpbnNpZGUgb2YgYnVpbGRDYWxsYmFjay5cbiAgICAgKiBAcHJpdmF0ZSB7P0pzb25PYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5hNGFBbmFseXRpY3NDb25maWdfID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbXAtYW5hbHl0aWNzIGVsZW1lbnQgdGhhdCBmb3IgdGhpcyBpbXBsJ3MgYW5hbHl0aWNzIGNvbmZpZy4gSXQgd2lsbFxuICAgICAqIGJlIG51bGwgYmVmb3JlIGJ1aWxkQ2FsbGJhY2soKSBleGVjdXRlcyBvciBpZiB0aGUgaW1wbCBkb2VzIG5vdCBwcm92aWRlXG4gICAgICogYW4gYW5hbHl0aWNlIGNvbmZpZy5cbiAgICAgKiBAcHJpdmF0ZSB7P0VsZW1lbnR9XG4gICAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAgICovXG4gICAgdGhpcy5hNGFBbmFseXRpY3NFbGVtZW50XyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGlzIHNsb3QgaXMgYSBzaW5nbGUgcGFnZSBhZCB3aXRoaW4gYW4gQU1QIHN0b3J5LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNTaW5nbGVQYWdlU3RvcnlBZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRMYXlvdXRQcmlvcml0eSgpIHtcbiAgICAvLyBQcmlvcml0eSB1c2VkIGZvciBzY2hlZHVsaW5nIHByZWxvYWQgYW5kIGxheW91dCBjYWxsYmFjay4gIEJlY2F1c2VcbiAgICAvLyBBTVAgY3JlYXRpdmVzIHdpbGwgYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiB0aGUgcHJvbWlzZSBjaGFpbiBjcmVhdGVkXG4gICAgLy8gd2l0aGluIG9uTGF5b3V0TWVhc3VyZSwgdGhpcyBpcyBvbmx5IHJlbGV2YW50IHRvIG5vbi1BTVAgY3JlYXRpdmVzXG4gICAgLy8gdGhlcmVmb3JlIHdlIHdhbnQgdGhpcyB0byBtYXRjaCB0aGUgM3AgcHJpb3JpdHkuXG4gICAgY29uc3QgaXNQV0EgPSAhdGhpcy5lbGVtZW50LmdldEFtcERvYygpLmlzU2luZ2xlRG9jKCk7XG4gICAgLy8gZ2l2ZSB0aGUgYWQgaGlnaGVyIHByaW9yaXR5IGlmIGl0IGlzIGluc2lkZSBhIFBXQVxuICAgIHJldHVybiBpc1BXQSA/IExheW91dFByaW9yaXR5Lk1FVEFEQVRBIDogTGF5b3V0UHJpb3JpdHkuQURTO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBpc0xheW91dFN1cHBvcnRlZChsYXlvdXQpIHtcbiAgICByZXR1cm4gaXNMYXlvdXRTaXplRGVmaW5lZChsYXlvdXQpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBpc1JlbGF5b3V0TmVlZGVkKCkge1xuICAgIHJldHVybiB0aGlzLmlzUmVsYXlvdXROZWVkZWRGbGFnO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBidWlsZENhbGxiYWNrKCkge1xuICAgIHRoaXMuY3JlYXRpdmVTaXplXyA9IHtcbiAgICAgIHdpZHRoOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd3aWR0aCcpLFxuICAgICAgaGVpZ2h0OiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSxcbiAgICB9O1xuICAgIGNvbnN0IHVwZ3JhZGVEZWxheU1zID0gTWF0aC5yb3VuZCh0aGlzLmdldFJlc291cmNlKCkuZ2V0VXBncmFkZURlbGF5TXMoKSk7XG4gICAgZGV2KCkuaW5mbyhUQUcsXG4gICAgICAgIGB1cGdyYWRlRGVsYXkgJHt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyl9OiAke3VwZ3JhZGVEZWxheU1zfWApO1xuXG4gICAgdGhpcy51aUhhbmRsZXIgPSBuZXcgQU1QLkFtcEFkVUlIYW5kbGVyKHRoaXMpO1xuXG4gICAgY29uc3QgdmVyaWZpZXIgPSBzaWduYXR1cmVWZXJpZmllckZvcih0aGlzLndpbik7XG4gICAgdGhpcy5rZXlzZXRQcm9taXNlXyA9XG4gICAgICAgIFNlcnZpY2VzLnZpZXdlckZvckRvYyh0aGlzLmdldEFtcERvYygpKS53aGVuRmlyc3RWaXNpYmxlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRTaWduaW5nU2VydmljZU5hbWVzKCkuZm9yRWFjaChzaWduaW5nU2VydmljZU5hbWUgPT4ge1xuICAgICAgICAgICAgdmVyaWZpZXIubG9hZEtleXNldChzaWduaW5nU2VydmljZU5hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgIHRoaXMuYTRhQW5hbHl0aWNzQ29uZmlnXyA9IHRoaXMuZ2V0QTRhQW5hbHl0aWNzQ29uZmlnKCk7XG4gICAgaWYgKHRoaXMuYTRhQW5hbHl0aWNzQ29uZmlnXykge1xuICAgICAgLy8gVE9ETyh3YXJyZW5nbSk6IENvbnNpZGVyIGhhdmluZyBwYWdlLWxldmVsIHNpbmdsZXRvbnMgZm9yIG5ldHdvcmtzIHRoYXRcbiAgICAgIC8vIHVzZSB0aGUgc2FtZSBjb25maWcgZm9yIGFsbCBhZHMuXG4gICAgICB0aGlzLmE0YUFuYWx5dGljc0VsZW1lbnRfID0gaW5zZXJ0QW5hbHl0aWNzRWxlbWVudChcbiAgICAgICAgICB0aGlzLmVsZW1lbnQsIHRoaXMuYTRhQW5hbHl0aWNzQ29uZmlnXywgdHJ1ZSAvKiBsb2FkQW5hbHl0aWNzICovKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzU2luZ2xlUGFnZVN0b3J5QWQgPSB0aGlzLmVsZW1lbnQuaGFzQXR0cmlidXRlKCdhbXAtc3RvcnknKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcmVuZGVyT3V0c2lkZVZpZXdwb3J0KCkge1xuICAgIC8vIEVuc3VyZSBub24tdmVyaWZpZWQgQU1QIGNyZWF0aXZlcyBhcmUgdGhyb3R0bGVkLlxuICAgIGlmICghdGhpcy5pc1ZlcmlmaWVkQW1wQ3JlYXRpdmVfICYmIGlzM3BUaHJvdHRsZWQodGhpcy53aW4pICYmXG4gICAgICAgICF0aGlzLmluTm9uQW1wUHJlZmVyZW5jZUV4cCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSB0aGUgYWQgaXMgZ29vZCB0byBnby5cbiAgICBjb25zdCBlbGVtZW50Q2hlY2sgPSBnZXRBbXBBZFJlbmRlck91dHNpZGVWaWV3cG9ydCh0aGlzLmVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50Q2hlY2sgIT09IG51bGwgP1xuICAgICAgZWxlbWVudENoZWNrIDogc3VwZXIucmVuZGVyT3V0c2lkZVZpZXdwb3J0KCk7XG4gIH1cblxuICAvKipcbiAgICogVG8gYmUgb3ZlcnJpZGRlbiBieSBuZXR3b3JrIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGluZGljYXRpbmcgaWYgZWxlbWVudFxuICAgKiAoYW5kIGVudmlyb25tZW50IGdlbmVyYWxseSkgYXJlIHZhbGlkIGZvciBzZW5kaW5nIFhIUiBxdWVyaWVzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIGVsZW1lbnQgaXMgdmFsaWQgYW5kIGFkIHJlcXVlc3Qgc2hvdWxkIGJlXG4gICAqICAgIHNlbnQuICBJZiBmYWxzZSwgbm8gYWQgcmVxdWVzdCBpcyBzZW50IGFuZCBzbG90IHdpbGwgYmUgY29sbGFwc2VkIGlmXG4gICAqICAgIHBvc3NpYmxlLlxuICAgKi9cbiAgaXNWYWxpZEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3JlYXRpdmVTaXplLCB3aGljaCBpcyB0aGUgc2l6ZSBleHRyYWN0ZWQgZnJvbSB0aGUgYWQgcmVzcG9uc2UuXG4gICAqIEByZXR1cm4gez8oe3dpZHRoLCBoZWlnaHR9fC4uLy4uLy4uL3NyYy9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmKX1cbiAgICovXG4gIGdldENyZWF0aXZlU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGl2ZVNpemVfO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW58bnVtYmVyfSB3aGV0aGVyIGFkIHJlcXVlc3Qgc2hvdWxkIGJlIGRlbGF5ZWQgdW50aWxcbiAgICogICAgcmVuZGVyT3V0c2lkZVZpZXdwb3J0IGlzIG1ldCBvciBpZiBudW1iZXIsIHRoZSBhbW91bnQgb2Ygdmlld3BvcnRzLlxuICAgKi9cbiAgZGVsYXlBZFJlcXVlc3RFbmFibGVkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHByZWNvbm5lY3QgdXJscyBmb3IgQTRBLiBBZCBuZXR3b3JrIHNob3VsZCBvdmVyd3JpdGUgaW4gdGhlaXJcbiAgICogRmFzdCBGZXRjaCBpbXBsZW1lbnRhdGlvbiBhbmQgcmV0dXJuIGFuIGFycmF5IG9mIHVybHMgZm9yIHRoZSBydW50aW1lIHRvXG4gICAqIHByZWNvbm5lY3QgdG8uXG4gICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICAgKi9cbiAgZ2V0UHJlY29ubmVjdFVybHMoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJlZmV0Y2ggdXJscyBmb3IgQTRBLiBBZCBuZXR3b3JrIHNob3VsZCBvdmVyd3JpdGUgaW4gdGhlaXJcbiAgICogRmFzdCBGZXRjaCBpbXBsZW1lbnRhdGlvbiBhbmQgcmV0dXJuIGFuIGFycmF5IG9mIHVybHMgZm9yIHRoZSBydW50aW1lIHRvXG4gICAqIHByZWZldGNoLlxuICAgKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAgICovXG4gIGdldFByZWZldGNoVXJscygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgZWxlbWVudCB3YXMgbG9hZGVkIGZyb20gYW4gYW1wLWFkIGVsZW1lbnQuICBGb3IgdXNlIGJ5XG4gICAqIG5ldHdvcmstc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIHRoYXQgZG9uJ3Qgd2FudCB0byBhbGxvdyB0aGVtc2VsdmVzIHRvIGJlXG4gICAqIGVtYmVkZGVkIGRpcmVjdGx5IGludG8gYSBwYWdlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNBbXBBZEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lID09ICdBTVAtQUQnIHx8XG4gICAgICAgIHRoaXMuZWxlbWVudC50YWdOYW1lID09ICdBTVAtRU1CRUQnO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZWZldGNoZXMgYW5kIHByZWNvbm5lY3RzIFVSTHMgcmVsYXRlZCB0byB0aGUgYWQgdXNpbmcgYWRQcmVjb25uZWN0XG4gICAqIHJlZ2lzdHJhdGlvbiB3aGljaCBhc3N1bWVzIGFkIHJlcXVlc3QgZG9tYWluIHVzZWQgZm9yIDNwIGlzIGFwcGxpY2FibGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHVudXNlZE9uTGF5b3V0XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJlY29ubmVjdENhbGxiYWNrKHVudXNlZE9uTGF5b3V0KSB7XG4gICAgY29uc3QgcHJlY29ubmVjdCA9IHRoaXMuZ2V0UHJlY29ubmVjdFVybHMoKTtcbiAgICAvLyBOT1RFKGtlaXRod3JpZ2h0Ym9zKTogRG9lcyBub3QgdGFrZSBpc1ZhbGlkRWxlbWVudCBpbnRvIGFjY291bnQgc28gY291bGRcbiAgICAvLyBwcmVjb25uZWN0IHVubmVjZXNzYXJpbHksIGhvd2V2ZXIgaXQgaXMgYXNzdW1lZCB0aGF0IGlzVmFsaWRFbGVtZW50XG4gICAgLy8gbWF0Y2hlcyBhbXAtYWQgbG9hZGVyIHByZWRpY2F0ZSBzdWNoIHRoYXQgQTRBIGltcGwgZG9lcyBub3QgbG9hZC5cbiAgICBpZiAocHJlY29ubmVjdCkge1xuICAgICAgcHJlY29ubmVjdC5mb3JFYWNoKHAgPT4ge1xuICAgICAgICB0aGlzLnByZWNvbm5lY3QudXJsKHAsIC8qb3B0X3ByZWxvYWRBcyovdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHJlc3VtZUNhbGxiYWNrKCkge1xuICAgIC8vIEZJRSB0aGF0IHdhcyBub3QgZGVzdHJveWVkIG9uIHVubGF5b3V0Q2FsbGJhY2sgZG9lcyBub3QgcmVxdWlyZSBhIG5ld1xuICAgIC8vIGFkIHJlcXVlc3QuXG4gICAgaWYgKHRoaXMuZnJpZW5kbHlJZnJhbWVFbWJlZF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5mcm9tUmVzdW1lQ2FsbGJhY2sgPSB0cnVlO1xuICAgIC8vIElmIGxheW91dCBvZiBwYWdlIGhhcyBub3QgY2hhbmdlZCwgb25MYXlvdXRNZWFzdXJlIHdpbGwgbm90IGJlIGNhbGxlZFxuICAgIC8vIHNvIGRvIHNvIGV4cGxpY2l0bHkuXG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLmdldFJlc291cmNlKCk7XG4gICAgaWYgKHJlc291cmNlLmhhc0JlZW5NZWFzdXJlZCgpICYmICFyZXNvdXJjZS5pc01lYXN1cmVSZXF1ZXN0ZWQoKSkge1xuICAgICAgdGhpcy5vbkxheW91dE1lYXN1cmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IS4uLy4uLy4uL3NyYy9zZXJ2aWNlL3Jlc291cmNlLlJlc291cmNlfVxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIGdldFJlc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0UmVzb3VyY2VzKCkuZ2V0UmVzb3VyY2VGb3JFbGVtZW50KHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBhZFByb21pc2Ugd2FzIGluaXRpYWxpemVkIChpbmRpY2F0b3Igb2ZcbiAgICogICAgZWxlbWVudCB2YWxpZGl0eSkuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGhhc0FkUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gISF0aGlzLmFkUHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGFmdGVyIFhIUiByZXNwb25zZSBoZWFkZXJzIGhhdmUgYmVlbiBwcm9jZXNzZWQgYW5kXG4gICAqIHBvc3RBZFJlc3BvbnNlRXhwZXJpbWVudEZlYXR1cmVzIGlzIHBvcHVsYXRlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gd2hldGhlciBpbiBleHBlcmltZW50IGdpdmluZyBub24tQU1QIGNyZWF0aXZlcyBzYW1lXG4gICAqICAgIGJlbmVmaXRzIGFzIEFNUCAoaW5jcmVhc2VkIHByaW9yaXR5LCBubyB0aHJvdHRsZSlcbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICBpbk5vbkFtcFByZWZlcmVuY2VFeHAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5wb3N0QWRSZXNwb25zZUV4cGVyaW1lbnRGZWF0dXJlc1sncHJlZl9uZXV0cmFsX2VuYWJsZWQnXSAmJlxuICAgICAgWydhZHNlbnNlJywgJ2RvdWJsZWNsaWNrJ10uaW5jbHVkZXModGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIGVudmlyb25tZW50L2VsZW1lbnQgc2hvdWxkIGluaXRpYWxpemUgYWQgcmVxdWVzdFxuICAgKiAgICBwcm9taXNlIGNoYWluLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2hvdWxkSW5pdGlhbGl6ZVByb21pc2VDaGFpbl8oKSB7XG4gICAgY29uc3Qgc2xvdFJlY3QgPSB0aGlzLmdldEludGVyc2VjdGlvbkVsZW1lbnRMYXlvdXRCb3goKTtcbiAgICBpZiAodGhpcy5nZXRMYXlvdXQoKSAhPSBMYXlvdXQuRkxVSUQgJiZcbiAgICAgICAgKHNsb3RSZWN0LmhlaWdodCA9PSAwIHx8IHNsb3RSZWN0LndpZHRoID09IDApKSB7XG4gICAgICBkZXYoKS5maW5lKFxuICAgICAgICAgIFRBRywgJ29uTGF5b3V0TWVhc3VyZSBjYW5jZWxlZCBkdWUgaGVpZ2h0L3dpZHRoIDAnLCB0aGlzLmVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzQWRQb3NpdGlvbkFsbG93ZWQodGhpcy5lbGVtZW50LCB0aGlzLndpbikpIHtcbiAgICAgIHVzZXIoKS53YXJuKFRBRywgYDwke3RoaXMuZWxlbWVudC50YWdOYW1lfT4gaXMgbm90IGFsbG93ZWQgdG8gYmUgYCArXG4gICAgICAgIGBwbGFjZWQgaW4gZWxlbWVudHMgd2l0aCBwb3NpdGlvbjpmaXhlZDogJHt0aGlzLmVsZW1lbnR9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIE9uTGF5b3V0TWVhc3VyZSBjYW4gYmUgY2FsbGVkIHdoZW4gcGFnZSBpcyBpbiBwcmVyZW5kZXIgc28gZGVsYXkgdW50aWxcbiAgICAvLyB2aXNpYmxlLiAgQXNzdW1lIHRoYXQgaXQgaXMgb2sgdG8gY2FsbCBpc1ZhbGlkRWxlbWVudCBhcyBpdCBzaG91bGRcbiAgICAvLyBvbmx5IGJlaW5nIGxvb2tpbmcgYXQgd2luZG93LCBpbW11dGFibGUgcHJvcGVydGllcyAoaS5lLiBsb2NhdGlvbikgYW5kXG4gICAgLy8gaXRzIGVsZW1lbnQgYW5jZXN0cnkuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWRFbGVtZW50KCkpIHtcbiAgICAgIC8vIFRPRE8oa2p3cmlnaHQpOiBjb2xsYXBzZT9cbiAgICAgIHVzZXIoKS53YXJuKFRBRywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpLFxuICAgICAgICAgICdBbXAgYWQgZWxlbWVudCBpZ25vcmVkIGFzIGludmFsaWQnLCB0aGlzLmVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgb25MYXlvdXRNZWFzdXJlKCkge1xuICAgIHRoaXMuaW5pdGlhdGVBZFJlcXVlc3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBpbnRvIHRoZSBhZCBwcm9taXNlIGNoYWluLlxuICAgKlxuICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBpbml0aWF0ZSB0aGUgZm9sbG93aW5nIHNlcXVlbmNlIG9mIGV2ZW50czogYWRcbiAgICogdXJsIGNvbnN0cnVjdGlvbiwgYWQgcmVxdWVzdCBpc3N1YW5jZSwgY3JlYXRpdmUgdmVyaWZpY2F0aW9uLCBhbmQgbWV0YWRhdGFcbiAgICogcGFyc2luZy5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgaW5pdGlhdGVBZFJlcXVlc3QoKSB7XG4gICAgaWYgKHRoaXMueE9yaWdpbklmcmFtZUhhbmRsZXJfKSB7XG4gICAgICB0aGlzLnhPcmlnaW5JZnJhbWVIYW5kbGVyXy5vbkxheW91dE1lYXN1cmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYWRQcm9taXNlXyB8fCAhdGhpcy5zaG91bGRJbml0aWFsaXplUHJvbWlzZUNoYWluXygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW5jcmVtZW50IHVuaXF1ZSBwcm9taXNlIElEIHNvIHRoYXQgaWYgaXRzIHZhbHVlIGNoYW5nZXMgd2l0aGluIHRoZVxuICAgIC8vIHByb21pc2UgY2hhaW4gZHVlIHRvIGNhbmNlbCBmcm9tIHVubGF5b3V0LCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkLlxuICAgICsrdGhpcy5wcm9taXNlSWRfO1xuXG4gICAgLy8gU2hvcnRoYW5kIGZvcjogcmVqZWN0IHByb21pc2UgaWYgY3VycmVudCBwcm9taXNlIGNoYWluIGlzIG91dCBvZiBkYXRlLlxuICAgIGNvbnN0IGNoZWNrU3RpbGxDdXJyZW50ID0gdGhpcy52ZXJpZnlTdGlsbEN1cnJlbnQoKTtcblxuICAgIC8vIFJldHVybiB2YWx1ZSBmcm9tIHRoaXMgY2hhaW46IFRydWUgaWZmIHJlbmRlcmluZyB3YXMgXCJzdWNjZXNzZnVsXCJcbiAgICAvLyAoaS5lLiwgc2hvdWxkbid0IHRyeSB0byByZW5kZXIgbGF0ZXIgdmlhIGlmcmFtZSk7IGZhbHNlIGlmZiBzaG91bGRcbiAgICAvLyB0cnkgdG8gcmVuZGVyIGxhdGVyIGluIGlmcmFtZS5cbiAgICAvLyBDYXNlcyB0byBoYW5kbGUgaW4gdGhpcyBjaGFpbjpcbiAgICAvLyAgIC0gRXZlcnl0aGluZyBvayAgPT4gUmVuZGVyOyByZXR1cm4gdHJ1ZVxuICAgIC8vICAgLSBFbXB0eSBuZXR3b3JrIHJlc3BvbnNlIHJldHVybmVkID0+IERvbid0IHJlbmRlcjsgcmV0dXJuIHRydWVcbiAgICAvLyAgIC0gQ2FuJ3QgcGFyc2UgY3JlYXRpdmUgb3V0IG9mIHJlc3BvbnNlID0+IERvbid0IHJlbmRlcjsgcmV0dXJuIGZhbHNlXG4gICAgLy8gICAtIENhbiBwYXJzZSwgYnV0IGNyZWF0aXZlIGlzIGVtcHR5ID0+IERvbid0IHJlbmRlcjsgcmV0dXJuIHRydWVcbiAgICAvLyAgIC0gVmFsaWRhdGlvbiBmYWlscyA9PiByZXR1cm4gZmFsc2VcbiAgICAvLyAgIC0gUmVuZGVyaW5nIGZhaWxzID0+IHJldHVybiBmYWxzZVxuICAgIC8vICAgLSBDaGFpbiBjYW5jZWxsZWQgPT4gZG9uJ3QgcmV0dXJuOyBkcm9wIGVycm9yXG4gICAgLy8gICAtIFVuY2F1Z2h0IGVycm9yIG90aGVyd2lzZSA9PiBkb24ndCByZXR1cm47IHBlcmNvbGF0ZSBlcnJvciB1cFxuICAgIHRoaXMuYWRQcm9taXNlXyA9IFNlcnZpY2VzLnZpZXdlckZvckRvYyh0aGlzLmdldEFtcERvYygpKS53aGVuRmlyc3RWaXNpYmxlKClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgLy8gU2VlIGlmIGV4cGVyaW1lbnQgdGhhdCBkZWxheXMgcmVxdWVzdCB1bnRpbCBzbG90IGlzIHdpdGhpblxuICAgICAgICAgIC8vIHJlbmRlck91dHNpZGVWaWV3cG9ydC4gV2l0aGluIHJlbmRlciBvdXRzaWRlIHZpZXdwb3J0IHdpbGwgbm90XG4gICAgICAgICAgLy8gcmVzb2x2ZSBpZiBhbHJlYWR5IHdpdGhpbiB2aWV3cG9ydCB0aHVzIHRoZSBjaGVjayBmb3IgYWxyZWFkeVxuICAgICAgICAgIC8vIG1lZXRpbmcgdGhlIGRlZmluaXRpb24gYXMgb3Bwb3NlZCB0byB3YWl0aW5nIG9uIHRoZSBwcm9taXNlLlxuICAgICAgICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5kZWxheUFkUmVxdWVzdEVuYWJsZWQoKTtcbiAgICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKCkud2hlbldpdGhpblZpZXdwb3J0KFxuICAgICAgICAgICAgICAgIHR5cGVvZiBkZWxheSA9PSAnbnVtYmVyJyA/IGRlbGF5IDpcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyT3V0c2lkZVZpZXdwb3J0KCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gUG9zc2libHkgYmxvY2sgb24gYW1wLWNvbnNlbnQuXG4gICAgICAgIC8qKiBAcmV0dXJuIHshUHJvbWlzZTw/Q09OU0VOVF9QT0xJQ1lfU1RBVEU+fSAqL1xuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICBjb25zdCBjb25zZW50UG9saWN5SWQgPSBzdXBlci5nZXRDb25zZW50UG9saWN5KCk7XG4gICAgICAgICAgcmV0dXJuIGNvbnNlbnRQb2xpY3lJZCA/XG4gICAgICAgICAgICBnZXRDb25zZW50UG9saWN5U3RhdGUodGhpcy5nZXRBbXBEb2MoKSwgY29uc2VudFBvbGljeUlkKVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgdXNlcigpLmVycm9yKFRBRywgJ0Vycm9yIGRldGVybWluaW5nIGNvbnNlbnQgc3RhdGUnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIENPTlNFTlRfUE9MSUNZX1NUQVRFLlVOS05PV047XG4gICAgICAgICAgICAgICAgfSkgOiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIFRoaXMgYmxvY2sgcmV0dXJucyB0aGUgYWQgVVJMLCBpZiBvbmUgaXMgYXZhaWxhYmxlLlxuICAgICAgICAvKiogQHJldHVybiB7IVByb21pc2U8P3N0cmluZz59ICovXG4gICAgICAgIC50aGVuKGNvbnNlbnRTdGF0ZSA9PiB7XG4gICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/c3RyaW5nPn0gKi8odGhpcy5nZXRBZFVybChcbiAgICAgICAgICAgICAgY29uc2VudFN0YXRlLCB0aGlzLnRyeUV4ZWN1dGVSZWFsVGltZUNvbmZpZ18oY29uc2VudFN0YXRlKSkpO1xuICAgICAgICB9KVxuICAgICAgICAvLyBUaGlzIGJsb2NrIHJldHVybnMgdGhlIChwb3NzaWJseSBlbXB0eSkgcmVzcG9uc2UgdG8gdGhlIFhIUiByZXF1ZXN0LlxuICAgICAgICAvKiogQHJldHVybiB7IVByb21pc2U8P1Jlc3BvbnNlPn0gKi9cbiAgICAgICAgLnRoZW4oYWRVcmwgPT4ge1xuICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgdGhpcy5hZFVybF8gPSBhZFVybDtcbiAgICAgICAgICAvLyBJZiB3ZSBzaG91bGQgc2tpcCB0aGUgWEhSLCB3ZSB3aWxsIGluc3RlYWQgcmVxdWVzdCBhbmQgcmVuZGVyXG4gICAgICAgICAgLy8gYnkgc2ltcGx5IHdyaXRpbmcgYSBmcmFtZSBpbnRvIHRoZSBwYWdlIHVzaW5nXG4gICAgICAgICAgLy8gcmVuZGVyVmlhSWZyYW1lR2V0XG4gICAgICAgICAgaWYgKCF0aGlzLmlzWGhyQWxsb3dlZCgpICYmICEhdGhpcy5hZFVybF8pIHtcbiAgICAgICAgICAgIHRoaXMuZXhwZXJpbWVudGFsTm9uQW1wQ3JlYXRpdmVSZW5kZXJNZXRob2RfID1cbiAgICAgICAgICAgICAgICBYT1JJR0lOX01PREUuSUZSQU1FX0dFVDtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChJRlJBTUVfR0VUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFkVXJsICYmIHRoaXMuc2VuZFhoclJlcXVlc3QoYWRVcmwpO1xuICAgICAgICB9KVxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGJsb2NrIHJldHVybnMgZWl0aGVyIHRoZSByZXNwb25zZSAoYXMgYVxuICAgICAgICAvLyB7Ynl0ZXMsIGhlYWRlcnN9IG9iamVjdCksIG9yIG51bGwgaWYgbm8gcmVzcG9uc2UgaXMgYXZhaWxhYmxlIC9cbiAgICAgICAgLy8gcmVzcG9uc2UgaXMgZW1wdHkuXG4gICAgICAgIC8qKiBAcmV0dXJuIHs/UHJvbWlzZTw/e2J5dGVzOiAhQXJyYXlCdWZmZXIsIGhlYWRlcnM6ICFIZWFkZXJzfT59ICovXG4gICAgICAgIC50aGVuKGZldGNoUmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgdGhpcy5tYXliZVRyaWdnZXJBbmFseXRpY3NFdmVudF8oJ2FkUmVxdWVzdEVuZCcpO1xuICAgICAgICAgIC8vIElmIHRoZSByZXNwb25zZSBpcyBudWxsIChjYW4gb2NjdXIgZm9yIG5vbi0yMDAgcmVzcG9uc2VzKSAgb3JcbiAgICAgICAgICAvLyBhcnJheUJ1ZmZlciBpcyBudWxsLCBmb3JjZSBjb2xsYXBzZS5cbiAgICAgICAgICBpZiAoIWZldGNoUmVzcG9uc2UgfHwgIWZldGNoUmVzcG9uc2UuYXJyYXlCdWZmZXIgfHxcbiAgICAgICAgICAgICAgZmV0Y2hSZXNwb25zZS5oZWFkZXJzLmhhcygnYW1wLWZmLWVtcHR5LWNyZWF0aXZlJykpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VDb2xsYXBzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KE5PX0NPTlRFTlRfUkVTUE9OU0UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmV0Y2hSZXNwb25zZS5oZWFkZXJzICYmIGZldGNoUmVzcG9uc2UuaGVhZGVycy5oYXMoXG4gICAgICAgICAgICAgIEVYUEVSSU1FTlRfRkVBVFVSRV9IRUFERVJfTkFNRSkpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVQb3N0QWRSZXNwb25zZUV4cGVyaW1lbnRGZWF0dXJlc18oXG4gICAgICAgICAgICAgICAgZmV0Y2hSZXNwb25zZS5oZWFkZXJzLmdldChFWFBFUklNRU5UX0ZFQVRVUkVfSEVBREVSX05BTUUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGdldE1vZGUoKS5sb2NhbERldiAmJiB0aGlzLndpbi5sb2NhdGlvbiAmJlxuICAgICAgICAgICAgICB0aGlzLndpbi5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgICAgICAgIC8vIEFsbG93IGZvciBzZXR0aW5nIGV4cGVyaW1lbnQgZmVhdHVyZXMgdmlhIHF1ZXJ5IHBhcmFtIHdoaWNoXG4gICAgICAgICAgICAvLyB3aWxsIHBvdGVudGlhbGx5IG92ZXJyaWRlIHZhbHVlcyByZXR1cm5lZCBpbiByZXNwb25zZS5cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gLyg/OlxcP3wmKWE0YV9mZWF0X2V4cD0oW14mXSspLy5leGVjKFxuICAgICAgICAgICAgICAgIHRoaXMud2luLmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgZGV2KCkuaW5mbyhUQUcsIGBVc2luZyBkZWJ1ZyBleHAgZmVhdHVyZXM6ICR7bWF0Y2hbMV19YCk7XG4gICAgICAgICAgICAgIHRoaXMucG9wdWxhdGVQb3N0QWRSZXNwb25zZUV4cGVyaW1lbnRGZWF0dXJlc18oXG4gICAgICAgICAgICAgICAgICB0cnlEZWNvZGVVcmlDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETyh0ZHJsKTogVGVtcG9yYXJ5LCB3aGlsZSB3ZSdyZSB2ZXJpZnlpbmcgd2hldGhlciBTYWZlRnJhbWUgaXNcbiAgICAgICAgICAvLyBhbiBhY2NlcHRhYmxlIHNvbHV0aW9uIHRvIHRoZSAnU2FmYXJpIG9uIGlPUyBkb2Vzbid0IGZldGNoXG4gICAgICAgICAgLy8gaWZyYW1lIHNyYyBmcm9tIGNhY2hlJyBpc3N1ZS4gIFNlZVxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwvaXNzdWVzLzU2MTRcbiAgICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldE5vbkFtcENyZWF0aXZlUmVuZGVyaW5nTWV0aG9kKFxuICAgICAgICAgICAgICBmZXRjaFJlc3BvbnNlLmhlYWRlcnMuZ2V0KFJFTkRFUklOR19UWVBFX0hFQURFUikpO1xuICAgICAgICAgIHRoaXMuZXhwZXJpbWVudGFsTm9uQW1wQ3JlYXRpdmVSZW5kZXJNZXRob2RfID0gbWV0aG9kO1xuICAgICAgICAgIGlmICh0aGlzLmV4cGVyaW1lbnRhbE5vbkFtcENyZWF0aXZlUmVuZGVyTWV0aG9kXyA9PVxuICAgICAgICAgICAgICBYT1JJR0lOX01PREUuTkFNRUZSQU1FKSB7XG4gICAgICAgICAgICB0aGlzLnByZWNvbm5lY3QucHJlbG9hZChcbiAgICAgICAgICAgICAgICBnZXREZWZhdWx0Qm9vdHN0cmFwQmFzZVVybCh0aGlzLndpbiwgJ25hbWVmcmFtZScpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYnJvd3NlclN1cHBvcnRzU2FuZGJveCA9IHRoaXMud2luLkhUTUxJRnJhbWVFbGVtZW50ICYmXG4gICAgICAgICAgICAgICdzYW5kYm94JyBpbiB0aGlzLndpbi5IVE1MSUZyYW1lRWxlbWVudC5wcm90b3R5cGU7XG4gICAgICAgICAgdGhpcy5zaG91bGRTYW5kYm94XyA9IGJyb3dzZXJTdXBwb3J0c1NhbmRib3ggJiZcbiAgICAgICAgICAgICAgZmV0Y2hSZXNwb25zZS5oZWFkZXJzLmdldChTQU5EQk9YX0hFQURFUikgPT0gJ3RydWUnO1xuICAgICAgICAgIGNvbnN0IHNhZmVmcmFtZVZlcnNpb25IZWFkZXIgPVxuICAgICAgICAgICAgZmV0Y2hSZXNwb25zZS5oZWFkZXJzLmdldChTQUZFRlJBTUVfVkVSU0lPTl9IRUFERVIpO1xuICAgICAgICAgIGlmICgvXlswLTktXSskLy50ZXN0KHNhZmVmcmFtZVZlcnNpb25IZWFkZXIpICYmXG4gICAgICAgICAgICAgIHNhZmVmcmFtZVZlcnNpb25IZWFkZXIgIT0gREVGQVVMVF9TQUZFRlJBTUVfVkVSU0lPTikge1xuICAgICAgICAgICAgdGhpcy5zYWZlZnJhbWVWZXJzaW9uID0gc2FmZWZyYW1lVmVyc2lvbkhlYWRlcjtcbiAgICAgICAgICAgIHRoaXMucHJlY29ubmVjdC5wcmVsb2FkKHRoaXMuZ2V0U2FmZWZyYW1lUGF0aCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gTm90ZTogUmVzb2x2aW5nIGEgLnRoZW4gaW5zaWRlIGEgLnRoZW4gYmVjYXVzZSB3ZSBuZWVkIHRvIGNhcHR1cmVcbiAgICAgICAgICAvLyB0d28gZmllbGRzIG9mIGZldGNoUmVzcG9uc2UsIG9uZSBvZiB3aGljaCBpcywgaXRzZWxmLCBhIHByb21pc2UsXG4gICAgICAgICAgLy8gYW5kIG9uZSBvZiB3aGljaCBpc24ndC4gIElmIHdlIGp1c3QgcmV0dXJuXG4gICAgICAgICAgLy8gZmV0Y2hSZXNwb25zZS5hcnJheUJ1ZmZlcigpLCB0aGUgbmV4dCBzdGVwIGluIHRoZSBjaGFpbiB3aWxsXG4gICAgICAgICAgLy8gcmVzb2x2ZSBpdCB0byBhIGNvbmNyZXRlIHZhbHVlLCBidXQgd2UnbGwgbG9zZSB0cmFjayBvZlxuICAgICAgICAgIC8vIGZldGNoUmVzcG9uc2UuaGVhZGVycy5cbiAgICAgICAgICByZXR1cm4gZmV0Y2hSZXNwb25zZS5hcnJheUJ1ZmZlcigpLnRoZW4oYnl0ZXMgPT4ge1xuICAgICAgICAgICAgaWYgKGJ5dGVzLmJ5dGVMZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAvLyBUaGUgc2VydmVyIHJldHVybmVkIG5vIGNvbnRlbnQuIEluc3RlYWQgb2YgZGlzcGxheWluZyBhIGJsYW5rXG4gICAgICAgICAgICAgIC8vIHJlY3RhbmdsZSwgd2UgY29sbGFwc2UgdGhlIHNsb3QgaW5zdGVhZC5cbiAgICAgICAgICAgICAgdGhpcy5mb3JjZUNvbGxhcHNlKCk7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChOT19DT05URU5UX1JFU1BPTlNFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGJ5dGVzLFxuICAgICAgICAgICAgICBoZWFkZXJzOiBmZXRjaFJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAvKiogQHJldHVybiB7IVByb21pc2U8P0FycmF5QnVmZmVyPn0gKi9cbiAgICAgICAgLnRoZW4ocmVzcG9uc2VQYXJ0cyA9PiB7XG4gICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICAvLyBLZWVwIGEgaGFuZGxlIHRvIHRoZSBjcmVhdGl2ZSBib2R5IHNvIHRoYXQgd2UgY2FuIHJlbmRlciBpbnRvXG4gICAgICAgICAgLy8gU2FmZUZyYW1lIG9yIE5hbWVGcmFtZSBsYXRlciwgaWYgbmVjZXNzYXJ5LiAgVE9ETyh0ZHJsKTogVGVtcG9yYXJ5LFxuICAgICAgICAgIC8vIHdoaWxlIHdlXG4gICAgICAgICAgLy8gYXNzZXNzIHdoZXRoZXIgdGhpcyBpcyB0aGUgcmlnaHQgc29sdXRpb24gdG8gdGhlIFNhZmFyaStpT1MgaWZyYW1lXG4gICAgICAgICAgLy8gc3JjIGNhY2hlIGlzc3VlLiAgSWYgd2UgZGVjaWRlIHRvIGtlZXAgYSBTYWZlRnJhbWUtbGlrZSBzb2x1dGlvbixcbiAgICAgICAgICAvLyB3ZSBzaG91bGQgcmVzdHJ1Y3R1cmUgdGhlIHByb21pc2UgY2hhaW4gdG8gcGFzcyB0aGlzIGluZm8gYWxvbmdcbiAgICAgICAgICAvLyBtb3JlIGNsZWFubHksIHdpdGhvdXQgdXNlIG9mIGFuIG9iamVjdCB2YXJpYWJsZSBvdXRzaWRlIHRoZSBjaGFpbi5cbiAgICAgICAgICBpZiAoIXJlc3BvbnNlUGFydHMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qge2J5dGVzLCBoZWFkZXJzfSA9IHJlc3BvbnNlUGFydHM7XG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZXh0cmFjdFNpemUocmVzcG9uc2VQYXJ0cy5oZWFkZXJzKTtcbiAgICAgICAgICB0aGlzLmNyZWF0aXZlU2l6ZV8gPSBzaXplIHx8IHRoaXMuY3JlYXRpdmVTaXplXztcbiAgICAgICAgICBpZiAodGhpcy5leHBlcmltZW50YWxOb25BbXBDcmVhdGl2ZVJlbmRlck1ldGhvZF8gIT1cbiAgICAgICAgICAgICAgWE9SSUdJTl9NT0RFLkNMSUVOVF9DQUNIRSAmJlxuICAgICAgICAgICAgICBieXRlcykge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGl2ZUJvZHlfID0gYnl0ZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLm1heWJlVmFsaWRhdGVBbXBDcmVhdGl2ZShieXRlcywgaGVhZGVycyk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGNyZWF0aXZlID0+IHtcbiAgICAgICAgICBjaGVja1N0aWxsQ3VycmVudCgpO1xuICAgICAgICAgIC8vIE5lZWQgdG8ga25vdyBpZiBjcmVhdGl2ZSB3YXMgdmVyaWZpZWQgYXMgcGFydCBvZiByZW5kZXIgb3V0c2lkZVxuICAgICAgICAgIC8vIHZpZXdwb3J0IGJ1dCBjYW5ub3Qgd2FpdCBvbiBwcm9taXNlLiAgU2FkbHksIG5lZWQgYSBzdGF0ZSBhXG4gICAgICAgICAgLy8gdmFyaWFibGUuXG4gICAgICAgICAgdGhpcy5pc1ZlcmlmaWVkQW1wQ3JlYXRpdmVfID0gISFjcmVhdGl2ZTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRpdmUgJiYgdXRmOERlY29kZShjcmVhdGl2ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIFRoaXMgYmxvY2sgcmV0dXJucyBDcmVhdGl2ZU1ldGFEYXRhRGVmIGlmZiB0aGUgY3JlYXRpdmUgd2FzIHZlcmlmaWVkXG4gICAgICAgIC8vIGFzIEFNUCBhbmQgY291bGQgYmUgcHJvcGVybHkgcGFyc2VkIGZvciBmcmllbmRseSBpZnJhbWUgcmVuZGVyLlxuICAgICAgICAvKiogQHJldHVybiB7P0NyZWF0aXZlTWV0YURhdGFEZWZ9ICovXG4gICAgICAgIC50aGVuKGNyZWF0aXZlRGVjb2RlZCA9PiB7XG4gICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICAvLyBOb3RlOiBJdCdzIGNyaXRpY2FsIHRoYXQgI2dldEFtcEFkTWV0YWRhdGEgYmUgY2FsbGVkXG4gICAgICAgICAgLy8gb24gcHJlY2lzZWx5IHRoZSBzYW1lIGNyZWF0aXZlIHRoYXQgd2FzIHZhbGlkYXRlZFxuICAgICAgICAgIC8vIHZpYSAjdmFsaWRhdGVBZFJlc3BvbnNlXy4gIFNlZSBHaXRIdWIgaXNzdWVcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW1wcHJvamVjdC9hbXBodG1sL2lzc3Vlcy80MTg3XG4gICAgICAgICAgbGV0IGNyZWF0aXZlTWV0YURhdGFEZWY7XG4gICAgICAgICAgaWYgKCFjcmVhdGl2ZURlY29kZWQgfHxcbiAgICAgICAgICAgICEoY3JlYXRpdmVNZXRhRGF0YURlZiA9IHRoaXMuZ2V0QW1wQWRNZXRhZGF0YShjcmVhdGl2ZURlY29kZWQpKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5Ob25BbXBQcmVmZXJlbmNlRXhwKCkpIHtcbiAgICAgICAgICAgICAgLy8gRXhwZXJpbWVudCB0byBnaXZlIG5vbi1BTVAgY3JlYXRpdmVzIHNhbWUgYmVuZWZpdHMgYXMgQU1QIHNvXG4gICAgICAgICAgICAgIC8vIHVwZGF0ZSBwcmlvcml0eS5cbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXRQcmlvcml0eShMYXlvdXRQcmlvcml0eS5DT05URU5UKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFVwZGF0ZSBwcmlvcml0eS5cbiAgICAgICAgICB0aGlzLnVwZGF0ZUxheW91dFByaW9yaXR5KExheW91dFByaW9yaXR5LkNPTlRFTlQpO1xuICAgICAgICAgIC8vIExvYWQgYW55IGV4dGVuc2lvbnM7IGRvIG5vdCB3YWl0IG9uIHRoZWlyIHByb21pc2VzIGFzIHRoaXNcbiAgICAgICAgICAvLyBpcyBqdXN0IHRvIHByZWZldGNoLlxuICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBTZXJ2aWNlcy5leHRlbnNpb25zRm9yKHRoaXMud2luKTtcbiAgICAgICAgICBjcmVhdGl2ZU1ldGFEYXRhRGVmLmN1c3RvbUVsZW1lbnRFeHRlbnNpb25zLmZvckVhY2goXG4gICAgICAgICAgICAgIGV4dGVuc2lvbklkID0+IGV4dGVuc2lvbnMucHJlbG9hZEV4dGVuc2lvbihleHRlbnNpb25JZCkpO1xuICAgICAgICAgIC8vIFByZWxvYWQgYW55IGZvbnRzLlxuICAgICAgICAgIChjcmVhdGl2ZU1ldGFEYXRhRGVmLmN1c3RvbVN0eWxlc2hlZXRzIHx8IFtdKS5mb3JFYWNoKGZvbnQgPT5cbiAgICAgICAgICAgIHRoaXMucHJlY29ubmVjdC5wcmVsb2FkKGZvbnQuaHJlZikpO1xuXG4gICAgICAgICAgY29uc3QgdXJscyA9IFNlcnZpY2VzLnVybEZvckRvYyh0aGlzLmdldEFtcERvYygpKTtcbiAgICAgICAgICAvLyBQcmVsb2FkIGFueSBBTVAgaW1hZ2VzLlxuICAgICAgICAgIChjcmVhdGl2ZU1ldGFEYXRhRGVmLmltYWdlcyB8fCBbXSkuZm9yRWFjaChpbWFnZSA9PlxuICAgICAgICAgICAgdXJscy5pc1NlY3VyZShpbWFnZSkgJiYgdGhpcy5wcmVjb25uZWN0LnByZWxvYWQoaW1hZ2UpKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRpdmVNZXRhRGF0YURlZjtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IpIHtcbiAgICAgICAgICAgIGNhc2UgSUZSQU1FX0dFVDpcbiAgICAgICAgICAgIGNhc2UgTkVUV09SS19GQUlMVVJFOlxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNhc2UgSU5WQUxJRF9TUFNBX1JFU1BPTlNFOlxuICAgICAgICAgICAgY2FzZSBOT19DT05URU5UX1JFU1BPTlNFOlxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbmlmaWVkQ3JlYXRpdmU6ICcnLFxuICAgICAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRFeHRlbnNpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBjdXN0b21TdHlsZXNoZWV0czogW10sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIGVycm9yIGluIGNoYWluIG9jY3VycywgcmVwb3J0IGl0IGFuZCByZXR1cm4gbnVsbCBzbyB0aGF0XG4gICAgICAgICAgLy8gbGF5b3V0Q2FsbGJhY2sgY2FuIHJlbmRlciB2aWEgY3Jvc3MgZG9tYWluIGlmcmFtZSBhc3N1bWluZyBhZFxuICAgICAgICAgIC8vIHVybCBvciBjcmVhdGl2ZSBleGlzdC5cbiAgICAgICAgICB0aGlzLnByb21pc2VFcnJvckhhbmRsZXJfKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBibG9jayByZXR1cm5zIHRoZSBhZCBjcmVhdGl2ZSBpZiBpdCBleGlzdHMgYW5kIHZhbGlkYXRlcyBhcyBBTVA7XG4gICAqIG51bGwgb3RoZXJ3aXNlLlxuICAgKiBAcGFyYW0geyFBcnJheUJ1ZmZlcn0gYnl0ZXNcbiAgICogQHBhcmFtIHshSGVhZGVyc30gaGVhZGVyc1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTw/QXJyYXlCdWZmZXI+fVxuICAgKi9cbiAgbWF5YmVWYWxpZGF0ZUFtcENyZWF0aXZlKGJ5dGVzLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY2hlY2tTdGlsbEN1cnJlbnQgPSB0aGlzLnZlcmlmeVN0aWxsQ3VycmVudCgpO1xuICAgIHJldHVybiB0aGlzLmtleXNldFByb21pc2VfXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpID09ICdmYWtlJyAmJlxuICAgICAgICAgICAgICAhdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnY2hlY2tzaWcnKSkge1xuICAgICAgICAgICAgLy8gZG8gbm90IHZlcmlmeSBzaWduYXR1cmUgZm9yIGZha2UgdHlwZSBhZCwgdW5sZXNzIHRoZSBhZFxuICAgICAgICAgICAgLy8gc3BlY2ZpY2FsbHkgcmVxdWlyZXMgdmlhICdjaGVja3NpZycgYXR0cmlidXRlXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFZlcmlmaWNhdGlvblN0YXR1cy5PSyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzaWduYXR1cmVWZXJpZmllckZvcih0aGlzLndpbikudmVyaWZ5KGJ5dGVzLCBoZWFkZXJzKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oc3RhdHVzID0+IHtcbiAgICAgICAgICBjaGVja1N0aWxsQ3VycmVudCgpO1xuICAgICAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFZlcmlmaWNhdGlvblN0YXR1cy5PSzpcbiAgICAgICAgICAgICAgcmVzdWx0ID0gYnl0ZXM7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBWZXJpZmljYXRpb25TdGF0dXMuQ1JZUFRPX1VOQVZBSUxBQkxFOlxuICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnNob3VsZFByZWZlcmVudGlhbFJlbmRlcldpdGhvdXRDcnlwdG8oKSA/XG4gICAgICAgICAgICAgICAgYnl0ZXMgOiBudWxsO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIFRPRE8oQHRheW1vbmJlYWwsICM5Mjc0KTogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZXNlXG4gICAgICAgICAgICBjYXNlIFZlcmlmaWNhdGlvblN0YXR1cy5FUlJPUl9LRVlfTk9UX0ZPVU5EOlxuICAgICAgICAgICAgY2FzZSBWZXJpZmljYXRpb25TdGF0dXMuRVJST1JfU0lHTkFUVVJFX01JU01BVENIOlxuICAgICAgICAgICAgICB1c2VyKCkuZXJyb3IoXG4gICAgICAgICAgICAgICAgICBUQUcsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSxcbiAgICAgICAgICAgICAgICAgICdTaWduYXR1cmUgdmVyaWZpY2F0aW9uIGZhaWxlZCcpO1xuICAgICAgICAgICAgY2FzZSBWZXJpZmljYXRpb25TdGF0dXMuVU5WRVJJRklFRDpcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuaXNTaW5nbGVQYWdlU3RvcnlBZCAmJiAhcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9TUFNBX1JFU1BPTlNFKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUG9wdWxhdGVzIG9iamVjdCBtYXBwaW5nIG9mIGZlYXR1cmUgdG8gdmFsdWUgdXNlZCBmb3IgcG9zdCBhZCByZXNwb25zZVxuICAgKiBiZWhhdmlvciBleHBlcmltZW50YXRpb24uICBBc3N1bWVzIGNvbW1hIHNlcGFyYXRlZCwgPSBkZWxpbWl0ZWQga2V5L3ZhbHVlXG4gICAqIHBhaXJzLiAgSWYga2V5IGFwcGVhcnMgbW9yZSB0aGFuIG9uY2UsIGxhc3QgdmFsdWUgd2lucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwb3B1bGF0ZVBvc3RBZFJlc3BvbnNlRXhwZXJpbWVudEZlYXR1cmVzXyhpbnB1dCkge1xuICAgIGlucHV0LnNwbGl0KCcsJykuZm9yRWFjaChsaW5lID0+IHtcbiAgICAgIGlmICghbGluZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0cyA9IGxpbmUuc3BsaXQoJz0nKTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT0gMiB8fCAhcGFydHNbMF0pIHtcbiAgICAgICAgZGV2KCkud2FybihUQUcsIGBpbnZhbGlkIGV4cGVyaW1lbnQgZmVhdHVyZSAke2xpbmV9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zdEFkUmVzcG9uc2VFeHBlcmltZW50RmVhdHVyZXNbcGFydHNbMF1dID0gcGFydHNbMV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVmcmVzaGVzIGFkIHNsb3QgYnkgZmV0Y2hpbmcgYSBuZXcgY3JlYXRpdmUgYW5kIHJlbmRlcmluZyBpdC4gVGhpcyBsZWF2ZXNcbiAgICogdGhlIGN1cnJlbnQgY3JlYXRpdmUgZGlzcGxheWVkIHVudGlsIHRoZSBuZXh0IG9uZSBpcyByZWFkeS5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSByZWZyZXNoRW5kQ2FsbGJhY2sgV2hlbiBjYWxsZWQsIHRoaXMgZnVuY3Rpb24gd2lsbFxuICAgKiAgIHJlc3RhcnQgdGhlIHJlZnJlc2ggY3ljbGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYWxsIGFzeW5jaHJvbm91cyBwb3J0aW9ucyBvZlxuICAgKiAgIHRoZSByZWZyZXNoIGZ1bmN0aW9uIGNvbXBsZXRlLiBUaGlzIGlzIHBhcnRpY3VsYXJseSBoYW5keSBmb3IgdGVzdGluZy5cbiAgICovXG4gIHJlZnJlc2gocmVmcmVzaEVuZENhbGxiYWNrKSB7XG4gICAgZGV2KCkuYXNzZXJ0KCF0aGlzLmlzUmVmcmVzaGluZyk7XG4gICAgdGhpcy5pc1JlZnJlc2hpbmcgPSB0cnVlO1xuICAgIHRoaXMudGVhckRvd25TbG90KCk7XG4gICAgdGhpcy5pbml0aWF0ZUFkUmVxdWVzdCgpO1xuICAgIGRldigpLmFzc2VydCh0aGlzLmFkUHJvbWlzZV8pO1xuICAgIGNvbnN0IHByb21pc2VJZCA9IHRoaXMucHJvbWlzZUlkXztcbiAgICByZXR1cm4gdGhpcy5hZFByb21pc2VfLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmlzUmVmcmVzaGluZyB8fCBwcm9taXNlSWQgIT0gdGhpcy5wcm9taXNlSWRfKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVmcmVzaCBjeWNsZSB3YXMgY2FuY2VsZWQsIHN1Y2ggYXMgaW4gYSBuby1jb250ZW50XG4gICAgICAgIC8vIHJlc3BvbnNlIGNhc2UsIGtlZXAgc2hvd2luZyB0aGUgb2xkIGNyZWF0aXZlLlxuICAgICAgICByZWZyZXNoRW5kQ2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubXV0YXRlRWxlbWVudCgoKSA9PiB7XG4gICAgICAgIC8vIEZpcmUgYW4gYWQtcmVmcmVzaCBldmVudCBzbyB0aGF0IDNyZCBwYXJ0aWVzIGNhbiB0cmFjayB3aGVuIGFuIGFkXG4gICAgICAgIC8vIGhhcyBjaGFuZ2VkLlxuICAgICAgICB0cmlnZ2VyQW5hbHl0aWNzRXZlbnQodGhpcy5lbGVtZW50LCBBbmFseXRpY3NUcmlnZ2VyLkFEX1JFRlJFU0gpO1xuXG4gICAgICAgIHRoaXMudG9nZ2xlUGxhY2Vob2xkZXIodHJ1ZSk7XG4gICAgICAgIC8vIFRoaXMgZGVsYXkgcHJvdmlkZXMgYSAxIHNlY29uZCBidWZmZXIgd2hlcmUgdGhlIGFkIGxvYWRlciBpc1xuICAgICAgICAvLyBkaXNwbGF5ZWQgaW4gYmV0d2VlbiB0aGUgY3JlYXRpdmVzLlxuICAgICAgICByZXR1cm4gU2VydmljZXMudGltZXJGb3IodGhpcy53aW4pLnByb21pc2UoMTAwMCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pc1JlbGF5b3V0TmVlZGVkRmxhZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5nZXRSZXNvdXJjZSgpLmxheW91dENhbmNlbGVkKCk7XG4gICAgICAgICAgLy8gT25seSBSZXF1aXJlIHJlbGF5b3V0IGFmdGVyIHBhZ2UgdmlzaWJsZVxuICAgICAgICAgIFNlcnZpY2VzLnZpZXdlckZvckRvYyh0aGlzLmdldEFtcERvYygpKS53aGVuTmV4dFZpc2libGUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIFNlcnZpY2VzLnJlc291cmNlc0ZvckRvYyh0aGlzLmdldEFtcERvYygpKVxuICAgICAgICAgICAgICAgIC4vKk9LKi9yZXF1aXJlTGF5b3V0KHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB1bmNhdWdodCBlcnJvcnMgd2l0aGluIHByb21pc2UgZmxvdy5cbiAgICogQHBhcmFtIHsqfSBlcnJvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaWdub3JlU3RhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByb21pc2VFcnJvckhhbmRsZXJfKGVycm9yLCBvcHRfaWdub3JlU3RhY2spIHtcbiAgICBpZiAoaXNDYW5jZWxsYXRpb24oZXJyb3IpKSB7XG4gICAgICAvLyBSZXRocm93IGlmIGNhbmNlbGxhdGlvbi5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChlcnJvciAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgICBlcnJvciA9IGR1cGxpY2F0ZUVycm9ySWZOZWNlc3NhcnkoLyoqIEB0eXBlIHshRXJyb3J9ICovKGVycm9yKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCd1bmtub3duIGVycm9yICcgKyBlcnJvcik7XG4gICAgfVxuICAgIGlmIChvcHRfaWdub3JlU3RhY2spIHtcbiAgICAgIGVycm9yLmlnbm9yZVN0YWNrID0gb3B0X2lnbm9yZVN0YWNrO1xuICAgIH1cblxuICAgIC8vIEFkZCBgdHlwZWAgdG8gdGhlIG1lc3NhZ2UuIEVuc3VyZSB0byBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgc3RhY2suXG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSB8fCAnbm90eXBlJztcbiAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmRleE9mKGAke1RBR306ICR7dHlwZX06YCkgIT0gMCkge1xuICAgICAgZXJyb3IubWVzc2FnZSA9IGAke1RBR306ICR7dHlwZX06ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgIH1cblxuICAgIC8vIEFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgIGFzc2lnbkFkVXJsVG9FcnJvcigvKiogQHR5cGUgeyFFcnJvcn0gKi8oZXJyb3IpLCB0aGlzLmFkVXJsXyk7XG5cbiAgICBpZiAoZ2V0TW9kZSgpLmRldmVsb3BtZW50IHx8IGdldE1vZGUoKS5sb2NhbERldiB8fCBnZXRNb2RlKCkubG9nKSB7XG4gICAgICB1c2VyKCkuZXJyb3IoVEFHLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZXIoKS53YXJuKFRBRywgZXJyb3IpO1xuICAgICAgLy8gUmVwb3J0IHdpdGggMSUgc2FtcGxpbmcgYXMgYW4gZXhwZWN0ZWQgZGV2IGVycm9yLlxuICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjAxKSB7XG4gICAgICAgIGRldigpLmV4cGVjdGVkRXJyb3IoVEFHLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBsYXlvdXRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5pc1JlZnJlc2hpbmcpIHtcbiAgICAgIHRoaXMuZGVzdHJveUZyYW1lKHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hdHRlbXB0VG9SZW5kZXJDcmVhdGl2ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHMgdG8gcmVuZGVyIHRoZSByZXR1cm5lZCBjcmVhdGl2ZSBmb2xsb3dpbmcgdGhlIHJlc29sdXRpb24gb2YgdGhlXG4gICAqIGFkUHJvbWlzZS5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj58IVByb21pc2U8dW5kZWZpbmVkPn0gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXNcbiAgICogICB3aGVuIHRoZSByZW5kZXJpbmcgYXR0ZW1wdCBoYXMgZmluaXNoZWQuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGF0dGVtcHRUb1JlbmRlckNyZWF0aXZlKCkge1xuICAgIC8vIFByb21pc2UgbWF5IGJlIG51bGwgaWYgZWxlbWVudCB3YXMgZGV0ZXJtaW5lZCB0byBiZSBpbnZhbGlkIGZvciBBNEEuXG4gICAgaWYgKCF0aGlzLmFkUHJvbWlzZV8pIHtcbiAgICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemVQcm9taXNlQ2hhaW5fKCkpIHtcbiAgICAgICAgZGV2KCkuZXJyb3IoVEFHLCAnTnVsbCBwcm9taXNlIGluIGxheW91dENhbGxiYWNrJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrU3RpbGxDdXJyZW50ID0gdGhpcy52ZXJpZnlTdGlsbEN1cnJlbnQoKTtcbiAgICAvLyBQcm9taXNlIGNoYWluIHdpbGwgaGF2ZSBkZXRlcm1pbmVkIGlmIGNyZWF0aXZlIGlzIHZhbGlkIEFNUC5cbiAgICByZXR1cm4gdGhpcy5hZFByb21pc2VfLnRoZW4oY3JlYXRpdmVNZXRhRGF0YSA9PiB7XG4gICAgICBjaGVja1N0aWxsQ3VycmVudCgpO1xuICAgICAgaWYgKHRoaXMuaXNDb2xsYXBzZWRfKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHRoaXMuaWZyYW1lIGFscmVhZHkgZXhpc3RzLCBhbmQgd2UncmUgbm90IGN1cnJlbnRseSBpbiB0aGUgbWlkZGxlXG4gICAgICAvLyBvZiByZWZyZXNoaW5nLCBiYWlsIG91dCBoZXJlLiBUaGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpblxuICAgICAgLy8gdGVzdGluZyBjb250ZXh0LCBub3QgaW4gcHJvZHVjdGlvbi5cbiAgICAgIGlmICh0aGlzLmlmcmFtZSAmJiAhdGhpcy5pc1JlZnJlc2hpbmcpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCFjcmVhdGl2ZU1ldGFEYXRhKSB7XG4gICAgICAgIC8vIE5vbi1BTVAgY3JlYXRpdmUgY2FzZSwgd2lsbCB2ZXJpZnkgYWQgdXJsIGV4aXN0ZW5jZS5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTm9uQW1wQ3JlYXRpdmUoKTtcbiAgICAgIH1cbiAgICAgIC8vIE11c3QgYmUgYW4gQU1QIGNyZWF0aXZlLlxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQW1wQ3JlYXRpdmVfKGNyZWF0aXZlTWV0YURhdGEpXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjaGVja1N0aWxsQ3VycmVudCgpO1xuICAgICAgICAgICAgLy8gRmFpbGVkIHRvIHJlbmRlciB2aWEgQU1QIGNyZWF0aXZlIHBhdGggc28gZmFsbGJhY2sgdG8gbm9uLUFNUFxuICAgICAgICAgICAgLy8gcmVuZGVyaW5nIHdpdGhpbiBjcm9zcyBkb21haW4gaWZyYW1lLlxuICAgICAgICAgICAgdXNlcigpLndhcm4oVEFHLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksXG4gICAgICAgICAgICAgICAgJ0Vycm9yIGluamVjdGluZyBjcmVhdGl2ZSBpbiBmcmllbmRseSBmcmFtZScsIGVycik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJOb25BbXBDcmVhdGl2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHRoaXMucHJvbWlzZUVycm9ySGFuZGxlcl8oZXJyb3IpO1xuICAgICAgdGhyb3cgY2FuY2VsbGF0aW9uKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgYWQgcmVxdWVzdCBtYXkgYmUgc2VudCB1c2luZyBYSFIuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBpc1hockFsbG93ZWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICoqL1xuICBhdHRlbXB0Q2hhbmdlU2l6ZShuZXdIZWlnaHQsIG5ld1dpZHRoKSB7XG4gICAgLy8gU3RvcmUgb3JpZ2luYWwgc2l6ZSBvZiBzbG90IGluIG9yZGVyIHRvIGFsbG93IHJlLWV4cGFuc2lvbiBvblxuICAgIC8vIHVubGF5b3V0Q2FsbGJhY2sgc28gdGhhdCBpdCBpcyByZXZlcnRlZCB0byBvcmlnaW5hbCBzaXplIGluIGNhc2VcbiAgICAvLyBvZiByZXN1bWVDYWxsYmFjay5cbiAgICB0aGlzLm9yaWdpbmFsU2xvdFNpemVfID0gdGhpcy5vcmlnaW5hbFNsb3RTaXplXyB8fCB0aGlzLmdldExheW91dEJveCgpO1xuICAgIHJldHVybiBzdXBlci5hdHRlbXB0Q2hhbmdlU2l6ZShuZXdIZWlnaHQsIG5ld1dpZHRoKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgICovXG4gIHVubGF5b3V0Q2FsbGJhY2soKSB7XG4gICAgdGhpcy50ZWFyRG93blNsb3QoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byB0ZWFyIGRvd24gYW5kIHNldCBhbGwgc3RhdGUgdmFyaWFibGVzIHRvIGluaXRpYWwgY29uZGl0aW9ucy5cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgdGVhckRvd25TbG90KCkge1xuICAgIC8vIEluY3JlbWVudCBwcm9taXNlSWQgdG8gY2F1c2UgYW55IHBlbmRpbmcgcHJvbWlzZSB0byBjYW5jZWwuXG4gICAgdGhpcy5wcm9taXNlSWRfKys7XG4gICAgdGhpcy51aUhhbmRsZXIuYXBwbHlVbmxheW91dFVJKCk7XG4gICAgaWYgKHRoaXMub3JpZ2luYWxTbG90U2l6ZV8pIHtcbiAgICAgIHN1cGVyLmF0dGVtcHRDaGFuZ2VTaXplKFxuICAgICAgICAgIHRoaXMub3JpZ2luYWxTbG90U2l6ZV8uaGVpZ2h0LCB0aGlzLm9yaWdpbmFsU2xvdFNpemVfLndpZHRoKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxTbG90U2l6ZV8gPSBudWxsO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgLy8gVE9ETyhrZWl0aHdyaWdodGJvcyk6IGlmIHdlIGFyZSB1bmFibGUgdG8gcmV2ZXJ0IHNpemUsIG9uIG5leHRcbiAgICAgICAgICAvLyB0cmlnZ2VyIG9mIHByb21pc2UgY2hhaW4gdGhlIGFkIHJlcXVlc3QgbWF5IGZhaWwgZHVlIHRvIGludmFsaWRcbiAgICAgICAgICAvLyBzbG90IHNpemUuICBEZXRlcm1pbmUgaG93IHRvIGhhbmRsZSB0aGlzIGNhc2UuXG4gICAgICAgICAgICBkZXYoKS53YXJuKFRBRywgJ3VuYWJsZSB0byByZXZlcnQgdG8gb3JpZ2luYWwgc2l6ZScsIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0NvbGxhcHNlZF8gPSBmYWxzZTtcblxuICAgIC8vIFJlbW92ZSByZW5kZXJpbmcgZnJhbWUsIGlmIGl0IGV4aXN0cy5cbiAgICB0aGlzLmRlc3Ryb3lGcmFtZSgpO1xuXG4gICAgdGhpcy5hZFByb21pc2VfID0gbnVsbDtcbiAgICB0aGlzLmFkVXJsXyA9IG51bGw7XG4gICAgdGhpcy5jcmVhdGl2ZUJvZHlfID0gbnVsbDtcbiAgICB0aGlzLmlzVmVyaWZpZWRBbXBDcmVhdGl2ZV8gPSBmYWxzZTtcbiAgICB0aGlzLmZyb21SZXN1bWVDYWxsYmFjayA9IGZhbHNlO1xuICAgIHRoaXMuZXhwZXJpbWVudGFsTm9uQW1wQ3JlYXRpdmVSZW5kZXJNZXRob2RfID1cbiAgICAgICAgdGhpcy5nZXROb25BbXBDcmVhdGl2ZVJlbmRlcmluZ01ldGhvZCgpO1xuICAgIHRoaXMucG9zdEFkUmVzcG9uc2VFeHBlcmltZW50RmVhdHVyZXMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byByZW1vdmUgdGhlIGN1cnJlbnQgZnJhbWUgYW5kIGZyZWUgYW55IGFzc29jaWF0ZWQgcmVzb3VyY2VzLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgbm8tb3AgaWYgdGhpcyBhZCBzbG90IGlzIGN1cnJlbnRseSBpbiB0aGUgcHJvY2VzcyBvZlxuICAgKiBiZWluZyByZWZyZXNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZvcmNlIEZvcmNlcyB0aGUgcmVtb3ZhbCBvZiB0aGUgZnJhbWUsIGV2ZW4gaWZcbiAgICogICB0aGlzLmlzUmVmcmVzaGluZyBpcyB0cnVlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBkZXN0cm95RnJhbWUoZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5pc1JlZnJlc2hpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQWxsb3cgZW1iZWQgdG8gcmVsZWFzZSBpdHMgcmVzb3VyY2VzLlxuICAgIGlmICh0aGlzLmZyaWVuZGx5SWZyYW1lRW1iZWRfKSB7XG4gICAgICB0aGlzLmZyaWVuZGx5SWZyYW1lRW1iZWRfLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZnJpZW5kbHlJZnJhbWVFbWJlZF8gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5pZnJhbWUgJiYgdGhpcy5pZnJhbWUucGFyZW50RWxlbWVudCkge1xuICAgICAgdGhpcy5pZnJhbWUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnhPcmlnaW5JZnJhbWVIYW5kbGVyXykge1xuICAgICAgdGhpcy54T3JpZ2luSWZyYW1lSGFuZGxlcl8uZnJlZVhPcmlnaW5JZnJhbWUoKTtcbiAgICAgIHRoaXMueE9yaWdpbklmcmFtZUhhbmRsZXJfID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICAqL1xuICB2aWV3cG9ydENhbGxiYWNrKGluVmlld3BvcnQpIHtcbiAgICBpZiAodGhpcy5mcmllbmRseUlmcmFtZUVtYmVkXykge1xuICAgICAgc2V0RnJpZW5kbHlJZnJhbWVFbWJlZFZpc2libGUodGhpcy5mcmllbmRseUlmcmFtZUVtYmVkXywgaW5WaWV3cG9ydCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnhPcmlnaW5JZnJhbWVIYW5kbGVyXykge1xuICAgICAgdGhpcy54T3JpZ2luSWZyYW1lSGFuZGxlcl8udmlld3BvcnRDYWxsYmFjayhpblZpZXdwb3J0KTtcbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNyZWF0ZVBsYWNlaG9sZGVyQ2FsbGJhY2soKSB7XG4gICAgcmV0dXJuIHRoaXMudWlIYW5kbGVyLmNyZWF0ZVBsYWNlaG9sZGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgQWQgVVJMIHRvIHNlbmQgYW4gWEhSIFJlcXVlc3QgdG8uICBUbyBiZSBpbXBsZW1lbnRlZFxuICAgKiBieSBuZXR3b3JrLlxuICAgKiBAcGFyYW0gez9DT05TRU5UX1BPTElDWV9TVEFURX0gdW51c2VkQ29uc2VudFN0YXRlXG4gICAqIEBwYXJhbSB7UHJvbWlzZTwhQXJyYXk8cnRjUmVzcG9uc2VEZWY+Pj19IG9wdF9ydGNSZXNwb25zZXNQcm9taXNlXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz58c3RyaW5nfVxuICAgKi9cbiAgZ2V0QWRVcmwodW51c2VkQ29uc2VudFN0YXRlLCBvcHRfcnRjUmVzcG9uc2VzUHJvbWlzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0QWRVcmwgbm90IGltcGxlbWVudGVkIScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBhZCB1cmwgc3RhdGUgdG8gbnVsbCwgdXNlZCB0byBwcmV2ZW50IGZyYW1lIGdldCBmYWxsYmFjayBpZiBlcnJvclxuICAgKiBpcyB0aHJvd24gYWZ0ZXIgdXJsIGNvbnN0cnVjdGlvbiBidXQgcHJpb3IgdG8gbGF5b3V0Q2FsbGJhY2suXG4gICAqL1xuICByZXNldEFkVXJsKCkge1xuICAgIHRoaXMuYWRVcmxfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbigpfSBmdW5jdGlvbiB0aGF0IHdoZW4gY2FsbGVkIHdpbGwgdmVyaWZ5IGlmIGN1cnJlbnRcbiAgICogICAgYWQgcmV0cmlldmFsIGlzIGN1cnJlbnQgKG1lYW5pbmcgdW5sYXlvdXRDYWxsYmFjayB3YXMgbm90IGV4ZWN1dGVkKS5cbiAgICogICAgSWYgbm90LCB3aWxsIHRocm93IGNhbmNlbGxhdGlvbiBleGNlcHRpb247XG4gICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgKi9cbiAgdmVyaWZ5U3RpbGxDdXJyZW50KCkge1xuICAgIGNvbnN0IHByb21pc2VJZCA9IHRoaXMucHJvbWlzZUlkXztcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHByb21pc2VJZCAhPSB0aGlzLnByb21pc2VJZF8pIHtcbiAgICAgICAgdGhyb3cgY2FuY2VsbGF0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIGRlc2lyZWQgc2l6ZSBvZiB0aGUgY3JlYXRpdmUgYmFzZWQgb24gdGhlIEhUVFAgcmVzcG9uc2VcbiAgICogaGVhZGVycy4gTXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG9yaWdpbmFsIHNpemUgb2YgdGhlIGFkIHNsb3RcbiAgICogYWxvbmcgZWFjaCBkaW1lbnNpb24uIE1heSBiZSBvdmVycmlkZGVuIGJ5IG5ldHdvcmsuXG4gICAqXG4gICAqIEBwYXJhbSB7IS4uLy4uLy4uL3NyYy91dGlscy94aHItdXRpbHMuRmV0Y2hSZXNwb25zZUhlYWRlcnN9IHJlc3BvbnNlSGVhZGVyc1xuICAgKiBAcmV0dXJuIHs/U2l6ZUluZm9EZWZ9XG4gICAqL1xuICBleHRyYWN0U2l6ZShyZXNwb25zZUhlYWRlcnMpIHtcbiAgICBjb25zdCBoZWFkZXJWYWx1ZSA9IHJlc3BvbnNlSGVhZGVycy5nZXQoQ1JFQVRJVkVfU0laRV9IRUFERVIpO1xuICAgIGlmICghaGVhZGVyVmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBtYXRjaCA9IC9eKFswLTldKyl4KFswLTldKykkLy5leGVjKGhlYWRlclZhbHVlKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUT0RPKEB0YXltb25iZWFsLCAjOTI3NCk6IHJlcGxhY2UgdGhpcyB3aXRoIHJlYWwgZXJyb3IgcmVwb3J0aW5nXG4gICAgICB1c2VyKCkuZXJyb3IoVEFHLCBgSW52YWxpZCBzaXplIGhlYWRlcjogJHtoZWFkZXJWYWx1ZX1gKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHs/U2l6ZUluZm9EZWZ9ICovIChcbiAgICAgIHt3aWR0aDogTnVtYmVyKG1hdGNoWzFdKSwgaGVpZ2h0OiBOdW1iZXIobWF0Y2hbMl0pfSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yY2VzIHRoZSBVSSBIYW5kbGVyIHRvIGNvbGxhcHNlIHRoaXMgc2xvdC5cbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICBmb3JjZUNvbGxhcHNlKCkge1xuICAgIGlmICh0aGlzLmlzUmVmcmVzaGluZykge1xuICAgICAgLy8gSWYsIGZvciB3aGF0ZXZlciByZWFzb24sIHRoZSBuZXcgY3JlYXRpdmUgd291bGQgY29sbGFwc2UgdGhpcyBzbG90LFxuICAgICAgLy8gc3RpY2sgd2l0aCB0aGUgb2xkIGNyZWF0aXZlIHVudGlsIHRoZSBuZXh0IHJlZnJlc2ggY3ljbGUuXG4gICAgICB0aGlzLmlzUmVmcmVzaGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkZXYoKS5hc3NlcnQodGhpcy51aUhhbmRsZXIpO1xuICAgIC8vIFN0b3JlIG9yaWdpbmFsIHNpemUgdG8gYWxsb3cgZm9yIHJldmVydGluZyBvbiB1bmxheW91dENhbGxiYWNrIHNvIHRoYXRcbiAgICAvLyBzdWJzZXF1ZW50IHBhZ2V2aWV3IGFsbG93cyBmb3IgYWQgcmVxdWVzdC5cbiAgICB0aGlzLm9yaWdpbmFsU2xvdFNpemVfID0gdGhpcy5vcmlnaW5hbFNsb3RTaXplXyB8fCB0aGlzLmdldExheW91dEJveCgpO1xuICAgIHRoaXMudWlIYW5kbGVyLmFwcGx5Tm9Db250ZW50VUkoKTtcbiAgICB0aGlzLmlzQ29sbGFwc2VkXyA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBjcmVhdGl2ZSBoYXMgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkIHdpdGhpbiB0aGVcbiAgICogcHVibGlzaGVyIHBhZ2UgYnV0IHByaW9yIHRvIGxvYWQgKG9yIGluaS1sb2FkIGZvciBmcmllbmRseSBmcmFtZSBBTVBcbiAgICogY3JlYXRpdmUgcmVuZGVyKS4gIFRvIGJlIG92ZXJyaWRkZW4gYnkgbmV0d29yayBpbXBsZW1lbnRhdGlvbnMgYXMgbmVlZGVkLlxuICAgKlxuICAgKiBAcGFyYW0gez9DcmVhdGl2ZU1ldGFEYXRhRGVmfSBjcmVhdGl2ZU1ldGFEYXRhIG1ldGFkYXRhIGlmIEFNUCBjcmVhdGl2ZSxcbiAgICogICAgbnVsbCBvdGhlcndpc2UuXG4gICAqL1xuICBvbkNyZWF0aXZlUmVuZGVyKGNyZWF0aXZlTWV0YURhdGEpIHtcbiAgICB0aGlzLm1heWJlVHJpZ2dlckFuYWx5dGljc0V2ZW50XyhcbiAgICAgICAgY3JlYXRpdmVNZXRhRGF0YSA/ICdyZW5kZXJGcmllbmRseUVuZCcgOiAncmVuZGVyQ3Jvc3NEb21haW5FbmQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBpZnJhbWUgdGhhdCB3YXMganVzdCBjcmVhdGVkLiAgVG8gYmUgb3ZlcnJpZGRlbiBmb3JcbiAgICogdGVzdGluZy5cbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICBvbkNyb3NzRG9tYWluSWZyYW1lQ3JlYXRlZChpZnJhbWUpIHtcbiAgICBkZXYoKS5pbmZvKFRBRywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpLFxuICAgICAgICBgb25Dcm9zc0RvbWFpbklmcmFtZUNyZWF0ZWQgJHtpZnJhbWV9YCk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhZCByZXF1ZXN0LCBleHRyYWN0IHRoZSBjcmVhdGl2ZSBhbmQgc2lnbmF0dXJlIGZyb20gdGhlIHJlc3BvbnNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRVcmwgUmVxdWVzdCBVUkwgdG8gc2VuZCBYSFIgdG8uXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD8uLi8uLi8uLi9zcmMvdXRpbHMveGhyLXV0aWxzLkZldGNoUmVzcG9uc2U+fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBzZW5kWGhyUmVxdWVzdChhZFVybCkge1xuICAgIHRoaXMubWF5YmVUcmlnZ2VyQW5hbHl0aWNzRXZlbnRfKCdhZFJlcXVlc3RTdGFydCcpO1xuICAgIGNvbnN0IHhockluaXQgPSB7XG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICB9O1xuICAgIHJldHVybiBTZXJ2aWNlcy54aHJGb3IodGhpcy53aW4pXG4gICAgICAgIC5mZXRjaChhZFVybCwgeGhySW5pdClcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2Uuc3RhdHVzID4gMjAwKSB7XG4gICAgICAgICAgICAvLyBJbnZhbGlkIHNlcnZlciByZXNwb25zZSBjb2RlIHNvIHdlIHNob3VsZCBjb2xsYXBzZS5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiBhbiBlcnJvciBvY2N1cnMsIGxldCB0aGUgYWQgYmUgcmVuZGVyZWQgdmlhIGlmcmFtZSBhZnRlciBkZWxheS5cbiAgICAgICAgICAvLyBUT0RPKHRheW1vbmJlYWwpOiBGaWd1cmUgb3V0IGEgbW9yZSBzb3BoaXN0aWNhdGVkIHRlc3QgZm9yIGRlY2lkaW5nXG4gICAgICAgICAgLy8gd2hldGhlciB0byByZXRyeSB3aXRoIGFuIGlmcmFtZSBhZnRlciBhbiBhZCByZXF1ZXN0IGZhaWx1cmUgb3IganVzdFxuICAgICAgICAgIC8vIGdpdmUgdXAgYW5kIHJlbmRlciB0aGUgZmFsbGJhY2sgY29udGVudCAob3IgY29sbGFwc2UgdGhlIGFkIHNsb3QpLlxuICAgICAgICAgIGNvbnN0IG5ldHdvcmtGYWlsdXJlSGFuZGxlclJlc3VsdCA9XG4gICAgICAgICAgICAgIHRoaXMub25OZXR3b3JrRmFpbHVyZShlcnJvciwgLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLmFkVXJsXykpO1xuICAgICAgICAgIGRldigpLmFzc2VydCghIW5ldHdvcmtGYWlsdXJlSGFuZGxlclJlc3VsdCk7XG4gICAgICAgICAgaWYgKG5ldHdvcmtGYWlsdXJlSGFuZGxlclJlc3VsdC5mcmFtZUdldERpc2FibGVkKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBhZFVybCB0byBudWxsIHdoaWNoIHdpbGwgY2F1c2UgbGF5b3V0Q2FsbGJhY2sgdG8gbm90XG4gICAgICAgICAgICAvLyBmZXRjaCB2aWEgZnJhbWUgR0VULlxuICAgICAgICAgICAgZGV2KCkuaW5mbyhcbiAgICAgICAgICAgICAgICBUQUcsICdmcmFtZSBnZXQgZGlzYWJsZWQgYXMgcGFydCBvZiBuZXR3b3JrIGZhaWx1cmUgaGFuZGxlcicpO1xuICAgICAgICAgICAgdGhpcy5yZXNldEFkVXJsKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRVcmxfID0gbmV0d29ya0ZhaWx1cmVIYW5kbGVyUmVzdWx0LmFkVXJsIHx8IHRoaXMuYWRVcmxfO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KE5FVFdPUktfRkFJTFVSRSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gbmV0d29yayBmYWlsdXJlIHNlbmRpbmcgWEhSIENPUlMgYWQgcmVxdWVzdCBhbGxvd2luZyBmb3JcbiAgICogbW9kaWZpY2F0aW9uIG9mIGFkIHVybCBhbmQgcHJldmVudCBmcmFtZSBHRVQgcmVxdWVzdCBvbiBsYXlvdXRDYWxsYmFjay5cbiAgICogQnkgZGVmYXVsdCwgR0VUIGZyYW1lIHJlcXVlc3Qgd2lsbCBiZSBleGVjdXRlZCB3aXRoIHNhbWUgYWQgVVJMIGFzIHVzZWRcbiAgICogZm9yIFhIUiBDT1JTIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7Kn0gdW51c2VkRXJyb3IgZnJvbSBuZXR3b3JrIGZhaWx1cmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVudXNlZEFkVXJsIHVzZWQgZm9yIG5ldHdvcmsgcmVxdWVzdFxuICAgKiBAcmV0dXJuIHshe2FkVXJsOiAoc3RyaW5nfHVuZGVmaW5lZCksIGZyYW1lR2V0RGlzYWJsZWQ6IChib29sZWFufHVuZGVmaW5lZCl9fVxuICAgKi9cbiAgb25OZXR3b3JrRmFpbHVyZSh1bnVzZWRFcnJvciwgdW51c2VkQWRVcmwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvKipcbiAgICogVG8gYmUgb3ZlcnJpZGRlbiBieSBuZXR3b3JrIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGluZGljYXRpbmcgd2hpY2hcbiAgICogc2lnbmluZyBzZXJ2aWNlKHMpIGlzIHRvIGJlIHVzZWQuXG4gICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fSBBIGxpc3Qgb2Ygc2lnbmluZyBzZXJ2aWNlcy5cbiAgICovXG4gIGdldFNpZ25pbmdTZXJ2aWNlTmFtZXMoKSB7XG4gICAgcmV0dXJuIGdldE1vZGUoKS5sb2NhbERldiA/IFsnZ29vZ2xlJywgJ2dvb2dsZS1kZXYnXSA6IFsnZ29vZ2xlJ107XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIG5vbi1BTVAgY3JlYXRpdmUgd2l0aGluIGNyb3NzIGRvbWFpbiBpZnJhbWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHRocm90dGxlQXBwbGllZCBXaGV0aGVyIGluY3JlbWVudExvYWRpbmdBZHMgaGFzIGFscmVhZHlcbiAgICogICAgYmVlbiBjYWxsZWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gV2hldGhlciB0aGUgY3JlYXRpdmUgd2FzIHN1Y2Nlc3NmdWxseSByZW5kZXJlZC5cbiAgICovXG4gIHJlbmRlck5vbkFtcENyZWF0aXZlKHRocm90dGxlQXBwbGllZCkge1xuICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlM3BmYWxsYmFjaycpID09ICd0cnVlJykge1xuICAgICAgdXNlcigpLndhcm4oVEFHLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksXG4gICAgICAgICAgJ2ZhbGxiYWNrIHRvIDNwIGRpc2FibGVkJyk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICB9XG4gICAgLy8gVE9ETyhrZWl0aHdyaWdodGJvcyk6IHJlbW92ZSB3aGVuIG5vIGxvbmdlciBuZWVkZWQuXG4gICAgZGV2KCkud2FybihUQUcsICdmYWxsYmFjayB0byAzcCcpO1xuICAgIC8vIEhhdmVuJ3QgcmVuZGVyZWQgeWV0LCBzbyB0cnkgcmVuZGVyaW5nIHZpYSBvbmUgb2Ygb3VyXG4gICAgLy8gY3Jvc3MtZG9tYWluIGlmcmFtZSBzb2x1dGlvbnMuXG4gICAgY29uc3QgbWV0aG9kID0gdGhpcy5leHBlcmltZW50YWxOb25BbXBDcmVhdGl2ZVJlbmRlck1ldGhvZF87XG4gICAgbGV0IHJlbmRlclByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIGlmICgobWV0aG9kID09IFhPUklHSU5fTU9ERS5TQUZFRlJBTUUgfHxcbiAgICAgICAgIG1ldGhvZCA9PSBYT1JJR0lOX01PREUuTkFNRUZSQU1FKSAmJlxuICAgICAgICB0aGlzLmNyZWF0aXZlQm9keV8pIHtcbiAgICAgIHJlbmRlclByb21pc2UgPSB0aGlzLnJlbmRlclZpYU5hbWVBdHRyT2ZYT3JpZ2luSWZyYW1lXyhcbiAgICAgICAgICB0aGlzLmNyZWF0aXZlQm9keV8pO1xuICAgICAgdGhpcy5jcmVhdGl2ZUJvZHlfID0gbnVsbDsgLy8gRnJlZSByZXNvdXJjZXMuXG4gICAgfSBlbHNlIGlmICh0aGlzLmFkVXJsXykge1xuICAgICAgYXNzZXJ0SHR0cHNVcmwodGhpcy5hZFVybF8sIHRoaXMuZWxlbWVudCk7XG4gICAgICByZW5kZXJQcm9taXNlID0gdGhpcy5yZW5kZXJWaWFJZnJhbWVHZXRfKHRoaXMuYWRVcmxfKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWQgVVJMIG1heSBub3QgZXhpc3QgaWYgYnVpbGRBZFVybCB0aHJvd3MgZXJyb3Igb3IgcmV0dXJucyBlbXB0eS5cbiAgICAgIC8vIElmIGVycm9yIG9jY3VycmVkLCBpdCB3b3VsZCBoYXZlIGFscmVhZHkgYmVlbiByZXBvcnRlZCBidXQgbGV0J3NcbiAgICAgIC8vIHJlcG9ydCB0byB1c2VyIGluIGNhc2Ugb2YgZW1wdHkuXG4gICAgICB1c2VyKCkud2FybihUQUcsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSxcbiAgICAgICAgICAnTm8gY3JlYXRpdmUgb3IgVVJMIGF2YWlsYWJsZSAtLSBBNEEgY2FuXFwndCByZW5kZXIgYW55IGFkJyk7XG4gICAgfVxuICAgIGlmICghdGhyb3R0bGVBcHBsaWVkICYmICF0aGlzLmluTm9uQW1wUHJlZmVyZW5jZUV4cCgpKSB7XG4gICAgICBpbmNyZW1lbnRMb2FkaW5nQWRzKHRoaXMud2luLCByZW5kZXJQcm9taXNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlclByb21pc2UudGhlbihcbiAgICAgICAgcmVzdWx0ID0+IHtcbiAgICAgICAgICB0aGlzLm1heWJlVHJpZ2dlckFuYWx5dGljc0V2ZW50XygnY3Jvc3NEb21haW5JZnJhbWVMb2FkZWQnKTtcbiAgICAgICAgICAvLyBQYXNzIG9uIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgdmFsdWUgaW4gdGhlIHByb21pc2UgY2hhbmdlLlxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHZhbGlkYXRlZCBBTVAgY3JlYXRpdmUgZGlyZWN0bHkgaW4gdGhlIHBhcmVudCBwYWdlLlxuICAgKiBAcGFyYW0geyFDcmVhdGl2ZU1ldGFEYXRhRGVmfSBjcmVhdGl2ZU1ldGFEYXRhIE1ldGFkYXRhIHJlcXVpcmVkIHRvIHJlbmRlclxuICAgKiAgICAgQU1QIGNyZWF0aXZlLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gV2hldGhlciB0aGUgY3JlYXRpdmUgd2FzIHN1Y2Nlc3NmdWxseSByZW5kZXJlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlbmRlckFtcENyZWF0aXZlXyhjcmVhdGl2ZU1ldGFEYXRhKSB7XG4gICAgZGV2KCkuYXNzZXJ0KGNyZWF0aXZlTWV0YURhdGEubWluaWZpZWRDcmVhdGl2ZSxcbiAgICAgICAgJ21pc3NpbmcgbWluaWZpZWQgY3JlYXRpdmUnKTtcbiAgICBkZXYoKS5hc3NlcnQoISF0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudCwgJ21pc3Npbmcgb3duZXIgZG9jdW1lbnQ/IScpO1xuICAgIHRoaXMubWF5YmVUcmlnZ2VyQW5hbHl0aWNzRXZlbnRfKCdyZW5kZXJGcmllbmRseVN0YXJ0Jyk7XG4gICAgLy8gQ3JlYXRlIGFuZCBzZXR1cCBmcmllbmRseSBpZnJhbWUuXG4gICAgdGhpcy5pZnJhbWUgPSAvKiogQHR5cGUgeyFIVE1MSUZyYW1lRWxlbWVudH0gKi8oXG4gICAgICBjcmVhdGVFbGVtZW50V2l0aEF0dHJpYnV0ZXMoXG4gICAgICAgICAgLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50KSwgJ2lmcmFtZScsXG4gICAgICAgICAgZGljdCh7XG4gICAgICAgICAgICAvLyBOT1RFOiBJdCBpcyBwb3NzaWJsZSBmb3IgZWl0aGVyIHdpZHRoIG9yIGhlaWdodCB0byBiZSAnYXV0bycsXG4gICAgICAgICAgICAvLyBhIG5vbi1udW1lcmljIHZhbHVlLlxuICAgICAgICAgICAgJ2hlaWdodCc6IHRoaXMuY3JlYXRpdmVTaXplXy5oZWlnaHQsXG4gICAgICAgICAgICAnd2lkdGgnOiB0aGlzLmNyZWF0aXZlU2l6ZV8ud2lkdGgsXG4gICAgICAgICAgICAnZnJhbWVib3JkZXInOiAnMCcsXG4gICAgICAgICAgICAnYWxsb3dmdWxsc2NyZWVuJzogJycsXG4gICAgICAgICAgICAnYWxsb3d0cmFuc3BhcmVuY3knOiAnJyxcbiAgICAgICAgICAgICdzY3JvbGxpbmcnOiAnbm8nLFxuICAgICAgICAgIH0pKSk7XG4gICAgdGhpcy5hcHBseUZpbGxDb250ZW50KHRoaXMuaWZyYW1lKTtcbiAgICBjb25zdCBmb250c0FycmF5ID0gW107XG4gICAgaWYgKGNyZWF0aXZlTWV0YURhdGEuY3VzdG9tU3R5bGVzaGVldHMpIHtcbiAgICAgIGNyZWF0aXZlTWV0YURhdGEuY3VzdG9tU3R5bGVzaGVldHMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgY29uc3QgaHJlZiA9IHNbJ2hyZWYnXTtcbiAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICBmb250c0FycmF5LnB1c2goaHJlZik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBjaGVja1N0aWxsQ3VycmVudCA9IHRoaXMudmVyaWZ5U3RpbGxDdXJyZW50KCk7XG4gICAgcmV0dXJuIGluc3RhbGxGcmllbmRseUlmcmFtZUVtYmVkKFxuICAgICAgICB0aGlzLmlmcmFtZSwgdGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgaG9zdDogdGhpcy5lbGVtZW50LFxuICAgICAgICAgIC8vIE5lZWQgdG8gZ3VhcmFudGVlIHRoYXQgdGhpcyBpcyBubyBsb25nZXIgbnVsbFxuICAgICAgICAgIHVybDogLyoqIEB0eXBlIHtzdHJpbmd9ICovICh0aGlzLmFkVXJsXyksXG4gICAgICAgICAgaHRtbDogY3JlYXRpdmVNZXRhRGF0YS5taW5pZmllZENyZWF0aXZlLFxuICAgICAgICAgIGV4dGVuc2lvbklkczogY3JlYXRpdmVNZXRhRGF0YS5jdXN0b21FbGVtZW50RXh0ZW5zaW9ucyB8fCBbXSxcbiAgICAgICAgICBmb250czogZm9udHNBcnJheSxcbiAgICAgICAgfSwgZW1iZWRXaW4gPT4ge1xuICAgICAgICAgIGluc3RhbGxVcmxSZXBsYWNlbWVudHNGb3JFbWJlZCh0aGlzLmdldEFtcERvYygpLCBlbWJlZFdpbixcbiAgICAgICAgICAgICAgbmV3IEE0QVZhcmlhYmxlU291cmNlKHRoaXMuZ2V0QW1wRG9jKCksIGVtYmVkV2luKSk7XG4gICAgICAgIH0pLnRoZW4oZnJpZW5kbHlJZnJhbWVFbWJlZCA9PiB7XG4gICAgICBjaGVja1N0aWxsQ3VycmVudCgpO1xuICAgICAgdGhpcy5mcmllbmRseUlmcmFtZUVtYmVkXyA9IGZyaWVuZGx5SWZyYW1lRW1iZWQ7XG4gICAgICBzZXRGcmllbmRseUlmcmFtZUVtYmVkVmlzaWJsZShcbiAgICAgICAgICBmcmllbmRseUlmcmFtZUVtYmVkLCB0aGlzLmlzSW5WaWV3cG9ydCgpKTtcbiAgICAgIC8vIEVuc3VyZSB2aXNpYmlsaXR5IGhpZGRlbiBoYXMgYmVlbiByZW1vdmVkIChzZXQgYnkgYm9pbGVycGxhdGUpLlxuICAgICAgY29uc3QgZnJhbWVEb2MgPSBmcmllbmRseUlmcmFtZUVtYmVkLmlmcmFtZS5jb250ZW50RG9jdW1lbnQgfHxcbiAgICAgICAgICAgICAgZnJpZW5kbHlJZnJhbWVFbWJlZC53aW4uZG9jdW1lbnQ7XG4gICAgICBzZXRTdHlsZShmcmFtZURvYy5ib2R5LCAndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgICBwcm90ZWN0RnVuY3Rpb25XcmFwcGVyKHRoaXMub25DcmVhdGl2ZVJlbmRlciwgdGhpcywgZXJyID0+IHtcbiAgICAgICAgZGV2KCkuZXJyb3IoVEFHLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksXG4gICAgICAgICAgICAnRXJyb3IgZXhlY3V0aW5nIG9uQ3JlYXRpdmVSZW5kZXInLCBlcnIpO1xuICAgICAgfSkoY3JlYXRpdmVNZXRhRGF0YSk7XG4gICAgICAvLyBJdCdzIGVub3VnaCB0byB3YWl0IGZvciBcImluaS1sb2FkXCIgc2lnbmFsIGJlY2F1c2UgaW4gYSBGSUUgY2FzZVxuICAgICAgLy8gd2Uga25vdyB0aGF0IHRoZSBlbWJlZCBubyBsb25nZXIgY29uc3VtZXMgc2lnbmlmaWNhbnQgcmVzb3VyY2VzXG4gICAgICAvLyBhZnRlciB0aGUgaW5pdGlhbCBsb2FkLlxuICAgICAgcmV0dXJuIGZyaWVuZGx5SWZyYW1lRW1iZWQud2hlbkluaUxvYWRlZCgpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgIC8vIENhcHR1cmUgaW5pLWxvYWQgcGluZy5cbiAgICAgIHRoaXMubWF5YmVUcmlnZ2VyQW5hbHl0aWNzRXZlbnRfKCdmcmllbmRseUlmcmFtZUluaUxvYWQnKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFyZWQgZnVuY3Rpb25hbGl0eSBmb3IgY3Jvc3MtZG9tYWluIGlmcmFtZS1iYXNlZCByZW5kZXJpbmcgbWV0aG9kcy5cbiAgICogQHBhcmFtIHshSnNvbk9iamVjdDxzdHJpbmcsIHN0cmluZz59IGF0dHJpYnV0ZXMgVGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGlmcmFtZS5cbiAgICogQHJldHVybiB7IVByb21pc2V9IGF3YWl0aW5nIGxvYWQgZXZlbnQgZm9yIGFkIGZyYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpZnJhbWVSZW5kZXJIZWxwZXJfKGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCBtZXJnZWRBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzLCBkaWN0KHtcbiAgICAgICdoZWlnaHQnOiB0aGlzLmNyZWF0aXZlU2l6ZV8uaGVpZ2h0LFxuICAgICAgJ3dpZHRoJzogdGhpcy5jcmVhdGl2ZVNpemVfLndpZHRoLFxuICAgIH0pKTtcblxuICAgIGlmICh0aGlzLnNlbnRpbmVsKSB7XG4gICAgICBtZXJnZWRBdHRyaWJ1dGVzWydkYXRhLWFtcC0zcC1zZW50aW5lbCddID0gdGhpcy5zZW50aW5lbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2hvdWxkU2FuZGJveF8pIHtcbiAgICAgIG1lcmdlZEF0dHJpYnV0ZXNbJ3NhbmRib3gnXSA9IElGUkFNRV9TQU5EQk9YSU5HX0ZMQUdTO1xuICAgIH1cbiAgICBpZiAoaXNFeHBlcmltZW50T24odGhpcy53aW4sICduby1zeW5jLXhoci1pbi1hZHMnKSkge1xuICAgICAgLy8gQmxvY2sgc3luY2hyb25vdXMgWEhSIGluIGFkLiBUaGVzZSBhcmUgdmVyeSByYXJlLCBidXQgc3VwZXIgYmFkIGZvciBVWFxuICAgICAgLy8gYXMgdGhleSBibG9jayB0aGUgVUkgdGhyZWFkIGZvciB0aGUgYXJiaXRyYXJ5IGFtb3VudCBvZiB0aW1lIHVudGlsIHRoZVxuICAgICAgLy8gcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAgICBtZXJnZWRBdHRyaWJ1dGVzWydhbGxvdyddID0gJ3N5bmMteGhyIFxcJ25vbmVcXCc7JztcbiAgICB9XG4gICAgdGhpcy5pZnJhbWUgPSBjcmVhdGVFbGVtZW50V2l0aEF0dHJpYnV0ZXMoXG4gICAgICAgIC8qKiBAdHlwZSB7IURvY3VtZW50fSAqLyAodGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAnaWZyYW1lJywgLyoqIEB0eXBlIHshSnNvbk9iamVjdH0gKi8gKFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24obWVyZ2VkQXR0cmlidXRlcywgU0hBUkVEX0lGUkFNRV9QUk9QRVJUSUVTKSkpO1xuICAgIC8vIFRPRE8oa2VpdGh3cmlnaHRib3MpOiBub0NvbnRlbnRDYWxsYmFjaz9cbiAgICB0aGlzLnhPcmlnaW5JZnJhbWVIYW5kbGVyXyA9IG5ldyBBTVAuQW1wQWRYT3JpZ2luSWZyYW1lSGFuZGxlcih0aGlzKTtcbiAgICAvLyBJZnJhbWUgaXMgYXBwZW5kZWQgdG8gZWxlbWVudCBhcyBwYXJ0IG9mIHhvcmlnaW4gZnJhbWUgaGFuZGxlciBpbml0LlxuICAgIC8vIEV4ZWN1dGl2ZSBvbkNyZWF0aXZlUmVuZGVyIGFmdGVyIGluaXQgdG8gZW5zdXJlIGl0IGNhbiBnZXQgcmVmZXJlbmNlXG4gICAgLy8gdG8gZnJhbWUgYnV0IHByaW9yIHRvIGxvYWQgdG8gYWxsb3cgZm9yIGVhcmxpZXIgYWNjZXNzLlxuICAgIGNvbnN0IGZyYW1lTG9hZFByb21pc2UgPVxuICAgICAgICB0aGlzLnhPcmlnaW5JZnJhbWVIYW5kbGVyXy5pbml0KHRoaXMuaWZyYW1lLCAvKiBvcHRfaXNBNEEgKi8gdHJ1ZSk7XG4gICAgcHJvdGVjdEZ1bmN0aW9uV3JhcHBlcih0aGlzLm9uQ3JlYXRpdmVSZW5kZXIsIHRoaXMsIGVyciA9PiB7XG4gICAgICBkZXYoKS5lcnJvcihUQUcsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSxcbiAgICAgICAgICAnRXJyb3IgZXhlY3V0aW5nIG9uQ3JlYXRpdmVSZW5kZXInLCBlcnIpO1xuICAgIH0pKG51bGwpO1xuICAgIHJldHVybiBmcmFtZUxvYWRQcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgaWZyYW1lIHdob3NlIHNyYyBtYXRjaGVzIHRoYXQgb2YgdGhlIGFkIFVSTC4gRm9yIHN0YW5kYXJkXG4gICAqIEZhc3QgRmV0Y2ggcnVubmluZyBvbiB0aGUgQU1QIGNkbiwgYW4gWEhSIHJlcXVlc3Qgd2lsbCB0eXBpY2FsbHkgaGF2ZVxuICAgKiBhbHJlYWR5IGJlZW4gc2VudCB0byB0aGUgc2FtZSBhZFVybCwgYW5kIHRoZSByZXNwb25zZSBzaG91bGRcbiAgICogaGF2ZSBiZWVuIGNhY2hlZCBjYXVzaW5nIHRoZSBicm93c2VyIHRvIHJlbmRlciB3aXRob3V0IGNhbGxvdXQuICBIb3dldmVyLFxuICAgKiBpdCBpcyBwb3NzaWJsZSBmb3IgY2FjaGUgbWlzcyB0byBvY2N1ciB3aGljaCBjYW4gYmUgZGV0ZWN0ZWQgc2VydmVyLXNpZGVcbiAgICogYnkgbWlzc2luZyBPUklHSU4gaGVhZGVyLlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHRoaXMgbWV0aG9kIGlzIGFsc28gdXNlZCBpbiBjZXJ0YWluIGNhc2VzIHRvIHNlbmQgdGhlIG9ubHlcbiAgICogcmVxdWVzdCwgaS5lLiB0aGUgaW5pdGlhbCBYSFIgaXMgc2tpcHBlZC5cbiAgICpcbiAgICogTm90ZTogQXMgb2YgMjAxNi0xMC0xOCwgdGhlIGZpbGwtZnJvbS1jYWNoZSBhc3N1bXB0aW9uIGFwcGVhcnMgdG8gZmFpbCBvblxuICAgKiBTYWZhcmktb24taU9TLCB3aGljaCBpc3N1ZXMgYSBmcmVzaCBuZXR3b3JrIHJlcXVlc3QsIGV2ZW4gdGhvdWdoIHRoZVxuICAgKiBjb250ZW50IGlzIGFscmVhZHkgaW4gY2FjaGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZFVybCAgQWQgcmVxdWVzdCBVUkwsIGFzIHNlbnQgdG8gI3NlbmRYaHJSZXF1ZXN0IChpLmUuLFxuICAgKiAgICBiZWZvcmUgYW55IG1vZGlmaWNhdGlvbnMgdGhhdCBYSFIgbW9kdWxlIGRvZXMgdG8gaXQuKVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX0gYXdhaXRpbmcgYWQgY29tcGxldGVkIGluc2VydGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlbmRlclZpYUlmcmFtZUdldF8oYWRVcmwpIHtcbiAgICB0aGlzLm1heWJlVHJpZ2dlckFuYWx5dGljc0V2ZW50XygncmVuZGVyQ3Jvc3NEb21haW5TdGFydCcpO1xuICAgIHJldHVybiB0aGlzLmlmcmFtZVJlbmRlckhlbHBlcl8oZGljdCh7XG4gICAgICAnc3JjJzogU2VydmljZXMueGhyRm9yKHRoaXMud2luKS5nZXRDb3JzVXJsKHRoaXMud2luLCBhZFVybCksXG4gICAgICAnbmFtZSc6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIGdldENvbnRleHRNZXRhZGF0YSh0aGlzLndpbiwgdGhpcy5lbGVtZW50LCB0aGlzLnNlbnRpbmVsKSksXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgY3JlYXRpdmUgdmlhIHNvbWUgXCJjcm9zcyBkb21haW4gaWZyYW1lIHRoYXQgYWNjZXB0cyB0aGUgY3JlYXRpdmVcbiAgICogaW4gdGhlIG5hbWUgYXR0cmlidXRlXCIuICBUaGlzIGNvdWxkIGJlIFNhZmVGcmFtZSBvciB0aGUgQU1QLW5hdGl2ZVxuICAgKiBOYW1lRnJhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5QnVmZmVyfSBjcmVhdGl2ZUJvZHlcbiAgICogQHJldHVybiB7IVByb21pc2V9IGF3YWl0aW5nIGxvYWQgZXZlbnQgZm9yIGFkIGZyYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZW5kZXJWaWFOYW1lQXR0ck9mWE9yaWdpbklmcmFtZV8oY3JlYXRpdmVCb2R5KSB7XG4gICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqL1xuICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuZXhwZXJpbWVudGFsTm9uQW1wQ3JlYXRpdmVSZW5kZXJNZXRob2RfO1xuICAgIGRldigpLmFzc2VydChtZXRob2QgPT0gWE9SSUdJTl9NT0RFLlNBRkVGUkFNRSB8fFxuICAgICAgICBtZXRob2QgPT0gWE9SSUdJTl9NT0RFLk5BTUVGUkFNRSxcbiAgICAnVW5yZWNvZ25pemVkIEE0QSBjcm9zcy1kb21haW4gcmVuZGVyaW5nIG1vZGU6ICVzJywgbWV0aG9kKTtcbiAgICB0aGlzLm1heWJlVHJpZ2dlckFuYWx5dGljc0V2ZW50XygncmVuZGVyU2FmZUZyYW1lU3RhcnQnKTtcbiAgICBjb25zdCBjaGVja1N0aWxsQ3VycmVudCA9IHRoaXMudmVyaWZ5U3RpbGxDdXJyZW50KCk7XG4gICAgcmV0dXJuIHRyeVJlc29sdmUoKCkgPT4gdXRmOERlY29kZShjcmVhdGl2ZUJvZHkpKS50aGVuKGNyZWF0aXZlID0+IHtcbiAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICBsZXQgc3JjUGF0aDtcbiAgICAgIGxldCBuYW1lID0gJyc7XG4gICAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlIFhPUklHSU5fTU9ERS5TQUZFRlJBTUU6XG4gICAgICAgICAgc3JjUGF0aCA9IHRoaXMuZ2V0U2FmZWZyYW1lUGF0aCgpICsgJz9uPTAnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFhPUklHSU5fTU9ERS5OQU1FRlJBTUU6XG4gICAgICAgICAgc3JjUGF0aCA9IGdldERlZmF1bHRCb290c3RyYXBCYXNlVXJsKHRoaXMud2luLCAnbmFtZWZyYW1lJyk7XG4gICAgICAgICAgLy8gTmFtZSB3aWxsIGJlIHNldCBmb3IgcmVhbCBiZWxvdyBpbiBuYW1lZnJhbWUgY2FzZS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBTaG91bGRuJ3QgYmUgYWJsZSB0byBnZXQgaGVyZSwgYnV0Li4uICBCZWNhdXNlIG9mIHRoZSBhc3NlcnQsXG4gICAgICAgICAgLy8gYWJvdmUsIHdlIGNhbiBvbmx5IGdldCBoZXJlIGluIG5vbi1kZXYgbW9kZSwgc28gZ2l2ZSB1c2VyIGZlZWRiYWNrLlxuICAgICAgICAgIHVzZXIoKS5lcnJvcignQTRBJywgJ0E0QSByZWNlaXZlZCB1bnJlY29nbml6ZWQgY3Jvc3MtZG9tYWluIG5hbWUnXG4gICAgICAgICAgICAgICsgJyBhdHRyaWJ1dGUgaWZyYW1lIHJlbmRlcmluZyBtb2RlIHJlcXVlc3Q6ICVzLiAgVW5hYmxlIHRvJ1xuICAgICAgICAgICAgICArICcgcmVuZGVyIGEgY3JlYXRpdmUgZm9yJ1xuICAgICAgICAgICAgICArICcgc2xvdCAlcy4nLCBtZXRob2QsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnVW5yZWNvZ25pemVkIHJlbmRlcmluZyBtb2RlIHJlcXVlc3QnKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE8oYnJhZGZyaXp6ZWxsKTogY2hhbmdlIG5hbWUgb2YgZnVuY3Rpb24gYW5kIHZhclxuICAgICAgbGV0IGNvbnRleHRNZXRhZGF0YSA9IGdldENvbnRleHRNZXRhZGF0YShcbiAgICAgICAgICB0aGlzLndpbiwgdGhpcy5lbGVtZW50LCB0aGlzLnNlbnRpbmVsLFxuICAgICAgICAgIHRoaXMuZ2V0QWRkaXRpb25hbENvbnRleHRNZXRhZGF0YShtZXRob2QgPT0gWE9SSUdJTl9NT0RFLlNBRkVGUkFNRSkpO1xuICAgICAgLy8gVE9ETyhicmFkZnJpenplbGwpIENsZWFuIHVwIG5hbWUgYXNzaWduaW5nLlxuICAgICAgaWYgKG1ldGhvZCA9PSBYT1JJR0lOX01PREUuTkFNRUZSQU1FKSB7XG4gICAgICAgIGNvbnRleHRNZXRhZGF0YVsnY3JlYXRpdmUnXSA9IGNyZWF0aXZlO1xuICAgICAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoY29udGV4dE1ldGFkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09IFhPUklHSU5fTU9ERS5TQUZFRlJBTUUpIHtcbiAgICAgICAgY29udGV4dE1ldGFkYXRhID0gSlNPTi5zdHJpbmdpZnkoY29udGV4dE1ldGFkYXRhKTtcbiAgICAgICAgbmFtZSA9IGAke3RoaXMuc2FmZWZyYW1lVmVyc2lvbn07JHtjcmVhdGl2ZS5sZW5ndGh9OyR7Y3JlYXRpdmV9YCArXG4gICAgICAgICAgICBgJHtjb250ZXh0TWV0YWRhdGF9YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmlmcmFtZVJlbmRlckhlbHBlcl8oZGljdCh7J3NyYyc6IHNyY1BhdGgsICduYW1lJzogbmFtZX0pKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBUaHJvd3Mge0Bjb2RlIFN5bnRheEVycm9yfSBpZiB0aGUgbWV0YWRhdGEgYmxvY2sgZGVsaW1pdGVycyBhcmUgbWlzc2luZ1xuICAgKiBvciBjb3JydXB0ZWQgb3IgaWYgdGhlIG1ldGFkYXRhIGNvbnRlbnQgZG9lc24ndCBwYXJzZSBhcyBKU09OLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3JlYXRpdmUgZnJvbSB3aGljaCBDU1MgaXMgZXh0cmFjdGVkXG4gICAqIEByZXR1cm4gez9DcmVhdGl2ZU1ldGFEYXRhRGVmfSBPYmplY3QgcmVzdWx0IG9mIHBhcnNpbmcgSlNPTiBkYXRhIGJsb2IgaW5zaWRlXG4gICAqICAgICB0aGUgbWV0YWRhdGEgbWFya2VycyBvbiB0aGUgYWQgdGV4dCwgb3IgbnVsbCBpZiBubyBtZXRhZGF0YSBtYXJrZXJzIGFyZVxuICAgKiAgICAgZm91bmQuXG4gICAqIFRPRE8oa2VpdGh3cmlnaHRib3NAKTogcmVwb3J0IGVycm9yIGNhc2VzXG4gICAqL1xuICBnZXRBbXBBZE1ldGFkYXRhKGNyZWF0aXZlKSB7XG4gICAgbGV0IG1ldGFkYXRhU3RhcnQgPSAtMTtcbiAgICBsZXQgbWV0YWRhdGFTdHJpbmc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNRVRBREFUQV9TVFJJTkdTLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZXRhZGF0YVN0cmluZyA9IE1FVEFEQVRBX1NUUklOR1NbaV07XG4gICAgICBtZXRhZGF0YVN0YXJ0ID0gY3JlYXRpdmUubGFzdEluZGV4T2YobWV0YWRhdGFTdHJpbmcpO1xuICAgICAgaWYgKG1ldGFkYXRhU3RhcnQgPj0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1ldGFkYXRhU3RhcnQgPCAwKSB7XG4gICAgICAvLyBDb3VsZG4ndCBmaW5kIGEgbWV0YWRhdGEgYmxvYi5cbiAgICAgIGRldigpLndhcm4oVEFHLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksXG4gICAgICAgICAgJ0NvdWxkIG5vdCBsb2NhdGUgc3RhcnQgaW5kZXggZm9yIGFtcCBtZXRhIGRhdGEgaW46ICVzJywgY3JlYXRpdmUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFkYXRhRW5kID0gY3JlYXRpdmUubGFzdEluZGV4T2YoJzwvc2NyaXB0PicpO1xuICAgIGlmIChtZXRhZGF0YUVuZCA8IDApIHtcbiAgICAgIC8vIENvdWxkbid0IGZpbmQgYSBtZXRhZGF0YSBibG9iLlxuICAgICAgZGV2KCkud2FybihUQUcsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSxcbiAgICAgICAgICAnQ291bGQgbm90IGxvY2F0ZSBjbG9zaW5nIHNjcmlwdCB0YWcgZm9yIGFtcCBtZXRhIGRhdGEgaW46ICVzJyxcbiAgICAgICAgICBjcmVhdGl2ZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1ldGFEYXRhT2JqID0gcGFyc2VKc29uKFxuICAgICAgICAgIGNyZWF0aXZlLnNsaWNlKG1ldGFkYXRhU3RhcnQgKyBtZXRhZGF0YVN0cmluZy5sZW5ndGgsIG1ldGFkYXRhRW5kKSk7XG4gICAgICBjb25zdCBhbXBSdW50aW1lVXRmMTZDaGFyT2Zmc2V0cyA9XG4gICAgICAgIG1ldGFEYXRhT2JqWydhbXBSdW50aW1lVXRmMTZDaGFyT2Zmc2V0cyddO1xuICAgICAgaWYgKCFpc0FycmF5KGFtcFJ1bnRpbWVVdGYxNkNoYXJPZmZzZXRzKSB8fFxuICAgICAgICAgIGFtcFJ1bnRpbWVVdGYxNkNoYXJPZmZzZXRzLmxlbmd0aCAhPSAyIHx8XG4gICAgICAgICAgdHlwZW9mIGFtcFJ1bnRpbWVVdGYxNkNoYXJPZmZzZXRzWzBdICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgIHR5cGVvZiBhbXBSdW50aW1lVXRmMTZDaGFyT2Zmc2V0c1sxXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJ1bnRpbWUgb2Zmc2V0cycpO1xuICAgICAgfVxuICAgICAgY29uc3QgbWV0YURhdGEgPSB7fTtcbiAgICAgIGlmIChtZXRhRGF0YU9ialsnY3VzdG9tRWxlbWVudEV4dGVuc2lvbnMnXSkge1xuICAgICAgICBtZXRhRGF0YS5jdXN0b21FbGVtZW50RXh0ZW5zaW9ucyA9XG4gICAgICAgICAgbWV0YURhdGFPYmpbJ2N1c3RvbUVsZW1lbnRFeHRlbnNpb25zJ107XG4gICAgICAgIGlmICghaXNBcnJheShtZXRhRGF0YS5jdXN0b21FbGVtZW50RXh0ZW5zaW9ucykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICdJbnZhbGlkIGV4dGVuc2lvbnMnLCBtZXRhRGF0YS5jdXN0b21FbGVtZW50RXh0ZW5zaW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1ldGFEYXRhLmN1c3RvbUVsZW1lbnRFeHRlbnNpb25zID0gW107XG4gICAgICB9XG4gICAgICBpZiAobWV0YURhdGFPYmpbJ2N1c3RvbVN0eWxlc2hlZXRzJ10pIHtcbiAgICAgICAgLy8gRXhwZWN0IGFycmF5IG9mIG9iamVjdHMgd2l0aCBhdCBsZWFzdCBvbmUga2V5IGJlaW5nICdocmVmJyB3aG9zZVxuICAgICAgICAvLyB2YWx1ZSBpcyBVUkwuXG4gICAgICAgIG1ldGFEYXRhLmN1c3RvbVN0eWxlc2hlZXRzID0gbWV0YURhdGFPYmpbJ2N1c3RvbVN0eWxlc2hlZXRzJ107XG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gJ0ludmFsaWQgY3VzdG9tIHN0eWxlc2hlZXRzJztcbiAgICAgICAgaWYgKCFpc0FycmF5KG1ldGFEYXRhLmN1c3RvbVN0eWxlc2hlZXRzKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cmxzID0gU2VydmljZXMudXJsRm9yRG9jKHRoaXMuZ2V0QW1wRG9jKCkpO1xuICAgICAgICBtZXRhRGF0YS5jdXN0b21TdHlsZXNoZWV0cy5mb3JFYWNoKHN0eWxlc2hlZXQgPT4ge1xuICAgICAgICAgIGlmICghaXNPYmplY3Qoc3R5bGVzaGVldCkgfHwgIXN0eWxlc2hlZXRbJ2hyZWYnXSB8fFxuICAgICAgICAgICAgICB0eXBlb2Ygc3R5bGVzaGVldFsnaHJlZiddICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAhdXJscy5pc1NlY3VyZShzdHlsZXNoZWV0WydocmVmJ10pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheShtZXRhRGF0YU9ialsnaW1hZ2VzJ10pKSB7XG4gICAgICAgIC8vIExvYWQgbWF4aW11bSBvZiA1IGltYWdlcy5cbiAgICAgICAgbWV0YURhdGEuaW1hZ2VzID0gbWV0YURhdGFPYmpbJ2ltYWdlcyddLnNwbGljZSgwLCA1KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzU2luZ2xlUGFnZVN0b3J5QWQpIHtcbiAgICAgICAgaWYgKCFtZXRhRGF0YU9ialsnY3RhVXJsJ10gfHwgIW1ldGFEYXRhT2JqWydjdGFUeXBlJ10pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9TUFNBX1JFU1BPTlNFKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXZhcnMtY3RhdHlwZScsIG1ldGFEYXRhT2JqWydjdGFUeXBlJ10pO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXZhcnMtY3RhdXJsJywgbWV0YURhdGFPYmpbJ2N0YVVybCddKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE8oa2VpdGh3cmlnaHRib3MpOiBPSyB0byBhc3N1bWUgYW1wUnVudGltZVV0ZjE2Q2hhck9mZnNldHMgaXMgYmVmb3JlXG4gICAgICAvLyBtZXRhZGF0YSBhcyBpdHMgaW4gdGhlIGhlYWQ/XG4gICAgICBtZXRhRGF0YS5taW5pZmllZENyZWF0aXZlID1cbiAgICAgICAgY3JlYXRpdmUuc2xpY2UoMCwgYW1wUnVudGltZVV0ZjE2Q2hhck9mZnNldHNbMF0pICtcbiAgICAgICAgY3JlYXRpdmUuc2xpY2UoYW1wUnVudGltZVV0ZjE2Q2hhck9mZnNldHNbMV0sIG1ldGFkYXRhU3RhcnQpICtcbiAgICAgICAgY3JlYXRpdmUuc2xpY2UobWV0YWRhdGFFbmQgKyAnPC9zY3JpcHQ+Jy5sZW5ndGgpO1xuICAgICAgcmV0dXJuIG1ldGFEYXRhO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZGV2KCkud2FybihcbiAgICAgICAgICBUQUcsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSwgJ0ludmFsaWQgYW1wIG1ldGFkYXRhOiAlcycsXG4gICAgICAgICAgY3JlYXRpdmUuc2xpY2UobWV0YWRhdGFTdGFydCArIG1ldGFkYXRhU3RyaW5nLmxlbmd0aCwgbWV0YWRhdGFFbmQpKTtcbiAgICAgIGlmICh0aGlzLmlzU2luZ2xlUGFnZVN0b3J5QWQpIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmwgdG8gc2FmZWZyYW1lIGltcGxlbWVudGF0aW9uLlxuICAgKi9cbiAgZ2V0U2FmZWZyYW1lUGF0aCgpIHtcbiAgICByZXR1cm4gJ2h0dHBzOi8vdHBjLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9zYWZlZnJhbWUvJyArXG4gICAgICBgJHt0aGlzLnNhZmVmcmFtZVZlcnNpb259L2h0bWwvY29udGFpbmVyLmh0bWxgO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gbGlmZWN5Y2xlIGV2ZW50IGhhcyBhIGNvcnJlc3BvbmRpbmcgYW1wLWFuYWx5dGljcyBldmVudFxuICAgKiBhbmQgZmlyZXMgdGhlIGFuYWx5dGljcyB0cmlnZ2VyIGlmIHNvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlmZWN5Y2xlU3RhZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG1heWJlVHJpZ2dlckFuYWx5dGljc0V2ZW50XyhsaWZlY3ljbGVTdGFnZSkge1xuICAgIGlmICghdGhpcy5hNGFBbmFseXRpY3NDb25maWdfKSB7XG4gICAgICAvLyBObyBjb25maWcgZXhpc3RzIHRoYXQgd2lsbCBsaXN0ZW4gdG8gdGhpcyBldmVudC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPVxuICAgICAgICBkZXYoKS5hc3NlcnQoTElGRUNZQ0xFX1NUQUdFX1RPX0FOQUxZVElDU19UUklHR0VSW2xpZmVjeWNsZVN0YWdlXSk7XG4gICAgY29uc3QgYW5hbHl0aWNzVmFycyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHsndGltZSc6IE1hdGgucm91bmQodGhpcy5nZXROb3dfKCkpfSxcbiAgICAgICAgdGhpcy5nZXRBNGFBbmFseXRpY3NWYXJzKGFuYWx5dGljc0V2ZW50KSk7XG4gICAgdHJpZ2dlckFuYWx5dGljc0V2ZW50KHRoaXMuZWxlbWVudCwgYW5hbHl0aWNzRXZlbnQsIGFuYWx5dGljc1ZhcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdmFyaWFibGVzIHRvIGJlIGluY2x1ZGVkIG9uIGFuIGFuYWx5dGljcyBldmVudC4gVGhpcyBjYW4gYmVcbiAgICogb3ZlcnJpZGRlbiBieSBzcGVjaWZpYyBuZXR3b3JrIGltcGxlbWVudGF0aW9ucy5cbiAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIHRpbWUgYW4gYW5hbHl0aWNzIGV2ZW50IGlzXG4gICAqIGZpcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW51c2VkQW5hbHl0aWNzRXZlbnQgVGhlIG5hbWUgb2YgdGhlIGFuYWx5dGljcyBldmVudC5cbiAgICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gICAqL1xuICBnZXRBNGFBbmFseXRpY3NWYXJzKHVudXNlZEFuYWx5dGljc0V2ZW50KSB7IHJldHVybiB7fTsgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldHdvcmstc3BlY2lmaWMgY29uZmlnIGZvciBhbXAtYW5hbHl0aWNzLiBJdCBzaG91bGQgb3ZlcnJpZGRlblxuICAgKiB3aXRoIG5ldHdvcmstc3BlY2lmaWMgY29uZmlndXJhdGlvbnMuXG4gICAqIFRoaXMgZnVuY3Rpb24gbWF5IHJldHVybiBudWxsLiBJZiBzbywgbm8gYW1wLWFuYWx5dGljcyBlbGVtZW50IHdpbGwgYmVcbiAgICogYWRkZWQgdG8gdGhpcyBBNEEgZWxlbWVudCBhbmQgbm8gQTRBIHRyaWdnZXJzIHdpbGwgYmUgZmlyZWQuXG4gICAqIEByZXR1cm4gez9Kc29uT2JqZWN0fVxuICAgKi9cbiAgZ2V0QTRhQW5hbHl0aWNzQ29uZmlnKCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBleGVjdXRlIFJlYWwgVGltZSBDb25maWcsIGlmIHRoZSBhZCBuZXR3b3JrIGhhcyBlbmFibGVkIGl0LlxuICAgKiBJZiBpdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBuZXR3b3JrLCBidXQgdGhlIHB1Ymxpc2hlciBoYXMgaW5jbHVkZWRcbiAgICogdGhlIHJ0Yy1jb25maWcgYXR0cmlidXRlIG9uIHRoZSBhbXAtYWQgZWxlbWVudCwgd2Fybi5cbiAgICogQHBhcmFtIHs/Q09OU0VOVF9QT0xJQ1lfU1RBVEV9IGNvbnNlbnRTdGF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPCFBcnJheTwhcnRjUmVzcG9uc2VEZWY+Pnx1bmRlZmluZWR9XG4gICAqL1xuICB0cnlFeGVjdXRlUmVhbFRpbWVDb25maWdfKGNvbnNlbnRTdGF0ZSkge1xuICAgIGlmICghIUFNUC5SZWFsVGltZUNvbmZpZ01hbmFnZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgQU1QLlJlYWxUaW1lQ29uZmlnTWFuYWdlcih0aGlzKVxuICAgICAgICAgICAgLm1heWJlRXhlY3V0ZVJlYWxUaW1lQ29uZmlnKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q3VzdG9tUmVhbFRpbWVDb25maWdNYWNyb3NfKCksIGNvbnNlbnRTdGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdXNlcigpLmVycm9yKFRBRywgJ0NvdWxkIG5vdCBwZXJmb3JtIFJlYWwgVGltZSBDb25maWcuJywgZXJyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3J0Yy1jb25maWcnKSkge1xuICAgICAgdXNlcigpLmVycm9yKFRBRywgJ1JUQyBub3Qgc3VwcG9ydGVkIGZvciBhZCBuZXR3b3JrICcgK1xuICAgICAgICAgICAgICAgICAgIGAke3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKX1gKTtcblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBiZSBvdmVycmlkZW4gYnkgbmV0d29yayBpbXBsLiBTaG91bGQgcmV0dXJuIGEgbWFwcGluZyBvZiBtYWNybyBrZXlzXG4gICAqIHRvIHZhbHVlcyBmb3Igc3Vic3RpdHV0aW9uIGluIHB1Ymxpc2hlci1zcGVjaWZpZWQgVVJMcyBmb3IgUlRDLlxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZyxcbiAgICogICAhLi4vLi4vLi4vc3JjL3NlcnZpY2UvdmFyaWFibGUtc291cmNlLkFzeW5jUmVzb2x2ZXJEZWY+fVxuICAgKi9cbiAgZ2V0Q3VzdG9tUmVhbFRpbWVDb25maWdNYWNyb3NfKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHByZWZlcmVudGlhbCByZW5kZXIgc2hvdWxkIHN0aWxsIGJlIHV0aWxpemVkIGlmIHdlYiBjcnlwdG8gaXNcbiAgICogdW5hdmFpbGFibGUsIGFuZCBjcnlwdG8gc2lnbmF0dXJlIGhlYWRlciBpcyBwcmVzZW50LlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc2hvdWxkUHJlZmVyZW50aWFsUmVuZGVyV2l0aG91dENyeXB0bygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBoZWFkZXJWYWx1ZSBNZXRob2QgYXMgZ2l2ZW4gaW4gaGVhZGVyLlxuICAgKi9cbiAgZ2V0Tm9uQW1wQ3JlYXRpdmVSZW5kZXJpbmdNZXRob2QoaGVhZGVyVmFsdWUpIHtcbiAgICBpZiAoaGVhZGVyVmFsdWUpIHtcbiAgICAgIGlmICghaXNFbnVtVmFsdWUoWE9SSUdJTl9NT0RFLCBoZWFkZXJWYWx1ZSkpIHtcbiAgICAgICAgZGV2KCkuZXJyb3IoXG4gICAgICAgICAgICAnQU1QLUE0QScsIGBjcm9zcy1vcmlnaW4gcmVuZGVyIG1vZGUgaGVhZGVyICR7aGVhZGVyVmFsdWV9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaGVhZGVyVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBTZXJ2aWNlcy5wbGF0Zm9ybUZvcih0aGlzLndpbikuaXNJb3MoKSA/XG4gICAgICBYT1JJR0lOX01PREUuTkFNRUZSQU1FIDogbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGJhc2Ugb2JqZWN0IHRoYXQgd2lsbCBiZSB3cml0dGVuIHRvIGNyb3NzLWRvbWFpbiBpZnJhbWUgbmFtZVxuICAgKiBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pc1NhZmVmcmFtZSBXaGV0aGVyIGNyZWF0aXZlIGlzIHJlbmRlcmluZyBpbnRvXG4gICAqICAgYSBzYWZlZnJhbWUuXG4gICAqIEByZXR1cm4geyFKc29uT2JqZWN0fHVuZGVmaW5lZH1cbiAgICovXG4gIGdldEFkZGl0aW9uYWxDb250ZXh0TWV0YWRhdGEob3B0X2lzU2FmZWZyYW1lKSB7fVxufVxuXG4vKipcbiAqIEF0dGFjaHMgcXVlcnkgc3RyaW5nIHBvcnRpb24gb2YgYWQgdXJsIHRvIGVycm9yLlxuICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG4gKiBAcGFyYW0gez9zdHJpbmd9IGFkVXJsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25BZFVybFRvRXJyb3IoZXJyb3IsIGFkVXJsKSB7XG4gIGlmICghYWRVcmwgfHwgKGVycm9yLmFyZ3MgJiYgZXJyb3IuYXJnc1snYXUnXSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYWRRdWVyeUlkeCA9IGFkVXJsLmluZGV4T2YoJz8nKTtcbiAgaWYgKGFkUXVlcnlJZHggPT0gLTEpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgKGVycm9yLmFyZ3MgfHwgKGVycm9yLmFyZ3MgPSB7fSkpWydhdSddID1cbiAgICBhZFVybC5zdWJzdHJpbmcoYWRRdWVyeUlkeCArIDEsIGFkUXVlcnlJZHggKyAyNTEpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpZ25hdHVyZSB2ZXJpZmllciBmb3IgdGhlIGdpdmVuIHdpbmRvdy4gTGF6aWx5IGNyZWF0ZXMgaXQgaWYgaXRcbiAqIGRvZXNuJ3QgYWxyZWFkeSBleGlzdC5cbiAqXG4gKiBUaGlzIGVuc3VyZXMgdGhhdCBvbmx5IG9uZSBzaWduYXR1cmUgdmVyaWZpZXIgZXhpc3RzIHBlciB3aW5kb3csIHdoaWNoIGFsbG93c1xuICogbXVsdGlwbGUgRmFzdCBGZXRjaCBhZCBzbG90cyBvbiBhIHBhZ2UgKGV2ZW4gb25lcyBmcm9tIGRpZmZlcmVudCBhZCBuZXR3b3JrcylcbiAqIHRvIHNoYXJlIHRoZSBzYW1lIGNhY2hlZCBwdWJsaWMga2V5cy5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7IVNpZ25hdHVyZVZlcmlmaWVyfVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYXR1cmVWZXJpZmllckZvcih3aW4pIHtcbiAgY29uc3QgcHJvcGVydHlOYW1lID0gJ0FNUF9GQVNUX0ZFVENIX1NJR05BVFVSRV9WRVJJRklFUl8nO1xuICByZXR1cm4gd2luW3Byb3BlcnR5TmFtZV0gfHxcbiAgICAgICh3aW5bcHJvcGVydHlOYW1lXSA9IG5ldyBTaWduYXR1cmVWZXJpZmllcih3aW4sIHNpZ25pbmdTZXJ2ZXJVUkxzKSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7Z2V0TW9kZX0gZnJvbSAnLi4vLi4vLi4vc3JjL21vZGUnO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8gICAgIElNUE9SVEFOVDogQWxsIGtleXMgaW4gUlRDX1ZFTkRPUlMgbXVzdCBiZSBsb3dlcmNhc2UgICAgIC8vXG4vLyAgICAgICBvdGhlcndpc2UgdGhlIHZlbmRvciBlbmRwb2ludCB3aWxsIG5vdCBiZSB1c2VkLiAgICAgICAgLy9cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIE5vdGU6IGRpc2FibGVLZXlBcHBlbmQgaXMgYW4gb3B0aW9uIHNwZWNpZmljYWxseSBmb3IgRG91YmxlQ2xpY2snc1xuLy8gaW1wbGVtZW50YXRpb24gb2YgUlRDLiBJdCBwcmV2ZW50cyB0aGUgdmVuZG9yIElEIGZyb20gYmVpbmdcbi8vIGFwcGVuZGVkIG9udG8gZWFjaCBrZXkgb2YgdGhlIFJUQyByZXNwb25zZSwgZm9yIGVhY2ggdmVuZG9yLlxuLy8gVGhpcyBhcHBlbmRpbmcgaXMgZG9uZSB0byBwcmV2ZW50IGEgY29sbGlzaW9uIGNhc2UgZHVyaW5nIG1lcmdlXG4vLyB0aGF0IHdvdWxkIGNhdXNlIG9uZSBSVEMgcmVzcG9uc2UgdG8gb3ZlcndyaXRlIGFub3RoZXIgaWYgdGhleVxuLy8gc2hhcmUga2V5IG5hbWVzLlxuLyoqIEB0eXBlZGVmIHt7XG4gICAgdXJsOiBzdHJpbmcsXG4gICAgbWFjcm9zOiBBcnJheTxzdHJpbmc+LFxuICAgIGVycm9yUmVwb3J0aW5nVXJsOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gICAgZGlzYWJsZUtleUFwcGVuZDogYm9vbGVhbn19ICovXG5sZXQgUnRjVmVuZG9yRGVmO1xuXG4vKiogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgUnRjVmVuZG9yRGVmPn0gKi9cbmV4cG9ydCBjb25zdCBSVENfVkVORE9SUyA9IHtcbiAgLy8gQWRkIHZlbmRvcnMgaGVyZVxuICBtZWRpYW5ldDoge1xuICAgIHVybDogJ2h0dHBzOi8vYW1wcnRjLm1lZGlhLm5ldC9ydGIvZ2V0cnRjP2NpZD1DSUQmdz1BVFRSKHdpZHRoKSZoPUFUVFIoaGVpZ2h0KSZvdz1BVFRSKGRhdGEtb3ZlcnJpZGUtd2lkdGgpJm9oPUFUVFIoZGF0YS1vdmVycmlkZS1oZWlnaHQpJm1zPUFUVFIoZGF0YS1tdWx0aS1zaXplKSZzbG90PUFUVFIoZGF0YS1zbG90KSZ0Z3Q9VEdUJmN1cmw9Q0FOT05JQ0FMX1VSTCZ0bz1USU1FT1VUJnB1cmw9SFJFRicsXG4gICAgbWFjcm9zOiBbJ0NJRCddLFxuICAgIGVycm9yUmVwb3J0aW5nVXJsOiAnaHR0cHM6Ly9xc2VhcmNoLWEuYWthbWFpaGQubmV0L2xvZz9sb2dpZD1rZmsmZXZ0aWQ9cHJvamVjdGV2ZW50cyZwcm9qZWN0PWFtcHJ0Y19lcnJvciZlcnJvcj1FUlJPUl9UWVBFJnJkPUhSRUYnLFxuICAgIGRpc2FibGVLZXlBcHBlbmQ6IHRydWUsXG4gIH0sXG4gIHByZWJpZGFwcG5leHVzOiB7XG4gICAgdXJsOiAnaHR0cHM6Ly9wcmViaWQuYWRueHMuY29tL3Bicy92MS9vcGVucnRiMi9hbXA/dGFnX2lkPVBMQUNFTUVOVF9JRCZ3PUFUVFIod2lkdGgpJmg9QVRUUihoZWlnaHQpJm93PUFUVFIoZGF0YS1vdmVycmlkZS13aWR0aCkmb2g9QVRUUihkYXRhLW92ZXJyaWRlLWhlaWdodCkmbXM9QVRUUihkYXRhLW11bHRpLXNpemUpJnNsb3Q9QVRUUihkYXRhLXNsb3QpJnRhcmdldGluZz1UR1QmY3VybD1DQU5PTklDQUxfVVJMJnRpbWVvdXQ9VElNRU9VVCZhZGNpZD1BRENJRCZwdXJsPUhSRUYnLFxuICAgIG1hY3JvczogWydQTEFDRU1FTlRfSUQnXSxcbiAgICBkaXNhYmxlS2V5QXBwZW5kOiB0cnVlLFxuICB9LFxuICBwcmViaWRydWJpY29uOiB7XG4gICAgdXJsOiAnaHR0cHM6Ly9wcmViaWQtc2VydmVyLnJ1Ymljb25wcm9qZWN0LmNvbS9vcGVucnRiMi9hbXA/dGFnX2lkPVJFUVVFU1RfSUQmdz1BVFRSKHdpZHRoKSZoPUFUVFIoaGVpZ2h0KSZvdz1BVFRSKGRhdGEtb3ZlcnJpZGUtd2lkdGgpJm9oPUFUVFIoZGF0YS1vdmVycmlkZS1oZWlnaHQpJm1zPUFUVFIoZGF0YS1tdWx0aS1zaXplKSZzbG90PUFUVFIoZGF0YS1zbG90KSZ0YXJnZXRpbmc9VEdUJmN1cmw9Q0FOT05JQ0FMX1VSTCZ0aW1lb3V0PVRJTUVPVVQmYWRjPUFEQ0lEJnB1cmw9SFJFRicsXG4gICAgbWFjcm9zOiBbJ1JFUVVFU1RfSUQnXSxcbiAgICBkaXNhYmxlS2V5QXBwZW5kOiB0cnVlLFxuICB9LFxuICBpbmRleGV4Y2hhbmdlOiB7XG4gICAgdXJsOiAnaHR0cHM6Ly9hbXAuY2FzYWxlbWVkaWEuY29tL2FtcHJ0Yz92PTEmdz1BVFRSKHdpZHRoKSZoPUFUVFIoaGVpZ2h0KSZvdz1BVFRSKGRhdGEtb3ZlcnJpZGUtd2lkdGgpJm9oPUFUVFIoZGF0YS1vdmVycmlkZS1oZWlnaHQpJm1zPUFUVFIoZGF0YS1tdWx0aS1zaXplKSZzPVNJVEVfSUQmcD1DQU5PTklDQUxfVVJMJyxcbiAgICBtYWNyb3M6IFsnU0lURV9JRCddLFxuICAgIGRpc2FibGVLZXlBcHBlbmQ6IHRydWUsXG4gIH0sXG4gIGxvdGFtZToge1xuICAgIHVybDogJ2h0dHBzOi8vYWQuY3J3ZGNudHJsLm5ldC81L3BlPXkvYz1DTElFTlRfSUQvYW49QURfTkVUV09SSycsXG4gICAgbWFjcm9zOiBbJ0NMSUVOVF9JRCcsICdBRF9ORVRXT1JLJ10sXG4gIH0sXG4gIHlpZWxkYm90OiB7XG4gICAgdXJsOiAnaHR0cHM6Ly9pLnlsZGJ0LmNvbS9tL1lCX1BTTi92MS9hbXAvaW5pdD9jdXJsPUNBTk9OSUNBTF9VUkwmc249WUJfU0xPVCZ3PUFUVFIod2lkdGgpJmg9QVRUUihoZWlnaHQpJm93PUFUVFIoZGF0YS1vdmVycmlkZS13aWR0aCkmb2g9QVRUUihkYXRhLW92ZXJyaWRlLWhlaWdodCkmbXM9QVRUUihkYXRhLW11bHRpLXNpemUpJmF1cD1BVFRSKGRhdGEtc2xvdCkmcHZpPVBBR0VWSUVXSUQmdGd0PVRHVCZhZGNpZD1BRENJRCZocmVmPUhSRUYnLFxuICAgIG1hY3JvczogWydZQl9QU04nLCAnWUJfU0xPVCddLFxuICAgIGRpc2FibGVLZXlBcHBlbmQ6IHRydWUsXG4gIH0sXG4gIHNhbGVzZm9yY2VkbXA6IHtcbiAgICB1cmw6ICdodHRwczovL2Nkbi5rcnhkLm5ldC91c2VyZGF0YS92Mi9hbXAvT1JHQU5JWkFUSU9OX0lEP3NlZ21lbnRzX2tleT1TRUdNRU5UU19LRVkma3VpZF9rZXk9VVNFUl9LRVknLFxuICAgIG1hY3JvczogWydPUkdBTklaQVRJT05fSUQnLCAnU0VHTUVOVFNfS0VZJywgJ1VTRVJfS0VZJ10sXG4gICAgZGlzYWJsZUtleUFwcGVuZDogdHJ1ZSxcbiAgfSxcbiAgcHVyY2g6IHtcbiAgICB1cmw6ICdodHRwczovL2Fkcy5zZXJ2ZWJvbS5jb20vdG1udGFnLmpzP3Y9MS4yJmZtdD1hbXAmbz17JTIycCUyMiUzQVBMQUNFTUVOVF9JRH0mZGl2X2lkPURJVl9JRCcsXG4gICAgbWFjcm9zOiBbJ1BMQUNFTUVOVF9JRCcsICdESVZfSUQnXSxcbiAgICBkaXNhYmxlS2V5QXBwZW5kOiB0cnVlLFxuICB9LFxuICBhcHM6IHtcbiAgICB1cmw6ICdodHRwczovL2FheC5hbWF6b24tYWRzeXN0ZW0uY29tL2UvZHRiL2JpZD9zcmM9UFVCX0lEJmFtcD0xJnU9Q0FOT05JQ0FMX1VSTCZzbG90cz0lNUIlN0IlMjJzZCUyMiUzQSUyMkFUVFIoZGF0YS1zbG90KSUyMiUyQyUyMnMlMjIlM0ElNUIlMjJBVFRSKHdpZHRoKXhBVFRSKGhlaWdodCklMjIlNUQlN0QlNUQmcGo9UEFSQU1TJyxcbiAgICBtYWNyb3M6IFsnUFVCX0lEJywgJ1BBUkFNUyddLFxuICAgIGRpc2FibGVLZXlBcHBlbmQ6IHRydWUsXG4gIH0sXG4gIG9wZW53cmFwOiB7XG4gICAgLy8gUHViTWF0aWMgT3BlbldyYXBcbiAgICB1cmw6ICdodHRwczovL293LnB1Ym1hdGljLmNvbS9hbXA/dj0xJnc9QVRUUih3aWR0aCkmaD1BVFRSKGhlaWdodCkmbXM9QVRUUihkYXRhLW11bHRpLXNpemUpJmF1SWQ9QVRUUihkYXRhLXNsb3QpJnB1cmw9SFJFRiZwdWJJZD1QVUJfSUQmcHJvZklkPVBST0ZJTEVfSUQnLFxuICAgIG1hY3JvczogWydQVUJfSUQnLCAnUFJPRklMRV9JRCddLFxuICAgIGVycm9yUmVwb3J0aW5nVXJsOiAnaHR0cHM6Ly9vdy5wdWJtYXRpYy5jb20vYW1wX2Vycm9yP2U9RVJST1JfVFlQRSZoPUhSRUYnLFxuICAgIGRpc2FibGVLZXlBcHBlbmQ6IHRydWUsXG4gIH0sXG4gIGNyaXRlbzoge1xuICAgIHVybDogJ2h0dHBzOi8vYmlkZGVyLmNyaXRlby5jb20vYW1wL3J0Yz96aWQ9Wk9ORV9JRCZuaWQ9TkVUV09SS19JRCZwc3ViaWQ9UFVCTElTSEVSX1NVQl9JRCZsaXI9TElORV9JVEVNX1JBTkdFUyZ3PUFUVFIod2lkdGgpJmg9QVRUUihoZWlnaHQpJm93PUFUVFIoZGF0YS1vdmVycmlkZS13aWR0aCkmb2g9QVRUUihkYXRhLW92ZXJyaWRlLWhlaWdodCkmbXM9QVRUUihkYXRhLW11bHRpLXNpemUpJnNsb3Q9QVRUUihkYXRhLXNsb3QpJnRpbWVvdXQ9VElNRU9VVCZocmVmPUhSRUYnLFxuICAgIG1hY3JvczogWydaT05FX0lEJywgJ05FVFdPUktfSUQnLCAnUFVCTElTSEVSX1NVQl9JRCcsICdMSU5FX0lURU1fUkFOR0VTJ10sXG4gICAgZGlzYWJsZUtleUFwcGVuZDogdHJ1ZSxcbiAgfSxcbn07XG5cbi8vIERPIE5PVCBNT0RJRlk6IFNldHVwIGZvciB0ZXN0c1xuaWYgKGdldE1vZGUoKS5sb2NhbERldiB8fCBnZXRNb2RlKCkudGVzdCkge1xuICBSVENfVkVORE9SU1snZmFrZXZlbmRvciddID0gLyoqIEB0eXBlIHtSdGNWZW5kb3JEZWZ9ICovKHtcbiAgICB1cmw6ICdodHRwczovL2xvY2FsaG9zdDo4MDAwL2V4YW1wbGVzL3J0Y0UxLmpzb24/c2xvdF9pZD1TTE9UX0lEJnBhZ2VfaWQ9UEFHRV9JRCZmb29faWQ9Rk9PX0lEJyxcbiAgICBtYWNyb3M6IFsnU0xPVF9JRCcsICdQQUdFX0lEJywgJ0ZPT19JRCddLFxuICB9KTtcbiAgUlRDX1ZFTkRPUlNbJ2Zha2V2ZW5kb3IyJ10gPSAvKiogQHR5cGUge1J0Y1ZlbmRvckRlZn0gKi8oe1xuICAgIHVybDogJ2h0dHBzOi8vbG9jYWxob3N0OjgwMDAvZXhhbXBsZXMvcnRjRTEuanNvbj9zbG90X2lkPVNMT1RfSUQmcGFnZV9pZD1QQUdFX0lEJmZvb19pZD1GT09fSUQnLFxuICAgIGVycm9yUmVwb3J0aW5nVXJsOiAnaHR0cHM6Ly9sb2NhbGhvc3Q6ODAwMC9leGFtcGxlcy9FUlJPUl9UWVBFJyxcbiAgICBkaXNhYmxlS2V5QXBwZW5kOiB0cnVlLFxuICB9KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTcgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtDT05TRU5UX1BPTElDWV9TVEFURX0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbnNlbnQtc3RhdGUnO1xuaW1wb3J0IHtSVENfVkVORE9SU30gZnJvbSAnLi9jYWxsb3V0LXZlbmRvcnMnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzJztcbmltcG9ydCB7ZGV2LCB1c2VyfSBmcm9tICcuLi8uLi8uLi9zcmMvbG9nJztcbmltcG9ydCB7Z2V0TW9kZX0gZnJvbSAnLi4vLi4vLi4vc3JjL21vZGUnO1xuaW1wb3J0IHtpc0FycmF5LCBpc09iamVjdH0gZnJvbSAnLi4vLi4vLi4vc3JjL3R5cGVzJztcbmltcG9ydCB7aXNDYW5jZWxsYXRpb259IGZyb20gJy4uLy4uLy4uL3NyYy9lcnJvcic7XG5pbXBvcnQge3RyeVBhcnNlSnNvbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2pzb24nO1xuXG4vKiogQHR5cGUge3N0cmluZ30gKi9cbmNvbnN0IFRBRyA9ICdyZWFsLXRpbWUtY29uZmlnJztcblxuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5jb25zdCBNQVhfUlRDX0NBTExPVVRTID0gNTtcblxuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5jb25zdCBNQVhfVVJMX0xFTkdUSCA9IDE2Mzg0O1xuXG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG5jb25zdCBFUlJPUl9SRVBPUlRJTkdfRU5BQkxFRCA9IGdldE1vZGUod2luZG93KS5sb2NhbERldiB8fFxuICAgICAgZ2V0TW9kZSh3aW5kb3cpLnRlc3QgfHwgTWF0aC5yYW5kb20oKSA8IDAuMDE7XG5cbi8qKiBAdHlwZWRlZiB7e1xuICAgIHVybHM6ICh1bmRlZmluZWR8QXJyYXk8c3RyaW5nPnxcbiAgICAgIEFycmF5PHt1cmw6c3RyaW5nLCBlcnJvclJlcG9ydGluZ1VybDpzdHJpbmcsXG4gICAgICAgIHNlbmRSZWdhcmRsZXNzT2ZDb25zZW50U3RhdGU6KHVuZGVmaW5lZHxib29sZWFufEFycmF5PHN0cmluZz4pfT4pLFxuICAgIHZlbmRvcnM6ICh1bmRlZmluZWR8T2JqZWN0KSxcbiAgICB0aW1lb3V0TWlsbGlzOiBudW1iZXIsXG4gICAgZXJyb3JSZXBvcnRpbmdVcmw6ICh1bmRlZmluZWR8c3RyaW5nKSxcbiAgICBzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlOiAodW5kZWZpbmVkfGJvb2xlYW58QXJyYXk8c3RyaW5nPilcbn19ICovXG5sZXQgUnRjQ29uZmlnRGVmO1xuXG4vKipcbiAqIEVudW0gc3RhcnRzIGF0IDQgYmVjYXVzZSAxLTMgcmVzZXJ2ZWQgYXM6XG4gKiAgMSA9IGN1c3RvbSByZW1vdGUuaHRtbCBpbiB1c2UuXG4gKiAgMiA9IFJUQyBzdWNjZWVkZWQuXG4gKiAgMyA9IGRlcHJlY2F0ZWQgZ2VuZXJpYyBSVEMgZmFpbHVyZXMuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgUlRDX0VSUk9SX0VOVU0gPSB7XG4gIC8vIE9jY3VycyB3aGVuIHJlc3BvbnNlIGlzIHVucGFyc2VhYmxlIGFzIEpTT05cbiAgTUFMRk9STUVEX0pTT05fUkVTUE9OU0U6ICc0JyxcbiAgLy8gT2NjdXJzIHdoZW4gYSBwdWJsaXNoZXIgaGFzIHNwZWNpZmllZCB0aGUgc2FtZSB1cmxcbiAgLy8gb3IgdmVuZG9yIHVybCAoYWZ0ZXIgbWFjcm9zIGFyZSBzdWJzdGl0dXRlZCkgdG8gY2FsbCBvdXQgdG8gbW9yZSB0aGFuIG9uY2UuXG4gIERVUExJQ0FURV9VUkw6ICc1JyxcbiAgLy8gT2NjdXJzIHdoZW4gYSBVUkwgZmFpbHMgaXNTZWN1cmVVcmwgY2hlY2suXG4gIElOU0VDVVJFX1VSTDogJzYnLFxuICAvLyBPY2N1cnMgd2hlbiA1IHZhbGlkIGNhbGxvdXQgdXJscyBoYXZlIGFscmVhZHkgYmVlbiBidWlsdCwgYW5kIGFkZGl0aW9uYWxcbiAgLy8gdXJscyBhcmUgc3RpbGwgc3BlY2lmaWVkLlxuICBNQVhfQ0FMTE9VVFNfRVhDRUVERUQ6ICc3JyxcbiAgLy8gT2NjdXJzIGR1ZSB0byBYSFIgZmFpbHVyZS5cbiAgTkVUV09SS19GQUlMVVJFOiAnOCcsXG4gIC8vIE9jY3VycyB3aGVuIGEgc3BlY2lmaWVkIHZlbmRvciBkb2VzIG5vdCBleGlzdCBpbiBSVENfVkVORE9SUy5cbiAgVU5LTk9XTl9WRU5ET1I6ICc5JyxcbiAgLy8gT2NjdXJzIHdoZW4gcmVxdWVzdCB0b29rIGxvbmdlciB0aGFuIHRpbWVvdXRcbiAgVElNRU9VVDogJzEwJyxcbiAgLy8gT2NjdXJzIHdoZW4gVVJMIGV4cGFuc2lvbiB0aW1lIGV4Y2VlZGVkIGFsbG93ZWQgdGltZW91dCwgcmVxdWVzdCBuZXZlclxuICAvLyBzZW50LlxuICBNQUNST19FWFBBTkRfVElNRU9VVDogJzExJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBSZWFsVGltZUNvbmZpZ01hbmFnZXIge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9hbXAtYTRhLkFtcEE0QX0gYTRhRWxlbWVudFxuICAgKi9cbiAgY29uc3RydWN0b3IoYTRhRWxlbWVudCkge1xuICAgIC8qKiBAcHJpdmF0ZSB7IS4vYW1wLWE0YS5BbXBBNEF9ICovXG4gICAgdGhpcy5hNGFFbGVtZW50XyA9IGE0YUVsZW1lbnQ7XG5cbiAgICAvKiogQHByaXZhdGUgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gdGhpcy5hNGFFbGVtZW50Xy53aW47XG5cbiAgICAvKiogQHByaXZhdGUgeyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPn0gKi9cbiAgICB0aGlzLnNlZW5VcmxzXyA9IHt9O1xuXG4gICAgLyoqIEBwcml2YXRlIHs/bnVtYmVyfSAqL1xuICAgIHRoaXMucnRjU3RhcnRUaW1lXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTwhUHJvbWlzZTwhcnRjUmVzcG9uc2VEZWY+Pn0gKi9cbiAgICB0aGlzLnByb21pc2VBcnJheV8gPSBbXTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1J0Y0NvbmZpZ0RlZn0gKi9cbiAgICB0aGlzLnJ0Y0NvbmZpZ18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlICEuLi8uLi8uLi9zcmMvc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2MgKi9cbiAgICB0aGlzLmFtcERvY18gPSB0aGlzLmE0YUVsZW1lbnRfLmdldEFtcERvYygpO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/Q09OU0VOVF9QT0xJQ1lfU1RBVEV9ICovXG4gICAgdGhpcy5jb25zZW50U3RhdGVfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxvdXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUmVwb3J0aW5nVXJsXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3J0Y1RpbWVcbiAgICogQHJldHVybiB7IVByb21pc2U8IXJ0Y1Jlc3BvbnNlRGVmPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJ1aWxkRXJyb3JSZXNwb25zZV8oXG4gICAgZXJyb3IsIGNhbGxvdXQsIGVycm9yUmVwb3J0aW5nVXJsLCBvcHRfcnRjVGltZSkge1xuICAgIGRldigpLndhcm4oVEFHLCBgUlRDIGNhbGxvdXQgdG8gJHtjYWxsb3V0fSBjYXVzZWQgJHtlcnJvcn1gKTtcbiAgICBpZiAoZXJyb3JSZXBvcnRpbmdVcmwpIHtcbiAgICAgIHRoaXMuc2VuZEVycm9yTWVzc2FnZShlcnJvciwgZXJyb3JSZXBvcnRpbmdVcmwpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKC8qKkB0eXBlIHtydGNSZXNwb25zZURlZn0gKi8oXG4gICAgICB7ZXJyb3IsIGNhbGxvdXQsIHJ0Y1RpbWU6IG9wdF9ydGNUaW1lIHx8IDB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yVHlwZSBVc2VzIHRoZSBSVENfRVJST1JfRU5VTSBhYm92ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUmVwb3J0aW5nVXJsXG4gICAqL1xuICBzZW5kRXJyb3JNZXNzYWdlKGVycm9yVHlwZSwgZXJyb3JSZXBvcnRpbmdVcmwpIHtcbiAgICBpZiAoIUVSUk9SX1JFUE9SVElOR19FTkFCTEVEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdoaXRlbGlzdCA9IHtFUlJPUl9UWVBFOiB0cnVlLCBIUkVGOiB0cnVlfTtcbiAgICBjb25zdCBtYWNyb3MgPSB7XG4gICAgICBFUlJPUl9UWVBFOiBlcnJvclR5cGUsXG4gICAgICBIUkVGOiB0aGlzLndpbl8ubG9jYXRpb24uaHJlZixcbiAgICB9O1xuICAgIGNvbnN0IHVybCA9IFNlcnZpY2VzLnVybFJlcGxhY2VtZW50c0ZvckRvYyh0aGlzLmFtcERvY18pLmV4cGFuZFVybFN5bmMoXG4gICAgICAgIGVycm9yUmVwb3J0aW5nVXJsLCBtYWNyb3MsIHdoaXRlbGlzdCk7XG4gICAgbmV3IHRoaXMud2luXy5JbWFnZSgpLnNyYyA9IHVybDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVSTCBpbnRvIGl0cyBjb3JyZXNwb25kaW5nIHNob3J0ZW5lZCBjYWxsb3V0IHN0cmluZy5cbiAgICogV2UgYWxzbyB0cnVuY2F0ZSB0byBhIG1heGltdW0gbGVuZ3RoIG9mIDUwIGNoYXJhY3RlcnMuXG4gICAqIEZvciBpbnN0YW5jZSwgaWYgd2UgYXJlIHBhc3NlZFxuICAgKiBcImh0dHBzOi8vZXhhbXBsZS5jb20vZXhhbXBsZS5waHA/Zm9vPWEmYmFyPWIsIHRoZW4gd2UgcmV0dXJuXG4gICAqIGV4YW1wbGUuY29tL2V4YW1wbGUucGhwXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0Q2FsbG91dFBhcmFtXyh1cmwpIHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBTZXJ2aWNlcy51cmxGb3JEb2MoXG4gICAgICAgIHRoaXMuYTRhRWxlbWVudF8uZ2V0QW1wRG9jKCkpLnBhcnNlKHVybCk7XG4gICAgcmV0dXJuIChwYXJzZWRVcmwuaG9zdG5hbWUgKyBwYXJzZWRVcmwucGF0aG5hbWUpLnN1YnN0cigwLCA1MCk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIGEgZ2l2ZW4gQTRBIEVsZW1lbnQsIHNlbmRzIG91dCBSZWFsIFRpbWUgQ29uZmlnIHJlcXVlc3RzIHRvXG4gICAqIGFueSB1cmxzIG9yIHZlbmRvcnMgc3BlY2lmaWVkIGJ5IHRoZSBwdWJsaXNoZXIuXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICEuLi8uLi8uLi9zcmMvc2VydmljZS92YXJpYWJsZS1zb3VyY2UuQXN5bmNSZXNvbHZlckRlZj59IGN1c3RvbU1hY3JvcyBUaGUgYWQtbmV0d29yayBzcGVjaWZpZWQgbWFjcm9cbiAgICogICBzdWJzdGl0dXRpb25zIGF2YWlsYWJsZSB0byB1c2UuXG4gICAqIEBwYXJhbSB7P0NPTlNFTlRfUE9MSUNZX1NUQVRFfSBjb25zZW50U3RhdGVcbiAgICogQHJldHVybiB7UHJvbWlzZTwhQXJyYXk8IXJ0Y1Jlc3BvbnNlRGVmPj58dW5kZWZpbmVkfVxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIG1heWJlRXhlY3V0ZVJlYWxUaW1lQ29uZmlnKGN1c3RvbU1hY3JvcywgY29uc2VudFN0YXRlKSB7XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlUnRjQ29uZmlnXyh0aGlzLmE0YUVsZW1lbnRfLmVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29uc2VudFN0YXRlXyA9IGNvbnNlbnRTdGF0ZTtcbiAgICB0aGlzLm1vZGlmeVJ0Y0NvbmZpZ0ZvckNvbnNlbnRTdGF0ZVNldHRpbmdzKCk7XG4gICAgY3VzdG9tTWFjcm9zID0gdGhpcy5hc3NpZ25NYWNyb3MoY3VzdG9tTWFjcm9zKTtcbiAgICB0aGlzLnJ0Y1N0YXJ0VGltZV8gPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuaGFuZGxlUnRjRm9yQ3VzdG9tVXJscyhjdXN0b21NYWNyb3MpO1xuICAgIHRoaXMuaGFuZGxlUnRjRm9yVmVuZG9yVXJscyhjdXN0b21NYWNyb3MpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLnByb21pc2VBcnJheV8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciBhIGdpdmVuIGNhbGxvdXQgb2JqZWN0IGlzIHZhbGlkIHRvIHNlbmQgYW4gUlRDIHJlcXVlc3RcbiAgICogdG8sIGZvciB0aGUgZ2l2ZW4gY29uc2VudFN0YXRlLlxuICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IGNhbGxvdXRDb25maWdcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0SXNHbG9iYWxseVZhbGlkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICAgKi9cbiAgaXNWYWxpZENhbGxvdXRGb3JDb25zZW50U3RhdGUoY2FsbG91dENvbmZpZywgb3B0SXNHbG9iYWxseVZhbGlkKSB7XG4gICAgY29uc3Qge3NlbmRSZWdhcmRsZXNzT2ZDb25zZW50U3RhdGV9ID0gY2FsbG91dENvbmZpZztcbiAgICBpZiAoIWlzT2JqZWN0KGNhbGxvdXRDb25maWcpIHx8ICFzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlKSB7XG4gICAgICByZXR1cm4gISFvcHRJc0dsb2JhbGx5VmFsaWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlID09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHNlbmRSZWdhcmRsZXNzT2ZDb25zZW50U3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkoc2VuZFJlZ2FyZGxlc3NPZkNvbnNlbnRTdGF0ZSkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VuZFJlZ2FyZGxlc3NPZkNvbnNlbnRTdGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy5jb25zZW50U3RhdGVfID09XG4gICAgICAgICAgICBDT05TRU5UX1BPTElDWV9TVEFURVtzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlW2ldXSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCFDT05TRU5UX1BPTElDWV9TVEFURVtzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlW2ldXSkge1xuICAgICAgICAgIGRldigpLndhcm4oVEFHLCAnSW52YWxpZCBSVEMgY29uc2VudCBzdGF0ZSBnaXZlbjogJyArXG4gICAgICAgICAgICAgICAgICAgICBgJHtzZW5kUmVnYXJkbGVzc09mQ29uc2VudFN0YXRlW2ldfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVzZXIoKS53YXJuKFRBRywgJ0ludmFsaWQgdmFsdWUgZm9yIHNlbmRSZWdhcmRsZXNzT2ZDb25zZW50U3RhdGU6JyArXG4gICAgICAgICAgICAgICAgYCR7c2VuZFJlZ2FyZGxlc3NPZkNvbnNlbnRTdGF0ZX1gKTtcbiAgICByZXR1cm4gISFvcHRJc0dsb2JhbGx5VmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIHRoZSBSVEMgY29uZmlnLCBhbmQgZm9yIGFueSBVUkwgdGhhdCB3ZSBzaG91bGQgbm90IGNhbGxvdXRcbiAgICogYXMgcGVyIHRoZSBjdXJyZW50IGNvbnNlbnQgc3RhdGUsIGRlbGV0ZXMgaXQgZnJvbSB0aGUgUlRDIGNvbmZpZy5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBSVEMgY29uZmlnIGxvb2tlZCBsaWtlOlxuICAgKiAgICB7dmVuZG9yczoge3ZlbmRvckE6IHsnc2VuZFJlZ2FyZGxlc3NPZkNvbnNlbnRTdGF0ZSc6IHRydWV9XG4gICAqICAgICAgICAgICAgICAgdmVuZG9yQjogeydtYWNyb3MnOiB7J1NMT1RfSUQnOiAxfX19LFxuICAgKiAgICAgdXJsczogWydodHRwczovL3d3dy5ydGMuZXhhbXBsZS9leGFtcGxlJyxcbiAgICogICAgICAgICAgICB7dXJsOiAnaHR0cHM6Ly93d3cucnRjU2l0ZTIuZXhhbXBsZS9leGFtcGxlJyxcbiAgICogICAgICAgICAgICAgc2VuZFJlZ2FyZGxlc3NPZkNvbnNlbnRTdGF0ZTogWydVTktOT1dOJ119XVxuICAgKiAgICB9XG4gICAqIGFuZCB0aGUgY29uc2VudFN0YXRlIGlzIENPTlNFTlRfUE9MSUNZX1NUQVRFLlVOS05PV04sXG4gICAqIHRoZW4gdGhpcyBtZXRob2QgY2FsbCB3b3VsZCBjbGVhciB0aGUgY2FsbG91dHMgdG8gdmVuZG9yQiwgYW5kIHRvIHRoZSBmaXJzdFxuICAgKiBjdXN0b20gVVJMLlxuICAgKi9cbiAgbW9kaWZ5UnRjQ29uZmlnRm9yQ29uc2VudFN0YXRlU2V0dGluZ3MoKSB7XG4gICAgaWYgKHRoaXMuY29uc2VudFN0YXRlXyA9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgdGhpcy5jb25zZW50U3RhdGVfID09IENPTlNFTlRfUE9MSUNZX1NUQVRFLlNVRkZJQ0lFTlQgfHxcbiAgICAgICAgdGhpcy5jb25zZW50U3RhdGVfID09IENPTlNFTlRfUE9MSUNZX1NUQVRFLlVOS05PV05fTk9UX1JFUVVJUkVEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNHbG9iYWxseVZhbGlkID0gdGhpcy5pc1ZhbGlkQ2FsbG91dEZvckNvbnNlbnRTdGF0ZSh0aGlzLnJ0Y0NvbmZpZ18pO1xuICAgIHRoaXMucnRjQ29uZmlnXy51cmxzID0gKHRoaXMucnRjQ29uZmlnXy51cmxzIHx8IFtdKS5maWx0ZXIoXG4gICAgICAgIHVybCA9PiB0aGlzLmlzVmFsaWRDYWxsb3V0Rm9yQ29uc2VudFN0YXRlKHVybCwgaXNHbG9iYWxseVZhbGlkKSk7XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLnJ0Y0NvbmZpZ18udmVuZG9ycyB8fCB7fSkuZm9yRWFjaCh2ZW5kb3IgPT4ge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRDYWxsb3V0Rm9yQ29uc2VudFN0YXRlKFxuICAgICAgICAgIHRoaXMucnRjQ29uZmlnXy52ZW5kb3JzW3ZlbmRvcl0sIGlzR2xvYmFsbHlWYWxpZCkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucnRjQ29uZmlnXy52ZW5kb3JzW3ZlbmRvcl07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIGNvbnN0YW50IG1hY3JvcyB0aGF0IHNob3VsZCBleGlzdCBmb3IgYWxsIFJUQyB0byBvYmplY3Qgb2YgY3VzdG9tXG4gICAqIHBlci1uZXR3b3JrIG1hY3Jvcy5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgIS4uLy4uLy4uL3NyYy9zZXJ2aWNlL3ZhcmlhYmxlLXNvdXJjZS5Bc3luY1Jlc29sdmVyRGVmPn0gbWFjcm9zXG4gICAqL1xuICBhc3NpZ25NYWNyb3MobWFjcm9zKSB7XG4gICAgbWFjcm9zWydUSU1FT1VUJ10gPSAoKSA9PiB0aGlzLnJ0Y0NvbmZpZ18udGltZW91dE1pbGxpcztcbiAgICBtYWNyb3NbJ0NPTlNFTlRfU1RBVEUnXSA9ICgpID0+IHRoaXMuY29uc2VudFN0YXRlXztcbiAgICByZXR1cm4gbWFjcm9zO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hbmFnZXMgc2VuZGluZyB0aGUgUlRDIGNhbGxvdXRzIGZvciB0aGUgQ3VzdG9tIFVSTHMuXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICEuLi8uLi8uLi9zcmMvc2VydmljZS92YXJpYWJsZS1zb3VyY2UuQXN5bmNSZXNvbHZlckRlZj59IGN1c3RvbU1hY3JvcyBUaGUgYWQtbmV0d29yayBzcGVjaWZpZWQgbWFjcm9cbiAgICovXG4gIGhhbmRsZVJ0Y0ZvckN1c3RvbVVybHMoY3VzdG9tTWFjcm9zKSB7XG4gICAgLy8gRm9yIGVhY2ggcHVibGlzaGVyIGRlZmluZWQgVVJMLCBpbmZsYXRlIHRoZSB1cmwgdXNpbmcgdGhlIG1hY3JvcyxcbiAgICAvLyBhbmQgc2VuZCB0aGUgUlRDIHJlcXVlc3QuXG4gICAgKHRoaXMucnRjQ29uZmlnXy51cmxzIHx8IFtdKS5mb3JFYWNoKHVybE9iaiA9PiB7XG4gICAgICBsZXQgdXJsLCBlcnJvclJlcG9ydGluZ1VybDtcbiAgICAgIGlmIChpc09iamVjdCh1cmxPYmopKSB7XG4gICAgICAgIHVybCA9IHVybE9iai51cmw7XG4gICAgICAgIGVycm9yUmVwb3J0aW5nVXJsID0gdXJsT2JqLmVycm9yUmVwb3J0aW5nVXJsO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXJsT2JqID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVybCA9IHVybE9iajtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRldigpLndhcm4oVEFHLCBgSW52YWxpZCB1cmw6ICR7dXJsT2JqfWApO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmZsYXRlQW5kU2VuZFJ0Y18odXJsLFxuICAgICAgICAgIGN1c3RvbU1hY3JvcyxcbiAgICAgICAgICBlcnJvclJlcG9ydGluZ1VybCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTWFuYWdlcyBzZW5kaW5nIHRoZSBSVEMgY2FsbG91dHMgZm9yIGFsbCBzcGVjaWZpZWQgdmVuZG9ycy5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgIS4uLy4uLy4uL3NyYy9zZXJ2aWNlL3ZhcmlhYmxlLXNvdXJjZS5Bc3luY1Jlc29sdmVyRGVmPn0gY3VzdG9tTWFjcm9zIFRoZSBhZC1uZXR3b3JrIHNwZWNpZmllZCBtYWNyb1xuICAgKi9cbiAgaGFuZGxlUnRjRm9yVmVuZG9yVXJscyhjdXN0b21NYWNyb3MpIHtcbiAgICAvLyBGb3IgZWFjaCB2ZW5kb3IgdGhlIHB1Ymxpc2hlciBoYXMgc3BlY2lmaWVkLCBpbmZsYXRlIHRoZSB2ZW5kb3JcbiAgICAvLyB1cmwgaWYgaXQgZXhpc3RzLCBhbmQgc2VuZCB0aGUgUlRDIHJlcXVlc3QuXG4gICAgT2JqZWN0LmtleXModGhpcy5ydGNDb25maWdfLnZlbmRvcnMgfHwgW10pLmZvckVhY2godmVuZG9yID0+IHtcbiAgICAgIGNvbnN0IHZlbmRvck9iamVjdCA9IFJUQ19WRU5ET1JTW3ZlbmRvci50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGNvbnN0IHVybCA9IHZlbmRvck9iamVjdCA/IHZlbmRvck9iamVjdC51cmwgOiAnJztcbiAgICAgIGNvbnN0IGVycm9yUmVwb3J0aW5nVXJsID0gdmVuZG9yT2JqZWN0ICYmIHZlbmRvck9iamVjdC5lcnJvclJlcG9ydGluZ1VybCA/XG4gICAgICAgIHZlbmRvck9iamVjdC5lcnJvclJlcG9ydGluZ1VybCA6ICcnO1xuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZUFycmF5Xy5wdXNoKFxuICAgICAgICAgICAgdGhpcy5idWlsZEVycm9yUmVzcG9uc2VfKFxuICAgICAgICAgICAgICAgIFJUQ19FUlJPUl9FTlVNLlVOS05PV05fVkVORE9SLCB2ZW5kb3IsIGVycm9yUmVwb3J0aW5nVXJsKSk7XG4gICAgICB9XG4gICAgICAvLyBUaGVyZSBhcmUgdHdvIHZhbGlkIGNvbmZpZ3VyYXRpb25zIG9mIHRoZSB2ZW5kb3Igb2JqZWN0LlxuICAgICAgLy8gSXQgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb2YgbWFjcm9zIG1hcHBpbmcgc3RyaW5nIHRvIHN0cmluZyxcbiAgICAgIC8vIG9yIGl0IGNhbiBiZSBhbiBvYmplY3Qgd2l0aCBzdWItb2JqZWN0cywgb25lIG9mIHdoaWNoIGNhbiBiZVxuICAgICAgLy8gJ21hY3JvcycuIFRoaXMgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LlxuICAgICAgY29uc3QgdmVuZG9yTWFjcm9zID1cbiAgICAgICAgICAgIGlzT2JqZWN0KHRoaXMucnRjQ29uZmlnXy52ZW5kb3JzW3ZlbmRvcl1bJ21hY3JvcyddKSA/XG4gICAgICAgICAgICAgIHRoaXMucnRjQ29uZmlnXy52ZW5kb3JzW3ZlbmRvcl1bJ21hY3JvcyddIDpcbiAgICAgICAgICAgICAgdGhpcy5ydGNDb25maWdfLnZlbmRvcnNbdmVuZG9yXTtcbiAgICAgIGNvbnN0IHZhbGlkVmVuZG9yTWFjcm9zID0ge307XG4gICAgICBPYmplY3Qua2V5cyh2ZW5kb3JNYWNyb3MpLmZvckVhY2gobWFjcm8gPT4ge1xuICAgICAgICBpZiAoISh2ZW5kb3JPYmplY3QubWFjcm9zICYmIHZlbmRvck9iamVjdC5tYWNyb3MuaW5jbHVkZXMobWFjcm8pKSkge1xuICAgICAgICAgIHVzZXIoKS5lcnJvcihUQUcsIGBVbmtub3duIG1hY3JvOiAke21hY3JvfSBmb3IgdmVuZG9yOiAke3ZlbmRvcn1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZlbmRvck1hY3Jvc1ttYWNyb107XG4gICAgICAgICAgdmFsaWRWZW5kb3JNYWNyb3NbbWFjcm9dID0gaXNPYmplY3QodmFsdWUpIHx8IGlzQXJyYXkodmFsdWUpID9cbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFRoZSBhZCBuZXR3b3JrIGRlZmluZWQgbWFjcm9zIG92ZXJyaWRlIHZlbmRvciBkZWZpbmVkL3B1YiBzcGVjaWZlZC5cbiAgICAgIGNvbnN0IG1hY3JvcyA9IE9iamVjdC5hc3NpZ24odmFsaWRWZW5kb3JNYWNyb3MsIGN1c3RvbU1hY3Jvcyk7XG4gICAgICB0aGlzLmluZmxhdGVBbmRTZW5kUnRjXyh1cmwsXG4gICAgICAgICAgbWFjcm9zLCBlcnJvclJlcG9ydGluZ1VybCxcbiAgICAgICAgICB2ZW5kb3IudG9Mb3dlckNhc2UoKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAhLi4vLi4vLi4vc3JjL3NlcnZpY2UvdmFyaWFibGUtc291cmNlLkFzeW5jUmVzb2x2ZXJEZWY+fSBtYWNyb3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yUmVwb3J0aW5nVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3ZlbmRvclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaW5mbGF0ZUFuZFNlbmRSdGNfKHVybCxcbiAgICBtYWNyb3MsIGVycm9yUmVwb3J0aW5nVXJsLCBvcHRfdmVuZG9yKSB7XG4gICAgbGV0IHt0aW1lb3V0TWlsbGlzfSA9IHRoaXMucnRjQ29uZmlnXztcbiAgICBjb25zdCBjYWxsb3V0ID0gb3B0X3ZlbmRvciB8fCB0aGlzLmdldENhbGxvdXRQYXJhbV8odXJsKTtcbiAgICBjb25zdCBjaGVja1N0aWxsQ3VycmVudCA9IHRoaXMuYTRhRWxlbWVudF8udmVyaWZ5U3RpbGxDdXJyZW50LmJpbmQoXG4gICAgICAgIHRoaXMuYTRhRWxlbWVudF8pKCk7XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgdGhhdCBpdCB0YWtlcyB0byBzdWJzdGl0dXRlIHRoZSBtYWNyb3MgaW50byB0aGUgVVJMIGNhbiB2YXJ5XG4gICAgICogZGVwZW5kaW5nIG9uIHdoYXQgdGhlIHVybCByZXF1aXJlcyB0byBiZSBzdWJzdGl0dXRlZCwgaS5lLiBhIGxvbmdcbiAgICAgKiBhc3luYyBjYWxsLiBUaHVzLCBob3dldmVyIGxvbmcgdGhlIFVSTCByZXBsYWNlbWVudCB0b29rIGlzIHRyZWF0ZWQgYXMgYVxuICAgICAqIHRpbWUgcGVuYWx0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICovXG4gICAgY29uc3Qgc2VuZCA9IHVybCA9PiB7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zZWVuVXJsc18pLmxlbmd0aCA9PSBNQVhfUlRDX0NBTExPVVRTKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkRXJyb3JSZXNwb25zZV8oXG4gICAgICAgICAgICBSVENfRVJST1JfRU5VTS5NQVhfQ0FMTE9VVFNfRVhDRUVERUQsXG4gICAgICAgICAgICBjYWxsb3V0LCBlcnJvclJlcG9ydGluZ1VybCk7XG4gICAgICB9XG4gICAgICBpZiAoIVNlcnZpY2VzLnVybEZvckRvYyhcbiAgICAgICAgICB0aGlzLmE0YUVsZW1lbnRfLmdldEFtcERvYygpKS5pc1NlY3VyZSh1cmwpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkRXJyb3JSZXNwb25zZV8oUlRDX0VSUk9SX0VOVU0uSU5TRUNVUkVfVVJMLFxuICAgICAgICAgICAgY2FsbG91dCwgZXJyb3JSZXBvcnRpbmdVcmwpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VlblVybHNfW3VybF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRFcnJvclJlc3BvbnNlXyhSVENfRVJST1JfRU5VTS5EVVBMSUNBVEVfVVJMLFxuICAgICAgICAgICAgY2FsbG91dCwgZXJyb3JSZXBvcnRpbmdVcmwpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWVuVXJsc19bdXJsXSA9IHRydWU7XG4gICAgICBpZiAodXJsLmxlbmd0aCA+IE1BWF9VUkxfTEVOR1RIKSB7XG4gICAgICAgIHVybCA9IHRoaXMudHJ1bmNVcmxfKHVybCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zZW5kUnRjQ2FsbG91dF8oXG4gICAgICAgICAgdXJsLCB0aW1lb3V0TWlsbGlzLCBjYWxsb3V0LCBjaGVja1N0aWxsQ3VycmVudCxcbiAgICAgICAgICBlcnJvclJlcG9ydGluZ1VybCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHdoaXRlbGlzdCA9IHt9O1xuICAgIE9iamVjdC5rZXlzKG1hY3JvcykuZm9yRWFjaChrZXkgPT4gd2hpdGVsaXN0W2tleV0gPSB0cnVlKTtcbiAgICBjb25zdCB1cmxSZXBsYWNlbWVudFN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5wcm9taXNlQXJyYXlfLnB1c2goU2VydmljZXMudGltZXJGb3IodGhpcy53aW5fKS50aW1lb3V0UHJvbWlzZShcbiAgICAgICAgdGltZW91dE1pbGxpcyxcbiAgICAgICAgU2VydmljZXMudXJsUmVwbGFjZW1lbnRzRm9yRG9jKHRoaXMuYW1wRG9jXykuZXhwYW5kVXJsQXN5bmMoXG4gICAgICAgICAgICB1cmwsIG1hY3Jvcywgd2hpdGVsaXN0KSkudGhlbih1cmwgPT4ge1xuICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgIHRpbWVvdXRNaWxsaXMgLT0gKHVybFJlcGxhY2VtZW50U3RhcnRUaW1lIC0gRGF0ZS5ub3coKSk7XG4gICAgICByZXR1cm4gc2VuZCh1cmwpO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJldHVybiBpc0NhbmNlbGxhdGlvbihlcnJvcikgPyB1bmRlZmluZWQgOlxuICAgICAgICB0aGlzLmJ1aWxkRXJyb3JSZXNwb25zZV8oUlRDX0VSUk9SX0VOVU0uTUFDUk9fRVhQQU5EX1RJTUVPVVQsXG4gICAgICAgICAgICBjYWxsb3V0LCBlcnJvclJlcG9ydGluZ1VybCk7XG4gICAgfSkpO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0cnVuY1VybF8odXJsKSB7XG4gICAgdXJsID0gdXJsLnN1YnN0cigwLCBNQVhfVVJMX0xFTkdUSCAtIDEyKS5yZXBsYWNlKC8lXFx3PyQvLCAnJyk7XG4gICAgcmV0dXJuIHVybCArICcmX190cnVuY19fPTEnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRNaWxsaXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxvdXRcbiAgICogQHBhcmFtIHshRnVuY3Rpb259IGNoZWNrU3RpbGxDdXJyZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlcnJvclJlcG9ydGluZ1VybFxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhcnRjUmVzcG9uc2VEZWY+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFJ0Y0NhbGxvdXRfKHVybCwgdGltZW91dE1pbGxpcywgY2FsbG91dCwgY2hlY2tTdGlsbEN1cnJlbnQsXG4gICAgZXJyb3JSZXBvcnRpbmdVcmwpIHtcbiAgICAvKipcbiAgICAgKiBOb3RlOiBUaW1lb3V0IGlzIGVuZm9yY2VkIGJ5IHRpbWVyRm9yLCBub3QgdGhlIHZhbHVlIG9mXG4gICAgICogICBydGNUaW1lLiBUaGVyZSBhcmUgc2l0dWF0aW9ucyB3aGVyZSBydGNUaW1lIGNvdWxkIHRodXNcbiAgICAgKiAgIGVuZCB1cCBiZWluZyBncmVhdGVyIHRoYW4gdGltZW91dE1pbGxpcy5cbiAgICAgKi9cbiAgICByZXR1cm4gU2VydmljZXMudGltZXJGb3IodGhpcy53aW5fKS50aW1lb3V0UHJvbWlzZShcbiAgICAgICAgdGltZW91dE1pbGxpcyxcbiAgICAgICAgU2VydmljZXMueGhyRm9yKHRoaXMud2luXykuZmV0Y2hKc29uKFxuICAgICAgICAgICAgLy8gTk9URShicmFkZnJpenplbGwpOiB3ZSBjb3VsZCBpbmNsdWRlIGFtcENvcnM6ZmFsc2UgYWxsb3dpbmdcbiAgICAgICAgICAgIC8vIHRoZSByZXF1ZXN0IHRvIGJlIGNhY2hlZCBhY3Jvc3Mgc2l0ZXMgYnV0IGZvciBub3cgYXNzdW1lIHRoYXRcbiAgICAgICAgICAgIC8vIGlzIG5vdCBhIHJlcXVpcmVkIGZlYXR1cmUuXG4gICAgICAgICAgICB1cmwsIHtjcmVkZW50aWFsczogJ2luY2x1ZGUnfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgcmV0dXJuIHJlcy50ZXh0KCkudGhlbih0ZXh0ID0+IHtcbiAgICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgICBjb25zdCBydGNUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMucnRjU3RhcnRUaW1lXztcbiAgICAgICAgICAgIC8vIEFuIGVtcHR5IHRleHQgcmVzcG9uc2UgaXMgYWxsb3dlZCwgbm90IGFuIGVycm9yLlxuICAgICAgICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7cnRjVGltZSwgY2FsbG91dH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRyeVBhcnNlSnNvbih0ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSA/IHtyZXNwb25zZSwgcnRjVGltZSwgY2FsbG91dH0gOlxuICAgICAgICAgICAgICB0aGlzLmJ1aWxkRXJyb3JSZXNwb25zZV8oXG4gICAgICAgICAgICAgICAgICBSVENfRVJST1JfRU5VTS5NQUxGT1JNRURfSlNPTl9SRVNQT05TRSwgY2FsbG91dCxcbiAgICAgICAgICAgICAgICAgIGVycm9yUmVwb3J0aW5nVXJsLCBydGNUaW1lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJldHVybiBpc0NhbmNlbGxhdGlvbihlcnJvcikgPyB1bmRlZmluZWQgOlxuICAgICAgICB0aGlzLmJ1aWxkRXJyb3JSZXNwb25zZV8oXG4gICAgICAgICAgICAvLyBUaGUgcmVsZXZhbnQgZXJyb3IgbWVzc2FnZSBmb3IgdGltZW91dCBsb29rcyBsaWtlIGl0IGlzXG4gICAgICAgICAgICAvLyBqdXN0ICdtZXNzYWdlJyBidXQgaXMgaW4gZmFjdCAnbWVzc2FnZVhYWCcgd2hlcmUgdGhlXG4gICAgICAgICAgICAvLyBYJ3MgYXJlIGhpZGRlbiBzcGVjaWFsIGNoYXJhY3RlcnMuIFRoYXQncyB3aHkgd2UgdXNlXG4gICAgICAgICAgICAvLyBtYXRjaCBoZXJlLlxuICAgICAgICAgICAgKC9edGltZW91dC8udGVzdChlcnJvci5tZXNzYWdlKSkgP1xuICAgICAgICAgICAgICBSVENfRVJST1JfRU5VTS5USU1FT1VUIDogUlRDX0VSUk9SX0VOVU0uTkVUV09SS19GQUlMVVJFLFxuICAgICAgICAgICAgY2FsbG91dCwgZXJyb3JSZXBvcnRpbmdVcmwsIERhdGUubm93KCkgLSB0aGlzLnJ0Y1N0YXJ0VGltZV8pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIHBhcnNlIHRoZSBwdWJsaXNoZXItZGVmaW5lZCBSVEMgY29uZmlnIG9mZiB0aGUgYW1wLWFkXG4gICAqIGVsZW1lbnQsIHRoZW4gdmFsaWRhdGVzIHRoYXQgdGhlIHJ0Y0NvbmZpZyBleGlzdHMsIGFuZCBjb250YWluc1xuICAgKiBhbiBlbnRyeSBmb3IgZWl0aGVyIHZlbmRvciBVUkxzLCBvciBwdWJsaXNoZXItZGVmaW5lZCBVUkxzLiBJZiB0aGVcbiAgICogY29uZmlnIGNvbnRhaW5zIGFuIGVudHJ5IGZvciB0aW1lb3V0TWlsbGlzLCB2YWxpZGF0ZXMgdGhhdCBpdCBpcyBhXG4gICAqIG51bWJlciwgb3IgY29udmVydHMgdG8gYSBudW1iZXIgaWYgbnVtYmVyLWxpa2UsIG90aGVyd2lzZSBvdmVyd3JpdGVzXG4gICAqIHdpdGggdGhlIGRlZmF1bHQuXG4gICAqIElNUE9SVEFOVDogSWYgdGhlIHJ0Y0NvbmZpZyBpcyBpbnZhbGlkLCBSVEMgaXMgYWJvcnRlZCwgYW5kIHRoZSBhZFxuICAgKiAgIHJlcXVlc3QgY29udGludWVzIHdpdGhvdXQgUlRDLlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICB2YWxpZGF0ZVJ0Y0NvbmZpZ18oZWxlbWVudCkge1xuICAgIGNvbnN0IGRlZmF1bHRUaW1lb3V0TWlsbGlzID0gMTAwMDtcbiAgICBjb25zdCB1bnBhcnNlZFJ0Y0NvbmZpZyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdydGMtY29uZmlnJyk7XG4gICAgaWYgKCF1bnBhcnNlZFJ0Y0NvbmZpZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBydGNDb25maWcgPSB0cnlQYXJzZUpzb24odW5wYXJzZWRSdGNDb25maWcpO1xuICAgIGlmICghcnRjQ29uZmlnKSB7XG4gICAgICB1c2VyKCkud2FybihUQUcsICdDb3VsZCBub3QgSlNPTiBwYXJzZSBydGMtY29uZmlnIGF0dHJpYnV0ZScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCB0aW1lb3V0O1xuICAgIHRyeSB7XG4gICAgICB1c2VyKCkuYXNzZXJ0KHJ0Y0NvbmZpZ1sndmVuZG9ycyddIHx8IHJ0Y0NvbmZpZ1sndXJscyddLFxuICAgICAgICAgICdSVEMgQ29uZmlnIG11c3Qgc3BlY2lmeSB2ZW5kb3JzIG9yIHVybHMnKTtcbiAgICAgIE9iamVjdC5rZXlzKHJ0Y0NvbmZpZykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2UgJ3ZlbmRvcnMnOlxuICAgICAgICAgICAgdXNlcigpLmFzc2VydChpc09iamVjdChydGNDb25maWdba2V5XSksICdSVEMgaW52YWxpZCB2ZW5kb3JzJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd1cmxzJzpcbiAgICAgICAgICAgIHVzZXIoKS5hc3NlcnQoaXNBcnJheShydGNDb25maWdba2V5XSksICdSVEMgaW52YWxpZCB1cmxzJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd0aW1lb3V0TWlsbGlzJzpcbiAgICAgICAgICAgIHRpbWVvdXQgPSBwYXJzZUludChydGNDb25maWdba2V5XSwgMTApO1xuICAgICAgICAgICAgaWYgKGlzTmFOKHRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgIHVzZXIoKS53YXJuKFRBRywgJ0ludmFsaWQgUlRDIHRpbWVvdXQgaXMgTmFOLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYHVzaW5nIGRlZmF1bHQgdGltZW91dCAke2RlZmF1bHRUaW1lb3V0TWlsbGlzfW1zYCk7XG4gICAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVvdXQgPj0gZGVmYXVsdFRpbWVvdXRNaWxsaXMgfHwgdGltZW91dCA8IDApIHtcbiAgICAgICAgICAgICAgdXNlcigpLndhcm4oVEFHLCBgSW52YWxpZCBSVEMgdGltZW91dDogJHt0aW1lb3V0fW1zLCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYHVzaW5nIGRlZmF1bHQgdGltZW91dCAke2RlZmF1bHRUaW1lb3V0TWlsbGlzfW1zYCk7XG4gICAgICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdXNlcigpLndhcm4oVEFHLCBgVW5rbm93biBSVEMgQ29uZmlnIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoIU9iamVjdC5rZXlzKHJ0Y0NvbmZpZ1sndmVuZG9ycyddIHx8IHt9KS5sZW5ndGhcbiAgICAgICAgICAmJiAhKHJ0Y0NvbmZpZ1sndXJscyddIHx8IFtdKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsaWRhdGVFcnJvclJlcG9ydGluZ1VybCA9IHVybE9iaiA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yVXJsID0gdXJsT2JqWydlcnJvclJlcG9ydGluZ1VybCddO1xuICAgICAgICBpZiAoZXJyb3JVcmwgJiYgIVNlcnZpY2VzLnVybEZvckRvYyhcbiAgICAgICAgICAgIHRoaXMuYTRhRWxlbWVudF8uZ2V0QW1wRG9jKCkpLmlzU2VjdXJlKGVycm9yVXJsKSkge1xuICAgICAgICAgIGRldigpLndhcm4oVEFHLCBgSW5zZWN1cmUgUlRDIGVycm9yUmVwb3J0aW5nVXJsOiAke2Vycm9yVXJsfWApO1xuICAgICAgICAgIHVybE9ialsnZXJyb3JSZXBvcnRpbmdVcmwnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIChydGNDb25maWdbJ3VybHMnXSB8fCBbXSkuZm9yRWFjaCh1cmxPYmogPT4ge1xuICAgICAgICBpZiAoaXNPYmplY3QodXJsT2JqKSkge1xuICAgICAgICAgIHZhbGlkYXRlRXJyb3JSZXBvcnRpbmdVcmwodXJsT2JqKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YWxpZGF0ZUVycm9yUmVwb3J0aW5nVXJsKHJ0Y0NvbmZpZyk7XG4gICAgfSBjYXRjaCAodW51c2VkRXJyKSB7XG4gICAgICAvLyBUaGlzIGVycm9yIHdvdWxkIGJlIGR1ZSB0byB0aGUgYXNzZXJ0cyBhYm92ZS5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcnRjQ29uZmlnWyd0aW1lb3V0TWlsbGlzJ10gPSB0aW1lb3V0ICE9PSB1bmRlZmluZWQgP1xuICAgICAgdGltZW91dCA6IGRlZmF1bHRUaW1lb3V0TWlsbGlzO1xuICAgIHRoaXMucnRjQ29uZmlnXyA9IC8qKiBAdHlwZSB7UnRjQ29uZmlnRGVmfSAqLyhydGNDb25maWcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5BTVAuUmVhbFRpbWVDb25maWdNYW5hZ2VyID0gUmVhbFRpbWVDb25maWdNYW5hZ2VyO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7SW50ZXJzZWN0aW9uT2JzZXJ2ZXJQb2x5ZmlsbH0gZnJvbSAnLi4vLi4vLi4vc3JjL2ludGVyc2VjdGlvbi1vYnNlcnZlci1wb2x5ZmlsbCc7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5cbmV4cG9ydCBjbGFzcyBSZWZyZXNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJXcmFwcGVyIHtcbiAgLyoqXG4gICAqIEEgdGhpbiB3cmFwcGVyIGNsYXNzIHRvIGFsbG93IHRoZSBJbnRlcnNlY3Rpb25PYnNlcnZlclBvbHlmaWxsIHRvIHdvcmsgd2l0aFxuICAgKiByZWZyZXNoLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFBcnJheTwhSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4pfSBjYWxsYmFja1xuICAgKiBAcGFyYW0geyFBTVAuQmFzZUVsZW1lbnR9IGJhc2VFbGVtZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBiYXNlRWxlbWVudCwgY29uZmlnKSB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSBAY29uc3QgeyFJbnRlcnNlY3Rpb25PYnNlcnZlclBvbHlmaWxsfVxuICAgICAqL1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyUG9seWZpbGwoXG4gICAgICAgIGNhbGxiYWNrLCBjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogU3RvcmVzIGVsZW1lbnRzIGFuZCB0aGVpciBvcmlnaW5hbCB2aWV3cG9ydENhbGxiYWNrIGZ1bmN0aW9ucyBzbyB0aGF0XG4gICAgICogdGhleSBjYW4gYmUgcmV2ZXJ0ZWQgdXBvbiBpbnZvY2F0aW9uIG9mIHVub2JzZXJ2ZS5cbiAgICAgKiBAcHJpdmF0ZSB7IU9iamVjdDxzdHJpbmcsIGZ1bmN0aW9uKCk+fVxuICAgICAqL1xuICAgIHRoaXMudmlld3BvcnRDYWxsYmFja3NfID0ge307XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi4vLi4vLi4vc3JjL3NlcnZpY2Uvdmlld3BvcnQvdmlld3BvcnQtaW1wbC5WaWV3cG9ydH0gKi9cbiAgICB0aGlzLnZpZXdwb3J0XyA9IGJhc2VFbGVtZW50LmdldFZpZXdwb3J0KCk7XG5cbiAgICAvKipcbiAgICAgKiBGbGFnIHRoYXQgaW5kaWNhdGVzIHdoZW4gI3RpY2sgc2hvdWxkIGJlIGNhbGxlZCBvbiB0aGUgb2JzZXJ2ZXJcbiAgICAgKiBwb2x5ZmlsbC5cbiAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnVwZGF0ZU9ic2VydmVyXyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEJlZ2luIG9ic2VydmluZyB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICAgKi9cbiAgb2JzZXJ2ZShlbGVtZW50KSB7XG4gICAgLy8gVGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGV4cG9ydGVkIGluIHJlZnJlc2gtbWFuYWdlci5qcyBhc1xuICAgIC8vIERBVEFfTUFOQUdFUl9JRF9OQU1FLCBidXQgdW5mb3J0dW5hdGVseSwgaXQgY2FuJ3QgYmUgaW1wb3J0ZWQgd2l0aG91dFxuICAgIC8vIGNyZWF0aW5nIGEgY3ljbGljYWwgZGVwZW5kZW5jeS5cbiAgICBjb25zdCByZWZyZXNoSWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtYWQtcmVmcmVzaC1pZCcpO1xuICAgIGRldigpLmFzc2VydChyZWZyZXNoSWQsICdvYnNlcnZlIGludm9rZWQgb24gZWxlbWVudCB3aXRob3V0IHJlZnJlc2ggaWQnKTtcblxuICAgIGlmICghdGhpcy52aWV3cG9ydENhbGxiYWNrc19bcmVmcmVzaElkXSkge1xuICAgICAgY29uc3Qgdmlld3BvcnRDYWxsYmFjayA9IGVsZW1lbnQudmlld3BvcnRDYWxsYmFjay5iaW5kKGVsZW1lbnQpO1xuICAgICAgdGhpcy52aWV3cG9ydENhbGxiYWNrc19bcmVmcmVzaElkXSA9IHZpZXdwb3J0Q2FsbGJhY2s7XG4gICAgICBlbGVtZW50LnZpZXdwb3J0Q2FsbGJhY2sgPSBpblZpZXdwb3J0ID0+IHtcbiAgICAgICAgaWYgKHRoaXMudXBkYXRlT2JzZXJ2ZXJfKSB7XG4gICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcl8udGljayh0aGlzLnZpZXdwb3J0Xy5nZXRSZWN0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHZpZXdwb3J0Q2FsbGJhY2soaW5WaWV3cG9ydCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlT2JzZXJ2ZXJfID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyXy5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIC8vIEVsZW1lbnRzIHRoYXQgYXBwZWFyIGFuZCByZW1haW4gd2l0aGluIHRoZSB2aWV3cG9ydCBmb3IgdGhlIGR1cmF0aW9uIG9mXG4gICAgLy8gdGhlaXIgZXhpc3RlbmNlIG1heSBuZXZlciBoYXZlIHZpZXdwb3J0Q2FsbGJhY2sgaW52b2tlZC4gVG8gZW5zdXJlIHRoYXRcbiAgICAvLyByZWZyZXNoIGlzIHRyaWdnZXJlZCwgd2UgbmVlZCB0byBtYWtlIHRoaXMgaW5pdGlhbCBjYWxsLlxuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfLnRpY2sodGhpcy52aWV3cG9ydF8uZ2V0UmVjdCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDZWFzZSBvYnNlcnZpbmcgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIHVub2JzZXJ2ZShlbGVtZW50KSB7XG4gICAgLy8gV2UgbmVlZCB0byBjYWxsICd0aWNrJyB0byB1cGRhdGUgY3VycmVudCBob3N0IHZpZXdwb3J0IHN0YXRlLCBvdGhlcndpc2VcbiAgICAvLyB0aGUgbmV4dCB0aW1lIHdlIGNhbGwgJ29ic2VydmUnLCB0aGUgdmlld3BvcnQgc3RhdGUgbWlnaHQgYmUgc3RhbGUsIGFuZFxuICAgIC8vIGluZGljYXRlIHRoYXQgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0IHdoZW4gaXQncyBub3QuXG4gICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcl8udGljayh0aGlzLnZpZXdwb3J0Xy5nZXRSZWN0KCkpO1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgICB0aGlzLnVwZGF0ZU9ic2VydmVyXyA9IGZhbHNlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtSZWZyZXNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJXcmFwcGVyfSBmcm9tICcuL3JlZnJlc2gtaW50ZXJzZWN0aW9uLW9ic2VydmVyLXdyYXBwZXInO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzJztcbmltcG9ydCB7ZGV2LCB1c2VyfSBmcm9tICcuLi8uLi8uLi9zcmMvbG9nJztcblxuLyoqXG4gKiAtIHZpc2liaWxlUGVyY2VudGFnZU1pbjogVGhlIHBlcmNlbnRhZ2Ugb2YgcGl4ZWxzIHRoYXQgbmVlZCB0byBiZSBvbiBzY3JlZW5cbiAqICAgZm9yIHRoZSBjcmVhdGl2ZSB0byBiZSBjb25zaWRlcmVkIFwidmlzaWJsZVwiLlxuICogLSBjb250aW51b3VzVGltZU1pbjogVGhlIGFtb3VudCBvZiBjb250aW51b3VzIHRpbWUsIGluIG1pbGxpc2Vjb25kcywgdGhhdFxuICogICB0aGUgY3JlYXRpdmUgbXVzdCBiZSBvbiBzY3JlZW4gZm9yIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgXCJ2aXNpYmxlXCIuXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgdmlzaWJsZVBlcmNlbnRhZ2VNaW46IG51bWJlcixcbiAqICAgY29udGludW91c1RpbWVNaW46IG51bWJlcixcbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgUmVmcmVzaENvbmZpZztcblxuZXhwb3J0IGNvbnN0IE1JTl9SRUZSRVNIX0lOVEVSVkFMID0gMzA7XG5leHBvcnQgY29uc3QgREFUQV9BVFRSX05BTUUgPSAnZGF0YS1lbmFibGUtcmVmcmVzaCc7XG5leHBvcnQgY29uc3QgREFUQV9NQU5BR0VSX0lEX05BTUUgPSAnZGF0YS1hbXAtYWQtcmVmcmVzaC1pZCc7XG5leHBvcnQgY29uc3QgTUVUQVRBR19OQU1FID0gJ2FtcC1hZC1lbmFibGUtcmVmcmVzaCc7XG5cbmNvbnN0IFRBRyA9ICdBTVAtQUQnO1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgcHVibGlzaGVyLXNwZWNpZmllZCByZWZyZXNoIGludGVydmFsLCBpZiBvbmUgd2VyZSBzZXQuIFRoaXNcbiAqIGZ1bmN0aW9uIGZpcnN0IGNoZWNrcyBmb3IgYXBwcm9wcmlhdGUgc2xvdCBhdHRyaWJ1dGVzIGFuZCB0aGVuIGZvclxuICogbWV0YWRhdGEgdGFncywgcHJlZmVycmluZyB3aGljaGV2ZXIgaXQgZmluZHMgZmlyc3QuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7P251bWJlcn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVibGlzaGVyU3BlY2lmaWVkUmVmcmVzaEludGVydmFsKGVsZW1lbnQsIHdpbikge1xuICBjb25zdCByZWZyZXNoSW50ZXJ2YWwgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShEQVRBX0FUVFJfTkFNRSk7XG4gIGlmIChyZWZyZXNoSW50ZXJ2YWwpIHtcbiAgICByZXR1cm4gY2hlY2tBbmRTYW5pdGl6ZVJlZnJlc2hJbnRlcnZhbChyZWZyZXNoSW50ZXJ2YWwpO1xuICB9XG4gIGxldCBtZXRhVGFnO1xuICBjb25zdCBtZXRhVGFnQ29udGVudCA9ICgobWV0YVRhZyA9IHdpbi5kb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRzQnlOYW1lKE1FVEFUQUdfTkFNRSkpXG4gICAgICAmJiBtZXRhVGFnWzBdXG4gICAgICAmJiBtZXRhVGFnWzBdLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKTtcbiAgaWYgKCFtZXRhVGFnQ29udGVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG5ldHdvcmtJbnRlcnZhbFBhaXJzID0gbWV0YVRhZ0NvbnRlbnQuc3BsaXQoJywnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXR3b3JrSW50ZXJ2YWxQYWlycy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhaXIgPSBuZXR3b3JrSW50ZXJ2YWxQYWlyc1tpXS5zcGxpdCgnPScpO1xuICAgIHVzZXIoKS5hc3NlcnQocGFpci5sZW5ndGggPT0gMiwgJ3JlZnJlc2ggbWV0YWRhdGEgY29uZmlnIG11c3QgYmUgb2YgJyArXG4gICAgICAgICd0aGUgZm9ybSBgbmV0d29ya190eXBlPXJlZnJlc2hfaW50ZXJ2YWxgJyk7XG4gICAgaWYgKHBhaXJbMF0udG9Mb3dlckNhc2UoKSA9PSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBjaGVja0FuZFNhbml0aXplUmVmcmVzaEludGVydmFsKHBhaXJbMV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgcmVmcmVzaEludGVydmFsIGlzIGEgbnVtYmVyIG5vIGxlc3MgdGhhbiAzMC4gUmV0dXJucyBudWxsIGlmXG4gKiB0aGUgZ2l2ZW4gaW5wdXQgZmFpbHMgdG8gbWVldCB0aGVzZSBjcml0ZXJpYS4gVGhpcyBhbHNvIGNvbnZlcnRzIGZyb21cbiAqIHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSByZWZyZXNoSW50ZXJ2YWxcbiAqIEByZXR1cm4gez9udW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kU2FuaXRpemVSZWZyZXNoSW50ZXJ2YWwocmVmcmVzaEludGVydmFsKSB7XG4gIGNvbnN0IHJlZnJlc2hJbnRlcnZhbE51bSA9IE51bWJlcihyZWZyZXNoSW50ZXJ2YWwpO1xuICBpZiAoaXNOYU4ocmVmcmVzaEludGVydmFsTnVtKSB8fFxuICAgICAgcmVmcmVzaEludGVydmFsTnVtIDwgTUlOX1JFRlJFU0hfSU5URVJWQUwpIHtcbiAgICB1c2VyKCkud2FybihUQUcsXG4gICAgICAgICdpbnZhbGlkIHJlZnJlc2ggaW50ZXJ2YWwsIG11c3QgYmUgYSBudW1iZXIgbm8gbGVzcyB0aGFuICcgK1xuICAgICAgICBgJHtNSU5fUkVGUkVTSF9JTlRFUlZBTH06ICR7cmVmcmVzaEludGVydmFsfWApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiByZWZyZXNoSW50ZXJ2YWxOdW0gKiAxMDAwO1xufVxuXG4vKipcbiAqIERlZmluZXMgdGhlIERGQSBzdGF0ZXMgZm9yIHRoZSByZWZyZXNoIGN5Y2xlLlxuICpcbiAqIDEuIEFsbCBuZXdseSByZWdpc3RlcmVkIGVsZW1lbnRzIGJlZ2luIGluIHRoZSBJTklUSUFMIHN0YXRlLlxuICogMi4gT25seSB3aGVuIHRoZSBlbGVtZW50IGVudGVycyB0aGUgdmlld3BvcnQgd2l0aCB0aGUgc3BlY2lmaWVkXG4gKiAgICBpbnRlcnNlY3Rpb24gcmF0aW8gZG9lcyBpdCB0cmFuc2l0aW9uIGludG8gdGhlIFZJRVdfUEVORElORyBzdGF0ZS5cbiAqIDMuIElmIHRoZSBlbGVtZW50IHJlbWFpbnMgaW4gdGhlIHZpZXdwb3J0IGZvciB0aGUgc3BlY2lmaWVkIGR1cmF0aW9uLCBpdFxuICogICAgd2lsbCB0aGVuIHRyYW5zaXRpb24gaW50byB0aGUgUkVGUkVTSF9QRU5ESU5HIHN0YXRlLCBvdGhlcndpc2UgaXQgd2lsbFxuICogICAgdHJhbnNpdGlvbiBiYWNrIGludG8gdGhlIElOSVRJQUwgc3RhdGUuXG4gKiA0LiBUaGUgZWxlbWVudCB3aWxsIHJlbWFpbiBpbiBSRUZSRVNIX1BFTkRJTkcgc3RhdGUgdW50aWwgdGhlIHJlZnJlc2hcbiAqICAgIGludGVydmFsIGV4cGlyZXMuXG4gKiA1LiBPbmNlIHRoZSBpbnRlcnZhbCBleHBpcmVzLCB0aGUgZWxlbWVudCB3aWxsIHJldHVybiB0byB0aGUgSU5JVElBTCBzdGF0ZS5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5jb25zdCBSZWZyZXNoTGlmZWN5Y2xlU3RhdGUgPSB7XG4gIC8qKlxuICAgKiBFbGVtZW50IGhhcyBiZWVuIHJlZ2lzdGVyZWQsIGJ1dCBub3QgeWV0IHNlZW4gb24gc2NyZWVuLlxuICAgKi9cbiAgSU5JVElBTDogJ2luaXRpYWwnLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCBoYXMgYXBwZWFyZWQgaW4gdGhlIHZpZXdwb3J0LCBidXQgbm90IHlldCBmb3IgdGhlIHJlcXVpcmVkXG4gICAqIGR1cmF0aW9uLlxuICAgKi9cbiAgVklFV19QRU5ESU5HOiAndmlld19wZW5kaW5nJyxcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgaGFzIGJlZW4gaW4gdGhlIHZpZXdwb3J0IGZvciB0aGUgcmVxdWlyZWQgZHVyYXRpb247IHRoZVxuICAgKiByZWZyZXNoIGludGVydmFsIGZvciB0aGUgZWxlbWVudCBoYXMgYmVndW4uXG4gICAqL1xuICBSRUZSRVNIX1BFTkRJTkc6ICdyZWZyZXNoX3BlbmRpbmcnLFxufTtcblxuLyoqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJzIHVzZWQgdG8gbW9uaXRvciBlbGVtZW50cy5cbiAqIEVhY2ggSU8gaXMgY29uZmlndXJlZCB0byBhIGRpZmZlcmVudCB0aHJlc2hvbGQsIGFuZCBhbGwgZWxlbWVudHMgdGhhdFxuICogc2hhcmUgdGhlIHNhbWUgdmlzaWJsZVBlcmNlbnRhZ2VNaW4gd2lsbCBiZSBtb25pdG9yZWQgYnkgdGhlIHNhbWUgSU8uXG4gKlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgKCFJbnRlcnNlY3Rpb25PYnNlcnZlcnwhUmVmcmVzaEludGVyc2VjdGlvbk9ic2VydmVyV3JhcHBlcik+fVxuICovXG5jb25zdCBvYnNlcnZlcnMgPSB7fTtcblxuLyoqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyBhbGwgY3VycmVudGx5IGFjdGl2ZSBSZWZyZXNoTWFuYWdlcnMuIFRoaXMgaXMgdXNlZCBpblxuICogdGhlIEludGVyc2VjdGlvbk9iZXJzZXJ2ZXIgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmluZCB0aGUgYXBwcm9wcmlhdGUgZWxlbWVudFxuICogdGFyZ2V0LlxuICpcbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsICFSZWZyZXNoTWFuYWdlcj59XG4gKi9cbmNvbnN0IG1hbmFnZXJzID0ge307XG5cbi8qKlxuICogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzIGZvciBlYWNoIFJlZnJlc2hNYW5hZ2VyLlxuICogQHR5cGUge251bWJlcn1cbiAqL1xubGV0IHJlZnJlc2hNYW5hZ2VySWRDb3VudGVyID0gMDtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIFJlZnJlc2hNYW5hZ2VyLCBpZiByZWZyZXNoIGlzIGVuYWJsZWQgb24gdGhlIHBhZ2Ugb3JcbiAqIHNsb3QuIEFuIG9wdGlvbmFsIHByZWRpY2F0ZSBmb3IgZWxpZ2liaWxpdHkgbWF5IGJlIHBhc3NlZC4gSWYgcmVmcmVzaCBpcyBub3RcbiAqIGVuYWJsZWQsIG9yIGZhaWxzIHRoZSBvcHRpb25hbCBwcmVkaWNhdGUsIG51bGwgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0geyEuL2FtcC1hNGEuQW1wQTRBfSBhNGFcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpib29sZWFuPX0gb3B0X3ByZWRpY2F0ZVxuICogQHJldHVybiB7P1JlZnJlc2hNYW5hZ2VyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVmcmVzaE1hbmFnZXIoYTRhLCBvcHRfcHJlZGljYXRlKSB7XG4gIGNvbnN0IHJlZnJlc2hJbnRlcnZhbCA9XG4gICAgICBnZXRQdWJsaXNoZXJTcGVjaWZpZWRSZWZyZXNoSW50ZXJ2YWwoYTRhLmVsZW1lbnQsIGE0YS53aW4pO1xuICBpZiAoIXJlZnJlc2hJbnRlcnZhbCB8fCAob3B0X3ByZWRpY2F0ZSAmJiAhb3B0X3ByZWRpY2F0ZSgpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBuZXcgUmVmcmVzaE1hbmFnZXIoYTRhLCB7XG4gICAgdmlzaWJsZVBlcmNlbnRhZ2VNaW46IDUwLFxuICAgIGNvbnRpbnVvdXNUaW1lTWluOiAxLFxuICB9LCByZWZyZXNoSW50ZXJ2YWwpO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBSZWZyZXNoTWFuYWdlciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vYW1wLWE0YS5BbXBBNEF9IGE0YSBUaGUgQW1wQTRBIGluc3RhbmNlIHRvIGJlIHJlZnJlc2hlZC5cbiAgICogQHBhcmFtIHshUmVmcmVzaENvbmZpZ30gY29uZmlnXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZWZyZXNoSW50ZXJ2YWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGE0YSwgY29uZmlnLCByZWZyZXNoSW50ZXJ2YWwpIHtcblxuICAgIC8qKiBAcHJpdmF0ZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3RhdGVfID0gUmVmcmVzaExpZmVjeWNsZVN0YXRlLklOSVRJQUw7XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHshLi9hbXAtYTRhLkFtcEE0QX0gKi9cbiAgICB0aGlzLmE0YV8gPSBhNGE7XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHshV2luZG93fSAqL1xuICAgIHRoaXMud2luXyA9IGE0YS53aW47XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHshRWxlbWVudH0gKi9cbiAgICB0aGlzLmVsZW1lbnRfID0gYTRhLmVsZW1lbnQ7XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5hZFR5cGVfID0gdGhpcy5lbGVtZW50Xy5nZXRBdHRyaWJ1dGUoJ3R5cGUnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLyoqIEBjb25zdCBAcHJpdmF0ZSB7P251bWJlcn0gKi9cbiAgICB0aGlzLnJlZnJlc2hJbnRlcnZhbF8gPSByZWZyZXNoSW50ZXJ2YWw7XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHshUmVmcmVzaENvbmZpZ30gKi9cbiAgICB0aGlzLmNvbmZpZ18gPSB0aGlzLmNvbnZlcnRBbmRTYW5pdGl6ZUNvbmZpZ3VyYXRpb25fKGNvbmZpZyk7XG5cbiAgICAvKiogQGNvbnN0IEBwcml2YXRlIHshLi4vLi4vLi4vc3JjL3NlcnZpY2UvdGltZXItaW1wbC5UaW1lcn0gKi9cbiAgICB0aGlzLnRpbWVyXyA9IFNlcnZpY2VzLnRpbWVyRm9yKHRoaXMud2luXyk7XG5cbiAgICAvKiogQHByaXZhdGUgez8obnVtYmVyfHN0cmluZyl9ICovXG4gICAgdGhpcy5yZWZyZXNoVGltZW91dElkXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez8obnVtYmVyfHN0cmluZyl9ICovXG4gICAgdGhpcy52aXNpYmlsaXR5VGltZW91dElkXyA9IG51bGw7XG5cbiAgICBjb25zdCBtYW5hZ2VySWQgPSBTdHJpbmcocmVmcmVzaE1hbmFnZXJJZENvdW50ZXIrKyk7XG4gICAgdGhpcy5lbGVtZW50Xy5zZXRBdHRyaWJ1dGUoREFUQV9NQU5BR0VSX0lEX05BTUUsIG1hbmFnZXJJZCk7XG4gICAgbWFuYWdlcnNbbWFuYWdlcklkXSA9IHRoaXM7XG4gICAgdGhpcy5pbml0aWF0ZVJlZnJlc2hDeWNsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgY29uZmlndXJlZCB0byB0aGUgZ2l2ZW4gdGhyZXNob2xkLCBjcmVhdGluZ1xuICAgKiBvbmUgaWYgb25lIGRvZXMgbm90IHlldCBleGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRocmVzaG9sZFxuICAgKiBAcmV0dXJuIHsoIUludGVyc2VjdGlvbk9ic2VydmVyfCFSZWZyZXNoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJXcmFwcGVyKX1cbiAgICovXG4gIGdldEludGVyc2VjdGlvbk9ic2VydmVyV2l0aFRocmVzaG9sZF8odGhyZXNob2xkKSB7XG5cbiAgICBjb25zdCB0aHJlc2hvbGRTdHJpbmcgPSBTdHJpbmcodGhyZXNob2xkKTtcbiAgICByZXR1cm4gb2JzZXJ2ZXJzW3RocmVzaG9sZFN0cmluZ10gfHxcbiAgICAgICAgKG9ic2VydmVyc1t0aHJlc2hvbGRTdHJpbmddID0gJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB0aGlzLndpbl9cbiAgICAgICAgICA/IG5ldyB0aGlzLndpbl9bJ0ludGVyc2VjdGlvbk9ic2VydmVyJ10odGhpcy5pb0NhbGxiYWNrXywge3RocmVzaG9sZH0pXG4gICAgICAgICAgOiBuZXcgUmVmcmVzaEludGVyc2VjdGlvbk9ic2VydmVyV3JhcHBlcihcbiAgICAgICAgICAgICAgdGhpcy5pb0NhbGxiYWNrXywgdGhpcy5hNGFfLCB7dGhyZXNob2xkfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBkaXJlY3RseSBieSB0aGVcbiAgICogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaW1wbGVtZW50YXRpb24uIEl0IHdpbGwgaW1wbGVtZW50IHRoZSBjb3JlIGxvZ2ljIG9mXG4gICAqIHRoZSByZWZyZXNoIGxpZmVjeWNsZSwgaW5jbHVkaW5nIHRoZSB0cmFuc2l0aW9ucyBvZiB0aGUgREZBLlxuICAgKlxuICAgKiBAcGFyYW0geyFBcnJheTwhSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT59IGVudHJpZXNcbiAgICovXG4gIGlvQ2FsbGJhY2tfKGVudHJpZXMpIHtcbiAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgY29uc3QgcmVmcmVzaE1hbmFnZXJJZCA9IGVudHJ5LnRhcmdldC5nZXRBdHRyaWJ1dGUoREFUQV9NQU5BR0VSX0lEX05BTUUpO1xuICAgICAgZGV2KCkuYXNzZXJ0KHJlZnJlc2hNYW5hZ2VySWQpO1xuICAgICAgY29uc3QgcmVmcmVzaE1hbmFnZXIgPSBtYW5hZ2Vyc1tyZWZyZXNoTWFuYWdlcklkXTtcbiAgICAgIGlmIChlbnRyeS50YXJnZXQgIT0gcmVmcmVzaE1hbmFnZXIuZWxlbWVudF8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChyZWZyZXNoTWFuYWdlci5zdGF0ZV8pIHtcbiAgICAgICAgY2FzZSBSZWZyZXNoTGlmZWN5Y2xlU3RhdGUuSU5JVElBTDpcbiAgICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgZWxlbWVudCBxdWFsaWZpZXMgYXMgXCJiZWluZyBvbiBzY3JlZW5cIiwgaS5lLixcbiAgICAgICAgICAvLyB0aGF0IGF0IGxlYXN0IGEgbWluaW11bSB0aHJlc2hvbGQgb2YgcGl4ZWxzIGlzIG9uIHNjcmVlbi4gSWYgc28sXG4gICAgICAgICAgLy8gYmVnaW4gYSB0aW1lciwgc2V0IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIG1pbmltdW0gdGltZSBvbiBzY3JlZW5cbiAgICAgICAgICAvLyB0aHJlc2hvbGQuIElmIHRoaXMgdGltZXIgcnVucyBvdXQgd2l0aG91dCBpbnRlcnJ1cHRpb24sIHRoZW4gYWxsXG4gICAgICAgICAgLy8gdmlld2FiaWxpdHkgY29uZGl0aW9ucyBoYXZlIGJlZW4gbWV0LCBhbmQgd2UgY2FuIGJlZ2luIHRoZSByZWZyZXNoXG4gICAgICAgICAgLy8gdGltZXIuXG4gICAgICAgICAgaWYgKGVudHJ5LmludGVyc2VjdGlvblJhdGlvID49XG4gICAgICAgICAgICAgIHJlZnJlc2hNYW5hZ2VyLmNvbmZpZ18udmlzaWJsZVBlcmNlbnRhZ2VNaW4pIHtcbiAgICAgICAgICAgIHJlZnJlc2hNYW5hZ2VyLnN0YXRlXyA9IFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5WSUVXX1BFTkRJTkc7XG4gICAgICAgICAgICByZWZyZXNoTWFuYWdlci52aXNpYmlsaXR5VGltZW91dElkXyA9IHJlZnJlc2hNYW5hZ2VyLnRpbWVyXy5kZWxheShcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZWZyZXNoTWFuYWdlci5zdGF0ZV8gPSBSZWZyZXNoTGlmZWN5Y2xlU3RhdGUuUkVGUkVTSF9QRU5ESU5HO1xuICAgICAgICAgICAgICAgICAgcmVmcmVzaE1hbmFnZXIuc3RhcnRSZWZyZXNoVGltZXJfKCk7XG4gICAgICAgICAgICAgICAgfSwgcmVmcmVzaE1hbmFnZXIuY29uZmlnXy5jb250aW51b3VzVGltZU1pbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5WSUVXX1BFTkRJTkc6XG4gICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgZ29lcyBvZmYgc2NyZWVuIGJlZm9yZSB0aGUgbWluaW11bSBvbiBzY3JlZW4gdGltZVxuICAgICAgICAgIC8vIGR1cmF0aW9uIGVsYXBzZXMsIHBsYWNlIGl0IGJhY2sgaW50byBJTklUSUFMIHN0YXRlLlxuICAgICAgICAgIGlmIChlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA8XG4gICAgICAgICAgICAgIHJlZnJlc2hNYW5hZ2VyLmNvbmZpZ18udmlzaWJsZVBlcmNlbnRhZ2VNaW4pIHtcbiAgICAgICAgICAgIHJlZnJlc2hNYW5hZ2VyLnRpbWVyXy5jYW5jZWwocmVmcmVzaE1hbmFnZXIudmlzaWJpbGl0eVRpbWVvdXRJZF8pO1xuICAgICAgICAgICAgcmVmcmVzaE1hbmFnZXIudmlzaWJpbGl0eVRpbWVvdXRJZF8gPSBudWxsO1xuICAgICAgICAgICAgcmVmcmVzaE1hbmFnZXIuc3RhdGVfID0gUmVmcmVzaExpZmVjeWNsZVN0YXRlLklOSVRJQUw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5SRUZSRVNIX1BFTkRJTkc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGVzIHRoZSByZWZyZXNoIGN5Y2xlIGJ5IGluaXRpYXRpbmcgdGhlIHZpc2liaWxpdHkgbWFuYWdlciBvbiB0aGVcbiAgICogZWxlbWVudC5cbiAgICovXG4gIGluaXRpYXRlUmVmcmVzaEN5Y2xlKCkge1xuICAgIHN3aXRjaCAodGhpcy5zdGF0ZV8pIHtcbiAgICAgIGNhc2UgUmVmcmVzaExpZmVjeWNsZVN0YXRlLklOSVRJQUw6XG4gICAgICAgIHRoaXMuZ2V0SW50ZXJzZWN0aW9uT2JzZXJ2ZXJXaXRoVGhyZXNob2xkXyhcbiAgICAgICAgICAgIHRoaXMuY29uZmlnXy52aXNpYmxlUGVyY2VudGFnZU1pbikub2JzZXJ2ZSh0aGlzLmVsZW1lbnRfKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5SRUZSRVNIX1BFTkRJTkc6XG4gICAgICBjYXNlIFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5WSUVXX1BFTkRJTkc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcblxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIHJlZnJlc2ggdGltZXIgZm9yIHRoZSBnaXZlbiBtb25pdG9yZWQgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRydWUgd2hlbiB0aGVcbiAgICogICAgcmVmcmVzaCB0aW1lciBlbGFwc2VzIHN1Y2Nlc3NmdWxseS5cbiAgICovXG4gIHN0YXJ0UmVmcmVzaFRpbWVyXygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLnJlZnJlc2hUaW1lb3V0SWRfID0gdGhpcy50aW1lcl8uZGVsYXkoKCkgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlXyA9IFJlZnJlc2hMaWZlY3ljbGVTdGF0ZS5JTklUSUFMO1xuICAgICAgICB0aGlzLnVub2JzZXJ2ZSgpO1xuICAgICAgICB0aGlzLmE0YV8ucmVmcmVzaCgoKSA9PiB0aGlzLmluaXRpYXRlUmVmcmVzaEN5Y2xlKCkpO1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfSwgLyoqIEB0eXBlIHtudW1iZXJ9ICovICh0aGlzLnJlZnJlc2hJbnRlcnZhbF8pKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBjb25maWcgdG8gYXBwcm9wcmlhdGUgdW5pdHMsIG1vZGlmeWluZyB0aGUgYXJndW1lbnQgaW4gcGxhY2UuIFRoaXNcbiAgICogYWxzbyBlbnN1cmVzIHRoYXQgdmlzaWJsZVBlcmNlbnRhZ2VNaW4gaXMgaW4gdGhlIHJhbmdlIG9mIFswLCAxMDBdLlxuICAgKiBAcGFyYW0geyFSZWZyZXNoQ29uZmlnfSBjb25maWdcbiAgICogQHJldHVybiB7IVJlZnJlc2hDb25maWd9XG4gICAqL1xuICBjb252ZXJ0QW5kU2FuaXRpemVDb25maWd1cmF0aW9uXyhjb25maWcpIHtcbiAgICBkZXYoKS5hc3NlcnQoY29uZmlnWyd2aXNpYmxlUGVyY2VudGFnZU1pbiddID49IDAgJiZcbiAgICAgICAgY29uZmlnWyd2aXNpYmxlUGVyY2VudGFnZU1pbiddIDw9IDEwMCxcbiAgICAndmlzaWJsZVBlcmNlbnRhZ2VNaW4gZm9yIHJlZnJlc2ggbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAsIDEwMF0nKTtcbiAgICAvLyBDb252ZXJ0IHNlY29uZHMgdG8gbWlsbGlzZWNvbmRzLlxuICAgIGNvbmZpZ1snY29udGludW91c1RpbWVNaW4nXSAqPSAxMDAwO1xuICAgIGNvbmZpZ1sndmlzaWJsZVBlcmNlbnRhZ2VNaW4nXSAvPSAxMDA7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgaW50ZXJzZWN0aW9uIG9ic2VydmVyIGZyb20gb2JzZXJ2aW5nIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgdW5vYnNlcnZlKCkge1xuICAgIHRoaXMuZ2V0SW50ZXJzZWN0aW9uT2JzZXJ2ZXJXaXRoVGhyZXNob2xkXyhcbiAgICAgICAgdGhpcy5jb25maWdfLnZpc2libGVQZXJjZW50YWdlTWluKS51bm9ic2VydmUodGhpcy5lbGVtZW50Xyk7XG4gIH1cbn1cblxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcyc7XG5pbXBvcnQge2Jhc2U2NERlY29kZVRvQnl0ZXN9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9iYXNlNjQnO1xuaW1wb3J0IHtkZXYsIHVzZXJ9IGZyb20gJy4uLy4uLy4uL3NyYy9sb2cnO1xuaW1wb3J0IHtpc0FycmF5fSBmcm9tICcuLi8uLi8uLi9zcmMvdHlwZXMnO1xuXG4vKiogQHZpc2libGVGb3JUZXN0aW5nICovXG5leHBvcnQgY29uc3QgQU1QX1NJR05BVFVSRV9IRUFERVIgPSAnQU1QLUZhc3QtRmV0Y2gtU2lnbmF0dXJlJztcblxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIGFuIGF0dGVtcHQgdG8gdmVyaWZ5IGEgRmFzdCBGZXRjaCBzaWduYXR1cmUuIFRoZSBkaWZmZXJlbnRcbiAqIGVycm9yIHN0YXR1c2VzIGFyZSB1c2VkIGZvciByZXBvcnRpbmcgZXJyb3JzIHRvIHRoZSBhZCBuZXR3b3JrLlxuICpcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBWZXJpZmljYXRpb25TdGF0dXMgPSB7XG5cbiAgLyoqIFRoZSBhZCB3YXMgc3VjY2Vzc2Z1bGx5IHZlcmlmaWVkIGFzIEFNUC4gKi9cbiAgT0s6IDAsXG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhdGlvbiBmYWlsZWQgYmVjYXVzZSBvZiBhIGZhY3RvciBiZXlvbmQgdGhlIGFkIG5ldHdvcmsncyBjb250cm9sLFxuICAgKiBzdWNoIGFzIGEgbmV0d29yayBjb25uZWN0aXZpdHkgZmFpbHVyZSwgdW5hdmFpbGFiaWxpdHkgb2YgV2ViIENyeXB0b2dyYXBoeVxuICAgKiBpbiB0aGUgY3VycmVudCBicm93c2luZyBjb250ZXh0LCBvciBhIG1pc2JlaGF2aW5nIHNpZ25pbmcgc2VydmljZS5cbiAgICovXG4gIFVOVkVSSUZJRUQ6IDEsXG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUga2V5cGFpciBJRCBwcm92aWRlZCBieSB0aGUgYWQgbmV0d29yayBkaWRcbiAgICogbm90IGNvcnJlc3BvbmQgdG8gYW55IHB1YmxpYyBrZXkgb2ZmZXJlZCBieSB0aGUgc2lnbmluZyBzZXJ2aWNlLlxuICAgKi9cbiAgRVJST1JfS0VZX05PVF9GT1VORDogMixcblxuICAvKipcbiAgICogVmVyaWZpY2F0aW9uIGZhaWxlZCBiZWNhdXNlIHRoZSBzaWduYXR1cmUgcHJvdmlkZWQgYnkgdGhlIGFkIG5ldHdvcmsgd2FzXG4gICAqIG5vdCB0aGUgY29ycmVjdCBjcnlwdG9ncmFwaGljIHNpZ25hdHVyZSBmb3IgdGhlIGdpdmVuIGNyZWF0aXZlIGRhdGEgYW5kXG4gICAqIHB1YmxpYyBrZXkuXG4gICAqL1xuICBFUlJPUl9TSUdOQVRVUkVfTUlTTUFUQ0g6IDMsXG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUgcGFnZSBkb2VzIG5vdCBoYXZlIHdlYiBjcnlwdG8gYXZhaWxhYmxlLFxuICAgKiBpLmUuIGlzIG5vdCBTU0wuXG4gICAqL1xuICBDUllQVE9fVU5BVkFJTEFCTEU6IDQsXG5cbn07XG5cbi8qKlxuICogQSB3aW5kb3ctbGV2ZWwgb2JqZWN0IHRoYXQgZW5jYXBzdWxhdGVzIHRoZSBsb2dpYyBmb3Igb2J0YWluaW5nIHB1YmxpYyBrZXlzXG4gKiBmcm9tIEZhc3QgRmV0Y2ggc2lnbmluZyBzZXJ2aWNlcyBhbmQgY3J5cHRvZ3JhcGhpY2FsbHkgdmVyaWZ5aW5nIHNpZ25hdHVyZXNcbiAqIG9mIEFNUCBjcmVhdGl2ZXMuXG4gKlxuICogVW5saWtlIGFuIEFNUCBzZXJ2aWNlLCBhIHNpZ25hdHVyZSB2ZXJpZmllciBpcyAqKnN0YXRlZnVsKiouIEl0IG1haW50YWlucyBhXG4gKiBjYWNoZSBvZiBhbGwgcHVibGljIGtleXMgdGhhdCBpdCBoYXMgcHJldmlvdXNseSBkb3dubG9hZGVkIGFuZCBpbXBvcnRlZCwgYW5kXG4gKiBhbHNvIGtlZXBzIHRyYWNrIG9mIHdoaWNoIGtleXMgYW5kIHNpZ25pbmcgc2VydmljZXMgaGF2ZSBhbHJlYWR5IGhhZFxuICogdW5zdWNjZXNzZnVsIGRvd25sb2FkIG9yIGltcG9ydCBhdHRlbXB0cyBhbmQgc2hvdWxkIG5vdCBiZSBhdHRlbXB0ZWQgYWdhaW4uXG4gKlxuICogVGhpcyBlbnRpcmUgY2xhc3MgaXMgY3VycmVudGx5IGRlYWQgY29kZSBpbiBwcm9kdWN0aW9uLCBidXQgd2lsbCBzb29uIGJlXG4gKiBpbnRyb2R1Y2VkIGFzIGFuIGV4cGVyaW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaWduYXR1cmVWZXJpZmllciB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IHNpZ25pbmdTZXJ2ZXJVUkxzIGEgbWFwIGZyb20gdGhlIG5hbWUgb2ZcbiAgICogICAgZWFjaCB0cnVzdGVkIHNpZ25pbmcgc2VydmljZSB0byB0aGUgVVJMIG9mIGl0cyBwdWJsaWMga2V5IGVuZHBvaW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih3aW4sIHNpZ25pbmdTZXJ2ZXJVUkxzKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbiAgICB0aGlzLnNpZ25pbmdTZXJ2ZXJVUkxzXyA9IHNpZ25pbmdTZXJ2ZXJVUkxzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhY2hlIHdoZXJlIGFsbCB0aGUgcHVibGljIGtleXMgYXJlIHN0b3JlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgZmllbGQgaGFzIGEgbG90IG9mIGludGVybmFsIHN0cnVjdHVyZSBhbmQgaXRzIHR5cGUncyBhIGxpdHRsZSBoYWlyeSxcbiAgICAgKiBzbyBoZXJlJ3MgYSBydW5kb3duIG9mIHdoYXQgZWFjaCBwaWVjZSBtZWFuczpcbiAgICAgKiAgLSBJZiBXZWIgQ3J5cHRvZ3JhcGh5IGlzbid0IGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBicm93c2luZyBjb250ZXh0LFxuICAgICAqICAgIHRoZW4gdGhlIGVudGlyZSBmaWVsZCBpcyBudWxsLiBTaW5jZSB0aGUga2V5cyBhcmUgb2Ygbm8gdXNlLCB3ZSBkb24ndFxuICAgICAqICAgIGZldGNoIHRoZW0uXG4gICAgICogIC0gT3RoZXJ3aXNlLCBpdCdzIGEgbWFwLWxpa2UgYE9iamVjdGAgZnJvbSBzaWduaW5nIHNlcnZpY2UgbmFtZXMgKGFzXG4gICAgICogICAgZGVmaW5lZCBpbiB0aGUgRmFzdCBGZXRjaCBjb25maWcgcmVnaXN0cnkpIHRvIFwic2lnbmVyXCIgb2JqZWN0cy5cbiAgICAgKiAgLSBUaGUgYHByb21pc2VgIHByb3BlcnR5IG9mIGVhY2ggc2lnbmVyIHJlc29sdmVzIHRvIGEgYm9vbGVhbiBpbmRpY2F0aW5nXG4gICAgICogICAgd2hldGhlciB0aGUgbW9zdCByZWNlbnQgYXR0ZW1wdCB0byBmZXRjaCBhbmQgaW1wb3J0IHRoYXQgc2lnbmluZ1xuICAgICAqICAgIHNlcnZpY2UncyBwdWJsaWMga2V5cyB3YXMgc3VjY2Vzc2Z1bC4gSWYgdGhlIHByb21pc2UgaXMgc3RpbGwgcGVuZGluZyxcbiAgICAgKiAgICB0aGVuIGFuIGF0dGVtcHQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLiBUaGlzIHByb3BlcnR5IGlzIG11dGFibGU7XG4gICAgICogICAgaXRzIHZhbHVlIGlzIHJlcGxhY2VkIHdpdGggYSBuZXcgcHJvbWlzZSB3aGVuIGEgbmV3IGF0dGVtcHQgaXMgbWFkZS5cbiAgICAgKiAgICBJbnZhcmlhbnQ6IG9ubHkgb25lIGF0dGVtcHQgbWF5IGJlIGluIHByb2dyZXNzIGF0IGEgdGltZSwgc28gdGhpc1xuICAgICAqICAgIHByb3BlcnR5IG1heSBub3QgYmUgbXV0YXRlZCB3aGlsZSB0aGUgY3VycmVudCBwcm9taXNlIGlzIHBlbmRpbmcuXG4gICAgICogIC0gVGhlIGBrZXlzYCBwcm9wZXJ0eSBvZiBlYWNoIHNpZ25lciBpcyBhIG1hcC1saWtlIGBPYmplY3RgIGZyb20ga2V5cGFpclxuICAgICAqICAgIElEcyB0byBudWxsYWJsZSBrZXkgcHJvbWlzZXMuIChUaGlzIG1lYW5zIHRoYXQgYSBwcm9wZXJ0eSBhY2Nlc3Mgb25cbiAgICAgKiAgICB0aGlzIG9iamVjdCBtYXkgZXZhbHVhdGUgdG8gYHVuZGVmaW5lZGAsIGBudWxsYCwgb3IgYSBgUHJvbWlzZWBcbiAgICAgKiAgICBvYmplY3QuKSBUaGUgYGtleXNgIG9iamVjdCBpcyBpbnRlcm5hbGx5IG11dGFibGU7IG5ldyBrZXlzIGFyZSBhZGRlZFxuICAgICAqICAgIHRvIGl0IGFzIHRoZXkgYXJlIGZldGNoZWQuIEludmFyaWFudDogdGhlIGBrZXlzYCBvYmplY3QgbWF5IGJlIG11dGF0ZWRcbiAgICAgKiAgICBvbmx5IHdoaWxlIHRoZSBjb3JyZXNwb25kaW5nIGBwcm9taXNlYCBvYmplY3QgaXMgcGVuZGluZzsgdGhpcyBlbnN1cmVzXG4gICAgICogICAgdGhhdCBjYWxsYmFja3MgY2hhaW5lZCB0byBgcHJvbWlzZWAgbWF5IG9ic2VydmUgYGtleXNgIHdpdGhvdXQgYmVpbmdcbiAgICAgKiAgICBzdWJqZWN0IHRvIHJhY2UgY29uZGl0aW9ucy5cbiAgICAgKiAgLSBJZiBhIGtleSBwcm9taXNlIChpLmUuLCB0aGUgdmFsdWUgb2YgYSBwcm9wZXJ0eSBhY2Nlc3Mgb24gdGhlIGBrZXlzYFxuICAgICAqICAgIG9iamVjdCkgaXMgYWJzZW50IChpLmUuLCBgdW5kZWZpbmVkYCksIHRoZW4gbm8ga2V5IHdpdGggdGhhdCBrZXlwYWlyXG4gICAgICogICAgSUQgaXMgcHJlc2VudCAoYnV0IHRoaXMgY291bGQgYmUgYmVjYXVzZSBvZiBhIHN0YWxlIGNhY2hlKS4gSWYgaXQnc1xuICAgICAqICAgIG51bGwsIHRoZW4gbm8ga2V5IHdpdGggdGhhdCBrZXlwYWlyIElEIGNvdWxkIGJlIGZvdW5kIGV2ZW4gYWZ0ZXJcbiAgICAgKiAgICBjYWNoZWJ1c3RpbmcuIElmIGl0J3MgYSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyB0byBgbnVsbGAsIHRoZW4ga2V5XG4gICAgICogICAgZGF0YSBmb3IgdGhhdCBrZXlwYWlyIElEIHdhcyBmb3VuZCBidXQgY291bGQgbm90IGJlIGltcG9ydGVkXG4gICAgICogICAgc3VjY2Vzc2Z1bGx5OyB0aGlzIG1vc3QgbGlrZWx5IGluZGljYXRlcyBzaWduaW5nIHNlcnZpY2UgbWlzYmVoYXZpb3IuXG4gICAgICogICAgVGhlIHN1Y2Nlc3MgY2FzZSBpcyBhIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHRvIGEgYENyeXB0b0tleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZSBAY29uc3Qgez9PYmplY3Q8c3RyaW5nLCB7cHJvbWlzZTogIVByb21pc2U8Ym9vbGVhbj4sIGtleXM6ICFPYmplY3Q8c3RyaW5nLCA/UHJvbWlzZTw/d2ViQ3J5cHRvLkNyeXB0b0tleT4+fT59XG4gICAgICovXG4gICAgdGhpcy5zaWduZXJzXyA9IFNlcnZpY2VzLmNyeXB0b0Zvcih3aW4pLmlzUGtjc0F2YWlsYWJsZSgpID8ge30gOiBudWxsO1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5vdGlvbiBvZiBjdXJyZW50IHRpbWUsIGluIG1zLiAgVGhlIHZhbHVlIGlzIG5vdCBuZWNlc3NhcmlseVxuICAgICAqIGFic29sdXRlLCBzbyBzaG91bGQgYmUgdXNlZCBvbmx5IGZvciBjb21wdXRpbmcgZGVsdGFzLiAgV2hlbiBhdmFpbGFibGUsXG4gICAgICogdGhlIHBlcmZvcm1hbmNlIHN5c3RlbSB3aWxsIGJlIHVzZWQ7IG90aGVyd2lzZSBEYXRlLm5vdygpIHdpbGwgYmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlIEBjb25zdCB7ZnVuY3Rpb24oKTogbnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZ2V0Tm93XyA9ICh3aW4ucGVyZm9ybWFuY2UgJiYgd2luLnBlcmZvcm1hbmNlLm5vdykgP1xuICAgICAgd2luLnBlcmZvcm1hbmNlLm5vdy5iaW5kKHdpbi5wZXJmb3JtYW5jZSkgOiBEYXRlLm5vdztcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuZCBpbXBvcnRzIHRoZSBwdWJsaWMga2V5c2V0IGZvciB0aGUgbmFtZWQgc2lnbmluZyBzZXJ2aWNlLFxuICAgKiB3aXRob3V0IGFueSBjYWNoZWJ1c3RpbmcuIEhvcGVmdWxseSwgdGhpcyB3aWxsIGhpdCBjYWNoZSBpbiBtYW55IGNhc2VzXG4gICAqIGFuZCBub3QgbWFrZSBhbiBhY3R1YWwgbmV0d29yayByb3VuZC10cmlwLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkXG4gICAqIGFzIGVhcmx5IGFzIHBvc3NpYmxlLCBvbmNlIGl0J3Mga25vd24gd2hpY2ggc2lnbmluZyBzZXJ2aWNlIGlzIGxpa2VseSB0b1xuICAgKiBiZSB1c2VkLCBzbyB0aGF0IHRoZSBuZXR3b3JrIHJlcXVlc3QgYW5kIGtleSBpbXBvcnRzIGNhbiBleGVjdXRlIGluXG4gICAqIHBhcmFsbGVsIHdpdGggb3RoZXIgb3BlcmF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpZ25pbmdTZXJ2aWNlTmFtZVxuICAgKi9cbiAgbG9hZEtleXNldChzaWduaW5nU2VydmljZU5hbWUpIHtcbiAgICBpZiAodGhpcy5zaWduZXJzXyAmJiAhdGhpcy5zaWduZXJzX1tzaWduaW5nU2VydmljZU5hbWVdKSB7XG4gICAgICBjb25zdCBrZXlzID0ge307XG4gICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5mZXRjaEFuZEFkZEtleXNfKGtleXMsIHNpZ25pbmdTZXJ2aWNlTmFtZSwgbnVsbCk7XG4gICAgICB0aGlzLnNpZ25lcnNfW3NpZ25pbmdTZXJ2aWNlTmFtZV0gPSB7cHJvbWlzZSwga2V5c307XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGEgY3J5cHRvZ3JhcGhpYyBzaWduYXR1cmUgZnJvbSBgaGVhZGVyc2AgYW5kIGF0dGVtcHRzIHRvIHZlcmlmeVxuICAgKiB0aGF0IGl0J3MgdGhlIGNvcnJlY3QgY3J5cHRvZ3JhcGhpYyBzaWduYXR1cmUgZm9yIGBjcmVhdGl2ZWAuXG4gICAqXG4gICAqIEFzIGEgcHJlY29uZGl0aW9uLCBgbG9hZEtleXNldChzaWduaW5nU2VydmljZU5hbWUpYCBtdXN0IGhhdmUgYWxyZWFkeSBiZWVuXG4gICAqIGNhbGxlZC5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXlCdWZmZXJ9IGNyZWF0aXZlXG4gICAqIEBwYXJhbSB7IUhlYWRlcnN9IGhlYWRlcnNcbiAgICogQHJldHVybiB7IVByb21pc2U8IVZlcmlmaWNhdGlvblN0YXR1cz59XG4gICAqL1xuICB2ZXJpZnkoY3JlYXRpdmUsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBzaWduYXR1cmVGb3JtYXQgPVxuICAgICAgICAvXihbQS1aYS16MC05Ll8tXSspOihbQS1aYS16MC05Ll8tXSspOihbQS1aYS16MC05Ky9dezM0MX1bQVFnd109PSkkLztcbiAgICBpZiAoIWhlYWRlcnMuaGFzKEFNUF9TSUdOQVRVUkVfSEVBREVSKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShWZXJpZmljYXRpb25TdGF0dXMuVU5WRVJJRklFRCk7XG4gICAgfVxuICAgIGNvbnN0IGhlYWRlclZhbHVlID0gaGVhZGVycy5nZXQoQU1QX1NJR05BVFVSRV9IRUFERVIpO1xuICAgIGNvbnN0IG1hdGNoID0gc2lnbmF0dXJlRm9ybWF0LmV4ZWMoaGVhZGVyVmFsdWUpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRPRE8oQHRheW1vbmJlYWwsICM5Mjc0KTogcmVwbGFjZSB0aGlzIHdpdGggcmVhbCBlcnJvciByZXBvcnRpbmdcbiAgICAgIHVzZXIoKS5lcnJvcihcbiAgICAgICAgICAnQU1QLUE0QScsIGBJbnZhbGlkIHNpZ25hdHVyZSBoZWFkZXI6ICR7aGVhZGVyVmFsdWUuc3BsaXQoJzonKVswXX1gKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoVmVyaWZpY2F0aW9uU3RhdHVzLkVSUk9SX1NJR05BVFVSRV9NSVNNQVRDSCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZlcmlmeUNyZWF0aXZlQW5kU2lnbmF0dXJlKFxuICAgICAgICBtYXRjaFsxXSwgbWF0Y2hbMl0sIGJhc2U2NERlY29kZVRvQnl0ZXMobWF0Y2hbM10pLCBjcmVhdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpZXMgdGhhdCBgc2lnbmF0dXJlYCBpcyB0aGUgY29ycmVjdCBjcnlwdG9ncmFwaGljIHNpZ25hdHVyZSBmb3JcbiAgICogYGNyZWF0aXZlYCwgd2l0aCB0aGUgcHVibGljIGtleSBmcm9tIHRoZSBuYW1lZCBzaWduaW5nIHNlcnZpY2UgaWRlbnRpZmllZFxuICAgKiBieSBga2V5cGFpcklkYC5cbiAgICpcbiAgICogQXMgYSBwcmVjb25kaXRpb24sIGBsb2FkS2V5c2V0KHNpZ25pbmdTZXJ2aWNlTmFtZSlgIG11c3QgaGF2ZSBhbHJlYWR5IGJlZW5cbiAgICogY2FsbGVkLlxuICAgKlxuICAgKiBJZiB0aGUga2V5c2V0IGZvciB0aGUgbmFtZWQgc2lnbmluZyBzZXJ2aWNlIHdhcyBpbXBvcnRlZCBzdWNjZXNzZnVsbHkgYnV0XG4gICAqIGRpZCBub3QgaW5jbHVkZSBhIGtleSBmb3IgYGtleXBhaXJJZGAsIHRoaXMgbWF5IGJlIHRoZSByZXN1bHQgb2YgYSBzdGFsZVxuICAgKiBicm93c2VyIGNhY2hlLiBUbyB3b3JrIGFyb3VuZCB0aGlzLCBga2V5cGFpcklkYCBpcyBhZGRlZCB0byB0aGUgcHVibGljIGtleVxuICAgKiBlbmRwb2ludCBVUkwgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgYW5kIHRoZSBrZXlzZXQgaXMgcmUtZmV0Y2hlZC4gT3RoZXIga2luZHNcbiAgICogb2YgZmFpbHVyZXMsIGluY2x1ZGluZyBuZXR3b3JrIGNvbm5lY3Rpdml0eSBmYWlsdXJlcywgYXJlIG5vdCByZXRyaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2lnbmluZ1NlcnZpY2VOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlwYWlySWRcbiAgICogQHBhcmFtIHshVWludDhBcnJheX0gc2lnbmF0dXJlXG4gICAqIEBwYXJhbSB7IUFycmF5QnVmZmVyfSBjcmVhdGl2ZVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhVmVyaWZpY2F0aW9uU3RhdHVzPn1cbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICB2ZXJpZnlDcmVhdGl2ZUFuZFNpZ25hdHVyZShcbiAgICBzaWduaW5nU2VydmljZU5hbWUsIGtleXBhaXJJZCwgc2lnbmF0dXJlLCBjcmVhdGl2ZSkge1xuICAgIGlmICghdGhpcy5zaWduZXJzXykge1xuICAgICAgLy8gV2ViIENyeXB0b2dyYXBoeSBpc24ndCBhdmFpbGFibGUuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFZlcmlmaWNhdGlvblN0YXR1cy5DUllQVE9fVU5BVkFJTEFCTEUpO1xuICAgIH1cbiAgICBjb25zdCBzaWduZXIgPSB0aGlzLnNpZ25lcnNfW3NpZ25pbmdTZXJ2aWNlTmFtZV07XG4gICAgZGV2KCkuYXNzZXJ0KFxuICAgICAgICBzaWduZXIsICdLZXlzZXQgZm9yIHNlcnZpY2UgJXMgbm90IGxvYWRlZCBiZWZvcmUgdmVyaWZpY2F0aW9uJyxcbiAgICAgICAgc2lnbmluZ1NlcnZpY2VOYW1lKTtcbiAgICByZXR1cm4gc2lnbmVyLnByb21pc2UudGhlbihzdWNjZXNzID0+IHtcbiAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAvLyBUaGUgcHVibGljIGtleXNldCBjb3VsZG4ndCBiZSBmZXRjaGVkIGFuZCBpbXBvcnRlZC4gUHJvYmFibHkgYVxuICAgICAgICAvLyBuZXR3b3JrIGNvbm5lY3Rpdml0eSBmYWlsdXJlLlxuICAgICAgICByZXR1cm4gVmVyaWZpY2F0aW9uU3RhdHVzLlVOVkVSSUZJRUQ7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXlQcm9taXNlID0gc2lnbmVyLmtleXNba2V5cGFpcklkXTtcbiAgICAgIGlmIChrZXlQcm9taXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSB0aGlzIGtleSwgYnV0IG1heWJlIHRoZSBjYWNoZSBpcyBzdGFsZTsgdHJ5XG4gICAgICAgIC8vIGNhY2hlYnVzdGluZy5cbiAgICAgICAgc2lnbmVyLnByb21pc2UgPVxuICAgICAgICAgICAgdGhpcy5mZXRjaEFuZEFkZEtleXNfKHNpZ25lci5rZXlzLCBzaWduaW5nU2VydmljZU5hbWUsIGtleXBhaXJJZClcbiAgICAgICAgICAgICAgICAudGhlbihzdWNjZXNzID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChzaWduZXIua2V5c1trZXlwYWlySWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc3RpbGwgZG9uJ3QgaGF2ZSB0aGlzIGtleTsgbWFrZSBzdXJlIHdlIG5ldmVyIHRyeVxuICAgICAgICAgICAgICAgICAgICAvLyBhZ2Fpbi5cbiAgICAgICAgICAgICAgICAgICAgc2lnbmVyLmtleXNba2V5cGFpcklkXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhpcyBcInJlY3Vyc2l2ZVwiIGNhbGwgY2FuIHJlY3Vyc2UgYXQgbW9zdCBvbmNlLlxuICAgICAgICByZXR1cm4gdGhpcy52ZXJpZnlDcmVhdGl2ZUFuZFNpZ25hdHVyZShcbiAgICAgICAgICAgIHNpZ25pbmdTZXJ2aWNlTmFtZSwga2V5cGFpcklkLCBzaWduYXR1cmUsIGNyZWF0aXZlKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5UHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBkb24ndCBoYXZlIHRoaXMga2V5IGFuZCB3ZSBhbHJlYWR5IHRyaWVkIGNhY2hlYnVzdGluZy5cbiAgICAgICAgcmV0dXJuIFZlcmlmaWNhdGlvblN0YXR1cy5FUlJPUl9LRVlfTk9UX0ZPVU5EO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtleVByb21pc2UudGhlbihrZXkgPT4ge1xuICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAvLyBUaGlzIHBhcnRpY3VsYXIgcHVibGljIGtleSBjb3VsZG4ndCBiZSBpbXBvcnRlZC4gUHJvYmFibHkgdGhlXG4gICAgICAgICAgICAvLyBzaWduaW5nIHNlcnZpY2UncyBmYXVsdC5cbiAgICAgICAgICAgIHJldHVybiBWZXJpZmljYXRpb25TdGF0dXMuVU5WRVJJRklFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY3J5cHRvID0gU2VydmljZXMuY3J5cHRvRm9yKHRoaXMud2luXyk7XG4gICAgICAgICAgcmV0dXJuIGNyeXB0by52ZXJpZnlQa2NzKGtleSwgc2lnbmF0dXJlLCBjcmVhdGl2ZSkudGhlbihcbiAgICAgICAgICAgICAgcmVzdWx0ID0+IHJlc3VsdCA/IFZlcmlmaWNhdGlvblN0YXR1cy5PSyA6XG4gICAgICAgICAgICAgICAgVmVyaWZpY2F0aW9uU3RhdHVzLkVSUk9SX1NJR05BVFVSRV9NSVNNQVRDSCxcbiAgICAgICAgICAgICAgZXJyID0+IHtcbiAgICAgICAgICAgICAgICAvLyBXZWIgQ3J5cHRvZ3JhcGh5IHJlamVjdGVkIHRoZSB2ZXJpZmljYXRpb24gYXR0ZW1wdC4gVGhpc1xuICAgICAgICAgICAgICAgIC8vIGhvcGVmdWxseSB3b24ndCBoYXBwZW4gaW4gdGhlIHdpbGQsIGJ1dCBicm93c2VycyBjYW4gYmUgd2VpcmRcbiAgICAgICAgICAgICAgICAvLyBhYm91dCB0aGlzLCBzbyB3ZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhlIHBvc3NpYmlsaXR5LlxuICAgICAgICAgICAgICAgIC8vIFBob25lIGhvbWUgdG8gdGhlIEFNUCBQcm9qZWN0IHNvIHRoYXQgd2UgY2FuIHVuZGVyc3RhbmQgd2h5XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBvY2N1cnJlZC5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyICYmIGVyci5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIGRldigpLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnQU1QLUE0QScsIGBGYWlsZWQgdG8gdmVyaWZ5IHNpZ25hdHVyZTogJHttZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBWZXJpZmljYXRpb25TdGF0dXMuVU5WRVJJRklFRDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyeSB0byBkb3dubG9hZCB0aGUga2V5c2V0IGZvciB0aGUgbmFtZWQgc2lnbmluZyBzZXJ2aWNlIGFuZCBhZGQgYSBwcm9taXNlXG4gICAqIGZvciBlYWNoIGtleSB0byB0aGUgYGtleXNgIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgP1Byb21pc2U8P3dlYkNyeXB0by5DcnlwdG9LZXk+Pn0ga2V5cyB0aGUgb2JqZWN0IHRvXG4gICAqICAgICBhZGQgZWFjaCBrZXkgcHJvbWlzZSB0by4gVGhpcyBpcyBtdXRhdGVkIHdoaWxlIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzXG4gICAqICAgICBwZW5kaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2lnbmluZ1NlcnZpY2VOYW1lXG4gICAqIEBwYXJhbSB7P3N0cmluZ30ga2V5cGFpcklkIHRoZSBrZXlwYWlyIElEIHRvIGluY2x1ZGUgaW4gdGhlIHF1ZXJ5IHN0cmluZ1xuICAgKiAgICAgZm9yIGNhY2hlYnVzdGluZyBwdXJwb3Nlcywgb3IgYG51bGxgIGlmIG5vIGNhY2hlYnVzdGluZyBpcyBuZWVkZWRcbiAgICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj59IHJlc29sdmVzIGFmdGVyIHRoZSBtdXRhdGlvbiBvZiBga2V5c2AgaXNcbiAgICogICAgIGNvbXBsZXRlLCB0byBgdHJ1ZWAgaWYgdGhlIGtleXNldCB3YXMgZG93bmxvYWRlZCBhbmQgcGFyc2VkXG4gICAqICAgICBzdWNjZXNzZnVsbHkgKGV2ZW4gaWYgc29tZSBrZXlzIHdlcmUgbWFsZm9ybWVkKSwgb3IgYGZhbHNlYCBpZiBhXG4gICAqICAgICBrZXlzZXQtbGV2ZWwgZmFpbHVyZSBvY2N1cnJlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZmV0Y2hBbmRBZGRLZXlzXyhrZXlzLCBzaWduaW5nU2VydmljZU5hbWUsIGtleXBhaXJJZCkge1xuICAgIGxldCB1cmwgPSB0aGlzLnNpZ25pbmdTZXJ2ZXJVUkxzX1tzaWduaW5nU2VydmljZU5hbWVdO1xuICAgIGlmIChrZXlwYWlySWQgIT0gbnVsbCkge1xuICAgICAgdXJsICs9ICc/a2lkPScgKyBlbmNvZGVVUklDb21wb25lbnQoa2V5cGFpcklkKTtcbiAgICB9XG4gICAgLy8gVE9ETyhAdGF5bW9uYmVhbCwgIzExMDg4KTogY29uc2lkZXIgYSB0aW1lb3V0IG9uIHRoaXMgZmV0Y2hcbiAgICByZXR1cm4gU2VydmljZXMueGhyRm9yKHRoaXMud2luXylcbiAgICAgICAgLmZldGNoSnNvbih1cmwsIHtcbiAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBjYWNoZWQgYWNyb3NzIHB1Ymxpc2hlciBkb21haW5zLCBzbyBkb24ndCBhcHBlbmRcbiAgICAgICAgICAvLyBfX2FtcF9zb3VyY2Vfb3JpZ2luIHRvIHRoZSBVUkwuXG4gICAgICAgICAgYW1wQ29yczogZmFsc2UsXG4gICAgICAgICAgY3JlZGVudGlhbHM6ICdvbWl0JyxcbiAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIGFzc2VydGlvbnMgb24gc2lnbmluZyBzZXJ2aWNlIGJlaGF2aW9yIHJlcXVpcmVkIGJ5XG4gICAgICAgICAgICAgIC8vIHRoZSBzcGVjLiBIb3dldmVyLCBub3RoaW5nIHRlcnJpYmxlIGhhcHBlbnMgaWYgdGhleSBhcmVuJ3QgbWV0XG4gICAgICAgICAgICAgIC8vIGFuZCB0aGVyZSdzIG5vIG1lYW5pbmdmdWwgZXJyb3IgcmVjb3ZlcnkgdG8gYmUgZG9uZSBpZiB0aGV5XG4gICAgICAgICAgICAgIC8vIGZhaWwsIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gdGhlbSBhdCBydW50aW1lIGluIHByb2R1Y3Rpb24uXG4gICAgICAgICAgICAgIC8vIFRoZXkncmUgaW5jbHVkZWQgaW4gZGV2IG1vZGUgYXMgYSBkZWJ1Z2dpbmcgYWlkLlxuICAgICAgICAgICAgICBkZXYoKS5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDIwMCxcbiAgICAgICAgICAgICAgICAgICdGYXN0IEZldGNoIGtleXNldCBzcGVjIHJlcXVpcmVzIHN0YXR1cyBjb2RlIDIwMCcpO1xuICAgICAgICAgICAgICBkZXYoKS5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1UeXBlJykgPT1cbiAgICAgICAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vandrLXNldCtqc29uJyxcbiAgICAgICAgICAgICAgICAgICdGYXN0IEZldGNoIGtleXNldCBzcGVjIHJlcXVpcmVzIENvbnRlbnQtVHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2p3ay1zZXQranNvbicpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oXG4gICAgICAgICAgICAgICAgICBqd2tTZXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHN1cHBvc2VkIHRvIGJlIGEgSlNPTiBXZWIgS2V5IFNldCwgYXMgZGVmaW5lZCBpblxuICAgICAgICAgICAgICAgICAgICAvLyBTZWN0aW9uIDUgb2YgUkZDIDc1MTcuIEhvd2V2ZXIsIHRoZSBzaWduaW5nIHNlcnZpY2UgY291bGRcbiAgICAgICAgICAgICAgICAgICAgLy8gbWlzYmVoYXZlIGFuZCBzZW5kIGFuIGFyYml0cmFyeSBKU09OIHZhbHVlLCBzbyB3ZSBoYXZlIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHR5cGUtY2hlY2sgYXQgcnVudGltZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqd2tTZXQgfHwgIWlzQXJyYXkoandrU2V0WydrZXlzJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBgS2V5IHNldCAoJHtKU09OLnN0cmluZ2lmeShqd2tTZXQpfSkgaGFzIG5vIFwia2V5c1wiYCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGp3a1NldFsna2V5cyddLmZvckVhY2goandrID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWp3ayB8fCB0eXBlb2YgandrWydraWQnXSAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduaW5nU2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYEtleSAoJHtKU09OLnN0cmluZ2lmeShqd2spfSkgaGFzIG5vIFwia2lkXCJgKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleXNbandrWydraWQnXV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZW4ndCBzZWVuIHRoaXMga2V5cGFpciBJRCBiZWZvcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzW2p3a1sna2lkJ11dID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlcy5jcnlwdG9Gb3IodGhpcy53aW5fKS5pbXBvcnRQa2NzS2V5KGp3aylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2ViIENyeXB0b2dyYXBoeSByZWplY3RlZCB0aGUga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0IGF0dGVtcHQuIEVpdGhlciB0aGUgc2lnbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlcnZpY2Ugc2VudCBhIG1hbGZvcm1lZCBrZXkgb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJvd3NlciBpcyBkb2luZyBzb21ldGhpbmcgd2VpcmQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgandrRGF0YSA9IEpTT04uc3RyaW5naWZ5KGp3ayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduaW5nU2VydmljZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduaW5nU2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBGYWlsZWQgdG8gaW1wb3J0IGtleSAoJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqd2tEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOiAke21lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzaWduaW5nIHNlcnZpY2UgZGlkbid0IHNlbmQgdmFsaWQgSlNPTi5cbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25pbmdTZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGBGYWlsZWQgdG8gcGFyc2UgSlNPTjogJHtlcnIgJiYgZXJyLnJlc3BvbnNlfWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnIgPT4ge1xuICAgICAgICAgICAgICAvLyBTb21lIGtpbmQgb2YgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBYSFIuIFRoaXMgY291bGQgYmUgYSBsb3RcbiAgICAgICAgICAgICAgLy8gb2YgdGhpbmdzIChhbmQgd2UgaGF2ZSBubyB0eXBlIGluZm9ybWF0aW9uKSwgYnV0IGlmIHRoZXJlJ3Mgbm9cbiAgICAgICAgICAgICAgLy8gYHJlc3BvbnNlYCBpdCdzIHByb2JhYmx5IGEgbmV0d29yayBjb25uZWN0aXZpdHkgZmFpbHVyZSwgc28gd2VcbiAgICAgICAgICAgICAgLy8gaWdub3JlIGl0LiBVbmZvcnR1bmF0ZWx5LCB3ZSBjYW4ndCBkaXN0aW5ndWlzaCB0aGlzIGZyb20gYSBDT1JTXG4gICAgICAgICAgICAgIC8vIHByb2JsZW0uXG4gICAgICAgICAgICAgIGlmIChlcnIgJiYgZXJyLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBwcm9iYWJseSBpbmRpY2F0ZXMgYSBub24tMnh4IEhUVFAgc3RhdHVzIGNvZGUuXG4gICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgc2lnbmluZ1NlcnZpY2VOYW1lLCBgU3RhdHVzIGNvZGUgJHtlcnIucmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUmVwb3J0IGFuIGVycm9yIGNhdXNlZCBieSBhIHNpZ25pbmcgc2VydmljZS4gU2luY2Ugc2lnbmluZyBzZXJ2aWNlcyBjdXJyZW50bHlcbiAqIGRvbid0IGhhdmUgdGhlaXIgb3duIGVycm9yIGxvZ2dpbmcgVVJMcywgd2UganVzdCBzZW5kIGV2ZXJ5dGhpbmcgdG8gdGhlIEFNUFxuICogUHJvamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2lnbmluZ1NlcnZpY2VOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2lnbmluZ1NlcnZpY2VFcnJvcihzaWduaW5nU2VydmljZU5hbWUsIG1lc3NhZ2UpIHtcbiAgZGV2KCkuZXJyb3IoXG4gICAgICAnQU1QLUE0QScsIGBTaWduaW5nIHNlcnZpY2UgZXJyb3IgZm9yICR7c2lnbmluZ1NlcnZpY2VOYW1lfTogJHttZXNzYWdlfWApO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIEJlY2F1c2UgQWRTZW5zZSBhbmQgRG91YmxlQ2xpY2sgYXJlIGJvdGggb3BlcmF0ZWQgYnkgR29vZ2xlIGFuZCB0aGVpciBBNEFcbi8vIGltcGxlbWVudGF0aW9ucyBzaGFyZSBzb21lIGJlaGF2aW9yIGluIGNvbW1vbiwgcGFydCBvZiB0aGUgbG9naWMgZm9yIHRoaXNcbi8vIGltcGxlbWVudGF0aW9uIGlzIGxvY2F0ZWQgaW4gdGhlIGFkcy9nb29nbGUvYTRhIGRpcmVjdG9yeSByYXRoZXIgdGhhbiBoZXJlLlxuLy8gTW9zdCBvdGhlciBhZCBuZXR3b3JrcyB3aWxsIHdhbnQgdG8gcHV0IHRoZWlyIEE0QSBjb2RlIGVudGlyZWx5IGluIHRoZVxuLy8gZXh0ZW5zaW9ucy9hbXAtYWQtbmV0d29yay0ke05FVFdPUktfTkFNRX0taW1wbCBkaXJlY3RvcnkuXG5cbmltcG9ydCB7XG4gIE1BTlVBTF9FWFBFUklNRU5UX0lELFxuICBhZGRFeHBlcmltZW50SWRUb0VsZW1lbnQsXG4gIGV4dHJhY3RVcmxFeHBlcmltZW50SWQsXG59IGZyb20gJy4uLy4uLy4uL2Fkcy9nb29nbGUvYTRhL3RyYWZmaWMtZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtkZXZ9IGZyb20gJy4uLy4uLy4uL3NyYy9sb2cnO1xuaW1wb3J0IHtcbiAgZm9yY2VFeHBlcmltZW50QnJhbmNoLFxuICBnZXRFeHBlcmltZW50QnJhbmNoLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtcbiAgaXNDZG5Qcm94eSxcbiAgaXNHb29nbGVBZHNBNEFWYWxpZEVudmlyb25tZW50LFxufSBmcm9tICcuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS91dGlscyc7XG5pbXBvcnQge3NlbGVjdEFuZFNldEV4cGVyaW1lbnRzfSBmcm9tICcuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS9leHBlcmltZW50LXV0aWxzJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSBAdmlzaWJsZUZvclRlc3RpbmcgKi9cbmV4cG9ydCBjb25zdCBBRFNFTlNFX0E0QV9FWFBFUklNRU5UX05BTUUgPSAnZXhwQWRzZW5zZUE0QSc7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuY29uc3QgVEFHID0gJ2FtcC1hZC1uZXR3b3JrLWFkc2Vuc2UtaW1wbCc7XG5cbi8qKiBAY29uc3QgQHR5cGUgeyFPYmplY3Q8c3RyaW5nLD9zdHJpbmc+fSAqL1xuZXhwb3J0IGNvbnN0IFVSTF9FWFBFUklNRU5UX01BUFBJTkcgPSB7XG4gICctMSc6IE1BTlVBTF9FWFBFUklNRU5UX0lELFxuICAnMCc6IG51bGwsXG59O1xuXG4vKiogQGNvbnN0IEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbmV4cG9ydCBjb25zdCBBRFNFTlNFX0VYUEVSSU1FTlRTID0ge1xuICBVTkNPTkRJVElPTkVEX0NBTk9OSUNBTF9FWFA6ICcyMTA2MjE1NCcsXG4gIFVOQ09ORElUSU9ORURfQ0FOT05JQ0FMX0NUTDogJzIxMDYyMTU1JyxcbiAgQ0FOT05JQ0FMX0VYUDogJzIxMDYyMTU4JyxcbiAgQ0FOT05JQ0FMX0NUTDogJzIxMDYyMTU5Jyxcbn07XG5cbi8qKiBAY29uc3QgQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqL1xuZXhwb3J0IGNvbnN0IEFEU0VOU0VfRVhQX05BTUVTID0ge1xuICBVTkNPTkRJVElPTkVEX0NBTk9OSUNBTDogJ2V4cEFkc2Vuc2VVbmNvbmRpdGlvbmVkQ2Fub25pY2FsJyxcbiAgQ0FOT05JQ0FMOiAnZXhwQWRzZW5zZUNhbm9uaWNhbCcsXG59O1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHNlbGVjdCBpbnRvIEFkc2Vuc2UgZXhwZXJpbWVudHMuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZWxlY3RFeHBlcmltZW50cyh3aW4sIGVsZW1lbnQpIHtcbiAgc2VsZWN0QW5kU2V0RXhwZXJpbWVudHMod2luLCBlbGVtZW50LFxuICAgICAgW0FEU0VOU0VfRVhQRVJJTUVOVFMuVU5DT05ESVRJT05FRF9DQU5PTklDQUxfRVhQLFxuICAgICAgICBBRFNFTlNFX0VYUEVSSU1FTlRTLlVOQ09ORElUSU9ORURfQ0FOT05JQ0FMX0NUTF0sXG4gICAgICBBRFNFTlNFX0VYUF9OQU1FUy5VTkNPTkRJVElPTkVEX0NBTk9OSUNBTCxcbiAgICAgIHRydWUpO1xuXG5cbiAgLy8gU2VlIGlmIGluIGhvbGRiYWNrIGNvbnRyb2wvZXhwZXJpbWVudC5cbiAgY29uc3QgdXJsRXhwZXJpbWVudElkID0gZXh0cmFjdFVybEV4cGVyaW1lbnRJZCh3aW4sIGVsZW1lbnQpO1xuICBjb25zdCBleHBlcmltZW50SWQgPSBVUkxfRVhQRVJJTUVOVF9NQVBQSU5HW3VybEV4cGVyaW1lbnRJZCB8fCAnJ107XG4gIGlmIChleHBlcmltZW50SWQpIHtcbiAgICBhZGRFeHBlcmltZW50SWRUb0VsZW1lbnQoZXhwZXJpbWVudElkLCBlbGVtZW50KTtcbiAgICBmb3JjZUV4cGVyaW1lbnRCcmFuY2god2luLCBBRFNFTlNFX0E0QV9FWFBFUklNRU5UX05BTUUsIGV4cGVyaW1lbnRJZCk7XG4gICAgZGV2KCkuaW5mbyhcbiAgICAgICAgVEFHLCBgdXJsIGV4cGVyaW1lbnQgc2VsZWN0aW9uICR7dXJsRXhwZXJpbWVudElkfTogJHtleHBlcmltZW50SWR9LmApO1xuICB9XG5cbiAgLy8gSWYgbm90IGluIHRoZSB1bmNvbmRpdGlvbmVkIGNhbm9uaWNhbCBleHBlcmltZW50LCBhdHRlbXB0IHRvXG4gIC8vIHNlbGVjdCBpbnRvIHRoZSB1bmRpbHV0ZWQgY2Fub25pY2FsIGV4cGVyaW1lbnQuXG4gIGNvbnN0IGluVW5jb25kaXRpb25lZENhbm9uaWNhbEV4cCA9ICEhZ2V0RXhwZXJpbWVudEJyYW5jaChcbiAgICAgIHdpbiwgQURTRU5TRV9FWFBfTkFNRVMuVU5DT05ESVRJT05FRF9DQU5PTklDQUwpO1xuICBpZiAoIWluVW5jb25kaXRpb25lZENhbm9uaWNhbEV4cCAmJiAhaXNDZG5Qcm94eSh3aW4pKSB7XG4gICAgc2VsZWN0QW5kU2V0RXhwZXJpbWVudHMod2luLCBlbGVtZW50LFxuICAgICAgICBbQURTRU5TRV9FWFBFUklNRU5UUy5DQU5PTklDQUxfRVhQLFxuICAgICAgICAgIEFEU0VOU0VfRVhQRVJJTUVOVFMuQ0FOT05JQ0FMX0NUTF0sXG4gICAgICAgIEFEU0VOU0VfRVhQX05BTUVTLkNBTk9OSUNBTCwgdHJ1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtib29sZWFufSB1c2VSZW1vdGVIdG1sXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRzZW5zZUlzQTRBRW5hYmxlZCh3aW4sIGVsZW1lbnQsIHVzZVJlbW90ZUh0bWwpIHtcbiAgaWYgKHVzZVJlbW90ZUh0bWwgfHwgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFkLWNsaWVudCcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHNlbGVjdEV4cGVyaW1lbnRzKHdpbiwgZWxlbWVudCk7XG4gIHJldHVybiBpc0dvb2dsZUFkc0E0QVZhbGlkRW52aXJvbm1lbnQod2luKSB8fFxuICAgICAgZ2V0RXhwZXJpbWVudEJyYW5jaChcbiAgICAgICAgICB3aW4sIEFEU0VOU0VfRVhQX05BTUVTLlVOQ09ORElUSU9ORURfQ0FOT05JQ0FMKSA9PVxuICAgICAgQURTRU5TRV9FWFBFUklNRU5UUy5VTkNPTkRJVElPTkVEX0NBTk9OSUNBTF9FWFAgfHxcbiAgICAgIGdldEV4cGVyaW1lbnRCcmFuY2god2luLCBBRFNFTlNFX0VYUF9OQU1FUy5DQU5PTklDQUwpID09XG4gICAgICBBRFNFTlNFX0VYUEVSSU1FTlRTLkNBTk9OSUNBTF9FWFA7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoaWNoIHRhZ3MgZGVzaXJlIEE0QSBoYW5kbGluZ1xuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlUmVtb3RlSHRtbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3VkZmxhcmVJc0E0QUVuYWJsZWQod2luLCBlbGVtZW50LCB1c2VSZW1vdGVIdG1sKSB7XG4gIC8vIFdlIGFzc3VtZSBmYXN0IGZldGNoIGZvciBhbGwgY29udGVudCwgYnV0IHRoaXMgd2lsbCBncmFjZWZ1bGx5IGRlZ3JhZGUsXG4gIC8vIHdoZW4gbm9uLWE0YSBjb250ZW50IGlzIGRlbGl2ZXJlZFxuICByZXR1cm4gIXVzZVJlbW90ZUh0bWw7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gQmVjYXVzZSBBZFNlbnNlIGFuZCBEb3VibGVDbGljayBhcmUgYm90aCBvcGVyYXRlZCBieSBHb29nbGUgYW5kIHRoZWlyIEE0QVxuLy8gaW1wbGVtZW50YXRpb25zIHNoYXJlIHNvbWUgYmVoYXZpb3IgaW4gY29tbW9uLCBwYXJ0IG9mIHRoZSBsb2dpYyBmb3IgdGhpc1xuLy8gaW1wbGVtZW50YXRpb24gaXMgbG9jYXRlZCBpbiB0aGUgYWRzL2dvb2dsZS9hNGEgZGlyZWN0b3J5IHJhdGhlciB0aGFuIGhlcmUuXG4vLyBNb3N0IG90aGVyIGFkIG5ldHdvcmtzIHdpbGwgd2FudCB0byBwdXQgdGhlaXIgQTRBIGNvZGUgZW50aXJlbHkgaW4gdGhlXG4vLyBleHRlbnNpb25zL2FtcC1hZC1uZXR3b3JrLSR7TkVUV09SS19OQU1FfS1pbXBsIGRpcmVjdG9yeS5cblxuaW1wb3J0ICcuLi8uLi9hbXAtYTRhLzAuMS9yZWFsLXRpbWUtY29uZmlnLW1hbmFnZXInO1xuaW1wb3J0IHtcbiAgQW1wQTRBLFxuICBERUZBVUxUX1NBRkVGUkFNRV9WRVJTSU9OLFxuICBYT1JJR0lOX01PREUsXG4gIGFzc2lnbkFkVXJsVG9FcnJvcixcbn0gZnJvbSAnLi4vLi4vYW1wLWE0YS8wLjEvYW1wLWE0YSc7XG5pbXBvcnQge1xuICBBbXBBbmFseXRpY3NDb25maWdEZWYsXG4gIFFRSURfSEVBREVSLFxuICBWYWxpZEFkQ29udGFpbmVyVHlwZXMsXG4gIGFkZENzaVNpZ25hbHNUb0FtcEFuYWx5dGljc0NvbmZpZyxcbiAgZXh0cmFjdEFtcEFuYWx5dGljc0NvbmZpZyxcbiAgZ2V0Q3NpQW1wQW5hbHl0aWNzQ29uZmlnLFxuICBnZXRDc2lBbXBBbmFseXRpY3NWYXJpYWJsZXMsXG4gIGdldEVuY2xvc2luZ0NvbnRhaW5lclR5cGVzLFxuICBnZXRJZGVudGl0eVRva2VuLFxuICBnb29nbGVBZFVybCxcbiAgZ29vZ2xlQmxvY2tQYXJhbWV0ZXJzLFxuICBnb29nbGVQYWdlUGFyYW1ldGVycyxcbiAgZ3JvdXBBbXBBZHNCeVR5cGUsXG4gIGlzQ2RuUHJveHksXG4gIGlzUmVwb3J0aW5nRW5hYmxlZCxcbiAgbWF5YmVBcHBlbmRFcnJvclBhcmFtZXRlcixcbiAgdHJ1bmNBbmRUaW1lVXJsLFxufSBmcm9tICcuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS91dGlscyc7XG5pbXBvcnQge0NPTlNFTlRfUE9MSUNZX1NUQVRFfSBmcm9tICcuLi8uLi8uLi9zcmMvY29uc2VudC1zdGF0ZSc7XG5pbXBvcnQge0RlZmVycmVkfSBmcm9tICcuLi8uLi8uLi9zcmMvdXRpbHMvcHJvbWlzZSc7XG5pbXBvcnQge0xheW91dCwgaXNMYXlvdXRTaXplRGVmaW5lZH0gZnJvbSAnLi4vLi4vLi4vc3JjL2xheW91dCc7XG5pbXBvcnQge05hdmlnYXRpb259IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlL25hdmlnYXRpb24nO1xuaW1wb3J0IHtSVENfVkVORE9SU30gZnJvbSAnLi4vLi4vYW1wLWE0YS8wLjEvY2FsbG91dC12ZW5kb3JzJztcbmltcG9ydCB7XG4gIFJlZnJlc2hNYW5hZ2VyLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIGdldFJlZnJlc2hNYW5hZ2VyLFxufSBmcm9tICcuLi8uLi9hbXAtYTRhLzAuMS9yZWZyZXNoLW1hbmFnZXInO1xuaW1wb3J0IHtTYWZlZnJhbWVIb3N0QXBpfSBmcm9tICcuL3NhZmVmcmFtZS1ob3N0JztcbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcyc7XG5pbXBvcnQge1xuICBURkNELFxuICBjb25zdHJ1Y3RTUkFCbG9ja1BhcmFtZXRlcnMsXG4gIHNlcmlhbGl6ZVRhcmdldGluZyxcbiAgc3JhQmxvY2tDYWxsYmFja0hhbmRsZXIsXG59IGZyb20gJy4vc3JhLXV0aWxzJztcbmltcG9ydCB7Y3JlYXRlRWxlbWVudFdpdGhBdHRyaWJ1dGVzLCByZW1vdmVFbGVtZW50fSBmcm9tICcuLi8uLi8uLi9zcmMvZG9tJztcbmltcG9ydCB7ZGVlcE1lcmdlLCBkaWN0fSBmcm9tICcuLi8uLi8uLi9zcmMvdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7ZGV2LCB1c2VyfSBmcm9tICcuLi8uLi8uLi9zcmMvbG9nJztcbmltcG9ydCB7ZG9tRmluZ2VycHJpbnRQbGFpbn0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL2RvbS1maW5nZXJwcmludCc7XG5pbXBvcnQge2dldE1vZGV9IGZyb20gJy4uLy4uLy4uL3NyYy9tb2RlJztcbmltcG9ydCB7Z2V0TXVsdGlTaXplRGltZW5zaW9uc30gZnJvbSAnLi4vLi4vLi4vYWRzL2dvb2dsZS91dGlscyc7XG5pbXBvcnQge2dldE9yQ3JlYXRlQWRDaWR9IGZyb20gJy4uLy4uLy4uL3NyYy9hZC1jaWQnO1xuaW1wb3J0IHtcbiAgaW5jcmVtZW50TG9hZGluZ0FkcyxcbiAgaXMzcFRocm90dGxlZCxcbiAgd2FpdEZvcjNwVGhyb3R0bGUsXG59IGZyb20gJy4uLy4uL2FtcC1hZC8wLjEvY29uY3VycmVudC1sb2FkJztcbmltcG9ydCB7aW5zZXJ0QW5hbHl0aWNzRWxlbWVudH0gZnJvbSAnLi4vLi4vLi4vc3JjL2V4dGVuc2lvbi1hbmFseXRpY3MnO1xuaW1wb3J0IHtpc0NhbmNlbGxhdGlvbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2Vycm9yJztcbmltcG9ydCB7aXNFeHBlcmltZW50T259IGZyb20gJy4uLy4uLy4uL3NyYy9leHBlcmltZW50cyc7XG5pbXBvcnQge1xuICBpc0luTWFudWFsRXhwZXJpbWVudCxcbn0gZnJvbSAnLi4vLi4vLi4vYWRzL2dvb2dsZS9hNGEvdHJhZmZpYy1leHBlcmltZW50cyc7XG5pbXBvcnQge2lzU2VjdXJlVXJsRGVwcmVjYXRlZCwgcGFyc2VRdWVyeVN0cmluZ30gZnJvbSAnLi4vLi4vLi4vc3JjL3VybCc7XG5pbXBvcnQge1xuICBsaW5lRGVsaW1pdGVkU3RyZWFtZXIsXG4gIG1ldGFKc29uQ3JlYXRpdmVHcm91cGVyLFxufSBmcm9tICcuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS9saW5lLWRlbGltaXRlZC1yZXNwb25zZS1oYW5kbGVyJztcbmltcG9ydCB7cmFuZG9tbHlTZWxlY3RVbnNldEV4cGVyaW1lbnRzfSBmcm9tICcuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMnO1xuaW1wb3J0IHtzZXRTdHlsZXN9IGZyb20gJy4uLy4uLy4uL3NyYy9zdHlsZSc7XG5pbXBvcnQge3N0cmluZ0hhc2gzMn0gZnJvbSAnLi4vLi4vLi4vc3JjL3N0cmluZyc7XG5pbXBvcnQge3RyeVBhcnNlSnNvbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2pzb24nO1xuXG4vKiogQHR5cGUge3N0cmluZ30gKi9cbmNvbnN0IFRBRyA9ICdhbXAtYWQtbmV0d29yay1kb3VibGVjbGljay1pbXBsJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgRE9VQkxFQ0xJQ0tfQkFTRV9VUkwgPVxuICAgICdodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC9nYW1wYWQvYWRzJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgUlRDX1NVQ0NFU1MgPSAnMic7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IERPVUJMRUNMSUNLX1NSQV9FWFAgPSAnZG91YmxlY2xpY2tTcmFFeHAnO1xuXG4vKiogQGNvbnN0IEBlbnVte3N0cmluZ30gKi9cbmNvbnN0IERPVUJMRUNMSUNLX1NSQV9FWFBfQlJBTkNIRVMgPSB7XG4gIFNSQV9DT05UUk9MOiAnMTE3MTUyNjY2JyxcbiAgU1JBOiAnMTE3MTUyNjY3JyxcbiAgU1JBX05PX1JFQ09WRVI6ICcyMTA2MjIzNScsXG59O1xuXG4vKipcbiAqIE1hcCBvZiBwYWdldmlldyB0b2tlbnMgdG8gdGhlIGluc3RhbmNlcyB0aGV5IGJlbG9uZyB0by5cbiAqIEBwcml2YXRlIHshT2JqZWN0PHN0cmluZywgIUFtcEFkTmV0d29ya0RvdWJsZWNsaWNrSW1wbD59XG4gKi9cbmxldCB0b2tlbnNUb0luc3RhbmNlcyA9IHt9O1xuXG4vKiogQHByaXZhdGUgez9Qcm9taXNlfSAqL1xubGV0IHNyYVJlcXVlc3RzID0gbnVsbDtcblxuLyoqIEB0eXBlZGVmIHt7XG4gICAgICBhZFVybDogIVByb21pc2U8c3RyaW5nPixcbiAgICAgIGxpbmVJdGVtSWQ6IHN0cmluZyxcbiAgICAgIGNyZWF0aXZlSWQ6IHN0cmluZyxcbiAgICAgIHNsb3RJZDogc3RyaW5nLFxuICAgICAgc2xvdEluZGV4OiBzdHJpbmcsXG4gICAgfX0gKi9cbmxldCBUcm91Ymxlc2hvb3REYXRhRGVmO1xuXG4vKiogQHByaXZhdGUgez9Kc29uT2JqZWN0fSAqL1xubGV0IHdpbmRvd0xvY2F0aW9uUXVlcnlQYXJhbWV0ZXJzO1xuXG4vKipcbiAqIEB0eXBlZGVmXG4gKiB7KHt3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn18Li4vLi4vLi4vc3JjL2xheW91dC1yZWN0LkxheW91dFJlY3REZWYpfVxuICovXG5sZXQgTGF5b3V0UmVjdE9yRGltc0RlZjtcblxuLyoqIEBmaW5hbCAqL1xuZXhwb3J0IGNsYXNzIEFtcEFkTmV0d29ya0RvdWJsZWNsaWNrSW1wbCBleHRlbmRzIEFtcEE0QSB7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZyB0byBnZW5lcmF0ZSBhbXAtYW5hbHl0aWNzIGVsZW1lbnQgZm9yIGFjdGl2ZSB2aWV3IHJlcG9ydGluZy5cbiAgICAgKiBAdHlwZSB7P0pzb25PYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmFtcEFuYWx5dGljc0NvbmZpZ18gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHshLi4vLi4vLi4vc3JjL3NlcnZpY2UvZXh0ZW5zaW9ucy1pbXBsLkV4dGVuc2lvbnN9ICovXG4gICAgdGhpcy5leHRlbnNpb25zXyA9IFNlcnZpY2VzLmV4dGVuc2lvbnNGb3IodGhpcy53aW4pO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMucXFpZF8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/TGF5b3V0UmVjdE9yRGltc0RlZn0gKi9cbiAgICB0aGlzLmluaXRpYWxTaXplXyA9IG51bGw7XG5cbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5wYXJhbWV0ZXJTaXplID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn19ICovXG4gICAgdGhpcy5yZXR1cm5lZFNpemVfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0VsZW1lbnR9ICovXG4gICAgdGhpcy5hbXBBbmFseXRpY3NFbGVtZW50XyA9IG51bGw7XG5cbiAgICAvKiogQHR5cGUgez9PYmplY3Q8c3RyaW5nLCo+fSovXG4gICAgdGhpcy5qc29uVGFyZ2V0aW5nID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMuYWRLZXkgPSAwO1xuXG4gICAgLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi9cbiAgICB0aGlzLmV4cGVyaW1lbnRJZHMgPSBbXTtcblxuICAgIC8qKiBAcHJvdGVjdGVkIHtib29sZWFufSAqL1xuICAgIHRoaXMudXNlU3JhID0gZmFsc2U7XG5cbiAgICAvKiogQHByb3RlY3RlZCB7IURlZmVycmVkPD8uLi8uLi8uLi9zcmMvdXRpbHMveGhyLXV0aWxzLkZldGNoUmVzcG9uc2U+fSAqL1xuICAgIHRoaXMuc3JhRGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1JlZnJlc2hNYW5hZ2VyfSAqL1xuICAgIHRoaXMucmVmcmVzaE1hbmFnZXJfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMucmVmcmVzaENvdW50XyA9IDA7XG5cbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLmlmaV8gPSAwO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNGbHVpZFJlcXVlc3RfID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5mbHVpZEltcHJlc3Npb25VcmxfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2U8IS4uLy4uLy4uL2Fkcy9nb29nbGUvYTRhL3V0aWxzLklkZW50aXR5VG9rZW4+fSAqL1xuICAgIHRoaXMuaWRlbnRpdHlUb2tlblByb21pc2VfID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7Py4uLy4uLy4uL2Fkcy9nb29nbGUvYTRhL3V0aWxzLklkZW50aXR5VG9rZW59ICovXG4gICAgdGhpcy5pZGVudGl0eVRva2VuID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IVRyb3VibGVzaG9vdERhdGFEZWZ9ICovXG4gICAgdGhpcy50cm91Ymxlc2hvb3REYXRhXyA9IC8qKiBAdHlwZSB7IVRyb3VibGVzaG9vdERhdGFEZWZ9ICovICh7fSk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZSB7P2Jvb2xlYW59IHdoZXRoZXIgcHJlZmVyZW50aWFsIHJlbmRlcmVkIEFNUCBjcmVhdGl2ZSwgbnVsbFxuICAgICAqIGluZGljYXRlcyBubyBjcmVhdGl2ZSByZW5kZXIuXG4gICAgICovXG4gICAgdGhpcy5pc0FtcENyZWF0aXZlXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5pc0lkbGVSZW5kZXJfID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgez8uL3NhZmVmcmFtZS1ob3N0LlNhZmVmcmFtZUhvc3RBcGl9ICovXG4gICAgdGhpcy5zYWZlZnJhbWVBcGlfID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gd2hldGhlciBzYWZlZnJhbWUgZm9yY2VkIHZpYSB0YWcgKi9cbiAgICB0aGlzLmZvcmNlU2FmZWZyYW1lID0gZmFsc2U7XG4gICAgaWYgKCdmb3JjZVNhZmVmcmFtZScgaW4gdGhpcy5lbGVtZW50LmRhdGFzZXQpIHtcbiAgICAgIGlmICghL14oMXwodHJ1ZSkpJC9pLnRlc3QodGhpcy5lbGVtZW50LmRhdGFzZXRbJ2ZvcmNlU2FmZWZyYW1lJ10pKSB7XG4gICAgICAgIHVzZXIoKS53YXJuKFRBRywgJ0lnbm9yaW5nIGludmFsaWQgZGF0YS1mb3JjZS1zYWZlZnJhbWUgYXR0cmlidXRlOiAnICtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5kYXRhc2V0Wydmb3JjZVNhZmVmcmFtZSddKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZm9yY2VTYWZlZnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAcHJvdGVjdGVkIHs/Q09OU0VOVF9QT0xJQ1lfU1RBVEV9ICovXG4gICAgdGhpcy5jb25zZW50U3RhdGUgPSBudWxsO1xuXG4gICAgLyoqIEBwcm90ZWN0ZWQgeyFEZWZlcnJlZDxzdHJpbmc+fSAqL1xuICAgIHRoaXMuZ2V0QWRVcmxEZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge251bWJlcnxib29sZWFufSByZW5kZXIgb24gaWRsZSBjb25maWd1cmF0aW9uIHdpdGggZmFsc2VcbiAgICogICAgaW5kaWNhdGluZyBkaXNhYmxlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldElkbGVSZW5kZXJFbmFibGVkXygpIHtcbiAgICBpZiAodGhpcy5pc0lkbGVSZW5kZXJfKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0lkbGVSZW5kZXJfO1xuICAgIH1cbiAgICAvLyBEaXNhYmxlIGlmIHB1Ymxpc2hlciBoYXMgaW5kaWNhdGVkIGEgbm9uLWRlZmF1bHQgbG9hZGluZyBzdHJhdGVneS5cbiAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nLXN0cmF0ZWd5JykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZXhwVmFsID0gdGhpcy5wb3N0QWRSZXNwb25zZUV4cGVyaW1lbnRGZWF0dXJlc1sncmVuZGVyLWlkbGUtdnAnXTtcbiAgICBjb25zdCB2cFJhbmdlID0gcGFyc2VJbnQoZXhwVmFsLCAxMCk7XG4gICAgaWYgKGV4cFZhbCAmJiBpc05hTih2cFJhbmdlKSkge1xuICAgICAgLy8gaG9sZGJhY2sgYnJhbmNoIHNlbmRzIG5vbi1udW1lcmljIHZhbHVlLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdnBSYW5nZSB8fCAxMjtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaWRsZVJlbmRlck91dHNpZGVWaWV3cG9ydCgpIHtcbiAgICBjb25zdCB2cFJhbmdlID0gdGhpcy5nZXRJZGxlUmVuZGVyRW5hYmxlZF8oKTtcbiAgICBpZiAodnBSYW5nZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB2cFJhbmdlO1xuICAgIH1cbiAgICB0aGlzLmlzSWRsZVJlbmRlcl8gPSB0cnVlO1xuICAgIC8vIE5PVEUoa2VpdGh3cmlnaHRib3MpOiBoYW5kbGUgcmFjZSBjb25kaXRpb24gd2hlcmUgcHJldmlvdXNcbiAgICAvLyBpZGxlUmVuZGVyT3V0c2lkZVZpZXdwb3J0IG1hcmtlZCBzbG90IGFzIGlkbGUgcmVuZGVyIGRlc3BpdGUgbmV2ZXJcbiAgICAvLyBiZWluZyBzY2hlZHVsZSBkdWUgdG8gYmVpbmcgYmV5b25kIHZpZXdwb3J0IG1heCBvZmZzZXQuICBJZiBzbG90XG4gICAgLy8gY29tZXMgd2l0aGluIHN0YW5kYXJkIG91dHNpZGUgdmlld3BvcnQgcmFuZ2UsIHRoZW4gZW5zdXJlIHRocm90dGxpbmdcbiAgICAvLyB3aWxsIG5vdCBiZSBhcHBsaWVkLlxuICAgIHRoaXMuZ2V0UmVzb3VyY2UoKS53aGVuV2l0aGluVmlld3BvcnQodGhpcy5yZW5kZXJPdXRzaWRlVmlld3BvcnQoKSkudGhlbihcbiAgICAgICAgKCkgPT4gdGhpcy5pc0lkbGVSZW5kZXJfID0gZmFsc2UpO1xuICAgIHJldHVybiB2cFJhbmdlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBpc0xheW91dFN1cHBvcnRlZChsYXlvdXQpIHtcbiAgICB0aGlzLmlzRmx1aWRSZXF1ZXN0XyA9IGxheW91dCA9PSBMYXlvdXQuRkxVSUQ7XG4gICAgcmV0dXJuIHRoaXMuaXNGbHVpZFJlcXVlc3RfIHx8IGlzTGF5b3V0U2l6ZURlZmluZWQobGF5b3V0KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgaXNWYWxpZEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNBbXBBZEVsZW1lbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBwYWdlIGxldmVsIGV4cGVyaW1lbnQgZGl2ZXJzaW9uIGFuZCBwdXNoZXMgYW55IGV4cGVyaW1lbnQgSURzXG4gICAqIG9udG8gdGhpcy5leHBlcmltZW50SWRzLlxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIHNldFBhZ2VMZXZlbEV4cGVyaW1lbnRzKCkge1xuICAgIGlmICghaXNDZG5Qcm94eSh0aGlzLndpbikgJiYgIWlzRXhwZXJpbWVudE9uKFxuICAgICAgICB0aGlzLndpbiwgJ2V4cERmcEludk9yaWdEZXByZWNhdGVkJykpIHtcbiAgICAgIHRoaXMuZXhwZXJpbWVudElkcy5wdXNoKCcyMTA2MDkzMycpO1xuICAgIH1cbiAgICBjb25zdCBleHBlcmltZW50SW5mb01hcCA9XG4gICAgLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZyxcbiAgICAgICAgIS4uLy4uLy4uL3NyYy9leHBlcmltZW50cy5FeHBlcmltZW50SW5mbz59ICovICh7XG4gICAgICAgIC8vIE9ubHkgc2VsZWN0IGludG8gU1JBIGV4cGVyaW1lbnRzIGlmIFNSQSBub3QgYWxyZWFkeSBleHBsaWNpdGx5XG4gICAgICAgIC8vIGVuYWJsZWQgYW5kIHJlZnJlc2ggaXMgbm90IGJlaW5nIHVzZWQgYnkgYW55IHNsb3QuXG4gICAgICAgIFtET1VCTEVDTElDS19TUkFfRVhQXToge1xuICAgICAgICAgIGlzVHJhZmZpY0VsaWdpYmxlOiAoKSA9PiAhdGhpcy53aW4uZG9jdW1lbnQuLypPSyovcXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgJ21ldGFbbmFtZT1hbXAtYWQtZW5hYmxlLXJlZnJlc2hdLCAnICtcbiAgICAgICAgICAgICAgJ2FtcC1hZFt0eXBlPWRvdWJsZWNsaWNrXVtkYXRhLWVuYWJsZS1yZWZyZXNoXSwgJyArXG4gICAgICAgICAgICAgICdtZXRhW25hbWU9YW1wLWFkLWRvdWJsZWNsaWNrLXNyYV0nKSxcbiAgICAgICAgICBicmFuY2hlczogT2JqZWN0LmtleXMoRE9VQkxFQ0xJQ0tfU1JBX0VYUF9CUkFOQ0hFUykubWFwKFxuICAgICAgICAgICAgICBrZXkgPT4gRE9VQkxFQ0xJQ0tfU1JBX0VYUF9CUkFOQ0hFU1trZXldKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIGNvbnN0IHNldEV4cHMgPSB0aGlzLnJhbmRvbWx5U2VsZWN0VW5zZXRFeHBlcmltZW50c18oZXhwZXJpbWVudEluZm9NYXApO1xuICAgIE9iamVjdC5rZXlzKHNldEV4cHMpLmZvckVhY2goZXhwTmFtZSA9PlxuICAgICAgc2V0RXhwc1tleHBOYW1lXSAmJiB0aGlzLmV4cGVyaW1lbnRJZHMucHVzaChzZXRFeHBzW2V4cE5hbWVdKSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIGVhc2llciB1bml0IHRlc3RpbmcuXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICEuLi8uLi8uLi9zcmMvZXhwZXJpbWVudHMuRXhwZXJpbWVudEluZm8+fSBleHBlcmltZW50SW5mb01hcFxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAgICovXG4gIHJhbmRvbWx5U2VsZWN0VW5zZXRFeHBlcmltZW50c18oZXhwZXJpbWVudEluZm9NYXApIHtcbiAgICByZXR1cm4gcmFuZG9tbHlTZWxlY3RVbnNldEV4cGVyaW1lbnRzKHRoaXMud2luLCBleHBlcmltZW50SW5mb01hcCk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgbWF5YmVEZXByZWNhdGlvbldhcm5fKCkge1xuICAgIGNvbnN0IHdhcm5EZXByZWNhdGlvbiA9IGZlYXR1cmUgPT4gdXNlcigpLndhcm4oXG4gICAgICAgIFRBRywgYCR7ZmVhdHVyZX0gaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBmb3IgRG91YmxlQ2xpY2suYCArXG4gICAgICAgICAgJ1BsZWFzZSByZWZlciB0byAnICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2FtcHByb2plY3QvYW1waHRtbC9pc3N1ZXMvMTE4MzQgJyArXG4gICAgICAgICAgJ2ZvciBtb3JlIGluZm9ybWF0aW9uJyk7XG4gICAgY29uc3QgdXNkcmQgPSAndXNlU2FtZURvbWFpblJlbmRlcmluZ1VudGlsRGVwcmVjYXRlZCc7XG4gICAgY29uc3QgaGFzVVNEUkQgPSB1c2RyZCBpbiB0aGlzLmVsZW1lbnQuZGF0YXNldCB8fFxuICAgICAgICAgICh0cnlQYXJzZUpzb24odGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnanNvbicpKSB8fCB7fSlbdXNkcmRdO1xuICAgIGlmIChoYXNVU0RSRCkge1xuICAgICAgd2FybkRlcHJlY2F0aW9uKHVzZHJkKTtcbiAgICB9XG4gICAgY29uc3QgdXNlUmVtb3RlSHRtbCA9XG4gICAgICAhIXRoaXMud2luLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1hbXAtM3AtaWZyYW1lLXNyY10nKTtcbiAgICBpZiAodXNlUmVtb3RlSHRtbCkge1xuICAgICAgd2FybkRlcHJlY2F0aW9uKCdyZW1vdGUuaHRtbCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYnVpbGRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5idWlsZENhbGxiYWNrKCk7XG4gICAgdGhpcy5tYXliZURlcHJlY2F0aW9uV2Fybl8oKTtcbiAgICB0aGlzLnNldFBhZ2VMZXZlbEV4cGVyaW1lbnRzKCk7XG4gICAgdGhpcy51c2VTcmEgPSAoZ2V0TW9kZSgpLmxvY2FsRGV2ICYmIC8oXFw/fCYpZm9yY2Vfc3JhPXRydWUoJnwkKS8udGVzdChcbiAgICAgICAgdGhpcy53aW4ubG9jYXRpb24uc2VhcmNoKSkgfHxcbiAgICAgICAgISF0aGlzLndpbi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJ21ldGFbbmFtZT1hbXAtYWQtZG91YmxlY2xpY2stc3JhXScpIHx8XG4gICAgICAgICEhdGhpcy5leHBlcmltZW50SWRzLmZpbHRlcihleHAgPT5cbiAgICAgICAgICBleHAgPT0gRE9VQkxFQ0xJQ0tfU1JBX0VYUF9CUkFOQ0hFUy5TUkEgfHxcbiAgICAgICAgICBleHAgPT0gRE9VQkxFQ0xJQ0tfU1JBX0VYUF9CUkFOQ0hFUy5TUkFfTk9fUkVDT1ZFUikubGVuZ3RoO1xuICAgIHRoaXMuaWRlbnRpdHlUb2tlblByb21pc2VfID0gU2VydmljZXMudmlld2VyRm9yRG9jKHRoaXMuZ2V0QW1wRG9jKCkpXG4gICAgICAgIC53aGVuRmlyc3RWaXNpYmxlKClcbiAgICAgICAgLnRoZW4oKCkgPT4gZ2V0SWRlbnRpdHlUb2tlbih0aGlzLndpbiwgdGhpcy5nZXRBbXBEb2MoKSkpO1xuICAgIHRoaXMudHJvdWJsZXNob290RGF0YV8uc2xvdElkID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zbG90Jyk7XG4gICAgdGhpcy50cm91Ymxlc2hvb3REYXRhXy5zbG90SW5kZXggPVxuICAgICAgICB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFtcC1zbG90LWluZGV4Jyk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHNob3VsZFByZWZlcmVudGlhbFJlbmRlcldpdGhvdXRDcnlwdG8oKSB7XG4gICAgZGV2KCkuYXNzZXJ0KCFpc0NkblByb3h5KHRoaXMud2luKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/Q09OU0VOVF9QT0xJQ1lfU1RBVEV9IGNvbnNlbnRTdGF0ZVxuICAgKiBAcGFyYW0geyFBcnJheTwhQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPj19IGluc3RhbmNlc1xuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZyxzdHJpbmd8Ym9vbGVhbnxudW1iZXI+fVxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIGdldFBhZ2VQYXJhbWV0ZXJzKGNvbnNlbnRTdGF0ZSwgaW5zdGFuY2VzKSB7XG4gICAgaW5zdGFuY2VzID0gaW5zdGFuY2VzIHx8IFt0aGlzXTtcbiAgICByZXR1cm4ge1xuICAgICAgJ25wYSc6IGNvbnNlbnRTdGF0ZSA9PSBDT05TRU5UX1BPTElDWV9TVEFURS5JTlNVRkZJQ0lFTlQgfHxcbiAgICAgICAgICBjb25zZW50U3RhdGUgPT0gQ09OU0VOVF9QT0xJQ1lfU1RBVEUuVU5LTk9XTiA/IDEgOiBudWxsLFxuICAgICAgJ2dkZnBfcmVxJzogJzEnLFxuICAgICAgJ3Nmdic6IERFRkFVTFRfU0FGRUZSQU1FX1ZFUlNJT04sXG4gICAgICAndV9zZCc6IHRoaXMud2luLmRldmljZVBpeGVsUmF0aW8sXG4gICAgICAnZ2N0JzogdGhpcy5nZXRMb2NhdGlvblF1ZXJ5UGFyYW1ldGVyVmFsdWUoJ2dvb2dsZV9wcmV2aWV3JykgfHwgbnVsbCxcbiAgICAgICdwc3RzJzogZ2V0UGFnZXZpZXdTdGF0ZVRva2Vuc0ZvckFkUmVxdWVzdChpbnN0YW5jZXMpLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBibG9jay1sZXZlbCB1cmwgcGFyYW1ldGVycyB3aXRoIHNpZGUgZWZmZWN0IG9mIHNldHRpbmdcbiAgICogc2l6ZV8sIGpzb25UYXJnZXRpbmcsIGFuZCBhZEtleV8gZmllbGRzLlxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZyxzdHJpbmd8Ym9vbGVhbnxudW1iZXI+fVxuICAgKi9cbiAgZ2V0QmxvY2tQYXJhbWV0ZXJzXygpIHtcbiAgICBkZXYoKS5hc3NlcnQodGhpcy5pbml0aWFsU2l6ZV8pO1xuICAgIGRldigpLmFzc2VydCh0aGlzLmpzb25UYXJnZXRpbmcpO1xuICAgIGNvbnN0IHRmY2QgPSB0aGlzLmpzb25UYXJnZXRpbmcgJiYgdGhpcy5qc29uVGFyZ2V0aW5nW1RGQ0RdO1xuICAgIHRoaXMud2luWydhbXBBZEdvb2dsZUlmaUNvdW50ZXInXSA9IHRoaXMud2luWydhbXBBZEdvb2dsZUlmaUNvdW50ZXInXSB8fCAxO1xuICAgIHRoaXMuaWZpXyA9ICh0aGlzLmlzUmVmcmVzaGluZyAmJiB0aGlzLmlmaV8pIHx8XG4gICAgICAgIHRoaXMud2luWydhbXBBZEdvb2dsZUlmaUNvdW50ZXInXSsrO1xuICAgIGNvbnN0IHBhZ2VMYXlvdXRCb3ggPSB0aGlzLmlzU2luZ2xlUGFnZVN0b3J5QWQgP1xuICAgICAgdGhpcy5lbGVtZW50LmdldFBhZ2VMYXlvdXRCb3goKSA6IG51bGw7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgJ2l1JzogdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zbG90JyksXG4gICAgICAnY28nOiB0aGlzLmpzb25UYXJnZXRpbmcgJiZcbiAgICAgICAgICB0aGlzLmpzb25UYXJnZXRpbmdbJ2Nvb2tpZU9wdE91dCddID8gJzEnIDogbnVsbCxcbiAgICAgICdhZGsnOiB0aGlzLmFkS2V5LFxuICAgICAgJ3N6JzogdGhpcy5pc1NpbmdsZVBhZ2VTdG9yeUFkID8gJzF4MScgOiB0aGlzLnBhcmFtZXRlclNpemUsXG4gICAgICAnb3V0cHV0JzogJ2h0bWwnLFxuICAgICAgJ2ltcGwnOiAnaWZyJyxcbiAgICAgICd0ZmNkJzogdGZjZCA9PSB1bmRlZmluZWQgPyBudWxsIDogdGZjZCxcbiAgICAgICdhZHRlc3QnOiBpc0luTWFudWFsRXhwZXJpbWVudCh0aGlzLmVsZW1lbnQpID8gJ29uJyA6IG51bGwsXG4gICAgICAnaWZpJzogdGhpcy5pZmlfLFxuICAgICAgJ3JjJzogdGhpcy5yZWZyZXNoQ291bnRfIHx8IG51bGwsXG4gICAgICAnZnJjJzogTnVtYmVyKHRoaXMuZnJvbVJlc3VtZUNhbGxiYWNrKSB8fCBudWxsLFxuICAgICAgJ2ZsdWlkJzogdGhpcy5pc0ZsdWlkUmVxdWVzdF8gPyAnaGVpZ2h0JyA6IG51bGwsXG4gICAgICAnZnNmJzogdGhpcy5mb3JjZVNhZmVmcmFtZSA/ICcxJyA6IG51bGwsXG4gICAgICAnc2NwJzogc2VyaWFsaXplVGFyZ2V0aW5nKFxuICAgICAgICAgICh0aGlzLmpzb25UYXJnZXRpbmcgJiYgdGhpcy5qc29uVGFyZ2V0aW5nWyd0YXJnZXRpbmcnXSkgfHwgbnVsbCxcbiAgICAgICAgICAodGhpcy5qc29uVGFyZ2V0aW5nICYmXG4gICAgICAgICAgICB0aGlzLmpzb25UYXJnZXRpbmdbJ2NhdGVnb3J5RXhjbHVzaW9ucyddKSB8fCBudWxsKSxcbiAgICAgICdzcHNhJzogdGhpcy5pc1NpbmdsZVBhZ2VTdG9yeUFkID9cbiAgICAgICAgYCR7cGFnZUxheW91dEJveC53aWR0aH14JHtwYWdlTGF5b3V0Qm94LmhlaWdodH1gIDogbnVsbCxcbiAgICB9LCBnb29nbGVCbG9ja1BhcmFtZXRlcnModGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlJ3MgYmxvY2stbGV2ZWwgc3RhdGUgZm9yIGFkIFVSTCBjb25zdHJ1Y3Rpb24uXG4gICAqIEBwYXJhbSB7P0NPTlNFTlRfUE9MSUNZX1NUQVRFfSBjb25zZW50U3RhdGVcbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICBwb3B1bGF0ZUFkVXJsU3RhdGUoY29uc2VudFN0YXRlKSB7XG4gICAgdGhpcy5jb25zZW50U3RhdGUgPSBjb25zZW50U3RhdGU7XG4gICAgLy8gQWxsb3cgZm9yIHB1YiB0byBvdmVycmlkZSBoZWlnaHQvd2lkdGggdmlhIG92ZXJyaWRlIGF0dHJpYnV0ZS5cbiAgICBjb25zdCB3aWR0aCA9IE51bWJlcih0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW92ZXJyaWRlLXdpZHRoJykpIHx8XG4gICAgICBOdW1iZXIodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTnVtYmVyKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3ZlcnJpZGUtaGVpZ2h0JykpIHx8XG4gICAgICBOdW1iZXIodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpO1xuICAgIHRoaXMuaW5pdGlhbFNpemVfID0gdGhpcy5pc0ZsdWlkUmVxdWVzdF8gPyB7d2lkdGg6IDAsIGhlaWdodDogMH0gOlxuICAgICAgKHdpZHRoICYmIGhlaWdodCA/XG4gICAgICAgIC8vIHdpZHRoL2hlaWdodCBjb3VsZCBiZSAnYXV0bycgaW4gd2hpY2ggY2FzZSB3ZSBmYWxsYmFjayB0byBtZWFzdXJlZC5cbiAgICAgICAge3dpZHRoLCBoZWlnaHR9IDogdGhpcy5nZXRJbnRlcnNlY3Rpb25FbGVtZW50TGF5b3V0Qm94KCkpO1xuICAgIHRoaXMuanNvblRhcmdldGluZyA9XG4gICAgICB0cnlQYXJzZUpzb24odGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnanNvbicpKSB8fCB7fTtcbiAgICB0aGlzLmFkS2V5ID0gdGhpcy5nZW5lcmF0ZUFkS2V5XyhcbiAgICAgICAgYCR7dGhpcy5pbml0aWFsU2l6ZV8ud2lkdGh9eCR7dGhpcy5pbml0aWFsU2l6ZV8uaGVpZ2h0fWApO1xuICAgIHRoaXMucGFyYW1ldGVyU2l6ZSA9IHRoaXMuaXNGbHVpZFJlcXVlc3RfID9cbiAgICAgICczMjB4NTAnIDogYCR7dGhpcy5pbml0aWFsU2l6ZV8ud2lkdGh9eCR7dGhpcy5pbml0aWFsU2l6ZV8uaGVpZ2h0fWA7XG4gICAgY29uc3QgbXVsdGlTaXplRGF0YVN0ciA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbXVsdGktc2l6ZScpO1xuICAgIGlmIChtdWx0aVNpemVEYXRhU3RyKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnbGF5b3V0JykgPT0gJ3Jlc3BvbnNpdmUnKSB7XG4gICAgICAgIC8vIFRPRE8obGV2aXR6a3kpIERlZmluZSB0aGUgYmVoYXZpb3IgYW5kIHJlbW92ZSB0aGlzIHdhcm5pbmcuXG4gICAgICAgIHVzZXIoKS53YXJuKFRBRywgJ0JlaGF2aW9yIG9mIG11bHRpLXNpemUgYW5kIHJlc3BvbnNpdmUgbGF5b3V0IGlzICcgK1xuICAgICAgICAgICAgJ2N1cnJlbnRseSBub3Qgd2VsbCBkZWZpbmVkLiBGb3JjZWZ1bGx5IG92ZXJyaWRpbmcgbGF5b3V0IHRvICcgK1xuICAgICAgICAgICAgJ2BmaXhlZGAuJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2xheW91dCcsICdmaXhlZCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgbXVsdGlTaXplVmFsaWRhdGlvbiA9IHRoaXMuZWxlbWVudFxuICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbXVsdGktc2l6ZS12YWxpZGF0aW9uJykgfHwgJ3RydWUnO1xuICAgICAgLy8gVGhlIGZvbGxvd2luZyBjYWxsIHdpbGwgY2hlY2sgYWxsIHNwZWNpZmllZCBtdWx0aS1zaXplIGRpbWVuc2lvbnMsXG4gICAgICAvLyB2ZXJpZnkgdGhhdCB0aGV5IG1lZXQgYWxsIHJlcXVpcmVtZW50cywgYW5kIHRoZW4gcmV0dXJuIGFsbCB0aGUgdmFsaWRcbiAgICAgIC8vIGRpbWVuc2lvbnMgaW4gYW4gYXJyYXkuXG4gICAgICBjb25zdCBkaW1lbnNpb25zID0gZ2V0TXVsdGlTaXplRGltZW5zaW9ucyhcbiAgICAgICAgICBtdWx0aVNpemVEYXRhU3RyLFxuICAgICAgICAgIHRoaXMuaW5pdGlhbFNpemVfLndpZHRoLFxuICAgICAgICAgIHRoaXMuaW5pdGlhbFNpemVfLmhlaWdodCxcbiAgICAgICAgICBtdWx0aVNpemVWYWxpZGF0aW9uID09ICd0cnVlJyxcbiAgICAgICAgICB0aGlzLmlzRmx1aWRSZXF1ZXN0Xyk7XG4gICAgICBpZiAoZGltZW5zaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJTaXplICs9ICd8JyArIGRpbWVuc2lvbnNcbiAgICAgICAgICAgIC5tYXAoZGltZW5zaW9uID0+IGRpbWVuc2lvbi5qb2luKCd4JykpXG4gICAgICAgICAgICAuam9pbignfCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0Q29uc2VudFBvbGljeSgpIHtcbiAgICAvLyBFbnN1cmUgdGhhdCBidWlsZCBpcyBub3QgYmxvY2tlZCBieSBuZWVkIGZvciBjb25zZW50IChkZWxheSB3aWxsIG9jY3VyXG4gICAgLy8gcHJpb3IgdG8gUlRDICYgYWQgVVJMIGNvbnN0cnVjdGlvbikuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldEFkVXJsKGNvbnNlbnRTdGF0ZSwgb3B0X3J0Y1Jlc3BvbnNlc1Byb21pc2UpIHtcbiAgICBpZiAoY29uc2VudFN0YXRlID09IENPTlNFTlRfUE9MSUNZX1NUQVRFLlVOS05PV04gJiZcbiAgICAgICAgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1ucGEtb24tdW5rbm93bi1jb25zZW50JykgIT0gJ3RydWUnKSB7XG4gICAgICB1c2VyKCkuaW5mbyhUQUcsICdBZCByZXF1ZXN0IHN1cHByZXNzZWQgZHVlIHRvIHVua25vd24gY29uc2VudCcpO1xuICAgICAgdGhpcy5nZXRBZFVybERlZmVycmVkLnJlc29sdmUoJycpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlmcmFtZSAmJiAhdGhpcy5pc1JlZnJlc2hpbmcpIHtcbiAgICAgIGRldigpLndhcm4oVEFHLCBgRnJhbWUgYWxyZWFkeSBleGlzdHMsIHNyYTogJHt0aGlzLnVzZVNyYX1gKTtcbiAgICAgIHRoaXMuZ2V0QWRVcmxEZWZlcnJlZC5yZXNvbHZlKCcnKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICAgIH1cbiAgICBvcHRfcnRjUmVzcG9uc2VzUHJvbWlzZSA9IG9wdF9ydGNSZXNwb25zZXNQcm9taXNlIHx8IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIC8vIFRPRE8oa2VpdGh3cmlnaHRib3MpOiBTUkEgYmxvY2tzIGN1cnJlbnRseSB1bm5lY2Vzc2FyaWx5IGdlbmVyYXRlIGZ1bGxcbiAgICAvLyBhZCB1cmwuICBUaGlzIGNvdWxkIGJlIG9wdGltaXplZCBob3dldmVyIG5vbi1TUkEgYWQgdXJsIGlzIHJlcXVpcmVkIHRvXG4gICAgLy8gZmFsbGJhY2sgdG8gbm9uLVNSQSBpZiBzaW5nbGUgYmxvY2suXG4gICAgdGhpcy5wb3B1bGF0ZUFkVXJsU3RhdGUoY29uc2VudFN0YXRlKTtcbiAgICAvLyBUT0RPOiBDaGVjayBmb3IgcmVxdWlyZWQgYW5kIGFsbG93ZWQgcGFyYW1ldGVycy4gUHJvYmFibHkgdXNlXG4gICAgLy8gdmFsaWRhdGVEYXRhLCBmcm9tIDNwLzNwL2pzLCBhZnRlciBub3ZpbmcgaXQgc29tZXBsYWNlIGNvbW1vbi5cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGlkZW50aXR5UHJvbWlzZSA9IFNlcnZpY2VzLnRpbWVyRm9yKHRoaXMud2luKVxuICAgICAgICAudGltZW91dFByb21pc2UoMTAwMCwgdGhpcy5pZGVudGl0eVRva2VuUHJvbWlzZV8pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgLy8gT24gZXJyb3IvdGltZW91dCwgcHJvY2VlZC5cbiAgICAgICAgICByZXR1cm4gLyoqQHR5cGUgeyEuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS91dGlscy5JZGVudGl0eVRva2VufSovKHt9KTtcbiAgICAgICAgfSk7XG4gICAgY29uc3QgY2hlY2tTdGlsbEN1cnJlbnQgPSB0aGlzLnZlcmlmeVN0aWxsQ3VycmVudCgpO1xuICAgIFByb21pc2UuYWxsKFtvcHRfcnRjUmVzcG9uc2VzUHJvbWlzZSwgaWRlbnRpdHlQcm9taXNlXSlcbiAgICAgICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICBjb25zdCBydGNQYXJhbXMgPSB0aGlzLm1lcmdlUnRjUmVzcG9uc2VzXyhyZXN1bHRzWzBdKTtcbiAgICAgICAgICB0aGlzLmlkZW50aXR5VG9rZW4gPSByZXN1bHRzWzFdO1xuICAgICAgICAgIGdvb2dsZUFkVXJsKFxuICAgICAgICAgICAgICB0aGlzLCBET1VCTEVDTElDS19CQVNFX1VSTCwgc3RhcnRUaW1lLCBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgICAgdGhpcy5nZXRCbG9ja1BhcmFtZXRlcnNfKCksIHRoaXMuYnVpbGRJZGVudGl0eVBhcmFtcygpLFxuICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQYWdlUGFyYW1ldGVycyhjb25zZW50U3RhdGUpLCBydGNQYXJhbXMpLFxuICAgICAgICAgICAgICB0aGlzLmV4cGVyaW1lbnRJZHMpXG4gICAgICAgICAgICAgIC50aGVuKGFkVXJsID0+IHRoaXMuZ2V0QWRVcmxEZWZlcnJlZC5yZXNvbHZlKGFkVXJsKSk7XG4gICAgICAgIH0pO1xuICAgIHRoaXMudHJvdWJsZXNob290RGF0YV8uYWRVcmwgPSB0aGlzLmdldEFkVXJsRGVmZXJyZWQucHJvbWlzZTtcbiAgICByZXR1cm4gdGhpcy5nZXRBZFVybERlZmVycmVkLnByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgaWRlbnRpdHkgdG9rZW4gcmVzcG9uc2UgdG8gYWQgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZyxzdHJpbmc+fVxuICAgKi9cbiAgYnVpbGRJZGVudGl0eVBhcmFtcygpIHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eVRva2VuID8ge1xuICAgICAgYWRzaWQ6IHRoaXMuaWRlbnRpdHlUb2tlbi50b2tlbiB8fCBudWxsLFxuICAgICAgamFyOiB0aGlzLmlkZW50aXR5VG9rZW4uamFyIHx8IG51bGwsXG4gICAgICBwdWNyZDogdGhpcy5pZGVudGl0eVRva2VuLnB1Y3JkIHx8IG51bGwsXG4gICAgfSA6IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlcyBhbGwgb2YgdGhlIHJ0Y1Jlc3BvbnNlcyBpbnRvIHRoZSBKU09OIHRhcmdldGluZyBhbmRcbiAgICogY2F0ZWdvcnkgZXhjbHVzaW9ucy5cbiAgICogQHBhcmFtIHs/QXJyYXk8IXJ0Y1Jlc3BvbnNlRGVmPn0gcnRjUmVzcG9uc2VBcnJheVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWVyZ2VSdGNSZXNwb25zZXNfKHJ0Y1Jlc3BvbnNlQXJyYXkpIHtcbiAgICBpZiAoIXJ0Y1Jlc3BvbnNlQXJyYXkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBhcnRjID0gW107XG4gICAgY29uc3QgYXRpID0gW107XG4gICAgY29uc3QgYXJkID0gW107XG4gICAgbGV0IGV4Y2x1c2lvbnM7XG4gICAgcnRjUmVzcG9uc2VBcnJheS5mb3JFYWNoKHJ0Y1Jlc3BvbnNlID0+IHtcbiAgICAgIGlmICghcnRjUmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXJ0Yy5wdXNoKHJ0Y1Jlc3BvbnNlLnJ0Y1RpbWUpO1xuICAgICAgYXRpLnB1c2gocnRjUmVzcG9uc2UuZXJyb3IgfHwgUlRDX1NVQ0NFU1MpO1xuICAgICAgYXJkLnB1c2gocnRjUmVzcG9uc2UuY2FsbG91dCk7XG4gICAgICBpZiAocnRjUmVzcG9uc2UucmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJ0Y1Jlc3BvbnNlLnJlc3BvbnNlWyd0YXJnZXRpbmcnXSkge1xuICAgICAgICAgIGNvbnN0IHJld3JpdHRlblJlc3BvbnNlID0gdGhpcy5yZXdyaXRlUnRjS2V5c18oXG4gICAgICAgICAgICAgIHJ0Y1Jlc3BvbnNlLnJlc3BvbnNlWyd0YXJnZXRpbmcnXSxcbiAgICAgICAgICAgICAgcnRjUmVzcG9uc2UuY2FsbG91dCk7XG4gICAgICAgICAgdGhpcy5qc29uVGFyZ2V0aW5nWyd0YXJnZXRpbmcnXSA9XG4gICAgICAgICAgICAgICEhdGhpcy5qc29uVGFyZ2V0aW5nWyd0YXJnZXRpbmcnXSA/XG4gICAgICAgICAgICAgICAgZGVlcE1lcmdlKHRoaXMuanNvblRhcmdldGluZ1sndGFyZ2V0aW5nJ10sXG4gICAgICAgICAgICAgICAgICAgIHJld3JpdHRlblJlc3BvbnNlKSA6XG4gICAgICAgICAgICAgICAgcmV3cml0dGVuUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ0Y1Jlc3BvbnNlLnJlc3BvbnNlWydjYXRlZ29yeUV4Y2x1c2lvbnMnXSkge1xuICAgICAgICAgIGlmICghZXhjbHVzaW9ucykge1xuICAgICAgICAgICAgZXhjbHVzaW9ucyA9IHt9O1xuICAgICAgICAgICAgaWYgKHRoaXMuanNvblRhcmdldGluZ1snY2F0ZWdvcnlFeGNsdXNpb25zJ10pIHtcbiAgICAgICAgICAgICAgdGhpcy5qc29uVGFyZ2V0aW5nWydjYXRlZ29yeUV4Y2x1c2lvbnMnXS5mb3JFYWNoKGV4Y2x1c2lvbiA9PiB7XG4gICAgICAgICAgICAgICAgZXhjbHVzaW9uc1tleGNsdXNpb25dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJ0Y1Jlc3BvbnNlLnJlc3BvbnNlWydjYXRlZ29yeUV4Y2x1c2lvbnMnXS5mb3JFYWNoKGV4Y2x1c2lvbiA9PiB7XG4gICAgICAgICAgICBleGNsdXNpb25zW2V4Y2x1c2lvbl0gPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGV4Y2x1c2lvbnMpIHtcbiAgICAgIHRoaXMuanNvblRhcmdldGluZ1snY2F0ZWdvcnlFeGNsdXNpb25zJ10gPSBPYmplY3Qua2V5cyhleGNsdXNpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHsnYXJ0Yyc6IGFydGMuam9pbigpIHx8IG51bGwsICdhdGknOiBhdGkuam9pbigpLCAnYXJkJzogYXJkLmpvaW4oKX07XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldEN1c3RvbVJlYWxUaW1lQ29uZmlnTWFjcm9zXygpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdoaXRlbGlzdCBhbGxvdyBhdHRyaWJ1dGVzIG9uIHRoZSBhbXAtYWQgZWxlbWVudCB0byBiZSB1c2VkIGFzXG4gICAgICogbWFjcm9zIGZvciBjb25zdHJ1Y3RpbmcgdGhlIFJUQyBVUkwuIEFkZCBhdHRyaWJ1dGVzIGhlcmUsIGluIGxvd2VyY2FzZSxcbiAgICAgKiB0byBtYWtlIHRoZW0gYXZhaWxhYmxlLlxuICAgICAqL1xuICAgIGNvbnN0IHdoaXRlbGlzdCA9IHtcbiAgICAgICdoZWlnaHQnOiB0cnVlLFxuICAgICAgJ3dpZHRoJzogdHJ1ZSxcbiAgICAgICdkYXRhLXNsb3QnOiB0cnVlLFxuICAgICAgJ2RhdGEtbXVsdGktc2l6ZSc6IHRydWUsXG4gICAgICAnZGF0YS1tdWx0aS1zaXplLXZhbGlkYXRpb24nOiB0cnVlLFxuICAgICAgJ2RhdGEtb3ZlcnJpZGUtd2lkdGgnOiB0cnVlLFxuICAgICAgJ2RhdGEtb3ZlcnJpZGUtaGVpZ2h0JzogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBQQUdFVklFV0lEOiAoKSA9PiBTZXJ2aWNlcy5kb2N1bWVudEluZm9Gb3JEb2ModGhpcy5lbGVtZW50KS5wYWdlVmlld0lkLFxuICAgICAgSFJFRjogKCkgPT4gdGhpcy53aW4ubG9jYXRpb24uaHJlZixcbiAgICAgIFJFRkVSUkVSOiBvcHRfdGltZW91dCA9PiB0aGlzLmdldFJlZmVycmVyXyhvcHRfdGltZW91dCksXG4gICAgICBUR1Q6ICgpID0+XG4gICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgKHRyeVBhcnNlSnNvbihcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdqc29uJykpIHx8IHt9KVsndGFyZ2V0aW5nJ10pLFxuICAgICAgQURDSUQ6IG9wdF90aW1lb3V0ID0+IGdldE9yQ3JlYXRlQWRDaWQoXG4gICAgICAgICAgdGhpcy5nZXRBbXBEb2MoKSwgJ0FNUF9FQ0lEX0dPT0dMRScsICdfZ2EnLFxuICAgICAgICAgIHBhcnNlSW50KG9wdF90aW1lb3V0LCAxMCkpLFxuICAgICAgQVRUUjogbmFtZSA9PiB7XG4gICAgICAgIGlmICghd2hpdGVsaXN0W25hbWUudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgICAgICBkZXYoKS53YXJuKCdUQUcnLCBgSW52YWxpZCBhdHRyaWJ1dGUgJHtuYW1lfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgQ0FOT05JQ0FMX1VSTDogKCkgPT5cbiAgICAgICAgU2VydmljZXMuZG9jdW1lbnRJbmZvRm9yRG9jKHRoaXMuZWxlbWVudCkuY2Fub25pY2FsVXJsLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcmVmZXJyZXIgb3IgdW5kZWZpbmVkIGlmIHRoZSByZWZlcnJlciBpcyBub3QgcmVzb2x2ZWRcbiAgICogYmVmb3JlIHRoZSBnaXZlbiB0aW1lb3V0XG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X3RpbWVvdXRcbiAgICogQHJldHVybiB7IShQcm9taXNlPHN0cmluZz58UHJvbWlzZTx1bmRlZmluZWQ+KX0gQSBwcm9taXNlIHdpdGggYSByZWZlcnJlciBvciB1bmRlZmluZWRcbiAgICogaWYgdGltZWQgb3V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRSZWZlcnJlcl8ob3B0X3RpbWVvdXQpIHtcbiAgICBjb25zdCB0aW1lb3V0SW50ID0gcGFyc2VJbnQob3B0X3RpbWVvdXQsIDEwKTtcbiAgICBjb25zdCByZWZlcnJlclByb21pc2UgPSBTZXJ2aWNlcy52aWV3ZXJGb3JEb2ModGhpcy5nZXRBbXBEb2MoKSlcbiAgICAgICAgLmdldFJlZmVycmVyVXJsKCk7XG4gICAgaWYgKGlzTmFOKHRpbWVvdXRJbnQpIHx8IHRpbWVvdXRJbnQgPCAwKSB7XG4gICAgICByZXR1cm4gcmVmZXJyZXJQcm9taXNlO1xuICAgIH1cbiAgICByZXR1cm4gU2VydmljZXMudGltZXJGb3IodGhpcy53aW4pXG4gICAgICAgIC50aW1lb3V0UHJvbWlzZSh0aW1lb3V0SW50LCByZWZlcnJlclByb21pc2UpXG4gICAgICAgIC5jYXRjaCgoKSA9PiB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGNhbGxvdXQgdmFsdWUgdG8gdGhlIGtleXMgb2YgcmVzcG9uc2UgdG8gcHJldmVudCBhIGNvbGxpc2lvblxuICAgKiBjYXNlIGNhdXNlZCBieSBtdWx0aXBsZSB2ZW5kb3JzIHJldHVybmluZyB0aGUgc2FtZSBrZXlzLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSByZXNwb25zZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbG91dFxuICAgKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJld3JpdGVSdGNLZXlzXyhyZXNwb25zZSwgY2FsbG91dCkge1xuICAgIC8vIE9ubHkgcGVyZm9ybSB0aGlzIHN1YnN0aXR1dGlvbiBmb3IgdmVuZG9yLWRlZmluZWQgVVJMcy5cbiAgICBpZiAoIVJUQ19WRU5ET1JTW2NhbGxvdXRdIHx8IFJUQ19WRU5ET1JTW2NhbGxvdXRdLmRpc2FibGVLZXlBcHBlbmQpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgY29uc3QgbmV3UmVzcG9uc2UgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhyZXNwb25zZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgbmV3UmVzcG9uc2VbYCR7a2V5fV8ke2NhbGxvdXR9YF0gPSByZXNwb25zZVtrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdSZXNwb25zZTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgb25OZXR3b3JrRmFpbHVyZShlcnJvciwgYWRVcmwpIHtcbiAgICBkZXYoKS5pbmZvKFRBRywgJ25ldHdvcmsgZXJyb3IsIGF0dGVtcHQgYWRkaW5nIG9mIGVycm9yIHBhcmFtZXRlcicsIGVycm9yKTtcbiAgICByZXR1cm4ge2FkVXJsOiBtYXliZUFwcGVuZEVycm9yUGFyYW1ldGVyKGFkVXJsLCAnbicpfTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZXh0cmFjdFNpemUocmVzcG9uc2VIZWFkZXJzKSB7XG4gICAgdGhpcy5hbXBBbmFseXRpY3NDb25maWdfID0gZXh0cmFjdEFtcEFuYWx5dGljc0NvbmZpZyh0aGlzLCByZXNwb25zZUhlYWRlcnMpO1xuICAgIHRoaXMucXFpZF8gPSByZXNwb25zZUhlYWRlcnMuZ2V0KFFRSURfSEVBREVSKTtcbiAgICB0aGlzLnRyb3VibGVzaG9vdERhdGFfLmNyZWF0aXZlSWQgPVxuICAgICAgICByZXNwb25zZUhlYWRlcnMuZ2V0KCdnb29nbGUtY3JlYXRpdmUtaWQnKTtcbiAgICB0aGlzLnRyb3VibGVzaG9vdERhdGFfLmxpbmVJdGVtSWQgPVxuICAgICAgICByZXNwb25zZUhlYWRlcnMuZ2V0KCdnb29nbGUtbGluZWl0ZW0taWQnKTtcbiAgICBpZiAodGhpcy5hbXBBbmFseXRpY3NDb25maWdfKSB7XG4gICAgICAvLyBMb2FkIGFtcC1hbmFseXRpY3MgZXh0ZW5zaW9uc1xuICAgICAgdGhpcy5leHRlbnNpb25zXy4vKk9LKi9pbnN0YWxsRXh0ZW5zaW9uRm9yRG9jKFxuICAgICAgICAgIHRoaXMuZ2V0QW1wRG9jKCksICdhbXAtYW5hbHl0aWNzJyk7XG4gICAgfVxuICAgIC8vIElmIHRoZSBzZXJ2ZXIgcmV0dXJuZWQgYSBzaXplLCB1c2UgdGhhdCwgb3RoZXJ3aXNlIHVzZSB0aGUgc2l6ZSB0aGF0IHdlXG4gICAgLy8gc2VudCBpbiB0aGUgYWQgcmVxdWVzdC5cbiAgICBsZXQgc2l6ZSA9IHN1cGVyLmV4dHJhY3RTaXplKHJlc3BvbnNlSGVhZGVycyk7XG4gICAgaWYgKHNpemUpIHtcbiAgICAgIHRoaXMucmV0dXJuZWRTaXplXyA9IHNpemU7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZV8oc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gdGhpcy5nZXRTbG90U2l6ZSgpO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGEgbXVsdGktc2l6ZSBjcmVhdGl2ZSwgZmlyZSBkZWxheWVkIGltcHJlc3Npb24gbm93LiBJZiBpdCdzXG4gICAgLy8gZmx1aWQsIHdhaXQgdW50aWwgYWZ0ZXIgcmVzaXplIGhhcHBlbnMuXG4gICAgaWYgKHRoaXMuaXNGbHVpZFJlcXVlc3RfICYmICF0aGlzLnJldHVybmVkU2l6ZV8pIHtcbiAgICAgIHRoaXMuZmx1aWRJbXByZXNzaW9uVXJsXyA9IHJlc3BvbnNlSGVhZGVycy5nZXQoJ1gtQW1wSW1wcycpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSByZXNwb25zZSBpbmNsdWRlZCBhIHBhZ2V2aWV3IHN0YXRlIHRva2VuLCBjaGVjayBmb3IgYW4gZXhpc3RpbmdcbiAgICAvLyB0b2tlbiBhbmQgcmVtb3ZlIGl0LiBUaGVuIHNhdmUgdGhlIG5ldyBvbmUgdG8gdGhlIG1vZHVsZSBsZXZlbCBvYmplY3QuXG4gICAgaWYgKHJlc3BvbnNlSGVhZGVycy5nZXQoJ2FtcC1mZi1wYWdldmlldy10b2tlbnMnKSkge1xuICAgICAgdGhpcy5yZW1vdmVQYWdldmlld1N0YXRlVG9rZW4oKTtcbiAgICAgIHRoaXMuc2V0UGFnZXZpZXdTdGF0ZVRva2VuKFxuICAgICAgICAgIHJlc3BvbnNlSGVhZGVycy5nZXQoJ2FtcC1mZi1wYWdldmlldy10b2tlbnMnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpemU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgc2xvdCBhcyBkZWZpbmVkIGJ5IHRoZSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAqIGF0dHJpYnV0ZXMsIG9yIHRoZSBkaW1lbnNpb25zIGFzIGNvbXB1dGVkIGJ5XG4gICAqIGdldEludGVyc2VjdGlvbkVsZW1lbnRMYXlvdXRCb3guXG4gICAqIEByZXR1cm4ge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn18Li4vLi4vLi4vc3JjL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9XG4gICAqL1xuICBnZXRTbG90U2l6ZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IE51bWJlcih0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd3aWR0aCcpKTtcbiAgICBjb25zdCBoZWlnaHQgPSBOdW1iZXIodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpO1xuICAgIHJldHVybiB3aWR0aCAmJiBoZWlnaHRcbiAgICAgID8ge3dpZHRoLCBoZWlnaHR9XG4gICAgICAvLyB3aWR0aC9oZWlnaHQgY291bGQgYmUgJ2F1dG8nIGluIHdoaWNoIGNhc2Ugd2UgZmFsbGJhY2sgdG8gbWVhc3VyZWQuXG4gICAgICA6IHRoaXMuZ2V0SW50ZXJzZWN0aW9uRWxlbWVudExheW91dEJveCgpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB0ZWFyRG93blNsb3QoKSB7XG4gICAgc3VwZXIudGVhckRvd25TbG90KCk7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1hbXAtc2xvdC1pbmRleCcsXG4gICAgICAgIHRoaXMud2luLmFtcEFkU2xvdElkQ291bnRlcisrKTtcbiAgICBpZiAodGhpcy5hbXBBbmFseXRpY3NFbGVtZW50Xykge1xuICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmFtcEFuYWx5dGljc0VsZW1lbnRfKTtcbiAgICAgIHRoaXMuYW1wQW5hbHl0aWNzRWxlbWVudF8gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmFtcEFuYWx5dGljc0NvbmZpZ18gPSBudWxsO1xuICAgIHRoaXMuanNvblRhcmdldGluZyA9IG51bGw7XG4gICAgdGhpcy5pc0FtcENyZWF0aXZlXyA9IG51bGw7XG4gICAgdGhpcy5pc0lkbGVSZW5kZXJfID0gZmFsc2U7XG4gICAgdGhpcy5wYXJhbWV0ZXJTaXplID0gbnVsbDtcbiAgICB0aGlzLnJldHVybmVkU2l6ZV8gPSBudWxsO1xuICAgIC8vIFJlc2V0IFNSQSByZXF1ZXN0cyB0byBhbGxvdyBmb3IgcmVzdW1lQ2FsbGJhY2sgdG8gcmUtZmV0Y2hcbiAgICAvLyBhZCByZXF1ZXN0cy4gIEFzc3VtZXMgdGhhdCB1bmxheW91dENhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGZvciBhbGwgc2xvdHNcbiAgICAvLyBpbiByYXBpZCBzdWNjZXNzaW9uIChtZWFuaW5nIG9uTGF5b3V0TWVhc3VyZSBpbml0aWF0ZWQgcHJvbWlzZSBjaGFpblxuICAgIC8vIHdpbGwgbm90IGJlIHN0YXJ0ZWQgdW50aWwgcmVzdW1lQ2FsbGJhY2spLlxuICAgIHNyYVJlcXVlc3RzID0gbnVsbDtcbiAgICB0aGlzLnNyYURlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgdGhpcy5xcWlkXyA9IG51bGw7XG4gICAgdGhpcy5jb25zZW50U3RhdGUgPSBudWxsO1xuICAgIHRoaXMuZ2V0QWRVcmxEZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIHRoaXMucmVtb3ZlUGFnZXZpZXdTdGF0ZVRva2VuKCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHJlbmRlck5vbkFtcENyZWF0aXZlKCkge1xuICAgIC8vIElmIHJlbmRlciBpZGxlIHdpdGggdGhyb3R0bGluZywgaW1wb3NlIG9uZSBzZWNvbmQgcmVuZGVyIGRlbGF5IGZvclxuICAgIC8vIG5vbi1BTVAgY3JlYXRpdmVzLiAgVGhpcyBpcyBub3QgZG9uZSBpbiB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSBhcyBtYW55XG4gICAgLy8gc2xvdHMgYXMgcG9zc2libGUgYXJlIG1hcmtlZCBmb3IgbGF5b3V0IGdpdmVuIHNjaGVkdWxlciBpbXBvc2VzIDUgc2Vjb25kc1xuICAgIC8vIHBhc3QgcHJldmlvdXMgZXhlY3V0aW9uLlxuICAgIGlmICh0aGlzLnBvc3RBZFJlc3BvbnNlRXhwZXJpbWVudEZlYXR1cmVzWydyZW5kZXItaWRsZS10aHJvdHRsZSddICYmXG4gICAgICAgICAgdGhpcy5pc0lkbGVSZW5kZXJfKSB7XG4gICAgICBpZiAoaXMzcFRocm90dGxlZCh0aGlzLndpbikpIHtcbiAgICAgICAgcmV0dXJuIHdhaXRGb3IzcFRocm90dGxlKCkudGhlbigoKSA9PiBzdXBlci5yZW5kZXJOb25BbXBDcmVhdGl2ZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluY3JlbWVudExvYWRpbmdBZHModGhpcy53aW4pO1xuICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyTm9uQW1wQ3JlYXRpdmUodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5yZW5kZXJOb25BbXBDcmVhdGl2ZSgpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAgKi9cbiAgdW5sYXlvdXRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5yZWZyZXNoTWFuYWdlcl8pIHtcbiAgICAgIHRoaXMucmVmcmVzaE1hbmFnZXJfLnVub2JzZXJ2ZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMudXNlU3JhICYmIHRoaXMuaXNBbXBDcmVhdGl2ZV8pIHtcbiAgICAgIC8vIEFsbG93IG5vbi1BTVAgY3JlYXRpdmVzIHRvIHJlbWFpbiB1bmxlc3MgU1JBLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmRlc3Ryb3lTYWZlRnJhbWVBcGlfKCk7XG4gICAgcmV0dXJuIHN1cGVyLnVubGF5b3V0Q2FsbGJhY2soKTtcbiAgfVxuXG4gIC8qKiBAdmlzaWJsZUZvclRlc3RpbmcgKi9cbiAgY2xlYW51cEFmdGVyVGVzdCgpIHtcbiAgICB0aGlzLmRlc3Ryb3lTYWZlRnJhbWVBcGlfKCk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgZGVzdHJveVNhZmVGcmFtZUFwaV8oKSB7XG4gICAgaWYgKCF0aGlzLnNhZmVmcmFtZUFwaV8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zYWZlZnJhbWVBcGlfLmRlc3Ryb3koKTtcbiAgICB0aGlzLnNhZmVmcmFtZUFwaV8gPSBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICByZWZyZXNoKHJlZnJlc2hFbmRDYWxsYmFjaykge1xuICAgIHRoaXMucmVmcmVzaENvdW50XysrO1xuICAgIHJldHVybiBzdXBlci5yZWZyZXNoKHJlZnJlc2hFbmRDYWxsYmFjayk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIG9uQ3JlYXRpdmVSZW5kZXIoY3JlYXRpdmVNZXRhRGF0YSkge1xuICAgIHN1cGVyLm9uQ3JlYXRpdmVSZW5kZXIoY3JlYXRpdmVNZXRhRGF0YSk7XG4gICAgdGhpcy5pc0FtcENyZWF0aXZlXyA9ICEhY3JlYXRpdmVNZXRhRGF0YTtcbiAgICBpZiAoY3JlYXRpdmVNZXRhRGF0YSAmJlxuICAgICAgICAhY3JlYXRpdmVNZXRhRGF0YS5jdXN0b21FbGVtZW50RXh0ZW5zaW9ucy5pbmNsdWRlcygnYW1wLWFkLWV4aXQnKSkge1xuICAgICAgLy8gQ2FwdHVyZSBwaGFzZSBjbGljayBoYW5kbGVycyBvbiB0aGUgYWQgaWYgYW1wLWFkLWV4aXQgbm90IHByZXNlbnRcbiAgICAgIC8vIChhc3N1bWUgaXQgd2lsbCBoYW5kbGUgY2FwdHVyZSkuXG4gICAgICBkZXYoKS5hc3NlcnQodGhpcy5pZnJhbWUpO1xuICAgICAgTmF2aWdhdGlvbi5pbnN0YWxsQW5jaG9yQ2xpY2tJbnRlcmNlcHRvcihcbiAgICAgICAgICB0aGlzLmdldEFtcERvYygpLCB0aGlzLmlmcmFtZS5jb250ZW50V2luZG93KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYW1wQW5hbHl0aWNzQ29uZmlnXykge1xuICAgICAgZGV2KCkuYXNzZXJ0KCF0aGlzLmFtcEFuYWx5dGljc0VsZW1lbnRfKTtcbiAgICAgIGlmIChpc1JlcG9ydGluZ0VuYWJsZWQodGhpcykpIHtcbiAgICAgICAgYWRkQ3NpU2lnbmFsc1RvQW1wQW5hbHl0aWNzQ29uZmlnKFxuICAgICAgICAgICAgdGhpcy53aW4sXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICB0aGlzLmFtcEFuYWx5dGljc0NvbmZpZ18sXG4gICAgICAgICAgICB0aGlzLnFxaWRfLFxuICAgICAgICAgICAgISFjcmVhdGl2ZU1ldGFEYXRhKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYW1wQW5hbHl0aWNzRWxlbWVudF8gPSBpbnNlcnRBbmFseXRpY3NFbGVtZW50KFxuICAgICAgICAgIHRoaXMuZWxlbWVudCwgdGhpcy5hbXBBbmFseXRpY3NDb25maWdfLCAvKmxvYWRBbmFseXRpY3MqLyB0cnVlLFxuICAgICAgICAgICEhdGhpcy5wb3N0QWRSZXNwb25zZUV4cGVyaW1lbnRGZWF0dXJlc1snYXZyX2Rpc2FibGVfaW1tZWRpYXRlJ10pO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc1JlZnJlc2hpbmcpIHtcbiAgICAgIGRldigpLmFzc2VydCh0aGlzLnJlZnJlc2hNYW5hZ2VyXyk7XG4gICAgICB0aGlzLnJlZnJlc2hNYW5hZ2VyXy5pbml0aWF0ZVJlZnJlc2hDeWNsZSgpO1xuICAgICAgdGhpcy5pc1JlZnJlc2hpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuaXNSZWxheW91dE5lZWRlZEZsYWcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBzaXplIG9mIGZyYW1lIHRvIG1hdGNoIGNyZWF0aXZlIG9yLCBpZiBjcmVhdGl2ZSBzaXplIGlzIHVua25vd24sXG4gICAgLy8gdGhlIHNsb3QuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBjcmVhdGl2ZSBpcyBjZW50ZXJlZCBpbiB0aGUgZm9ybWVyIGNhc2UsXG4gICAgLy8gYW5kIG5vdCB0cnVuY2F0ZWQgaW4gdGhlIGxhdHRlci5cbiAgICBjb25zdCBzaXplID0gdGhpcy5yZXR1cm5lZFNpemVfIHx8IHRoaXMuZ2V0U2xvdFNpemUoKTtcbiAgICBjb25zdCBpc011bHRpU2l6ZUZsdWlkID0gdGhpcy5pc0ZsdWlkUmVxdWVzdF8gJiYgdGhpcy5yZXR1cm5lZFNpemVfICYmXG4gICAgICAgIC8vIFRPRE8oQGdsZXZpdHpreSwgMTE1ODMpIFJlbW92ZSB0aGlzIGNsYXVzZSBvbmNlIHdlIHN0b3Agc2VuZGluZyBiYWNrXG4gICAgICAgIC8vIHRoZSBzaXplIGhlYWRlciBmb3IgZmx1aWQgYWRzLiBGbHVpZCBzaXplIGhlYWRlcnMgYWx3YXlzIGNvbWUgYmFjayBhc1xuICAgICAgICAvLyAweDAuXG4gICAgICAgICEoc2l6ZS53aWR0aCA9PSAwICYmIHNpemUuaGVpZ2h0ID09IDApO1xuICAgIHNldFN0eWxlcyhkZXYoKS5hc3NlcnRFbGVtZW50KHRoaXMuaWZyYW1lKSwge1xuICAgICAgd2lkdGg6IGAke3NpemUud2lkdGh9cHhgLFxuICAgICAgaGVpZ2h0OiBgJHtzaXplLmhlaWdodH1weGAsXG4gICAgICBwb3NpdGlvbjogaXNNdWx0aVNpemVGbHVpZCA/ICdyZWxhdGl2ZScgOiBudWxsLFxuICAgIH0pO1xuICAgIGlmIChpc011bHRpU2l6ZUZsdWlkKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgZmx1aWQgKyBtdWx0aS1zaXplIHJlcXVlc3QsIHdoZXJlIHRoZSByZXR1cm5lZCBjcmVhdGl2ZSBpc1xuICAgICAgLy8gbXVsdGktc2l6ZS4gVGhlIHNsb3QgbmVlZHMgdG8gbm90IGJlIHN0eWxlZCB3aXRoIHdpZHRoOiAxMDAlLCBvciB0aGVcbiAgICAgIC8vIGNyZWF0aXZlIHdpbGwgYmUgY2VudGVyZWQgaW5zdGVhZCBvZiBsZWZ0LWFsaWduZWQuXG4gICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgICAgIHNldFN0eWxlcyh0aGlzLmVsZW1lbnQsIHt3aWR0aDogYCR7c2l6ZS53aWR0aH1weGB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZnJlc2hNYW5hZ2VyXyA9IHRoaXMucmVmcmVzaE1hbmFnZXJfIHx8XG4gICAgICAgIGdldFJlZnJlc2hNYW5hZ2VyKHRoaXMsICgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy51c2VTcmEpIHtcbiAgICAgICAgICAgIHVzZXIoKS53YXJuKFRBRywgJ1JlZnJlc2ggbm90IGNvbXBhdGlibGUgd2l0aCBTUkEuJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChnZXRFbmNsb3NpbmdDb250YWluZXJUeXBlcyh0aGlzLmVsZW1lbnQpLmZpbHRlcihjb250YWluZXIgPT5cbiAgICAgICAgICAgIGNvbnRhaW5lciAhPSBWYWxpZEFkQ29udGFpbmVyVHlwZXNbJ0FNUC1DQVJPVVNFTCddICYmXG4gICAgICAgICAgICAgICAgY29udGFpbmVyICE9IFZhbGlkQWRDb250YWluZXJUeXBlc1snQU1QLVNUSUNLWS1BRCddKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHVzZXIoKS53YXJuKFRBRyxcbiAgICAgICAgICAgICAgICAnUmVmcmVzaCBub3QgY29tcGF0aWJsZSB3aXRoIGFkLWNvbnRhaW5lcnMsIGV4Y2VwdCBmb3IgJyArXG4gICAgICAgICAgICAgICAgJ0FNUC1DQVJPVVNFTCBhbmQgQU1QLVNUSUNLWS1BRCcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICB0aGlzLnBvc3RUcm91Ymxlc2hvb3RNZXNzYWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNpemVcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgYWQgdW5pdCBoYXNoIGtleSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZW5lcmF0ZUFkS2V5XyhzaXplKSB7XG4gICAgY29uc3Qge2VsZW1lbnR9ID0gdGhpcztcbiAgICBjb25zdCBkb21GaW5nZXJwcmludCA9IGRvbUZpbmdlcnByaW50UGxhaW4oZWxlbWVudCk7XG4gICAgY29uc3Qgc2xvdCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNsb3QnKSB8fCAnJztcbiAgICBjb25zdCBtdWx0aVNpemUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1tdWx0aS1zaXplJykgfHwgJyc7XG4gICAgY29uc3Qgc3RyaW5nID0gYCR7c2xvdH06JHtzaXplfToke211bHRpU2l6ZX06JHtkb21GaW5nZXJwcmludH1gO1xuICAgIHJldHVybiBzdHJpbmdIYXNoMzIoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byByZXNpemUgdGhlIGFkLCBpZiB0aGUgcmV0dXJuZWQgc2l6ZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByaW1hcnlcbiAgICogZGltZW5zaW9ucy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZVJlc2l6ZV8od2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IHBXaWR0aCA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gICAgY29uc3QgcEhlaWdodCA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIC8vIFdlIHdhbnQgdG8gcmVzaXplIG9ubHkgaWYgbmVpdGhlciByZXR1cm5lZCBkaW1lbnNpb24gaXMgbGFyZ2VyIHRoYW4gaXRzXG4gICAgLy8gcHJpbWFyeSBjb3VudGVycGFydCwgYW5kIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgcmV0dXJuZWQgZGltZW5zaW9uc1xuICAgIC8vIGRpZmZlciBmcm9tIGl0cyBwcmltYXJ5IGNvdW50ZXJwYXJ0LlxuICAgIGlmICgodGhpcy5pc0ZsdWlkUmVxdWVzdF8gJiYgd2lkdGggJiYgaGVpZ2h0KSB8fFxuICAgICAgICAoKHdpZHRoICE9IHBXaWR0aCB8fCBoZWlnaHQgIT0gcEhlaWdodCkgJiZcbiAgICAgICAgICh3aWR0aCA8PSBwV2lkdGggJiYgaGVpZ2h0IDw9IHBIZWlnaHQpKSkge1xuICAgICAgdGhpcy5hdHRlbXB0Q2hhbmdlU2l6ZShoZWlnaHQsIHdpZHRoKS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzZW5kWGhyUmVxdWVzdChhZFVybCkge1xuICAgIGlmICghdGhpcy51c2VTcmEpIHtcbiAgICAgIHJldHVybiBzdXBlci5zZW5kWGhyUmVxdWVzdChhZFVybCk7XG4gICAgfVxuICAgIC8vIFdhaXQgZm9yIFNSQSByZXF1ZXN0IHdoaWNoIHdpbGwgY2FsbCByZXNwb25zZSBwcm9taXNlIHdoZW4gdGhpcyBibG9jaydzXG4gICAgLy8gcmVzcG9uc2UgaGFzIGJlZW4gcmV0dXJuZWQuXG4gICAgdGhpcy5pbml0aWF0ZVNyYVJlcXVlc3RzKCk7XG4gICAgLy8gTnVsbCByZXNwb25zZSBpbmRpY2F0ZXMgc2luZ2xlIHNsb3Qgc2hvdWxkIGV4ZWN1dGUgdXNpbmcgbm9uLVNSQSBtZXRob2QuXG4gICAgcmV0dXJuIHRoaXMuc3JhRGVmZXJyZWQucHJvbWlzZS50aGVuKFxuICAgICAgICByZXNwb25zZSA9PiByZXNwb25zZSB8fCBzdXBlci5zZW5kWGhyUmVxdWVzdChhZFVybCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbXByZXNzaW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzY3J1YlJlZmVyZXJcbiAgICogQHZpc2libGVGb3JUZXN0aW5nXG4gICAqL1xuICBmaXJlRGVsYXllZEltcHJlc3Npb25zKGltcHJlc3Npb25zLCBzY3J1YlJlZmVyZXIpIHtcbiAgICBpZiAoIWltcHJlc3Npb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGltcHJlc3Npb25zLnNwbGl0KCcsJykuZm9yRWFjaCh1cmwgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFpc1NlY3VyZVVybERlcHJlY2F0ZWQodXJsKSkge1xuICAgICAgICAgIGRldigpLndhcm4oVEFHLCBgaW5zZWN1cmUgaW1wcmVzc2lvbiB1cmw6ICR7dXJsfWApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDcmVhdGUgYW1wLXBpeGVsIGFuZCBhcHBlbmQgdG8gZG9jdW1lbnQgdG8gc2VuZCBpbXByZXNzaW9uLlxuICAgICAgICB0aGlzLndpbi5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudFdpdGhBdHRyaWJ1dGVzKFxuICAgICAgICAgICAgICAgIHRoaXMud2luLmRvY3VtZW50LFxuICAgICAgICAgICAgICAgICdhbXAtcGl4ZWwnLFxuICAgICAgICAgICAgICAgIGRpY3Qoe1xuICAgICAgICAgICAgICAgICAgJ3NyYyc6IHVybCxcbiAgICAgICAgICAgICAgICAgICdyZWZlcnJlcnBvbGljeSc6IHNjcnViUmVmZXJlciA/ICduby1yZWZlcnJlcicgOiAnJyxcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgfSBjYXRjaCAodW51c2VkRXJyb3IpIHt9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR3JvdXBzIHNsb3RzIGJ5IHR5cGUgYW5kIG5ldHdvcmtJZCBmcm9tIGRhdGEtc2xvdCBwYXJhbWV0ZXIuICBFeHBvc2VkIGZvclxuICAgKiBlYXNlIG9mIHRlc3RpbmcuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCFPYmplY3Q8c3RyaW5nLCFBcnJheTwhUHJvbWlzZTwhLi4vLi4vLi4vc3JjL2Jhc2UtZWxlbWVudC5CYXNlRWxlbWVudD4+Pj59XG4gICAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICAgKi9cbiAgZ3JvdXBTbG90c0ZvclNyYSgpIHtcbiAgICByZXR1cm4gZ3JvdXBBbXBBZHNCeVR5cGUoXG4gICAgICAgIHRoaXMud2luLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyksIGdldE5ldHdvcmtJZCk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgU1JBIHJlcXVlc3QgdmlhIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAqIC0gY3JlYXRlIG9ubHkgb25lIGV4ZWN1dG9yIHBlciBwYWdlXG4gICAqIC0gZ2V0IGFsbCBkb3VibGVjbGljayBhbXAtYWQgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gICAqIC0gZ3JvdXAgYnkgbmV0d29ya0lEIGFsbG93aW5nIGZvciBzZXBhcmF0ZSBTUkEgcmVxdWVzdHNcbiAgICogLSBmb3IgZWFjaCBncm91cGluZywgY29uc3RydWN0IFNSQSByZXF1ZXN0XG4gICAqIC0gaGFuZGxlIGNodW5rcyBmb3Igc3RyZWFtaW5nIHJlc3BvbnNlIGZvciBlYWNoIGJsb2NrXG4gICAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICAgKi9cbiAgaW5pdGlhdGVTcmFSZXF1ZXN0cygpIHtcbiAgICBpZiAoc3JhUmVxdWVzdHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVXNlIGNhbmNlbGxhdGlvbiBvZiB0aGUgZmlyc3Qgc2xvdCdzIHByb21pc2VJZCBhcyBpbmRpY2F0aW9uIG9mXG4gICAgLy8gdW5sYXlvdXRDYWxsYmFjayBleGVjdXRpb24uICBBc3N1bWUgdGhhdCBpZiBjYWxsZWQgZm9yIG9uZSBzbG90LCBpdCB3aWxsXG4gICAgLy8gYmUgY2FsbGVkIGZvciBhbGwgYW5kIHdlIHNob3VsZCBjYW5jZWwgU1JBIGV4ZWN1dGlvbi5cbiAgICBjb25zdCBjaGVja1N0aWxsQ3VycmVudCA9IHRoaXMudmVyaWZ5U3RpbGxDdXJyZW50KCk7XG4gICAgc3JhUmVxdWVzdHMgPSB0aGlzLmdyb3VwU2xvdHNGb3JTcmEoKVxuICAgICAgICAudGhlbihncm91cElkVG9CbG9ja3NBcnkgPT4ge1xuICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBJZFRvQmxvY2tzQXJ5KS5mb3JFYWNoKG5ldHdvcmtJZCA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9ja3MgPSBkZXYoKS5hc3NlcnQoZ3JvdXBJZFRvQmxvY2tzQXJ5W25ldHdvcmtJZF0pO1xuICAgICAgICAgICAgLy8gVE9ETzogZmlsdGVyIGJsb2NrcyB3aXRoIFNSQSBkaXNhYmxlZD9cbiAgICAgICAgICAgIFByb21pc2UuYWxsKGJsb2NrcykudGhlbihpbnN0YW5jZXMgPT4ge1xuICAgICAgICAgICAgICBkZXYoKS5hc3NlcnQoaW5zdGFuY2VzLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgICAgIC8vIEV4Y2x1ZGUgYW55IGluc3RhbmNlcyB0aGF0IGRvIG5vdCBoYXZlIGFuIGFkUHJvbWlzZV8gYXMgdGhpc1xuICAgICAgICAgICAgICAvLyBpbmRpY2F0ZXMgdGhleSB3ZXJlIGludmFsaWQuXG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVJbnN0YW5jZXMgPVxuICAgICAgICAgICAgICAvKiogQHR5cGUgeyFBcnJheTwhQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0qLyhpbnN0YW5jZXMpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaW5zdGFuY2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBpbnN0YW5jZS5oYXNBZFByb21pc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldigpLmluZm8oVEFHLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJZ25vcmluZyBpbnN0YW5jZSB3aXRob3V0IGFkIHByb21pc2UgYXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xpa2VseSBpbnZhbGlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIXR5cGVJbnN0YW5jZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIE9ubHkgY29udGFpbmVkIGludmFsaWQgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBtb3JlIHRoYW4gb25lIGJsb2NrIGZvciB0aGlzIGVsZW1lbnQsIGlmIG5vdCBkb1xuICAgICAgICAgICAgICAvLyBub3Qgc2V0IHNyYSByZXF1ZXN0IHByb21pc2Ugd2hpY2ggcmVzdWx0cyBpbiBzZW5kaW5nIGFzIG5vbi1TUkFcbiAgICAgICAgICAgICAgLy8gcmVxdWVzdCAoYmVuZWZpdCBpcyBpdCBhbGxvd3MgZGlyZWN0IGNhY2hlIG1ldGhvZCkuXG4gICAgICAgICAgICAgIGlmICh0eXBlSW5zdGFuY2VzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgZGV2KCkuaW5mbyhUQUcsIGBzaW5nbGUgYmxvY2sgaW4gbmV0d29yayAke25ldHdvcmtJZH1gKTtcbiAgICAgICAgICAgICAgICB0eXBlSW5zdGFuY2VzWzBdLnNyYURlZmVycmVkLnJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxldCBzcmFVcmw7XG4gICAgICAgICAgICAgIC8vIENvbnN0cnVjdCBhbmQgc2VuZCBTUkEgcmVxdWVzdC5cbiAgICAgICAgICAgICAgLy8gQ2h1bmsgaGFuZGxlciBjYWxsZWQgd2l0aCBtZXRhZGF0YSBhbmQgY3JlYXRpdmUgZm9yIGVhY2ggc2xvdFxuICAgICAgICAgICAgICAvLyBpbiBvcmRlciBvZiBVUkxzIGdpdmVuIHdoaWNoIGlzIHRoZW4gcGFzc2VkIHRvIHJlc29sdmVyIHVzZWRcbiAgICAgICAgICAgICAgLy8gZm9yIHNlbmRYaHJSZXF1ZXN0LlxuICAgICAgICAgICAgICBjb25zdCBzcmFSZXF1ZXN0QWRVcmxSZXNvbHZlcnMgPVxuICAgICAgICAgICAgICB0eXBlSW5zdGFuY2VzLm1hcChpbnN0YW5jZSA9PiBpbnN0YW5jZS5zcmFEZWZlcnJlZC5yZXNvbHZlKTtcbiAgICAgICAgICAgICAgY29uc3Qgc2xvdENhbGxiYWNrID0gbWV0YUpzb25DcmVhdGl2ZUdyb3VwZXIoXG4gICAgICAgICAgICAgICAgICAoY3JlYXRpdmUsIGhlYWRlcnNPYmosIGRvbmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tTdGlsbEN1cnJlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgc3JhQmxvY2tDYWxsYmFja0hhbmRsZXIoY3JlYXRpdmUsIGhlYWRlcnNPYmosIGRvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmFSZXF1ZXN0QWRVcmxSZXNvbHZlcnMsIHNyYVVybCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgLy8gVE9ETyhrZWl0aHdyaWdodGJvcykgLSBob3cgZG8gd2UgaGFuZGxlIHBlciBzbG90IDIwNCByZXNwb25zZT9cbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNSQVJlcXVlc3RfKHRoaXMsIHR5cGVJbnN0YW5jZXMpXG4gICAgICAgICAgICAgICAgICAudGhlbihzcmFVcmxJbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHNyYVVybCA9IHNyYVVybEluO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VydmljZXMueGhyRm9yKHRoaXMud2luKS5mZXRjaChzcmFVcmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrU3RpbGxDdXJyZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lRGVsaW1pdGVkU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpbiwgcmVzcG9uc2UsIHNsb3RDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2FuY2VsbGF0aW9uKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbGxhdGlvbiBzaG91bGQgYmUgcHJvcGFnYXRlZCB0byBzbG90IHByb21pc2VzXG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2F1c2luZyB0aGVpciBhZFByb21pc2UgY2hhaW5zIHdpdGhpbiBBNEEgdG8gaGFuZGxlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICAgICAgICAgICAgICB0eXBlSW5zdGFuY2VzLmZvckVhY2goaW5zdGFuY2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnNyYURlZmVycmVkLnJlamVjdChlcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEhdGhpcy53aW4uZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICdtZXRhW25hbWU9YW1wLWFkLWRvdWJsZWNsaWNrLXNyYV0nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlcmltZW50SWRzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERPVUJMRUNMSUNLX1NSQV9FWFBfQlJBTkNIRVMuU1JBX05PX1JFQ09WRVIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcHVibGlzaGVyIGhhcyBleHBsaWNpdGx5IGVuYWJsZWQgU1JBIG1vZGUgKG5vdFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGV4cGVyaW1lbnQpLCB0aGVuIGFzc3VtZSBlcnJvciBpcyBuZXR3b3JrIGZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGFwc2Ugc2xvdCwgcmVzZXQgdXJsIHRvIGVtcHR5IHN0cmluZyB0byBlbnN1cmVcbiAgICAgICAgICAgICAgICAgICAgICAvLyBubyBmYWxsYmFjayB0byBmcmFtZSBHRVQgKGdpdmVuIGV4cGVjdGF0aW9uIG9mIFNSQVxuICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNpc3RlbmN5KSwgYW5kIHByb3BhZ2F0ZSBlcnJvciB0byBBNEEgYWQgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYWluLlxuICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkFkVXJsVG9FcnJvcigvKiogQHR5cGUgeyFFcnJvcn0gKi8oZXJyb3IpLCBzcmFVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2Fybk9uRXJyb3IoJ1NSQSByZXF1ZXN0IGZhaWx1cmUnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gUHVibGlzaGVyIGV4cGxpY2l0bHkgd2FudHMgU1JBIHNvIGRvIG5vdCBhdHRlbXB0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcmVjb3ZlciBhcyBTUkEgZ3VhcmFudGVlcyBjYW5ub3QgYmUgZW5mb3JjZWQuXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZUluc3RhbmNlcy5mb3JFYWNoKGluc3RhbmNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGFkIHVybCB0byBlbnN1cmUgbGF5b3V0Q2FsbGJhY2sgZG9lcyBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGZyYW1lIGdldCB3aGljaCB3b3VsZCBsb3NlIFNSQVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3VhcmFudGVlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnJlc2V0QWRVcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmF0dGVtcHRDb2xsYXBzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3JhRGVmZXJyZWQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBPcHBvcnR1bmlzdGljIFNSQSB1c2VkIHNvIGZhbGxiYWNrIHRvIGluZGl2aWR1YWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBYSFIgcmVxdWVzdHMuXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZUluc3RhbmNlcy5mb3JFYWNoKGluc3RhbmNlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zcmFEZWZlcnJlZC5yZXNvbHZlKG51bGwpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHsqfSBlcnJvclxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIHdhcm5PbkVycm9yKG1lc3NhZ2UsIGVycm9yKSB7XG4gICAgZGV2KCkud2FybihUQUcsIG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0UHJlY29ubmVjdFVybHMoKSB7XG4gICAgcmV0dXJuIFsnaHR0cHM6Ly9zZWN1cmVwdWJhZHMuZy5kb3VibGVjbGljay5uZXQvJ107XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldE5vbkFtcENyZWF0aXZlUmVuZGVyaW5nTWV0aG9kKGhlYWRlclZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9yY2VTYWZlZnJhbWUgfHwgdGhpcy5pc0ZsdWlkUmVxdWVzdF9cbiAgICAgID8gWE9SSUdJTl9NT0RFLlNBRkVGUkFNRVxuICAgICAgOiBzdXBlci5nZXROb25BbXBDcmVhdGl2ZVJlbmRlcmluZ01ldGhvZChoZWFkZXJWYWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogTm90ZSB0aGF0IGxvY2F0aW9uIGlzIHBhcnNlZCBvbmNlIG9uIGZpcnN0IGFjY2VzcyBhbmQgY2FjaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVyTmFtZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfSBwYXJhbWV0ZXIgdmFsdWUgZnJvbSB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICAgKi9cbiAgZ2V0TG9jYXRpb25RdWVyeVBhcmFtZXRlclZhbHVlKHBhcmFtZXRlck5hbWUpIHtcbiAgICB3aW5kb3dMb2NhdGlvblF1ZXJ5UGFyYW1ldGVycyA9IHdpbmRvd0xvY2F0aW9uUXVlcnlQYXJhbWV0ZXJzIHx8XG4gICAgICAgIHBhcnNlUXVlcnlTdHJpbmcoKHRoaXMud2luLmxvY2F0aW9uICYmIHRoaXMud2luLmxvY2F0aW9uLnNlYXJjaCkgfHwgJycpO1xuICAgIHJldHVybiB3aW5kb3dMb2NhdGlvblF1ZXJ5UGFyYW1ldGVyc1twYXJhbWV0ZXJOYW1lXTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0QWRkaXRpb25hbENvbnRleHRNZXRhZGF0YShpc1NhZmVGcmFtZSA9IGZhbHNlKSB7XG4gICAgaWYgKCF0aGlzLmlzRmx1aWRSZXF1ZXN0XyAmJiAhaXNTYWZlRnJhbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3JlYXRpdmVTaXplID0gdGhpcy5nZXRDcmVhdGl2ZVNpemUoKTtcbiAgICBkZXYoKS5hc3NlcnQoY3JlYXRpdmVTaXplLCAndGhpcy5nZXRDcmVhdGl2ZVNpemUgcmV0dXJuZWQgbnVsbCcpO1xuICAgIHRoaXMuc2FmZWZyYW1lQXBpXyA9IHRoaXMuc2FmZWZyYW1lQXBpXyB8fFxuICAgICAgICBuZXcgU2FmZWZyYW1lSG9zdEFwaShcbiAgICAgICAgICAgIHRoaXMsIHRoaXMuaXNGbHVpZFJlcXVlc3RfLFxuICAgICAgICAgICAgLyoqIEB0eXBlIHt7aGVpZ2h0LCB3aWR0aH19ICovKGNyZWF0aXZlU2l6ZSksXG4gICAgICAgICAgICB0aGlzLmZsdWlkSW1wcmVzc2lvblVybF8pO1xuXG4gICAgcmV0dXJuIHRoaXMuc2FmZWZyYW1lQXBpXy5nZXRTYWZlZnJhbWVOYW1lQXR0cigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGEgcG9zdE1lc3NhZ2UgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIHNsb3QgdG8gdGhlIERGUFxuICAgKiBUcm91Ymxlc2hvb3QgVUkuIEEgcHJvbWlzZSBpcyByZXR1cm5lZCBpZiBhIG1lc3NhZ2UgaXMgcG9zdGVkLCBvdGhlcndpc2VcbiAgICogbnVsbCBpcyByZXR1cm5lZC4gVGhlIHByb21pc2UgaXMgcmV0dXJuZWQgb25seSBmb3IgdGVzdCBjb252ZW5pZW5jZS5cbiAgICpcbiAgICogQHJldHVybiB7P1Byb21pc2V9XG4gICAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICAgKi9cbiAgcG9zdFRyb3VibGVzaG9vdE1lc3NhZ2UoKSB7XG4gICAgaWYgKCF0aGlzLndpbi5vcGVuZXIgfHwgIS9bP3wmXWRmcGRlYi8udGVzdCh0aGlzLndpbi5sb2NhdGlvbi5zZWFyY2gpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV2KCkuYXNzZXJ0KHRoaXMudHJvdWJsZXNob290RGF0YV8uYWRVcmwsICdhZCBVUkwgZG9lcyBub3QgZXhpc3QgeWV0Jyk7XG4gICAgcmV0dXJuIHRoaXMudHJvdWJsZXNob290RGF0YV8uYWRVcmwudGhlbihhZFVybCA9PiB7XG4gICAgICBjb25zdCBzbG90SWQgPSB0aGlzLnRyb3VibGVzaG9vdERhdGFfLnNsb3RJZCArICdfJyArXG4gICAgICAgICAgdGhpcy50cm91Ymxlc2hvb3REYXRhXy5zbG90SW5kZXg7XG4gICAgICBjb25zdCBwYXlsb2FkID0gZGljdCh7XG4gICAgICAgICdndXREYXRhJzogSlNPTi5zdHJpbmdpZnkoZGljdCh7XG4gICAgICAgICAgJ2V2ZW50cyc6IFt7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICdzbG90aWQnOiBzbG90SWQsXG4gICAgICAgICAgICAnbWVzc2FnZUlkJzogNCxcbiAgICAgICAgICB9XSxcbiAgICAgICAgICAnc2xvdHMnOiBbe1xuICAgICAgICAgICAgJ2NvbnRlbnRVcmwnOiBhZFVybCB8fCAnJyxcbiAgICAgICAgICAgICdpZCc6IHNsb3RJZCxcbiAgICAgICAgICAgICdsZWFmQWRVbml0TmFtZSc6IHRoaXMudHJvdWJsZXNob290RGF0YV8uc2xvdElkLFxuICAgICAgICAgICAgJ2RvbUlkJzogc2xvdElkLFxuICAgICAgICAgICAgJ2xpbmVJdGVtSWQnOiB0aGlzLnRyb3VibGVzaG9vdERhdGFfLmxpbmVJdGVtSWQsXG4gICAgICAgICAgICAnY3JlYXRpdmVJZCc6IHRoaXMudHJvdWJsZXNob290RGF0YV8uY3JlYXRpdmVJZCxcbiAgICAgICAgICB9XSxcbiAgICAgICAgfSkpLFxuICAgICAgICAndXNlckFnZW50JzogbmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgJ3JlZmVycmVyJzogdGhpcy53aW4ubG9jYXRpb24uaHJlZixcbiAgICAgICAgJ21lc3NhZ2VUeXBlJzogJ0xPQUQnLFxuICAgICAgfSk7XG4gICAgICB0aGlzLndpbi5vcGVuZXIuLypPSyovcG9zdE1lc3NhZ2UocGF5bG9hZCwgJyonKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYWdldmlldyBzdGF0ZSB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIHNsb3QuIFRva2VuIGRvZXMgbm90XG4gICAqIGV4cGlyZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuXG4gICAqL1xuICBzZXRQYWdldmlld1N0YXRlVG9rZW4odG9rZW4pIHtcbiAgICB0b2tlbnNUb0luc3RhbmNlc1t0b2tlbl0gPSB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBmb3IgdGhlIHByZXNlbmNlIG9mIGEgcGFnZXZpZXcgdG9rZW4gaW4gdGhlIG1vZHVsZSBsZXZlbCBvYmplY3RcbiAgICogYW5kIHJlbW92ZXMgaXQgaWYgcHJlc2VudC5cbiAgICovXG4gIHJlbW92ZVBhZ2V2aWV3U3RhdGVUb2tlbigpIHtcbiAgICBmb3IgKGNvbnN0IHRva2VuIGluIHRva2Vuc1RvSW5zdGFuY2VzKSB7XG4gICAgICBpZiAodG9rZW5zVG9JbnN0YW5jZXNbdG9rZW5dID09IHRoaXMpIHtcbiAgICAgICAgZGVsZXRlIHRva2Vuc1RvSW5zdGFuY2VzW3Rva2VuXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRBNGFBbmFseXRpY3NWYXJzKGFuYWx5dGljc1RyaWdnZXIpIHtcbiAgICByZXR1cm4gZ2V0Q3NpQW1wQW5hbHl0aWNzVmFyaWFibGVzKGFuYWx5dGljc1RyaWdnZXIsIHRoaXMsIHRoaXMucXFpZF8pO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBnZXRBNGFBbmFseXRpY3NDb25maWcoKSB7XG4gICAgcmV0dXJuIGdldENzaUFtcEFuYWx5dGljc0NvbmZpZygpO1xuICB9XG59XG5cbkFNUC5leHRlbnNpb24oVEFHLCAnMC4xJywgQU1QID0+IHtcbiAgQU1QLnJlZ2lzdGVyRWxlbWVudChUQUcsIEFtcEFkTmV0d29ya0RvdWJsZWNsaWNrSW1wbCk7XG59KTtcblxuXG4vKiogQHZpc2libGVGb3JUZXN0aW5nICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTcmFTdGF0ZUZvclRlc3RpbmcoKSB7XG4gIHNyYVJlcXVlc3RzID0gbnVsbDtcbn1cblxuLyoqIEB2aXNpYmxlRm9yVGVzdGluZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0TG9jYXRpb25RdWVyeVBhcmFtZXRlcnNGb3JUZXN0aW5nKCkge1xuICB3aW5kb3dMb2NhdGlvblF1ZXJ5UGFyYW1ldGVycyA9IG51bGw7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSBuZXR3b3JrSWQgZnJvbSBkYXRhLWFkLXNsb3QgYXR0cmlidXRlLlxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXR3b3JrSWQoZWxlbWVudCkge1xuICBjb25zdCBuZXR3b3JrSWQgPSAvXig/OlxcLyk/KFxcZCspLy5leGVjKFxuICAgICAgZGV2KCkuYXNzZXJ0U3RyaW5nKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNsb3QnKSkpO1xuICAvLyBUT0RPOiBndWFyYW50ZWUgZGF0YS1hZC1zbG90IGZvcm1hdCBhcyBwYXJ0IG9mIGlzVmFsaWRFbGVtZW50P1xuICByZXR1cm4gbmV0d29ya0lkID8gbmV0d29ya0lkWzFdIDogJyc7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0geyEuLi8uLi8uLi9leHRlbnNpb25zL2FtcC1hNGEvMC4xL2FtcC1hNGEuQW1wQTRBfSBhNGFcbiAqIEBwYXJhbSB7IUFycmF5PCFBbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbnN0YW5jZXNcbiAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59IFNSQSByZXF1ZXN0IFVSTFxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTUkFSZXF1ZXN0XyhhNGEsIGluc3RhbmNlcykge1xuICAvLyBUT0RPKGJyYWRmcml6emVsbCk6IE5lZWQgdG8gYWRkIHN1cHBvcnQgZm9yIFJUQy5cbiAgZGV2KCkuYXNzZXJ0KGluc3RhbmNlcyAmJiBpbnN0YW5jZXMubGVuZ3RoKTtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgaW5zdGFuY2VzLm1hcChpbnN0YW5jZSA9PiBpbnN0YW5jZS5nZXRBZFVybERlZmVycmVkLnByb21pc2UpKVxuICAgICAgLnRoZW4oKCkgPT4gZ29vZ2xlUGFnZVBhcmFtZXRlcnMoYTRhLCBzdGFydFRpbWUpKVxuICAgICAgLnRoZW4oZ29vZ1BhZ2VMZXZlbFBhcmFtZXRlcnMgPT4ge1xuICAgICAgICBjb25zdCBibG9ja1BhcmFtZXRlcnMgPSBjb25zdHJ1Y3RTUkFCbG9ja1BhcmFtZXRlcnMoaW5zdGFuY2VzKTtcbiAgICAgICAgcmV0dXJuIHRydW5jQW5kVGltZVVybChET1VCTEVDTElDS19CQVNFX1VSTCxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYmxvY2tQYXJhbWV0ZXJzLCBnb29nUGFnZUxldmVsUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXNbMF0uZ2V0UGFnZVBhcmFtZXRlcnMoaW5zdGFuY2VzWzBdLmNvbnNlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzKSksIHN0YXJ0VGltZSk7XG4gICAgICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYWdldmlldyB0b2tlbnMgdGhhdCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIGFkIHJlcXVlc3QuIFRva2Vuc1xuICogc2hvdWxkIGNvbWUgb25seSBmcm9tIGluc3RhbmNlcyB0aGF0IGFyZSBub3QgYmVpbmcgcmVxdWVzdGVkIGluIHRoaXMgcmVxdWVzdC5cbiAqIEBwYXJhbSB7IUFycmF5PCFBbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbnN0YW5jZXNJbkFkUmVxdWVzdFxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59IEFycmF5IG9mIHBhZ2V2aWV3IHRva2VucyB0byBpbmNsdWRlIGluIHRoZSBhZFxuICogcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2V2aWV3U3RhdGVUb2tlbnNGb3JBZFJlcXVlc3QoaW5zdGFuY2VzSW5BZFJlcXVlc3QpIHtcbiAgY29uc3QgcGFnZXZpZXdTdGF0ZVRva2Vuc0luQWRSZXF1ZXN0ID0gW107XG4gIGZvciAoY29uc3QgdG9rZW4gaW4gdG9rZW5zVG9JbnN0YW5jZXMpIHtcbiAgICBpZiAoIWluc3RhbmNlc0luQWRSZXF1ZXN0LmluY2x1ZGVzKFxuICAgICAgICB0b2tlbnNUb0luc3RhbmNlc1t0b2tlbl0pKSB7XG4gICAgICBwYWdldmlld1N0YXRlVG9rZW5zSW5BZFJlcXVlc3QucHVzaCh0b2tlbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYWdldmlld1N0YXRlVG9rZW5zSW5BZFJlcXVlc3Q7XG59XG5cbi8qKlxuICogUmVzZXRzIHRoZSB0b2tlbnNUb0luc3RhbmNlcyBtYXBwaW5nIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFRva2Vuc1RvSW5zdGFuY2VzTWFwKCkge1xuICB0b2tlbnNUb0luc3RhbmNlcyA9IHt9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcyc7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5pbXBvcnQge2RpY3QsIGhhc093bn0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL29iamVjdCc7XG5pbXBvcnQge2dldERhdGF9IGZyb20gJy4uLy4uLy4uL3NyYy9ldmVudC1oZWxwZXInO1xuaW1wb3J0IHtnZXRTdHlsZX0gZnJvbSAnLi4vLi4vLi4vc3JjL3N0eWxlJztcbmltcG9ydCB7cGFyc2VVcmxEZXByZWNhdGVkfSBmcm9tICcuLi8uLi8uLi9zcmMvdXJsJztcbmltcG9ydCB7c2V0U3R5bGVzfSBmcm9tICcuLi8uLi8uLi9zcmMvc3R5bGUnO1xuaW1wb3J0IHt0aHJvdHRsZX0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL3JhdGUtbGltaXQnO1xuaW1wb3J0IHt0cnlQYXJzZUpzb259IGZyb20gJy4uLy4uLy4uL3NyYy9qc29uJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hbmFnZSBtZXNzYWdlcyBmb3IgZGlmZmVyZW50IFNhZmVmcmFtZSBhZCBzbG90cy5cbiAqXG4gKiBNYXBzIGEgc2VudGluZWwgdmFsdWUgdG8gYW4gaW5zdGFuY2Ugb2YgdGhlIFNhZmVmcmFtZUhvc3RBcGkgdG8gd2hpY2ggdGhhdFxuICogc2VudGluZWwgdmFsdWUgYmVsb25ncy5cbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIVNhZmVmcmFtZUhvc3RBcGk+fVxuICovXG5leHBvcnQgY29uc3Qgc2FmZWZyYW1lSG9zdHMgPSB7fTtcblxuLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xubGV0IHNhZmVmcmFtZUxpc3RlbmVyQ3JlYXRlZF8gPSBmYWxzZTtcblxuLyoqIEBlbnVtIHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgTUVTU0FHRV9GSUVMRFMgPSB7XG4gIENIQU5ORUw6ICdjJyxcbiAgU0VOVElORUw6ICdlJyxcbiAgRU5EUE9JTlRfSURFTlRJVFk6ICdpJyxcbiAgUEFZTE9BRDogJ3AnLFxuICBTRVJWSUNFOiAncycsXG4gIE1FU1NBR0U6ICdtZXNzYWdlJyxcbn07XG5cbi8qKiBAZW51bSB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IFNFUlZJQ0UgPSB7XG4gIEdFT01FVFJZX1VQREFURTogJ2dlb21ldHJ5X3VwZGF0ZScsXG4gIENSRUFUSVZFX0dFT01FVFJZX1VQREFURTogJ2NyZWF0aXZlX2dlb21ldHJ5X3VwZGF0ZScsXG4gIEVYUEFORF9SRVFVRVNUOiAnZXhwYW5kX3JlcXVlc3QnLFxuICBFWFBBTkRfUkVTUE9OU0U6ICdleHBhbmRfcmVzcG9uc2UnLFxuICBSRUdJU1RFUl9ET05FOiAncmVnaXN0ZXJfZG9uZScsXG4gIENPTExBUFNFX1JFUVVFU1Q6ICdjb2xsYXBzZV9yZXF1ZXN0JyxcbiAgQ09MTEFQU0VfUkVTUE9OU0U6ICdjb2xsYXBzZV9yZXNwb25zZScsXG4gIFJFU0laRV9SRVFVRVNUOiAncmVzaXplX3JlcXVlc3QnLFxuICBSRVNJWkVfUkVTUE9OU0U6ICdyZXNpemVfcmVzcG9uc2UnLFxufTtcblxuLyoqIEBwcml2YXRlIHtzdHJpbmd9ICovXG5jb25zdCBUQUcgPSAnQU1QLURPVUJMRUNMSUNLLVNBRkVGUkFNRSc7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmV4cG9ydCBjb25zdCBTQUZFRlJBTUVfT1JJR0lOID0gJ2h0dHBzOi8vdHBjLmdvb2dsZXN5bmRpY2F0aW9uLmNvbSc7XG5cbi8qKlxuICogRXZlbnQgbGlzdGVuZXIgY2FsbGJhY2sgZm9yIG1lc3NhZ2UgZXZlbnRzLiBJZiBtZXNzYWdlIGlzIGEgU2FmZWZyYW1lXG4gKiBtZXNzYWdlLCBoYW5kbGVzIHRoZSBtZXNzYWdlLiBUaGlzIGxpc3RlbmVyIGlzIHJlZ2lzdGVyZWQgd2l0aGluXG4gKiBTYWZlZnJhbWVIb3N0QXBpLlxuICogQHBhcmFtIHshRXZlbnR9IGV2ZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlZnJhbWVMaXN0ZW5lcihldmVudCkge1xuICBjb25zdCBkYXRhID0gdHJ5UGFyc2VKc29uKGdldERhdGEoZXZlbnQpKTtcbiAgLyoqIE9ubHkgcHJvY2VzcyBtZXNzYWdlcyB0aGF0IGFyZSB2YWxpZCBTYWZlZnJhbWUgbWVzc2FnZXMgKi9cbiAgaWYgKGV2ZW50Lm9yaWdpbiAhPSBTQUZFRlJBTUVfT1JJR0lOIHx8ICFkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBheWxvYWQgPSB0cnlQYXJzZUpzb24oZGF0YVtNRVNTQUdFX0ZJRUxEUy5QQVlMT0FEXSkgfHwge307XG4gIC8qKlxuICAgKiBJZiB0aGUgc2VudGluZWwgaXMgcHJvdmlkZWQgYXQgdGhlIHRvcCBsZXZlbCwgdGhpcyBpcyBhIG1lc3NhZ2Ugc2ltcGx5XG4gICAqIHRvIHNldHVwIHRoZSBwb3N0TWVzc2FnZSBjaGFubmVsLCBzbyBzZXQgaXQgdXAuXG4gICAqL1xuICBjb25zdCBzZW50aW5lbCA9IGRhdGFbTUVTU0FHRV9GSUVMRFMuU0VOVElORUxdIHx8IHBheWxvYWRbJ3NlbnRpbmVsJ107XG4gIGNvbnN0IHNhZmVmcmFtZUhvc3QgPSBzYWZlZnJhbWVIb3N0c1tzZW50aW5lbF07XG4gIGlmICghc2FmZWZyYW1lSG9zdCkge1xuICAgIGRldigpLndhcm4oVEFHLCBgU2FmZWZyYW1lIEhvc3QgZm9yIHNlbnRpbmVsOiAke3NlbnRpbmVsfSBub3QgZm91bmQuYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc2FmZWZyYW1lSG9zdC5jaGFubmVsKSB7XG4gICAgc2FmZWZyYW1lSG9zdC5jb25uZWN0TWVzc2FnaW5nQ2hhbm5lbChkYXRhW01FU1NBR0VfRklFTERTLkNIQU5ORUxdKTtcbiAgfSBlbHNlIGlmIChwYXlsb2FkKSB7XG4gICAgLy8gQ3VycmVudGx5IHdlIGRvIG5vdCBleHBlY3QgYSBwYXlsb2FkIG9uIGluaXRpYWwgY29ubmVjdGlvbiBtZXNzYWdlcy5cbiAgICBzYWZlZnJhbWVIb3N0LnByb2Nlc3NNZXNzYWdlKC8qKiBAdHlwZSB7IUpzb25PYmplY3R9ICovKHBheWxvYWQpLFxuICAgICAgICBkYXRhW01FU1NBR0VfRklFTERTLlNFUlZJQ0VdKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdXAgdGhlIGhvc3QgQVBJIGZvciBEb3VibGVDbGljayBTYWZlZnJhbWUgdG8gYWxsb3cgdGhlIGZvbGxvd2luZ1xuICogU2FmZWZyYW1lIGNvbnRhaW5lciBBUElzIHRvIHdvcms6XG4gKiAgIC0gJHNmLmV4dC5leHBhbmQoKVxuICogICAtICRzZi5leHQuY29sbGFwc2UoKVxuICogICAtICRzZi5leHQuZ2VvbSgpIEV4cGFuZCBhbmQgY29sbGFwc2UgYXJlIGJvdGggaW1wbGVtZW50ZWQgdXRpbGl6aW5nIEFNUCdzXG4gKiAgICAgYnVpbHQgaW4gZWxlbWVudCByZXNpemluZy5cbiAqXG4gKiBGb3IgZ2VvbSwgdGhlIGhvc3QgbmVlZHMgdG8gc2VuZCBnZW9tZXRyeSB1cGRhdGVzIGludG8gdGhlIGNvbnRhaW5lciB3aGVuZXZlclxuICogIGEgcG9zaXRpb24gY2hhbmdlIGhhcHBlbnMsIGF0IGEgbWF4IGZyZXF1ZW5jeSBvZiAxIG1lc3NhZ2Uvc2Vjb25kLiBUb1xuICogIGltcGxlbWVudCB0aGlzIG1lc3NhZ2luZywgd2UgYXJlIGxldmVyYWdpbmcgdGhlIGV4aXN0aW5nXG4gKiAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgY2xhc3MgdGhhdCB3b3JrcyB3aXRoIEFNUCBlbGVtZW50cy4gSG93ZXZlciwgdGhlXG4gKiAgc2FmZWZyYW1lIGlmcmFtZSB0aGF0IHdlIG5lZWQgdG8gbW9uaXRvciBpcyBub3QgYW4gQU1QIGVsZW1lbnQsIGJ1dCByYXRoZXJcbiAqICBjb250YWluZWQgd2l0aGluIGFuIGFtcC1hZC4gU28sIHdlIGFyZSBkb2luZyBpbnRlcnNlY3Rpb24gb2JzZXJ2aW5nIG9uIHRoZVxuICogIGFtcC1hZCwgYW5kIGNhbGN1bGF0aW5nIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGZvciB0aGUgaWZyYW1lIHdoZW5ldmVyIHdlIGdldFxuICogIGFuIHVwZGF0ZS5cbiAqXG4gKiBXZSBwYXNzIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaW50byB0aGUgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgY2xhc3MsIHdoaWNoXG4gKiAgdGhlbiBjYWxscyB0aGUgaW5zdGFuY2Ugb2Ygc2VuZCgpIGJlbG93IHdoZW5ldmVyIGFuIHVwZGF0ZSBvY2N1cnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYWZlZnJhbWVIb3N0QXBpIHtcblxuICAvKipcbiAgICogQHBhcmFtIHshLi9hbXAtYWQtbmV0d29yay1kb3VibGVjbGljay1pbXBsLkFtcEFkTmV0d29ya0RvdWJsZWNsaWNrSW1wbH0gYmFzZUluc3RhbmNlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNGbHVpZFxuICAgKiBAcGFyYW0ge3t3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXJ9fSBjcmVhdGl2ZVNpemVcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBmbHVpZEltcHJlc3Npb25VcmxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGJhc2VJbnN0YW5jZSwgaXNGbHVpZCwgY3JlYXRpdmVTaXplLCBmbHVpZEltcHJlc3Npb25VcmwpIHtcbiAgICAvKiogQHByaXZhdGUgeyEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsfSAqL1xuICAgIHRoaXMuYmFzZUluc3RhbmNlXyA9IGJhc2VJbnN0YW5jZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IUZ1bmN0aW9ufSAqL1xuICAgIHRoaXMuY2hlY2tTdGlsbEN1cnJlbnRfID0gdGhpcy5iYXNlSW5zdGFuY2VfLnZlcmlmeVN0aWxsQ3VycmVudC5iaW5kKFxuICAgICAgICB0aGlzLmJhc2VJbnN0YW5jZV8pKCk7XG5cbiAgICAvKiogQHByaXZhdGUgeyFXaW5kb3d9ICovXG4gICAgdGhpcy53aW5fID0gdGhpcy5iYXNlSW5zdGFuY2VfLndpbjtcblxuICAgIC8qKiBAcHJpdmF0ZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc2VudGluZWxfID0gdGhpcy5iYXNlSW5zdGFuY2VfLnNlbnRpbmVsO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/RWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMuY2hhbm5lbCA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9Kc29uT2JqZWN0fSAqL1xuICAgIHRoaXMuY3VycmVudEdlb21ldHJ5XyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUge251bWJlcn0gKi9cbiAgICB0aGlzLmVuZHBvaW50SWRlbnRpdHlfID0gTWF0aC5yYW5kb20oKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMudWlkXyA9IE1hdGgucmFuZG9tKCk7XG5cbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5pc0ZsdWlkXyA9IGlzRmx1aWQ7XG5cbiAgICAvKiogQHByaXZhdGUge3t3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXJ9fSAqL1xuICAgIHRoaXMuY3JlYXRpdmVTaXplXyA9IGNyZWF0aXZlU2l6ZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7e3dpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcn19ICovXG4gICAgdGhpcy5pbml0aWFsQ3JlYXRpdmVTaXplXyA9XG4gICAgICAvKiogQHByaXZhdGUge3t3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXJ9fSAqL1xuICAgICAgKE9iamVjdC5hc3NpZ24oe30sIGNyZWF0aXZlU2l6ZSkpO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/c3RyaW5nfSAqL1xuICAgIHRoaXMuZmx1aWRJbXByZXNzaW9uVXJsXyA9IGZsdWlkSW1wcmVzc2lvblVybDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1Byb21pc2V9ICovXG4gICAgdGhpcy5kZWxheV8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHsuLi8uLi8uLi9zcmMvc2VydmljZS92aWV3cG9ydC92aWV3cG9ydC1pbXBsLlZpZXdwb3J0fSAqL1xuICAgIHRoaXMudmlld3BvcnRfID0gdGhpcy5iYXNlSW5zdGFuY2VfLmdldFZpZXdwb3J0KCk7XG5cbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5pc0NvbGxhcHNlZF8gPSB0cnVlO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNSZWdpc3RlcmVkXyA9IGZhbHNlO1xuXG4gICAgLy8gVE9ETzogTWFrZSB0aGlzIHBhZ2UtbGV2ZWwuXG4gICAgY29uc3Qgc2ZDb25maWcgPSBPYmplY3QodHJ5UGFyc2VKc29uKFxuICAgICAgICB0aGlzLmJhc2VJbnN0YW5jZV8uZWxlbWVudC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAnZGF0YS1zYWZlZnJhbWUtY29uZmlnJykpIHx8IHt9KTtcbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5leHBhbmRCeU92ZXJsYXlfID0gaGFzT3duKHNmQ29uZmlnLCAnZXhwYW5kQnlPdmVybGF5JykgP1xuICAgICAgc2ZDb25maWdbJ2V4cGFuZEJ5T3ZlcmxheSddIDogdHJ1ZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmV4cGFuZEJ5UHVzaF8gPSBoYXNPd24oc2ZDb25maWcsICdleHBhbmRCeVB1c2gnKSA/XG4gICAgICBzZkNvbmZpZ1snZXhwYW5kQnlQdXNoJ10gOiB0cnVlO1xuXG4gICAgLyoqIEBwcml2YXRlIHs/RnVuY3Rpb259ICovXG4gICAgdGhpcy51bmxpc3Rlbl8gPSBudWxsO1xuXG4gICAgdGhpcy5yZWdpc3RlclNhZmVmcmFtZUhvc3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBTYWZlZnJhbWUgc3BlY2lmaWMgbmFtZSBhdHRyaWJ1dGVzIHRoYXQgYXJlIG5lZWRlZCBmb3IgdGhlXG4gICAqIFNhZmVmcmFtZSBjcmVhdGl2ZSB0byBwcm9wZXJseSBzZXR1cC5cbiAgICogQHJldHVybiB7IUpzb25PYmplY3R9XG4gICAqL1xuICBnZXRTYWZlZnJhbWVOYW1lQXR0cigpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZGljdCh7fSk7XG4gICAgYXR0cmlidXRlc1sndWlkJ10gPSB0aGlzLnVpZF87XG4gICAgYXR0cmlidXRlc1snaG9zdFBlZXJOYW1lJ10gPSB0aGlzLndpbl8ubG9jYXRpb24ub3JpZ2luO1xuICAgIGF0dHJpYnV0ZXNbJ2luaXRpYWxHZW9tZXRyeSddID0gdGhpcy5nZXRJbml0aWFsR2VvbWV0cnkoKTtcbiAgICBhdHRyaWJ1dGVzWydwZXJtaXNzaW9ucyddID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIGRpY3Qoe1xuICAgICAgICAgICdleHBhbmRCeU92ZXJsYXknOiB0aGlzLmV4cGFuZEJ5T3ZlcmxheV8sXG4gICAgICAgICAgJ2V4cGFuZEJ5UHVzaCc6IHRoaXMuZXhwYW5kQnlQdXNoXyxcbiAgICAgICAgICAncmVhZENvb2tpZSc6IGZhbHNlLFxuICAgICAgICAgICd3cml0ZUNvb2tpZSc6IGZhbHNlLFxuICAgICAgICB9KSk7XG4gICAgYXR0cmlidXRlc1snbWV0YWRhdGEnXSA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBkaWN0KHtcbiAgICAgICAgICAnc2hhcmVkJzoge1xuICAgICAgICAgICAgJ3NmX3Zlcic6IHRoaXMuYmFzZUluc3RhbmNlXy5zYWZlZnJhbWVWZXJzaW9uLFxuICAgICAgICAgICAgJ2NrX29uJzogMSxcbiAgICAgICAgICAgICdmbGFzaF92ZXInOiAnMjYuMC4wJyxcbiAgICAgICAgICAgIC8vIE9uY2UgR1BUIFNhZmVmcmFtZSBpcyB1cGRhdGVkIHRvIGxvb2sgaW4gYW1wIG9iamVjdCxcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGlzIGNhbm9uaWNhbF91cmwgaGVyZS5cbiAgICAgICAgICAgICdjYW5vbmljYWxfdXJsJzogdGhpcy5tYXliZUdldENhbm9uaWNhbFVybCgpLFxuICAgICAgICAgICAgJ2FtcCc6IHtcbiAgICAgICAgICAgICAgJ2Nhbm9uaWNhbF91cmwnOiB0aGlzLm1heWJlR2V0Q2Fub25pY2FsVXJsKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICBhdHRyaWJ1dGVzWydyZXBvcnRDcmVhdGl2ZUdlb21ldHJ5J10gPSB0aGlzLmlzRmx1aWRfO1xuICAgIGF0dHJpYnV0ZXNbJ2lzRGlmZmVyZW50U291cmNlV2luZG93J10gPSBmYWxzZTtcbiAgICBhdHRyaWJ1dGVzWydzZW50aW5lbCddID0gdGhpcy5zZW50aW5lbF87XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2Fub25pY2FsIFVSTCBvZiB0aGUgcGFnZSwgaWYgdGhlIHB1Ymxpc2hlciBhbGxvd3NcbiAgICogaXQgdG8gYmUgcGFzc2VkLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIG1heWJlR2V0Q2Fub25pY2FsVXJsKCkge1xuICAgIC8vIERvbid0IGFsbG93IGZvciByZWZlcnJlciBwb2xpY3kgc2FtZS1vcmlnaW4sXG4gICAgLy8gYXMgU2FmZWZyYW1lIHdpbGwgYWx3YXlzIGJlIGEgZGlmZmVyZW50IG9yaWdpbi5cbiAgICAvLyBEb24ndCBhbGxvdyBmb3Igbm8tcmVmZXJyZXIuXG4gICAgY29uc3Qge2Nhbm9uaWNhbFVybH0gPSBTZXJ2aWNlcy5kb2N1bWVudEluZm9Gb3JEb2MoXG4gICAgICAgIHRoaXMuYmFzZUluc3RhbmNlXy5nZXRBbXBEb2MoKSk7XG4gICAgY29uc3QgbWV0YVJlZmVycmVyID0gdGhpcy53aW5fLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIFwibWV0YVtuYW1lPSdyZWZlcnJlciddXCIpO1xuICAgIGlmICghbWV0YVJlZmVycmVyKSB7XG4gICAgICByZXR1cm4gY2Fub25pY2FsVXJsO1xuICAgIH1cbiAgICBzd2l0Y2ggKG1ldGFSZWZlcnJlci5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKSkge1xuICAgICAgY2FzZSAnc2FtZS1vcmlnaW4nOlxuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlICduby1yZWZlcnJlcic6XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgJ29yaWdpbic6XG4gICAgICAgIHJldHVybiBwYXJzZVVybERlcHJlY2F0ZWQoY2Fub25pY2FsVXJsKS5vcmlnaW47XG4gICAgfVxuICAgIHJldHVybiBjYW5vbmljYWxVcmw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5pdGlhbEdlb21ldHJ5IHRvIGFzc2lnbiB0byB0aGUgbmFtZSBvZiB0aGUgc2FmZWZyYW1lXG4gICAqIGZvciByZW5kZXJpbmcuIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSBkaWZmZXJlbnRseSB0aGFuIGFsbCB0aGUgb3RoZXJcbiAgICogZ2VvbWV0cnkgdXBkYXRlcywgYmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSBoYXZlIGFjY2VzcyB0byB0aGVcbiAgICogcmVuZGVyZWQgc2FmZWZyYW1lIHlldC4gTm90ZSB0aGF0IHdlIGFyZSB1c2luZyBnZXRQYWdlTGF5b3V0Qm94LFxuICAgKiB3aGljaCBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBwZXJmZWN0bHkgYWNjdXJhdGUgYXMgaXQgaXMgZnJvbVxuICAgKiB0aGUgbGFzdCBtZWFzdXJlIG9mIHRoZSBlbGVtZW50LiBUaGlzIGlzIGZpbmUgZm9yIG91ciB1c2UgY2FzZVxuICAgKiBoZXJlLCBhcyBldmVuIGlmIHRoZSBwb3NpdGlvbiBpcyBzbGlnaHRseSBvZmYsIHdlJ2xsIHNlbmQgdGhlIHJpZ2h0XG4gICAqIHNpemUuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldEluaXRpYWxHZW9tZXRyeSgpIHtcbiAgICBjb25zdCBhbXBBZEJveCA9IHRoaXMuYmFzZUluc3RhbmNlXy5nZXRQYWdlTGF5b3V0Qm94KCk7XG4gICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gKGFtcEFkQm94LmhlaWdodCAtIHRoaXMuY3JlYXRpdmVTaXplXy5oZWlnaHQpIC8gMjtcbiAgICBjb25zdCB3aWR0aE9mZnNldCA9IChhbXBBZEJveC53aWR0aCAtIHRoaXMuY3JlYXRpdmVTaXplXy53aWR0aCkgLyAyO1xuICAgIGNvbnN0IGlmcmFtZUJveCA9IC8qKiBAdHlwZSB7IS4uLy4uLy4uL3NyYy9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmfSAqLyAoe1xuICAgICAgdG9wOiBhbXBBZEJveC50b3AgKyBoZWlnaHRPZmZzZXQsXG4gICAgICBib3R0b206IGFtcEFkQm94LmJvdHRvbSAtIGhlaWdodE9mZnNldCxcbiAgICAgIGxlZnQ6IGFtcEFkQm94LmxlZnQgKyB3aWR0aE9mZnNldCxcbiAgICAgIHJpZ2h0OiBhbXBBZEJveC5yaWdodCAtIHdpZHRoT2Zmc2V0LFxuICAgICAgaGVpZ2h0OiB0aGlzLmluaXRpYWxDcmVhdGl2ZVNpemVfLmhlaWdodCxcbiAgICAgIHdpZHRoOiB0aGlzLmluaXRpYWxDcmVhdGl2ZVNpemVfLndpZHRoLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmZvcm1hdEdlb21fKGlmcmFtZUJveCk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoaXMgaW5zdGFuY2UgYXMgdGhlIGhvc3QgQVBJIGZvciB0aGUgY3VycmVudCBzZW50aW5lbC5cbiAgICogSWYgdGhlIGdsb2JhbCBzYWZlZnJhbWUgbGlzdGVuZXIgaGFzIG5vdCB5ZXQgYmVlbiBjcmVhdGVkLCBpdCBjcmVhdGVzXG4gICAqIHRoYXQgYXMgd2VsbC5cbiAgICovXG4gIHJlZ2lzdGVyU2FmZWZyYW1lSG9zdCgpIHtcbiAgICBkZXYoKS5hc3NlcnQodGhpcy5zZW50aW5lbF8pO1xuICAgIHNhZmVmcmFtZUhvc3RzW3RoaXMuc2VudGluZWxfXSA9IHNhZmVmcmFtZUhvc3RzW3RoaXMuc2VudGluZWxfXSB8fCB0aGlzO1xuICAgIGlmICghc2FmZWZyYW1lTGlzdGVuZXJDcmVhdGVkXykge1xuICAgICAgc2FmZWZyYW1lTGlzdGVuZXJDcmVhdGVkXyA9IHRydWU7XG4gICAgICB0aGlzLndpbl8uYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHNhZmVmcmFtZUxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGluaXRpYWwgY29ubmVjdGlvbiBtZXNzYWdlIHRvIHRoZSBzYWZlZnJhbWUgdG8gZmluaXNoIGluaXRpYWxpemF0aW9uLlxuICAgKiBBbHNvIGluaXRpYWxpemVzIHRoZSBzZW5kaW5nIG9mIGdlb21ldHJ5IHVwZGF0ZSBtZXNzYWdlcyB0byB0aGUgZnJhbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFubmVsXG4gICAqL1xuICBjb25uZWN0TWVzc2FnaW5nQ2hhbm5lbChjaGFubmVsKSB7XG4gICAgLy8gU2V0IHRoZSBpZnJhbWUgaGVyZSwgYmVjYXVzZSB3aGVuIGNsYXNzIGlzIGZpcnN0IGNyZWF0ZWQgdGhlIGlmcmFtZVxuICAgIC8vIGVsZW1lbnQgZG9lcyBub3QgeWV0IGV4aXN0IG9uIHRoaXMuYmFzZUluc3RhbmNlXy4gVGhlIGZpcnN0IHRpbWVcbiAgICAvLyB3ZSByZWNlaXZlIGEgbWVzc2FnZSB3ZSBrbm93IHRoYXQgaXQgbm93IGV4aXN0cy5cbiAgICBkZXYoKS5hc3NlcnQodGhpcy5iYXNlSW5zdGFuY2VfLmlmcmFtZSk7XG4gICAgdGhpcy5pZnJhbWVfID0gdGhpcy5iYXNlSW5zdGFuY2VfLmlmcmFtZTtcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgIHRoaXMuc2V0dXBHZW9tXygpO1xuICAgIHRoaXMuc2VuZE1lc3NhZ2VfKHtcbiAgICAgICdtZXNzYWdlJzogJ2Nvbm5lY3QnLFxuICAgICAgJ2MnOiB0aGlzLmNoYW5uZWwsXG4gICAgfSwgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIHRoaXMgU2FmZWZyYW1lQVBJIGluc3RhbmNlLlxuICAgKiBXZSB1dGlsaXplIHRoZSBleGlzdGluZyBJbnRlcnNlY3Rpb25PYnNlcnZlciBjbGFzcywgYnkgcGFzc2luZyBpbiB0aGlzXG4gICAqIGNsYXNzIGZvciBJTyB0byB1c2UgaW5zdGVhZCBvZiBTdWJzY3JpcHRpb25BcGkgZm9yIHNlbmRpbmcgaXRzIHVwZGF0ZVxuICAgKiBtZXNzYWdlcy4gVGhlIG1ldGhvZCAnc2VuZCcgYmVsb3cgaXMgdHJpZ2dlcmVkIGJ5IElPIGV2ZXJ5IHRpbWUgdGhhdFxuICAgKiBhbiB1cGRhdGUgb2NjdXJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2V0dXBHZW9tXygpIHtcbiAgICBkZXYoKS5hc3NlcnQodGhpcy5pZnJhbWVfLmNvbnRlbnRXaW5kb3csXG4gICAgICAgICdGcmFtZSBjb250ZW50V2luZG93IHVuYXZhaWxhYmxlLicpO1xuICAgIGNvbnN0IHRocm90dGxlZFVwZGF0ZSA9IHRocm90dGxlKFxuICAgICAgICB0aGlzLndpbl8sIHRoaXMudXBkYXRlR2VvbWV0cnlfLmJpbmQodGhpcyksIDEwMDApO1xuICAgIGNvbnN0IHNjcm9sbFVubGlzdGVuZXIgPSB0aGlzLnZpZXdwb3J0Xy5vblNjcm9sbCh0aHJvdHRsZWRVcGRhdGUpO1xuICAgIGNvbnN0IGNoYW5nZWRVbmxpc3RlbmVyID0gdGhpcy52aWV3cG9ydF8ub25DaGFuZ2VkKHRocm90dGxlZFVwZGF0ZSk7XG4gICAgdGhpcy51bmxpc3Rlbl8gPSAoKSA9PiB7XG4gICAgICBzY3JvbGxVbmxpc3RlbmVyKCk7XG4gICAgICBjaGFuZ2VkVW5saXN0ZW5lcigpO1xuICAgIH07XG4gICAgdGhpcy51cGRhdGVHZW9tZXRyeV8oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIGdlb21ldHJ5IHVwZGF0ZSBtZXNzYWdlIGludG8gdGhlIHNhZmVmcmFtZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVwZGF0ZUdlb21ldHJ5XygpIHtcbiAgICBpZiAoIXRoaXMuaWZyYW1lXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZpZXdwb3J0Xy5nZXRDbGllbnRSZWN0QXN5bmModGhpcy5pZnJhbWVfKS50aGVuKGlmcmFtZUJveCA9PiB7XG4gICAgICB0aGlzLmNoZWNrU3RpbGxDdXJyZW50XygpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkR2VvbSA9IHRoaXMuZm9ybWF0R2VvbV8oaWZyYW1lQm94KTtcbiAgICAgIHRoaXMuc2VuZE1lc3NhZ2VfKHtcbiAgICAgICAgbmV3R2VvbWV0cnk6IGZvcm1hdHRlZEdlb20sXG4gICAgICAgIHVpZDogdGhpcy51aWRfLFxuICAgICAgfSwgU0VSVklDRS5HRU9NRVRSWV9VUERBVEUpO1xuICAgIH0pLmNhdGNoKGVyciA9PiBkZXYoKS5lcnJvcihUQUcsIGVycikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBnZW9tZXRyeSB1cGRhdGUgZm9ybWF0IGV4cGVjdGVkIGJ5IEdQVCBTYWZlZnJhbWUuXG4gICAqIEFsc28gc2V0cyB0aGlzLmN1cnJlbnRHZW9tZXRyeSBhcyBzaWRlIGVmZmVjdC5cbiAgICogQHBhcmFtIHshLi4vLi4vLi4vc3JjL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IGlmcmFtZUJveCBUaGUgZWxlbWVudFJlY3QgZm9yIHRoZSBzYWZlZnJhbWUuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gU2FmZWZyYW1lIGZvcm1hdHRlZCBjaGFuZ2VzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZm9ybWF0R2VvbV8oaWZyYW1lQm94KSB7XG4gICAgY29uc3Qgdmlld3BvcnRTaXplID0gdGhpcy52aWV3cG9ydF8uZ2V0U2l6ZSgpO1xuICAgIGNvbnN0IHNjcm9sbExlZnQgPSB0aGlzLnZpZXdwb3J0Xy5nZXRTY3JvbGxMZWZ0KCk7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gdGhpcy52aWV3cG9ydF8uZ2V0U2Nyb2xsVG9wKCk7XG4gICAgY29uc3QgY3VycmVudEdlb21ldHJ5ID0gLyoqIEB0eXBlIHtKc29uT2JqZWN0fSAqLyh7XG4gICAgICAnd2luZG93Q29vcmRzX3QnOiAwLFxuICAgICAgJ3dpbmRvd0Nvb3Jkc19yJzogdmlld3BvcnRTaXplLndpZHRoLFxuICAgICAgJ3dpbmRvd0Nvb3Jkc19iJzogdmlld3BvcnRTaXplLmhlaWdodCxcbiAgICAgICd3aW5kb3dDb29yZHNfbCc6IDAsXG4gICAgICAnZnJhbWVDb29yZHNfdCc6IGlmcmFtZUJveC50b3AgKyBzY3JvbGxUb3AsXG4gICAgICAnZnJhbWVDb29yZHNfcic6IGlmcmFtZUJveC5yaWdodCArIHNjcm9sbExlZnQsXG4gICAgICAnZnJhbWVDb29yZHNfYic6IGlmcmFtZUJveC5ib3R0b20gKyBzY3JvbGxUb3AsXG4gICAgICAnZnJhbWVDb29yZHNfbCc6IGlmcmFtZUJveC5sZWZ0ICsgc2Nyb2xsTGVmdCxcbiAgICAgICdwb3NDb29yZHNfdCc6IGlmcmFtZUJveC50b3AsXG4gICAgICAncG9zQ29vcmRzX2InOiBpZnJhbWVCb3guYm90dG9tLFxuICAgICAgJ3Bvc0Nvb3Jkc19yJzogaWZyYW1lQm94LnJpZ2h0LFxuICAgICAgJ3Bvc0Nvb3Jkc19sJzogaWZyYW1lQm94LmxlZnQsXG4gICAgICAnc3R5bGVaSW5kZXgnOiBnZXRTdHlsZSh0aGlzLmJhc2VJbnN0YW5jZV8uZWxlbWVudCwgJ3pJbmRleCcpLFxuICAgICAgLy8gQU1QJ3MgYnVpbHQgaW4gcmVzaXplIG1ldGhvZG9sb2d5IHRoYXQgd2UgdXNlIG9ubHkgYWxsb3dzIGV4cGFuc2lvblxuICAgICAgLy8gdG8gdGhlIHJpZ2h0IGFuZCBib3R0b20sIHNvIHdlIGVuZm9yY2UgdGhhdCBoZXJlLlxuICAgICAgJ2FsbG93ZWRFeHBhbnNpb25fcic6IHZpZXdwb3J0U2l6ZS53aWR0aCAtXG4gICAgICAgICAgaWZyYW1lQm94LndpZHRoLFxuICAgICAgJ2FsbG93ZWRFeHBhbnNpb25fYic6IHZpZXdwb3J0U2l6ZS5oZWlnaHQgLVxuICAgICAgICAgIGlmcmFtZUJveC5oZWlnaHQsXG4gICAgICAnYWxsb3dlZEV4cGFuc2lvbl90JzogMCxcbiAgICAgICdhbGxvd2VkRXhwYW5zaW9uX2wnOiAwLFxuICAgICAgJ3lJblZpZXcnOiB0aGlzLmdldFBlcmNJblZpZXcodmlld3BvcnRTaXplLmhlaWdodCxcbiAgICAgICAgICBpZnJhbWVCb3gudG9wLCBpZnJhbWVCb3guYm90dG9tKSxcbiAgICAgICd4SW5WaWV3JzogdGhpcy5nZXRQZXJjSW5WaWV3KHZpZXdwb3J0U2l6ZS53aWR0aCxcbiAgICAgICAgICBpZnJhbWVCb3gubGVmdCwgaWZyYW1lQm94LnJpZ2h0KSxcbiAgICB9KTtcbiAgICB0aGlzLmN1cnJlbnRHZW9tZXRyeV8gPSBjdXJyZW50R2VvbWV0cnk7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRHZW9tZXRyeSk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBib3RoIHRoZSB4SW5WaWV3IGFuZCB5SW5WaWV3IG9mIHRoZVxuICAgKiBnZW9tZXRyeSB1cGRhdGUgbWVzc2FnZXMuIEluIHRoZSBjYXNlIG9mIGEgNDAwcHggd2lkZSB2aWV3cG9ydCxcbiAgICogd2l0aCBhIDEwMHB4IHdpZGUgY3JlYXRpdmUgdGhhdCBzdGFydHMgYXQgeCBwb3NpdGlvbiA1MCwgaWYgd2VcbiAgICogYXJlIGNhbGN1bGF0aW5nIHhJblZpZXcsIHJvb3RCb3VuZEVuZCBpcyA0MDAsIGJvdW5kaW5nUmVjdFN0YXJ0XG4gICAqIGlzIDUwLCBhbmQgYm91bmRpbmdSZWN0RW5kIGlzIDE1MC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvb3RCb3VuZEVuZFxuICAgKiBAcGFyYW0ge251bWJlcn0gYm91bmRpbmdSZWN0U3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJvdW5kaW5nUmVjdEVuZFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXRQZXJjSW5WaWV3KHJvb3RCb3VuZEVuZCwgYm91bmRpbmdSZWN0U3RhcnQsIGJvdW5kaW5nUmVjdEVuZCkge1xuICAgIGNvbnN0IGxlbmd0aEluVmlldyA9IChib3VuZGluZ1JlY3RFbmQgPj0gcm9vdEJvdW5kRW5kKSA/XG4gICAgICByb290Qm91bmRFbmQgLSBib3VuZGluZ1JlY3RTdGFydCA6IGJvdW5kaW5nUmVjdEVuZDtcbiAgICBjb25zdCBwZXJjSW5WaWV3ID0gbGVuZ3RoSW5WaWV3IC8gKGJvdW5kaW5nUmVjdEVuZCAtIGJvdW5kaW5nUmVjdFN0YXJ0KTtcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcGVyY0luVmlldykpIHx8IDA7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBzZXJpYWxpemluZyBhbmQgc2VuZGluZyBtZXNzYWdlcyB0byB0aGUgc2FmZWZyYW1lLlxuICAgKiBAcGFyYW0geyFPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZW5kTWVzc2FnZV8ocGF5bG9hZCwgc2VydmljZU5hbWUpIHtcbiAgICBpZiAoIXRoaXMuaWZyYW1lXy5jb250ZW50V2luZG93KSB7XG4gICAgICBkZXYoKS5lcnJvcihUQUcsICdGcmFtZSBjb250ZW50V2luZG93IHVuYXZhaWxhYmxlLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlID0gZGljdCgpO1xuICAgIG1lc3NhZ2VbTUVTU0FHRV9GSUVMRFMuQ0hBTk5FTF0gPSB0aGlzLmNoYW5uZWw7XG4gICAgbWVzc2FnZVtNRVNTQUdFX0ZJRUxEUy5QQVlMT0FEXSA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAvKiogQHR5cGUgeyFKc29uT2JqZWN0fSAqLyhwYXlsb2FkKSk7XG4gICAgbWVzc2FnZVtNRVNTQUdFX0ZJRUxEUy5TRVJWSUNFXSA9IHNlcnZpY2VOYW1lO1xuICAgIG1lc3NhZ2VbTUVTU0FHRV9GSUVMRFMuU0VOVElORUxdID0gdGhpcy5zZW50aW5lbF87XG4gICAgbWVzc2FnZVtNRVNTQUdFX0ZJRUxEUy5FTkRQT0lOVF9JREVOVElUWV0gPSB0aGlzLmVuZHBvaW50SWRlbnRpdHlfO1xuICAgIHRoaXMuaWZyYW1lXy5jb250ZW50V2luZG93Li8qT0sqL3Bvc3RNZXNzYWdlKFxuICAgICAgICBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgU0FGRUZSQU1FX09SSUdJTik7XG4gIH1cblxuICAvKipcbiAgICogUm91dGVzIG1lc3NhZ2VzIHRvIHRoZWlyIGFwcHJvcHJpYXRlIGhhbmRsZXIuXG4gICAqIEBwYXJhbSB7IUpzb25PYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VcbiAgICovXG4gIHByb2Nlc3NNZXNzYWdlKHBheWxvYWQsIHNlcnZpY2UpIHtcbiAgICAvLyBXZSBhcmUgbm90IGxvZ2dpbmcgdW5leHBlY3RlZCBtZXNzYWdlcywgYW5kIHNvbWUgZXhwZWN0ZWRcbiAgICAvLyBtZXNzYWdlcyBhcmUgYmVpbmcgZHJvcHBlZCwgbGlrZSBpbml0X2RvbmUsIGFzIHdlIGRvbid0IG5lZWQgdGhlbS5cbiAgICBzd2l0Y2ggKHNlcnZpY2UpIHtcbiAgICAgIGNhc2UgU0VSVklDRS5DUkVBVElWRV9HRU9NRVRSWV9VUERBVEU6XG4gICAgICAgIHRoaXMuaGFuZGxlRmx1aWRNZXNzYWdlXyhwYXlsb2FkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNFUlZJQ0UuRVhQQU5EX1JFUVVFU1Q6XG4gICAgICAgIHRoaXMuaGFuZGxlRXhwYW5kUmVxdWVzdF8ocGF5bG9hZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTRVJWSUNFLlJFR0lTVEVSX0RPTkU6XG4gICAgICAgIHRoaXMuaXNSZWdpc3RlcmVkXyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTRVJWSUNFLkNPTExBUFNFX1JFUVVFU1Q6XG4gICAgICAgIHRoaXMuaGFuZGxlQ29sbGFwc2VSZXF1ZXN0XygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU0VSVklDRS5SRVNJWkVfUkVRVUVTVDpcbiAgICAgICAgdGhpcy5oYW5kbGVSZXNpemVSZXF1ZXN0XyhwYXlsb2FkKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUpzb25PYmplY3R9IHBheWxvYWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZUV4cGFuZFJlcXVlc3RfKHBheWxvYWQpIHtcbiAgICBpZiAoIXRoaXMuaXNSZWdpc3RlcmVkXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBleHBhbmRIZWlnaHQgPSBOdW1iZXIodGhpcy5jcmVhdGl2ZVNpemVfLmhlaWdodCkgK1xuICAgICAgICAgIHBheWxvYWRbJ2V4cGFuZF9iJ10gKyBwYXlsb2FkWydleHBhbmRfdCddO1xuICAgIGNvbnN0IGV4cGFuZFdpZHRoID0gTnVtYmVyKHRoaXMuY3JlYXRpdmVTaXplXy53aWR0aCkgK1xuICAgICAgICAgIHBheWxvYWRbJ2V4cGFuZF9yJ10gKyBwYXlsb2FkWydleHBhbmRfbCddO1xuICAgIC8vIFZlcmlmeSB0aGF0IGlmIGV4cGFuZGluZyBieSBwdXNoLCB0aGF0IGV4cGFuZEJ5UHVzaCBpcyBhbGxvd2VkLlxuICAgIC8vIElmIGV4cGFuZGluZyBieSBvdmVybGF5LCB2ZXJpZnkgdGhhdCBleHBhbmRCeU92ZXJsYXkgaXMgYWxsb3dlZCxcbiAgICAvLyBhbmQgdGhhdCB3ZSBhcmUgb25seSBleHBhbmRpbmcgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIGFtcC1hZC5cbiAgICBpZiAoaXNOYU4oZXhwYW5kSGVpZ2h0KSB8fCBpc05hTihleHBhbmRXaWR0aCkgfHxcbiAgICAgICAgKHBheWxvYWRbJ3B1c2gnXSAmJiAhdGhpcy5leHBhbmRCeVB1c2hfKSB8fFxuICAgICAgICAoIXBheWxvYWRbJ3B1c2gnXSAmJiAhdGhpcy5leHBhbmRCeU92ZXJsYXlfICYmXG4gICAgICAgICAoZXhwYW5kV2lkdGggPiB0aGlzLmNyZWF0aXZlU2l6ZV8ud2lkdGggfHxcbiAgICAgICAgICBleHBhbmRIZWlnaHQgPiB0aGlzLmNyZWF0aXZlU2l6ZV8uaGVpZ2h0KSkpIHtcbiAgICAgIGRldigpLmVycm9yKFRBRywgJ0ludmFsaWQgZXhwYW5kIHZhbHVlcy4nKTtcbiAgICAgIHRoaXMuc2VuZFJlc2l6ZVJlc3BvbnNlKFxuICAgICAgICAgIC8qIFNVQ0NFU1M/ICovIGZhbHNlLCBTRVJWSUNFLkVYUEFORF9SRVNQT05TRSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENhbid0IGV4cGFuZCB0byBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0IHNpemVcbiAgICBpZiAoZXhwYW5kSGVpZ2h0ID4gdGhpcy52aWV3cG9ydF8uZ2V0U2l6ZSgpLmhlaWdodCB8fFxuICAgICAgICBleHBhbmRXaWR0aCA+IHRoaXMudmlld3BvcnRfLmdldFNpemUoKS53aWR0aCkge1xuICAgICAgdGhpcy5zZW5kUmVzaXplUmVzcG9uc2UoXG4gICAgICAgICAgLyogU1VDQ0VTUz8gKi8gZmFsc2UsIFNFUlZJQ0UuRVhQQU5EX1JFU1BPTlNFKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVTaXplQ2hhbmdlKGV4cGFuZEhlaWdodCxcbiAgICAgICAgZXhwYW5kV2lkdGgsXG4gICAgICAgIFNFUlZJQ0UuRVhQQU5EX1JFU1BPTlNFKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQ29sbGFwc2VSZXF1ZXN0XygpIHtcbiAgICAvLyBPbmx5IGNvbGxhcHNlIGlmIGV4cGFuZGVkLlxuICAgIGlmICh0aGlzLmlzQ29sbGFwc2VkXyB8fCAhdGhpcy5pc1JlZ2lzdGVyZWRfKSB7XG4gICAgICB0aGlzLnNlbmRSZXNpemVSZXNwb25zZShcbiAgICAgICAgICAvKiBTVUNDRVNTPyAqLyBmYWxzZSwgU0VSVklDRS5DT0xMQVBTRV9SRVNQT05TRSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlU2l6ZUNoYW5nZSh0aGlzLmluaXRpYWxDcmVhdGl2ZVNpemVfLmhlaWdodCxcbiAgICAgICAgdGhpcy5pbml0aWFsQ3JlYXRpdmVTaXplXy53aWR0aCxcbiAgICAgICAgU0VSVklDRS5DT0xMQVBTRV9SRVNQT05TRSxcbiAgICAgICAgLyoqIGlzQ29sbGFwc2UgKi8gdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VUeXBlXG4gICAqL1xuICByZXNpemVTYWZlZnJhbWUoaGVpZ2h0LCB3aWR0aCwgbWVzc2FnZVR5cGUpIHtcbiAgICB0aGlzLmlzQ29sbGFwc2VkXyA9IG1lc3NhZ2VUeXBlID09IFNFUlZJQ0UuQ09MTEFQU0VfUkVTUE9OU0U7XG4gICAgdGhpcy5iYXNlSW5zdGFuY2VfLm1lYXN1cmVNdXRhdGVFbGVtZW50KFxuICAgICAgICAvKiogTUVBU1VSRVIgKi8gKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYmFzZUluc3RhbmNlXy5nZXRSZXNvdXJjZSgpLm1lYXN1cmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIE1VVEFUT1IgKi8gKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmlmcmFtZV8pIHtcbiAgICAgICAgICAgIHNldFN0eWxlcyh0aGlzLmlmcmFtZV8sIHtcbiAgICAgICAgICAgICAgJ2hlaWdodCc6IGhlaWdodCArICdweCcsXG4gICAgICAgICAgICAgICd3aWR0aCc6IHdpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGl2ZVNpemVfLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRpdmVTaXplXy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNlbmRSZXNpemVSZXNwb25zZSgvKiogU1VDQ0VTUyAqLyB0cnVlLCBtZXNzYWdlVHlwZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuaWZyYW1lX1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzaXplcyB0aGUgc2FmZWZyYW1lLCBhbmQgcG90ZW50aWFsbHkgdGhlIGNvbnRhaW5pbmcgYW1wLWFkIGVsZW1lbnQuXG4gICAqIFRoZW4gc2VuZHMgYSByZXNwb25zZSBtZXNzYWdlIHRvIHRoZSBTYWZlZnJhbWUgY3JlYXRpdmUuXG4gICAqXG4gICAqIEZvciBleHBhbnNpb246XG4gICAqICBJZiB0aGUgbmV3IHNpemUgaXMgZnVsbHkgY29udGFpbmVkIHdpdGhpbiB0aGUgYm91bmRzIG9mIHRoZSBhbXAtYWQsXG4gICAqICB3ZSBjYW4gcmVzaXplIGltbWVkaWF0ZWx5IGFzIHRoZXJlIHdpbGwgYmUgbm8gcmVmbG93LiBIb3dldmVyLCBpZlxuICAgKiAgdGhlIG5ldyBzaXplIGlzIGxhcmdlciB0aGFuIHRoZSBhbXAtYWQsIHRoZW4gZmlyc3Qgd2UgbmVlZCB0byB0cnlcbiAgICogIHRvIHJlc2l6ZSB0aGUgYW1wLWFkLCBhbmQgb25seSByZXNpemUgdGhlIHNhZmVmcmFtZSBpZiB0aGF0IHN1Y2NlZWRzLlxuICAgKiBGb3IgY29sbGFwc2U6XG4gICAqICBXZSBhbHdheXMgZmlyc3Qgd2FudCB0byBhdHRlbXB0IHRvIGNvbGxhcHNlIHRoZSBhbXAtYWQuIFRoZW4sXG4gICAqICByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhhdCBzdWNjZWVkcywgd2UgY29sbGFwc2UgdGhlIHNhZmVmcmFtZSB0b28uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggSW4gcGl4ZWxzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVR5cGVcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0SXNDb2xsYXBzZSBXaGV0aGVyIHRoaXMgaXMgYSBjb2xsYXBzZSBhdHRlbXB0LlxuICAgKi9cbiAgaGFuZGxlU2l6ZUNoYW5nZShoZWlnaHQsIHdpZHRoLCBtZXNzYWdlVHlwZSwgb3B0SXNDb2xsYXBzZSkge1xuICAgIHJldHVybiB0aGlzLnZpZXdwb3J0Xy5nZXRDbGllbnRSZWN0QXN5bmMoXG4gICAgICAgIHRoaXMuYmFzZUluc3RhbmNlXy5lbGVtZW50KS50aGVuKGJveCA9PiB7XG4gICAgICBpZiAoIW9wdElzQ29sbGFwc2UgJiYgd2lkdGggPD0gYm94LndpZHRoICYmIGhlaWdodCA8PSBib3guaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMucmVzaXplU2FmZWZyYW1lKGhlaWdodCwgd2lkdGgsIG1lc3NhZ2VUeXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzaXplQW1wQWRBbmRTYWZlZnJhbWUoaGVpZ2h0LCB3aWR0aCwgbWVzc2FnZVR5cGUsXG4gICAgICAgICAgICBvcHRJc0NvbGxhcHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFKc29uT2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVSZXNpemVSZXF1ZXN0XyhwYXlsb2FkKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVnaXN0ZXJlZF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzaXplSGVpZ2h0ID0gTnVtYmVyKHRoaXMuY3JlYXRpdmVTaXplXy5oZWlnaHQpICtcbiAgICAgICAgICAocGF5bG9hZFsncmVzaXplX2InXSArIHBheWxvYWRbJ3Jlc2l6ZV90J10pO1xuICAgIGNvbnN0IHJlc2l6ZVdpZHRoID0gTnVtYmVyKHRoaXMuY3JlYXRpdmVTaXplXy53aWR0aCkgK1xuICAgICAgICAgIChwYXlsb2FkWydyZXNpemVfciddICsgcGF5bG9hZFsncmVzaXplX2wnXSk7XG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgYXJlIGFjdHVhbGx5IHJlc2l6aW5nIGhlcmUuXG4gICAgaWYgKGlzTmFOKHJlc2l6ZVdpZHRoKSB8fCBpc05hTihyZXNpemVIZWlnaHQpIHx8XG4gICAgICAgIHJlc2l6ZVdpZHRoID4gdGhpcy5jcmVhdGl2ZVNpemVfLndpZHRoIHx8XG4gICAgICAgIHJlc2l6ZUhlaWdodCA+IHRoaXMuY3JlYXRpdmVTaXplXy5oZWlnaHQpIHtcbiAgICAgIGRldigpLmVycm9yKFRBRywgJ0ludmFsaWQgcmVzaXplIHZhbHVlcy4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2l6ZUFtcEFkQW5kU2FmZWZyYW1lKHJlc2l6ZUhlaWdodCwgcmVzaXplV2lkdGgsXG4gICAgICAgIFNFUlZJQ0UuUkVTSVpFX1JFU1BPTlNFLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN1Y2Nlc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VUeXBlXG4gICAqL1xuICBzZW5kUmVzaXplUmVzcG9uc2Uoc3VjY2VzcywgbWVzc2FnZVR5cGUpIHtcbiAgICBpZiAoIXRoaXMuaWZyYW1lXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZpZXdwb3J0Xy5nZXRDbGllbnRSZWN0QXN5bmModGhpcy5pZnJhbWVfKS50aGVuKGlmcmFtZUJveCA9PiB7XG4gICAgICB0aGlzLmNoZWNrU3RpbGxDdXJyZW50XygpO1xuICAgICAgY29uc3QgZm9ybWF0dGVkR2VvbSA9IHRoaXMuZm9ybWF0R2VvbV8oaWZyYW1lQm94KTtcbiAgICAgIHRoaXMuc2VuZE1lc3NhZ2VfKHtcbiAgICAgICAgdWlkOiB0aGlzLnVpZF8sXG4gICAgICAgIHN1Y2Nlc3MsXG4gICAgICAgIG5ld0dlb21ldHJ5OiBmb3JtYXR0ZWRHZW9tLFxuICAgICAgICAnZXhwYW5kX3QnOiB0aGlzLmN1cnJlbnRHZW9tZXRyeV9bJ2FsbG93ZWRFeHBhbnNpb25fdCddLFxuICAgICAgICAnZXhwYW5kX2InOiB0aGlzLmN1cnJlbnRHZW9tZXRyeV9bJ2FsbG93ZWRFeHBhbnNpb25fYiddLFxuICAgICAgICAnZXhwYW5kX3InOiB0aGlzLmN1cnJlbnRHZW9tZXRyeV9bJ2FsbG93ZWRFeHBhbnNpb25fciddLFxuICAgICAgICAnZXhwYW5kX2wnOiB0aGlzLmN1cnJlbnRHZW9tZXRyeV9bJ2FsbG93ZWRFeHBhbnNpb25fbCddLFxuICAgICAgICBwdXNoOiB0cnVlLFxuICAgICAgfSwgbWVzc2FnZVR5cGUpO1xuICAgIH0pLmNhdGNoKGVyciA9PiBkZXYoKS5lcnJvcihUQUcsIGVycikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIHJlc2l6ZSBib3RoIHRoZSBhbXAtYWQgYW5kIHRoZSBTYWZlZnJhbWUuXG4gICAqIElmIHRoZSBhbXAtYWQgY2FuIG5vdCBiZSByZXNpemVkLCB0aGVuIGlmIGl0IHdhcyBhIGNvbGxhcHNlIHJlcXVlc3QsXG4gICAqIHdlIHdpbGwgc3RpbGwgY29sbGFwc2UganVzdCB0aGUgc2FmZWZyYW1lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVR5cGVcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzU2hyaW5raW5nIFRydWUgaWYgY29sbGFwc2luZyBvciByZXNpemluZyBzbWFsbGVyLlxuICAgKi9cbiAgcmVzaXplQW1wQWRBbmRTYWZlZnJhbWUoaGVpZ2h0LCB3aWR0aCwgbWVzc2FnZVR5cGUsIG9wdF9pc1Nocmlua2luZykge1xuICAgIC8vIEZpcnN0LCBhdHRlbXB0IHRvIHJlc2l6ZSB0aGUgQW1wLUFkIHRoYXQgaXMgdGhlIHBhcmVudCBvZiB0aGVcbiAgICAvLyBzYWZlZnJhbWVcbiAgICB0aGlzLmJhc2VJbnN0YW5jZV8uYXR0ZW1wdENoYW5nZVNpemUoaGVpZ2h0LCB3aWR0aCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmNoZWNrU3RpbGxDdXJyZW50XygpO1xuICAgICAgLy8gSWYgdGhpcyByZXNpemUgc3VjY2VlZGVkLCB3ZSBhbHdheXMgcmVzaXplIHRoZSBzYWZlZnJhbWUuXG4gICAgICAvLyByZXNpemVTYWZlZnJhbWUgYWxzbyBzZW5kcyB0aGUgcmVzaXplIHJlc3BvbnNlLlxuICAgICAgdGhpcy5yZXNpemVTYWZlZnJhbWUoaGVpZ2h0LCB3aWR0aCwgbWVzc2FnZVR5cGUpO1xuICAgIH0sIC8qKiBSRUpFQ1QgQ0FMTEJBQ0sgKi8gKCkgPT4ge1xuICAgICAgLy8gSWYgdGhlIHJlc2l6ZSBpbml0aWFsbHkgZmFpbGVkLCBpdCBtYXkgaGF2ZSBiZWVuIHF1ZXVlZFxuICAgICAgLy8gYXMgYSBwZW5kaW5nQ2hhbmdlU2l6ZSwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgc2l6ZSBjaGFuZ2VcbiAgICAgIC8vIHRvIGV4ZWN1dGUgdXBvbiB0aGUgbmV4dCB1c2VyIGludGVyYWN0aW9uLiBXZSBkb24ndCB3YW50XG4gICAgICAvLyB0aGF0IGZvciBzYWZlZnJhbWUsIHNvIHdlIHJlc2V0IGl0IGhlcmUuXG4gICAgICB0aGlzLmJhc2VJbnN0YW5jZV8uZ2V0UmVzb3VyY2UoKS5yZXNldFBlbmRpbmdDaGFuZ2VTaXplKCk7XG4gICAgICBpZiAob3B0X2lzU2hyaW5raW5nKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBjb2xsYXBzZSBvciByZXNpemUgcmVxdWVzdCwgdGhlbiBldmVuIGlmIHJlc2l6aW5nXG4gICAgICAgIC8vIHRoZSBhbXAtYWQgZmFpbGVkLCBzdGlsbCByZXNpemUgdGhlIGlmcmFtZS5cbiAgICAgICAgLy8gcmVzaXplU2FmZWZyYW1lIGFsc28gc2VuZHMgdGhlIHJlc2l6ZSByZXNwb25zZS5cbiAgICAgICAgLy8gT25seSByZWdpc3RlciBhcyBjb2xsYXBzZWQgaWYgZXhwbGljaXRseSBhIGNvbGxhcHNlIHJlcXVlc3QuXG4gICAgICAgIHRoaXMucmVzaXplU2FmZWZyYW1lKGhlaWdodCwgd2lkdGgsIG1lc3NhZ2VUeXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIHdlcmUgYXR0ZW1wdGluZyB0b1xuICAgICAgICAvLyBleHBhbmQgcGFzdCB0aGUgYm91bmRzIG9mIHRoZSBhbXAtYWQsIGFuZCBpdCBmYWlsZWQuIFRodXMsXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc2VuZCBhIGZhaWx1cmUgbWVzc2FnZSwgYW5kIHRoZSBzYWZlZnJhbWUgaXNcbiAgICAgICAgLy8gbm90IHJlc2l6ZWQuXG4gICAgICAgIHRoaXMuc2VuZFJlc2l6ZVJlc3BvbnNlKGZhbHNlLCBtZXNzYWdlVHlwZSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIGlmIChlcnIubWVzc2FnZSA9PSAnQ0FOQ0VMTEVEJykge1xuICAgICAgICBkZXYoKS5lcnJvcihUQUcsIGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRldigpLmVycm9yKFRBRywgYFJlc2l6aW5nIGZhaWxlZDogJHtlcnJ9YCk7XG4gICAgICB0aGlzLnNlbmRSZXNpemVSZXNwb25zZShmYWxzZSwgbWVzc2FnZVR5cGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgRmx1aWQtcmVsYXRlZCBtZXNzYWdlcyBkaXNwYXRjaGVkIGZyb20gU2FmZUZyYW1lLlxuICAgKiBAcGFyYW0geyFKc29uT2JqZWN0fSBwYXlsb2FkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVGbHVpZE1lc3NhZ2VfKHBheWxvYWQpIHtcbiAgICBsZXQgbmV3SGVpZ2h0O1xuICAgIGlmICghcGF5bG9hZCB8fCAhKG5ld0hlaWdodCA9IHBhcnNlSW50KHBheWxvYWRbJ2hlaWdodCddLCAxMCkpKSB7XG4gICAgICAvLyBUT0RPKGxldml0emt5KSBBZGQgYWN0dWFsIGVycm9yIGhhbmRsaW5nIGhlcmUuXG4gICAgICB0aGlzLmJhc2VJbnN0YW5jZV8uZm9yY2VDb2xsYXBzZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmJhc2VJbnN0YW5jZV8uYXR0ZW1wdENoYW5nZUhlaWdodChuZXdIZWlnaHQpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNoZWNrU3RpbGxDdXJyZW50XygpO1xuICAgICAgICAgIHRoaXMub25GbHVpZFJlc2l6ZV8obmV3SGVpZ2h0KTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT0gJ0NBTkNFTExFRCcpIHtcbiAgICAgICAgICAgIGRldigpLmVycm9yKFRBRywgZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVE9ETyhsZXZpdHpreSkgQWRkIG1vcmUgZXJyb3IgaGFuZGxpbmcgaGVyZVxuICAgICAgICAgIHRoaXMuYmFzZUluc3RhbmNlXy5mb3JjZUNvbGxhcHNlKCk7XG4gICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIGEgZGVsYXllZCBpbXByZXNzaW9uIGFuZCBub3RpZmllcyB0aGUgRmx1aWQgY3JlYXRpdmUgdGhhdCBpdHNcbiAgICogY29udGFpbmVyIGhhcyBiZWVuIHJlc2l6ZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdIZWlnaHQgVGhlIGhlaWdodCBleHBhbmRlZCB0by5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uRmx1aWRSZXNpemVfKG5ld0hlaWdodCkge1xuICAgIGNvbnN0IGlmcmFtZSA9IGRldigpLmFzc2VydEVsZW1lbnQodGhpcy5iYXNlSW5zdGFuY2VfLmlmcmFtZSk7XG4gICAgY29uc3QgaWZyYW1lSGVpZ2h0ID0gcGFyc2VJbnQoZ2V0U3R5bGUoaWZyYW1lLCAnaGVpZ2h0JyksIDEwKSB8fCAwO1xuICAgIGlmIChpZnJhbWVIZWlnaHQgIT0gbmV3SGVpZ2h0KSB7XG4gICAgICBzZXRTdHlsZXMoaWZyYW1lLCB7aGVpZ2h0OiBgJHtuZXdIZWlnaHR9cHhgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmZsdWlkSW1wcmVzc2lvblVybF8pIHtcbiAgICAgIHRoaXMuYmFzZUluc3RhbmNlXy5maXJlRGVsYXllZEltcHJlc3Npb25zKFxuICAgICAgICAgIHRoaXMuZmx1aWRJbXByZXNzaW9uVXJsXyk7XG4gICAgICB0aGlzLmZsdWlkSW1wcmVzc2lvblVybF8gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmlmcmFtZV8uY29udGVudFdpbmRvdy4vKk9LKi9wb3N0TWVzc2FnZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGljdCh7J21lc3NhZ2UnOiAncmVzaXplLWNvbXBsZXRlJywgJ2MnOiB0aGlzLmNoYW5uZWx9KSksXG4gICAgICAgIFNBRkVGUkFNRV9PUklHSU4pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgdGhpcyBIb3N0IEFQSS5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5pZnJhbWVfID0gbnVsbDtcbiAgICBkZWxldGUgc2FmZWZyYW1lSG9zdHNbdGhpcy5zZW50aW5lbF9dO1xuICAgIGlmICh0aGlzLnVubGlzdGVuXykge1xuICAgICAgdGhpcy51bmxpc3Rlbl8oKTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHNhZmVmcmFtZUhvc3RzKS5sZW5ndGggPT0gMCkge1xuICAgICAgcmVtb3ZlU2FmZWZyYW1lTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBzYWZlZnJhbWUgZXZlbnQgbGlzdGVuZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTYWZlZnJhbWVMaXN0ZW5lcigpIHtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBzYWZlZnJhbWVMaXN0ZW5lciwgZmFsc2UpO1xuICBzYWZlZnJhbWVMaXN0ZW5lckNyZWF0ZWRfID0gZmFsc2U7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtSRU5ERVJJTkdfVFlQRV9IRUFERVIsIFhPUklHSU5fTU9ERX0gZnJvbSAnLi4vLi4vYW1wLWE0YS8wLjEvYW1wLWE0YSc7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5pbXBvcnQge2dldEVuY2xvc2luZ0NvbnRhaW5lclR5cGVzfSBmcm9tICcuLi8uLi8uLi9hZHMvZ29vZ2xlL2E0YS91dGlscyc7XG5pbXBvcnQge1xuICBpc0luTWFudWFsRXhwZXJpbWVudCxcbn0gZnJvbSAnLi4vLi4vLi4vYWRzL2dvb2dsZS9hNGEvdHJhZmZpYy1leHBlcmltZW50cyc7XG5pbXBvcnQge2lzT2JqZWN0fSBmcm9tICcuLi8uLi8uLi9zcmMvdHlwZXMnO1xuaW1wb3J0IHt0cnlSZXNvbHZlfSBmcm9tICcuLi8uLi8uLi9zcmMvdXRpbHMvcHJvbWlzZSc7XG5pbXBvcnQge3V0ZjhFbmNvZGV9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9ieXRlcyc7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuY29uc3QgVEFHID0gJ2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwnO1xuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBURkNEID0gJ3RhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQnO1xuXG4vKiogQHByaXZhdGUgeyFBcnJheTxmdW5jdGlvbighQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+KTo/T2JqZWN0PHN0cmluZyxzdHJpbmc+Pn0gKi9cbmNvbnN0IFNSQV9KT0lORVJTID0gW1xuICBjb21iaW5lSW52ZW50b3J5VW5pdHMsIGdldENvb2tpZU9wdE91dCwgZ2V0QWRrcywgZ2V0U2l6ZXMsIGdldFRmY2QsIGlzQWRUZXN0LFxuICBnZXRUYXJnZXRpbmdBbmRFeGNsdXNpb25zLCBnZXRFeHBlcmltZW50SWRzLCBnZXRJZGVudGl0eSwgZ2V0Rm9yY2VTYWZlZnJhbWUsXG4gIGdldFBhZ2VPZmZzZXRzLCBnZXRDb250YWluZXJzXTtcblxuLyoqXG4gICogQHBhcmFtIHshQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbXBsc1xuICAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCAqPn1cbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RTUkFCbG9ja1BhcmFtZXRlcnMoaW1wbHMpIHtcbiAgY29uc3QgcGFyYW1ldGVycyA9IHsnb3V0cHV0JzogJ2xkamgnLCAnaW1wbCc6ICdmaWZzJ307XG4gIFNSQV9KT0lORVJTLmZvckVhY2goam9pbmVyID0+IE9iamVjdC5hc3NpZ24ocGFyYW1ldGVycywgam9pbmVyKGltcGxzKSkpO1xuICByZXR1cm4gcGFyYW1ldGVycztcbn1cblxuLyoqXG4gKiBHaXZlbiBhcnJheSBvZiBpbnN0YW5jZXMsIGV4ZWN1dGUgZXh0cmFjdEZuIG9uIGVhY2ggYW5kIHJldHVybiBmaXJzdCBub24tXG4gKiBmYWxzZXkgdmFsdWUgb3IgbnVsbCBpZiBub25lIGFyZSB0cnV0aHkuXG4gKiBAcGFyYW0geyFBcnJheTwhLi9hbXAtYWQtbmV0d29yay1kb3VibGVjbGljay1pbXBsLkFtcEFkTmV0d29ya0RvdWJsZWNsaWNrSW1wbD59IGltcGxzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsKTo/VH0gZXh0cmFjdEZuXG4gKiBAcmV0dXJuIHs/VH0gdmFsdWUgb2YgZmlyc3QgaW5zdGFuY2Ugd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWUgb3IgbnVsbFxuICogICAgaWYgbm9uZSBjYW4gYmUgZm91bmRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRGaXJzdEluc3RhbmNlVmFsdWVfKGltcGxzLCBleHRyYWN0Rm4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbXBscy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbCA9IGV4dHJhY3RGbihpbXBsc1tpXSk7XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ29tYmluZXMgaW52ZW50b3J5IHVuaXQgcGF0aHMgZm9yIG11bHRpcGxlIGJsb2NrcyBieSBidWlsZGluZyBsaXN0IG9mXG4gKiB1bmlxdWUgcGF0aCBwYXJ0cyBpbiBpdV9wYXJ0cyBhbmQgdGhlbiBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBibG9ja1xuICogcGF0aHMgdXNpbmcgaW5kZXggaW50byBpdV9wYXJ0cyBsaXN0LlxuICogRXhhbXBsZTogLzEyMy9mb28vYmFyIGFuZCAvYmxhaC9mb28vYmFyLzEyMyA9PlxuICogICAgaXVfcGFydHM9MTIzLGZvbyxiYXIsYmxhaCAmIGVuY19wcmV2X2l1cz0vMC8xLzIsLzMvMS8yLzBcbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVJbnZlbnRvcnlVbml0cyhpbXBscykge1xuICBjb25zdCB1bmlxdWVJdU5hbWVzID0ge307XG4gIGNvbnN0IGl1TmFtZXNPdXRwdXQgPSBbXTtcbiAgbGV0IHVuaXF1ZUl1TmFtZXNDb3VudCA9IDA7XG4gIGNvbnN0IHByZXZJdXNFbmNvZGVkID0gW107XG4gIGltcGxzLmZvckVhY2goaW5zdGFuY2UgPT4ge1xuICAgIGNvbnN0IGl1ID0gZGV2KCkuYXNzZXJ0KGluc3RhbmNlLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNsb3QnKSk7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZXMgPSBpdS5zcGxpdCgnLycpO1xuICAgIGNvbnN0IGVuY29kZWROYW1lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lc1tpXSA9PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBpbmRleCA9IHVuaXF1ZUl1TmFtZXNbY29tcG9uZW50TmFtZXNbaV1dO1xuICAgICAgaWYgKGluZGV4ID09IHVuZGVmaW5lZCkge1xuICAgICAgICBpdU5hbWVzT3V0cHV0LnB1c2goY29tcG9uZW50TmFtZXNbaV0pO1xuICAgICAgICB1bmlxdWVJdU5hbWVzW2NvbXBvbmVudE5hbWVzW2ldXSA9IChpbmRleCA9IHVuaXF1ZUl1TmFtZXNDb3VudCsrKTtcbiAgICAgIH1cbiAgICAgIGVuY29kZWROYW1lcy5wdXNoKGluZGV4KTtcbiAgICB9XG4gICAgcHJldkl1c0VuY29kZWQucHVzaChlbmNvZGVkTmFtZXMuam9pbignLycpKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgJ2l1X3BhcnRzJzogaXVOYW1lc091dHB1dC5qb2luKCksXG4gICAgJ2VuY19wcmV2X2l1cyc6IHByZXZJdXNFbmNvZGVkLmpvaW4oKSxcbiAgfTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgU1JBIHJlcXVlc3QgaXMgY29va2llIG9wdCBvdXQgaWYgYW55IG9mIHRoZSBibG9ja3MgaW5jbHVkZXNcbiAqIGNvb2tpZSBvcHQgb3V0IGluIHRhcmdldGluZy5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvb2tpZU9wdE91dChpbXBscykge1xuICByZXR1cm4gZ2V0Rmlyc3RJbnN0YW5jZVZhbHVlXyhpbXBscywgaW1wbCA9PlxuICAgIGltcGwuanNvblRhcmdldGluZyAmJlxuICAgICAgICAgaW1wbC5qc29uVGFyZ2V0aW5nWydjb29raWVPcHRPdXQnXSA/IHsnY28nOiAnMSd9IDogbnVsbCk7XG59XG5cbi8qKlxuICogQ29tYmluZSBhZCB1bml0IGtleSBvZiBlYWNoIGJsb2NrIHZpYSBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzLlxuICogQHBhcmFtIHshQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbXBsc1xuICogQHJldHVybiB7P09iamVjdDxzdHJpbmcsc3RyaW5nPn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRrcyhpbXBscykge1xuICByZXR1cm4gKHsnYWRrcyc6IGltcGxzLm1hcChpbXBsID0+IGRldigpLmFzc2VydChpbXBsLmFkS2V5KSkuam9pbigpfSk7XG59XG5cbi8qKlxuICogQ29tYmluZSBibG9jayBzaXplcyB2aWEgY29tbWEgc2VwYXJhdGVkIHZhbHVlcy5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNpemVzKGltcGxzKSB7XG4gIHJldHVybiAoeydwcmV2X2l1X3N6cyc6IGltcGxzLm1hcChpbXBsID0+XG4gICAgZGV2KCkuYXNzZXJ0KGltcGwucGFyYW1ldGVyU2l6ZSkpLmpvaW4oKX0pO1xufVxuXG4vKipcbiAqIEluZGljYXRlIFNSQSByZXF1ZXN0IGlzIHRhZ0ZvckNoaWxkRGlyZWN0ZWRUcmVhdG1lbnQgaWYgYW55IGJsb2NrcyBpbmNsdWRlc1xuICogaW4gdGFyZ2V0aW5nLlxuICogQHBhcmFtIHshQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbXBsc1xuICogQHJldHVybiB7P09iamVjdDxzdHJpbmcsc3RyaW5nPn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGZjZChpbXBscykge1xuICByZXR1cm4gZ2V0Rmlyc3RJbnN0YW5jZVZhbHVlXyhpbXBscywgaW1wbCA9PlxuICAgIGltcGwuanNvblRhcmdldGluZyAmJiBpbXBsLmpzb25UYXJnZXRpbmdbVEZDRF0gP1xuICAgICAgeyd0ZmNkJzogaW1wbC5qc29uVGFyZ2V0aW5nW1RGQ0RdfSA6IG51bGwpO1xufVxuXG4vKipcbiAqIEluZGljYXRlIFNSQSByZXF1ZXN0IHNob3VsZCBpbmNsdWRlIGFkdGVzdD1vbiBpZiBhbnkgYmxvY2sgaW5jbHVkZXMgdGhlXG4gKiBtYW51YWwgZXhwZXJpbWVudCBpZC5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWRUZXN0KGltcGxzKSB7XG4gIHJldHVybiBnZXRGaXJzdEluc3RhbmNlVmFsdWVfKGltcGxzLCBpbXBsID0+XG4gICAgaXNJbk1hbnVhbEV4cGVyaW1lbnQoaW1wbC5lbGVtZW50KSA/IHsnYWR0ZXN0JzogJ29uJ30gOiBudWxsKTtcbn1cblxuLyoqXG4gKiBKb2luIGJsb2NrIHRhcmdldGluZyB2YWx1ZXMgYnkgc2VwYXJhdGluZyBieSBwaXBlcyAoZWFjaCBrZXkvdmFsdWUgcGFpciBmb3JcbiAqIGEgZ2l2ZW4gYmxvY2sgaXMgc2VwYXJhdGVkIGJ5ID0pIGFuZCBleGNsdXNpb25zIGFyZSBnaXZlbiBzcGVjaWFsIGV4Y2xfY2F0XG4gKiBrZXkgKGxpc3Qgb2YgY2F0ZWdvcmllcyBhcmUgY29tbWEgc2VwYXJhdGVkKS5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRhcmdldGluZ0FuZEV4Y2x1c2lvbnMoaW1wbHMpIHtcbiAgbGV0IGhhc1NjcCA9IGZhbHNlO1xuICBjb25zdCBzY3BzID0gW107XG4gIGltcGxzLmZvckVhY2goaW1wbCA9PiB7XG4gICAgaWYgKGltcGwuanNvblRhcmdldGluZyAmJiAoaW1wbC5qc29uVGFyZ2V0aW5nWyd0YXJnZXRpbmcnXSB8fFxuICAgICAgIGltcGwuanNvblRhcmdldGluZ1snY2F0ZWdvcnlFeGNsdXNpb25zJ10pKSB7XG4gICAgICBoYXNTY3AgPSB0cnVlO1xuICAgICAgc2Nwcy5wdXNoKHNlcmlhbGl6ZVRhcmdldGluZyhcbiAgICAgICAgICBpbXBsLmpzb25UYXJnZXRpbmdbJ3RhcmdldGluZyddIHx8IG51bGwsXG4gICAgICAgICAgaW1wbC5qc29uVGFyZ2V0aW5nWydjYXRlZ29yeUV4Y2x1c2lvbnMnXSB8fCBudWxsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcHMucHVzaCgnJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhhc1NjcCA/IHsncHJldl9zY3AnOiBzY3BzLmpvaW4oJ3wnKX0gOiBudWxsO1xufVxuXG4vKipcbiAqIEV4cGVyaW1lbnQgaWRzIGFyZSBhc3N1bWVkIHRvIGJlIHBhZ2UgbGV2ZWwgZ2l2ZW4gdGhhdCBpcyBhbGwgdGhhdCBpc1xuICogc3VwcG9ydGVkIGZvciBTUkEgcmVxdWVzdHMgdGhlcmVmb3JlIGJsb2NrIHZhbHVlcyBhcmUgY29tYmluZWQgYnkgYnVpbGRpbmdcbiAqIHRoZSB1bmlxdWUgc2V0IG9mIGV4cGVyaW1lbnQgaWRzIHdoaWNoIGFyZSBjb21tYSBzZXBhcmF0ZWQgKG9yZGVyIGRvZXMgbm90XG4gKiBtYXR0ZXIpLlxuICogQHBhcmFtIHshQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbXBsc1xuICogQHJldHVybiB7P09iamVjdDxzdHJpbmcsc3RyaW5nPn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwZXJpbWVudElkcyhpbXBscykge1xuICBjb25zdCBlaWRzID0ge307XG4gIGNvbnN0IGRlaWQgPSAoaW1wbHMubGVuZ3RoICYmXG4gICAgIC8oPzojfCwpZGVpZD0oW1xcZCxdKykvaS5leGVjKGltcGxzWzBdLndpbi5sb2NhdGlvbi5oYXNoKSkgfHwgW107XG4gIChkZWlkWzFdIHx8ICcnKS5zcGxpdCgnLCcpLmZvckVhY2goZWlkID0+IGVpZCAmJiAoZWlkc1tlaWRdID0gMSkpO1xuICBpbXBscy5mb3JFYWNoKGltcGwgPT4gaW1wbC5leHBlcmltZW50SWRzLmZvckVhY2goZWlkID0+IGVpZHNbZWlkXSA9IDEpKTtcbiAgY29uc3QgZWlkS2V5cyA9IE9iamVjdC5rZXlzKGVpZHMpLmpvaW4oKTtcbiAgcmV0dXJuIGVpZEtleXMgPyB7J2VpZCc6IGVpZEtleXN9IDogbnVsbDtcbn1cblxuLyoqXG4gKiBJZGVudGl0eSB0b2tlbiBpcyBwYWdlIGxldmVsIHRoZXJlZm9yZSBTUkEgdXNlcyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0XG4gKiBibG9jay5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElkZW50aXR5KGltcGxzKSB7XG4gIHJldHVybiBnZXRGaXJzdEluc3RhbmNlVmFsdWVfKGltcGxzLCBpbXBsID0+IGltcGwuYnVpbGRJZGVudGl0eVBhcmFtcygpKTtcbn1cblxuLyoqXG4gKiBDb21iaW5lIGZvcmNlIHNhZmVmcmFtZSB2YWx1ZXMgZm9yIGVhY2ggYmxvY2sgdmlhIGNvbW1hIHNlcGFyYXRlZCBudW1lcmljXG4gKiB2YWx1ZXMgYmFzZWQgb24gYm9vbGVhbiB2YWx1ZSAoZS5nLiBmYWxzZSA9IDAsIHRydWUgPSAxKS4gIElmIG5vbmUgb2YgdGhlXG4gKiBibG9ja3MgaGFzIGZvcmNlIHNhZmVmcmFtZSwgcGFyYW1ldGVyIGlzIG5vdCBpbmNsdWRlZCBpbiBTUkEgcmVxdWVzdC5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcmNlU2FmZWZyYW1lKGltcGxzKSB7XG4gIGxldCBzYWZlZnJhbWVGb3JjZWQgPSBmYWxzZTtcbiAgY29uc3QgZm9yY2VTYWZlZnJhbWVzID0gW107XG4gIGltcGxzLmZvckVhY2goaW1wbCA9PiB7XG4gICAgc2FmZWZyYW1lRm9yY2VkID0gc2FmZWZyYW1lRm9yY2VkIHx8IGltcGwuZm9yY2VTYWZlZnJhbWU7XG4gICAgZm9yY2VTYWZlZnJhbWVzLnB1c2goTnVtYmVyKGltcGwuZm9yY2VTYWZlZnJhbWUpKTtcbiAgfSk7XG4gIHJldHVybiBzYWZlZnJhbWVGb3JjZWQgPyB7J2ZzZnMnOiBmb3JjZVNhZmVmcmFtZXMuam9pbigpfSA6IG51bGw7XG59XG5cbi8qKlxuICogQ29tYmluZSBwYWdlIG9mZnNldCBpbmZvIGZvciBlYWNoIGJsb2NrIGJ5IGNvbnN0cnVjdGluZyBzZXBhcmF0ZSBwYXJhbWV0ZXJcbiAqIGZvciBsZWZ0IChhZHhzKSBhbmQgdG9wIChhZHl4KSB2aWEgY29tbWEgc2VwYXJhdGVkLlxuICogQHBhcmFtIHshQXJyYXk8IS4vYW1wLWFkLW5ldHdvcmstZG91YmxlY2xpY2staW1wbC5BbXBBZE5ldHdvcmtEb3VibGVjbGlja0ltcGw+fSBpbXBsc1xuICogQHJldHVybiB7P09iamVjdDxzdHJpbmcsc3RyaW5nPn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFnZU9mZnNldHMoaW1wbHMpIHtcbiAgY29uc3QgYWR4cyA9IFtdO1xuICBjb25zdCBhZHlzID0gW107XG4gIGltcGxzLmZvckVhY2goaW1wbCA9PiB7XG4gICAgY29uc3QgbGF5b3V0Qm94ID0gaW1wbC5nZXRQYWdlTGF5b3V0Qm94KCk7XG4gICAgYWR4cy5wdXNoKGxheW91dEJveC5sZWZ0KTtcbiAgICBhZHlzLnB1c2gobGF5b3V0Qm94LnRvcCk7XG4gIH0pO1xuICByZXR1cm4geydhZHhzJzogYWR4cy5qb2luKCksICdhZHlzJzogYWR5cy5qb2luKCl9O1xufVxuXG4vKipcbiAqIENvbWJpbmUgd2hpY2ggY29udGFpbmVycyBleGlzdCBmb3IgZWFjaCBibG9jayAoZS5nLiBzdGlja3kpIHZpYSBwaXBlXG4gKiBzZXBhcmF0b3IgKGFzIGJsb2NrIGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyB0aGF0IGFyZSBjb21tYSBzZXBhcmF0ZWQpLiAgSWZcbiAqIG5vbmUgb2YgdGhlIGJsb2NrcyBoYXZlIGEgY29udGFpbmVyLCB0aGVuIHBhcmFtZXRlciBpcyBub3Qgc2VudC5cbiAqIEBwYXJhbSB7IUFycmF5PCEuL2FtcC1hZC1uZXR3b3JrLWRvdWJsZWNsaWNrLWltcGwuQW1wQWROZXR3b3JrRG91YmxlY2xpY2tJbXBsPn0gaW1wbHNcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLHN0cmluZz59XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRhaW5lcnMoaW1wbHMpIHtcbiAgbGV0IGhhc0FtcENvbnRhaW5lciA9IGZhbHNlO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgaW1wbHMuZm9yRWFjaChpbXBsID0+IHtcbiAgICBjb25zdCBjb250YWluZXJzID0gZ2V0RW5jbG9zaW5nQ29udGFpbmVyVHlwZXMoaW1wbC5lbGVtZW50KTtcbiAgICByZXN1bHQucHVzaChjb250YWluZXJzLmpvaW4oKSk7XG4gICAgaGFzQW1wQ29udGFpbmVyID0gaGFzQW1wQ29udGFpbmVyIHx8ICEhY29udGFpbmVycy5sZW5ndGg7XG4gIH0pO1xuICByZXR1cm4gaGFzQW1wQ29udGFpbmVyID8geydhY3RzJzogcmVzdWx0LmpvaW4oJ3wnKX0gOiBudWxsO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7P09iamVjdDxzdHJpbmcsICghQXJyYXk8c3RyaW5nPnxzdHJpbmcpPn0gdGFyZ2V0aW5nXG4gKiBAcGFyYW0gez8oIUFycmF5PHN0cmluZz58c3RyaW5nKX0gY2F0ZWdvcnlFeGNsdXNpb25zXG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplVGFyZ2V0aW5nKHRhcmdldGluZywgY2F0ZWdvcnlFeGNsdXNpb25zKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZWQgPSB0YXJnZXRpbmcgP1xuICAgIE9iamVjdC5rZXlzKHRhcmdldGluZykubWFwKGtleSA9PiBzZXJpYWxpemVJdGVtXyhrZXksIHRhcmdldGluZ1trZXldKSkgOlxuICAgIFtdO1xuICBpZiAoY2F0ZWdvcnlFeGNsdXNpb25zKSB7XG4gICAgc2VyaWFsaXplZC5wdXNoKHNlcmlhbGl6ZUl0ZW1fKCdleGNsX2NhdCcsIGNhdGVnb3J5RXhjbHVzaW9ucykpO1xuICB9XG4gIHJldHVybiBzZXJpYWxpemVkLmxlbmd0aCA/IHNlcmlhbGl6ZWQuam9pbignJicpIDogbnVsbDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0geyghQXJyYXk8c3RyaW5nPnxzdHJpbmcpfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplSXRlbV8oa2V5LCB2YWx1ZSkge1xuICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPVxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXSkubWFwKGVuY29kZVVSSUNvbXBvbmVudCkuam9pbigpO1xuICByZXR1cm4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7c2VyaWFsaXplZFZhbHVlfWA7XG59XG5cbi8qKlxuICogQ2FsbGJhY2sgZm9yIHN0cmVhbWluZyBTUkEgcmVzcG9uc2UgZ2l2ZW4gY3JlYXRpdmUgYW5kIEpTT04gcGFyc2VkIE9iamVjdFxuICogY29udGFpbmluZyBoZWFkZXJzIChhcyBpZiByZXF1ZXN0IGhhZCBiZWVuIHNlbnQgdmlhIG5vbi1TUkEgZmxvdykuICBDcmVhdGl2ZVxuICogYW5kIGhlYWRlcnMgb2JqZWN0IGlzIGNvbnZlcnRlZCB0byBYSFIgRmV0Y2hSZXNwb25zZSBvYmplY3QgYW5kIHBhc3NlZCB0b1xuICogcmVzb2x2ZXIgcG9wcGVkIG9mZiBzdGFjayBvZiByZXNvbHZlcnMgKGluIG9yZGVyIG9mIGV4cGVjdGVkIGJsb2NrIHJlc3BvbnNlcylcbiAqIHN1Y2ggdGhhdCBzZW5kWGhyUmVxdWVzdCBpcyByZXNvbHZlZCBmcm9tIHN0YW5kYXJkIEE0QSBmbG93LiAgRG9uZSBib29sZWFuXG4gKiB1c2VkIHRvIHZlcmlmeSBhcnJheSBvZiByZXNvbHZlcnMgaXMgZW1wdHkgb25jZSBhbGwgcmVzdWx0cyBhcmUgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY3JlYXRpdmVcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsc3RyaW5nPn0gaGVhZGVyc09ialxuICogQHBhcmFtIHtib29sZWFufSBkb25lXG4gKiBAcGFyYW0geyFBcnJheTxmdW5jdGlvbig/Li4vLi4vLi4vc3JjL3V0aWxzL3hoci11dGlscy5GZXRjaFJlc3BvbnNlKT59IHNyYVJlcXVlc3RBZFVybFJlc29sdmVyc1xuICogQHBhcmFtIHtzdHJpbmd9IHNyYVVybCB1cmwgb2YgU1JBIHJlcXVlc3QgZm9yIGVycm9yIHJlcG9ydGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gc3JhQmxvY2tDYWxsYmFja0hhbmRsZXIoXG4gIGNyZWF0aXZlLCBoZWFkZXJzT2JqLCBkb25lLCBzcmFSZXF1ZXN0QWRVcmxSZXNvbHZlcnMsIHNyYVVybCkge1xuICBjb25zdCBoZWFkZXJOYW1lcyA9IE9iamVjdC5rZXlzKGhlYWRlcnNPYmopO1xuICBpZiAoaGVhZGVyTmFtZXMubGVuZ3RoID09IDEgJiZcbiAgICAgIGlzT2JqZWN0KGhlYWRlcnNPYmpbaGVhZGVyTmFtZXNbMF1dKSkge1xuICAgIC8vIFRPRE8oa2VpdGh3cmlnaHRib3MpIC0gZml4IHVwc3RyZWFtIHNvIHJlc3BvbnNlIGRvZXNcbiAgICAvLyBub3QgaW1wcm9wZXJseSBwbGFjZSBoZWFkZXJzIHVuZGVyIGtleS5cbiAgICBoZWFkZXJzT2JqID1cbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8oaGVhZGVyc09iailbaGVhZGVyTmFtZXNbMF1dO1xuICAgIGhlYWRlcnNPYmogPSBPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5yZWR1Y2UoXG4gICAgICAgIChuZXdPYmosIGtleSkgPT4ge1xuICAgICAgICAgIG5ld09ialtrZXkudG9Mb3dlckNhc2UoKV0gPSBoZWFkZXJzT2JqW2tleV07XG4gICAgICAgICAgcmV0dXJuIG5ld09iajtcbiAgICAgICAgfSwge30pO1xuICB9XG4gIC8vIEZvcmNlIHNhZmVmcmFtZSByZW5kZXJpbmcgbWV0aG9kLlxuICBoZWFkZXJzT2JqW1JFTkRFUklOR19UWVBFX0hFQURFUi50b0xvd2VyQ2FzZSgpXSA9XG4gICAgICBYT1JJR0lOX01PREUuU0FGRUZSQU1FO1xuICAvLyBDb25zdHJ1Y3QgcHNldWRvIGZldGNoIHJlc3BvbnNlIHRvIGJlIHBhc3NlZCBkb3duIHRoZSBBNEFcbiAgLy8gcHJvbWlzZSBjaGFpbiBmb3IgdGhpcyBibG9jay5cbiAgY29uc3QgaGVhZGVycyA9XG4vKiogQHR5cGUgez8uLi8uLi8uLi9zcmMvdXRpbHMveGhyLXV0aWxzLkZldGNoUmVzcG9uc2VIZWFkZXJzfSAqL1xuKHtcbiAgZ2V0OiBuYW1lID0+IHtcbiAgICAvLyBUT0RPKGtlaXRod3JpZ2h0Ym9zKSAtIGZpeCB1cHN0cmVhbSBzbyByZXNwb25zZSB3cml0ZXNcbiAgICAvLyBhbGwgbWV0YWRhdGEgdmFsdWVzIGFzIHN0cmluZ3MuXG4gICAgbGV0IGhlYWRlciA9IGhlYWRlcnNPYmpbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICBpZiAoaGVhZGVyICYmIHR5cGVvZiBoZWFkZXIgIT0gJ3N0cmluZycpIHtcbiAgICAgIGhlYWRlciA9IEpTT04uc3RyaW5naWZ5KGhlYWRlcik7XG4gICAgfVxuICAgIHJldHVybiBoZWFkZXI7XG4gIH0sXG4gIGhhczogbmFtZSA9PiAhIWhlYWRlcnNPYmpbbmFtZS50b0xvd2VyQ2FzZSgpXSxcbn0pO1xuICBjb25zdCBmZXRjaFJlc3BvbnNlID1cbi8qKiBAdHlwZSB7Py4uLy4uLy4uL3NyYy91dGlscy94aHItdXRpbHMuRmV0Y2hSZXNwb25zZX0gKi9cbih7XG4gIGhlYWRlcnMsXG4gIGFycmF5QnVmZmVyOiAoKSA9PiB0cnlSZXNvbHZlKCgpID0+IHV0ZjhFbmNvZGUoY3JlYXRpdmUpKSxcbn0pO1xuICAvLyBQb3AgaGVhZCBvZmYgb2YgdGhlIGFycmF5IG9mIHJlc29sdmVycyBhcyB0aGUgcmVzcG9uc2VcbiAgLy8gc2hvdWxkIG1hdGNoIHRoZSBvcmRlciBvZiBibG9ja3MgZGVjbGFyZWQgaW4gdGhlIGFkIHVybC5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIGJsb2NrIHRvIHN0YXJ0IHJlbmRlcmluZyB3aGlsZSB0aGUgU1JBXG4gIC8vIHJlc3BvbnNlIGlzIHN0cmVhbWluZyBiYWNrIHRvIHRoZSBjbGllbnQuXG4gIGRldigpLmFzc2VydChzcmFSZXF1ZXN0QWRVcmxSZXNvbHZlcnMuc2hpZnQoKSkoZmV0Y2hSZXNwb25zZSk7XG4gIC8vIElmIGRvbmUsIGV4cGVjdCBhcnJheSB0byBiZSBlbXB0eSAoZW5zdXJlcyBhZCByZXNwb25zZVxuICAvLyBpbmNsdWRlZCBkYXRhIGZvciBhbGwgc2xvdHMpLlxuICBpZiAoZG9uZSAmJiBzcmFSZXF1ZXN0QWRVcmxSZXNvbHZlcnMubGVuZ3RoKSB7XG4gICAgZGV2KCkud2FybihUQUcsICdQcmVtYXR1cmUgZW5kIG9mIFNSQSByZXNwb25zZScsXG4gICAgICAgIHNyYVJlcXVlc3RBZFVybFJlc29sdmVycy5sZW5ndGgsIHNyYVVybCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTcgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge3N0YXJ0c1dpdGh9IGZyb20gJy4uLy4uLy4uL3NyYy9zdHJpbmcnO1xuXG4vKiogQGNvbnN0IEBwcml2YXRlIHtzdHJpbmd9ICovXG5jb25zdCBHTU9TU1BfU1JDX1BSRUZJWF8gPSAnaHR0cHM6Ly9zcC5nbW9zc3Atc3AuanAvJztcblxuLyoqIEBjb25zdCBAcHJpdmF0ZSB7c3RyaW5nfSAqL1xuY29uc3QgR01PU1NQX1NSQ19BNEFfUFJFRklYXyA9ICdodHRwczovL2FtcC5zcC5nbW9zc3Atc3AuanAvX2E0YS8nO1xuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZVJlbW90ZUh0bWxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnbW9zc3BJc0E0QUVuYWJsZWQod2luLCBlbGVtZW50LCB1c2VSZW1vdGVIdG1sKSB7XG4gIGxldCBzcmM7XG4gIHJldHVybiAhdXNlUmVtb3RlSHRtbCAmJiAhIShzcmMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJykpICYmXG4gICAgICAhIWVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXVzZS1hNGEnKSAmJlxuICAgICAgKHN0YXJ0c1dpdGgoc3JjLCBHTU9TU1BfU1JDX1BSRUZJWF8pIHx8XG4gICAgICAgc3RhcnRzV2l0aChzcmMsIEdNT1NTUF9TUkNfQTRBX1BSRUZJWF8pKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiogQGNvbnN0IEBwcml2YXRlIHtzdHJpbmd9ICovXG5jb25zdCBTUkNfUFJFRklYXyA9ICdodHRwczovL2liLjNsaWZ0LmNvbS8nO1xuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtib29sZWFufSB1c2VSZW1vdGVIdG1sXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpcGxlbGlmdElzQTRBRW5hYmxlZCh3aW4sIGVsZW1lbnQsIHVzZVJlbW90ZUh0bWwpIHtcbiAgbGV0IHNyYztcbiAgcmV0dXJuICF1c2VSZW1vdGVIdG1sICYmICEhZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlLWE0YScpICYmICEhKHNyYyA9XG4gICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpKSAmJiBzcmMuaW5kZXhPZihTUkNfUFJFRklYXykgPT0gMDtcbn1cbiIsIi8qIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtEZWZlcnJlZH0gZnJvbSAnLi4vLi4vLi4vc3JjL3V0aWxzL3Byb21pc2UnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzJztcbmltcG9ydCB7dXNlcn0gZnJvbSAnLi4vLi4vLi4vc3JjL2xvZyc7XG5cbi8qKlxuICogU3RvcmUgbG9hZGluZyBhZHMgaW5mbyB3aXRoaW4gd2luZG93IHRvIGVuc3VyZSBpdCBjYW4gYmUgcHJvcGVybHkgc3RvcmVkXG4gKiBhY3Jvc3Mgc2VwYXJhdGVseSBjb21waWxlZCBiaW5hcmllcyB0aGF0IHNoYXJlIGxvYWQgdGhyb3R0bGluZy5cbiAqIEBjb25zdCBJRCBvZiB3aW5kb3cgdmFyaWFibGUgdXNlZCB0byB0cmFjayAzcCBhZHMgd2FpdGluZyB0byBsb2FkLlxuICovXG5jb25zdCBMT0FESU5HX0FEU19XSU5fSURfID0gJzNwbGEnO1xuXG4vKiogQHByaXZhdGUgez9Qcm9taXNlfSByZXNvbHZlcyB3aGVuIG5vIDNwIHRocm90dGxlICovXG5sZXQgdGhyb3R0bGVQcm9taXNlXyA9IG51bGw7XG4vKiogQHByaXZhdGUgez9GdW5jdGlvbn0gcmVzb2x2ZXIgZm9yIHRocm90dGxlIHByb21pc2UgKi9cbmxldCB0aHJvdHRsZVByb21pc2VSZXNvbHZlcl8gPSBudWxsO1xuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIDNwIGlzIGN1cnJlbnRseSB0aHJvdHRsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpczNwVGhyb3R0bGVkKHdpbikge1xuICByZXR1cm4gISF3aW5bTE9BRElOR19BRFNfV0lOX0lEX107XG59XG5cbi8qKiBAcmV0dXJuIHshUHJvbWlzZX0gcmVzb2x2ZXMgd2hlbiBubyAzcCB0aHJvdHRsZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3IzcFRocm90dGxlKCkge1xuICByZXR1cm4gdGhyb3R0bGVQcm9taXNlXyB8fCBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHs/bnVtYmVyfSBudW1iZXIgaWYgZXhwbGljaXQgdmFsdWUgc2hvdWxkIGJlIHVzZWQgb3RoZXJ3aXNlIHN1cGVyXG4gKiAgICBkZWZhdWx0IHNob3VsZCBiZSB1c2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW1wQWRSZW5kZXJPdXRzaWRlVmlld3BvcnQoZWxlbWVudCkge1xuICBjb25zdCByYXdWYWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWxvYWRpbmctc3RyYXRlZ3knKTtcbiAgaWYgKHJhd1ZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBBZCBvcHRzIGludG8gbGF6aWVyIGxvYWRpbmcgc3RyYXRlZ3kgd2hlcmUgd2Ugb25seSBsb2FkIGFkcyB0aGF0IGFyZVxuICAvLyBhdCBjbG9zZXIgZ2l2ZW4gbnVtYmVyIG9mIHZpZXdwb3J0cyBhd2F5LlxuICBpZiAocmF3VmFsdWUgPT0gJ3ByZWZlci12aWV3YWJpbGl0eS1vdmVyLXZpZXdzJyB8fCByYXdWYWx1ZSA9PSAnJykge1xuICAgIHJldHVybiAxLjI1O1xuICB9XG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAnVmFsdWUgb2YgZGF0YS1sb2FkaW5nLXN0cmF0ZWd5IHNob3VsZCBiZSBhIGZsb2F0IG51bWJlciBpbiByYW5nZSAnICtcbiAgICAgICdvZiBbMCwgM10sIGJ1dCBnb3QgJyArIHJhd1ZhbHVlO1xuICBjb25zdCB2aWV3cG9ydE51bWJlciA9XG4gICAgICB1c2VyKCkuYXNzZXJ0TnVtYmVyKHBhcnNlRmxvYXQocmF3VmFsdWUpLCBlcnJvck1lc3NhZ2UpO1xuICB1c2VyKCkuYXNzZXJ0KHZpZXdwb3J0TnVtYmVyID49IDAgJiYgdmlld3BvcnROdW1iZXIgPD0gMywgZXJyb3JNZXNzYWdlKTtcbiAgcmV0dXJuIHZpZXdwb3J0TnVtYmVyO1xufVxuXG4vKipcbiAqIEluY3JlbWVudHMgbG9hZGluZyBhZHMgY291bnQgZm9yIHRocm90dGxpbmcuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshUHJvbWlzZT19IG9wdF9sb2FkaW5nUHJvbWlzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50TG9hZGluZ0Fkcyh3aW4sIG9wdF9sb2FkaW5nUHJvbWlzZSkge1xuICBpZiAod2luW0xPQURJTkdfQURTX1dJTl9JRF9dID09PSB1bmRlZmluZWQpIHtcbiAgICB3aW5bTE9BRElOR19BRFNfV0lOX0lEX10gPSAwO1xuICB9XG4gIHdpbltMT0FESU5HX0FEU19XSU5fSURfXSsrO1xuXG4gIGlmICghdGhyb3R0bGVQcm9taXNlXykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgdGhyb3R0bGVQcm9taXNlXyA9IGRlZmVycmVkLnByb21pc2U7XG4gICAgdGhyb3R0bGVQcm9taXNlUmVzb2x2ZXJfID0gZGVmZXJyZWQucmVzb2x2ZTtcbiAgfVxuXG4gIFNlcnZpY2VzLnRpbWVyRm9yKHdpbilcbiAgICAgIC50aW1lb3V0UHJvbWlzZSgxMDAwLCBvcHRfbG9hZGluZ1Byb21pc2UpXG4gICAgICAuY2F0Y2goKCkgPT4ge30pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmICghLS13aW5bTE9BRElOR19BRFNfV0lOX0lEX10pIHtcbiAgICAgICAgICB0aHJvdHRsZVByb21pc2VSZXNvbHZlcl8oKTtcbiAgICAgICAgICB0aHJvdHRsZVByb21pc2VfID0gbnVsbDtcbiAgICAgICAgICB0aHJvdHRsZVByb21pc2VSZXNvbHZlcl8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbn1cbiIsIi8qIVxuXG5Db3B5cmlnaHQgKEMpIDIwMTQtMjAxNiBieSBBbmRyZWEgR2lhbW1hcmNoaSAtIEBXZWJSZWZsZWN0aW9uXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuKi9cbi8vIGdsb2JhbCB3aW5kb3cgT2JqZWN0XG4vLyBvcHRpb25hbCBwb2x5ZmlsbCBpbmZvXG4vLyAgICAnYXV0bycgdXNlZCBieSBkZWZhdWx0LCBldmVyeXRoaW5nIGlzIGZlYXR1cmUgZGV0ZWN0ZWRcbi8vICAgICdmb3JjZScgdXNlIHRoZSBwb2x5ZmlsbCBldmVuIGlmIG5vdCBmdWxseSBuZWVkZWRcbmZ1bmN0aW9uIGluc3RhbGxDdXN0b21FbGVtZW50cyh3aW5kb3csIHBvbHlmaWxsKSB7J3VzZSBzdHJpY3QnO1xuXG4gIC8vIERPIE5PVCBVU0UgVEhJUyBGSUxFIERJUkVDVExZLCBJVCBXT04nVCBXT1JLXG4gIC8vIFRISVMgSVMgQSBQUk9KRUNUIEJBU0VEIE9OIEEgQlVJTEQgU1lTVEVNXG4gIC8vIFRISVMgRklMRSBJUyBKVVNUIFdSQVBQRUQgVVAgUkVTVUxUSU5HIElOXG4gIC8vIGJ1aWxkL2RvY3VtZW50LXJlZ2lzdGVyLWVsZW1lbnQubm9kZS5qc1xuXG4gIHZhclxuICAgIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuICAgIE9iamVjdCA9IHdpbmRvdy5PYmplY3RcbiAgO1xuXG4gIHZhciBodG1sQ2xhc3MgPSAoZnVuY3Rpb24gKGluZm8pIHtcbiAgICAvLyAoQykgQW5kcmVhIEdpYW1tYXJjaGkgLSBAV2ViUmVmbGVjdGlvbiAtIE1JVCBTdHlsZVxuICAgIHZhclxuICAgICAgY2F0Y2hDbGFzcyA9IC9eW0EtWl0rW2Etel0vLFxuICAgICAgZmlsdGVyQnkgPSBmdW5jdGlvbiAocmUpIHtcbiAgICAgICAgdmFyIGFyciA9IFtdLCB0YWc7XG4gICAgICAgIGZvciAodGFnIGluIHJlZ2lzdGVyKSB7XG4gICAgICAgICAgaWYgKHJlLnRlc3QodGFnKSkgYXJyLnB1c2godGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIGFkZCA9IGZ1bmN0aW9uIChDbGFzcywgdGFnKSB7XG4gICAgICAgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoISh0YWcgaW4gcmVnaXN0ZXIpKSB7XG4gICAgICAgICAgcmVnaXN0ZXJbQ2xhc3NdID0gKHJlZ2lzdGVyW0NsYXNzXSB8fCBbXSkuY29uY2F0KHRhZyk7XG4gICAgICAgICAgcmVnaXN0ZXJbdGFnXSA9IChyZWdpc3Rlclt0YWcudG9VcHBlckNhc2UoKV0gPSBDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWdpc3RlciA9IChPYmplY3QuY3JlYXRlIHx8IE9iamVjdCkobnVsbCksXG4gICAgICBodG1sQ2xhc3MgPSB7fSxcbiAgICAgIGksIHNlY3Rpb24sIHRhZ3MsIENsYXNzXG4gICAgO1xuICAgIGZvciAoc2VjdGlvbiBpbiBpbmZvKSB7XG4gICAgICBmb3IgKENsYXNzIGluIGluZm9bc2VjdGlvbl0pIHtcbiAgICAgICAgdGFncyA9IGluZm9bc2VjdGlvbl1bQ2xhc3NdO1xuICAgICAgICByZWdpc3RlcltDbGFzc10gPSB0YWdzO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlZ2lzdGVyW3RhZ3NbaV0udG9Mb3dlckNhc2UoKV0gPVxuICAgICAgICAgIHJlZ2lzdGVyW3RhZ3NbaV0udG9VcHBlckNhc2UoKV0gPSBDbGFzcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBodG1sQ2xhc3MuZ2V0ID0gZnVuY3Rpb24gZ2V0KHRhZ09yQ2xhc3MpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGFnT3JDbGFzcyA9PT0gJ3N0cmluZycgP1xuICAgICAgICAocmVnaXN0ZXJbdGFnT3JDbGFzc10gfHwgKGNhdGNoQ2xhc3MudGVzdCh0YWdPckNsYXNzKSA/IFtdIDogJycpKSA6XG4gICAgICAgIGZpbHRlckJ5KHRhZ09yQ2xhc3MpO1xuICAgIH07XG4gICAgaHRtbENsYXNzLnNldCA9IGZ1bmN0aW9uIHNldCh0YWcsIENsYXNzKSB7XG4gICAgICByZXR1cm4gKGNhdGNoQ2xhc3MudGVzdCh0YWcpID9cbiAgICAgICAgYWRkKHRhZywgQ2xhc3MpIDpcbiAgICAgICAgYWRkKENsYXNzLCB0YWcpXG4gICAgICApLCBodG1sQ2xhc3M7XG4gICAgfTtcbiAgICByZXR1cm4gaHRtbENsYXNzO1xuICB9KHtcbiAgICBcImNvbGxlY3Rpb25zXCI6IHtcbiAgICAgIFwiSFRNTEFsbENvbGxlY3Rpb25cIjogW1xuICAgICAgICBcImFsbFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MQ29sbGVjdGlvblwiOiBbXG4gICAgICAgIFwiZm9ybXNcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEZvcm1Db250cm9sc0NvbGxlY3Rpb25cIjogW1xuICAgICAgICBcImVsZW1lbnRzXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxPcHRpb25zQ29sbGVjdGlvblwiOiBbXG4gICAgICAgIFwib3B0aW9uc1wiXG4gICAgICBdXG4gICAgfSxcbiAgICBcImVsZW1lbnRzXCI6IHtcbiAgICAgIFwiRWxlbWVudFwiOiBbXG4gICAgICAgIFwiZWxlbWVudFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MQW5jaG9yRWxlbWVudFwiOiBbXG4gICAgICAgIFwiYVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MQXBwbGV0RWxlbWVudFwiOiBbXG4gICAgICAgIFwiYXBwbGV0XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxBcmVhRWxlbWVudFwiOiBbXG4gICAgICAgIFwiYXJlYVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MQXR0YWNobWVudEVsZW1lbnRcIjogW1xuICAgICAgICBcImF0dGFjaG1lbnRcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEF1ZGlvRWxlbWVudFwiOiBbXG4gICAgICAgIFwiYXVkaW9cIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEJSRWxlbWVudFwiOiBbXG4gICAgICAgIFwiYnJcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEJhc2VFbGVtZW50XCI6IFtcbiAgICAgICAgXCJiYXNlXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxCb2R5RWxlbWVudFwiOiBbXG4gICAgICAgIFwiYm9keVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MQnV0dG9uRWxlbWVudFwiOiBbXG4gICAgICAgIFwiYnV0dG9uXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxDYW52YXNFbGVtZW50XCI6IFtcbiAgICAgICAgXCJjYW52YXNcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTENvbnRlbnRFbGVtZW50XCI6IFtcbiAgICAgICAgXCJjb250ZW50XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxETGlzdEVsZW1lbnRcIjogW1xuICAgICAgICBcImRsXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxEYXRhRWxlbWVudFwiOiBbXG4gICAgICAgIFwiZGF0YVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRGF0YUxpc3RFbGVtZW50XCI6IFtcbiAgICAgICAgXCJkYXRhbGlzdFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRGV0YWlsc0VsZW1lbnRcIjogW1xuICAgICAgICBcImRldGFpbHNcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTERpYWxvZ0VsZW1lbnRcIjogW1xuICAgICAgICBcImRpYWxvZ1wiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRGlyZWN0b3J5RWxlbWVudFwiOiBbXG4gICAgICAgIFwiZGlyXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxEaXZFbGVtZW50XCI6IFtcbiAgICAgICAgXCJkaXZcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTERvY3VtZW50XCI6IFtcbiAgICAgICAgXCJkb2N1bWVudFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRWxlbWVudFwiOiBbXG4gICAgICAgIFwiZWxlbWVudFwiLFxuICAgICAgICBcImFiYnJcIixcbiAgICAgICAgXCJhZGRyZXNzXCIsXG4gICAgICAgIFwiYXJ0aWNsZVwiLFxuICAgICAgICBcImFzaWRlXCIsXG4gICAgICAgIFwiYlwiLFxuICAgICAgICBcImJkaVwiLFxuICAgICAgICBcImJkb1wiLFxuICAgICAgICBcImNpdGVcIixcbiAgICAgICAgXCJjb2RlXCIsXG4gICAgICAgIFwiY29tbWFuZFwiLFxuICAgICAgICBcImRkXCIsXG4gICAgICAgIFwiZGZuXCIsXG4gICAgICAgIFwiZHRcIixcbiAgICAgICAgXCJlbVwiLFxuICAgICAgICBcImZpZ2NhcHRpb25cIixcbiAgICAgICAgXCJmaWd1cmVcIixcbiAgICAgICAgXCJmb290ZXJcIixcbiAgICAgICAgXCJoZWFkZXJcIixcbiAgICAgICAgXCJpXCIsXG4gICAgICAgIFwia2JkXCIsXG4gICAgICAgIFwibWFya1wiLFxuICAgICAgICBcIm5hdlwiLFxuICAgICAgICBcIm5vc2NyaXB0XCIsXG4gICAgICAgIFwicnBcIixcbiAgICAgICAgXCJydFwiLFxuICAgICAgICBcInJ1YnlcIixcbiAgICAgICAgXCJzXCIsXG4gICAgICAgIFwic2FtcFwiLFxuICAgICAgICBcInNlY3Rpb25cIixcbiAgICAgICAgXCJzbWFsbFwiLFxuICAgICAgICBcInN0cm9uZ1wiLFxuICAgICAgICBcInN1YlwiLFxuICAgICAgICBcInN1bW1hcnlcIixcbiAgICAgICAgXCJzdXBcIixcbiAgICAgICAgXCJ1XCIsXG4gICAgICAgIFwidmFyXCIsXG4gICAgICAgIFwid2JyXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxFbWJlZEVsZW1lbnRcIjogW1xuICAgICAgICBcImVtYmVkXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxGaWVsZFNldEVsZW1lbnRcIjogW1xuICAgICAgICBcImZpZWxkc2V0XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxGb250RWxlbWVudFwiOiBbXG4gICAgICAgIFwiZm9udFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRm9ybUVsZW1lbnRcIjogW1xuICAgICAgICBcImZvcm1cIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEZyYW1lRWxlbWVudFwiOiBbXG4gICAgICAgIFwiZnJhbWVcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEZyYW1lU2V0RWxlbWVudFwiOiBbXG4gICAgICAgIFwiZnJhbWVzZXRcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEhSRWxlbWVudFwiOiBbXG4gICAgICAgIFwiaHJcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTEhlYWRFbGVtZW50XCI6IFtcbiAgICAgICAgXCJoZWFkXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxIZWFkaW5nRWxlbWVudFwiOiBbXG4gICAgICAgIFwiaDFcIixcbiAgICAgICAgXCJoMlwiLFxuICAgICAgICBcImgzXCIsXG4gICAgICAgIFwiaDRcIixcbiAgICAgICAgXCJoNVwiLFxuICAgICAgICBcImg2XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxIdG1sRWxlbWVudFwiOiBbXG4gICAgICAgIFwiaHRtbFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MSUZyYW1lRWxlbWVudFwiOiBbXG4gICAgICAgIFwiaWZyYW1lXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxJbWFnZUVsZW1lbnRcIjogW1xuICAgICAgICBcImltZ1wiXG4gICAgICBdLFxuICAgICAgXCJIVE1MSW5wdXRFbGVtZW50XCI6IFtcbiAgICAgICAgXCJpbnB1dFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MS2V5Z2VuRWxlbWVudFwiOiBbXG4gICAgICAgIFwia2V5Z2VuXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxMSUVsZW1lbnRcIjogW1xuICAgICAgICBcImxpXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxMYWJlbEVsZW1lbnRcIjogW1xuICAgICAgICBcImxhYmVsXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxMZWdlbmRFbGVtZW50XCI6IFtcbiAgICAgICAgXCJsZWdlbmRcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTExpbmtFbGVtZW50XCI6IFtcbiAgICAgICAgXCJsaW5rXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxNYXBFbGVtZW50XCI6IFtcbiAgICAgICAgXCJtYXBcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTE1hcnF1ZWVFbGVtZW50XCI6IFtcbiAgICAgICAgXCJtYXJxdWVlXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxNZWRpYUVsZW1lbnRcIjogW1xuICAgICAgICBcIm1lZGlhXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxNZW51RWxlbWVudFwiOiBbXG4gICAgICAgIFwibWVudVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MTWVudUl0ZW1FbGVtZW50XCI6IFtcbiAgICAgICAgXCJtZW51aXRlbVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MTWV0YUVsZW1lbnRcIjogW1xuICAgICAgICBcIm1ldGFcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTE1ldGVyRWxlbWVudFwiOiBbXG4gICAgICAgIFwibWV0ZXJcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTE1vZEVsZW1lbnRcIjogW1xuICAgICAgICBcImRlbFwiLFxuICAgICAgICBcImluc1wiXG4gICAgICBdLFxuICAgICAgXCJIVE1MT0xpc3RFbGVtZW50XCI6IFtcbiAgICAgICAgXCJvbFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MT2JqZWN0RWxlbWVudFwiOiBbXG4gICAgICAgIFwib2JqZWN0XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxPcHRHcm91cEVsZW1lbnRcIjogW1xuICAgICAgICBcIm9wdGdyb3VwXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxPcHRpb25FbGVtZW50XCI6IFtcbiAgICAgICAgXCJvcHRpb25cIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTE91dHB1dEVsZW1lbnRcIjogW1xuICAgICAgICBcIm91dHB1dFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MUGFyYWdyYXBoRWxlbWVudFwiOiBbXG4gICAgICAgIFwicFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MUGFyYW1FbGVtZW50XCI6IFtcbiAgICAgICAgXCJwYXJhbVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MUGljdHVyZUVsZW1lbnRcIjogW1xuICAgICAgICBcInBpY3R1cmVcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTFByZUVsZW1lbnRcIjogW1xuICAgICAgICBcInByZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MUHJvZ3Jlc3NFbGVtZW50XCI6IFtcbiAgICAgICAgXCJwcm9ncmVzc1wiXG4gICAgICBdLFxuICAgICAgXCJIVE1MUXVvdGVFbGVtZW50XCI6IFtcbiAgICAgICAgXCJibG9ja3F1b3RlXCIsXG4gICAgICAgIFwicVwiLFxuICAgICAgICBcInF1b3RlXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxTY3JpcHRFbGVtZW50XCI6IFtcbiAgICAgICAgXCJzY3JpcHRcIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTFNlbGVjdEVsZW1lbnRcIjogW1xuICAgICAgICBcInNlbGVjdFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MU2hhZG93RWxlbWVudFwiOiBbXG4gICAgICAgIFwic2hhZG93XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxTbG90RWxlbWVudFwiOiBbXG4gICAgICAgIFwic2xvdFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MU291cmNlRWxlbWVudFwiOiBbXG4gICAgICAgIFwic291cmNlXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxTcGFuRWxlbWVudFwiOiBbXG4gICAgICAgIFwic3BhblwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MU3R5bGVFbGVtZW50XCI6IFtcbiAgICAgICAgXCJzdHlsZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVDYXB0aW9uRWxlbWVudFwiOiBbXG4gICAgICAgIFwiY2FwdGlvblwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVDZWxsRWxlbWVudFwiOiBbXG4gICAgICAgIFwidGRcIixcbiAgICAgICAgXCJ0aFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVDb2xFbGVtZW50XCI6IFtcbiAgICAgICAgXCJjb2xcIixcbiAgICAgICAgXCJjb2xncm91cFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVFbGVtZW50XCI6IFtcbiAgICAgICAgXCJ0YWJsZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVSb3dFbGVtZW50XCI6IFtcbiAgICAgICAgXCJ0clwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGFibGVTZWN0aW9uRWxlbWVudFwiOiBbXG4gICAgICAgIFwidGhlYWRcIixcbiAgICAgICAgXCJ0Ym9keVwiLFxuICAgICAgICBcInRmb290XCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxUZW1wbGF0ZUVsZW1lbnRcIjogW1xuICAgICAgICBcInRlbXBsYXRlXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxUZXh0QXJlYUVsZW1lbnRcIjogW1xuICAgICAgICBcInRleHRhcmVhXCJcbiAgICAgIF0sXG4gICAgICBcIkhUTUxUaW1lRWxlbWVudFwiOiBbXG4gICAgICAgIFwidGltZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVGl0bGVFbGVtZW50XCI6IFtcbiAgICAgICAgXCJ0aXRsZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVHJhY2tFbGVtZW50XCI6IFtcbiAgICAgICAgXCJ0cmFja1wiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVUxpc3RFbGVtZW50XCI6IFtcbiAgICAgICAgXCJ1bFwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MVW5rbm93bkVsZW1lbnRcIjogW1xuICAgICAgICBcInVua25vd25cIixcbiAgICAgICAgXCJ2aGdyb3VwdlwiLFxuICAgICAgICBcInZrZXlnZW5cIlxuICAgICAgXSxcbiAgICAgIFwiSFRNTFZpZGVvRWxlbWVudFwiOiBbXG4gICAgICAgIFwidmlkZW9cIlxuICAgICAgXVxuICAgIH0sXG4gICAgXCJub2Rlc1wiOiB7XG4gICAgICBcIkF0dHJcIjogW1xuICAgICAgICBcIm5vZGVcIlxuICAgICAgXSxcbiAgICAgIFwiQXVkaW9cIjogW1xuICAgICAgICBcImF1ZGlvXCJcbiAgICAgIF0sXG4gICAgICBcIkNEQVRBU2VjdGlvblwiOiBbXG4gICAgICAgIFwibm9kZVwiXG4gICAgICBdLFxuICAgICAgXCJDaGFyYWN0ZXJEYXRhXCI6IFtcbiAgICAgICAgXCJub2RlXCJcbiAgICAgIF0sXG4gICAgICBcIkNvbW1lbnRcIjogW1xuICAgICAgICBcIiNjb21tZW50XCJcbiAgICAgIF0sXG4gICAgICBcIkRvY3VtZW50XCI6IFtcbiAgICAgICAgXCIjZG9jdW1lbnRcIlxuICAgICAgXSxcbiAgICAgIFwiRG9jdW1lbnRGcmFnbWVudFwiOiBbXG4gICAgICAgIFwiI2RvY3VtZW50LWZyYWdtZW50XCJcbiAgICAgIF0sXG4gICAgICBcIkRvY3VtZW50VHlwZVwiOiBbXG4gICAgICAgIFwibm9kZVwiXG4gICAgICBdLFxuICAgICAgXCJIVE1MRG9jdW1lbnRcIjogW1xuICAgICAgICBcIiNkb2N1bWVudFwiXG4gICAgICBdLFxuICAgICAgXCJJbWFnZVwiOiBbXG4gICAgICAgIFwiaW1nXCJcbiAgICAgIF0sXG4gICAgICBcIk9wdGlvblwiOiBbXG4gICAgICAgIFwib3B0aW9uXCJcbiAgICAgIF0sXG4gICAgICBcIlByb2Nlc3NpbmdJbnN0cnVjdGlvblwiOiBbXG4gICAgICAgIFwibm9kZVwiXG4gICAgICBdLFxuICAgICAgXCJTaGFkb3dSb290XCI6IFtcbiAgICAgICAgXCIjc2hhZG93LXJvb3RcIlxuICAgICAgXSxcbiAgICAgIFwiVGV4dFwiOiBbXG4gICAgICAgIFwiI3RleHRcIlxuICAgICAgXSxcbiAgICAgIFwiWE1MRG9jdW1lbnRcIjogW1xuICAgICAgICBcInhtbFwiXG4gICAgICBdXG4gICAgfVxuICB9KSk7XG4gIFxuICBcbiAgICBcbiAgLy8gcGFzc2VkIGF0IHJ1bnRpbWUsIGNvbmZpZ3VyYWJsZVxuICAvLyB2aWEgbm9kZWpzIG1vZHVsZVxuICBpZiAoIXBvbHlmaWxsKSBwb2x5ZmlsbCA9ICdhdXRvJztcbiAgXG4gIHZhclxuICAgIC8vIFYwIHBvbHlmaWxsIGVudHJ5XG4gICAgUkVHSVNURVJfRUxFTUVOVCA9ICdyZWdpc3RlckVsZW1lbnQnLFxuICBcbiAgICAvLyBJRSA8IDExIG9ubHkgKyBvbGQgV2ViS2l0IGZvciBhdHRyaWJ1dGVzICsgZmVhdHVyZSBkZXRlY3Rpb25cbiAgICBFWFBBTkRPX1VJRCA9ICdfXycgKyBSRUdJU1RFUl9FTEVNRU5UICsgKHdpbmRvdy5NYXRoLnJhbmRvbSgpICogMTBlNCA+PiAwKSxcbiAgXG4gICAgLy8gc2hvcnRjdXRzIGFuZCBjb3N0YW50c1xuICAgIEFERF9FVkVOVF9MSVNURU5FUiA9ICdhZGRFdmVudExpc3RlbmVyJyxcbiAgICBBVFRBQ0hFRCA9ICdhdHRhY2hlZCcsXG4gICAgQ0FMTEJBQ0sgPSAnQ2FsbGJhY2snLFxuICAgIERFVEFDSEVEID0gJ2RldGFjaGVkJyxcbiAgICBFWFRFTkRTID0gJ2V4dGVuZHMnLFxuICBcbiAgICBBVFRSSUJVVEVfQ0hBTkdFRF9DQUxMQkFDSyA9ICdhdHRyaWJ1dGVDaGFuZ2VkJyArIENBTExCQUNLLFxuICAgIEFUVEFDSEVEX0NBTExCQUNLID0gQVRUQUNIRUQgKyBDQUxMQkFDSyxcbiAgICBDT05ORUNURURfQ0FMTEJBQ0sgPSAnY29ubmVjdGVkJyArIENBTExCQUNLLFxuICAgIERJU0NPTk5FQ1RFRF9DQUxMQkFDSyA9ICdkaXNjb25uZWN0ZWQnICsgQ0FMTEJBQ0ssXG4gICAgQ1JFQVRFRF9DQUxMQkFDSyA9ICdjcmVhdGVkJyArIENBTExCQUNLLFxuICAgIERFVEFDSEVEX0NBTExCQUNLID0gREVUQUNIRUQgKyBDQUxMQkFDSyxcbiAgXG4gICAgQURESVRJT04gPSAnQURESVRJT04nLFxuICAgIE1PRElGSUNBVElPTiA9ICdNT0RJRklDQVRJT04nLFxuICAgIFJFTU9WQUwgPSAnUkVNT1ZBTCcsXG4gIFxuICAgIERPTV9BVFRSX01PRElGSUVEID0gJ0RPTUF0dHJNb2RpZmllZCcsXG4gICAgRE9NX0NPTlRFTlRfTE9BREVEID0gJ0RPTUNvbnRlbnRMb2FkZWQnLFxuICAgIERPTV9TVUJUUkVFX01PRElGSUVEID0gJ0RPTVN1YnRyZWVNb2RpZmllZCcsXG4gIFxuICAgIFBSRUZJWF9UQUcgPSAnPCcsXG4gICAgUFJFRklYX0lTID0gJz0nLFxuICBcbiAgICAvLyB2YWxpZCBhbmQgaW52YWxpZCBub2RlIG5hbWVzXG4gICAgdmFsaWROYW1lID0gL15bQS1aXVtBLVowLTldKig/Oi1bQS1aMC05XSspKyQvLFxuICAgIGludmFsaWROYW1lcyA9IFtcbiAgICAgICdBTk5PVEFUSU9OLVhNTCcsXG4gICAgICAnQ09MT1ItUFJPRklMRScsXG4gICAgICAnRk9OVC1GQUNFJyxcbiAgICAgICdGT05ULUZBQ0UtU1JDJyxcbiAgICAgICdGT05ULUZBQ0UtVVJJJyxcbiAgICAgICdGT05ULUZBQ0UtRk9STUFUJyxcbiAgICAgICdGT05ULUZBQ0UtTkFNRScsXG4gICAgICAnTUlTU0lORy1HTFlQSCdcbiAgICBdLFxuICBcbiAgICAvLyByZWdpc3RlcmVkIHR5cGVzIGFuZCB0aGVpciBwcm90b3R5cGVzXG4gICAgdHlwZXMgPSBbXSxcbiAgICBwcm90b3MgPSBbXSxcbiAgXG4gICAgLy8gdG8gcXVlcnkgc3Vibm9kZXNcbiAgICBxdWVyeSA9ICcnLFxuICBcbiAgICAvLyBodG1sIHNob3J0Y3V0IHVzZWQgdG8gZmVhdHVyZSBkZXRlY3RcbiAgICBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gIFxuICAgIC8vIEVTNSBpbmxpbmUgaGVscGVycyB8fCBiYXNpYyBwYXRjaGVzXG4gICAgaW5kZXhPZiA9IHR5cGVzLmluZGV4T2YgfHwgZnVuY3Rpb24gKHYpIHtcbiAgICAgIGZvcih2YXIgaSA9IHRoaXMubGVuZ3RoOyBpLS0gJiYgdGhpc1tpXSAhPT0gdjspe31cbiAgICAgIHJldHVybiBpO1xuICAgIH0sXG4gIFxuICAgIC8vIG90aGVyIGhlbHBlcnMgLyBzaG9ydGN1dHNcbiAgICBPUCA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgaE9QID0gT1AuaGFzT3duUHJvcGVydHksXG4gICAgaVBPID0gT1AuaXNQcm90b3R5cGVPZixcbiAgXG4gICAgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgZW1wdHkgPSBbXSxcbiAgICBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBnT1BOID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgZ1BPID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIHNQTyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZixcbiAgXG4gICAgLy8ganNoaW50IHByb3RvOiB0cnVlXG4gICAgaGFzUHJvdG8gPSAhIU9iamVjdC5fX3Byb3RvX18sXG4gIFxuICAgIC8vIFYxIGhlbHBlcnNcbiAgICBmaXhHZXRDbGFzcyA9IGZhbHNlLFxuICAgIERSRUNFVjEgPSAnX19kcmVDRXYxJyxcbiAgICBjdXN0b21FbGVtZW50cyA9IHdpbmRvdy5jdXN0b21FbGVtZW50cyxcbiAgICB1c2FibGVDdXN0b21FbGVtZW50cyA9IHBvbHlmaWxsICE9PSAnZm9yY2UnICYmICEhKFxuICAgICAgY3VzdG9tRWxlbWVudHMgJiZcbiAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSAmJlxuICAgICAgY3VzdG9tRWxlbWVudHMuZ2V0ICYmXG4gICAgICBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZFxuICAgICksXG4gICAgRGljdCA9IE9iamVjdC5jcmVhdGUgfHwgT2JqZWN0LFxuICAgIE1hcCA9IHdpbmRvdy5NYXAgfHwgZnVuY3Rpb24gTWFwKCkge1xuICAgICAgdmFyIEsgPSBbXSwgViA9IFtdLCBpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHJldHVybiBWW2luZGV4T2YuY2FsbChLLCBrKV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICBpID0gaW5kZXhPZi5jYWxsKEssIGspO1xuICAgICAgICAgIGlmIChpIDwgMCkgVltLLnB1c2goaykgLSAxXSA9IHY7XG4gICAgICAgICAgZWxzZSBWW2ldID0gdjtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIFByb21pc2UgPSB3aW5kb3cuUHJvbWlzZSB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHZhclxuICAgICAgICBub3RpZnkgPSBbXSxcbiAgICAgICAgZG9uZSA9IGZhbHNlLFxuICAgICAgICBwID0ge1xuICAgICAgICAgICdjYXRjaCc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJ3RoZW4nOiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIG5vdGlmeS5wdXNoKGNiKTtcbiAgICAgICAgICAgIGlmIChkb25lKSBzZXRUaW1lb3V0KHJlc29sdmUsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICA7XG4gICAgICBmdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICB3aGlsZSAobm90aWZ5Lmxlbmd0aCkgbm90aWZ5LnNoaWZ0KCkodmFsdWUpO1xuICAgICAgfVxuICAgICAgZm4ocmVzb2x2ZSk7XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIGp1c3RDcmVhdGVkID0gZmFsc2UsXG4gICAgY29uc3RydWN0b3JzID0gRGljdChudWxsKSxcbiAgICB3YWl0aW5nTGlzdCA9IERpY3QobnVsbCksXG4gICAgbm9kZU5hbWVzID0gbmV3IE1hcCgpLFxuICAgIHNlY29uZEFyZ3VtZW50ID0gZnVuY3Rpb24gKGlzKSB7XG4gICAgICByZXR1cm4gaXMudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICBcbiAgICAvLyB1c2VkIHRvIGNyZWF0ZSB1bmlxdWUgaW5zdGFuY2VzXG4gICAgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBCcmlkZ2UocHJvdG8pIHtcbiAgICAgIC8vIHNpbGx5IGJyb2tlbiBwb2x5ZmlsbCBwcm9iYWJseSBldmVyIHVzZWQgYnV0IHNob3J0IGVub3VnaCB0byB3b3JrXG4gICAgICByZXR1cm4gcHJvdG8gPyAoKEJyaWRnZS5wcm90b3R5cGUgPSBwcm90byksIG5ldyBCcmlkZ2UoKSkgOiB0aGlzO1xuICAgIH0sXG4gIFxuICAgIC8vIHdpbGwgc2V0IHRoZSBwcm90b3R5cGUgaWYgcG9zc2libGVcbiAgICAvLyBvciBjb3B5IG92ZXIgYWxsIHByb3BlcnRpZXNcbiAgICBzZXRQcm90b3R5cGUgPSBzUE8gfHwgKFxuICAgICAgaGFzUHJvdG8gP1xuICAgICAgICBmdW5jdGlvbiAobywgcCkge1xuICAgICAgICAgIG8uX19wcm90b19fID0gcDtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfSA6IChcbiAgICAgIChnT1BOICYmIGdPUEQpID9cbiAgICAgICAgKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZnVuY3Rpb24gc2V0UHJvcGVydGllcyhvLCBwKSB7XG4gICAgICAgICAgICBmb3IgKHZhclxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIG5hbWVzID0gZ09QTihwKSxcbiAgICAgICAgICAgICAgaSA9IDAsIGxlbmd0aCA9IG5hbWVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgaSA8IGxlbmd0aDsgaSsrXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAga2V5ID0gbmFtZXNbaV07XG4gICAgICAgICAgICAgIGlmICghaE9QLmNhbGwobywga2V5KSkge1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG8sIGtleSwgZ09QRChwLCBrZXkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgc2V0UHJvcGVydGllcyhvLCBwKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKChwID0gZ1BPKHApKSAmJiAhaVBPLmNhbGwocCwgbykpO1xuICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgfTtcbiAgICAgICAgfSgpKSA6XG4gICAgICAgIGZ1bmN0aW9uIChvLCBwKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHApIHtcbiAgICAgICAgICAgIG9ba2V5XSA9IHBba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgIH1cbiAgICApKSxcbiAgXG4gICAgLy8gRE9NIHNob3J0Y3V0cyBhbmQgaGVscGVycywgaWYgYW55XG4gIFxuICAgIE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fFxuICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcixcbiAgXG4gICAgSFRNTEVsZW1lbnRQcm90b3R5cGUgPSAoXG4gICAgICB3aW5kb3cuSFRNTEVsZW1lbnQgfHxcbiAgICAgIHdpbmRvdy5FbGVtZW50IHx8XG4gICAgICB3aW5kb3cuTm9kZVxuICAgICkucHJvdG90eXBlLFxuICBcbiAgICBJRTggPSAhaVBPLmNhbGwoSFRNTEVsZW1lbnRQcm90b3R5cGUsIGRvY3VtZW50RWxlbWVudCksXG4gIFxuICAgIHNhZmVQcm9wZXJ0eSA9IElFOCA/IGZ1bmN0aW9uIChvLCBrLCBkKSB7XG4gICAgICBvW2tdID0gZC52YWx1ZTtcbiAgICAgIHJldHVybiBvO1xuICAgIH0gOiBkZWZpbmVQcm9wZXJ0eSxcbiAgXG4gICAgaXNWYWxpZE5vZGUgPSBJRTggP1xuICAgICAgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDE7XG4gICAgICB9IDpcbiAgICAgIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBpUE8uY2FsbChIVE1MRWxlbWVudFByb3RvdHlwZSwgbm9kZSk7XG4gICAgICB9LFxuICBcbiAgICB0YXJnZXRzID0gSUU4ICYmIFtdLFxuICBcbiAgICBhdHRhY2hTaGFkb3cgPSBIVE1MRWxlbWVudFByb3RvdHlwZS5hdHRhY2hTaGFkb3csXG4gICAgY2xvbmVOb2RlID0gSFRNTEVsZW1lbnRQcm90b3R5cGUuY2xvbmVOb2RlLFxuICAgIGRpc3BhdGNoRXZlbnQgPSBIVE1MRWxlbWVudFByb3RvdHlwZS5kaXNwYXRjaEV2ZW50LFxuICAgIGdldEF0dHJpYnV0ZSA9IEhUTUxFbGVtZW50UHJvdG90eXBlLmdldEF0dHJpYnV0ZSxcbiAgICBoYXNBdHRyaWJ1dGUgPSBIVE1MRWxlbWVudFByb3RvdHlwZS5oYXNBdHRyaWJ1dGUsXG4gICAgcmVtb3ZlQXR0cmlidXRlID0gSFRNTEVsZW1lbnRQcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlLFxuICAgIHNldEF0dHJpYnV0ZSA9IEhUTUxFbGVtZW50UHJvdG90eXBlLnNldEF0dHJpYnV0ZSxcbiAgXG4gICAgLy8gcmVwbGFjZWQgbGF0ZXIgb25cbiAgICBjcmVhdGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCxcbiAgICBwYXRjaGVkQ3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQsXG4gIFxuICAgIC8vIHNoYXJlZCBvYnNlcnZlciBmb3IgYWxsIGF0dHJpYnV0ZXNcbiAgICBhdHRyaWJ1dGVzT2JzZXJ2ZXIgPSBNdXRhdGlvbk9ic2VydmVyICYmIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWVcbiAgICB9LFxuICBcbiAgICAvLyB1c2VmdWwgdG8gZGV0ZWN0IG9ubHkgaWYgdGhlcmUncyBubyBNdXRhdGlvbk9ic2VydmVyXG4gICAgRE9NQXR0ck1vZGlmaWVkID0gTXV0YXRpb25PYnNlcnZlciB8fCBmdW5jdGlvbihlKSB7XG4gICAgICBkb2VzTm90U3VwcG9ydERPTUF0dHJNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIERPTV9BVFRSX01PRElGSUVELFxuICAgICAgICBET01BdHRyTW9kaWZpZWRcbiAgICAgICk7XG4gICAgfSxcbiAgXG4gICAgLy8gd2lsbCBib3RoIGJlIHVzZWQgdG8gbWFrZSBET01Ob2RlSW5zZXJ0ZWQgYXN5bmNocm9ub3VzXG4gICAgYXNhcFF1ZXVlLFxuICAgIGFzYXBUaW1lciA9IDAsXG4gIFxuICAgIC8vIGludGVybmFsIGZsYWdzXG4gICAgVjAgPSBSRUdJU1RFUl9FTEVNRU5UIGluIGRvY3VtZW50LFxuICAgIHNldExpc3RlbmVyID0gdHJ1ZSxcbiAgICBqdXN0U2V0dXAgPSBmYWxzZSxcbiAgICBkb2VzTm90U3VwcG9ydERPTUF0dHJNb2RpZmllZCA9IHRydWUsXG4gICAgZHJvcERvbUNvbnRlbnRMb2FkZWQgPSB0cnVlLFxuICBcbiAgICAvLyBuZWVkZWQgZm9yIHRoZSBpbm5lckhUTUwgaGVscGVyXG4gICAgbm90RnJvbUlubmVySFRNTEhlbHBlciA9IHRydWUsXG4gIFxuICAgIC8vIG9wdGlvbmFsbHkgZGVmaW5lZCBsYXRlciBvblxuICAgIG9uU3VidHJlZU1vZGlmaWVkLFxuICAgIGNhbGxET01BdHRyTW9kaWZpZWQsXG4gICAgZ2V0QXR0cmlidXRlc01pcnJvcixcbiAgICBvYnNlcnZlcixcbiAgICBvYnNlcnZlLFxuICBcbiAgICAvLyBiYXNlZCBvbiBzZXR0aW5nIHByb3RvdHlwZSBjYXBhYmlsaXR5XG4gICAgLy8gd2lsbCBjaGVjayBwcm90byBvciB0aGUgZXhwYW5kbyBhdHRyaWJ1dGVcbiAgICAvLyBpbiBvcmRlciB0byBzZXR1cCB0aGUgbm9kZSBvbmNlXG4gICAgcGF0Y2hJZk5vdEFscmVhZHksXG4gICAgcGF0Y2hcbiAgO1xuICBcbiAgLy8gb25seSBpZiBuZWVkZWRcbiAgaWYgKCFWMCkge1xuICBcbiAgICBpZiAoc1BPIHx8IGhhc1Byb3RvKSB7XG4gICAgICAgIHBhdGNoSWZOb3RBbHJlYWR5ID0gZnVuY3Rpb24gKG5vZGUsIHByb3RvKSB7XG4gICAgICAgICAgaWYgKCFpUE8uY2FsbChwcm90bywgbm9kZSkpIHtcbiAgICAgICAgICAgIHNldHVwTm9kZShub2RlLCBwcm90byk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwYXRjaCA9IHNldHVwTm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXRjaElmTm90QWxyZWFkeSA9IGZ1bmN0aW9uIChub2RlLCBwcm90bykge1xuICAgICAgICAgIGlmICghbm9kZVtFWFBBTkRPX1VJRF0pIHtcbiAgICAgICAgICAgIG5vZGVbRVhQQU5ET19VSURdID0gT2JqZWN0KHRydWUpO1xuICAgICAgICAgICAgc2V0dXBOb2RlKG5vZGUsIHByb3RvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHBhdGNoID0gcGF0Y2hJZk5vdEFscmVhZHk7XG4gICAgfVxuICBcbiAgICBpZiAoSUU4KSB7XG4gICAgICBkb2VzTm90U3VwcG9ydERPTUF0dHJNb2RpZmllZCA9IGZhbHNlO1xuICAgICAgKGZ1bmN0aW9uICgpe1xuICAgICAgICB2YXJcbiAgICAgICAgICBkZXNjcmlwdG9yID0gZ09QRChIVE1MRWxlbWVudFByb3RvdHlwZSwgQUREX0VWRU5UX0xJU1RFTkVSKSxcbiAgICAgICAgICBhZGRFdmVudExpc3RlbmVyID0gZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAgICBwYXRjaGVkUmVtb3ZlQXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBlID0gbmV3IEN1c3RvbUV2ZW50KERPTV9BVFRSX01PRElGSUVELCB7YnViYmxlczogdHJ1ZX0pO1xuICAgICAgICAgICAgZS5hdHRyTmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBlLnByZXZWYWx1ZSA9IGdldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgZS5uZXdWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBlW1JFTU9WQUxdID0gZS5hdHRyQ2hhbmdlID0gMjtcbiAgICAgICAgICAgIHJlbW92ZUF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudC5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcGF0Y2hlZFNldEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyXG4gICAgICAgICAgICAgIGhhZCA9IGhhc0F0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpLFxuICAgICAgICAgICAgICBvbGQgPSBoYWQgJiYgZ2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSksXG4gICAgICAgICAgICAgIGUgPSBuZXcgQ3VzdG9tRXZlbnQoRE9NX0FUVFJfTU9ESUZJRUQsIHtidWJibGVzOiB0cnVlfSlcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGUuYXR0ck5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgZS5wcmV2VmFsdWUgPSBoYWQgPyBvbGQgOiBudWxsO1xuICAgICAgICAgICAgZS5uZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGhhZCkge1xuICAgICAgICAgICAgICBlW01PRElGSUNBVElPTl0gPSBlLmF0dHJDaGFuZ2UgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZVtBRERJVElPTl0gPSBlLmF0dHJDaGFuZ2UgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlzcGF0Y2hFdmVudC5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25Qcm9wZXJ0eUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAvLyBqc2hpbnQgZXFudWxsOnRydWVcbiAgICAgICAgICAgIHZhclxuICAgICAgICAgICAgICBub2RlID0gZS5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgICBzdXBlclNlY3JldCA9IG5vZGVbRVhQQU5ET19VSURdLFxuICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBlLnByb3BlcnR5TmFtZSxcbiAgICAgICAgICAgICAgZXZlbnRcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGlmIChzdXBlclNlY3JldC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgIHN1cGVyU2VjcmV0ID0gc3VwZXJTZWNyZXRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoRE9NX0FUVFJfTU9ESUZJRUQsIHtidWJibGVzOiB0cnVlfSk7XG4gICAgICAgICAgICAgIGV2ZW50LmF0dHJOYW1lID0gc3VwZXJTZWNyZXQubmFtZTtcbiAgICAgICAgICAgICAgZXZlbnQucHJldlZhbHVlID0gc3VwZXJTZWNyZXQudmFsdWUgfHwgbnVsbDtcbiAgICAgICAgICAgICAgZXZlbnQubmV3VmFsdWUgPSAoc3VwZXJTZWNyZXQudmFsdWUgPSBub2RlW3Byb3BlcnR5TmFtZV0gfHwgbnVsbCk7XG4gICAgICAgICAgICAgIGlmIChldmVudC5wcmV2VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV2ZW50W0FERElUSU9OXSA9IGV2ZW50LmF0dHJDaGFuZ2UgPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50W01PRElGSUNBVElPTl0gPSBldmVudC5hdHRyQ2hhbmdlID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50LmNhbGwobm9kZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgO1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlID09PSBET01fQVRUUl9NT0RJRklFRCAmJlxuICAgICAgICAgICAgdGhpc1tBVFRSSUJVVEVfQ0hBTkdFRF9DQUxMQkFDS10gJiZcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlICE9PSBwYXRjaGVkU2V0QXR0cmlidXRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzW0VYUEFORE9fVUlEXSA9IHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2NsYXNzJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5jbGFzc05hbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlID0gcGF0Y2hlZFNldEF0dHJpYnV0ZTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlID0gcGF0Y2hlZFJlbW92ZUF0dHJpYnV0ZTtcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCAncHJvcGVydHljaGFuZ2UnLCBvblByb3BlcnR5Q2hhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIHR5cGUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgICAgICB9O1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudFByb3RvdHlwZSwgQUREX0VWRU5UX0xJU1RFTkVSLCBkZXNjcmlwdG9yKTtcbiAgICAgIH0oKSk7XG4gICAgfSBlbHNlIGlmICghTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgZG9jdW1lbnRFbGVtZW50W0FERF9FVkVOVF9MSVNURU5FUl0oRE9NX0FUVFJfTU9ESUZJRUQsIERPTUF0dHJNb2RpZmllZCk7XG4gICAgICBkb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKEVYUEFORE9fVUlELCAxKTtcbiAgICAgIGRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoRVhQQU5ET19VSUQpO1xuICAgICAgaWYgKGRvZXNOb3RTdXBwb3J0RE9NQXR0ck1vZGlmaWVkKSB7XG4gICAgICAgIG9uU3VidHJlZU1vZGlmaWVkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICB2YXJcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLFxuICAgICAgICAgICAgb2xkQXR0cmlidXRlcyxcbiAgICAgICAgICAgIG5ld0F0dHJpYnV0ZXMsXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgICA7XG4gICAgICAgICAgaWYgKG5vZGUgPT09IGUudGFyZ2V0KSB7XG4gICAgICAgICAgICBvbGRBdHRyaWJ1dGVzID0gbm9kZVtFWFBBTkRPX1VJRF07XG4gICAgICAgICAgICBub2RlW0VYUEFORE9fVUlEXSA9IChuZXdBdHRyaWJ1dGVzID0gZ2V0QXR0cmlidXRlc01pcnJvcihub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgIGlmICghKGtleSBpbiBvbGRBdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSB3YXMgYWRkZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbERPTUF0dHJNb2RpZmllZChcbiAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgb2xkQXR0cmlidXRlc1trZXldLFxuICAgICAgICAgICAgICAgICAgbmV3QXR0cmlidXRlc1trZXldLFxuICAgICAgICAgICAgICAgICAgQURESVRJT05cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5ld0F0dHJpYnV0ZXNba2V5XSAhPT0gb2xkQXR0cmlidXRlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIHdhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxET01BdHRyTW9kaWZpZWQoXG4gICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgIG9sZEF0dHJpYnV0ZXNba2V5XSxcbiAgICAgICAgICAgICAgICAgIG5ld0F0dHJpYnV0ZXNba2V5XSxcbiAgICAgICAgICAgICAgICAgIE1PRElGSUNBVElPTlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNoZWNraW5nIGlmIGl0IGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG9sZEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG5ld0F0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIHJlbW92ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbERPTUF0dHJNb2RpZmllZChcbiAgICAgICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgICAgb2xkQXR0cmlidXRlc1trZXldLFxuICAgICAgICAgICAgICAgICAgbmV3QXR0cmlidXRlc1trZXldLFxuICAgICAgICAgICAgICAgICAgUkVNT1ZBTFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNhbGxET01BdHRyTW9kaWZpZWQgPSBmdW5jdGlvbiAoXG4gICAgICAgICAgYXR0ckNoYW5nZSxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0LFxuICAgICAgICAgIGF0dHJOYW1lLFxuICAgICAgICAgIHByZXZWYWx1ZSxcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBhY3Rpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGUgPSB7XG4gICAgICAgICAgICBhdHRyQ2hhbmdlOiBhdHRyQ2hhbmdlLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldDogY3VycmVudFRhcmdldCxcbiAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyTmFtZSxcbiAgICAgICAgICAgIHByZXZWYWx1ZTogcHJldlZhbHVlLFxuICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBlW2FjdGlvbl0gPSBhdHRyQ2hhbmdlO1xuICAgICAgICAgIG9uRE9NQXR0ck1vZGlmaWVkKGUpO1xuICAgICAgICB9O1xuICAgICAgICBnZXRBdHRyaWJ1dGVzTWlycm9yID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICBmb3IgKHZhclxuICAgICAgICAgICAgYXR0ciwgbmFtZSxcbiAgICAgICAgICAgIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcyxcbiAgICAgICAgICAgIGkgPSAwLCBsZW5ndGggPSBhdHRyaWJ1dGVzLmxlbmd0aDtcbiAgICAgICAgICAgIGkgPCBsZW5ndGg7IGkrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgYXR0ciA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgICBuYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09ICdzZXRBdHRyaWJ1dGUnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAvLyBzZXQgYXMgZW51bWVyYWJsZSwgd3JpdGFibGUgYW5kIGNvbmZpZ3VyYWJsZVxuICAgIGRvY3VtZW50W1JFR0lTVEVSX0VMRU1FTlRdID0gZnVuY3Rpb24gcmVnaXN0ZXJFbGVtZW50KHR5cGUsIG9wdGlvbnMpIHtcbiAgICAgIHVwcGVyVHlwZSA9IHR5cGUudG9VcHBlckNhc2UoKTtcbiAgICAgIGlmIChzZXRMaXN0ZW5lcikge1xuICAgICAgICAvLyBvbmx5IGZpcnN0IHRpbWUgZG9jdW1lbnQucmVnaXN0ZXJFbGVtZW50IGlzIHVzZWRcbiAgICAgICAgLy8gd2UgbmVlZCB0byBzZXQgdGhpcyBsaXN0ZW5lclxuICAgICAgICAvLyBzZXR0aW5nIGl0IGJ5IGRlZmF1bHQgbWlnaHQgc2xvdyBkb3duIGZvciBubyByZWFzb25cbiAgICAgICAgc2V0TGlzdGVuZXIgPSBmYWxzZTtcbiAgICAgICAgaWYgKE11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICBvYnNlcnZlciA9IChmdW5jdGlvbihhdHRhY2hlZCwgZGV0YWNoZWQpe1xuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tFbUFsbChsaXN0LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGNhbGxiYWNrKGxpc3RbaSsrXSkpe31cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAocmVjb3Jkcykge1xuICAgICAgICAgICAgICBmb3IgKHZhclxuICAgICAgICAgICAgICAgIGN1cnJlbnQsIG5vZGUsIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIGkgPSAwLCBsZW5ndGggPSByZWNvcmRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSByZWNvcmRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0VtQWxsKGN1cnJlbnQuYWRkZWROb2RlcywgYXR0YWNoZWQpO1xuICAgICAgICAgICAgICAgICAgY2hlY2tFbUFsbChjdXJyZW50LnJlbW92ZWROb2RlcywgZGV0YWNoZWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBub2RlID0gY3VycmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICBpZiAobm90RnJvbUlubmVySFRNTEhlbHBlciAmJlxuICAgICAgICAgICAgICAgICAgICAgIG5vZGVbQVRUUklCVVRFX0NIQU5HRURfQ0FMTEJBQ0tdICYmXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5hdHRyaWJ1dGVOYW1lICE9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gZ2V0QXR0cmlidXRlLmNhbGwobm9kZSwgY3VycmVudC5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50Lm9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbm9kZVtBVFRSSUJVVEVfQ0hBTkdFRF9DQUxMQkFDS10oXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lm9sZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KGV4ZWN1dGVBY3Rpb24oQVRUQUNIRUQpLCBleGVjdXRlQWN0aW9uKERFVEFDSEVEKSkpO1xuICAgICAgICAgIG9ic2VydmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShcbiAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIG9ic2VydmUoZG9jdW1lbnQpO1xuICAgICAgICAgIGlmIChhdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgICAgIEhUTUxFbGVtZW50UHJvdG90eXBlLmF0dGFjaFNoYWRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmUoYXR0YWNoU2hhZG93LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNhcFF1ZXVlID0gW107XG4gICAgICAgICAgZG9jdW1lbnRbQUREX0VWRU5UX0xJU1RFTkVSXSgnRE9NTm9kZUluc2VydGVkJywgb25ET01Ob2RlKEFUVEFDSEVEKSk7XG4gICAgICAgICAgZG9jdW1lbnRbQUREX0VWRU5UX0xJU1RFTkVSXSgnRE9NTm9kZVJlbW92ZWQnLCBvbkRPTU5vZGUoREVUQUNIRUQpKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgZG9jdW1lbnRbQUREX0VWRU5UX0xJU1RFTkVSXShET01fQ09OVEVOVF9MT0FERUQsIG9uUmVhZHlTdGF0ZUNoYW5nZSk7XG4gICAgICAgIGRvY3VtZW50W0FERF9FVkVOVF9MSVNURU5FUl0oJ3JlYWR5c3RhdGVjaGFuZ2UnLCBvblJlYWR5U3RhdGVDaGFuZ2UpO1xuICBcbiAgICAgICAgSFRNTEVsZW1lbnRQcm90b3R5cGUuY2xvbmVOb2RlID0gZnVuY3Rpb24gKGRlZXApIHtcbiAgICAgICAgICB2YXJcbiAgICAgICAgICAgIG5vZGUgPSBjbG9uZU5vZGUuY2FsbCh0aGlzLCAhIWRlZXApLFxuICAgICAgICAgICAgaSA9IGdldFR5cGVJbmRleChub2RlKVxuICAgICAgICAgIDtcbiAgICAgICAgICBpZiAoLTEgPCBpKSBwYXRjaChub2RlLCBwcm90b3NbaV0pO1xuICAgICAgICAgIGlmIChkZWVwICYmIHF1ZXJ5Lmxlbmd0aCkgbG9vcEFuZFNldHVwKG5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSkpO1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9O1xuICAgICAgfVxuICBcbiAgICAgIGlmIChqdXN0U2V0dXApIHJldHVybiAoanVzdFNldHVwID0gZmFsc2UpO1xuICBcbiAgICAgIGlmICgtMiA8IChcbiAgICAgICAgaW5kZXhPZi5jYWxsKHR5cGVzLCBQUkVGSVhfSVMgKyB1cHBlclR5cGUpICtcbiAgICAgICAgaW5kZXhPZi5jYWxsKHR5cGVzLCBQUkVGSVhfVEFHICsgdXBwZXJUeXBlKVxuICAgICAgKSkge1xuICAgICAgICB0aHJvd1R5cGVFcnJvcih0eXBlKTtcbiAgICAgIH1cbiAgXG4gICAgICBpZiAoIXZhbGlkTmFtZS50ZXN0KHVwcGVyVHlwZSkgfHwgLTEgPCBpbmRleE9mLmNhbGwoaW52YWxpZE5hbWVzLCB1cHBlclR5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHR5cGUgJyArIHR5cGUgKyAnIGlzIGludmFsaWQnKTtcbiAgICAgIH1cbiAgXG4gICAgICB2YXJcbiAgICAgICAgY29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGV4dGVuZGluZyA/XG4gICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lLCB1cHBlclR5cGUpIDpcbiAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBvcHQgPSBvcHRpb25zIHx8IE9QLFxuICAgICAgICBleHRlbmRpbmcgPSBoT1AuY2FsbChvcHQsIEVYVEVORFMpLFxuICAgICAgICBub2RlTmFtZSA9IGV4dGVuZGluZyA/IG9wdGlvbnNbRVhURU5EU10udG9VcHBlckNhc2UoKSA6IHVwcGVyVHlwZSxcbiAgICAgICAgdXBwZXJUeXBlLFxuICAgICAgICBpXG4gICAgICA7XG4gIFxuICAgICAgaWYgKGV4dGVuZGluZyAmJiAtMSA8IChcbiAgICAgICAgaW5kZXhPZi5jYWxsKHR5cGVzLCBQUkVGSVhfVEFHICsgbm9kZU5hbWUpXG4gICAgICApKSB7XG4gICAgICAgIHRocm93VHlwZUVycm9yKG5vZGVOYW1lKTtcbiAgICAgIH1cbiAgXG4gICAgICBpID0gdHlwZXMucHVzaCgoZXh0ZW5kaW5nID8gUFJFRklYX0lTIDogUFJFRklYX1RBRykgKyB1cHBlclR5cGUpIC0gMTtcbiAgXG4gICAgICBxdWVyeSA9IHF1ZXJ5LmNvbmNhdChcbiAgICAgICAgcXVlcnkubGVuZ3RoID8gJywnIDogJycsXG4gICAgICAgIGV4dGVuZGluZyA/IG5vZGVOYW1lICsgJ1tpcz1cIicgKyB0eXBlLnRvTG93ZXJDYXNlKCkgKyAnXCJdJyA6IG5vZGVOYW1lXG4gICAgICApO1xuICBcbiAgICAgIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IChcbiAgICAgICAgcHJvdG9zW2ldID0gaE9QLmNhbGwob3B0LCAncHJvdG90eXBlJykgP1xuICAgICAgICAgIG9wdC5wcm90b3R5cGUgOlxuICAgICAgICAgIGNyZWF0ZShIVE1MRWxlbWVudFByb3RvdHlwZSlcbiAgICAgICk7XG4gIFxuICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCkgbG9vcEFuZFZlcmlmeShcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSksXG4gICAgICAgIEFUVEFDSEVEXG4gICAgICApO1xuICBcbiAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICB9O1xuICBcbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50ID0gKHBhdGNoZWRDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGxvY2FsTmFtZSwgdHlwZUV4dGVuc2lvbikge1xuICAgICAgdmFyXG4gICAgICAgIGlzID0gZ2V0SXModHlwZUV4dGVuc2lvbiksXG4gICAgICAgIG5vZGUgPSBpcyA/XG4gICAgICAgICAgY3JlYXRlRWxlbWVudC5jYWxsKGRvY3VtZW50LCBsb2NhbE5hbWUsIHNlY29uZEFyZ3VtZW50KGlzKSkgOlxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQuY2FsbChkb2N1bWVudCwgbG9jYWxOYW1lKSxcbiAgICAgICAgbmFtZSA9ICcnICsgbG9jYWxOYW1lLFxuICAgICAgICBpID0gaW5kZXhPZi5jYWxsKFxuICAgICAgICAgIHR5cGVzLFxuICAgICAgICAgIChpcyA/IFBSRUZJWF9JUyA6IFBSRUZJWF9UQUcpICtcbiAgICAgICAgICAoaXMgfHwgbmFtZSkudG9VcHBlckNhc2UoKVxuICAgICAgICApLFxuICAgICAgICBzZXR1cCA9IC0xIDwgaVxuICAgICAgO1xuICAgICAgaWYgKGlzKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdpcycsIGlzID0gaXMudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChzZXR1cCkge1xuICAgICAgICAgIHNldHVwID0gaXNJblFTQShuYW1lLnRvVXBwZXJDYXNlKCksIGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm90RnJvbUlubmVySFRNTEhlbHBlciA9ICFkb2N1bWVudC5jcmVhdGVFbGVtZW50LmlubmVySFRNTEhlbHBlcjtcbiAgICAgIGlmIChzZXR1cCkgcGF0Y2gobm9kZSwgcHJvdG9zW2ldKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH0pO1xuICBcbiAgfVxuICBcbiAgZnVuY3Rpb24gQVNBUCgpIHtcbiAgICB2YXIgcXVldWUgPSBhc2FwUXVldWUuc3BsaWNlKDAsIGFzYXBRdWV1ZS5sZW5ndGgpO1xuICAgIGFzYXBUaW1lciA9IDA7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgcXVldWUuc2hpZnQoKS5jYWxsKFxuICAgICAgICBudWxsLCBxdWV1ZS5zaGlmdCgpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBcbiAgZnVuY3Rpb24gbG9vcEFuZFZlcmlmeShsaXN0LCBhY3Rpb24pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmVyaWZ5QW5kU2V0dXBBbmRBY3Rpb24obGlzdFtpXSwgYWN0aW9uKTtcbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGxvb3BBbmRTZXR1cChsaXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoLCBub2RlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vZGUgPSBsaXN0W2ldO1xuICAgICAgcGF0Y2gobm9kZSwgcHJvdG9zW2dldFR5cGVJbmRleChub2RlKV0pO1xuICAgIH1cbiAgfVxuICBcbiAgZnVuY3Rpb24gZXhlY3V0ZUFjdGlvbihhY3Rpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChpc1ZhbGlkTm9kZShub2RlKSkge1xuICAgICAgICB2ZXJpZnlBbmRTZXR1cEFuZEFjdGlvbihub2RlLCBhY3Rpb24pO1xuICAgICAgICBpZiAocXVlcnkubGVuZ3RoKSBsb29wQW5kVmVyaWZ5KFxuICAgICAgICAgIG5vZGUucXVlcnlTZWxlY3RvckFsbChxdWVyeSksXG4gICAgICAgICAgYWN0aW9uXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZ2V0VHlwZUluZGV4KHRhcmdldCkge1xuICAgIHZhclxuICAgICAgaXMgPSBnZXRBdHRyaWJ1dGUuY2FsbCh0YXJnZXQsICdpcycpLFxuICAgICAgbm9kZU5hbWUgPSB0YXJnZXQubm9kZU5hbWUudG9VcHBlckNhc2UoKSxcbiAgICAgIGkgPSBpbmRleE9mLmNhbGwoXG4gICAgICAgIHR5cGVzLFxuICAgICAgICBpcyA/XG4gICAgICAgICAgICBQUkVGSVhfSVMgKyBpcy50b1VwcGVyQ2FzZSgpIDpcbiAgICAgICAgICAgIFBSRUZJWF9UQUcgKyBub2RlTmFtZVxuICAgICAgKVxuICAgIDtcbiAgICByZXR1cm4gaXMgJiYgLTEgPCBpICYmICFpc0luUVNBKG5vZGVOYW1lLCBpcykgPyAtMSA6IGk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGlzSW5RU0EobmFtZSwgdHlwZSkge1xuICAgIHJldHVybiAtMSA8IHF1ZXJ5LmluZGV4T2YobmFtZSArICdbaXM9XCInICsgdHlwZSArICdcIl0nKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gb25ET01BdHRyTW9kaWZpZWQoZSkge1xuICAgIHZhclxuICAgICAgbm9kZSA9IGUuY3VycmVudFRhcmdldCxcbiAgICAgIGF0dHJDaGFuZ2UgPSBlLmF0dHJDaGFuZ2UsXG4gICAgICBhdHRyTmFtZSA9IGUuYXR0ck5hbWUsXG4gICAgICB0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgIGFkZGl0aW9uID0gZVtBRERJVElPTl0gfHwgMixcbiAgICAgIHJlbW92YWwgPSBlW1JFTU9WQUxdIHx8IDNcbiAgICA7XG4gICAgaWYgKG5vdEZyb21Jbm5lckhUTUxIZWxwZXIgJiZcbiAgICAgICAgKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBub2RlKSAmJlxuICAgICAgICBub2RlW0FUVFJJQlVURV9DSEFOR0VEX0NBTExCQUNLXSAmJlxuICAgICAgICBhdHRyTmFtZSAhPT0gJ3N0eWxlJyAmJiAoXG4gICAgICAgICAgZS5wcmV2VmFsdWUgIT09IGUubmV3VmFsdWUgfHxcbiAgICAgICAgICAvLyBJRTksIElFMTAsIGFuZCBPcGVyYSAxMiBnb3RjaGFcbiAgICAgICAgICBlLm5ld1ZhbHVlID09PSAnJyAmJiAoXG4gICAgICAgICAgICBhdHRyQ2hhbmdlID09PSBhZGRpdGlvbiB8fFxuICAgICAgICAgICAgYXR0ckNoYW5nZSA9PT0gcmVtb3ZhbFxuICAgICAgICAgIClcbiAgICApKSB7XG4gICAgICBub2RlW0FUVFJJQlVURV9DSEFOR0VEX0NBTExCQUNLXShcbiAgICAgICAgYXR0ck5hbWUsXG4gICAgICAgIGF0dHJDaGFuZ2UgPT09IGFkZGl0aW9uID8gbnVsbCA6IGUucHJldlZhbHVlLFxuICAgICAgICBhdHRyQ2hhbmdlID09PSByZW1vdmFsID8gbnVsbCA6IGUubmV3VmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBvbkRPTU5vZGUoYWN0aW9uKSB7XG4gICAgdmFyIGV4ZWN1dG9yID0gZXhlY3V0ZUFjdGlvbihhY3Rpb24pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgYXNhcFF1ZXVlLnB1c2goZXhlY3V0b3IsIGUudGFyZ2V0KTtcbiAgICAgIGlmIChhc2FwVGltZXIpIGNsZWFyVGltZW91dChhc2FwVGltZXIpO1xuICAgICAgYXNhcFRpbWVyID0gc2V0VGltZW91dChBU0FQLCAxKTtcbiAgICB9O1xuICB9XG4gIFxuICBmdW5jdGlvbiBvblJlYWR5U3RhdGVDaGFuZ2UoZSkge1xuICAgIGlmIChkcm9wRG9tQ29udGVudExvYWRlZCkge1xuICAgICAgZHJvcERvbUNvbnRlbnRMb2FkZWQgPSBmYWxzZTtcbiAgICAgIGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKERPTV9DT05URU5UX0xPQURFRCwgb25SZWFkeVN0YXRlQ2hhbmdlKTtcbiAgICB9XG4gICAgaWYgKHF1ZXJ5Lmxlbmd0aCkgbG9vcEFuZFZlcmlmeShcbiAgICAgIChlLnRhcmdldCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChxdWVyeSksXG4gICAgICBlLmRldGFpbCA9PT0gREVUQUNIRUQgPyBERVRBQ0hFRCA6IEFUVEFDSEVEXG4gICAgKTtcbiAgICBpZiAoSUU4KSBwdXJnZSgpO1xuICB9XG4gIFxuICBmdW5jdGlvbiBwYXRjaGVkU2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgLy8ganNoaW50IHZhbGlkdGhpczp0cnVlXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNldEF0dHJpYnV0ZS5jYWxsKHNlbGYsIG5hbWUsIHZhbHVlKTtcbiAgICBvblN1YnRyZWVNb2RpZmllZC5jYWxsKHNlbGYsIHt0YXJnZXQ6IHNlbGZ9KTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gc2V0dXBOb2RlKG5vZGUsIHByb3RvKSB7XG4gICAgc2V0UHJvdG90eXBlKG5vZGUsIHByb3RvKTtcbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwgYXR0cmlidXRlc09ic2VydmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRvZXNOb3RTdXBwb3J0RE9NQXR0ck1vZGlmaWVkKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlID0gcGF0Y2hlZFNldEF0dHJpYnV0ZTtcbiAgICAgICAgbm9kZVtFWFBBTkRPX1VJRF0gPSBnZXRBdHRyaWJ1dGVzTWlycm9yKG5vZGUpO1xuICAgICAgICBub2RlW0FERF9FVkVOVF9MSVNURU5FUl0oRE9NX1NVQlRSRUVfTU9ESUZJRUQsIG9uU3VidHJlZU1vZGlmaWVkKTtcbiAgICAgIH1cbiAgICAgIG5vZGVbQUREX0VWRU5UX0xJU1RFTkVSXShET01fQVRUUl9NT0RJRklFRCwgb25ET01BdHRyTW9kaWZpZWQpO1xuICAgIH1cbiAgICBpZiAobm9kZVtDUkVBVEVEX0NBTExCQUNLXSAmJiBub3RGcm9tSW5uZXJIVE1MSGVscGVyKSB7XG4gICAgICBub2RlLmNyZWF0ZWQgPSB0cnVlO1xuICAgICAgbm9kZVtDUkVBVEVEX0NBTExCQUNLXSgpO1xuICAgICAgbm9kZS5jcmVhdGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiBwdXJnZSgpIHtcbiAgICBmb3IgKHZhclxuICAgICAgbm9kZSxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuZ3RoID0gdGFyZ2V0cy5sZW5ndGg7XG4gICAgICBpIDwgbGVuZ3RoOyBpKytcbiAgICApIHtcbiAgICAgIG5vZGUgPSB0YXJnZXRzW2ldO1xuICAgICAgaWYgKCFkb2N1bWVudEVsZW1lbnQuY29udGFpbnMobm9kZSkpIHtcbiAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIHRhcmdldHMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgIHZlcmlmeUFuZFNldHVwQW5kQWN0aW9uKG5vZGUsIERFVEFDSEVEKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHRocm93VHlwZUVycm9yKHR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgJyArIHR5cGUgKyAnIHR5cGUgaXMgYWxyZWFkeSByZWdpc3RlcmVkJyk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIHZlcmlmeUFuZFNldHVwQW5kQWN0aW9uKG5vZGUsIGFjdGlvbikge1xuICAgIHZhclxuICAgICAgZm4sXG4gICAgICBpID0gZ2V0VHlwZUluZGV4KG5vZGUpXG4gICAgO1xuICAgIGlmICgtMSA8IGkpIHtcbiAgICAgIHBhdGNoSWZOb3RBbHJlYWR5KG5vZGUsIHByb3Rvc1tpXSk7XG4gICAgICBpID0gMDtcbiAgICAgIGlmIChhY3Rpb24gPT09IEFUVEFDSEVEICYmICFub2RlW0FUVEFDSEVEXSkge1xuICAgICAgICBub2RlW0RFVEFDSEVEXSA9IGZhbHNlO1xuICAgICAgICBub2RlW0FUVEFDSEVEXSA9IHRydWU7XG4gICAgICAgIGkgPSAxO1xuICAgICAgICBpZiAoSUU4ICYmIGluZGV4T2YuY2FsbCh0YXJnZXRzLCBub2RlKSA8IDApIHtcbiAgICAgICAgICB0YXJnZXRzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBERVRBQ0hFRCAmJiAhbm9kZVtERVRBQ0hFRF0pIHtcbiAgICAgICAgbm9kZVtBVFRBQ0hFRF0gPSBmYWxzZTtcbiAgICAgICAgbm9kZVtERVRBQ0hFRF0gPSB0cnVlO1xuICAgICAgICBpID0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChpICYmIChmbiA9IG5vZGVbYWN0aW9uICsgQ0FMTEJBQ0tdKSkgZm4uY2FsbChub2RlKTtcbiAgICB9XG4gIH1cbiAgXG4gIFxuICBcbiAgLy8gVjEgaW4gZGEgSG91c2UhXG4gIGZ1bmN0aW9uIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSgpIHt9XG4gIFxuICBDdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDdXN0b21FbGVtZW50UmVnaXN0cnksXG4gICAgLy8gYSB3b3JrYXJvdW5kIGZvciB0aGUgc3R1YmJvcm4gV2ViS2l0XG4gICAgZGVmaW5lOiB1c2FibGVDdXN0b21FbGVtZW50cyA/XG4gICAgICBmdW5jdGlvbiAobmFtZSwgQ2xhc3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBDRVJEZWZpbmUobmFtZSwgQ2xhc3MsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBOQU1FID0gbmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIGNvbnN0cnVjdG9yc1tOQU1FXSA9IHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBDbGFzcyxcbiAgICAgICAgICAgIGNyZWF0ZTogW05BTUVdXG4gICAgICAgICAgfTtcbiAgICAgICAgICBub2RlTmFtZXMuc2V0KENsYXNzLCBOQU1FKTtcbiAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9IDpcbiAgICAgIENFUkRlZmluZSxcbiAgICBnZXQ6IHVzYWJsZUN1c3RvbUVsZW1lbnRzID9cbiAgICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21FbGVtZW50cy5nZXQobmFtZSkgfHwgZ2V0KG5hbWUpO1xuICAgICAgfSA6XG4gICAgICBnZXQsXG4gICAgd2hlbkRlZmluZWQ6IHVzYWJsZUN1c3RvbUVsZW1lbnRzID9cbiAgICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJhY2UoW1xuICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLndoZW5EZWZpbmVkKG5hbWUpLFxuICAgICAgICAgIHdoZW5EZWZpbmVkKG5hbWUpXG4gICAgICAgIF0pO1xuICAgICAgfSA6XG4gICAgICB3aGVuRGVmaW5lZFxuICB9O1xuICBcbiAgZnVuY3Rpb24gQ0VSRGVmaW5lKG5hbWUsIENsYXNzLCBvcHRpb25zKSB7XG4gICAgdmFyXG4gICAgICBpcyA9IG9wdGlvbnMgJiYgb3B0aW9uc1tFWFRFTkRTXSB8fCAnJyxcbiAgICAgIENQcm90byA9IENsYXNzLnByb3RvdHlwZSxcbiAgICAgIHByb3RvID0gY3JlYXRlKENQcm90byksXG4gICAgICBhdHRyaWJ1dGVzID0gQ2xhc3Mub2JzZXJ2ZWRBdHRyaWJ1dGVzIHx8IGVtcHR5LFxuICAgICAgZGVmaW5pdGlvbiA9IHtwcm90b3R5cGU6IHByb3RvfVxuICAgIDtcbiAgICAvLyBUT0RPOiBpcyB0aGlzIG5lZWRlZCBhdCBhbGwgc2luY2UgaXQncyBpbmhlcml0ZWQ/XG4gICAgLy8gZGVmaW5lUHJvcGVydHkocHJvdG8sICdjb25zdHJ1Y3RvcicsIHt2YWx1ZTogQ2xhc3N9KTtcbiAgICBzYWZlUHJvcGVydHkocHJvdG8sIENSRUFURURfQ0FMTEJBQ0ssIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoanVzdENyZWF0ZWQpIGp1c3RDcmVhdGVkID0gZmFsc2U7XG4gICAgICAgICAgZWxzZSBpZiAoIXRoaXNbRFJFQ0VWMV0pIHtcbiAgICAgICAgICAgIHRoaXNbRFJFQ0VWMV0gPSB0cnVlO1xuICAgICAgICAgICAgbmV3IENsYXNzKHRoaXMpO1xuICAgICAgICAgICAgaWYgKENQcm90b1tDUkVBVEVEX0NBTExCQUNLXSlcbiAgICAgICAgICAgICAgQ1Byb3RvW0NSRUFURURfQ0FMTEJBQ0tdLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB2YXIgaW5mbyA9IGNvbnN0cnVjdG9yc1tub2RlTmFtZXMuZ2V0KENsYXNzKV07XG4gICAgICAgICAgICBpZiAoIXVzYWJsZUN1c3RvbUVsZW1lbnRzIHx8IGluZm8uY3JlYXRlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgbm90aWZ5QXR0cmlidXRlcyh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2FmZVByb3BlcnR5KHByb3RvLCBBVFRSSUJVVEVfQ0hBTkdFRF9DQUxMQkFDSywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICgtMSA8IGluZGV4T2YuY2FsbChhdHRyaWJ1dGVzLCBuYW1lKSlcbiAgICAgICAgICBDUHJvdG9bQVRUUklCVVRFX0NIQU5HRURfQ0FMTEJBQ0tdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKENQcm90b1tDT05ORUNURURfQ0FMTEJBQ0tdKSB7XG4gICAgICBzYWZlUHJvcGVydHkocHJvdG8sIEFUVEFDSEVEX0NBTExCQUNLLCB7XG4gICAgICAgIHZhbHVlOiBDUHJvdG9bQ09OTkVDVEVEX0NBTExCQUNLXVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChDUHJvdG9bRElTQ09OTkVDVEVEX0NBTExCQUNLXSkge1xuICAgICAgc2FmZVByb3BlcnR5KHByb3RvLCBERVRBQ0hFRF9DQUxMQkFDSywge1xuICAgICAgICB2YWx1ZTogQ1Byb3RvW0RJU0NPTk5FQ1RFRF9DQUxMQkFDS11cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXMpIGRlZmluaXRpb25bRVhURU5EU10gPSBpcztcbiAgICBuYW1lID0gbmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0cnVjdG9yc1tuYW1lXSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBDbGFzcyxcbiAgICAgIGNyZWF0ZTogaXMgPyBbaXMsIHNlY29uZEFyZ3VtZW50KG5hbWUpXSA6IFtuYW1lXVxuICAgIH07XG4gICAgbm9kZU5hbWVzLnNldChDbGFzcywgbmFtZSk7XG4gICAgZG9jdW1lbnRbUkVHSVNURVJfRUxFTUVOVF0obmFtZS50b0xvd2VyQ2FzZSgpLCBkZWZpbml0aW9uKTtcbiAgICB3aGVuRGVmaW5lZChuYW1lKTtcbiAgICB3YWl0aW5nTGlzdFtuYW1lXS5yKCk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFyIGluZm8gPSBjb25zdHJ1Y3RvcnNbbmFtZS50b1VwcGVyQ2FzZSgpXTtcbiAgICByZXR1cm4gaW5mbyAmJiBpbmZvLmNvbnN0cnVjdG9yO1xuICB9XG4gIFxuICBmdW5jdGlvbiBnZXRJcyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/XG4gICAgICAgIG9wdGlvbnMgOiAob3B0aW9ucyAmJiBvcHRpb25zLmlzIHx8ICcnKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gbm90aWZ5QXR0cmlidXRlcyhzZWxmKSB7XG4gICAgdmFyXG4gICAgICBjYWxsYmFjayA9IHNlbGZbQVRUUklCVVRFX0NIQU5HRURfQ0FMTEJBQ0tdLFxuICAgICAgYXR0cmlidXRlcyA9IGNhbGxiYWNrID8gc2VsZi5hdHRyaWJ1dGVzIDogZW1wdHksXG4gICAgICBpID0gYXR0cmlidXRlcy5sZW5ndGgsXG4gICAgICBhdHRyaWJ1dGVcbiAgICA7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgYXR0cmlidXRlID0gIGF0dHJpYnV0ZXNbaV07IC8vIHx8IGF0dHJpYnV0ZXMuaXRlbShpKTtcbiAgICAgIGNhbGxiYWNrLmNhbGwoXG4gICAgICAgIHNlbGYsXG4gICAgICAgIGF0dHJpYnV0ZS5uYW1lIHx8IGF0dHJpYnV0ZS5ub2RlTmFtZSxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgYXR0cmlidXRlLnZhbHVlIHx8IGF0dHJpYnV0ZS5ub2RlVmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiB3aGVuRGVmaW5lZChuYW1lKSB7XG4gICAgbmFtZSA9IG5hbWUudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoIShuYW1lIGluIHdhaXRpbmdMaXN0KSkge1xuICAgICAgd2FpdGluZ0xpc3RbbmFtZV0gPSB7fTtcbiAgICAgIHdhaXRpbmdMaXN0W25hbWVdLnAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB3YWl0aW5nTGlzdFtuYW1lXS5yID0gcmVzb2x2ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gd2FpdGluZ0xpc3RbbmFtZV0ucDtcbiAgfVxuICBcbiAgZnVuY3Rpb24gcG9seWZpbGxWMSgpIHtcbiAgICBpZiAoY3VzdG9tRWxlbWVudHMpIGRlbGV0ZSB3aW5kb3cuY3VzdG9tRWxlbWVudHM7XG4gICAgZGVmaW5lUHJvcGVydHkod2luZG93LCAnY3VzdG9tRWxlbWVudHMnLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogbmV3IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSgpXG4gICAgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkod2luZG93LCAnQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5Jywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IEN1c3RvbUVsZW1lbnRSZWdpc3RyeVxuICAgIH0pO1xuICAgIGZvciAodmFyXG4gICAgICBwYXRjaENsYXNzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIENsYXNzID0gd2luZG93W25hbWVdO1xuICAgICAgICBpZiAoQ2xhc3MpIHtcbiAgICAgICAgICB3aW5kb3dbbmFtZV0gPSBmdW5jdGlvbiBDdXN0b21FbGVtZW50c1YxKHNlbGYpIHtcbiAgICAgICAgICAgIHZhciBpbmZvLCBpc05hdGl2ZTtcbiAgICAgICAgICAgIGlmICghc2VsZikgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIXNlbGZbRFJFQ0VWMV0pIHtcbiAgICAgICAgICAgICAganVzdENyZWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBpbmZvID0gY29uc3RydWN0b3JzW25vZGVOYW1lcy5nZXQoc2VsZi5jb25zdHJ1Y3RvcildO1xuICAgICAgICAgICAgICBpc05hdGl2ZSA9IHVzYWJsZUN1c3RvbUVsZW1lbnRzICYmIGluZm8uY3JlYXRlLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgICAgICAgc2VsZiA9IGlzTmF0aXZlID9cbiAgICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChDbGFzcywgZW1wdHksIGluZm8uY29uc3RydWN0b3IpIDpcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KGRvY3VtZW50LCBpbmZvLmNyZWF0ZSk7XG4gICAgICAgICAgICAgIHNlbGZbRFJFQ0VWMV0gPSB0cnVlO1xuICAgICAgICAgICAgICBqdXN0Q3JlYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoIWlzTmF0aXZlKSBub3RpZnlBdHRyaWJ1dGVzKHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3aW5kb3dbbmFtZV0ucHJvdG90eXBlID0gQ2xhc3MucHJvdG90eXBlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB3aW5kb3dbbmFtZV07XG4gICAgICAgICAgfSBjYXRjaChXZWJLaXQpIHtcbiAgICAgICAgICAgIGZpeEdldENsYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KENsYXNzLCBEUkVDRVYxLCB7dmFsdWU6IHdpbmRvd1tuYW1lXX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIENsYXNzZXMgPSBodG1sQ2xhc3MuZ2V0KC9eSFRNTFtBLVpdKlthLXpdLyksXG4gICAgICBpID0gQ2xhc3Nlcy5sZW5ndGg7XG4gICAgICBpLS07XG4gICAgICBwYXRjaENsYXNzKENsYXNzZXNbaV0pXG4gICAgKSB7fVxuICAgIChkb2N1bWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBpcyA9IGdldElzKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGlzID9cbiAgICAgICAgcGF0Y2hlZENyZWF0ZUVsZW1lbnQuY2FsbCh0aGlzLCBuYW1lLCBzZWNvbmRBcmd1bWVudChpcykpIDpcbiAgICAgICAgcGF0Y2hlZENyZWF0ZUVsZW1lbnQuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICB9KTtcbiAgICBpZiAoIVYwKSB7XG4gICAgICBqdXN0U2V0dXAgPSB0cnVlO1xuICAgICAgZG9jdW1lbnRbUkVHSVNURVJfRUxFTUVOVF0oJycpO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gaWYgY3VzdG9tRWxlbWVudHMgaXMgbm90IHRoZXJlIGF0IGFsbFxuICBpZiAoIWN1c3RvbUVsZW1lbnRzIHx8IHBvbHlmaWxsID09PSAnZm9yY2UnKSBwb2x5ZmlsbFYxKCk7XG4gIGVsc2Uge1xuICAgIC8vIGlmIGF2YWlsYWJsZSB0ZXN0IGV4dGVuZHMgd29yayBhcyBleHBlY3RlZFxuICAgIHRyeSB7XG4gICAgICAoZnVuY3Rpb24gKERSRSwgb3B0aW9ucywgbmFtZSkge1xuICAgICAgICBvcHRpb25zW0VYVEVORFNdID0gJ2EnO1xuICAgICAgICBEUkUucHJvdG90eXBlID0gY3JlYXRlKEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSk7XG4gICAgICAgIERSRS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEUkU7XG4gICAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgRFJFLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldEF0dHJpYnV0ZS5jYWxsKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnLCB7aXM6IG5hbWV9KSwgJ2lzJykgIT09IG5hbWUgfHxcbiAgICAgICAgICAodXNhYmxlQ3VzdG9tRWxlbWVudHMgJiYgZ2V0QXR0cmlidXRlLmNhbGwobmV3IERSRSgpLCAnaXMnKSAhPT0gbmFtZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfShcbiAgICAgICAgZnVuY3Rpb24gRFJFKCkge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmNvbnN0cnVjdChIVE1MQW5jaG9yRWxlbWVudCwgW10sIERSRSk7XG4gICAgICAgIH0sXG4gICAgICAgIHt9LFxuICAgICAgICAnZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudC1hJ1xuICAgICAgKSk7XG4gICAgfSBjYXRjaChvX08pIHtcbiAgICAgIC8vIG9yIGZvcmNlIHRoZSBwb2x5ZmlsbCBpZiBub3RcbiAgICAgIC8vIGFuZCBrZWVwIGludGVybmFsIG9yaWdpbmFsIHJlZmVyZW5jZVxuICAgICAgcG9seWZpbGxWMSgpO1xuICAgIH1cbiAgfVxuICBcbiAgdHJ5IHtcbiAgICBjcmVhdGVFbGVtZW50LmNhbGwoZG9jdW1lbnQsICdhJywgJ2EnKTtcbiAgfSBjYXRjaChGaXJlRm94KSB7XG4gICAgc2Vjb25kQXJndW1lbnQgPSBmdW5jdGlvbiAoaXMpIHtcbiAgICAgIHJldHVybiB7aXM6IGlzLnRvTG93ZXJDYXNlKCl9O1xuICAgIH07XG4gIH1cbiAgXG59XG5cbmV4cG9ydHMuaW5zdGFsbEN1c3RvbUVsZW1lbnRzID0gaW5zdGFsbEN1c3RvbUVsZW1lbnRzO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIEVTNi9Qcm9taXNlcyBBKyBQcm9taXNlIGluc3RhbmNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbigqPSksIGZ1bmN0aW9uICgqPSkpfSByZXNvbHZlclxuICovXG5mdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIFByb21pc2UgcmVxdWlyZXMgYG5ld2AnKTtcbiAgfVxuICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTXVzdCBwYXNzIHJlc29sdmVyIGZ1bmN0aW9uJyk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuX3N0YXRlID0gUGVuZGluZ1Byb21pc2U7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHsqfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy5fdmFsdWUgPSBbXTtcblxuICAvKipcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLl9pc0NoYWluRW5kID0gdHJ1ZTtcblxuICBkb1Jlc29sdmUoXG4gICAgdGhpcyxcbiAgICBhZG9wdGVyKHRoaXMsIEZ1bGZpbGxlZFByb21pc2UpLFxuICAgIGFkb3B0ZXIodGhpcywgUmVqZWN0ZWRQcm9taXNlKSxcbiAgICB7IHRoZW46IHJlc29sdmVyIH1cbiAgKTtcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgUHVibGljIEluc3RhbmNlIE1ldGhvZHNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcHJvbWlzZSBpbnN0YW5jZSB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0IG9mIHRoaXMgcHJvbWlzZVxuICogYXMgaW5wdXRzIHRvIHRoZSBvbkZ1bGZpbGxlZCBvciBvblJlamVjdGVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfSBvbkZ1bGZpbGxlZFxuICogQHBhcmFtIHtmdW5jdGlvbigqKX0gb25SZWplY3RlZFxuICovXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgb25GdWxmaWxsZWQgPSBpc0Z1bmN0aW9uKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdm9pZCAwO1xuICBvblJlamVjdGVkID0gaXNGdW5jdGlvbihvblJlamVjdGVkKSA/IG9uUmVqZWN0ZWQgOiB2b2lkIDA7XG5cbiAgaWYgKG9uRnVsZmlsbGVkIHx8IG9uUmVqZWN0ZWQpIHtcbiAgICB0aGlzLl9pc0NoYWluRW5kID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fc3RhdGUoXG4gICAgdGhpcy5fdmFsdWUsXG4gICAgb25GdWxmaWxsZWQsXG4gICAgb25SZWplY3RlZFxuICApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHByb21pc2UgdGhhdCB3aWxsIGhhbmRsZSB0aGUgcmVqZWN0ZWQgc3RhdGUgb2YgdGhpcyBwcm9taXNlLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IG9uUmVqZWN0ZWRcbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCBvblJlamVjdGVkKTtcbn07XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIFB1YmxpYyBTdGF0aWMgTWV0aG9kc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bGZpbGxlZCBQcm9taXNlIG9mIHZhbHVlLiBJZiB2YWx1ZSBpcyBpdHNlbGYgYSB0aGVuLWFibGUsXG4gKiByZXNvbHZlcyB3aXRoIHRoZSB0aGVuLWFibGUncyB2YWx1ZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9XG4gKiBAcGFyYW0geyo9fSB2YWx1ZVxuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5Qcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoaXNPYmplY3QodmFsdWUpICYmIHZhbHVlIGluc3RhbmNlb2YgdGhpcykge1xuICAgIHByb21pc2UgPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2V9ICovKHByb21pc2UpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVqZWN0ZWQgUHJvbWlzZSBvZiByZWFzb24uXG4gKlxuICogQHRoaXMgeyFQcm9taXNlfVxuICogQHBhcmFtIHsqPX0gcmVhc29uXG4gKiBAcmV0dXJucyB7IVByb21pc2V9XG4gKi9cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uKF8sIHJlamVjdCkge1xuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZX0gKi8ocHJvbWlzZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdpdGggYW4gYXJyYXkgb2YgdGhlIHZhbHVlcyBvZiB0aGVcbiAqIHBhc3NlZCBpbiBwcm9taXNlcy4gSWYgYW55IHByb21pc2UgcmVqZWN0cywgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbFxuICogcmVqZWN0LlxuICpcbiAqIEB0aGlzIHshUHJvbWlzZX1cbiAqIEBwYXJhbSB7IUFycmF5PFByb21pc2V8Kj59IHByb21pc2VzXG4gKiBAcmV0dXJucyB7IVByb21pc2V9XG4gKi9cblByb21pc2UuYWxsID0gZnVuY3Rpb24ocHJvbWlzZXMpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGxlbmd0aCA9IHByb21pc2VzLmxlbmd0aDtcbiAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH1cblxuICAgIGVhY2gocHJvbWlzZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KSB7XG4gICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAoLS1sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlfSAqLyhwcm9taXNlKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb3IgcmVqZWN0IGJhc2VkIG9uIHRoZSBmaXJzdFxuICogcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgcHJvbWlzZS5cbiAqXG4gKiBAdGhpcyB7IVByb21pc2V9XG4gKiBAcGFyYW0geyFBcnJheTxQcm9taXNlfCo+fSBwcm9taXNlc1xuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbihwcm9taXNlcykge1xuICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5yZXNvbHZlKHByb21pc2VzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZX0gKi8ocHJvbWlzZSk7XG59O1xuXG52YXIgb25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IGZ1bmN0aW9uKHJlYXNvbiwgcHJvbWlzZSkge1xuICB0aHJvdyByZWFzb247XG59O1xuXG4vKipcbiAqIEFuIGludGVybmFsIHVzZSBzdGF0aWMgZnVuY3Rpb24uXG4gKi9cblByb21pc2UuX292ZXJyaWRlVW5oYW5kbGVkRXhjZXB0aW9uSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgb25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiA9IGhhbmRsZXI7XG59O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICBQcml2YXRlIGZ1bmN0aW9uc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogVGhlIEZ1bGZpbGxlZCBQcm9taXNlIHN0YXRlLiBDYWxscyBvbkZ1bGZpbGxlZCB3aXRoIHRoZSByZXNvbHZlZCB2YWx1ZSBvZlxuICogdGhpcyBwcm9taXNlLCBjcmVhdGluZyBhIG5ldyBwcm9taXNlLlxuICpcbiAqIElmIHRoZXJlIGlzIG5vIG9uRnVsZmlsbGVkLCByZXR1cm5zIHRoZSBjdXJyZW50IHByb21pc2UgdG8gYXZvaWQgYW4gcHJvbWlzZVxuICogaW5zdGFuY2UuXG4gKlxuICogQHRoaXMgeyFQcm9taXNlfSBUaGUgY3VycmVudCBwcm9taXNlXG4gKiBAcGFyYW0geyo9fSB2YWx1ZSBUaGUgY3VycmVudCBwcm9taXNlJ3MgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uRnVsZmlsbGVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IHVudXNlZFxuICogQHBhcmFtIHtEZWZlcnJlZH0gZGVmZXJyZWQgQSBkZWZlcnJlZCBvYmplY3QgdGhhdCBob2xkcyBhIHByb21pc2UgYW5kIGl0c1xuICogICAgIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMuIEl0IElTIE5PVCBwYXNzZWQgd2hlbiBjYWxsZWQgZnJvbVxuICogICAgIFByb21pc2UjdGhlbiB0byBzYXZlIGFuIG9iamVjdCBpbnN0YW5jZSAoc2luY2Ugd2UgbWF5IHJldHVybiB0aGUgY3VycmVudFxuICogICAgIHByb21pc2UpLiBJdCBJUyBwYXNzZWQgaW4gd2hlbiBhZG9wdGluZyB0aGUgRnVsZmlsbGVkIHN0YXRlIGZyb20gdGhlXG4gKiAgICAgUGVuZGluZyBzdGF0ZS5cbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gRnVsZmlsbGVkUHJvbWlzZSh2YWx1ZSwgb25GdWxmaWxsZWQsIHVudXNlZCwgZGVmZXJyZWQpIHtcbiAgaWYgKCFvbkZ1bGZpbGxlZCkge1xuICAgIGRlZmVycmVkQWRvcHQoZGVmZXJyZWQsIEZ1bGZpbGxlZFByb21pc2UsIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAoIWRlZmVycmVkKSB7XG4gICAgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQodGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbiAgZGVmZXIodHJ5Q2F0Y2hEZWZlcnJlZChkZWZlcnJlZCwgb25GdWxmaWxsZWQsIHZhbHVlKSk7XG4gIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufVxuXG4vKipcbiAqIFRoZSBSZWplY3RlZCBQcm9taXNlIHN0YXRlLiBDYWxscyBvblJlamVjdGVkIHdpdGggdGhlIHJlc29sdmVkIHZhbHVlIG9mXG4gKiB0aGlzIHByb21pc2UsIGNyZWF0aW5nIGEgbmV3IHByb21pc2UuXG4gKlxuICogSWYgdGhlcmUgaXMgbm8gb25SZWplY3RlZCwgcmV0dXJucyB0aGUgY3VycmVudCBwcm9taXNlIHRvIGF2b2lkIGFuIHByb21pc2VcbiAqIGluc3RhbmNlLlxuICpcbiAqIEB0aGlzIHshUHJvbWlzZX0gVGhlIGN1cnJlbnQgcHJvbWlzZVxuICogQHBhcmFtIHsqPX0gcmVhc29uIFRoZSBjdXJyZW50IHByb21pc2UncyByZWplY3Rpb24gcmVhc29uLlxuICogQHBhcmFtIHtmdW5jdGlvbigqPSk9fSB1bnVzZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pPX0gb25SZWplY3RlZFxuICogQHBhcmFtIHtEZWZlcnJlZH0gZGVmZXJyZWQgQSBkZWZlcnJlZCBvYmplY3QgdGhhdCBob2xkcyBhIHByb21pc2UgYW5kIGl0c1xuICogICAgIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMuIEl0IElTIE5PVCBwYXNzZWQgd2hlbiBjYWxsZWQgZnJvbVxuICogICAgIFByb21pc2UjdGhlbiB0byBzYXZlIGFuIG9iamVjdCBpbnN0YW5jZSAoc2luY2Ugd2UgbWF5IHJldHVybiB0aGUgY3VycmVudFxuICogICAgIHByb21pc2UpLiBJdCBJUyBwYXNzZWQgaW4gd2hlbiBhZG9wdGluZyB0aGUgUmVqZWN0ZWQgc3RhdGUgZnJvbSB0aGVcbiAqICAgICBQZW5kaW5nIHN0YXRlLlxuICogQHJldHVybnMgeyFQcm9taXNlfVxuICovXG5mdW5jdGlvbiBSZWplY3RlZFByb21pc2UocmVhc29uLCB1bnVzZWQsIG9uUmVqZWN0ZWQsIGRlZmVycmVkKSB7XG4gIGlmICghb25SZWplY3RlZCkge1xuICAgIGRlZmVycmVkQWRvcHQoZGVmZXJyZWQsIFJlamVjdGVkUHJvbWlzZSwgcmVhc29uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBpZiAoIWRlZmVycmVkKSB7XG4gICAgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQodGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbiAgZGVmZXIodHJ5Q2F0Y2hEZWZlcnJlZChkZWZlcnJlZCwgb25SZWplY3RlZCwgcmVhc29uKSk7XG4gIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufVxuXG4vKipcbiAqIFRoZSBQZW5kaW5nIFByb21pc2Ugc3RhdGUuIEV2ZW50dWFsbHkgY2FsbHMgb25GdWxmaWxsZWQgb25jZSB0aGUgcHJvbWlzZSBoYXNcbiAqIHJlc29sdmVkLCBvciBvblJlamVjdGVkIG9uY2UgdGhlIHByb21pc2UgcmVqZWN0cy5cbiAqXG4gKiBJZiB0aGVyZSBpcyBubyBvbkZ1bGZpbGxlZCBhbmQgbm8gb25SZWplY3RlZCwgcmV0dXJucyB0aGUgY3VycmVudCBwcm9taXNlIHRvXG4gKiBhdm9pZCBhbiBwcm9taXNlIGluc3RhbmNlLlxuICpcbiAqIEB0aGlzIHshUHJvbWlzZX0gVGhlIGN1cnJlbnQgcHJvbWlzZVxuICogQHBhcmFtIHsqPX0gcXVldWUgVGhlIGN1cnJlbnQgcHJvbWlzZSdzIHBlbmRpbmcgcHJvbWlzZXMgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uRnVsZmlsbGVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KT19IG9uUmVqZWN0ZWRcbiAqIEBwYXJhbSB7RGVmZXJyZWR9IGRlZmVycmVkIEEgZGVmZXJyZWQgb2JqZWN0IHRoYXQgaG9sZHMgYSBwcm9taXNlIGFuZCBpdHNcbiAqICAgICByZXNvbHZlIGFuZCByZWplY3QgZnVuY3Rpb25zLiBJdCBJUyBOT1QgcGFzc2VkIHdoZW4gY2FsbGVkIGZyb21cbiAqICAgICBQcm9taXNlI3RoZW4gdG8gc2F2ZSBhbiBvYmplY3QgaW5zdGFuY2UgKHNpbmNlIHdlIG1heSByZXR1cm4gdGhlIGN1cnJlbnRcbiAqICAgICBwcm9taXNlKS4gSXQgSVMgcGFzc2VkIGluIHdoZW4gYWRvcHRpbmcgdGhlIFBlbmRpbmcgc3RhdGUgZnJvbSB0aGVcbiAqICAgICBQZW5kaW5nIHN0YXRlIG9mIGFub3RoZXIgcHJvbWlzZS5cbiAqIEByZXR1cm5zIHshUHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gUGVuZGluZ1Byb21pc2UocXVldWUsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBkZWZlcnJlZCkge1xuICBpZiAoIWRlZmVycmVkKSB7XG4gICAgaWYgKCFvbkZ1bGZpbGxlZCAmJiAhb25SZWplY3RlZCkgeyByZXR1cm4gdGhpczsgfVxuICAgIGRlZmVycmVkID0gbmV3IERlZmVycmVkKHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG4gIHF1ZXVlLnB1c2goe1xuICAgIGRlZmVycmVkOiBkZWZlcnJlZCxcbiAgICBvbkZ1bGZpbGxlZDogb25GdWxmaWxsZWQgfHwgZGVmZXJyZWQucmVzb2x2ZSxcbiAgICBvblJlamVjdGVkOiBvblJlamVjdGVkIHx8IGRlZmVycmVkLnJlamVjdFxuICB9KTtcbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIGRlZmVycmVkIGluc3RhbmNlIHRoYXQgaG9sZHMgYSBwcm9taXNlIGFuZCBpdHMgcmVzb2x2ZSBhbmRcbiAqIHJlamVjdCBmdW5jdGlvbnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIERlZmVycmVkKFByb21pc2UpIHtcbiAgdmFyIGRlZmVycmVkID0gdGhpcztcbiAgLyoqIEB0eXBlIHshUHJvbWlzZX0gKi9cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLyoqIEB0eXBlIHtmdW5jdGlvbigqPSl9ICovXG4gICAgZGVmZXJyZWQucmVzb2x2ZSA9IHJlc29sdmU7XG5cbiAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCo9KX0gKi9cbiAgICBkZWZlcnJlZC5yZWplY3QgPSByZWplY3Q7XG4gIH0pO1xuICByZXR1cm4gZGVmZXJyZWQ7XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbnMgdGhlIHN0YXRlIG9mIHByb21pc2UgdG8gYW5vdGhlciBzdGF0ZS4gVGhpcyBpcyBvbmx5IGV2ZXIgY2FsbGVkXG4gKiBvbiB3aXRoIGEgcHJvbWlzZSB0aGF0IGlzIGN1cnJlbnRseSBpbiB0aGUgUGVuZGluZyBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0geyFQcm9taXNlfSBwcm9taXNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX0gc3RhdGVcbiAqIEBwYXJhbSB7Kj19IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGFkb3B0KHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgYWRvcHRlZSkge1xuICB2YXIgcXVldWUgPSBwcm9taXNlLl92YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBzdGF0ZTtcbiAgcHJvbWlzZS5fdmFsdWUgPSB2YWx1ZTtcblxuICBpZiAoYWRvcHRlZSAmJiBzdGF0ZSA9PT0gUGVuZGluZ1Byb21pc2UpIHtcbiAgICBhZG9wdGVlLl9zdGF0ZSh2YWx1ZSwgdm9pZCAwLCB2b2lkIDAsIHtcbiAgICAgIHByb21pc2U6IHByb21pc2UsXG4gICAgICByZXNvbHZlOiB2b2lkIDAsXG4gICAgICByZWplY3Q6IHZvaWQgMFxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0ID0gcXVldWVbaV07XG4gICAgcHJvbWlzZS5fc3RhdGUoXG4gICAgICB2YWx1ZSxcbiAgICAgIG5leHQub25GdWxmaWxsZWQsXG4gICAgICBuZXh0Lm9uUmVqZWN0ZWQsXG4gICAgICBuZXh0LmRlZmVycmVkXG4gICAgKTtcbiAgfVxuICBxdWV1ZS5sZW5ndGggPSAwO1xuXG4gIC8vIERldGVybWluZSBpZiB0aGlzIHJlamVjdGVkIHByb21pc2Ugd2lsbCBiZSBcImhhbmRsZWRcIi5cbiAgaWYgKHN0YXRlID09PSBSZWplY3RlZFByb21pc2UgJiYgcHJvbWlzZS5faXNDaGFpbkVuZCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvbWlzZS5faXNDaGFpbkVuZCkge1xuICAgICAgICBvblBvc3NpYmx5VW5oYW5kbGVkUmVqZWN0aW9uKHZhbHVlLCBwcm9taXNlKTtcbiAgICAgIH1cbiAgICB9LCAwKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgcGFydGlhbCBhcHBsaWNhdGlvbiBvZiBhZG9wdC5cbiAqXG4gKiBAcGFyYW0geyFQcm9taXNlfSBwcm9taXNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHRoaXM6UHJvbWlzZSwqPSxmdW5jdGlvbigqPSksZnVuY3Rpb24oKj0pLERlZmVycmVkKTohUHJvbWlzZX0gc3RhdGVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigqPSl9XG4gKi9cbmZ1bmN0aW9uIGFkb3B0ZXIocHJvbWlzZSwgc3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgYWRvcHQocHJvbWlzZSwgc3RhdGUsIHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIGEgZGVmZXJyZWQgcHJvbWlzZXMgc3RhdGUuIE5lY2Vzc2FyeSBmb3IgdXBkYXRpbmcgYW4gYWRvcHRpbmdcbiAqIHByb21pc2UncyBzdGF0ZSB3aGVuIHRoZSBhZG9wdGVlIHJlc29sdmVzLlxuICpcbiAqIEBwYXJhbSB7P0RlZmVycmVkfSBkZWZlcnJlZFxuICogQHBhcmFtIHtmdW5jdGlvbih0aGlzOlByb21pc2UsKj0sZnVuY3Rpb24oKj0pLGZ1bmN0aW9uKCo9KSxEZWZlcnJlZCk6IVByb21pc2V9IHN0YXRlXG4gKiBAcGFyYW0geyo9fSB2YWx1ZVxuICovXG5mdW5jdGlvbiBkZWZlcnJlZEFkb3B0KGRlZmVycmVkLCBzdGF0ZSwgdmFsdWUpIHtcbiAgaWYgKGRlZmVycmVkKSB7XG4gICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuICAgIHByb21pc2UuX3N0YXRlID0gc3RhdGU7XG4gICAgcHJvbWlzZS5fdmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEEgbm8tb3AgZnVuY3Rpb24gdG8gcHJldmVudCBkb3VibGUgcmVzb2x2aW5nLlxuICovXG5mdW5jdGlvbiBub29wKCkge31cblxuLyoqXG4gKiBUZXN0cyBpZiBmbiBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSBmblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBUZXN0cyBpZiBmbiBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVhY2ggZWxlbWVudCBvZiBhbiBhcnJheSwgY2FsbGluZyB0aGUgaXRlcmF0b3Igd2l0aCB0aGVcbiAqIGVsZW1lbnQgYW5kIGl0cyBpbmRleC5cbiAqXG4gKiBAcGFyYW0geyFBcnJheX0gY29sbGVjdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbigqPSxudW1iZXIpfSBpdGVyYXRvclxuICovXG5mdW5jdGlvbiBlYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdG9yKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgIGl0ZXJhdG9yKGNvbGxlY3Rpb25baV0sIGkpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBhdHRlbXB0IHRvIHJlc29sdmUgdGhlIGRlZmVycmVkIHdpdGggdGhlIHJldHVyblxuICogb2YgZm4uIElmIGFueSBlcnJvciBpcyByYWlzZWQsIHJlamVjdHMgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyFEZWZlcnJlZH0gZGVmZXJyZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pfSBmblxuICogQHBhcmFtIHsqfSBhcmdcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfVxuICovXG5mdW5jdGlvbiB0cnlDYXRjaERlZmVycmVkKGRlZmVycmVkLCBmbiwgYXJnKSB7XG4gIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAgdmFyIHJlc29sdmUgPSBkZWZlcnJlZC5yZXNvbHZlO1xuICB2YXIgcmVqZWN0ID0gZGVmZXJyZWQucmVqZWN0O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXN1bHQgPSBmbihhcmcpO1xuICAgICAgZG9SZXNvbHZlKHByb21pc2UsIHJlc29sdmUsIHJlamVjdCwgcmVzdWx0LCByZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogUXVldWVzIGFuZCBleGVjdXRlcyBtdWx0aXBsZSBkZWZlcnJlZCBmdW5jdGlvbnMgb24gYW5vdGhlciBydW4gbG9vcC5cbiAqL1xudmFyIGRlZmVyID0gKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogRGVmZXJzIGZuIHRvIGFub3RoZXIgcnVuIGxvb3AuXG4gICAqL1xuICB2YXIgc2NoZWR1bGVGbHVzaDtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wb3N0TWVzc2FnZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZmx1c2gpO1xuICAgIHNjaGVkdWxlRmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgnbWFjcm8tdGFzaycsICcqJyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlZHVsZUZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHF1ZXVlID0gbmV3IEFycmF5KDE2KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGZuID0gcXVldWVbaV07XG4gICAgICBxdWV1ZVtpXSA9IG51bGw7XG4gICAgICBmbigpO1xuICAgIH1cbiAgICBsZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm5cbiAgICovXG4gIGZ1bmN0aW9uIGRlZmVyKGZuKSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkgeyBzY2hlZHVsZUZsdXNoKCk7IH1cbiAgICBxdWV1ZVtsZW5ndGgrK10gPSBmbjtcbiAgfVxuXG4gIHJldHVybiBkZWZlcjtcbn0pKCk7XG5cbi8qKlxuICogVGhlIFByb21pc2UgcmVzb2x1dGlvbiBwcm9jZWR1cmUuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICpcbiAqIEBwYXJhbSB7IVByb21pc2V9IHByb21pc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKj0pfSByZXNvbHZlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCo9KX0gcmVqZWN0XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0geyo9fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGRvUmVzb2x2ZShwcm9taXNlLCByZXNvbHZlLCByZWplY3QsIHZhbHVlLCBjb250ZXh0KSB7XG4gIHZhciBfcmVqZWN0ID0gcmVqZWN0O1xuICB2YXIgdGhlbjtcbiAgdmFyIF9yZXNvbHZlO1xuICB0cnkge1xuICAgIGlmICh2YWx1ZSA9PT0gcHJvbWlzZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGZ1bGZpbGwgcHJvbWlzZSB3aXRoIGl0c2VsZicpO1xuICAgIH1cbiAgICB2YXIgaXNPYmogPSBpc09iamVjdCh2YWx1ZSk7XG4gICAgaWYgKGlzT2JqICYmIHZhbHVlIGluc3RhbmNlb2YgcHJvbWlzZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgYWRvcHQocHJvbWlzZSwgdmFsdWUuX3N0YXRlLCB2YWx1ZS5fdmFsdWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqICYmICh0aGVuID0gdmFsdWUudGhlbikgJiYgaXNGdW5jdGlvbih0aGVuKSkge1xuICAgICAgX3Jlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBfcmVzb2x2ZSA9IF9yZWplY3QgPSBub29wO1xuICAgICAgICBkb1Jlc29sdmUocHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0LCB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICAgIF9yZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgX3Jlc29sdmUgPSBfcmVqZWN0ID0gbm9vcDtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuICAgICAgdGhlbi5jYWxsKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfcmVzb2x2ZSh2YWx1ZSk7IH0sXG4gICAgICAgIGZ1bmN0aW9uKHJlYXNvbikgeyBfcmVqZWN0KHJlYXNvbik7IH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIF9yZWplY3QoZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7ZGV2fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7aW50ZXJuYWxMaXN0ZW5JbXBsZW1lbnRhdGlvbn0gZnJvbSAnLi9ldmVudC1oZWxwZXItbGlzdGVuJztcbmltcG9ydCB7cGFyc2VKc29ufSBmcm9tICcuL2pzb24nO1xuXG5cbi8qKiBAY29uc3QgKi9cbmNvbnN0IEFNUF9NRVNTQUdFX1BSRUZJWCA9ICdhbXAtJztcbmV4cG9ydCBjb25zdCBDT05TVEFOVFMgPSB7XG4gIHJlc3BvbnNlVHlwZVN1ZmZpeDogJy1yZXN1bHQnLFxuICBtZXNzYWdlSWRGaWVsZE5hbWU6ICdtZXNzYWdlSWQnLFxuICBwYXlsb2FkRmllbGROYW1lOiAncGF5bG9hZCcsXG4gIGNvbnRlbnRGaWVsZE5hbWU6ICdjb250ZW50Jyxcbn07XG5cbi8qKiBAZW51bSB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IE1lc3NhZ2VUeXBlID0ge1xuICAvLyBGb3IgYW1wLWFkXG4gIFNFTkRfRU1CRURfU1RBVEU6ICdzZW5kLWVtYmVkLXN0YXRlJyxcbiAgRU1CRURfU1RBVEU6ICdlbWJlZC1zdGF0ZScsXG4gIFNFTkRfRU1CRURfQ09OVEVYVDogJ3NlbmQtZW1iZWQtY29udGV4dCcsXG4gIEVNQkVEX0NPTlRFWFQ6ICdlbWJlZC1jb250ZXh0JyxcbiAgU0VORF9JTlRFUlNFQ1RJT05TOiAnc2VuZC1pbnRlcnNlY3Rpb25zJyxcbiAgSU5URVJTRUNUSU9OOiAnaW50ZXJzZWN0aW9uJyxcbiAgRU1CRURfU0laRTogJ2VtYmVkLXNpemUnLFxuICBFTUJFRF9TSVpFX0NIQU5HRUQ6ICdlbWJlZC1zaXplLWNoYW5nZWQnLFxuICBFTUJFRF9TSVpFX0RFTklFRDogJ2VtYmVkLXNpemUtZGVuaWVkJyxcbiAgTk9fQ09OVEVOVDogJ25vLWNvbnRlbnQnLFxuICBHRVRfSFRNTDogJ2dldC1odG1sJyxcbiAgR0VUX0NPTlNFTlRfU1RBVEU6ICdnZXQtY29uc2VudC1zdGF0ZScsXG5cbiAgLy8gRm9yIHRoZSBmcmFtZSB0byBiZSBwbGFjZWQgaW4gZnVsbCBvdmVybGF5IG1vZGUgZm9yIGxpZ2h0Ym94ZXNcbiAgRlVMTF9PVkVSTEFZX0ZSQU1FOiAnZnVsbC1vdmVybGF5LWZyYW1lJyxcbiAgRlVMTF9PVkVSTEFZX0ZSQU1FX1JFU1BPTlNFOiAnZnVsbC1vdmVybGF5LWZyYW1lLXJlc3BvbnNlJyxcbiAgQ0FOQ0VMX0ZVTExfT1ZFUkxBWV9GUkFNRTogJ2NhbmNlbC1mdWxsLW92ZXJsYXktZnJhbWUnLFxuICBDQU5DRUxfRlVMTF9PVkVSTEFZX0ZSQU1FX1JFU1BPTlNFOiAnY2FuY2VsLWZ1bGwtb3ZlcmxheS1mcmFtZS1yZXNwb25zZScsXG5cbiAgLy8gRm9yIGFtcC1pbmFib3hcbiAgU0VORF9QT1NJVElPTlM6ICdzZW5kLXBvc2l0aW9ucycsXG4gIFBPU0lUSU9OOiAncG9zaXRpb24nLFxuXG4gIC8vIEZvciBhbXAtYW5hbHl0aWNzJyBpZnJhbWUtdHJhbnNwb3J0XG4gIFNFTkRfSUZSQU1FX1RSQU5TUE9SVF9FVkVOVFM6ICdzZW5kLWlmcmFtZS10cmFuc3BvcnQtZXZlbnRzJyxcbiAgSUZSQU1FX1RSQU5TUE9SVF9FVkVOVFM6ICdpZnJhbWUtdHJhbnNwb3J0LWV2ZW50cycsXG4gIElGUkFNRV9UUkFOU1BPUlRfUkVTUE9OU0U6ICdpZnJhbWUtdHJhbnNwb3J0LXJlc3BvbnNlJyxcblxuICAvLyBGb3IgdXNlci1lcnJvci1pbi1pZnJhbWVcbiAgVVNFUl9FUlJPUl9JTl9JRlJBTUU6ICd1c2VyLWVycm9yLWluLWlmcmFtZScsXG59O1xuXG4vKipcbiAqIExpc3RlbnMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgb24gdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFdmVudFRhcmdldH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICogQHBhcmFtIHtmdW5jdGlvbighRXZlbnQpfSBsaXN0ZW5lclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfZXZ0TGlzdGVuZXJPcHRzXG4gKiBAcmV0dXJuIHshVW5saXN0ZW5EZWZ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4oZWxlbWVudCwgZXZlbnRUeXBlLCBsaXN0ZW5lciwgb3B0X2V2dExpc3RlbmVyT3B0cykge1xuICByZXR1cm4gaW50ZXJuYWxMaXN0ZW5JbXBsZW1lbnRhdGlvbihcbiAgICAgIGVsZW1lbnQsIGV2ZW50VHlwZSwgbGlzdGVuZXIsIG9wdF9ldnRMaXN0ZW5lck9wdHMpO1xufVxuXG5cbi8qKlxuICogU2VyaWFsaXplIGFuIEFNUCBwb3N0IG1lc3NhZ2UuIE91dHB1dCBsb29rcyBsaWtlOlxuICogJ2FtcC0wMTE0ODEzMjMwOTk0OTB7XCJ0eXBlXCI6XCJwb3NpdGlvblwiLFwic2VudGluZWxcIjpcIjEyMzQ1XCIsXCJmb29cIjpcImJhclwifSdcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGluZWxcbiAqIEBwYXJhbSB7SnNvbk9iamVjdD19IGRhdGFcbiAqIEBwYXJhbSB7P3N0cmluZz19IHJ0dlZlcnNpb25cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZU1lc3NhZ2UodHlwZSwgc2VudGluZWwsIGRhdGEgPSBkaWN0KCksXG4gIHJ0dlZlcnNpb24gPSBudWxsKSB7XG4gIC8vIFRPRE86IGNvbnNpZGVyIHdyYXAgdGhlIGRhdGEgaW4gYSBcImRhdGFcIiBmaWVsZC4geyB0eXBlLCBzZW50aW5hbCwgZGF0YSB9XG4gIGNvbnN0IG1lc3NhZ2UgPSBkYXRhO1xuICBtZXNzYWdlWyd0eXBlJ10gPSB0eXBlO1xuICBtZXNzYWdlWydzZW50aW5lbCddID0gc2VudGluZWw7XG4gIHJldHVybiBBTVBfTUVTU0FHRV9QUkVGSVggKyAocnR2VmVyc2lvbiB8fCAnJykgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplIGFuIEFNUCBwb3N0IG1lc3NhZ2UuXG4gKiBSZXR1cm5zIG51bGwgaWYgaXQncyBub3QgdmFsaWQgQU1QIG1lc3NhZ2UgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7Kn0gbWVzc2FnZVxuICogQHJldHVybiB7P0pzb25PYmplY3R8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgaWYgKCFpc0FtcE1lc3NhZ2UobWVzc2FnZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBzdGFydFBvcyA9IG1lc3NhZ2UuaW5kZXhPZigneycpO1xuICBkZXYoKS5hc3NlcnQoc3RhcnRQb3MgIT0gLTEsICdKU09OIG1pc3NpbmcgaW4gJXMnLCBtZXNzYWdlKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFyc2VKc29uKG1lc3NhZ2Uuc3Vic3RyKHN0YXJ0UG9zKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZXYoKS5lcnJvcignTUVTU0FHSU5HJywgJ0ZhaWxlZCB0byBwYXJzZSBtZXNzYWdlOiAnICsgbWVzc2FnZSwgZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuXG4vKipcbiAqICBSZXR1cm5zIHRydWUgaWYgbWVzc2FnZSBsb29rcyBsaWtlIGl0IGlzIGFuIEFNUCBwb3N0TWVzc2FnZVxuICogIEBwYXJhbSB7Kn0gbWVzc2FnZVxuICogIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FtcE1lc3NhZ2UobWVzc2FnZSkge1xuICByZXR1cm4gKHR5cGVvZiBtZXNzYWdlID09ICdzdHJpbmcnICYmXG4gICAgICBtZXNzYWdlLmluZGV4T2YoQU1QX01FU1NBR0VfUFJFRklYKSA9PSAwICYmXG4gICAgICBtZXNzYWdlLmluZGV4T2YoJ3snKSAhPSAtMSk7XG59XG5cbi8qKiBAdHlwZWRlZiB7e2NyZWF0aXZlSWQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nfX0gKi9cbmV4cG9ydCBsZXQgSWZyYW1lVHJhbnNwb3J0RXZlbnQ7XG4vLyBBbiBldmVudCwgYW5kIHRoZSB0cmFuc3BvcnQgSUQgb2YgdGhlIGFtcC1hbmFseXRpY3MgdGFncyB0aGF0XG4vLyBnZW5lcmF0ZWQgaXQuIEZvciBpbnN0YW5jZSBpZiB0aGUgY3JlYXRpdmUgd2l0aCB0cmFuc3BvcnRcbi8vIElEIDIgc2VuZHMgXCJoaVwiLCB0aGVuIGFuIElmcmFtZVRyYW5zcG9ydEV2ZW50IHdvdWxkIGxvb2sgbGlrZTpcbi8vIHsgY3JlYXRpdmVJZDogXCIyXCIsIG1lc3NhZ2U6IFwiaGlcIiB9XG4vLyBJZiB0aGUgY3JlYXRpdmUgd2l0aCB0cmFuc3BvcnQgSUQgMiBzZW50IHRoYXQsIGFuZCBhbHNvIHNlbnQgXCJoZWxsb1wiLFxuLy8gYW5kIHRoZSBjcmVhdGl2ZSB3aXRoIHRyYW5zcG9ydCBJRCAzIHNlbmRzIFwiZ29vZGJ5ZVwiIHRoZW4gYW4gKmFycmF5KiBvZiAzXG4vLyBBbXBBbmFseXRpY3NJZnJhbWVUcmFuc3BvcnRFdmVudCB3b3VsZCBiZSBzZW50IHRvIHRoZSAzcCBmcmFtZSBsaWtlIHNvOlxuLy8gW1xuLy8gICB7IGNyZWF0aXZlSWQ6IFwiMlwiLCBtZXNzYWdlOiBcImhpXCIgfSwgLy8gQW4gQW1wQW5hbHl0aWNzSWZyYW1lVHJhbnNwb3J0RXZlbnRcbi8vICAgeyBjcmVhdGl2ZUlkOiBcIjJcIiwgbWVzc2FnZTogXCJoZWxsb1wiIH0sIC8vIEFub3RoZXJcbi8vICAgeyBjcmVhdGl2ZUlkOiBcIjNcIiwgbWVzc2FnZTogXCJnb29kYnllXCIgfSAvLyBBbmQgYW5vdGhlclxuLy8gXVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7YXNzZXJ0SHR0cHNVcmwsIHBhcnNlVXJsRGVwcmVjYXRlZH0gZnJvbSAnLi91cmwnO1xuaW1wb3J0IHtkZXYsIHVzZXJ9IGZyb20gJy4vbG9nJztcbmltcG9ydCB7ZGljdH0gZnJvbSAnLi91dGlscy9vYmplY3QnO1xuaW1wb3J0IHtnZXRDb250ZXh0TWV0YWRhdGF9IGZyb20gJy4uL3NyYy9pZnJhbWUtYXR0cmlidXRlcyc7XG5pbXBvcnQge2dldE1vZGV9IGZyb20gJy4vbW9kZSc7XG5pbXBvcnQge2lzRXhwZXJpbWVudE9ufSBmcm9tICcuL2V4cGVyaW1lbnRzJztcbmltcG9ydCB7c2V0U3R5bGV9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IHtzdGFydHNXaXRofSBmcm9tICcuL3N0cmluZyc7XG5pbXBvcnQge3RyeVBhcnNlSnNvbn0gZnJvbSAnLi9qc29uJztcbmltcG9ydCB7dXJsc30gZnJvbSAnLi9jb25maWcnO1xuXG4vKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLG51bWJlcj59IE51bWJlciBvZiAzcCBmcmFtZXMgb24gdGhlIGZvciB0aGF0IHR5cGUuICovXG5sZXQgY291bnQgPSB7fTtcblxuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5sZXQgb3ZlcnJpZGVCb290c3RyYXBCYXNlVXJsO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBUQUcgPSAnM3AtZnJhbWUnO1xuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSBhdHRyaWJ1dGVzIGZvciB0aGUgYWQgdGVtcGxhdGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHBhcmVudFdpbmRvd1xuICogQHBhcmFtIHshQW1wRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdHlwZVxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfY29udGV4dFxuICogQHJldHVybiB7IUpzb25PYmplY3R9IENvbnRhaW5zXG4gKiAgICAgLSB0eXBlLCB3aWR0aCwgaGVpZ2h0LCBzcmMgYXR0cmlidXRlcyBvZiA8YW1wLWFkPiB0YWcuIFRoZXNlIGhhdmVcbiAqICAgICAgIHByZWNlZGVuY2Ugb3ZlciB0aGUgZGF0YS0gYXR0cmlidXRlcy5cbiAqICAgICAtIGRhdGEtKiBhdHRyaWJ1dGVzIG9mIHRoZSA8YW1wLWFkPiB0YWcgd2l0aCB0aGUgXCJkYXRhLVwiIHJlbW92ZWQuXG4gKiAgICAgLSBBIF9jb250ZXh0IG9iamVjdCBmb3IgaW50ZXJuYWwgdXNlLlxuICovXG5mdW5jdGlvbiBnZXRGcmFtZUF0dHJpYnV0ZXMocGFyZW50V2luZG93LCBlbGVtZW50LCBvcHRfdHlwZSwgb3B0X2NvbnRleHQpIHtcbiAgY29uc3QgdHlwZSA9IG9wdF90eXBlIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gIHVzZXIoKS5hc3NlcnQodHlwZSwgJ0F0dHJpYnV0ZSB0eXBlIHJlcXVpcmVkIGZvciA8YW1wLWFkPjogJXMnLCBlbGVtZW50KTtcbiAgY29uc3Qgc2VudGluZWwgPSBnZW5lcmF0ZVNlbnRpbmVsKHBhcmVudFdpbmRvdyk7XG4gIGxldCBhdHRyaWJ1dGVzID0gZGljdCgpO1xuICAvLyBEbyB0aGVzZSBmaXJzdCwgYXMgdGhlIG90aGVyIGF0dHJpYnV0ZXMgaGF2ZSBwcmVjZWRlbmNlLlxuICBhZGREYXRhQW5kSnNvbkF0dHJpYnV0ZXNfKGVsZW1lbnQsIGF0dHJpYnV0ZXMpO1xuICBhdHRyaWJ1dGVzID0gZ2V0Q29udGV4dE1ldGFkYXRhKHBhcmVudFdpbmRvdywgZWxlbWVudCwgc2VudGluZWwsXG4gICAgICBhdHRyaWJ1dGVzKTtcbiAgYXR0cmlidXRlc1sndHlwZSddID0gdHlwZTtcbiAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzWydfY29udGV4dCddLCBvcHRfY29udGV4dCk7XG4gIHJldHVybiBhdHRyaWJ1dGVzO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGlmcmFtZSBmb3IgdGhlIGVtYmVkLiBBcHBsaWVzIGNvcnJlY3Qgc2l6ZSBhbmQgcGFzc2VzIHRoZSBlbWJlZFxuICogYXR0cmlidXRlcyB0byB0aGUgZnJhbWUgdmlhIEpTT04gaW5zaWRlIHRoZSBmcmFnbWVudC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gcGFyZW50V2luZG93XG4gKiBAcGFyYW0geyFBbXBFbGVtZW50fSBwYXJlbnRFbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9jb250ZXh0XG4gKiBAcGFyYW0geyF7XG4gKiAgIGRpc2FsbG93Q3VzdG9tLFxuICogICBhbGxvd0Z1bGxzY3JlZW4sXG4gKiB9PX0gb3B0X29wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIGNyZWF0ZWQgaWZyYW1lLlxuICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSBpZnJhbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJZnJhbWUoXG4gIHBhcmVudFdpbmRvdywgcGFyZW50RWxlbWVudCwgb3B0X3R5cGUsIG9wdF9jb250ZXh0LFxuICB7ZGlzYWxsb3dDdXN0b20sIGFsbG93RnVsbHNjcmVlbn0gPSB7fSkge1xuICAvLyBDaGVjayB0aGF0IHRoZSBwYXJlbnRFbGVtZW50IGlzIGFscmVhZHkgaW4gRE9NLiBUaGlzIGNvZGUgdXNlcyBhIG5ldyBhbmRcbiAgLy8gZmFzdCBgaXNDb25uZWN0ZWRgIEFQSSBhbmQgdGh1cyBvbmx5IHVzZWQgd2hlbiBpdCdzIGF2YWlsYWJsZS5cbiAgZGV2KCkuYXNzZXJ0KFxuICAgICAgcGFyZW50RWxlbWVudFsnaXNDb25uZWN0ZWQnXSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBwYXJlbnRFbGVtZW50Wydpc0Nvbm5lY3RlZCddID09PSB0cnVlLFxuICAgICAgJ1BhcmVudCBlbGVtZW50IG11c3QgYmUgaW4gRE9NJyk7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPVxuICAgICAgZ2V0RnJhbWVBdHRyaWJ1dGVzKHBhcmVudFdpbmRvdywgcGFyZW50RWxlbWVudCwgb3B0X3R5cGUsIG9wdF9jb250ZXh0KTtcbiAgY29uc3QgaWZyYW1lID0gcGFyZW50V2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXG4gIGlmICghY291bnRbYXR0cmlidXRlc1sndHlwZSddXSkge1xuICAgIGNvdW50W2F0dHJpYnV0ZXNbJ3R5cGUnXV0gPSAwO1xuICB9XG4gIGNvdW50W2F0dHJpYnV0ZXNbJ3R5cGUnXV0gKz0gMTtcblxuICBjb25zdCBiYXNlVXJsID0gZ2V0Qm9vdHN0cmFwQmFzZVVybChcbiAgICAgIHBhcmVudFdpbmRvdywgdW5kZWZpbmVkLCBvcHRfdHlwZSwgZGlzYWxsb3dDdXN0b20pO1xuICBjb25zdCBob3N0ID0gcGFyc2VVcmxEZXByZWNhdGVkKGJhc2VVcmwpLmhvc3RuYW1lO1xuICAvLyBUaGlzIG5hbWUgYXR0cmlidXRlIG1heSBiZSBvdmVyd3JpdHRlbiBpZiB0aGlzIGZyYW1lIGlzIGNob3NlbiB0b1xuICAvLyBiZSB0aGUgbWFzdGVyIGZyYW1lLiBUaGF0IGlzIG9rLCBhcyB3ZSB3aWxsIHJlYWQgdGhlIG5hbWUgb2ZmXG4gIC8vIGZvciBvdXIgdXNlcyBiZWZvcmUgdGhhdCB3b3VsZCBvY2N1ci5cbiAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW1wcHJvamVjdC9hbXBodG1sL2Jsb2IvbWFzdGVyLzNwL2ludGVncmF0aW9uLmpzXG4gIGNvbnN0IG5hbWUgPSBKU09OLnN0cmluZ2lmeShkaWN0KHtcbiAgICAnaG9zdCc6IGhvc3QsXG4gICAgJ3R5cGUnOiBhdHRyaWJ1dGVzWyd0eXBlJ10sXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtcHByb2plY3QvYW1waHRtbC9wdWxsLzI5NTVcbiAgICAnY291bnQnOiBjb3VudFthdHRyaWJ1dGVzWyd0eXBlJ11dLFxuICAgICdhdHRyaWJ1dGVzJzogYXR0cmlidXRlcyxcbiAgfSkpO1xuXG4gIGlmcmFtZS5zcmMgPSBiYXNlVXJsO1xuICBpZnJhbWUuYW1wTG9jYXRpb24gPSBwYXJzZVVybERlcHJlY2F0ZWQoYmFzZVVybCk7XG4gIGlmcmFtZS5uYW1lID0gbmFtZTtcbiAgLy8gQWRkIHRoZSBjaGVjayBiZWZvcmUgYXNzaWduaW5nIHRvIHByZXZlbnQgSUUgdGhyb3cgSW52YWxpZCBhcmd1bWVudCBlcnJvclxuICBpZiAoYXR0cmlidXRlc1snd2lkdGgnXSkge1xuICAgIGlmcmFtZS53aWR0aCA9IGF0dHJpYnV0ZXNbJ3dpZHRoJ107XG4gIH1cbiAgaWYgKGF0dHJpYnV0ZXNbJ2hlaWdodCddKSB7XG4gICAgaWZyYW1lLmhlaWdodCA9IGF0dHJpYnV0ZXNbJ2hlaWdodCddO1xuICB9XG4gIGlmIChhdHRyaWJ1dGVzWyd0aXRsZSddKSB7XG4gICAgaWZyYW1lLnRpdGxlID0gYXR0cmlidXRlc1sndGl0bGUnXTtcbiAgfVxuICBpZiAoYWxsb3dGdWxsc2NyZWVuKSB7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYWxsb3dmdWxsc2NyZWVuJywgJ3RydWUnKTtcbiAgfVxuICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzY3JvbGxpbmcnLCAnbm8nKTtcbiAgc2V0U3R5bGUoaWZyYW1lLCAnYm9yZGVyJywgJ25vbmUnKTtcbiAgLyoqIEB0aGlzIHshRWxlbWVudH0gKi9cbiAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIENocm9tZSBkb2VzIG5vdCByZWZsZWN0IHRoZSBpZnJhbWUgcmVhZHlzdGF0ZS5cbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY29tcGxldGUnO1xuICB9O1xuICBpZiAoaXNFeHBlcmltZW50T24ocGFyZW50V2luZG93LCAnbm8tc3luYy14aHItaW4tYWRzJykpIHtcbiAgICAvLyBCbG9jayBzeW5jaHJvbm91cyBYSFIgaW4gYWQuIFRoZXNlIGFyZSB2ZXJ5IHJhcmUsIGJ1dCBzdXBlciBiYWQgZm9yIFVYXG4gICAgLy8gYXMgdGhleSBibG9jayB0aGUgVUkgdGhyZWFkIGZvciB0aGUgYXJiaXRyYXJ5IGFtb3VudCBvZiB0aW1lIHVudGlsIHRoZVxuICAgIC8vIHJlcXVlc3QgY29tcGxldGVzLlxuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FsbG93JywgJ3N5bmMteGhyIFxcJ25vbmVcXCc7Jyk7XG4gIH1cbiAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnZGF0YS1hbXAtM3Atc2VudGluZWwnLFxuICAgICAgYXR0cmlidXRlc1snX2NvbnRleHQnXVsnc2VudGluZWwnXSk7XG4gIHJldHVybiBpZnJhbWU7XG59XG5cbi8qKlxuICogQ29waWVzIGRhdGEtIGF0dHJpYnV0ZXMgZnJvbSB0aGUgZWxlbWVudCBpbnRvIHRoZSBhdHRyaWJ1dGVzIG9iamVjdC5cbiAqIFJlbW92ZXMgdGhlIGRhdGEtIGZyb20gdGhlIG5hbWUgYW5kIGNhcGl0YWxpemVzIGFmdGVyIC0uIElmIHRoZXJlXG4gKiBpcyBhbiBhdHRyaWJ1dGUgY2FsbGVkIGpzb24sIHBhcnNlcyB0aGUgSlNPTiBhbmQgYWRkcyBpdCB0byB0aGVcbiAqIGF0dHJpYnV0ZXMuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFKc29uT2JqZWN0fSBhdHRyaWJ1dGVzIFRoZSBkZXN0aW5hdGlvbi5cbiAqIHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGREYXRhQW5kSnNvbkF0dHJpYnV0ZXNfKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgY29uc3Qge2RhdGFzZXR9ID0gZWxlbWVudDtcbiAgZm9yIChjb25zdCBuYW1lIGluIGRhdGFzZXQpIHtcbiAgICAvLyBkYXRhLXZhcnMtIGlzIHJlc2VydmVkIGZvciBhbXAtYW5hbHl0aWNzXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwvYmxvYi9tYXN0ZXIvZXh0ZW5zaW9ucy9hbXAtYW5hbHl0aWNzL2FuYWx5dGljcy12YXJzLm1kI3ZhcmlhYmxlcy1hcy1kYXRhLWF0dHJpYnV0ZVxuICAgIGlmICghc3RhcnRzV2l0aChuYW1lLCAndmFycycpKSB7XG4gICAgICBhdHRyaWJ1dGVzW25hbWVdID0gZGF0YXNldFtuYW1lXTtcbiAgICB9XG4gIH1cbiAgY29uc3QganNvbiA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdqc29uJyk7XG4gIGlmIChqc29uKSB7XG4gICAgY29uc3Qgb2JqID0gdHJ5UGFyc2VKc29uKGpzb24pO1xuICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgdXNlcigpLmNyZWF0ZUVycm9yKFxuICAgICAgICAgICdFcnJvciBwYXJzaW5nIEpTT04gaW4ganNvbiBhdHRyaWJ1dGUgaW4gZWxlbWVudCAlcycsXG4gICAgICAgICAgZWxlbWVudCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgYXR0cmlidXRlc1trZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHJlbG9hZHMgVVJMcyByZWxhdGVkIHRvIHRoZSBib290c3RyYXAgaWZyYW1lLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IS4vcHJlY29ubmVjdC5QcmVjb25uZWN0fSBwcmVjb25uZWN0XG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZGlzYWxsb3dDdXN0b20gd2hldGhlciAzcCB1cmwgc2hvdWxkIG5vdCB1c2UgbWV0YSB0YWcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkQm9vdHN0cmFwKFxuICB3aW4sIHByZWNvbm5lY3QsIG9wdF90eXBlLCBvcHRfZGlzYWxsb3dDdXN0b20pIHtcbiAgY29uc3QgdXJsID0gZ2V0Qm9vdHN0cmFwQmFzZVVybCh3aW4sIHVuZGVmaW5lZCwgb3B0X3R5cGUsIG9wdF9kaXNhbGxvd0N1c3RvbSk7XG4gIHByZWNvbm5lY3QucHJlbG9hZCh1cmwsICdkb2N1bWVudCcpO1xuXG4gIC8vIFdoaWxlIHRoZSBVUkwgbWF5IHBvaW50IHRvIGEgY3VzdG9tIGRvbWFpbiwgdGhpcyBVUkwgd2lsbCBhbHdheXMgYmVcbiAgLy8gZmV0Y2hlZCBieSBpdC5cbiAgY29uc3Qgc2NyaXB0VXJsID0gZ2V0TW9kZSgpLmxvY2FsRGV2XG4gICAgPyBnZXRBZHNMb2NhbGhvc3Qod2luKSArICcvZGlzdC4zcC9jdXJyZW50L2ludGVncmF0aW9uLmpzJ1xuICAgIDogYCR7dXJscy50aGlyZFBhcnR5fS8kaW50ZXJuYWxSdW50aW1lVmVyc2lvbiQvZi5qc2A7XG4gIHByZWNvbm5lY3QucHJlbG9hZChzY3JpcHRVcmwsICdzY3JpcHQnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIFVSTCBmb3IgM3AgYm9vdHN0cmFwIGlmcmFtZXMuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHBhcmVudFdpbmRvd1xuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3N0cmljdEZvclVuaXRUZXN0XG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZGlzYWxsb3dDdXN0b20gd2hldGhlciAzcCB1cmwgc2hvdWxkIG5vdCB1c2UgbWV0YSB0YWcuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJvb3RzdHJhcEJhc2VVcmwoXG4gIHBhcmVudFdpbmRvdywgb3B0X3N0cmljdEZvclVuaXRUZXN0LCBvcHRfdHlwZSwgb3B0X2Rpc2FsbG93Q3VzdG9tKSB7XG4gIC8vIFRoZSB2YWx1ZSBpcyBjYWNoZWQgaW4gYSBnbG9iYWwgdmFyaWFibGUgY2FsbGVkIGBib290c3RyYXBCYXNlVXJsYDtcbiAgY29uc3Qge2Jvb3RzdHJhcEJhc2VVcmx9ID0gcGFyZW50V2luZG93O1xuICBpZiAoYm9vdHN0cmFwQmFzZVVybCkge1xuICAgIHJldHVybiBib290c3RyYXBCYXNlVXJsO1xuICB9XG4gIHJldHVybiBwYXJlbnRXaW5kb3cuYm9vdHN0cmFwQmFzZVVybCA9IGdldEN1c3RvbUJvb3RzdHJhcEJhc2VVcmwoXG4gICAgICBwYXJlbnRXaW5kb3csIG9wdF9zdHJpY3RGb3JVbml0VGVzdCwgb3B0X3R5cGUsIG9wdF9kaXNhbGxvd0N1c3RvbSkgfHxcbiAgICAgIGdldERlZmF1bHRCb290c3RyYXBCYXNlVXJsKHBhcmVudFdpbmRvdyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdEJvb3RzdHJhcEJhc2VVcmxGb3JUZXN0aW5nKHVybCkge1xuICBvdmVycmlkZUJvb3RzdHJhcEJhc2VVcmwgPSB1cmw7XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Qm9vdHN0cmFwQmFzZVVybEZvclRlc3Rpbmcod2luKSB7XG4gIHdpbi5ib290c3RyYXBCYXNlVXJsID0gdW5kZWZpbmVkO1xuICB3aW4uZGVmYXVsdEJvb3RzdHJhcFN1YkRvbWFpbiA9IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGJhc2UgVVJMIGZvciAzcCBib290c3RyYXAgaWZyYW1lcy5cbiAqIEBwYXJhbSB7IVdpbmRvd30gcGFyZW50V2luZG93XG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zcmNGaWxlQmFzZW5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRCb290c3RyYXBCYXNlVXJsKHBhcmVudFdpbmRvdywgb3B0X3NyY0ZpbGVCYXNlbmFtZSkge1xuICBjb25zdCBzcmNGaWxlQmFzZW5hbWUgPSBvcHRfc3JjRmlsZUJhc2VuYW1lIHx8ICdmcmFtZSc7XG4gIGlmIChnZXRNb2RlKCkubG9jYWxEZXYgfHwgZ2V0TW9kZSgpLnRlc3QpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVCb290c3RyYXBCYXNlVXJsIHx8IGdldEFkc0xvY2FsaG9zdChwYXJlbnRXaW5kb3cpXG4gICAgICAgICAgKyAnL2Rpc3QuM3AvJ1xuICAgICAgICAgICsgKGdldE1vZGUoKS5taW5pZmllZCA/IGAkaW50ZXJuYWxSdW50aW1lVmVyc2lvbiQvJHtzcmNGaWxlQmFzZW5hbWV9YFxuICAgICAgICAgICAgOiBgY3VycmVudC8ke3NyY0ZpbGVCYXNlbmFtZX0ubWF4YClcbiAgICAgICAgICArICcuaHRtbCc7XG4gIH1cbiAgLy8gRW5zdXJlIHNhbWUgc3ViLWRvbWFpbiBpcyB1c2VkIGRlc3BpdGUgcG90ZW50aWFsbHkgZGlmZmVyZW50IGZpbGUuXG4gIHBhcmVudFdpbmRvdy5kZWZhdWx0Qm9vdHN0cmFwU3ViRG9tYWluID1cbiAgICAgIHBhcmVudFdpbmRvdy5kZWZhdWx0Qm9vdHN0cmFwU3ViRG9tYWluIHx8IGdldFN1YkRvbWFpbihwYXJlbnRXaW5kb3cpO1xuICByZXR1cm4gJ2h0dHBzOi8vJyArIHBhcmVudFdpbmRvdy5kZWZhdWx0Qm9vdHN0cmFwU3ViRG9tYWluICtcbiAgICAgIGAuJHt1cmxzLnRoaXJkUGFydHlGcmFtZUhvc3R9LyRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJC9gICtcbiAgICAgIGAke3NyY0ZpbGVCYXNlbmFtZX0uaHRtbGA7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0QWRzTG9jYWxob3N0KHdpbikge1xuICBsZXQgYWRzVXJsID0gdXJscy50aGlyZFBhcnR5OyAvLyBsb2NhbCBkZXYgd2l0aCBhIG5vbi1sb2NhbGhvc3Qgc2VydmVyXG4gIGlmIChhZHNVcmwuaW5kZXhPZignYW1wcHJvamVjdC5uZXQnKSA+IC0xKSB7XG4gICAgYWRzVXJsID0gJ2h0dHA6Ly9hZHMubG9jYWxob3N0JzsgLy8gbG9jYWwgZGV2IHdpdGggYSBsb2NhbGhvc3Qgc2VydmVyXG4gIH1cbiAgcmV0dXJuIGFkc1VybCArICc6JyArICh3aW4ubG9jYXRpb24ucG9ydCB8fCB3aW4ucGFyZW50LmxvY2F0aW9uLnBvcnQpO1xufVxuXG4vKipcbiAqIFN1YiBkb21haW4gb24gd2hpY2ggdGhlIDNwIGlmcmFtZSB3aWxsIGJlIGhvc3RlZC5cbiAqIEJlY2F1c2Ugd2Ugb25seSBjYWxjdWxhdGUgdGhlIFVSTCBvbmNlIHBlciBwYWdlLCB0aGlzIGZ1bmN0aW9uIGlzIG9ubHlcbiAqIGNhbGxlZCBvbmNlIGFuZCBoZW5jZSBhbGwgZnJhbWVzIG9uIGEgcGFnZSB1c2UgdGhlIHNhbWUgVVJMLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ViRG9tYWluKHdpbikge1xuICByZXR1cm4gJ2QtJyArIGdldFJhbmRvbSh3aW4pO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSBub24tbmVnYXRpdmUgaW50ZWdlci5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb20od2luKSB7XG4gIGxldCByYW5kO1xuICBpZiAod2luLmNyeXB0byAmJiB3aW4uY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIEJ5IGRlZmF1bHQgdXNlIDIgMzIgYml0IGludGVnZXJzLlxuICAgIGNvbnN0IHVpbnQzMmFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDIpO1xuICAgIHdpbi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVpbnQzMmFycmF5KTtcbiAgICByYW5kID0gU3RyaW5nKHVpbnQzMmFycmF5WzBdKSArIHVpbnQzMmFycmF5WzFdO1xuICB9IGVsc2Uge1xuICAgIC8vIEZhbGwgYmFjayB0byBNYXRoLnJhbmRvbS5cbiAgICByYW5kID0gU3RyaW5nKHdpbi5NYXRoLnJhbmRvbSgpKS5zdWJzdHIoMikgKyAnMCc7XG4gIH1cbiAgcmV0dXJuIHJhbmQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VzdG9tIGJhc2UgVVJMIGZvciAzcCBib290c3RyYXAgaWZyYW1lcyBpZiBpdCBleGlzdHMuXG4gKiBPdGhlcndpc2UgbnVsbC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gcGFyZW50V2luZG93XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfc3RyaWN0Rm9yVW5pdFRlc3RcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3R5cGVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kaXNhbGxvd0N1c3RvbSB3aGV0aGVyIDNwIHVybCBzaG91bGQgbm90IHVzZSBtZXRhIHRhZy5cbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldEN1c3RvbUJvb3RzdHJhcEJhc2VVcmwoXG4gIHBhcmVudFdpbmRvdywgb3B0X3N0cmljdEZvclVuaXRUZXN0LCBvcHRfdHlwZSwgb3B0X2Rpc2FsbG93Q3VzdG9tKSB7XG4gIGNvbnN0IG1ldGEgPSBwYXJlbnRXaW5kb3cuZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJhbXAtM3AtaWZyYW1lLXNyY1wiXScpO1xuICBpZiAoIW1ldGEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAob3B0X2Rpc2FsbG93Q3VzdG9tKSB7XG4gICAgdXNlcigpLmVycm9yKFRBRywgYDNwIGlmcmFtZSB1cmwgZGlzYWJsZWQgZm9yICR7b3B0X3R5cGUgfHwgJ3Vua25vd24nfWApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHVybCA9IGFzc2VydEh0dHBzVXJsKG1ldGEuZ2V0QXR0cmlidXRlKCdjb250ZW50JyksIG1ldGEpO1xuICB1c2VyKCkuYXNzZXJ0KHVybC5pbmRleE9mKCc/JykgPT0gLTEsXG4gICAgICAnM3AgaWZyYW1lIHVybCBtdXN0IG5vdCBpbmNsdWRlIHF1ZXJ5IHN0cmluZyAlcyBpbiBlbGVtZW50ICVzLicsXG4gICAgICB1cmwsIG1ldGEpO1xuICAvLyBUaGlzIGlzIG5vdCBhIHNlY3VyaXR5IHByaW1pdGl2ZSwgd2UganVzdCBkb24ndCB3YW50IHRoaXMgdG8gaGFwcGVuIGluXG4gIC8vIHByYWN0aWNlLiBQZW9wbGUgY291bGQgc3RpbGwgcmVkaXJlY3QgdG8gdGhlIHNhbWUgb3JpZ2luLCBidXQgdGhleSBjYW5ub3RcbiAgLy8gcmVkaXJlY3QgdG8gdGhlIHByb3h5IG9yaWdpbiB3aGljaCBpcyB0aGUgaW1wb3J0YW50IG9uZS5cbiAgY29uc3QgcGFyc2VkID0gcGFyc2VVcmxEZXByZWNhdGVkKHVybCk7XG4gIHVzZXIoKS5hc3NlcnQoKHBhcnNlZC5ob3N0bmFtZSA9PSAnbG9jYWxob3N0JyAmJiAhb3B0X3N0cmljdEZvclVuaXRUZXN0KSB8fFxuICAgICAgcGFyc2VkLm9yaWdpbiAhPSBwYXJzZVVybERlcHJlY2F0ZWQocGFyZW50V2luZG93LmxvY2F0aW9uLmhyZWYpLm9yaWdpbixcbiAgJzNwIGlmcmFtZSB1cmwgbXVzdCBub3QgYmUgb24gdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGRvY3VtZW50ICcgK1xuICAgICAgJyVzICglcykgaW4gZWxlbWVudCAlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwnICtcbiAgICAgICcvYmxvYi9tYXN0ZXIvc3BlYy9hbXAtaWZyYW1lLW9yaWdpbi1wb2xpY3kubWQgZm9yIGRldGFpbHMuJywgdXJsLFxuICBwYXJzZWQub3JpZ2luLCBtZXRhKTtcbiAgcmV0dXJuIHVybCArICc/JGludGVybmFsUnVudGltZVZlcnNpb24kJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9taXplZCBzZW50aW5lbCB2YWx1ZSBmb3IgM3AgaWZyYW1lcy5cbiAqIFRoZSBmb3JtYXQgaXMgXCIlZC0lZFwiIHdpdGggdGhlIGZpcnN0IHZhbHVlIGJlaW5nIHRoZSBkZXB0aCBvZiBjdXJyZW50XG4gKiB3aW5kb3cgaW4gdGhlIHdpbmRvdyBoaWVyYXJjaHkgYW5kIHRoZSBzZWNvbmQgYSByYW5kb20gaW50ZWdlci5cbiAqIEBwYXJhbSB7IVdpbmRvd30gcGFyZW50V2luZG93XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU2VudGluZWwocGFyZW50V2luZG93KSB7XG4gIGxldCB3aW5kb3dEZXB0aCA9IDA7XG4gIGZvciAobGV0IHdpbiA9IHBhcmVudFdpbmRvdzsgd2luICYmIHdpbiAhPSB3aW4ucGFyZW50OyB3aW4gPSB3aW4ucGFyZW50KSB7XG4gICAgd2luZG93RGVwdGgrKztcbiAgfVxuICByZXR1cm4gU3RyaW5nKHdpbmRvd0RlcHRoKSArICctJyArIGdldFJhbmRvbShwYXJlbnRXaW5kb3cpO1xufVxuXG4vKipcbiAqIFJlc2V0cyB0aGUgY291bnQgb2YgZWFjaCAzcCBmcmFtZSB0eXBlXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Q291bnRGb3JUZXN0aW5nKCkge1xuICBjb3VudCA9IHt9O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHthZENvbmZpZ30gZnJvbSAnLi4vYWRzL19jb25maWcnO1xuaW1wb3J0IHtkZXZ9IGZyb20gJy4uL3NyYy9sb2cnO1xuXG4vKipcbiAqIEBwYXJhbSB7QU1QLkJhc2VFbGVtZW50fSBhZEVsZW1lbnRcbiAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZ3x1bmRlZmluZWQ+fSBBIHByb21pc2UgZm9yIGEgQ0lEIG9yIHVuZGVmaW5lZCBpZlxuICogICAgIC0gdGhlIGFkIG5ldHdvcmsgZG9lcyBub3QgcmVxdWVzdCBvbmUgb3JcbiAqICAgICAtIGBhbXAtYW5hbHl0aWNzYCB3aGljaCBwcm92aWRlcyB0aGUgQ0lEIHNlcnZpY2Ugd2FzIG5vdCBpbnN0YWxsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZENpZChhZEVsZW1lbnQpIHtcbiAgY29uc3QgY29uZmlnID0gYWRDb25maWdbYWRFbGVtZW50LmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJyldO1xuICBpZiAoIWNvbmZpZyB8fCAhY29uZmlnLmNsaWVudElkU2NvcGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgcmV0dXJuIGdldE9yQ3JlYXRlQWRDaWQoYWRFbGVtZW50LmdldEFtcERvYygpLCBjb25maWcuY2xpZW50SWRTY29wZSxcbiAgICAgIGNvbmZpZy5jbGllbnRJZENvb2tpZU5hbWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGFtcERvY1xuICogQHBhcmFtIHtzdHJpbmd9IGNsaWVudElkU2NvcGVcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2NsaWVudElkQ29va2llTmFtZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdGltZW91dFxuICogQHJldHVybiB7IVByb21pc2U8c3RyaW5nfHVuZGVmaW5lZD59IEEgcHJvbWlzZSBmb3IgYSBDSUQgb3IgdW5kZWZpbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3JDcmVhdGVBZENpZChcbiAgYW1wRG9jLCBjbGllbnRJZFNjb3BlLCBvcHRfY2xpZW50SWRDb29raWVOYW1lLCBvcHRfdGltZW91dCkge1xuICBjb25zdCB0aW1lb3V0ID0gaXNOYU4ob3B0X3RpbWVvdXQpIHx8IG9wdF90aW1lb3V0ID09IG51bGwgP1xuICAgIDEwMDAgOiBvcHRfdGltZW91dDtcbiAgY29uc3QgY2lkUHJvbWlzZSA9IFNlcnZpY2VzLmNpZEZvckRvYyhhbXBEb2MpLnRoZW4oY2lkU2VydmljZSA9PiB7XG4gICAgaWYgKCFjaWRTZXJ2aWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBjaWRTZXJ2aWNlLmdldCh7XG4gICAgICBzY29wZTogZGV2KCkuYXNzZXJ0U3RyaW5nKGNsaWVudElkU2NvcGUpLFxuICAgICAgY3JlYXRlQ29va2llSWZOb3RQcmVzZW50OiB0cnVlLFxuICAgICAgY29va2llTmFtZTogb3B0X2NsaWVudElkQ29va2llTmFtZSxcbiAgICB9LCBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgLy8gTm90IGdldHRpbmcgYSBDSUQgaXMgbm90IGZhdGFsLlxuICAgICAgZGV2KCkuZXJyb3IoJ0FELUNJRCcsIGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH0pO1xuICAvLyBUaGUgQ0lEIHNob3VsZCBuZXZlciBiZSBjcnVjaWFsIGZvciBhbiBhZC4gSWYgaXQgZG9lcyBub3QgY29tZSB3aXRoaW5cbiAgLy8gMSBzZWNvbmQsIGFzc3VtZSBpdCB3aWxsIG5ldmVyIGFycml2ZS5cbiAgcmV0dXJuIFNlcnZpY2VzLnRpbWVyRm9yKGFtcERvYy53aW4pXG4gICAgICAudGltZW91dFByb21pc2UodGltZW91dCwgY2lkUHJvbWlzZSwgJ2NpZCB0aW1lb3V0JykuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAvLyBUaW1lb3V0IGlzIG5vdCBmYXRhbC5cbiAgICAgICAgZGV2KCkud2FybignQUQtQ0lEJywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtjb21wdXRlZFN0eWxlfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCB7ZGV2fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2dldFBhcmVudFdpbmRvd0ZyYW1lRWxlbWVudH0gZnJvbSAnLi9zZXJ2aWNlJztcblxuY29uc3QgQURfQ09OVEFJTkVSX1BST1AgPSAnX19BTVBfX0FEX0NPTlRBSU5FUic7XG5cbi8qKlxuICogVGFncyB0aGF0IGFyZSBhbGxvd2VkIHRvIGhhdmUgZml4ZWQgcG9zaXRpb25pbmdcbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+fVxuICovXG5jb25zdCBDT05UQUlORVJTID0ge1xuICAnQU1QLUZYLUZMWUlORy1DQVJQRVQnOiB0cnVlLFxuICAnQU1QLUxJR0hUQk9YJzogdHJ1ZSxcbiAgJ0FNUC1TVElDS1ktQUQnOiB0cnVlLFxuICAnQU1QLUxJR0hUQk9YLUdBTExFUlknOiB0cnVlLFxufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgaXMgZml4ZWQtcG9zaXRpb25lZC5cbiAqIE9LIHRvIHVzZSwgYmVjYXVzZSBpdCdzIG9ubHkgY2FsbGVkIGZyb20gb25MYXlvdXRNZWFzdXJlXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbFxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUG9zaXRpb25GaXhlZChlbCwgd2luKSB7XG4gIGNvbnN0IHtwb3NpdGlvbn0gPSBjb21wdXRlZFN0eWxlKHdpbiwgZWwpO1xuICAvLyBXZSBjb25zaWRlciBzdGlja3kgcG9zaXRpb25zIGFzIGZpeGVkLCBzaW5jZSB0aGV5IGNhbiBiZSBmaXhlZC5cbiAgcmV0dXJuIHBvc2l0aW9uID09ICdmaXhlZCcgfHwgcG9zaXRpb24gPT0gJ3N0aWNreSc7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGVsZW1lbnQgcG9zaXRpb24gaXMgYWxsb3dlZC4gSWYgdGhlIGVsZW1lbnRcbiAqIGJlbG9uZ3MgdG8gQ09OVEFJTkVSUywgaXQgaXMgYWxsb3dlZCB0byBiZSBwb3NpdGlvbiBmaXhlZC5cbiAqIElmIHRoZSBlbGVtZW50IGhhcyBhIHBvc2l0aW9uIGZpeGVkIGFuY2VzdG9yLCBpdCBpcyBub3QgYWxsb3dlZC5cbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW4gYSBsYXlvdXQgb24gdGhlIHBhZ2Ugd2FzIGp1c3QgZm9yY2VkXG4gKiBhbnl3YXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FkUG9zaXRpb25BbGxvd2VkKGVsZW1lbnQsIHdpbikge1xuICBsZXQgaGFzRml4ZWRBbmNlc3RvciA9IGZhbHNlO1xuICBsZXQgY29udGFpbmVycyA9IDA7XG4gIGxldCBlbCA9IGVsZW1lbnQ7XG4gIGRvIHtcbiAgICBpZiAoQ09OVEFJTkVSU1tlbC50YWdOYW1lXSkge1xuICAgICAgLy8gVGhlIGNvbnRhaW5lcnMgbXVzdCBub3QgdGhlbXNlbHZlcyBiZSBjb250YWluZWQgaW4gYSBmaXhlZC1wb3NpdGlvblxuICAgICAgLy8gZWxlbWVudC4gQ29udGludWUgdGhlIHNlYXJjaC5cbiAgICAgIGNvbnRhaW5lcnMrKztcbiAgICAgIGhhc0ZpeGVkQW5jZXN0b3IgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGlzUG9zaXRpb25GaXhlZChkZXYoKS5hc3NlcnRFbGVtZW50KGVsKSwgd2luKSkge1xuICAgICAgLy8gQmVjYXVzZSBjZXJ0YWluIGJsZXNzZWQgZWxlbWVudHMgbWF5IGNvbnRhaW4gYSBwb3NpdGlvbiBmaXhlZFxuICAgICAgLy8gY29udGFpbmVyICh3aGljaCBjb250YWluIGFuIGFkKSwgd2UgY29udGludWUgdG8gc2VhcmNoIHRoZVxuICAgICAgLy8gYW5jZXN0cnkgdHJlZS5cbiAgICAgIGhhc0ZpeGVkQW5jZXN0b3IgPSB0cnVlO1xuICAgIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH0gd2hpbGUgKGVsICYmIGVsLnRhZ05hbWUgIT0gJ0JPRFknKTtcbiAgcmV0dXJuICFoYXNGaXhlZEFuY2VzdG9yICYmIGNvbnRhaW5lcnMgPD0gMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBibGVzc2VkIGNvbnRhaW5lciBlbGVtZW50IHRhZ05hbWUgaWYgdGhlIGFkIGlzIGNvbnRhaW5lZCBieSBvbmUuXG4gKiBUaGlzIGlzIGNhbGxlZCBkdXJpbmcgbGF5b3V0IG1lYXN1cmUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRDb250YWluZXIoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudFtBRF9DT05UQUlORVJfUFJPUF0gPT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICB3aGlsZSAoZWwgJiYgZWwudGFnTmFtZSAhPSAnQk9EWScpIHtcbiAgICAgIGlmIChDT05UQUlORVJTW2VsLnRhZ05hbWVdKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50W0FEX0NPTlRBSU5FUl9QUk9QXSA9IGVsLnRhZ05hbWU7XG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIGVsZW1lbnRbQURfQ09OVEFJTkVSX1BST1BdID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWxlbWVudFtBRF9DT05UQUlORVJfUFJPUF07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgcmVzb3VyY2UgSUQgb2YgdGhlIGFtcC1hZCBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHBhc3NlZCBub2RlLlxuICogSWYgdGhlcmUgaXMgbm8gY29udGFpbmluZyBhbXAtYWQgdGFnLCB0aGVuIG51bGwgd2lsbCBiZSByZXR1cm5lZC5cbiAqIFRPRE8oam9ua2VsbGVyKTogSW52ZXN0aWdhdGUgd2hldGhlciBub24tQTRBIHVzZSBjYXNlIGlzIG5lZWRlZC4gSXNzdWUgMTE0MzZcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7IVdpbmRvd30gdG9wV2luXG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW1wQWRSZXNvdXJjZUlkKG5vZGUsIHRvcFdpbikge1xuICB0cnkge1xuICAgIGNvbnN0IGZyYW1lUGFyZW50ID0gZ2V0UGFyZW50V2luZG93RnJhbWVFbGVtZW50KG5vZGUsIHRvcFdpbikucGFyZW50RWxlbWVudDtcbiAgICBpZiAoZnJhbWVQYXJlbnQubm9kZU5hbWUgPT0gJ0FNUC1BRCcpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoZnJhbWVQYXJlbnQuZ2V0UmVzb3VyY2VJZCgpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICAvLyBXaGV0aGVyIHdlIGVudGVyZWQgdGhlIGNhdGNoIGFib3ZlIChlLmcuIGR1ZSB0byBhdHRlbXB0IHRvIGFjY2Vzc1xuICAvLyBhY3Jvc3MgeGRvbWFpbiBib3VuZGFyeSksIG9yIGZhaWxlZCB0byBlbnRlciB0aGUgaWYgZnVydGhlciBhYm92ZSwgdGhlXG4gIC8vIG5vZGUgaXMgbm90IHdpdGhpbiBhIGZyaWVuZGx5IGFtcC1hZCB0YWcuIFNvLCB0aGVyZSBpcyBubyBhbXAtYWRcbiAgLy8gcmVzb3VyY2UgSUQuIEhvdyB0byBoYW5kbGUgdGhhdCBpcyB1cCB0byB0aGUgY2FsbGVyLCBidXQgc2VlIFRPRE8gYWJvdmUuXG4gIHJldHVybiBudWxsO1xufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDb21tb24gQU1QIGV2ZW50cy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBBbXBFdmVudHMgPSB7XG4gIEJVSUxUOiAnYW1wOmJ1aWx0JyxcbiAgRE9NX1VQREFURTogJ2FtcDpkb20tdXBkYXRlJyxcbiAgVklTSUJJTElUWV9DSEFOR0U6ICdhbXA6dmlzaWJpbGl0eWNoYW5nZScsIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwvYmxvYi9tYXN0ZXIvYWRzL1JFQURNRS5tZCNwYWdlLXZpc2liaWxpdHlcbiAgLy8gVGhlIGZvbGxvd2luZyBjb2RlcyBhcmUgb25seSB1c2VkIGZvciB0ZXN0aW5nLlxuICAvLyBUT0RPKGNob3VteCk6IE1vdmUgdGhlc2UgdG8gYSBzZXBhcmF0ZSBlbnVtIHNvIHRoZXkgY2FuIGJlIERDRSdkLlxuICBBVFRBQ0hFRDogJ2FtcDphdHRhY2hlZCcsXG4gIFNUVUJCRUQ6ICdhbXA6c3R1YmJlZCcsXG4gIExPQURfU1RBUlQ6ICdhbXA6bG9hZDpzdGFydCcsXG4gIExPQURfRU5EOiAnYW1wOmxvYWQ6ZW5kJyxcbiAgRVJST1I6ICdhbXA6ZXJyb3InLFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuL3NlcnZpY2VzJztcblxuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIHRyaWdnZXIgYW5hbHl0aWNzIGV2ZW50IGlmIGFtcC1hbmFseXRpY3MgaXMgYXZhaWxhYmxlLlxuICogVE9ETzogRG8gbm90IGV4cG9zZSB0aGlzIGZ1bmN0aW9uXG4gKiBAcGFyYW0geyFFbGVtZW50fSB0YXJnZXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz49fSBvcHRfdmFycyBBIG1hcCBvZiB2YXJzIGFuZCB0aGVpciB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyQW5hbHl0aWNzRXZlbnQodGFyZ2V0LCBldmVudFR5cGUsIG9wdF92YXJzKSB7XG4gIFNlcnZpY2VzLmFuYWx5dGljc0ZvckRvY09yTnVsbCh0YXJnZXQpLnRoZW4oYW5hbHl0aWNzID0+IHtcbiAgICBpZiAoIWFuYWx5dGljcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmFseXRpY3MudHJpZ2dlckV2ZW50Rm9yVGFyZ2V0KHRhcmdldCwgZXZlbnRUeXBlLCBvcHRfdmFycyk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBDb21tb25seSB1c2VkIHNpZ25hbHMgYWNyb3NzIGRpZmZlcmVudCBlbGVtZW50cyBhbmQgZG9jdW1lbnRzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IENvbW1vblNpZ25hbHMgPSB7XG5cbiAgLyoqXG4gICAqIFRoZSBlbGVtZW50IGhhcyBiZWVuIGJ1aWx0LlxuICAgKi9cbiAgQlVJTFQ6ICdidWlsdCcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbml0aWFsIGNvbnRlbnRzIG9mIGFuIGVsZW1lbnQvZG9jdW1lbnQvZW1iZWQgaGF2ZSBiZWVuIGxvYWRlZC5cbiAgICovXG4gIElOSV9MT0FEOiAnaW5pLWxvYWQnLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCBoYXMgYmVlbiBsb2FkZWQuXG4gICAqL1xuICBMT0FEX0VORDogJ2xvYWQtZW5kJyxcblxuICAvKipcbiAgICogVGhlIGVsZW1lbnQgaGFzIHN0YXJ0ZWQgbG9hZGluZy5cbiAgICovXG4gIExPQURfU1RBUlQ6ICdsb2FkLXN0YXJ0JyxcblxuICAvKipcbiAgICogUmVuZGVyaW5nIGhhcyBiZWVuIGNvbmZpcm1lZCB0byBoYXZlIGJlZW4gc3RhcnRlZC5cbiAgICovXG4gIFJFTkRFUl9TVEFSVDogJ3JlbmRlci1zdGFydCcsXG5cbiAgLyoqXG4gICAqIFRoZSBlbGVtZW50IGhhcyBiZWVuIHVubGFpZCBvdXQuXG4gICAqL1xuICBVTkxPQUQ6ICd1bmxvYWQnLFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEFsbG93cyBmb3IgcnVudGltZSBjb25maWd1cmF0aW9uLiBJbnRlcm5hbGx5LCB0aGUgcnVudGltZSBzaG91bGRcbiAqIHVzZSB0aGUgc3JjL2NvbmZpZy5qcyBtb2R1bGUgZm9yIHZhcmlvdXMgY29uc3RhbnRzLiBXZSBjYW4gdXNlIHRoZVxuICogQU1QX0NPTkZJRyBnbG9iYWwgdG8gdHJhbnNsYXRlIHVzZXItZGVmaW5lZCBjb25maWd1cmF0aW9ucyB0byB0aGlzXG4gKiBtb2R1bGUuXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IGVudiA9IHNlbGYuQU1QX0NPTkZJRyB8fCB7fTtcblxuY29uc3QgdGhpcmRQYXJ0eUZyYW1lUmVnZXggPSB0eXBlb2YgZW52Wyd0aGlyZFBhcnR5RnJhbWVSZWdleCddID09ICdzdHJpbmcnID9cbiAgbmV3IFJlZ0V4cChlbnZbJ3RoaXJkUGFydHlGcmFtZVJlZ2V4J10pIDogZW52Wyd0aGlyZFBhcnR5RnJhbWVSZWdleCddO1xuXG5jb25zdCBjZG5Qcm94eVJlZ2V4ID0gdHlwZW9mIGVudlsnY2RuUHJveHlSZWdleCddID09ICdzdHJpbmcnID9cbiAgbmV3IFJlZ0V4cChlbnZbJ2NkblByb3h5UmVnZXgnXSkgOiBlbnZbJ2NkblByb3h5UmVnZXgnXTtcblxuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nfGJvb2xlYW58UmVnRXhwPn0gKi9cbmV4cG9ydCBjb25zdCB1cmxzID0ge1xuICB0aGlyZFBhcnR5OiBlbnZbJ3RoaXJkUGFydHlVcmwnXSB8fCAnaHR0cHM6Ly8zcC5hbXBwcm9qZWN0Lm5ldCcsXG4gIHRoaXJkUGFydHlGcmFtZUhvc3Q6IGVudlsndGhpcmRQYXJ0eUZyYW1lSG9zdCddIHx8ICdhbXBwcm9qZWN0Lm5ldCcsXG4gIHRoaXJkUGFydHlGcmFtZVJlZ2V4OiB0aGlyZFBhcnR5RnJhbWVSZWdleCB8fCAvXmQtXFxkK1xcLmFtcHByb2plY3RcXC5uZXQkLyxcbiAgY2RuOiBlbnZbJ2NkblVybCddIHx8ICdodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZycsXG4gIC8qIE5vdGUgdGhhdCBjZG5Qcm94eVJlZ2V4IGlzIG9ubHkgZXZlciBjaGVja2VkIGFnYWluc3Qgb3JpZ2luc1xuICAgKiAocHJvdG86Ly9ob3N0Wzpwb3J0XSkgc28gZG9lcyBub3QgbmVlZCB0byBjb25zaWRlciBwYXRoXG4gICAqL1xuICBjZG5Qcm94eVJlZ2V4OiBjZG5Qcm94eVJlZ2V4IHx8XG4gICAgICAvXmh0dHBzOlxcL1xcLyhbYS16QS1aMC05Xy1dK1xcLik/Y2RuXFwuYW1wcHJvamVjdFxcLm9yZyQvLFxuICBsb2NhbGhvc3RSZWdleDogL15odHRwcz86XFwvXFwvbG9jYWxob3N0KDpcXGQrKT8kLyxcbiAgZXJyb3JSZXBvcnRpbmc6IGVudlsnZXJyb3JSZXBvcnRpbmdVcmwnXSB8fFxuICAgICAgJ2h0dHBzOi8vYW1wLWVycm9yLXJlcG9ydGluZy5hcHBzcG90LmNvbS9yJyxcbiAgbG9jYWxEZXY6IGVudlsnbG9jYWxEZXYnXSB8fCBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIHVybHMsXG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIFRoaXMgZmlsZSB3aWxsIGJlIGltcG9ydGVkIGJ5IDNQIHNjcmlwdHMuXG5cbi8qKlxuICogUG9zc2libGUgY29uc2VudCBwb2xpY3kgc3RhdGUgdG8gcHJvY2VlZCB3aXRoLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IENPTlNFTlRfUE9MSUNZX1NUQVRFID0ge1xuICAvLyBFbnVtIHZhbHVlIGhhcyBleHRlcm5hbCBkZXBlbmRlbmN5LiBQbGVhc2UgZG8gbm90IGNoYW5nZSBleGlzdGluZyB2YWx1ZS5cbiAgLy8gSWYgbmV3IHZhbHVlcyBhcmUgYWRkZWQsIHBsZWFzZSBub3RpZnkgdGhlIEFNUCBmb3IgQWRzIHRlYW0gdG8gYXNzdXJlXG4gIC8vIGNvcnJlY3QgUmVhbCBUaW1lIENvbmZpZyBiZWhhdmlvciBpcyBtYWludGFpbmVkIGZvciBGYXN0IEZldGNoLlxuICBTVUZGSUNJRU5UOiAxLFxuICBJTlNVRkZJQ0lFTlQ6IDIsXG4gIFVOS05PV05fTk9UX1JFUVVJUkVEOiAzLFxuICBVTktOT1dOOiA0LFxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTggVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBDT05TRU5UX1BPTElDWV9TVEFURSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xufSBmcm9tICcuL2NvbnNlbnQtc3RhdGUnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlIHdoZW4gYWxsIGNvbnNlbnQgc3RhdGUgdGhlIHBvbGljeSB3YWl0XG4gKiBmb3IgcmVzb2x2ZS4gT3IgaWYgY29uc2VudCBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUuXG4gKiBAcGFyYW0geyEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBhbXBkb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb2xpY3lJZFxuICogQHJldHVybiB7IVByb21pc2U8P0NPTlNFTlRfUE9MSUNZX1NUQVRFPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnNlbnRQb2xpY3lTdGF0ZShhbXBkb2MsIHBvbGljeUlkKSB7XG4gIHJldHVybiBTZXJ2aWNlcy5jb25zZW50UG9saWN5U2VydmljZUZvckRvY09yTnVsbChhbXBkb2MpXG4gICAgICAudGhlbihjb25zZW50UG9saWN5ID0+IHtcbiAgICAgICAgaWYgKCFjb25zZW50UG9saWN5KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnNlbnRQb2xpY3kud2hlblBvbGljeVJlc29sdmVkKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwb2xpY3lJZCkpO1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHNoYXJlZERhdGEgcmV0cmlldmVkIGZyb20gY29uc2VudFxuICogcmVtb3RlIGVuZHBvaW50LlxuICogQHBhcmFtIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9saWN5SWRcbiAqIEByZXR1cm4geyFQcm9taXNlPD9PYmplY3Q+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uc2VudFBvbGljeVNoYXJlZERhdGEoYW1wZG9jLCBwb2xpY3lJZCkge1xuICByZXR1cm4gU2VydmljZXMuY29uc2VudFBvbGljeVNlcnZpY2VGb3JEb2NPck51bGwoYW1wZG9jKVxuICAgICAgLnRoZW4oY29uc2VudFBvbGljeSA9PiB7XG4gICAgICAgIGlmICghY29uc2VudFBvbGljeSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25zZW50UG9saWN5LmdldE1lcmdlZFNoYXJlZERhdGEoXG4gICAgICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi8gKHBvbGljeUlkKSk7XG4gICAgICB9KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2VuZHNXaXRofSBmcm9tICcuL3N0cmluZyc7XG5pbXBvcnQge1xuICBpc1Byb3h5T3JpZ2luLFxuICBwYXJzZVVybERlcHJlY2F0ZWQsXG4gIHRyeURlY29kZVVyaUNvbXBvbmVudCxcbn0gZnJvbSAnLi91cmwnO1xuaW1wb3J0IHt1cmxzfSBmcm9tICcuL2NvbmZpZyc7XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgY29va2llLiBUaGUgY29va2llIGFjY2VzcyBpcyByZXN0cmljdGVkIGFuZCBtdXN0XG4gKiBnbyB0aHJvdWdoIHRoZSBwcml2YWN5IHJldmlldy4gQmVmb3JlIHVzaW5nIHRoaXMgbWV0aG9kIHBsZWFzZSBmaWxlIGFcbiAqIEdpdEh1YiBpc3N1ZSB3aXRoIFwiUHJpdmFjeSBSZXZpZXdcIiBsYWJlbC5cbiAqXG4gKiBSZXR1cm5zIHRoZSBjb29raWUncyB2YWx1ZSBvciBgbnVsbGAuXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llKHdpbiwgbmFtZSkge1xuICBjb25zdCBjb29raWVTdHJpbmcgPSB0cnlHZXREb2N1bWVudENvb2tpZU5vSW5saW5lKHdpbik7XG4gIGlmICghY29va2llU3RyaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY29va2llcyA9IGNvb2tpZVN0cmluZy5zcGxpdCgnOycpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldLnRyaW0oKTtcbiAgICBjb25zdCBlcSA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgaWYgKGVxID09IC0xKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHRyeURlY29kZVVyaUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKDAsIGVxKS50cmltKCkpID09IG5hbWUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gY29va2llLnN1YnN0cmluZyhlcSArIDEpLnRyaW0oKTtcbiAgICAgIHJldHVybiB0cnlEZWNvZGVVcmlDb21wb25lbnQodmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSBpbmxpbmVkIHRvIHByZXZlbnQgVHJ5Q2F0Y2ggZGVvcHRpbWl6YXRpb24uXG4gKiBOb0lubGluZSBrZXl3b3JkIGF0IHRoZSBlbmQgb2YgZnVuY3Rpb24gbmFtZSBhbHNvIHByZXZlbnRzIENsb3N1cmUgY29tcGlsZXJcbiAqIGZyb20gaW5saW5pbmcgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdHJ5R2V0RG9jdW1lbnRDb29raWVOb0lubGluZSh3aW4pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luLmRvY3VtZW50LmNvb2tpZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEFjdCBhcyBpZiBubyBjb29raWUgaXMgYXZhaWxhYmxlLiBFeGNlcHRpb25zIGNhbiBiZSB0aHJvd24gd2hlblxuICAgIC8vIEFNUCBkb2NzIGFyZSBvcGVuZWQgb24gb3JpZ2lucyB0aGF0IGRvIG5vdCBhbGxvdyBzZXR0aW5nXG4gICAgLy8gY29va2llcyBzdWNoIGFzIG51bGwgb3JpZ2lucy5cbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgY29va2llLiBUaGUgY29va2llIGFjY2VzcyBpcyByZXN0cmljdGVkIGFuZCBtdXN0XG4gKiBnbyB0aHJvdWdoIHRoZSBwcml2YWN5IHJldmlldy4gQmVmb3JlIHVzaW5nIHRoaXMgbWV0aG9kIHBsZWFzZSBmaWxlIGFcbiAqIEdpdEh1YiBpc3N1ZSB3aXRoIFwiUHJpdmFjeSBSZXZpZXdcIiBsYWJlbC5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHt0aW1lfSBleHBpcmF0aW9uVGltZVxuICogQHBhcmFtIHt7XG4gKiAgIGhpZ2hlc3RBdmFpbGFibGVEb21haW46KGJvb2xlYW58dW5kZWZpbmVkKSxcbiAqICAgZG9tYWluOihzdHJpbmd8dW5kZWZpbmVkKVxuICogfT19IG9wdF9vcHRpb25zXG4gKiAgICAgLSBoaWdoZXN0QXZhaWxhYmxlRG9tYWluOiBJZiB0cnVlLCBzZXQgdGhlIGNvb2tpZSBhdCB0aGUgd2lkZXN0IGRvbWFpblxuICogICAgICAgc2NvcGUgYWxsb3dlZCBieSB0aGUgYnJvd3Nlci4gRS5nLiBvbiBleGFtcGxlLmNvbSBpZiB3ZSBhcmUgY3VycmVudGx5XG4gKiAgICAgICBvbiB3d3cuZXhhbXBsZS5jb20uXG4gKiAgICAgLSBkb21haW46IEV4cGxpY2l0IGRvbWFpbiB0byBzZXQuXG4gKiAgICAgLSBhbGxvd09uUHJveHlPcmlnaW46IEFsbG93IHNldHRpbmcgYSBjb29raWUgb24gdGhlIEFNUCBDYWNoZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvb2tpZSh3aW4sIG5hbWUsIHZhbHVlLCBleHBpcmF0aW9uVGltZSwgb3B0X29wdGlvbnMpIHtcbiAgY2hlY2tPcmlnaW5Gb3JTZXR0aW5nQ29va2llKHdpbiwgb3B0X29wdGlvbnMsIG5hbWUpO1xuICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMuaGlnaGVzdEF2YWlsYWJsZURvbWFpbikge1xuICAgIGNvbnN0IHBhcnRzID0gd2luLmxvY2F0aW9uLmhvc3RuYW1lLnNwbGl0KCcuJyk7XG4gICAgbGV0IGRvbWFpbiA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAobGV0IGkgPSBwYXJ0cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkge1xuICAgICAgZG9tYWluID0gcGFydHNbaV0gKyAnLicgKyBkb21haW47XG4gICAgICB0cnlTZXRDb29raWUod2luLCBuYW1lLCB2YWx1ZSwgZXhwaXJhdGlvblRpbWUsIGRvbWFpbik7XG4gICAgICBpZiAoZ2V0Q29va2llKHdpbiwgbmFtZSkgPT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgZG9tYWluID0gdW5kZWZpbmVkO1xuICBpZiAob3B0X29wdGlvbnMgJiYgb3B0X29wdGlvbnMuZG9tYWluKSB7XG4gICAgZG9tYWluID0gb3B0X29wdGlvbnMuZG9tYWluO1xuICB9XG4gIHRyeVNldENvb2tpZSh3aW4sIG5hbWUsIHZhbHVlLCBleHBpcmF0aW9uVGltZSwgZG9tYWluKTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIHNldCBhIGNvb2tpZSB3aXRoIHRoZSBnaXZlbiBwYXJhbXMuXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7dGltZX0gZXhwaXJhdGlvblRpbWVcbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gZG9tYWluXG4gKi9cbmZ1bmN0aW9uIHRyeVNldENvb2tpZSh3aW4sIG5hbWUsIHZhbHVlLCBleHBpcmF0aW9uVGltZSwgZG9tYWluKSB7XG4gIC8vIFdlIGRvIG5vdCBhbGxvdyBzZXR0aW5nIGNvb2tpZXMgb24gdGhlIGRvbWFpbiB0aGF0IGNvbnRhaW5zIGJvdGhcbiAgLy8gdGhlIGNkbi4gYW5kIHd3dy4gaG9zdHMuXG4gIGlmIChkb21haW4gPT0gJ2FtcHByb2plY3Qub3JnJykge1xuICAgIC8vIEFjdGl2ZWx5IGRlbGV0ZSB0aGVtLlxuICAgIHZhbHVlID0gJ2RlbGV0ZSc7XG4gICAgZXhwaXJhdGlvblRpbWUgPSAwO1xuICB9XG4gIGNvbnN0IGNvb2tpZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArICc9JyArXG4gICAgICBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpICtcbiAgICAgICc7IHBhdGg9LycgK1xuICAgICAgKGRvbWFpbiA/ICc7IGRvbWFpbj0nICsgZG9tYWluIDogJycpICtcbiAgICAgICc7IGV4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyYXRpb25UaW1lKS50b1VUQ1N0cmluZygpO1xuICB0cnkge1xuICAgIHdpbi5kb2N1bWVudC5jb29raWUgPSBjb29raWU7XG4gIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgIC8vIERvIG5vdCB0aHJvdyBpZiBzZXR0aW5nIHRoZSBjb29raWUgZmFpbGVkIEV4Y2VwdGlvbnMgY2FuIGJlIHRocm93blxuICAgIC8vIHdoZW4gQU1QIGRvY3MgYXJlIG9wZW5lZCBvbiBvcmlnaW5zIHRoYXQgZG8gbm90IGFsbG93IHNldHRpbmdcbiAgICAvLyBjb29raWVzIHN1Y2ggYXMgbnVsbCBvcmlnaW5zLlxuICB9XG59XG5cbi8qKlxuICogVGhyb3dzIGlmIGEgZ2l2ZW4gY29va2llIHNob3VsZCBub3QgYmUgc2V0IG9uIHRoZSBnaXZlbiBvcmlnaW4uXG4gKiBUaGlzIGlzIGEgZGVmZW5zZS1pbi1kZXB0aC4gQ2FsbGVycyBzaG91bGQgbmV2ZXIgcnVuIGludG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshT2JqZWN0fHVuZGVmaW5lZH0gb3B0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRm9yIHRoZSBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBjaGVja09yaWdpbkZvclNldHRpbmdDb29raWUod2luLCBvcHRpb25zLCBuYW1lKSB7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dPblByb3h5T3JpZ2luKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpc1Byb3h5T3JpZ2luKHdpbi5sb2NhdGlvbi5ocmVmKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIG5ldmVyIGF0dGVtcHQgdG8gc2V0IGNvb2tpZSBvbiBwcm94eSBvcmlnaW46ICdcbiAgICAgICAgKyBuYW1lKTtcbiAgfVxuXG4gIGNvbnN0IGN1cnJlbnQgPSBwYXJzZVVybERlcHJlY2F0ZWQod2luLmxvY2F0aW9uLmhyZWYpLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IHByb3h5ID0gcGFyc2VVcmxEZXByZWNhdGVkKHVybHMuY2RuKS5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoY3VycmVudCA9PSBwcm94eSB8fCBlbmRzV2l0aChjdXJyZW50LCAnLicgKyBwcm94eSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBuZXZlciBhdHRlbXB0IHRvIHNldCBjb29raWUgb24gcHJveHkgb3JpZ2luLidcbiAgICAgICAgKyAnIChpbiBkZXB0aCBjaGVjayk6ICcgKyBuYW1lKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBkb2N1bWVudCBpcyByZWFkeS5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RvY3VtZW50UmVhZHkoZG9jKSB7XG4gIHJldHVybiBkb2MucmVhZHlTdGF0ZSAhPSAnbG9hZGluZycgJiYgZG9jLnJlYWR5U3RhdGUgIT0gJ3VuaW5pdGlhbGl6ZWQnO1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGRvY3VtZW50IGhhcyBsb2FkZWQgYWxsIHRoZSBjc3MgYW5kIHN1Yi1yZXNvdXJjZXMuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0RvY3VtZW50Q29tcGxldGUoZG9jKSB7XG4gIHJldHVybiBkb2MucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnO1xufVxuXG4vKipcbiAqIENhbGxzIHRoZSBjYWxsYmFjayB3aGVuIGRvY3VtZW50IGlzIHJlYWR5LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtmdW5jdGlvbighRG9jdW1lbnQpfSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25Eb2N1bWVudFJlYWR5KGRvYywgY2FsbGJhY2spIHtcbiAgb25Eb2N1bWVudFN0YXRlKGRvYywgaXNEb2N1bWVudFJlYWR5LCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gZG9jdW1lbnQncyBzdGF0ZSBzYXRpc2ZpZXMgdGhlIHN0YXRlRm4uXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFEb2N1bWVudCk6Ym9vbGVhbn0gc3RhdGVGblxuICogQHBhcmFtIHtmdW5jdGlvbighRG9jdW1lbnQpfSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBvbkRvY3VtZW50U3RhdGUoZG9jLCBzdGF0ZUZuLCBjYWxsYmFjaykge1xuICBsZXQgcmVhZHkgPSBzdGF0ZUZuKGRvYyk7XG4gIGlmIChyZWFkeSkge1xuICAgIGNhbGxiYWNrKGRvYyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVhZHlMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgIGlmIChzdGF0ZUZuKGRvYykpIHtcbiAgICAgICAgaWYgKCFyZWFkeSkge1xuICAgICAgICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICBjYWxsYmFjayhkb2MpO1xuICAgICAgICB9XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgcmVhZHlMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHJlYWR5TGlzdGVuZXIpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGRvY3VtZW50IGlzIHJlYWR5LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7IVByb21pc2U8IURvY3VtZW50Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5Eb2N1bWVudFJlYWR5KGRvYykge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgb25Eb2N1bWVudFJlYWR5KGRvYywgcmVzb2x2ZSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiBkb2N1bWVudCBpcyBjb21wbGV0ZS5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAqIEByZXR1cm4geyFQcm9taXNlPCFEb2N1bWVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGVuRG9jdW1lbnRDb21wbGV0ZShkb2MpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIG9uRG9jdW1lbnRTdGF0ZShkb2MsIGlzRG9jdW1lbnRDb21wbGV0ZSwgcmVzb2x2ZSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7RGVmZXJyZWR9IGZyb20gJy4vdXRpbHMvcHJvbWlzZSc7XG5pbXBvcnQge2Nzc0VzY2FwZX0gZnJvbSAnLi4vdGhpcmRfcGFydHkvY3NzLWVzY2FwZS9jc3MtZXNjYXBlJztcbmltcG9ydCB7ZGV2fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7c3RhcnRzV2l0aH0gZnJvbSAnLi9zdHJpbmcnO1xuaW1wb3J0IHt0b1dpbn0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IEhUTUxfRVNDQVBFX0NIQVJTID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiN4Mjc7JyxcbiAgJ2AnOiAnJiN4NjA7Jyxcbn07XG5jb25zdCBIVE1MX0VTQ0FQRV9SRUdFWCA9IC8oJnw8fD58XCJ8J3xgKS9nO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5leHBvcnQgY29uc3QgVVBHUkFERV9UT19DVVNUT01FTEVNRU5UX1BST01JU0UgPVxuICAgICdfX0FNUF9VUEdfUFJNJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuZXhwb3J0IGNvbnN0IFVQR1JBREVfVE9fQ1VTVE9NRUxFTUVOVF9SRVNPTFZFUiA9XG4gICAgJ19fQU1QX1VQR19SRVMnO1xuXG4vKipcbiAqIFdhaXRzIHVudGlsIHRoZSBjaGlsZCBlbGVtZW50IGlzIGNvbnN0cnVjdGVkLiBPbmNlIHRoZSBjaGlsZCBpcyBmb3VuZCwgdGhlXG4gKiBjYWxsYmFjayBpcyBleGVjdXRlZC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtmdW5jdGlvbighRWxlbWVudCk6Ym9vbGVhbn0gY2hlY2tGdW5jXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yQ2hpbGQocGFyZW50LCBjaGVja0Z1bmMsIGNhbGxiYWNrKSB7XG4gIGlmIChjaGVja0Z1bmMocGFyZW50KSkge1xuICAgIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKiBAY29uc3QgeyFXaW5kb3d9ICovXG4gIGNvbnN0IHdpbiA9IHRvV2luKHBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgaWYgKHdpbi5NdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgLyoqIEBjb25zdCB7TXV0YXRpb25PYnNlcnZlcn0gKi9cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyB3aW4uTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICBpZiAoY2hlY2tGdW5jKHBhcmVudCkpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUocGFyZW50LCB7Y2hpbGRMaXN0OiB0cnVlfSk7XG4gIH0gZWxzZSB7XG4gICAgLyoqIEBjb25zdCB7bnVtYmVyfSAqL1xuICAgIGNvbnN0IGludGVydmFsID0gd2luLnNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChjaGVja0Z1bmMocGFyZW50KSkge1xuICAgICAgICB3aW4uY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSwgLyogbWlsbGlzZWNvbmRzICovIDUpO1xuICB9XG59XG5cbi8qKlxuICogV2FpdHMgdW50aWwgdGhlIGNoaWxkIGVsZW1lbnQgaXMgY29uc3RydWN0ZWQuIE9uY2UgdGhlIGNoaWxkIGlzIGZvdW5kLCB0aGVcbiAqIHByb21pc2UgaXMgcmVzb2x2ZWQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVsZW1lbnQpOmJvb2xlYW59IGNoZWNrRnVuY1xuICogQHJldHVybiB7IVByb21pc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yQ2hpbGRQcm9taXNlKHBhcmVudCwgY2hlY2tGdW5jKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB3YWl0Rm9yQ2hpbGQocGFyZW50LCBjaGVja0Z1bmMsIHJlc29sdmUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBXYWl0cyBmb3IgZG9jdW1lbnQncyBib2R5IHRvIGJlIGF2YWlsYWJsZS5cbiAqIFdpbGwgYmUgZGVwcmVjYXRlZCBzb29uOyB1c2Uge0BsaW5rIEFtcERvYyN3aGVuQm9keUF2YWlsYWJsZX0gb3JcbiAqIEB7bGluayBEb2N1bWVudFN0YXRlI29uQm9keUF2YWlsYWJsZX0gaW5zdGVhZC5cbiAqIEBwYXJhbSB7IURvY3VtZW50fSBkb2NcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRGb3JCb2R5KGRvYywgY2FsbGJhY2spIHtcbiAgd2FpdEZvckNoaWxkKGRvYy5kb2N1bWVudEVsZW1lbnQsICgpID0+ICEhZG9jLmJvZHksIGNhbGxiYWNrKTtcbn1cblxuXG4vKipcbiAqIFdhaXRzIGZvciBkb2N1bWVudCdzIGJvZHkgdG8gYmUgYXZhaWxhYmxlLlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7IVByb21pc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yQm9keVByb21pc2UoZG9jKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB3YWl0Rm9yQm9keShkb2MsIHJlc29sdmUpO1xuICB9KTtcbn1cblxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgY2hpbGQgbm9kZXMgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50LlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihwYXJlbnQpIHtcbiAgd2hpbGUgKHBhcmVudC5maXJzdENoaWxkKSB7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQ29waWVzIGFsbCBjaGlsZHJlbiBub2RlcyBvZiBlbGVtZW50IFwiZnJvbVwiIHRvIGVsZW1lbnQgXCJ0b1wiLiBDaGlsZCBub2Rlc1xuICogYXJlIGRlZXBseSBjbG9uZWQuIE5vdGljZSwgdGhhdCB0aGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB3aXRoIGNhcmUgYW5kXG4gKiBwcmVmZXJhYmx5IG9uIHNtYWxsZXIgc3VidHJlZXMuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBmcm9tXG4gKiBAcGFyYW0geyFFbGVtZW50fCFEb2N1bWVudEZyYWdtZW50fSB0b1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29weUNoaWxkcmVuKGZyb20sIHRvKSB7XG4gIGNvbnN0IGZyYWcgPSB0by5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgZm9yIChsZXQgbiA9IGZyb20uZmlyc3RDaGlsZDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcpIHtcbiAgICBmcmFnLmFwcGVuZENoaWxkKG4uY2xvbmVOb2RlKHRydWUpKTtcbiAgfVxuICB0by5hcHBlbmRDaGlsZChmcmFnKTtcbn1cblxuLyoqXG4gKiBJbnNlcnQgdGhlIGVsZW1lbnQgaW4gdGhlIHJvb3QgYWZ0ZXIgdGhlIGVsZW1lbnQgbmFtZWQgYWZ0ZXIgb3JcbiAqIGlmIHRoYXQgaXMgbnVsbCBhdCB0aGUgYmVnaW5uaW5nLlxuICogQHBhcmFtIHshRWxlbWVudHwhU2hhZG93Um9vdH0gcm9vdFxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHs/Tm9kZX0gYWZ0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydEFmdGVyT3JBdFN0YXJ0KHJvb3QsIGVsZW1lbnQsIGFmdGVyKSB7XG4gIGNvbnN0IGJlZm9yZSA9IGFmdGVyID8gYWZ0ZXIubmV4dFNpYmxpbmcgOiByb290LmZpcnN0Q2hpbGQ7XG4gIHJvb3QuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGJlZm9yZSk7XG59XG5cbi8qKlxuICogQWRkIGF0dHJpYnV0ZXMgdG8gYW4gZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7IUpzb25PYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gY3JlYXRlZCBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRBdHRyaWJ1dGVzVG9FbGVtZW50KGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgZm9yIChjb25zdCBhdHRyIGluIGF0dHJpYnV0ZXMpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyaWJ1dGVzW2F0dHJdKTtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZWxlbWVudCBvbiBkb2N1bWVudCB3aXRoIHNwZWNpZmllZCB0YWdOYW1lIGFuZCBhdHRyaWJ1dGVzLlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEBwYXJhbSB7IUpzb25PYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJuIHshRWxlbWVudH0gY3JlYXRlZCBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50V2l0aEF0dHJpYnV0ZXMoZG9jLCB0YWdOYW1lLCBhdHRyaWJ1dGVzKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgcmV0dXJuIGFkZEF0dHJpYnV0ZXNUb0VsZW1lbnQoZWxlbWVudCwgYXR0cmlidXRlcyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG5vZGUgaXMgY29ubmVjdGVkIChhdHRhY2hlZCkuXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHNlZSBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2Nvbm5lY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDb25uZWN0ZWROb2RlKG5vZGUpIHtcbiAgY29uc3QgY29ubmVjdGVkID0gbm9kZS5pc0Nvbm5lY3RlZDtcbiAgaWYgKGNvbm5lY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNvbm5lY3RlZDtcbiAgfVxuXG4gIC8vIFwiQW4gZWxlbWVudCBpcyBjb25uZWN0ZWQgaWYgaXRzIHNoYWRvdy1pbmNsdWRpbmcgcm9vdCBpcyBhIGRvY3VtZW50LlwiXG4gIGxldCBuID0gbm9kZTtcbiAgZG8ge1xuICAgIG4gPSByb290Tm9kZUZvcihuKTtcbiAgICBpZiAobi5ob3N0KSB7XG4gICAgICBuID0gbi5ob3N0O1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gd2hpbGUgKHRydWUpO1xuICByZXR1cm4gbi5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9OT0RFO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJvb3QgZm9yIGEgZ2l2ZW4gbm9kZS4gRG9lcyBub3QgY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyeS5cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEByZXR1cm4geyFOb2RlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm9vdE5vZGVGb3Iobm9kZSkge1xuICBpZiAoTm9kZS5wcm90b3R5cGUuZ2V0Um9vdE5vZGUpIHtcbiAgICAvLyBUeXBlIGNoZWNrZXIgc2F5cyBgZ2V0Um9vdE5vZGVgIG1heSByZXR1cm4gbnVsbC5cbiAgICByZXR1cm4gbm9kZS5nZXRSb290Tm9kZSgpIHx8IG5vZGU7XG4gIH1cbiAgbGV0IG47XG4gIGZvciAobiA9IG5vZGU7ICEhbi5wYXJlbnROb2RlOyBuID0gbi5wYXJlbnROb2RlKSB7fVxuICByZXR1cm4gbjtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBjYWxsYmFjayBmcm9tIHRoaXMgZWxlbWVudFxuICogdXAgdGhlIERPTSBzdWJ0cmVlLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtmdW5jdGlvbighRWxlbWVudCk6Ym9vbGVhbn0gY2FsbGJhY2tcbiAqIEBwYXJhbSB7RWxlbWVudD19IG9wdF9zdG9wQXQgb3B0aW9uYWwgZWxlbW50IHRvIHN0b3AgdGhlIHNlYXJjaCBhdC5cbiAqIEByZXR1cm4gez9FbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBjYWxsYmFjaywgb3B0X3N0b3BBdCkge1xuICBmb3IgKGxldCBlbCA9IGVsZW1lbnQ7IGVsICYmIGVsICE9PSBvcHRfc3RvcEF0OyBlbCA9IGVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICBpZiAoY2FsbGJhY2soZWwpKSB7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3Qgbm9kZSB0aGF0IHNhdGlzZmllcyB0aGUgY2FsbGJhY2sgZnJvbSB0aGlzIG5vZGVcbiAqIHVwIHRoZSBET00gc3VidHJlZS5cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIU5vZGUpOmJvb2xlYW59IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHs/Tm9kZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb3Nlc3ROb2RlKG5vZGUsIGNhbGxiYWNrKSB7XG4gIGZvciAobGV0IG4gPSBub2RlOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7XG4gICAgaWYgKGNhbGxiYWNrKG4pKSB7XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBuYW1lIGZyb20gdGhpcyBlbGVtZW50XG4gKiB1cCB0aGUgRE9NIHN1YnRyZWUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZVxuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZXN0QnlUYWcoZWxlbWVudCwgdGFnTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbG9zZXN0KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdCh0YWdOYW1lKTtcbiAgfVxuICB0YWdOYW1lID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBlbCA9PiB7XG4gICAgcmV0dXJuIGVsLnRhZ05hbWUgPT0gdGFnTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWQgc2VsZWN0b3IgZnJvbSB0aGlzIGVsZW1lbnRcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHJldHVybiB7P0VsZW1lbnR9IGNsb3Nlc3QgYW5jZXN0b3IgaWYgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZXN0QnlTZWxlY3RvcihlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoZWxlbWVudC5jbG9zZXN0KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdChzZWxlY3Rvcik7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdChlbGVtZW50LCBlbCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoZXMoZWwsIHNlbGVjdG9yKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBlbGVtZW50IG1hdGNoZXMgdGhlIHNlbGVjdG9yXG4gKiBAcGFyYW0gIHshRWxlbWVudH0gZWwgVGhlIGVsZW1lbnQgdG8gdmVyaWZ5XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNlbGVjdG9yIFRoZSBzZWxlY3RvciB0byBjaGVjayBhZ2FpbnN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBlbGVtZW50IG1hdGNoZWQgdGhlIHNlbGVjdG9yLiBGYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaGVzKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBtYXRjaGVyID0gZWwubWF0Y2hlcyB8fFxuICAgICAgZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICBlbC5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgIGVsLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICBlbC5vTWF0Y2hlc1NlbGVjdG9yO1xuICBpZiAobWF0Y2hlcikge1xuICAgIHJldHVybiBtYXRjaGVyLmNhbGwoZWwsIHNlbGVjdG9yKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7IC8vIElFOCBhbHdheXMgcmV0dXJucyBmYWxzZS5cbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgZGVzY2VuZGFudCBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICogQHBhcmFtIHshRWxlbWVudHwhRG9jdW1lbnR8IVNoYWRvd1Jvb3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcmV0dXJuIHs/RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVsZW1lbnRCeVRhZyhlbGVtZW50LCB0YWdOYW1lKSB7XG4gIGxldCBlbGVtZW50cztcbiAgLy8gZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSBpcyBub3Qgc3VwcG9ydGVkIG9uIFNoYWRvd1Jvb3QuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsZW1lbnRzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50cyA9IGVsZW1lbnQuLypPSyovcXVlcnlTZWxlY3RvckFsbCh0YWdOYW1lKTtcbiAgfVxuICByZXR1cm4gKGVsZW1lbnRzICYmIGVsZW1lbnRzWzBdKSB8fCBudWxsO1xufVxuXG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IGNoaWxkIGVsZW1lbnQgdGhhdCBzYXRpc2ZpZXMgdGhlIGNhbGxiYWNrLlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFFbGVtZW50KTpib29sZWFufSBjYWxsYmFja1xuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZEVsZW1lbnQocGFyZW50LCBjYWxsYmFjaykge1xuICBmb3IgKGxldCBjaGlsZCA9IHBhcmVudC5maXJzdEVsZW1lbnRDaGlsZDsgY2hpbGQ7XG4gICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBpZiAoY2FsbGJhY2soY2hpbGQpKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbi8qKlxuICogRmluZHMgYWxsIGNoaWxkIGVsZW1lbnRzIHRoYXQgc2F0aXNmeSB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVsZW1lbnQpOmJvb2xlYW59IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHshQXJyYXk8IUVsZW1lbnQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRFbGVtZW50cyhwYXJlbnQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gW107XG4gIGZvciAobGV0IGNoaWxkID0gcGFyZW50LmZpcnN0RWxlbWVudENoaWxkOyBjaGlsZDtcbiAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGlmIChjYWxsYmFjayhjaGlsZCkpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW47XG59XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgbGFzdCBjaGlsZCBlbGVtZW50IHRoYXQgc2F0aXNmaWVzIHRoZSBjYWxsYmFjay5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtmdW5jdGlvbighRWxlbWVudCk6Ym9vbGVhbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4gez9FbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGFzdENoaWxkRWxlbWVudChwYXJlbnQsIGNhbGxiYWNrKSB7XG4gIGZvciAobGV0IGNoaWxkID0gcGFyZW50Lmxhc3RFbGVtZW50Q2hpbGQ7IGNoaWxkO1xuICAgIGNoaWxkID0gY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGlmIChjYWxsYmFjayhjaGlsZCkpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZHMgYWxsIGNoaWxkIG5vZGVzIHRoYXQgc2F0aXNmeSB0aGUgY2FsbGJhY2suXG4gKiBUaGVzZSBub2RlcyBjYW4gaW5jbHVkZSBUZXh0LCBDb21tZW50IGFuZCBvdGhlciBjaGlsZCBub2Rlcy5cbiAqIEBwYXJhbSB7IU5vZGV9IHBhcmVudFxuICogQHBhcmFtIHtmdW5jdGlvbighTm9kZSk6Ym9vbGVhbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4geyFBcnJheTwhTm9kZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZE5vZGVzKHBhcmVudCwgY2FsbGJhY2spIHtcbiAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgZm9yIChsZXQgY2hpbGQgPSBwYXJlbnQuZmlyc3RDaGlsZDsgY2hpbGQ7XG4gICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZykge1xuICAgIGlmIChjYWxsYmFjayhjaGlsZCkpIHtcbiAgICAgIG5vZGVzLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbi8qKlxuICogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmxldCBzY29wZVNlbGVjdG9yU3VwcG9ydGVkO1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IHZhbFxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTY29wZVNlbGVjdG9yU3VwcG9ydGVkRm9yVGVzdGluZyh2YWwpIHtcbiAgc2NvcGVTZWxlY3RvclN1cHBvcnRlZCA9IHZhbDtcbn1cblxuLyoqXG4gKiBUZXN0IHRoYXQgdGhlIDpzY29wZSBzZWxlY3RvciBpcyBzdXBwb3J0ZWQgYW5kIGJlaGF2ZXMgY29ycmVjdGx5LlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Njb3BlU2VsZWN0b3JTdXBwb3J0ZWQocGFyZW50KSB7XG4gIGNvbnN0IGRvYyA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0cnkge1xuICAgIGNvbnN0IHRlc3RFbGVtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnN0IHRlc3RDaGlsZCA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0ZXN0RWxlbWVudC5hcHBlbmRDaGlsZCh0ZXN0Q2hpbGQpO1xuICAgIC8vIE5PVEUoY3ZpYWxpeiwgIzEyMzgzKTogRmlyZWZveCdzIGltcGxlbWVudGF0aW9uIGlzIGluY29tcGxldGUsXG4gICAgLy8gdGhlcmVmb3JlIHdlIHRlc3QgYWN0dWFsIGZ1bmN0aW9uYWxpdHkgb2ZgOnNjb3BlYCBhcyB3ZWxsLlxuICAgIHJldHVybiB0ZXN0RWxlbWVudC4vKk9LKi9xdWVyeVNlbGVjdG9yKCc6c2NvcGUgZGl2JykgPT09IHRlc3RDaGlsZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBjaGlsZCBlbGVtZW50IHRoYXQgaGFzIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlLlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZEVsZW1lbnRCeUF0dHIocGFyZW50LCBhdHRyKSB7XG4gIHJldHVybiBzY29wZWRRdWVyeVNlbGVjdG9yLypPSyovKHBhcmVudCwgYD4gWyR7YXR0cn1dYCk7XG59XG5cblxuLyoqXG4gKiBGaW5kcyB0aGUgbGFzdCBjaGlsZCBlbGVtZW50IHRoYXQgaGFzIHRoZSBzcGVjaWZpZWQgYXR0cmlidXRlLlxuICogQHBhcmFtIHshRWxlbWVudH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXN0Q2hpbGRFbGVtZW50QnlBdHRyKHBhcmVudCwgYXR0cikge1xuICByZXR1cm4gbGFzdENoaWxkRWxlbWVudChwYXJlbnQsIGVsID0+IHtcbiAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKGF0dHIpO1xuICB9KTtcbn1cblxuXG4vKipcbiAqIEZpbmRzIGFsbCBjaGlsZCBlbGVtZW50cyB0aGF0IGhhcyB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJcbiAqIEByZXR1cm4geyFOb2RlTGlzdDwhRWxlbWVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZEVsZW1lbnRzQnlBdHRyKHBhcmVudCwgYXR0cikge1xuICByZXR1cm4gc2NvcGVkUXVlcnlTZWxlY3RvckFsbC8qT0sqLyhwYXJlbnQsIGA+IFske2F0dHJ9XWApO1xufVxuXG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IGNoaWxkIGVsZW1lbnQgdGhhdCBoYXMgdGhlIHNwZWNpZmllZCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEByZXR1cm4gez9FbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRFbGVtZW50QnlUYWcocGFyZW50LCB0YWdOYW1lKSB7XG4gIHJldHVybiBzY29wZWRRdWVyeVNlbGVjdG9yLypPSyovKHBhcmVudCwgYD4gJHt0YWdOYW1lfWApO1xufVxuXG5cbi8qKlxuICogRmluZHMgYWxsIGNoaWxkIGVsZW1lbnRzIHdpdGggdGhlIHNwZWNpZmllZCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEByZXR1cm4geyFOb2RlTGlzdDwhRWxlbWVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZEVsZW1lbnRzQnlUYWcocGFyZW50LCB0YWdOYW1lKSB7XG4gIHJldHVybiBzY29wZWRRdWVyeVNlbGVjdG9yQWxsLypPSyovKHBhcmVudCwgYD4gJHt0YWdOYW1lfWApO1xufVxuXG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIGBzZWxlY3RvcmAsIHNjb3BlZCBpbnNpZGUgYHJvb3RgLlxuICogTm90ZTogaW4gSUUsIHRoaXMgY2F1c2VzIGEgcXVpY2sgbXV0YXRpb24gb2YgdGhlIGVsZW1lbnQncyBjbGFzcyBsaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gcm9vdFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHs/RWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjb3BlZFF1ZXJ5U2VsZWN0b3Iocm9vdCwgc2VsZWN0b3IpIHtcbiAgaWYgKHNjb3BlU2VsZWN0b3JTdXBwb3J0ZWQgPT0gbnVsbCkge1xuICAgIHNjb3BlU2VsZWN0b3JTdXBwb3J0ZWQgPSBpc1Njb3BlU2VsZWN0b3JTdXBwb3J0ZWQocm9vdCk7XG4gIH1cbiAgaWYgKHNjb3BlU2VsZWN0b3JTdXBwb3J0ZWQpIHtcbiAgICByZXR1cm4gcm9vdC4vKk9LKi9xdWVyeVNlbGVjdG9yKGA6c2NvcGUgJHtzZWxlY3Rvcn1gKTtcbiAgfVxuXG4gIC8vIE9ubHkgSUUuXG4gIGNvbnN0IHVuaXF1ZSA9ICdpLWFtcGh0bWwtc2NvcGVkJztcbiAgcm9vdC5jbGFzc0xpc3QuYWRkKHVuaXF1ZSk7XG4gIGNvbnN0IGVsZW1lbnQgPSByb290Li8qT0sqL3F1ZXJ5U2VsZWN0b3IoYC4ke3VuaXF1ZX0gJHtzZWxlY3Rvcn1gKTtcbiAgcm9vdC5jbGFzc0xpc3QucmVtb3ZlKHVuaXF1ZSk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5cbi8qKlxuICogRmluZHMgdGhlIGV2ZXJ5IGVsZW1lbnQgdGhhdCBtYXRjaGVzIGBzZWxlY3RvcmAsIHNjb3BlZCBpbnNpZGUgYHJvb3RgLlxuICogTm90ZTogaW4gSUUsIHRoaXMgY2F1c2VzIGEgcXVpY2sgbXV0YXRpb24gb2YgdGhlIGVsZW1lbnQncyBjbGFzcyBsaXN0LlxuICogQHBhcmFtIHshRWxlbWVudH0gcm9vdFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHshTm9kZUxpc3Q8IUVsZW1lbnQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NvcGVkUXVlcnlTZWxlY3RvckFsbChyb290LCBzZWxlY3Rvcikge1xuICBpZiAoc2NvcGVTZWxlY3RvclN1cHBvcnRlZCA9PSBudWxsKSB7XG4gICAgc2NvcGVTZWxlY3RvclN1cHBvcnRlZCA9IGlzU2NvcGVTZWxlY3RvclN1cHBvcnRlZChyb290KTtcbiAgfVxuICBpZiAoc2NvcGVTZWxlY3RvclN1cHBvcnRlZCkge1xuICAgIHJldHVybiByb290Li8qT0sqL3F1ZXJ5U2VsZWN0b3JBbGwoYDpzY29wZSAke3NlbGVjdG9yfWApO1xuICB9XG5cbiAgLy8gT25seSBJRS5cbiAgY29uc3QgdW5pcXVlID0gJ2ktYW1waHRtbC1zY29wZWQnO1xuICByb290LmNsYXNzTGlzdC5hZGQodW5pcXVlKTtcbiAgY29uc3QgZWxlbWVudHMgPSByb290Li8qT0sqL3F1ZXJ5U2VsZWN0b3JBbGwoYC4ke3VuaXF1ZX0gJHtzZWxlY3Rvcn1gKTtcbiAgcm9vdC5jbGFzc0xpc3QucmVtb3ZlKHVuaXF1ZSk7XG4gIHJldHVybiBlbGVtZW50cztcbn1cblxuXG4vKipcbiAqIFJldHVybnMgZWxlbWVudCBkYXRhLXBhcmFtLSBhdHRyaWJ1dGVzIGFzIHVybCBwYXJhbWV0ZXJzIGtleS12YWx1ZSBwYWlycy5cbiAqIGUuZy4gZGF0YS1wYXJhbS1zb21lLWF0dHI9dmFsdWUgLT4ge3NvbWVBdHRyOiB2YWx1ZX0uXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyk6c3RyaW5nPX0gb3B0X2NvbXB1dGVQYXJhbU5hbWVGdW5jIHRvIGNvbXB1dGUgdGhlXG4gKiAgICBwYXJhbWV0ZXIgbmFtZSwgZ2V0IHBhc3NlZCB0aGUgY2FtZWwtY2FzZSBwYXJhbWV0ZXIgbmFtZS5cbiAqIEBwYXJhbSB7IVJlZ0V4cD19IG9wdF9wYXJhbVBhdHRlcm4gUmVnZXggcGF0dGVybiB0byBtYXRjaCBkYXRhIGF0dHJpYnV0ZXMuXG4gKiBAcmV0dXJuIHshSnNvbk9iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFQYXJhbXNGcm9tQXR0cmlidXRlcyhlbGVtZW50LCBvcHRfY29tcHV0ZVBhcmFtTmFtZUZ1bmMsXG4gIG9wdF9wYXJhbVBhdHRlcm4pIHtcbiAgY29uc3QgY29tcHV0ZVBhcmFtTmFtZUZ1bmMgPSBvcHRfY29tcHV0ZVBhcmFtTmFtZUZ1bmMgfHwgKGtleSA9PiBrZXkpO1xuICBjb25zdCB7ZGF0YXNldH0gPSBlbGVtZW50O1xuICBjb25zdCBwYXJhbXMgPSBkaWN0KCk7XG4gIGNvbnN0IHBhcmFtUGF0dGVybiA9IG9wdF9wYXJhbVBhdHRlcm4gPyBvcHRfcGFyYW1QYXR0ZXJuIDogL15wYXJhbSguKykvO1xuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IGtleS5tYXRjaChwYXJhbVBhdHRlcm4pO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICBjb25zdCBwYXJhbSA9IG1hdGNoZXNbMV1bMF0udG9Mb3dlckNhc2UoKSArIG1hdGNoZXNbMV0uc3Vic3RyKDEpO1xuICAgICAgcGFyYW1zW2NvbXB1dGVQYXJhbU5hbWVGdW5jKHBhcmFtKV0gPSBkYXRhc2V0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgZWxlbWVudCBoYXZlIGEgbmV4dCBub2RlIGluIHRoZSBkb2N1bWVudCBvcmRlci5cbiAqIFRoaXMgbWVhbnMgZWl0aGVyOlxuICogIGEuIFRoZSBlbGVtZW50IGl0c2VsZiBoYXMgYSBuZXh0U2libGluZy5cbiAqICBiLiBBbnkgb2YgdGhlIGVsZW1lbnQgYW5jZXN0b3JzIGhhcyBhIG5leHRTaWJsaW5nLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHs/Tm9kZX0gb3B0X3N0b3BOb2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzTmV4dE5vZGVJbkRvY3VtZW50T3JkZXIoZWxlbWVudCwgb3B0X3N0b3BOb2RlKSB7XG4gIGxldCBjdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gIGRvIHtcbiAgICBpZiAoY3VycmVudEVsZW1lbnQubmV4dFNpYmxpbmcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSB3aGlsZSAoKGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZSkgJiZcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ICE9IG9wdF9zdG9wTm9kZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEZpbmRzIGFsbCBhbmNlc3RvciBlbGVtZW50cyB0aGF0IHNhdGlzZnkgcHJlZGljYXRlLlxuICogQHBhcmFtIHshRWxlbWVudH0gY2hpbGRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUVsZW1lbnQpOmJvb2xlYW59IHByZWRpY2F0ZVxuICogQHJldHVybiB7IUFycmF5PCFFbGVtZW50Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuY2VzdG9yRWxlbWVudHMoY2hpbGQsIHByZWRpY2F0ZSkge1xuICBjb25zdCBhbmNlc3RvcnMgPSBbXTtcbiAgZm9yIChsZXQgYW5jZXN0b3IgPSBjaGlsZC5wYXJlbnRFbGVtZW50OyBhbmNlc3RvcjtcbiAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudEVsZW1lbnQpIHtcbiAgICBpZiAocHJlZGljYXRlKGFuY2VzdG9yKSkge1xuICAgICAgYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYW5jZXN0b3JzO1xufVxuXG5cbi8qKlxuICogRmluZHMgYWxsIGFuY2VzdG9yIGVsZW1lbnRzIHRoYXQgaGFzIHRoZSBzcGVjaWZpZWQgdGFnIG5hbWUuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBjaGlsZFxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqIEByZXR1cm4geyFBcnJheTwhRWxlbWVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbmNlc3RvckVsZW1lbnRzQnlUYWcoY2hpbGQsIHRhZ05hbWUpIHtcbiAgdGFnTmFtZSA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIGFuY2VzdG9yRWxlbWVudHMoY2hpbGQsIGVsID0+IHtcbiAgICByZXR1cm4gZWwudGFnTmFtZSA9PSB0YWdOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2xvbmUgb2YgdGhlIGNvbnRlbnQgb2YgYSB0ZW1wbGF0ZSBlbGVtZW50LlxuICpcbiAqIFBvbHlmaWxsIHRvIHJlcGxhY2UgLmNvbnRlbnQgYWNjZXNzIGZvciBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0XG4gKiBIVE1MVGVtcGxhdGVFbGVtZW50cyBuYXRpdmVseS5cbiAqXG4gKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fCFFbGVtZW50fSB0ZW1wbGF0ZVxuICogQHJldHVybiB7IURvY3VtZW50RnJhZ21lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUNvbnRlbnRDbG9uZSh0ZW1wbGF0ZSkge1xuICBpZiAoJ2NvbnRlbnQnIGluIHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5vd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBjb3B5Q2hpbGRyZW4odGVtcGxhdGUsIGNvbnRlbnQpO1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIGFycmF5LWxpa2UuIFNvbWUgY29sbGVjdGlvbnMgbGlrZSBOb2RlTGlzdCBhcmVcbiAqIGxhemlseSBldmFsdWF0ZWQgaW4gc29tZSBicm93c2VycywgYW5kIGFjY2Vzc2luZyBgbGVuZ3RoYCBmb3JjZXMgZnVsbFxuICogZXZhbHVhdGlvbi4gV2UgY2FuIGltcHJvdmUgcGVyZm9ybWFuY2UgYnkgaXRlcmF0aW5nIHVudGlsIGFuIGVsZW1lbnQgaXNcbiAqIGB1bmRlZmluZWRgIHRvIGF2b2lkIGNoZWNraW5nIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAqIFRlc3QgY2FzZXM6IGh0dHBzOi8vanNwZXJmLmNvbS9pdGVyYXRpbmctb3Zlci1jb2xsZWN0aW9ucy1vZi1lbGVtZW50c1xuICogQHBhcmFtIHshSUFycmF5TGlrZTxUPn0gaXRlcmFibGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCwgbnVtYmVyKX0gY2JcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpdGVyYXRlQ3Vyc29yKGl0ZXJhYmxlLCBjYikge1xuICBmb3IgKGxldCBpID0gMCwgdmFsdWU7ICh2YWx1ZSA9IGl0ZXJhYmxlW2ldKSAhPT0gdW5kZWZpbmVkOyBpKyspIHtcbiAgICBjYih2YWx1ZSwgaSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCB3cmFwcyBhcm91bmQgd2luZG93J3Mgb3BlbiBtZXRob2QuIEl0IGZpcnN0IHRyaWVzIHRvIGV4ZWN1dGVcbiAqIGBvcGVuYCBjYWxsIHdpdGggdGhlIHByb3ZpZGVkIHRhcmdldCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHJpZXMgdGhlIGNhbGxcbiAqIHdpdGggdGhlIGBfdG9wYCB0YXJnZXQuIFRoaXMgaXMgbmVjZXNzYXJ5IGdpdmVuIHRoYXQgaW4gc29tZSBlbWJlZGRpbmdcbiAqIHNjZW5hcmlvcywgc3VjaCBhcyBpT1MnIFdLV2ViVmlldywgbmF2aWdhdGlvbiB0byBgX2JsYW5rYCBhbmQgb3RoZXIgdGFyZ2V0c1xuICogaXMgYmxvY2tlZCBieSBkZWZhdWx0LlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9mZWF0dXJlc1xuICogQHJldHVybiB7P1dpbmRvd31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9wZW5XaW5kb3dEaWFsb2cod2luLCB1cmwsIHRhcmdldCwgb3B0X2ZlYXR1cmVzKSB7XG4gIC8vIFRyeSBmaXJzdCB3aXRoIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LiBJZiB3ZSdyZSBpbnNpZGUgdGhlIFdLV2ViVmlldyBvclxuICAvLyBhIHNpbWlsYXIgZW52aXJvbm1lbnRzLCB0aGlzIG1ldGhvZCBpcyBleHBlY3RlZCB0byBmYWlsIGJ5IGRlZmF1bHQgZm9yXG4gIC8vIGFsbCB0YXJnZXRzIGV4Y2VwdCBgX3RvcGAuXG4gIGxldCByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gd2luLm9wZW4odXJsLCB0YXJnZXQsIG9wdF9mZWF0dXJlcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZXYoKS5lcnJvcignRE9NJywgJ0ZhaWxlZCB0byBvcGVuIHVybCBvbiB0YXJnZXQ6ICcsIHRhcmdldCwgZSk7XG4gIH1cblxuICAvLyBUaGVuIHRyeSB3aXRoIGBfdG9wYCB0YXJnZXQuXG4gIGlmICghcmVzICYmIHRhcmdldCAhPSAnX3RvcCcpIHtcbiAgICByZXMgPSB3aW4ub3Blbih1cmwsICdfdG9wJyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIGEgc2NyaXB0IHRhZyB3aXRoIGFwcGxpY2F0aW9uL2pzb24gdHlwZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25TY3JpcHRUYWcoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50YWdOYW1lID09ICdTQ1JJUFQnICYmXG4gICAgICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpLnRvVXBwZXJDYXNlKCkgPT0gJ0FQUExJQ0FUSU9OL0pTT04nO1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgYSBzY3JpcHQgdGFnIHdpdGggYXBwbGljYXRpb24vanNvbiB0eXBlLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvbkxkU2NyaXB0VGFnKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZSA9PSAnU0NSSVBUJyAmJlxuICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKS50b1VwcGVyQ2FzZSgpID09ICdBUFBMSUNBVElPTi9MRCtKU09OJztcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBwYWdlJ3MgZGlyZWN0aW9uIGlzIHJpZ2h0IHRvIGxlZnQgb3Igbm90LlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUlRMKGRvYykge1xuICBjb25zdCBkaXIgPSBkb2MuYm9keS5nZXRBdHRyaWJ1dGUoJ2RpcicpXG4gICAgICAgICAgICAgICAgIHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXInKVxuICAgICAgICAgICAgICAgICB8fCAnbHRyJztcbiAgcmV0dXJuIGRpciA9PSAncnRsJztcbn1cblxuXG4vKipcbiAqIEVzY2FwZXMgYW4gaWRlbnQgKElEIG9yIGEgY2xhc3MgbmFtZSkgdG8gYmUgdXNlZCBhcyBhIENTUyBzZWxlY3Rvci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNzZXJpYWxpemUtYW4taWRlbnRpZmllci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRlbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUNzc1NlbGVjdG9ySWRlbnQoaWRlbnQpIHtcbiAgcmV0dXJuIGNzc0VzY2FwZShpZGVudCk7XG59XG5cbi8qKlxuICogRXNjYXBlcyBhbiBpZGVudCBpbiBhIHdheSB0aGF0IGNhbiBiZSB1c2VkIGJ5IDpudGgtY2hpbGQoKSBwc3VlZG8tY2xhc3MuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvY3Nzd2ctZHJhZnRzL2lzc3Vlcy8yMzA2LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaWRlbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUNzc1NlbGVjdG9yTnRoKGlkZW50KSB7XG4gIGNvbnN0IGVzY2FwZWQgPSBTdHJpbmcoaWRlbnQpO1xuICAvLyBFbnN1cmUgaXQgZG9lc24ndCBjbG9zZSB0aGUgbnRoLWNoaWxkIHBzdWVkbyBjbGFzcy5cbiAgZGV2KCkuYXNzZXJ0KGVzY2FwZWQuaW5kZXhPZignKScpID09PSAtMSk7XG4gIHJldHVybiBlc2NhcGVkO1xufVxuXG4vKipcbiAqIEVzY2FwZXMgYDxgLCBgPmAgYW5kIG90aGVyIEhUTUwgY2hhcmNhdGVycyB3aXRoIHRoZWlyIGVzY2FwZWQgZm9ybXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlSHRtbCh0ZXh0KSB7XG4gIGlmICghdGV4dCkge1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoSFRNTF9FU0NBUEVfUkVHRVgsIGVzY2FwZUh0bWxDaGFyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVIdG1sQ2hhcihjKSB7XG4gIHJldHVybiBIVE1MX0VTQ0FQRV9DSEFSU1tjXTtcbn1cblxuLyoqXG4gKiBUcmllcyB0byBmb2N1cyBvbiB0aGUgZ2l2ZW4gZWxlbWVudDsgZmFpbHMgc2lsZW50bHkgaWYgYnJvd3NlciB0aHJvd3MgYW5cbiAqIGV4Y2VwdGlvbi5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeUZvY3VzKGVsZW1lbnQpIHtcbiAgdHJ5IHtcbiAgICBlbGVtZW50Li8qT0sqL2ZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSA8PSA3IG1heSB0aHJvdyBleGNlcHRpb25zIHdoZW4gZm9jdXNpbmcgb24gaGlkZGVuIGl0ZW1zLlxuICB9XG59XG5cbi8qKlxuICogV2hldGhlciB0aGUgZ2l2ZW4gd2luZG93IGlzIGluIGFuIGlmcmFtZSBvciBub3QuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSWZyYW1lZCh3aW4pIHtcbiAgcmV0dXJuIHdpbi5wYXJlbnQgJiYgd2luLnBhcmVudCAhPSB3aW47XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGlzIGVsZW1lbnQgaXMgYW4gQU1QIGVsZW1lbnRcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FtcEVsZW1lbnQoZWxlbWVudCkge1xuICBjb25zdCB0YWcgPSBlbGVtZW50LnRhZ05hbWU7XG4gIC8vIFVzZSBwcmVmaXggdG8gcmVjb2duaXplIEFNUCBlbGVtZW50LiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHN0dWJcbiAgLy8gbWF5IG5vdCBiZSBhdHRhY2hlZCB5ZXQuXG4gIHJldHVybiBzdGFydHNXaXRoKHRhZywgJ0FNUC0nKSAmJlxuICAgICAgLy8gU29tZSBcImFtcC0qXCIgZWxlbWVudHMgYXJlIG5vdCByZWFsbHkgQU1QIGVsZW1lbnRzLiA6c21oOlxuICAgICAgISh0YWcgPT0gJ0FNUC1TVElDS1ktQUQtVE9QLVBBRERJTkcnIHx8IHRhZyA9PSAnQU1QLUJPRFknKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZSB3aGVuIGFuIEFNUCBlbGVtZW50IHVwZ3JhZGUgZnJvbSBIVE1MRWxlbWVudFxuICogdG8gQ3VzdG9tRWxlbWVudFxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7IVByb21pc2U8IUVsZW1lbnQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hlblVwZ3JhZGVkVG9DdXN0b21FbGVtZW50KGVsZW1lbnQpIHtcbiAgZGV2KCkuYXNzZXJ0KGlzQW1wRWxlbWVudChlbGVtZW50KSwgJ2VsZW1lbnQgaXMgbm90IEFtcEVsZW1lbnQnKTtcbiAgaWYgKGVsZW1lbnQuY3JlYXRlZENhbGxiYWNrKSB7XG4gICAgLy8gRWxlbWVudCBhbHJlYWR5IGlzIEN1c3RvbUVsZW1lbnQ7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbGVtZW50KTtcbiAgfVxuICAvLyBJZiBFbGVtZW50IGlzIHN0aWxsIEhUTUxFbGVtZW50LCB3YWl0IGZvciBpdCB0byB1cGdyYWRlIHRvIGN1c3RvbUVsZW1lbnRcbiAgLy8gTm90ZTogdXNlIHB1cmUgc3RyaW5nIHRvIGF2b2lkIG9iZnVzY2F0aW9uIGJldHdlZW4gdmVyc2lvbnMuXG4gIGlmICghZWxlbWVudFtVUEdSQURFX1RPX0NVU1RPTUVMRU1FTlRfUFJPTUlTRV0pIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGVsZW1lbnRbVVBHUkFERV9UT19DVVNUT01FTEVNRU5UX1BST01JU0VdID0gZGVmZXJyZWQucHJvbWlzZTtcbiAgICBlbGVtZW50W1VQR1JBREVfVE9fQ1VTVE9NRUxFTUVOVF9SRVNPTFZFUl0gPSBkZWZlcnJlZC5yZXNvbHZlO1xuXG4gIH1cblxuICByZXR1cm4gZWxlbWVudFtVUEdSQURFX1RPX0NVU1RPTUVMRU1FTlRfUFJPTUlTRV07XG59XG5cbi8qKlxuICogUmVwbGFjZW1lbnQgZm9yIGBFbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKClgIG1ldGhvZC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L3JlcXVlc3RGdWxsc2NyZWVuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmdWxsc2NyZWVuRW50ZXIoZWxlbWVudCkge1xuICBjb25zdCByZXF1ZXN0RnMgPSBlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuXG4gICB8fCBlbGVtZW50LnJlcXVlc3RGdWxsU2NyZWVuXG4gICB8fCBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuXG4gICB8fCBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsU2NyZWVuXG4gICB8fCBlbGVtZW50LndlYmtpdEVudGVyRnVsbHNjcmVlblxuICAgfHwgZWxlbWVudC53ZWJraXRFbnRlckZ1bGxTY3JlZW5cbiAgIHx8IGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlblxuICAgfHwgZWxlbWVudC5tc1JlcXVlc3RGdWxsU2NyZWVuXG4gICB8fCBlbGVtZW50Lm1velJlcXVlc3RGdWxsc2NyZWVuXG4gICB8fCBlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuO1xuICBpZiAocmVxdWVzdEZzKSB7XG4gICAgcmVxdWVzdEZzLmNhbGwoZWxlbWVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXBsYWNlbWVudCBmb3IgYERvY3VtZW50LmV4aXRGdWxsc2NyZWVuKClgIG1ldGhvZC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9leGl0RnVsbHNjcmVlblxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZnVsbHNjcmVlbkV4aXQoZWxlbWVudCkge1xuICBsZXQgZXhpdEZzID0gZWxlbWVudC5jYW5jZWxGdWxsU2NyZWVuXG4gICAgICAgICAgICAgIMKgfHwgZWxlbWVudC5leGl0RnVsbHNjcmVlblxuICAgICAgICAgICAgICDCoHx8IGVsZW1lbnQuZXhpdEZ1bGxTY3JlZW5cbiAgICAgICAgICAgICAgwqB8fCBlbGVtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuXG4gICAgICAgICAgICAgIMKgfHwgZWxlbWVudC53ZWJraXRFeGl0RnVsbFNjcmVlblxuICAgICAgICAgICAgICDCoHx8IGVsZW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlblxuICAgICAgICAgICAgICDCoHx8IGVsZW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlblxuICAgICAgICAgICAgICDCoHx8IGVsZW1lbnQubXNFeGl0RnVsbHNjcmVlbjtcbiAgaWYgKGV4aXRGcykge1xuICAgIGV4aXRGcy5jYWxsKGVsZW1lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZWxlbWVudC5vd25lckRvY3VtZW50KSB7XG4gICAgZXhpdEZzID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW5cbiAgICAgICAgICAgICB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW5cbiAgICAgICAgICAgICB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZXhpdEZ1bGxTY3JlZW5cbiAgICAgICAgICAgICB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW5cbiAgICAgICAgICAgICB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQud2Via2l0RXhpdEZ1bGxTY3JlZW5cbiAgICAgICAgICAgICB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlblxuICAgICAgICAgICAgIHx8IGVsZW1lbnQub3duZXJEb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuXG4gICAgICAgICAgICAgfHwgZWxlbWVudC5vd25lckRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW47XG4gIH1cbiAgaWYgKGV4aXRGcykge1xuICAgIGV4aXRGcy5jYWxsKGVsZW1lbnQub3duZXJEb2N1bWVudCk7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cblxuLyoqXG4gKiBSZXBsYWNlbWVudCBmb3IgYERvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50YC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Eb2N1bWVudC9mdWxsc2NyZWVuRWxlbWVudFxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVsbHNjcmVlbkVsZW1lbnQoZWxlbWVudCkge1xuICBjb25zdCBpc0Z1bGxzY3JlZW4gPSBlbGVtZW50LndlYmtpdERpc3BsYXlpbmdGdWxsc2NyZWVuO1xuICBpZiAoaXNGdWxsc2NyZWVuKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGVsZW1lbnQub3duZXJEb2N1bWVudCkge1xuICAgIGNvbnN0IGZ1bGxzY3JlZW5FbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50XG4gICAgICAgICAgICAgfHwgZWxlbWVudC5vd25lckRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XG4gICAgICAgICAgICAgfHwgZWxlbWVudC5vd25lckRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50XG4gICAgICAgICAgICAgfHwgZWxlbWVudC53ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQ7XG4gICAgaWYgKGZ1bGxzY3JlZW5FbGVtZW50ID09IGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG5vZGUgaXMgbm90IGRpc2FibGVkLlxuICpcbiAqIElFOCBjYW4gcmV0dXJuIGZhbHNlIHBvc2l0aXZlcywgc2VlIHtAbGluayBtYXRjaGVzfS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW5hYmxlZChlbGVtZW50KSB7XG4gIHJldHVybiAhKGVsZW1lbnQuZGlzYWJsZWQgfHwgbWF0Y2hlcyhlbGVtZW50LCAnOmRpc2FibGVkJykpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGRvbSBmcm9tICcuL2RvbSc7XG5pbXBvcnQge1xuICBnZXRBbXBkb2MsXG4gIGdldEV4aXN0aW5nU2VydmljZUZvckRvY0luRW1iZWRTY29wZSxcbiAgZ2V0U2VydmljZSxcbiAgZ2V0U2VydmljZVByb21pc2UsXG4gIGdldFNlcnZpY2VQcm9taXNlRm9yRG9jLFxuICBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbCxcbiAgZ2V0U2VydmljZVByb21pc2VPck51bGxGb3JEb2MsXG4gIGdldFRvcFdpbmRvdyxcbn0gZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCB7dG9XaW59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHt1c2VyfSBmcm9tICcuL2xvZyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgZm9yIGEgc2VydmljZSBmb3IgdGhlIGdpdmVuIGlkIGFuZCB3aW5kb3cuIEFsc28gZXhwZWN0cyBhblxuICogZWxlbWVudCB0aGF0IGhhcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uLiBUaGUgcHJvbWlzZSByZXNvbHZlcyB3aGVuIHRoZVxuICogaW1wbGVtZW50YXRpb24gbG9hZGVkLiBVc2VycyBzaG91bGQgdHlwaWNhbGx5IHdyYXAgdGhpcyBhcyBhIHNwZWNpYWwgcHVycG9zZVxuICogZnVuY3Rpb24gKGUuZy4gU2VydmljZXMudmlld3BvcnRGb3JEb2MoLi4uKSkgZm9yIHR5cGUgc2FmZXR5IGFuZCBiZWNhdXNlIHRoZVxuICogZmFjdG9yeSBzaG91bGQgbm90IGJlIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IGlkIG9mIHRoZSBzZXJ2aWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbiBOYW1lIG9mIHRoZSBjdXN0b20gZXh0ZW5zaW9uIHRoYXQgcHJvdmlkZXMgdGhlXG4gKiAgICAgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBzZXJ2aWNlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2VsZW1lbnQgV2hldGhlciB0aGlzIHNlcnZpY2UgaXMgcHJvdmlkZWQgYnkgYW4gZWxlbWVudCxcbiAqICAgICBub3QgdGhlIGV4dGVuc2lvbi5cbiAqIEByZXR1cm4geyFQcm9taXNlPCo+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudFNlcnZpY2Uod2luLCBpZCwgZXh0ZW5zaW9uLCBvcHRfZWxlbWVudCkge1xuICByZXR1cm4gZ2V0RWxlbWVudFNlcnZpY2VJZkF2YWlsYWJsZSh3aW4sIGlkLCBleHRlbnNpb24sIG9wdF9lbGVtZW50KS50aGVuKFxuICAgICAgc2VydmljZSA9PiBhc3NlcnRTZXJ2aWNlKHNlcnZpY2UsIGlkLCBleHRlbnNpb24pKTtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGdldEVsZW1lbnRTZXJ2aWNlIGJ1dCBwcm9kdWNlcyBudWxsIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIG5vdFxuICogYWN0dWFsbHkgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IHBhZ2UuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IGlkIG9mIHRoZSBzZXJ2aWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbiBOYW1lIG9mIHRoZSBjdXN0b20gZXh0ZW5zaW9uIHRoYXQgcHJvdmlkZXMgdGhlXG4gKiAgICAgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBzZXJ2aWNlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2VsZW1lbnQgV2hldGhlciB0aGlzIHNlcnZpY2UgaXMgcHJvdmlkZWQgYnkgYW5cbiAqICAgICBlbGVtZW50LCBub3QgdGhlIGV4dGVuc2lvbi5cbiAqIEByZXR1cm4geyFQcm9taXNlPD9PYmplY3Q+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudFNlcnZpY2VJZkF2YWlsYWJsZSh3aW4sIGlkLCBleHRlbnNpb24sIG9wdF9lbGVtZW50KSB7XG4gIGNvbnN0IHMgPSBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbCh3aW4sIGlkKTtcbiAgaWYgKHMpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/T2JqZWN0Pn0gKi8gKHMpO1xuICB9XG4gIHJldHVybiBnZXRFbGVtZW50U2VydmljZVByb21pc2VPck51bGwod2luLCBpZCwgZXh0ZW5zaW9uLCBvcHRfZWxlbWVudCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZSBOYW1lIG9mIGFuIGV4dGVuZGVkIGN1c3RvbSBlbGVtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGVsZW1lbnQgaXMgc2NoZWR1bGVkIHRvIGJlIGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50U2NoZWR1bGVkKHdpbiwgZWxlbWVudE5hbWUpIHtcbiAgLy8gU2V0IGluIGN1c3RvbS1lbGVtZW50LmpzXG4gIGlmICghd2luLmFtcEV4dGVuZGVkRWxlbWVudHMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuICEhd2luLmFtcEV4dGVuZGVkRWxlbWVudHNbZWxlbWVudE5hbWVdO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIHByb21pc2UgZm9yIGEgc2VydmljZSBmb3IgdGhlIGdpdmVuIGlkIGFuZCB3aW5kb3cuIEFsc28gZXhwZWN0cyBhblxuICogZWxlbWVudCB0aGF0IGhhcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uLiBUaGUgcHJvbWlzZSByZXNvbHZlcyB3aGVuIHRoZVxuICogaW1wbGVtZW50YXRpb24gbG9hZGVkLiBVc2VycyBzaG91bGQgdHlwaWNhbGx5IHdyYXAgdGhpcyBhcyBhIHNwZWNpYWwgcHVycG9zZVxuICogZnVuY3Rpb24gKGUuZy4gU2VydmljZXMudmlld3BvcnRGb3JEb2MoLi4uKSkgZm9yIHR5cGUgc2FmZXR5IGFuZCBiZWNhdXNlIHRoZVxuICogZmFjdG9yeSBzaG91bGQgbm90IGJlIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb24gTmFtZSBvZiB0aGUgY3VzdG9tIGV4dGVuc2lvbiB0aGF0IHByb3ZpZGVzIHRoZVxuICogICAgIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgc2VydmljZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9lbGVtZW50IFdoZXRoZXIgdGhpcyBzZXJ2aWNlIGlzIHByb3ZpZGVkIGJ5IGFuIGVsZW1lbnQsXG4gKiAgICAgbm90IHRoZSBleHRlbnNpb24uXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwqPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgaWQsIGV4dGVuc2lvbixcbiAgb3B0X2VsZW1lbnQpIHtcbiAgcmV0dXJuIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoXG4gICAgICBlbGVtZW50T3JBbXBEb2MsIGlkLCBleHRlbnNpb24sIG9wdF9lbGVtZW50KVxuICAgICAgLnRoZW4oc2VydmljZSA9PiBhc3NlcnRTZXJ2aWNlKHNlcnZpY2UsIGlkLCBleHRlbnNpb24pKTtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGdldEVsZW1lbnRTZXJ2aWNlIGJ1dCBwcm9kdWNlcyBudWxsIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIG5vdFxuICogYWN0dWFsbHkgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IHBhZ2UuXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb24gTmFtZSBvZiB0aGUgY3VzdG9tIGV4dGVuc2lvbiB0aGF0IHByb3ZpZGVzIHRoZVxuICogICAgIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgc2VydmljZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9lbGVtZW50IFdoZXRoZXIgdGhpcyBzZXJ2aWNlIGlzIHByb3ZpZGVkIGJ5IGFuXG4gKiAgICAgZWxlbWVudCwgbm90IHRoZSBleHRlbnNpb24uXG4gKiBAcmV0dXJuIHshUHJvbWlzZTw/T2JqZWN0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoXG4gIGVsZW1lbnRPckFtcERvYywgaWQsIGV4dGVuc2lvbiwgb3B0X2VsZW1lbnQpIHtcbiAgY29uc3QgYW1wZG9jID0gZ2V0QW1wZG9jKGVsZW1lbnRPckFtcERvYyk7XG4gIGNvbnN0IHMgPSBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbEZvckRvYyhlbGVtZW50T3JBbXBEb2MsIGlkKTtcbiAgaWYgKHMpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/T2JqZWN0Pn0gKi8gKHMpO1xuICB9XG5cbiAgcmV0dXJuIGFtcGRvYy53aGVuQm9keUF2YWlsYWJsZSgpXG4gICAgICAudGhlbigoKSA9PiB3YWl0Rm9yRXh0ZW5zaW9uSWZQcmVzZW50KFxuICAgICAgICAgIGFtcGRvYy53aW4sIGV4dGVuc2lvbixcbiAgICAgICAgICBhbXBkb2MuZ2V0SGVhZE5vZGUoKSkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIElmIHRoaXMgc2VydmljZSBpcyBwcm92aWRlZCBieSBhbiBlbGVtZW50LCB0aGVuIHdlIGNhbid0IGRlcGVuZCBvblxuICAgICAgICAvLyB0aGUgc2VydmljZSAodGhleSBtYXkgbm90IHVzZSB0aGUgZWxlbWVudCkuXG4gICAgICAgIGlmIChvcHRfZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbEZvckRvYyhlbGVtZW50T3JBbXBEb2MsIGlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnRTY2hlZHVsZWQoYW1wZG9jLndpbiwgZXh0ZW5zaW9uKSkge1xuICAgICAgICAgIHJldHVybiBnZXRTZXJ2aWNlUHJvbWlzZUZvckRvYyhlbGVtZW50T3JBbXBEb2MsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIGZvciBzZXJ2aWNlIGZvciB0aGUgZ2l2ZW4gaWQgaW4gdGhlIGVtYmVkIHNjb3BlIG9mXG4gKiBhIGdpdmVuIG5vZGUsIGlmIGl0IGV4aXN0cy4gT3RoZXJ3aXNlLCBmYWxscyBiYWNrIHRvIGFtcGRvYyBzY29wZSBJRkZcbiAqIHRoZSBnaXZlbiBub2RlIGlzIGluIHRoZSB0b3AtbGV2ZWwgd2luZG93LlxuICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgb2YgdGhlIHNlcnZpY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXh0ZW5zaW9uIE5hbWUgb2YgdGhlIGN1c3RvbSBlbGVtZW50IHRoYXQgcHJvdmlkZXNcbiAqICAgICB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBzZXJ2aWNlLlxuICogQHJldHVybiB7IVByb21pc2U8P09iamVjdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlRm9yRG9jSW5FbWJlZFNjb3BlKFxuICBlbGVtZW50T3JBbXBEb2MsIGlkLCBleHRlbnNpb24pIHtcbiAgY29uc3QgcyA9IGdldEV4aXN0aW5nU2VydmljZUZvckRvY0luRW1iZWRTY29wZShlbGVtZW50T3JBbXBEb2MsIGlkKTtcbiAgaWYgKHMpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/T2JqZWN0Pn0gKi8gKFByb21pc2UucmVzb2x2ZShzKSk7XG4gIH1cbiAgLy8gUmV0dXJuIGVtYmVkLXNjb3BlIGVsZW1lbnQgc2VydmljZSBwcm9taXNlIGlmIHNjaGVkdWxlZC5cbiAgaWYgKGVsZW1lbnRPckFtcERvYy5ub2RlVHlwZSkge1xuICAgIGNvbnN0IHdpbiA9IHRvV2luKGVsZW1lbnRPckFtcERvYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgICBjb25zdCB0b3BXaW4gPSBnZXRUb3BXaW5kb3cod2luKTtcbiAgICAvLyBJbiBlbWJlZHMsIGRvYy1zY29wZSBzZXJ2aWNlcyBhcmUgd2luZG93LXNjb3BlLiBCdXQgbWFrZSBzdXJlIHRvXG4gICAgLy8gb25seSBkbyB0aGlzIGZvciBlbWJlZHMgKG5vdCB0aGUgdG9wIHdpbmRvdyksIG90aGVyd2lzZSB3ZSdkIGdyYWJcbiAgICAvLyBhIHByb21pc2UgZnJvbSB0aGUgd3Jvbmcgc2VydmljZSBob2xkZXIgd2hpY2ggd291bGQgbmV2ZXIgcmVzb2x2ZS5cbiAgICBpZiAod2luICE9PSB0b3BXaW4pIHtcbiAgICAgIHJldHVybiBnZXRFbGVtZW50U2VydmljZVByb21pc2VPck51bGwod2luLCBpZCwgZXh0ZW5zaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2sgdG8gYW1wZG9jIElGRiB0aGUgZ2l2ZW4gbm9kZSBpcyBfbm90XyBGSUUuXG4gICAgICByZXR1cm4gZ2V0RWxlbWVudFNlcnZpY2VJZkF2YWlsYWJsZUZvckRvYyhlbGVtZW50T3JBbXBEb2MsIGlkLCBleHRlbnNpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/T2JqZWN0Pn0gKi8gKFByb21pc2UucmVzb2x2ZShudWxsKSk7XG59XG5cbi8qKlxuICogVGhyb3dzIHVzZXIgZXJyb3IgaWYgYHNlcnZpY2VgIGlzIG51bGwuXG4gKiBAcGFyYW0ge09iamVjdH0gc2VydmljZVxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0ge3N0cmluZ30gZXh0ZW5zaW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0U2VydmljZShzZXJ2aWNlLCBpZCwgZXh0ZW5zaW9uKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFPYmplY3R9ICovICh1c2VyKCkuYXNzZXJ0KHNlcnZpY2UsXG4gICAgICAnU2VydmljZSAlcyB3YXMgcmVxdWVzdGVkIHRvIGJlIHByb3ZpZGVkIHRocm91Z2ggJXMsICcgK1xuICAgICAgJ2J1dCAlcyBpcyBub3QgbG9hZGVkIGluIHRoZSBjdXJyZW50IHBhZ2UuIFRvIGZpeCB0aGlzICcgK1xuICAgICAgJ3Byb2JsZW0gbG9hZCB0aGUgSmF2YVNjcmlwdCBmaWxlIGZvciAlcyBpbiB0aGlzIHBhZ2UuJyxcbiAgICAgIGlkLCBleHRlbnNpb24sIGV4dGVuc2lvbiwgZXh0ZW5zaW9uKSk7XG59XG5cbi8qKlxuICogR2V0IGxpc3Qgb2YgYWxsIHRoZSBleHRlbnNpb24gSlMgZmlsZXNcbiAqIEBwYXJhbSB7SFRNTEhlYWRFbGVtZW50fEVsZW1lbnR8U2hhZG93Um9vdH0gaGVhZFxuICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbnNpb25TY3JpcHRzSW5Ob2RlKGhlYWQpIHtcbiAgLy8gYW1wZG9jLmdldEhlYWROb2RlKCkgY2FuIHJldHVybiBudWxsXG4gIGlmICghaGVhZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBzY3JpcHRzID0gW107XG4gIGNvbnN0IGxpc3QgPSBoZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFtjdXN0b20tZWxlbWVudF0nKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgc2NyaXB0cy5wdXNoKGxpc3RbaV0uZ2V0QXR0cmlidXRlKCdjdXN0b20tZWxlbWVudCcpKTtcbiAgfVxuICByZXR1cm4gc2NyaXB0cztcbn1cblxuLyoqXG4gKiBXYWl0cyBmb3IgYW4gZXh0ZW5zaW9uIGlmIGl0cyBzY3JpcHQgaXMgcHJlc2VudFxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHRlbnNpb25cbiAqIEBwYXJhbSB7SFRNTEhlYWRFbGVtZW50fEVsZW1lbnR8U2hhZG93Um9vdH0gaGVhZFxuICogQHJldHVybiB7IVByb21pc2V9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB3YWl0Rm9yRXh0ZW5zaW9uSWZQcmVzZW50KHdpbiwgZXh0ZW5zaW9uLCBoZWFkKSB7XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBhbiBleHRlbnNpb24gc2NyaXB0IHdhaXQgZm9yIGl0IHRvIGxvYWQgYmVmb3JlIHRyeWluZ1xuICAgKiB0byBnZXQgdGhlIHNlcnZpY2UuIFByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2hlbiBldmVyeXRoaW5nIGJ1dFxuICAgKiB0aGUgZXh0ZW5zaW9ucyBpcyBpbiBjYWNoZS4gSWYgdGhlcmUgaXMgbm8gc2NyaXB0IHRoZW4gaXQncyBlaXRoZXJcbiAgICogbm90IHByZXNlbnQsIG9yIHRoZSBzZXJ2aWNlIHdhcyBkZWZpbmVkIGJ5IGEgdGVzdC4gSW4gdGhvc2UgY2FzZXNcbiAgICogd2UgZG9uJ3Qgd2FpdCBhcm91bmQgZm9yIGFuIGV4dGVuc2lvbiB0aGF0IGRvZXMgbm90IGV4aXN0LlxuICAgKi9cblxuICAvLyBUT0RPKGpwZXR0aXR0KSBpbnZlc3RpZ2F0ZSByZWdpc3RlckV4dGVuc2lvbiB0byBzaG9ydCBjaXJjdWl0XG4gIC8vIHRoZSBkb20gY2FsbCBpbiBleHRlbnNpb25TY3JpcHRzSW5Ob2RlKClcbiAgaWYgKCFleHRlbnNpb25TY3JpcHRzSW5Ob2RlKGhlYWQpLmluY2x1ZGVzKGV4dGVuc2lvbikpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBjb25zdCBleHRlbnNpb25zID0gZ2V0U2VydmljZSh3aW4sICdleHRlbnNpb25zJyk7XG4gIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPD9PYmplY3Q+fSAqLyAoXG4gICAgZXh0ZW5zaW9ucy53YWl0Rm9yRXh0ZW5zaW9uKHdpbiwgZXh0ZW5zaW9uKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcHJvbWlzZSBmb3Igc2VydmljZSB3aXRoIGBpZGAgb24gdGhlIGdpdmVuIHdpbmRvdyBpZiBhdmFpbGFibGUuXG4gKiBPdGhlcndpc2UsIHJlc29sdmVzIHdpdGggbnVsbCAoc2VydmljZSB3YXMgbm90IHJlZ2lzdGVyZWQpLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvblxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2VsZW1lbnRcbiAqIEByZXR1cm4geyFQcm9taXNlPE9iamVjdD59XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50U2VydmljZVByb21pc2VPck51bGwod2luLCBpZCwgZXh0ZW5zaW9uLCBvcHRfZWxlbWVudCkge1xuICByZXR1cm4gZG9tLndhaXRGb3JCb2R5UHJvbWlzZSh3aW4uZG9jdW1lbnQpXG4gICAgICAudGhlbigoKSA9PiB3YWl0Rm9yRXh0ZW5zaW9uSWZQcmVzZW50KHdpbiwgZXh0ZW5zaW9uLCB3aW4uZG9jdW1lbnQuaGVhZCkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIC8vIElmIHRoaXMgc2VydmljZSBpcyBwcm92aWRlZCBieSBhbiBlbGVtZW50LCB0aGVuIHdlIGNhbid0IGRlcGVuZCBvblxuICAgICAgICAvLyB0aGUgc2VydmljZSAodGhleSBtYXkgbm90IHVzZSB0aGUgZWxlbWVudCkuXG4gICAgICAgIGlmIChvcHRfZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbCh3aW4sIGlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnRTY2hlZHVsZWQod2luLCBleHRlbnNpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFNlcnZpY2VQcm9taXNlKHdpbiwgaWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5pbXBvcnQge0FtcEV2ZW50c30gZnJvbSAnLi9hbXAtZXZlbnRzJztcbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHtcbiAgVVNFUl9FUlJPUl9TRU5USU5FTCxcbiAgZGV2LFxuICBkdXBsaWNhdGVFcnJvcklmTmVjZXNzYXJ5LFxuICBpc1VzZXJFcnJvckVtYmVkLFxuICBpc1VzZXJFcnJvck1lc3NhZ2UsXG59IGZyb20gJy4vbG9nJztcbmltcG9ydCB7ZXhwZXJpbWVudFRvZ2dsZXNPck51bGwsIGdldEJpbmFyeVR5cGUsIGlzQ2FuYXJ5fSBmcm9tICcuL2V4cGVyaW1lbnRzJztcbmltcG9ydCB7ZXhwb25lbnRpYWxCYWNrb2ZmfSBmcm9tICcuL2V4cG9uZW50aWFsLWJhY2tvZmYnO1xuaW1wb3J0IHtnZXRNb2RlfSBmcm9tICcuL21vZGUnO1xuaW1wb3J0IHtpc0V4cGVyaW1lbnRPbn0gZnJvbSAnLi9leHBlcmltZW50cyc7XG5pbXBvcnQge1xuICBpc0xvYWRFcnJvck1lc3NhZ2UsXG59IGZyb20gJy4vZXZlbnQtaGVscGVyJztcbmltcG9ydCB7aXNQcm94eU9yaWdpbn0gZnJvbSAnLi91cmwnO1xuaW1wb3J0IHttYWtlQm9keVZpc2libGV9IGZyb20gJy4vc3R5bGUtaW5zdGFsbGVyJztcbmltcG9ydCB7c3RhcnRzV2l0aH0gZnJvbSAnLi9zdHJpbmcnO1xuaW1wb3J0IHt0cmlnZ2VyQW5hbHl0aWNzRXZlbnR9IGZyb20gJy4vYW5hbHl0aWNzJztcbmltcG9ydCB7dXJsc30gZnJvbSAnLi9jb25maWcnO1xuXG4vKipcbiAqIEBjb25zdCB7c3RyaW5nfVxuICovXG5jb25zdCBDQU5DRUxMRUQgPSAnQ0FOQ0VMTEVEJztcblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuY29uc3QgQkxPQ0tfQllfQ09OU0VOVCA9ICdCTE9DS19CWV9DT05TRU5UJztcblxuXG4vKipcbiAqIFRoZSB0aHJlc2hvbGQgZm9yIGVycm9ycyB0aHJvdHRsZWQgYmVjYXVzZSBub3RoaW5nIGNhbiBiZSBkb25lIGFib3V0XG4gKiB0aGVtLCBidXQgd2UnZCBzdGlsbCBsaWtlIHRvIHJlcG9ydCB0aGUgcm91Z2ggbnVtYmVyLlxuICogQGNvbnN0IHtudW1iZXJ9XG4gKi9cbmNvbnN0IE5PTl9BQ1RJT05BQkxFX0VSUk9SX1RIUk9UVExFX1RIUkVTSE9MRCA9IDAuMDAxO1xuXG4vKipcbiAqIFRoZSB0aHJlc2hvbGQgZm9yIGVycm9ycyB0aHJvdHRsZWQgYmVjYXVzZSBub3RoaW5nIGNhbiBiZSBkb25lIGFib3V0XG4gKiB0aGVtLCBidXQgd2UnZCBzdGlsbCBsaWtlIHRvIHJlcG9ydCB0aGUgcm91Z2ggbnVtYmVyLlxuICogQGNvbnN0IHtudW1iZXJ9XG4gKi9cbmNvbnN0IFVTRVJfRVJST1JfVEhST1RUTEVfVEhSRVNIT0xEID0gMC4xO1xuXG5cbi8qKlxuICogQ29sbGVjdHMgZXJyb3IgbWVzc2FnZXMsIHNvIHRoZXkgY2FuIGJlIGluY2x1ZGVkIGluIHN1YnNlcXVlbnQgcmVwb3J0cy5cbiAqIFRoYXQgYWxsb3dzIGlkZW50aWZ5aW5nIGVycm9ycyB0aGF0IG1pZ2h0IGJlIGNhdXNlZCBieSBwcmV2aW91cyBlcnJvcnMuXG4gKi9cbmxldCBhY2N1bXVsYXRlZEVycm9yTWVzc2FnZXMgPSBzZWxmLkFNUEVycm9ycyB8fCBbXTtcbi8vIFVzZSBhIHRydWUgZ2xvYmFsLCB0byBhdm9pZCBtdWx0aS1tb2R1bGUgaW5jbHVzaW9uIGlzc3Vlcy5cbnNlbGYuQU1QRXJyb3JzID0gYWNjdW11bGF0ZWRFcnJvck1lc3NhZ2VzO1xuXG4vKipcbiAqIFB1c2hlcyBlbGVtZW50IGludG8gYXJyYXksIGtlZXBpbmcgYXQgbW9zdCB0aGUgbW9zdCByZWNlbnQgbGltaXQgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0geyFBcnJheTxUPn0gYXJyYXlcbiAqIEBwYXJhbSB7VH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0XG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiBwdXNoTGltaXQoYXJyYXksIGVsZW1lbnQsIGxpbWl0KSB7XG4gIGlmIChhcnJheS5sZW5ndGggPj0gbGltaXQpIHtcbiAgICBhcnJheS5zcGxpY2UoMCwgYXJyYXkubGVuZ3RoIC0gbGltaXQgKyAxKTtcbiAgfVxuICBhcnJheS5wdXNoKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgb3VyIGV4cG9uZW50aWFsQmFja29mZiwgdG8gbGF6eSBpbml0aWFsaXplIGl0IHRvIGF2b2lkIGFuXG4gKiB1bi1EQ0UnYWJsZSBzaWRlLWVmZmVjdC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gd29yayB0aGUgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciBiYWNrb2ZmXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBzZXRUaW1lb3V0IGlkXG4gKi9cbmxldCByZXBvcnRpbmdCYWNrb2ZmID0gZnVuY3Rpb24od29yaykge1xuICAvLyBTZXQgcmVwb3J0aW5nQmFja29mZiBhcyB0aGUgbGF6eS1jcmVhdGVkIGZ1bmN0aW9uLiBKUyBWb29vZG9vb28uXG4gIHJlcG9ydGluZ0JhY2tvZmYgPSBleHBvbmVudGlhbEJhY2tvZmYoMS41KTtcbiAgcmV0dXJuIHJlcG9ydGluZ0JhY2tvZmYod29yayk7XG59O1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIHN0cmluZ2lmeSBhIHZhbHVlLCBmYWxsaW5nIGJhY2sgdG8gU3RyaW5nLlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0cnlKc29uU3RyaW5naWZ5KHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgLy8gQ2FzdCBpcyBmaW5lLCBiZWNhdXNlIHdlIHJlYWxseSBkb24ndCBjYXJlIGhlcmUuIEp1c3QgdHJ5aW5nLlxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSgvKiogQHR5cGUgeyFKc29uT2JqZWN0fSAqLyAodmFsdWUpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIHRydWUgSlMgZW5naW5lLCBhcyBkZXRlY3RlZCBieSBpbnNwZWN0aW5nIGFuIEVycm9yIHN0YWNrLiBUaGlzIHNob3VsZCBiZVxuICogdXNlZCB3aXRoIHRoZSB1c2VyQWdlbnQgdG8gdGVsbCBkZWZpbml0ZWx5LiBJLmUuLCBDaHJvbWUgb24gaU9TIGlzIHJlYWxseSBhXG4gKiBTYWZhcmkgSlMgZW5naW5lLlxuICovXG5sZXQgZGV0ZWN0ZWRKc0VuZ2luZTtcblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHsqfSBlcnJvclxuICogQHBhcmFtIHshRWxlbWVudD19IG9wdF9hc3NvY2lhdGVkRWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0RXJyb3JGb3JXaW4od2luLCBlcnJvciwgb3B0X2Fzc29jaWF0ZWRFbGVtZW50KSB7XG4gIHJlcG9ydEVycm9yKGVycm9yLCBvcHRfYXNzb2NpYXRlZEVsZW1lbnQpO1xuICBpZiAoZXJyb3IgJiYgISF3aW4gJiYgaXNVc2VyRXJyb3JNZXNzYWdlKGVycm9yLm1lc3NhZ2UpXG4gICAgICAmJiAhaXNVc2VyRXJyb3JFbWJlZChlcnJvci5tZXNzYWdlKSkge1xuICAgIHJlcG9ydEVycm9yVG9BbmFseXRpY3MoLyoqIEB0eXBlIHshRXJyb3J9ICovKGVycm9yKSwgd2luKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlcG9ydHMgYW4gZXJyb3IuIElmIHRoZSBlcnJvciBoYXMgYW4gXCJhc3NvY2lhdGVkRWxlbWVudFwiIHByb3BlcnR5XG4gKiB0aGUgZWxlbWVudCBpcyBtYXJrZWQgd2l0aCB0aGUgYGktYW1waHRtbC1lbGVtZW50LWVycm9yYCBhbmQgZGlzcGxheXNcbiAqIHRoZSBtZXNzYWdlIGl0c2VsZi4gVGhlIG1lc3NhZ2UgaXMgYWx3YXlzIHNlbmQgdG8gdGhlIGNvbnNvbGUuXG4gKiBJZiB0aGUgZXJyb3IgaGFzIGEgXCJtZXNzYWdlQXJyYXlcIiBwcm9wZXJ0eSwgdGhhdCBhcnJheSBpcyBsb2dnZWQuXG4gKiBUaGlzIHdheSBvbmUgZ2V0cyB0aGUgbmF0aXZlIGZpZGVsaXR5IG9mIHRoZSBjb25zb2xlIGZvciB0aGluZ3MgbGlrZVxuICogZWxlbWVudHMgaW5zdGVhZCBvZiBzdHJpbmdpZmljYXRpb24uXG4gKiBAcGFyYW0geyp9IGVycm9yXG4gKiBAcGFyYW0geyFFbGVtZW50PX0gb3B0X2Fzc29jaWF0ZWRFbGVtZW50XG4gKiBAcmV0dXJuIHshRXJyb3J9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRFcnJvcihlcnJvciwgb3B0X2Fzc29jaWF0ZWRFbGVtZW50KSB7XG4gIHRyeSB7XG4gICAgLy8gQ29udmVydCBlcnJvciB0byB0aGUgZXhwZWN0ZWQgdHlwZS5cbiAgICBsZXQgaXNWYWxpZEVycm9yO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlcnJvciA9IGR1cGxpY2F0ZUVycm9ySWZOZWNlc3NhcnkoLyoqIEB0eXBlIHshRXJyb3J9ICovKGVycm9yKSk7XG4gICAgICAgIGlzVmFsaWRFcnJvciA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvcmlnRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IodHJ5SnNvblN0cmluZ2lmeShvcmlnRXJyb3IpKTtcbiAgICAgICAgZXJyb3Iub3JpZ0Vycm9yID0gb3JpZ0Vycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignVW5rbm93biBlcnJvcicpO1xuICAgIH1cbiAgICAvLyBSZXBvcnQgaWYgZXJyb3IgaXMgbm90IGFuIGV4cGVjdGVkIHR5cGUuXG4gICAgaWYgKCFpc1ZhbGlkRXJyb3IgJiYgZ2V0TW9kZSgpLmxvY2FsRGV2ICYmICFnZXRNb2RlKCkudGVzdCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgcmV0aHJvdyA9IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdfcmVwb3J0ZWRfIEVycm9yIHJlcG9ydGVkIGluY29ycmVjdGx5OiAnICsgZXJyb3IpO1xuICAgICAgICB0aHJvdyByZXRocm93O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yLnJlcG9ydGVkKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHshRXJyb3J9ICovIChlcnJvcik7XG4gICAgfVxuICAgIGVycm9yLnJlcG9ydGVkID0gdHJ1ZTtcblxuICAgIC8vIFVwZGF0ZSBlbGVtZW50LlxuICAgIGNvbnN0IGVsZW1lbnQgPSBvcHRfYXNzb2NpYXRlZEVsZW1lbnQgfHwgZXJyb3IuYXNzb2NpYXRlZEVsZW1lbnQ7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaS1hbXBodG1sLWVycm9yJyk7XG4gICAgICBpZiAoZ2V0TW9kZSgpLmRldmVsb3BtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaS1hbXBodG1sLWVsZW1lbnQtZXJyb3InKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Vycm9yLW1lc3NhZ2UnLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXBvcnQgdG8gY29uc29sZS5cbiAgICBpZiAoc2VsZi5jb25zb2xlKSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSAoY29uc29sZS5lcnJvciB8fCBjb25zb2xlLmxvZyk7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZUFycmF5KSB7XG4gICAgICAgIG91dHB1dC5hcHBseShjb25zb2xlLCBlcnJvci5tZXNzYWdlQXJyYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBvdXRwdXQuY2FsbChjb25zb2xlLCBlcnJvci5tZXNzYWdlLCBlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICghZ2V0TW9kZSgpLm1pbmlmaWVkKSB7XG4gICAgICAgICAgb3V0cHV0LmNhbGwoY29uc29sZSwgZXJyb3Iuc3RhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dC5jYWxsKGNvbnNvbGUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuZGlzcGF0Y2hDdXN0b21FdmVudEZvclRlc3RpbmcpIHtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hDdXN0b21FdmVudEZvclRlc3RpbmcoQW1wRXZlbnRzLkVSUk9SLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvLyAnY2FsbCcgdG8gbWFrZSBsaW50ZXIgaGFwcHkuIEFuZCAuY2FsbCB0byBtYWtlIGNvbXBpbGVyIGhhcHB5XG4gICAgLy8gdGhhdCBleHBlY3RzIHNvbWUgQHRoaXMuXG4gICAgcmVwb3J0RXJyb3JUb1NlcnZlclsnY2FsbCddKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCxcbiAgICAgICAgdW5kZWZpbmVkLCBlcnJvcik7XG4gIH0gY2F0Y2ggKGVycm9yUmVwb3J0aW5nRXJyb3IpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgZXJyb3JSZXBvcnRpbmdFcnJvcjtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHshRXJyb3J9ICovIChlcnJvcik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBlcnJvciBmb3IgYSBjYW5jZWxsYXRpb24gb2YgYSBwcm9taXNlLlxuICogQHJldHVybiB7IUVycm9yfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsbGF0aW9uKCkge1xuICByZXR1cm4gbmV3IEVycm9yKENBTkNFTExFRCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBlcnJvck9yTWVzc2FnZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FuY2VsbGF0aW9uKGVycm9yT3JNZXNzYWdlKSB7XG4gIGlmICghZXJyb3JPck1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvck9yTWVzc2FnZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdGFydHNXaXRoKGVycm9yT3JNZXNzYWdlLCBDQU5DRUxMRUQpO1xuICB9XG4gIGlmICh0eXBlb2YgZXJyb3JPck1lc3NhZ2UubWVzc2FnZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdGFydHNXaXRoKGVycm9yT3JNZXNzYWdlLm1lc3NhZ2UsIENBTkNFTExFRCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gZXJyb3IgZm9yIGNvbXBvbmVudCBibG9ja2VkIGJ5IGNvbnNlbnRcbiAqIEByZXR1cm4geyFFcnJvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrZWRCeUNvbnNlbnRFcnJvcigpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihCTE9DS19CWV9DT05TRU5UKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyp9IGVycm9yT3JNZXNzYWdlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCbG9ja2VkQnlDb25zZW50KGVycm9yT3JNZXNzYWdlKSB7XG4gIGlmICghZXJyb3JPck1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvck9yTWVzc2FnZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdGFydHNXaXRoKGVycm9yT3JNZXNzYWdlLCBCTE9DS19CWV9DT05TRU5UKTtcbiAgfVxuICBpZiAodHlwZW9mIGVycm9yT3JNZXNzYWdlLm1lc3NhZ2UgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RhcnRzV2l0aChlcnJvck9yTWVzc2FnZS5tZXNzYWdlLCBCTE9DS19CWV9DT05TRU5UKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBJbnN0YWxsIGhhbmRsaW5nIG9mIGdsb2JhbCB1bmhhbmRsZWQgZXhjZXB0aW9ucy5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsRXJyb3JSZXBvcnRpbmcod2luKSB7XG4gIHdpbi5vbmVycm9yID0gLyoqIEB0eXBlIHshRnVuY3Rpb259ICovIChyZXBvcnRFcnJvclRvU2VydmVyKTtcbiAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnQucmVhc29uICYmXG4gICAgICAoZXZlbnQucmVhc29uLm1lc3NhZ2UgPT09IENBTkNFTExFRCB8fFxuICAgICAgZXZlbnQucmVhc29uLm1lc3NhZ2UgPT09IEJMT0NLX0JZX0NPTlNFTlQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXBvcnRFcnJvcihldmVudC5yZWFzb24gfHwgbmV3IEVycm9yKCdyZWplY3RlZCBwcm9taXNlICcgKyBldmVudCkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTaWduYXR1cmUgZGVzaWduZWQsIHNvIGl0IGNhbiB3b3JrIHdpdGggd2luZG93Lm9uZXJyb3JcbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gbWVzc2FnZVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBsaW5lXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGNvbFxuICogQHBhcmFtIHsqfHVuZGVmaW5lZH0gZXJyb3JcbiAqIEB0aGlzIHshV2luZG93fHVuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gcmVwb3J0RXJyb3JUb1NlcnZlcihtZXNzYWdlLCBmaWxlbmFtZSwgbGluZSwgY29sLCBlcnJvcikge1xuICAvLyBNYWtlIGFuIGF0dGVtcHQgdG8gdW5oaWRlIHRoZSBib2R5LlxuICBpZiAodGhpcyAmJiB0aGlzLmRvY3VtZW50KSB7XG4gICAgbWFrZUJvZHlWaXNpYmxlKHRoaXMuZG9jdW1lbnQpO1xuICB9XG4gIGlmIChnZXRNb2RlKCkubG9jYWxEZXYgfHwgZ2V0TW9kZSgpLmRldmVsb3BtZW50IHx8IGdldE1vZGUoKS50ZXN0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBoYXNOb25BbXBKcyA9IGZhbHNlO1xuICB0cnkge1xuICAgIGhhc05vbkFtcEpzID0gZGV0ZWN0Tm9uQW1wSnMoc2VsZik7XG4gIH0gY2F0Y2ggKGlnbm9yZSkge1xuICAgIC8vIElnbm9yZSBlcnJvcnMgZHVyaW5nIGVycm9yIHJlcG9ydCBnZW5lcmF0aW9uLlxuICB9XG4gIGlmIChoYXNOb25BbXBKcyAmJiBNYXRoLnJhbmRvbSgpID4gMC4wMSkge1xuICAgIC8vIE9ubHkgcmVwb3J0IDElIG9mIGVycm9ycyBvbiBwYWdlcyB3aXRoIG5vbi1BTVAgSlMuXG4gICAgLy8gVGhlc2UgZXJyb3JzIGNhbiBhbG1vc3QgbmV2ZXIgYmUgYWN0ZWQgdXBvbiwgYnV0IHNwaWtlcyBzdWNoIGFzXG4gICAgLy8gZHVlIHRvIGJ1Z2d5IGJyb3dzZXIgZXh0ZW5zaW9ucyBtYXkgYmUgaGVscGZ1bCB0byBub3RpZnkgYXV0aG9ycy5cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZGF0YSA9IGdldEVycm9yUmVwb3J0RGF0YShtZXNzYWdlLCBmaWxlbmFtZSwgbGluZSwgY29sLCBlcnJvcixcbiAgICAgIGhhc05vbkFtcEpzKTtcbiAgaWYgKGRhdGEpIHtcbiAgICAvLyBSZXBvcnQgdGhlIGVycm9yIHRvIHZpZXdlciBpZiBpdCBoYXMgdGhlIGNhcGFiaWxpdHkuIFRoZSBkYXRhIHBhc3NlZFxuICAgIC8vIHRvIHRoZSB2aWV3ZXIgaXMgZXhhY3RseSB0aGUgc2FtZSBhcyB0aGUgZGF0YSBwYXNzZWQgdG8gdGhlIHNlcnZlclxuICAgIC8vIGJlbG93LlxuICAgIG1heWJlUmVwb3J0RXJyb3JUb1ZpZXdlcih0aGlzLCBkYXRhKTtcbiAgICByZXBvcnRpbmdCYWNrb2ZmKCgpID0+IHtcbiAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmxzLmVycm9yUmVwb3J0aW5nLCB0cnVlKTtcbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFBhc3NlcyB0aGUgZ2l2ZW4gZXJyb3IgZGF0YSB0byB0aGUgdmlld2VyIGlmIHRoZSBmb2xsb3dpbmcgY3JpdGVyaWEgaXMgbWV0OlxuICogLSBUaGUgdmlld2VyIGlzIGEgdHJ1c3RlZCB2aWV3ZXJcbiAqIC0gVGhlIHZpZXdlciBoYXMgdGhlIGBlcnJvclJlcG9ydGVyYCBjYXBhYmlsaXR5XG4gKiAtIFRoZSBBTVAgZG9jIGlzIGluIHNpbmdsZSBkb2MgbW9kZVxuICogLSBUaGUgQU1QIGRvYyBpcyBvcHRlZC1pbiBmb3IgZXJyb3IgaW50ZXJjZXB0aW9uIChgPGh0bWw+YCB0YWcgaGFzIHRoZVxuICogICBgcmVwb3J0LWVycm9ycy10by12aWV3ZXJgIGF0dHJpYnV0ZSlcbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshSnNvbk9iamVjdH0gZGF0YSBEYXRhIGZyb20gYGdldEVycm9yUmVwb3J0RGF0YWAuXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxib29sZWFuPn0gYFByb21pc2U8VHJ1ZT5gIGlmIHRoZSBlcnJvciB3YXMgc2VudCB0byB0aGVcbiAqICAgICB2aWV3ZXIsIGBQcm9taXNlPEZhbHNlPmAgb3RoZXJ3aXNlLlxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXliZVJlcG9ydEVycm9yVG9WaWV3ZXIod2luLCBkYXRhKSB7XG4gIGNvbnN0IGFtcGRvY1NlcnZpY2UgPSBTZXJ2aWNlcy5hbXBkb2NTZXJ2aWNlRm9yKHdpbik7XG4gIGlmICghYW1wZG9jU2VydmljZS5pc1NpbmdsZURvYygpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gIH1cbiAgY29uc3QgYW1wZG9jU2luZ2xlID0gYW1wZG9jU2VydmljZS5nZXRBbXBEb2MoKTtcbiAgY29uc3QgaHRtbEVsZW1lbnQgPSBhbXBkb2NTaW5nbGUuZ2V0Um9vdE5vZGUoKS5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IGRvY09wdGVkSW4gPSBodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlcG9ydC1lcnJvcnMtdG8tdmlld2VyJyk7XG4gIGlmICghZG9jT3B0ZWRJbikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICB9XG5cbiAgY29uc3Qgdmlld2VyID0gU2VydmljZXMudmlld2VyRm9yRG9jKGFtcGRvY1NpbmdsZSk7XG4gIGlmICghdmlld2VyLmhhc0NhcGFiaWxpdHkoJ2Vycm9yUmVwb3J0ZXInKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIHZpZXdlci5pc1RydXN0ZWRWaWV3ZXIoKS50aGVuKHZpZXdlclRydXN0ZWQgPT4ge1xuICAgIGlmICghdmlld2VyVHJ1c3RlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2aWV3ZXIuc2VuZE1lc3NhZ2UoJ2Vycm9yJywgZGF0YSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNpZ25hdHVyZSBkZXNpZ25lZCwgc28gaXQgY2FuIHdvcmsgd2l0aCB3aW5kb3cub25lcnJvclxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSBtZXNzYWdlXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ3x1bmRlZmluZWR9IGxpbmVcbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gY29sXG4gKiBAcGFyYW0geyp8dW5kZWZpbmVkfSBlcnJvclxuICogQHBhcmFtIHtib29sZWFufSBoYXNOb25BbXBKc1xuICogQHJldHVybiB7IUpzb25PYmplY3R8dW5kZWZpbmVkfSBUaGUgZGF0YSB0byBwb3N0XG4gKiB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JSZXBvcnREYXRhKG1lc3NhZ2UsIGZpbGVuYW1lLCBsaW5lLCBjb2wsIGVycm9yLFxuICBoYXNOb25BbXBKcykge1xuICBsZXQgZXhwZWN0ZWQgPSBmYWxzZTtcbiAgaWYgKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBiZSBhIHN0cmluZywgYnV0IHNvbWV0aW1lcyBpdCBpcy5cbiAgICAgIG1lc3NhZ2UgPSBTdHJpbmcoZXJyb3IpO1xuICAgIH1cbiAgICAvLyBBbiBcImV4cGVjdGVkXCIgZXJyb3IgaXMgc3RpbGwgYW4gZXJyb3IsIGkuZS4gc29tZSBmZWF0dXJlcyBhcmUgZGlzYWJsZWRcbiAgICAvLyBvciBub3QgZnVuY3Rpb25pbmcgZnVsbHkgYmVjYXVzZSBvZiBpdC4gSG93ZXZlciwgaXQncyBhbiBleHBlY3RlZFxuICAgIC8vIGVycm9yLiBFLmcuIGFzIGlzIHRoZSBjYXNlIHdpdGggc29tZSBicm93c2VyIEFQSSBtaXNzaW5nIChzdG9yYWdlKS5cbiAgICAvLyBUaHVzLCB0aGUgZXJyb3IgY2FuIGJlIGNsYXNzaWZpZWQgZGlmZmVyZW50bHkgYnkgbG9nIGFnZ3JlZ2F0b3JzLlxuICAgIC8vIFRoZSBtYWluIGdvYWwgaXMgdG8gbW9uaXRvciB0aGF0IGFuIFwiZXhwZWN0ZWRcIiBlcnJvciBkb2Vzbid0IGRldGVyaW9yYXRlXG4gICAgLy8gb3ZlciB0aW1lLiBJdCdzIGltcG9zc2libGUgdG8gY29tcGxldGVseSBlbGltaW5hdGUgaXQuXG4gICAgaWYgKGVycm9yLmV4cGVjdGVkKSB7XG4gICAgICBleHBlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmICghbWVzc2FnZSkge1xuICAgIG1lc3NhZ2UgPSAnVW5rbm93biBlcnJvcic7XG4gIH1cbiAgaWYgKC9fcmVwb3J0ZWRfLy50ZXN0KG1lc3NhZ2UpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtZXNzYWdlID09IENBTkNFTExFRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGRldGFjaGVkV2luZG93ID0gIShzZWxmICYmIHNlbGYud2luZG93KTtcbiAgY29uc3QgdGhyb3R0bGVCYXNlID0gTWF0aC5yYW5kb20oKTtcblxuICAvLyBXZSB0aHJvdHRsZSBsb2FkIGVycm9ycyBhbmQgZ2VuZXJpYyBcIlNjcmlwdCBlcnJvci5cIiBlcnJvcnNcbiAgLy8gdGhhdCBoYXZlIG5vIGluZm9ybWF0aW9uIGFuZCB0aHVzIGNhbm5vdCBiZSBhY3RlZCB1cG9uLlxuICBpZiAoaXNMb2FkRXJyb3JNZXNzYWdlKG1lc3NhZ2UpIHx8XG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwvaXNzdWVzLzczNTNcbiAgICAvLyBmb3IgY29udGV4dC5cbiAgICBtZXNzYWdlID09ICdTY3JpcHQgZXJyb3IuJyB8fFxuICAgIC8vIFdpbmRvdyBoYXMgYmVjb21lIGRldGFjaGVkLCByZWFsbHkgYW55dGhpbmcgY2FuIGhhcHBlblxuICAgIC8vIGF0IHRoaXMgcG9pbnQuXG4gICAgZGV0YWNoZWRXaW5kb3cpIHtcbiAgICBleHBlY3RlZCA9IHRydWU7XG5cbiAgICBpZiAodGhyb3R0bGVCYXNlID4gTk9OX0FDVElPTkFCTEVfRVJST1JfVEhST1RUTEVfVEhSRVNIT0xEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXNVc2VyRXJyb3IgPSBpc1VzZXJFcnJvck1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgLy8gT25seSByZXBvcnQgYSBzdWJzZXQgb2YgdXNlciBlcnJvcnMuXG4gIGlmIChpc1VzZXJFcnJvciAmJiB0aHJvdHRsZUJhc2UgPiBVU0VSX0VSUk9SX1RIUk9UVExFX1RIUkVTSE9MRCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgdGhlIEFwcCBFbmdpbmUgYXBwIGluXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2Vycm9yLXRyYWNrZXJcbiAgLy8gSXQgc3RvcmVzIGVycm9yIHJlcG9ydHMgdmlhIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9lcnJvci1yZXBvcnRpbmcvXG4gIC8vIGZvciBhbmFseXppbmcgcHJvZHVjdGlvbiBpc3N1ZXMuXG4gIGNvbnN0IGRhdGEgPSAvKiogQHR5cGUgeyFKc29uT2JqZWN0fSAqLyAoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIGRhdGFbJ3YnXSA9IGdldE1vZGUoKS5ydHZWZXJzaW9uO1xuICBkYXRhWydub0FtcCddID0gaGFzTm9uQW1wSnMgPyAnMScgOiAnMCc7XG4gIGRhdGFbJ20nXSA9IG1lc3NhZ2UucmVwbGFjZShVU0VSX0VSUk9SX1NFTlRJTkVMLCAnJyk7XG4gIGRhdGFbJ2EnXSA9IGlzVXNlckVycm9yID8gJzEnIDogJzAnO1xuXG4gIC8vIEVycm9ycyBhcmUgdGFnZ2VkIHdpdGggXCJleFwiIChcImV4cGVjdGVkXCIpIGxhYmVsIHRvIGFsbG93IGxvZ2dlcnMgdG9cbiAgLy8gY2xhc3NpZnkgdGhlc2UgZXJyb3JzIGFzIGJlbmNobWFya3MgYW5kIG5vdCBleGNlcHRpb25zLlxuICBkYXRhWydleCddID0gZXhwZWN0ZWQgPyAnMScgOiAnMCc7XG4gIGRhdGFbJ2R3J10gPSBkZXRhY2hlZFdpbmRvdyA/ICcxJyA6ICcwJztcblxuICBsZXQgcnVudGltZSA9ICcxcCc7XG4gIGlmIChzZWxmLmNvbnRleHQgJiYgc2VsZi5jb250ZXh0LmxvY2F0aW9uKSB7XG4gICAgZGF0YVsnM3AnXSA9ICcxJztcbiAgICBydW50aW1lID0gJzNwJztcbiAgfSBlbHNlIGlmIChnZXRNb2RlKCkucnVudGltZSkge1xuICAgIHJ1bnRpbWUgPSBnZXRNb2RlKCkucnVudGltZTtcbiAgfVxuICBkYXRhWydydCddID0gcnVudGltZTtcblxuICAvLyBUT0RPKGVyd2lubSk6IFJlbW92ZSBjYSB3aGVuIGFsbCBzeXN0ZW1zIHJlYWQgYGJ0YCBpbnN0ZWFkIG9mIGBjYWAgdG9cbiAgLy8gaWRlbnRpZnkganMgYmluYXJ5IHR5cGUuXG4gIGRhdGFbJ2NhJ10gPSBpc0NhbmFyeShzZWxmKSA/ICcxJyA6ICcwJztcblxuICAvLyBQYXNzIGJpbmFyeSB0eXBlLlxuICBkYXRhWydidCddID0gZ2V0QmluYXJ5VHlwZShzZWxmKTtcblxuICBpZiAoc2VsZi5sb2NhdGlvbi5hbmNlc3Rvck9yaWdpbnMgJiYgc2VsZi5sb2NhdGlvbi5hbmNlc3Rvck9yaWdpbnNbMF0pIHtcbiAgICBkYXRhWydvciddID0gc2VsZi5sb2NhdGlvbi5hbmNlc3Rvck9yaWdpbnNbMF07XG4gIH1cbiAgaWYgKHNlbGYudmlld2VyU3RhdGUpIHtcbiAgICBkYXRhWyd2cyddID0gc2VsZi52aWV3ZXJTdGF0ZTtcbiAgfVxuICAvLyBJcyBlbWJlZGRlZD9cbiAgaWYgKHNlbGYucGFyZW50ICYmIHNlbGYucGFyZW50ICE9IHNlbGYpIHtcbiAgICBkYXRhWydpZW0nXSA9ICcxJztcbiAgfVxuXG4gIGlmIChzZWxmLkFNUCAmJiBzZWxmLkFNUC52aWV3ZXIpIHtcbiAgICBjb25zdCByZXNvbHZlZFZpZXdlclVybCA9IHNlbGYuQU1QLnZpZXdlci5nZXRSZXNvbHZlZFZpZXdlclVybCgpO1xuICAgIGNvbnN0IG1lc3NhZ2luZ09yaWdpbiA9IHNlbGYuQU1QLnZpZXdlci5tYXliZUdldE1lc3NhZ2luZ09yaWdpbigpO1xuICAgIGlmIChyZXNvbHZlZFZpZXdlclVybCkge1xuICAgICAgZGF0YVsncnZ1J10gPSByZXNvbHZlZFZpZXdlclVybDtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2luZ09yaWdpbikge1xuICAgICAgZGF0YVsnbXNvJ10gPSBtZXNzYWdpbmdPcmlnaW47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFkZXRlY3RlZEpzRW5naW5lKSB7XG4gICAgZGV0ZWN0ZWRKc0VuZ2luZSA9IGRldGVjdEpzRW5naW5lRnJvbVN0YWNrKCk7XG4gIH1cbiAgZGF0YVsnanNlJ10gPSBkZXRlY3RlZEpzRW5naW5lO1xuXG4gIGNvbnN0IGV4cHMgPSBbXTtcbiAgY29uc3QgZXhwZXJpbWVudHMgPSBleHBlcmltZW50VG9nZ2xlc09yTnVsbChzZWxmKTtcbiAgZm9yIChjb25zdCBleHAgaW4gZXhwZXJpbWVudHMpIHtcbiAgICBjb25zdCBvbiA9IGV4cGVyaW1lbnRzW2V4cF07XG4gICAgZXhwcy5wdXNoKGAke2V4cH09JHtvbiA/ICcxJyA6ICcwJ31gKTtcbiAgfVxuICBkYXRhWydleHBzJ10gPSBleHBzLmpvaW4oJywnKTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zdCB0YWdOYW1lID0gZXJyb3IuYXNzb2NpYXRlZEVsZW1lbnRcbiAgICAgID8gZXJyb3IuYXNzb2NpYXRlZEVsZW1lbnQudGFnTmFtZVxuICAgICAgOiAndSc7IC8vIFVua25vd25cbiAgICBkYXRhWydlbCddID0gdGFnTmFtZTtcblxuICAgIGlmIChlcnJvci5hcmdzKSB7XG4gICAgICBkYXRhWydhcmdzJ10gPSBKU09OLnN0cmluZ2lmeShlcnJvci5hcmdzKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVXNlckVycm9yICYmICFlcnJvci5pZ25vcmVTdGFjayAmJiBlcnJvci5zdGFjaykge1xuICAgICAgZGF0YVsncyddID0gZXJyb3Iuc3RhY2s7XG4gICAgfVxuXG4gICAgZXJyb3IubWVzc2FnZSArPSAnIF9yZXBvcnRlZF8nO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbJ2YnXSA9IGZpbGVuYW1lIHx8ICcnO1xuICAgIGRhdGFbJ2wnXSA9IGxpbmUgfHwgJyc7XG4gICAgZGF0YVsnYyddID0gY29sIHx8ICcnO1xuICB9XG4gIGRhdGFbJ3InXSA9IHNlbGYuZG9jdW1lbnQucmVmZXJyZXI7XG4gIGRhdGFbJ2FlJ10gPSBhY2N1bXVsYXRlZEVycm9yTWVzc2FnZXMuam9pbignLCcpO1xuICBkYXRhWydmciddID0gc2VsZi5sb2NhdGlvbi5vcmlnaW5hbEhhc2ggfHwgc2VsZi5sb2NhdGlvbi5oYXNoO1xuXG4gIHB1c2hMaW1pdChhY2N1bXVsYXRlZEVycm9yTWVzc2FnZXMsIG1lc3NhZ2UsIDI1KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgaXQgYXBwZWFycyBsaWtlIHRoZXJlIGlzIG5vbi1BTVAgSlMgb24gdGhlXG4gKiBjdXJyZW50IHBhZ2UuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0Tm9uQW1wSnMod2luKSB7XG4gIGNvbnN0IHNjcmlwdHMgPSB3aW4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0W3NyY10nKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFpc1Byb3h5T3JpZ2luKHNjcmlwdHNbaV0uc3JjLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJlc2V0cyBhY2N1bXVsYXRlZCBlcnJvciBtZXNzYWdlcyBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBY2N1bXVsYXRlZEVycm9yTWVzc2FnZXNGb3JUZXN0aW5nKCkge1xuICBhY2N1bXVsYXRlZEVycm9yTWVzc2FnZXMgPSBbXTtcbn1cblxuLyoqXG4gKiBEb2VzIGEgc2VyaWVzIG9mIGNoZWNrcyBvbiB0aGUgc3RhY2sgb2YgYW4gdGhyb3duIGVycm9yIHRvIGRldGVybWluZSB0aGVcbiAqIEpTIGVuZ2luZSB0aGF0IGlzIGN1cnJlbnRseSBydW5uaW5nLiBUaGlzIGdpdmVzIGEgYml0IG1vcmUgaW5mb3JtYXRpb24gdGhhblxuICoganVzdCB0aGUgVXNlckFnZW50LCBzaW5jZSBicm93c2VycyBvZnRlbiBhbGxvdyBvdmVycmlkaW5nIGl0IHRvIFwiZW11bGF0ZVwiXG4gKiBtb2JpbGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEpzRW5naW5lRnJvbVN0YWNrKCkge1xuICAvKiogQGNvbnN0cnVjdG9yICovXG4gIGZ1bmN0aW9uIEZuKCkge31cbiAgRm4ucHJvdG90eXBlLnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UnKTtcbiAgfTtcbiAgY29uc3Qgb2JqZWN0ID0gbmV3IEZuKCk7XG4gIHRyeSB7XG4gICAgb2JqZWN0LnQoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IHtzdGFja30gPSBlO1xuXG4gICAgLy8gU2FmYXJpIG9ubHkgbWVudGlvbnMgdGhlIG1ldGhvZCBuYW1lLlxuICAgIGlmIChzdGFydHNXaXRoKHN0YWNrLCAndEAnKSkge1xuICAgICAgcmV0dXJuICdTYWZhcmknO1xuICAgIH1cblxuICAgIC8vIEZpcmVmb3ggbWVudGlvbnMgXCJwcm90b3R5cGVcIi5cbiAgICBpZiAoc3RhY2suaW5kZXhPZignLnByb3RvdHlwZS50QCcpID4gLTEpIHtcbiAgICAgIHJldHVybiAnRmlyZWZveCc7XG4gICAgfVxuXG4gICAgLy8gSUUgbG9va3MgbGlrZSBDaHJvbWUsIGJ1dCBpbmNsdWRlcyBhIGNvbnRleHQgZm9yIHRoZSBiYXNlIHN0YWNrIGxpbmUuXG4gICAgLy8gRXhwbGljaXRseSwgd2UncmUgbG9va2luZyBmb3Igc29tZXRoaW5nIGxpa2U6XG4gICAgLy8gXCIgICAgYXQgR2xvYmFsIGNvZGUgKGh0dHBzOi8vZXhhbXBsZS5jb20vYXBwLmpzOjE6MjAwKVwiIG9yXG4gICAgLy8gXCIgICAgYXQgQW5vbnltb3VzIGZ1bmN0aW9uIChodHRwczovL2V4YW1wbGUuY29tL2FwcC5qczoxOjIwMClcIlxuICAgIC8vIHZzIENocm9tZSB3aGljaCBoYXM6XG4gICAgLy8gXCIgICAgYXQgaHR0cHM6Ly9leGFtcGxlLmNvbS9hcHAuanM6MToyMDBcIlxuICAgIGNvbnN0IGxhc3QgPSBzdGFjay5zcGxpdCgnXFxuJykucG9wKCk7XG4gICAgaWYgKC9cXGJhdCAuKiBcXCgvaS50ZXN0KGxhc3QpKSB7XG4gICAgICByZXR1cm4gJ0lFJztcbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBjaHJvbWUgaW5jbHVkZXMgdGhlIGVycm9yIG1lc3NhZ2UgaW4gdGhlIHN0YWNrLlxuICAgIGlmIChzdGFydHNXaXRoKHN0YWNrLCAnRXJyb3I6IG1lc3NhZ2UnKSkge1xuICAgICAgcmV0dXJuICdDaHJvbWUnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAndW5rbm93bic7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0RXJyb3JUb0FuYWx5dGljcyhlcnJvciwgd2luKSB7XG4gIGlmIChpc0V4cGVyaW1lbnRPbih3aW4sICd1c2VyLWVycm9yLXJlcG9ydGluZycpKSB7XG4gICAgY29uc3QgdmFycyA9IHtcbiAgICAgICdlcnJvck5hbWUnOiBlcnJvci5uYW1lLFxuICAgICAgJ2Vycm9yTWVzc2FnZSc6IGVycm9yLm1lc3NhZ2UsXG4gICAgfTtcbiAgICB0cmlnZ2VyQW5hbHl0aWNzRXZlbnQoZ2V0Um9vdEVsZW1lbnRfKHdpbiksICd1c2VyLWVycm9yJywgdmFycyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7IUVsZW1lbnR9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRSb290RWxlbWVudF8od2luKSB7XG4gIGNvbnN0IHJvb3QgPSBTZXJ2aWNlcy5hbXBkb2NTZXJ2aWNlRm9yKHdpbikuZ2V0QW1wRG9jKCkuZ2V0Um9vdE5vZGUoKTtcbiAgcmV0dXJuIGRldigpLmFzc2VydEVsZW1lbnQocm9vdC5kb2N1bWVudEVsZW1lbnQgfHwgcm9vdC5ib2R5IHx8IHJvb3QpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICAqIFdoZXRoZXIgYWRkRXZlbnRMaXN0ZW5lciBzdXBwb3J0cyBvcHRpb25zIG9yIG9ubHkgdGFrZXMgY2FwdHVyZSBhcyBhIGJvb2xlYW5cbiAgKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gICogQHZpc2libGVGb3JUZXN0aW5nXG4gICovXG5sZXQgb3B0c1N1cHBvcnRlZDtcblxuLyoqXG4gKiBMaXN0ZW5zIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50IG9uIHRoZSBlbGVtZW50LlxuICpcbiAqIERvIG5vdCB1c2UgdGhpcyBkaXJlY3RseS4gVGhpcyBtZXRob2QgaXMgaW1wbGVtZW50ZWQgYXMgYSBzaGFyZWRcbiAqIGRlcGVuZGVuY3kuIFVzZSBgbGlzdGVuKClgIGluIGVpdGhlciBgZXZlbnQtaGVscGVyYCBvciBgM3AtZnJhbWUtbWVzc2FnaW5nYCxcbiAqIGRlcGVuZGluZyBvbiB5b3VyIHVzZSBjYXNlLlxuICpcbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGxpc3RlbmVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9ldnRMaXN0ZW5lck9wdHNcbiAqIEByZXR1cm4geyFVbmxpc3RlbkRlZn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsTGlzdGVuSW1wbGVtZW50YXRpb24oZWxlbWVudCwgZXZlbnRUeXBlLCBsaXN0ZW5lcixcbiAgb3B0X2V2dExpc3RlbmVyT3B0cykge1xuICBsZXQgbG9jYWxFbGVtZW50ID0gZWxlbWVudDtcbiAgbGV0IGxvY2FsTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgLyoqXG4gICAqIEB0eXBlIHs/RnVuY3Rpb259XG4gICAqL1xuICBsZXQgd3JhcHBlZDtcblxuICB3cmFwcGVkID0gZXZlbnQgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbG9jYWxMaXN0ZW5lcihldmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gcmVwb3J0RXJyb3IgaXMgaW5zdGFsbGVkIGdsb2JhbGx5IHBlciB3aW5kb3cgaW4gdGhlIGVudHJ5IHBvaW50LlxuICAgICAgc2VsZi5yZXBvcnRFcnJvcihlKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcHRzU3VwcG9ydGVkID0gZGV0ZWN0RXZ0TGlzdGVuZXJPcHRzU3VwcG9ydCgpO1xuICBsZXQgY2FwdHVyZSA9IGZhbHNlO1xuICBpZiAob3B0X2V2dExpc3RlbmVyT3B0cykge1xuICAgIGNhcHR1cmUgPSBvcHRfZXZ0TGlzdGVuZXJPcHRzLmNhcHR1cmU7XG4gIH1cbiAgbG9jYWxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBldmVudFR5cGUsXG4gICAgICB3cmFwcGVkLFxuICAgICAgb3B0c1N1cHBvcnRlZCA/IG9wdF9ldnRMaXN0ZW5lck9wdHMgOiBjYXB0dXJlXG4gICk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKGxvY2FsRWxlbWVudCkge1xuICAgICAgbG9jYWxFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICAgIHdyYXBwZWQsXG4gICAgICAgICAgb3B0c1N1cHBvcnRlZCA/IG9wdF9ldnRMaXN0ZW5lck9wdHMgOiBjYXB0dXJlXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlc2UgYXJlIEdDJ2RcbiAgICBsb2NhbExpc3RlbmVyID0gbnVsbDtcbiAgICBsb2NhbEVsZW1lbnQgPSBudWxsO1xuICAgIHdyYXBwZWQgPSBudWxsO1xuICB9O1xufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgdGhlIGJyb3dzZXIgc3VwcG9ydHMgb3B0aW9ucyBhcyBhbiBhcmd1bWVudCBvZiBhZGRFdmVudExpc3RlbmVyXG4gKiBvciBub3QuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEV2dExpc3RlbmVyT3B0c1N1cHBvcnQoKSB7XG4gIC8vIE9ubHkgcnVuIHRoZSB0ZXN0IG9uY2VcbiAgaWYgKG9wdHNTdXBwb3J0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBvcHRzU3VwcG9ydGVkO1xuICB9XG5cbiAgb3B0c1N1cHBvcnRlZCA9IGZhbHNlO1xuICB0cnkge1xuICAgIC8vIFRlc3Qgd2hldGhlciBicm93c2VyIHN1cHBvcnRzIEV2ZW50TGlzdGVuZXJPcHRpb25zIG9yIG5vdFxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBnZXQgY2FwdHVyZSgpIHtcbiAgICAgICAgb3B0c1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICB9LFxuICAgIH07XG4gICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LW9wdGlvbnMnLCBudWxsLCBvcHRpb25zKTtcbiAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3Qtb3B0aW9ucycsIG51bGwsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBFdmVudExpc3RlbmVyT3B0aW9ucyBhcmUgbm90IHN1cHBvcnRlZFxuICB9XG4gIHJldHVybiBvcHRzU3VwcG9ydGVkO1xufVxuXG4vKipcbiAgKiBSZXNldHMgdGhlIHRlc3QgZm9yIHdoZXRoZXIgYWRkRXZlbnRMaXN0ZW5lciBzdXBwb3J0cyBvcHRpb25zIG9yIG5vdC5cbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEV2dExpc3RlbmVyT3B0c1N1cHBvcnRGb3JUZXN0aW5nKCkge1xuICBvcHRzU3VwcG9ydGVkID0gdW5kZWZpbmVkO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7aW50ZXJuYWxMaXN0ZW5JbXBsZW1lbnRhdGlvbn0gZnJvbSAnLi9ldmVudC1oZWxwZXItbGlzdGVuJztcbmltcG9ydCB7dXNlcn0gZnJvbSAnLi9sb2cnO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICAqL1xuY29uc3QgTE9BRF9GQUlMVVJFX1BSRUZJWCA9ICdGYWlsZWQgdG8gbG9hZDonO1xuXG4vKipcbiAqIFJldHVybnMgYSBDdXN0b21FdmVudCB3aXRoIGEgZ2l2ZW4gdHlwZSBhbmQgZGV0YWlsOyBzdXBwb3J0cyBmYWxsYmFjayBmb3IgSUUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7IUpzb25PYmplY3R8c3RyaW5nfHVuZGVmaW5lZHxudWxsfSBkZXRhaWxcbiAqIEBwYXJhbSB7RXZlbnRJbml0PX0gb3B0X2V2ZW50SW5pdFxuICogQHJldHVybiB7IUV2ZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRXZlbnQod2luLCB0eXBlLCBkZXRhaWwsIG9wdF9ldmVudEluaXQpIHtcbiAgY29uc3QgZXZlbnRJbml0ID0gLyoqIEB0eXBlIHshQ3VzdG9tRXZlbnRJbml0fSAqLyAoe2RldGFpbH0pO1xuICBPYmplY3QuYXNzaWduKGV2ZW50SW5pdCwgb3B0X2V2ZW50SW5pdCk7XG4gIC8vIHdpbi5DdXN0b21FdmVudCBpcyBhIGZ1bmN0aW9uIG9uIEVkZ2UsIENocm9tZSwgRkYsIFNhZmFyaSBidXRcbiAgLy8gaXMgYW4gb2JqZWN0IG9uIElFIDExLlxuICBpZiAodHlwZW9mIHdpbi5DdXN0b21FdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG5ldyB3aW4uQ3VzdG9tRXZlbnQodHlwZSwgZXZlbnRJbml0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBEZXByZWNhdGVkIGZhbGxiYWNrIGZvciBJRS5cbiAgICBjb25zdCBlID0gd2luLmRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KFxuICAgICAgICB0eXBlLCAhIWV2ZW50SW5pdC5idWJibGVzLCAhIWV2ZW50SW5pdC5jYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbi8qKlxuICogTGlzdGVucyBmb3IgdGhlIHNwZWNpZmllZCBldmVudCBvbiB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUV2ZW50VGFyZ2V0fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFFdmVudCl9IGxpc3RlbmVyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9ldnRMaXN0ZW5lck9wdHNcbiAqIEByZXR1cm4geyFVbmxpc3RlbkRlZn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbihlbGVtZW50LCBldmVudFR5cGUsIGxpc3RlbmVyLCBvcHRfZXZ0TGlzdGVuZXJPcHRzKSB7XG4gIHJldHVybiBpbnRlcm5hbExpc3RlbkltcGxlbWVudGF0aW9uKFxuICAgICAgZWxlbWVudCwgZXZlbnRUeXBlLCBsaXN0ZW5lciwgb3B0X2V2dExpc3RlbmVyT3B0cyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGF0YSBwcm9wZXJ0eSBvZiBhbiBldmVudCB3aXRoIHRoZSBjb3JyZWN0IHR5cGUuXG4gKiBAcGFyYW0geyFFdmVudHx7ZGF0YTogIUpzb25PYmplY3R9fSBldmVudFxuICogQHJldHVybiB7P0pzb25PYmplY3R8c3RyaW5nfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGEoZXZlbnQpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7P0pzb25PYmplY3R8c3RyaW5nfHVuZGVmaW5lZH0gKi8gKGV2ZW50LmRhdGEpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRldGFpbCBwcm9wZXJ0eSBvZiBhbiBldmVudCB3aXRoIHRoZSBjb3JyZWN0IHR5cGUuXG4gKiBAcGFyYW0geyFFdmVudHx7ZGV0YWlsOiAhSnNvbk9iamVjdH19IGV2ZW50XG4gKiBAcmV0dXJuIHs/SnNvbk9iamVjdHxzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGV0YWlsKGV2ZW50KSB7XG4gIHJldHVybiAvKiogQHR5cGUgez9Kc29uT2JqZWN0fHN0cmluZ3x1bmRlZmluZWR9ICovIChldmVudC5kZXRhaWwpO1xufVxuXG4vKipcbiAqIExpc3RlbnMgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgb24gdGhlIGVsZW1lbnQgYW5kIHJlbW92ZXMgdGhlIGxpc3RlbmVyXG4gKiBhcyBzb29uIGFzIGV2ZW50IGhhcyBiZWVuIHJlY2VpdmVkLlxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUV2ZW50KX0gbGlzdGVuZXJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2V2dExpc3RlbmVyT3B0c1xuICogQHJldHVybiB7IVVubGlzdGVuRGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuT25jZShlbGVtZW50LCBldmVudFR5cGUsIGxpc3RlbmVyLCBvcHRfZXZ0TGlzdGVuZXJPcHRzKSB7XG4gIGxldCBsb2NhbExpc3RlbmVyID0gbGlzdGVuZXI7XG4gIGNvbnN0IHVubGlzdGVuID0gaW50ZXJuYWxMaXN0ZW5JbXBsZW1lbnRhdGlvbihlbGVtZW50LCBldmVudFR5cGUsIGV2ZW50ID0+IHtcbiAgICB0cnkge1xuICAgICAgbG9jYWxMaXN0ZW5lcihldmVudCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIEVuc3VyZSBsaXN0ZW5lciBpcyBHQydkXG4gICAgICBsb2NhbExpc3RlbmVyID0gbnVsbDtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfVxuICB9LCBvcHRfZXZ0TGlzdGVuZXJPcHRzKTtcbiAgcmV0dXJuIHVubGlzdGVuO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyAgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIGFzIHNvb24gYXMgdGhlIHNwZWNpZmllZCBldmVudCBoYXNcbiAqIGZpcmVkIG9uIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIHshRXZlbnRUYXJnZXR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2V2dExpc3RlbmVyT3B0c1xuICogQHBhcmFtIHtmdW5jdGlvbighVW5saXN0ZW5EZWYpPX0gb3B0X2NhbmNlbCBBbiBvcHRpb25hbCBmdW5jdGlvbiB0aGF0LCB3aGVuXG4gKiAgICAgcHJvdmlkZWQsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVubGlzdGVuZXIuIFRoaXMgZ2l2ZXMgdGhlIGNhbGxlclxuICogICAgIGFjY2VzcyB0byB0aGUgdW5saXN0ZW5lciwgc28gaXQgbWF5IGJlIGNhbGxlZCBtYW51YWxseSB3aGVuIG5lY2Vzc2FyeS5cbiAqIEByZXR1cm4geyFQcm9taXNlPCFFdmVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW5PbmNlUHJvbWlzZShlbGVtZW50LCBldmVudFR5cGUsIG9wdF9ldnRMaXN0ZW5lck9wdHMsXG4gIG9wdF9jYW5jZWwpIHtcbiAgbGV0IHVubGlzdGVuO1xuICBjb25zdCBldmVudFByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICB1bmxpc3RlbiA9IGxpc3Rlbk9uY2UoZWxlbWVudCwgZXZlbnRUeXBlLCByZXNvbHZlLCBvcHRfZXZ0TGlzdGVuZXJPcHRzKTtcbiAgfSk7XG4gIGV2ZW50UHJvbWlzZS50aGVuKHVubGlzdGVuLCB1bmxpc3Rlbik7XG4gIGlmIChvcHRfY2FuY2VsKSB7XG4gICAgb3B0X2NhbmNlbCh1bmxpc3Rlbik7XG4gIH1cbiAgcmV0dXJuIGV2ZW50UHJvbWlzZTtcbn1cblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHNwZWNpZmllZCBlbGVtZW50L3dpbmRvdyBoYXMgYmVlbiBsb2FkZWQgYWxyZWFkeS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IVdpbmRvd30gZWxlT3JXaW5kb3dcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0xvYWRlZChlbGVPcldpbmRvdykge1xuICByZXR1cm4gISEoZWxlT3JXaW5kb3cuY29tcGxldGUgfHwgZWxlT3JXaW5kb3cucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnXG4gICAgICAvLyBJZiB0aGUgcGFzc2VkIGluIHRoaW5nIGlzIGEgV2luZG93LCBpbmZlciBsb2FkZWQgc3RhdGUgZnJvbVxuICAgICAgLy9cbiAgICAgIHx8IChlbGVPcldpbmRvdy5kb2N1bWVudFxuICAgICAgICAgICYmIGVsZU9yV2luZG93LmRvY3VtZW50LnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9yIGZhaWwgYmFzZWQgb24gdGhlIGVsZU9yV2luZG93J3MgJ2xvYWQnXG4gKiBhbmQgJ2Vycm9yJyBldmVudHMuIE9wdGlvbmFsbHkgdGhpcyBtZXRob2QgdGFrZXMgYSB0aW1lb3V0LCB3aGljaCB3aWxsIHJlamVjdFxuICogdGhlIHByb21pc2UgaWYgdGhlIHJlc291cmNlIGhhcyBub3QgbG9hZGVkIGJ5IHRoZW4uXG4gKiBAcGFyYW0ge1R9IGVsZU9yV2luZG93IFN1cHBvcnRzIGJvdGggRWxlbWVudHMgYW5kIGFzIGEgc3BlY2lhbCBjYXNlIFdpbmRvd3MuXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxUPn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUHJvbWlzZShlbGVPcldpbmRvdykge1xuICBsZXQgdW5saXN0ZW5Mb2FkO1xuICBsZXQgdW5saXN0ZW5FcnJvcjtcbiAgaWYgKGlzTG9hZGVkKGVsZU9yV2luZG93KSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWxlT3JXaW5kb3cpO1xuICB9XG4gIGNvbnN0IGxvYWRpbmdQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIExpc3RlbiBvbmNlIHNpbmNlIElFIDUvNi83IGZpcmUgdGhlIG9ubG9hZCBldmVudCBjb250aW51b3VzbHkgZm9yXG4gICAgLy8gYW5pbWF0ZWQgR0lGcy5cbiAgICBjb25zdCB7dGFnTmFtZX0gPSBlbGVPcldpbmRvdztcbiAgICBpZiAodGFnTmFtZSA9PT0gJ0FVRElPJyB8fCB0YWdOYW1lID09PSAnVklERU8nKSB7XG4gICAgICB1bmxpc3RlbkxvYWQgPSBsaXN0ZW5PbmNlKGVsZU9yV2luZG93LCAnbG9hZHN0YXJ0JywgcmVzb2x2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVubGlzdGVuTG9hZCA9IGxpc3Rlbk9uY2UoZWxlT3JXaW5kb3csICdsb2FkJywgcmVzb2x2ZSk7XG4gICAgfVxuICAgIC8vIEZvciBlbGVtZW50cywgdW5saXN0ZW4gb24gZXJyb3IgKGRvbid0IGZvciBXaW5kb3dzKS5cbiAgICBpZiAodGFnTmFtZSkge1xuICAgICAgdW5saXN0ZW5FcnJvciA9IGxpc3Rlbk9uY2UoZWxlT3JXaW5kb3csICdlcnJvcicsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9hZGluZ1Byb21pc2UudGhlbigoKSA9PiB7XG4gICAgaWYgKHVubGlzdGVuRXJyb3IpIHtcbiAgICAgIHVubGlzdGVuRXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZU9yV2luZG93O1xuICB9LCAoKSA9PiB7XG4gICAgaWYgKHVubGlzdGVuTG9hZCkge1xuICAgICAgdW5saXN0ZW5Mb2FkKCk7XG4gICAgfVxuICAgIGZhaWxlZFRvTG9hZChlbGVPcldpbmRvdyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEVtaXQgZXJyb3Igb24gbG9hZCBmYWlsdXJlLlxuICogQHBhcmFtIHshRWxlbWVudHwhV2luZG93fSBlbGVPcldpbmRvdyBTdXBwb3J0cyBib3RoIEVsZW1lbnRzIGFuZCBhcyBhIHNwZWNpYWxcbiAqICAgICBjYXNlIFdpbmRvd3MuXG4gKi9cbmZ1bmN0aW9uIGZhaWxlZFRvTG9hZChlbGVPcldpbmRvdykge1xuICAvLyBSZXBvcnQgZmFpbGVkIGxvYWRzIGFzIHVzZXIgZXJyb3JzIHNvIHRoYXQgdGhleSBhdXRvbWF0aWNhbGx5IGdvXG4gIC8vIGludG8gdGhlIFwiZG9jdW1lbnQgZXJyb3JcIiBidWNrZXQuXG4gIGxldCB0YXJnZXQgPSBlbGVPcldpbmRvdztcbiAgaWYgKHRhcmdldCAmJiB0YXJnZXQuc3JjKSB7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnNyYztcbiAgfVxuICB0aHJvdyB1c2VyKCkuY3JlYXRlRXJyb3IoTE9BRF9GQUlMVVJFX1BSRUZJWCwgdGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBlcnJvciBtZXNzYWdlIGlzIHdhcyBjcmVhdGVkIGZvciBhIGxvYWQgZXJyb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBBbiBlcnJvciBtZXNzYWdlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMb2FkRXJyb3JNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIG1lc3NhZ2UuaW5kZXhPZihMT0FEX0ZBSUxVUkVfUFJFRklYKSAhPSAtMTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRXhwZXJpbWVudHMgc3lzdGVtIGFsbG93cyBhIGRldmVsb3BlciB0byBvcHQtaW4gdG8gdGVzdFxuICogZmVhdHVyZXMgdGhhdCBhcmUgbm90IHlldCBmdWxseSB0ZXN0ZWQuXG4gKlxuICogRXhwZXJpbWVudHMgcGFnZTogaHR0cHM6Ly9jZG4uYW1wcHJvamVjdC5vcmcvZXhwZXJpbWVudHMuaHRtbCAqXG4gKi9cblxuaW1wb3J0IHtnZXRDb29raWUsIHNldENvb2tpZX0gZnJvbSAnLi9jb29raWVzJztcbmltcG9ydCB7aGFzT3dufSBmcm9tICcuL3V0aWxzL29iamVjdCc7XG5pbXBvcnQge3BhcnNlUXVlcnlTdHJpbmd9IGZyb20gJy4vdXJsJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgQ09PS0lFX05BTUUgPSAnQU1QX0VYUCc7XG5cbi8qKiBAY29uc3Qge251bWJlcn0gKi9cbmNvbnN0IENPT0tJRV9NQVhfQUdFX0RBWVMgPSAxODA7IC8vIDYgbW9udGhcblxuLyoqIEBjb25zdCB7dGltZX0gKi9cbmNvbnN0IENPT0tJRV9FWFBJUkFUSU9OX0lOVEVSVkFMID0gQ09PS0lFX01BWF9BR0VfREFZUyAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IFRPR0dMRVNfV0lORE9XX1BST1BFUlRZID0gJ19fQU1QX19FWFBFUklNRU5UX1RPR0dMRVMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGlzVHJhZmZpY0VsaWdpYmxlOiBmdW5jdGlvbighV2luZG93KTpib29sZWFuLFxuICogICBicmFuY2hlczogIUFycmF5PHN0cmluZz5cbiAqIH19XG4gKi9cbmV4cG9ydCBsZXQgRXhwZXJpbWVudEluZm87XG5cbi8qKlxuICogV2hldGhlciB3ZSBhcmUgaW4gY2FuYXJ5LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmFyeSh3aW4pIHtcbiAgcmV0dXJuICEhKHdpbi5BTVBfQ09ORklHICYmIHdpbi5BTVBfQ09ORklHLmNhbmFyeSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBiaW5hcnkgdHlwZSwgZS5nLiwgY2FuYXJ5LCBjb250cm9sLCBvciBwcm9kdWN0aW9uLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJpbmFyeVR5cGUod2luKSB7XG4gIHJldHVybiB3aW4uQU1QX0NPTkZJRyAmJiB3aW4uQU1QX0NPTkZJRy50eXBlID9cbiAgICB3aW4uQU1QX0NPTkZJRy50eXBlIDogJ3Vua25vd24nO1xufVxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIHNwZWNpZmllZCBleHBlcmltZW50IGlzIG9uIG9yIG9mZi5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpbWVudElkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFeHBlcmltZW50T24od2luLCBleHBlcmltZW50SWQpIHtcbiAgY29uc3QgdG9nZ2xlcyA9IGV4cGVyaW1lbnRUb2dnbGVzKHdpbik7XG4gIHJldHVybiAhIXRvZ2dsZXNbZXhwZXJpbWVudElkXTtcbn1cblxuLyoqXG4gKiBUb2dnbGVzIHRoZSBleHBlcmltZW50IG9uIG9yIG9mZi4gUmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9mIHRoZSBleHBlcmltZW50XG4gKiBhZnRlciB0b2dnbGluZyBpcyBkb25lLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBleHBlcmltZW50SWRcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9vblxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3RyYW5zaWVudEV4cGVyaW1lbnQgIFdoZXRoZXIgdG8gdG9nZ2xlIHRoZVxuICogICAgIGV4cGVyaW1lbnQgc3RhdGUgXCJ0cmFuc2llbnRseVwiIChpLmUuLCBmb3IgdGhpcyBwYWdlIGxvYWQgb25seSkgb3JcbiAqICAgICBkdXJhYmx5IChieSBzYXZpbmcgdGhlIGV4cGVyaW1lbnQgSURzIHRvIHRoZSBjb29raWUgYWZ0ZXIgdG9nZ2xpbmcpLlxuICogICAgIERlZmF1bHQ6IGZhbHNlIChzYXZlIGR1cmFibHkpLlxuICogQHJldHVybiB7Ym9vbGVhbn0gTmV3IHN0YXRlIGZvciBleHBlcmltZW50SWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVFeHBlcmltZW50KHdpbiwgZXhwZXJpbWVudElkLCBvcHRfb24sXG4gIG9wdF90cmFuc2llbnRFeHBlcmltZW50KSB7XG4gIGNvbnN0IGN1cnJlbnRseU9uID0gaXNFeHBlcmltZW50T24od2luLCAvKk9LKi9leHBlcmltZW50SWQpO1xuICBjb25zdCBvbiA9ICEhKG9wdF9vbiAhPT0gdW5kZWZpbmVkID8gb3B0X29uIDogIWN1cnJlbnRseU9uKTtcbiAgaWYgKG9uICE9IGN1cnJlbnRseU9uKSB7XG4gICAgY29uc3QgdG9nZ2xlcyA9IGV4cGVyaW1lbnRUb2dnbGVzKHdpbik7XG4gICAgdG9nZ2xlc1tleHBlcmltZW50SWRdID0gb247XG5cbiAgICBpZiAoIW9wdF90cmFuc2llbnRFeHBlcmltZW50KSB7XG4gICAgICBjb25zdCBjb29raWVUb2dnbGVzID0gZ2V0RXhwZXJpbWVudFRvZ2dsZXNGcm9tQ29va2llKHdpbik7XG4gICAgICBjb29raWVUb2dnbGVzW2V4cGVyaW1lbnRJZF0gPSBvbjtcbiAgICAgIHNhdmVFeHBlcmltZW50VG9nZ2xlc1RvQ29va2llKHdpbiwgY29va2llVG9nZ2xlcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvbjtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgd2hldGhlciB0aGUgZXhwZXJpbWVudCBpcyBvbiBvciBvZmYgYmFzZWQgb2ZmIG9mIHRoZVxuICogY29va2llRmxhZyBvciB0aGUgZ2xvYmFsIGNvbmZpZyBmcmVxdWVuY3kgZ2l2ZW4uXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwZXJpbWVudFRvZ2dsZXMod2luKSB7XG4gIGlmICh3aW5bVE9HR0xFU19XSU5ET1dfUFJPUEVSVFldKSB7XG4gICAgcmV0dXJuIHdpbltUT0dHTEVTX1dJTkRPV19QUk9QRVJUWV07XG4gIH1cbiAgd2luW1RPR0dMRVNfV0lORE9XX1BST1BFUlRZXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRvZ2dsZXMgPSB3aW5bVE9HR0xFU19XSU5ET1dfUFJPUEVSVFldO1xuXG4gIC8vIFJlYWQgdGhlIGRlZmF1bHQgY29uZmlnIG9mIHRoaXMgYnVpbGQuXG4gIGlmICh3aW4uQU1QX0NPTkZJRykge1xuICAgIGZvciAoY29uc3QgZXhwZXJpbWVudElkIGluIHdpbi5BTVBfQ09ORklHKSB7XG4gICAgICBjb25zdCBmcmVxdWVuY3kgPSB3aW4uQU1QX0NPTkZJR1tleHBlcmltZW50SWRdO1xuICAgICAgaWYgKHR5cGVvZiBmcmVxdWVuY3kgPT09ICdudW1iZXInICYmIGZyZXF1ZW5jeSA+PSAwICYmIGZyZXF1ZW5jeSA8PSAxKSB7XG4gICAgICAgIHRvZ2dsZXNbZXhwZXJpbWVudElkXSA9IE1hdGgucmFuZG9tKCkgPCBmcmVxdWVuY3k7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFJlYWQgZG9jdW1lbnQgbGV2ZWwgb3ZlcnJpZGUgZnJvbSBtZXRhIHRhZy5cbiAgaWYgKHdpbi5BTVBfQ09ORklHXG4gICAgICAmJiBBcnJheS5pc0FycmF5KHdpbi5BTVBfQ09ORklHWydhbGxvdy1kb2Mtb3B0LWluJ10pXG4gICAgICAmJiB3aW4uQU1QX0NPTkZJR1snYWxsb3ctZG9jLW9wdC1pbiddLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBhbGxvd2VkID0gd2luLkFNUF9DT05GSUdbJ2FsbG93LWRvYy1vcHQtaW4nXTtcbiAgICBjb25zdCBtZXRhID1cbiAgICAgICAgd2luLmRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiYW1wLWV4cGVyaW1lbnRzLW9wdC1pblwiXScpO1xuICAgIGlmIChtZXRhKSB7XG4gICAgICBjb25zdCBvcHRlZEluRXhwZXJpbWVudHMgPSBtZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpLnNwbGl0KCcsJyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGVkSW5FeHBlcmltZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYWxsb3dlZC5pbmRleE9mKG9wdGVkSW5FeHBlcmltZW50c1tpXSkgIT0gLTEpIHtcbiAgICAgICAgICB0b2dnbGVzW29wdGVkSW5FeHBlcmltZW50c1tpXV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmFzc2lnbih0b2dnbGVzLCBnZXRFeHBlcmltZW50VG9nZ2xlc0Zyb21Db29raWUod2luKSk7XG5cbiAgaWYgKHdpbi5BTVBfQ09ORklHXG4gICAgICAmJiBBcnJheS5pc0FycmF5KHdpbi5BTVBfQ09ORklHWydhbGxvdy11cmwtb3B0LWluJ10pXG4gICAgICAmJiB3aW4uQU1QX0NPTkZJR1snYWxsb3ctdXJsLW9wdC1pbiddLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBhbGxvd2VkID0gd2luLkFNUF9DT05GSUdbJ2FsbG93LXVybC1vcHQtaW4nXTtcbiAgICBjb25zdCBoYXNoID0gd2luLmxvY2F0aW9uLm9yaWdpbmFsSGFzaCB8fCB3aW4ubG9jYXRpb24uaGFzaDtcbiAgICBjb25zdCBwYXJhbXMgPSBwYXJzZVF1ZXJ5U3RyaW5nKGhhc2gpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsb3dlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGFyYW0gPSBwYXJhbXNbYGUtJHthbGxvd2VkW2ldfWBdO1xuICAgICAgaWYgKHBhcmFtID09ICcxJykge1xuICAgICAgICB0b2dnbGVzW2FsbG93ZWRbaV1dID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbSA9PSAnMCcpIHtcbiAgICAgICAgdG9nZ2xlc1thbGxvd2VkW2ldXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9nZ2xlcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjYWNoZWQgZXhwZXJpbWVudHMgdG9nZ2xlcywgb3IgbnVsbCBpZiB0aGV5IGhhdmUgbm90IGJlZW5cbiAqIGNvbXB1dGVkIHlldC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtPYmplY3Q8c3RyaW5nLCBib29sZWFuPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGVyaW1lbnRUb2dnbGVzT3JOdWxsKHdpbikge1xuICByZXR1cm4gd2luW1RPR0dMRVNfV0lORE9XX1BST1BFUlRZXSB8fCBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBzZXQgb2YgZXhwZXJpbWVudCBJRHMgY3VycmVudGx5IG9uLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPn1cbiAqL1xuZnVuY3Rpb24gZ2V0RXhwZXJpbWVudFRvZ2dsZXNGcm9tQ29va2llKHdpbikge1xuICBjb25zdCBleHBlcmltZW50Q29va2llID0gZ2V0Q29va2llKHdpbiwgQ09PS0lFX05BTUUpO1xuICBjb25zdCB0b2tlbnMgPSBleHBlcmltZW50Q29va2llID8gZXhwZXJpbWVudENvb2tpZS5zcGxpdCgvXFxzKixcXHMqL2cpIDogW107XG5cbiAgY29uc3QgdG9nZ2xlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRva2Vuc1tpXS5sZW5ndGggPT0gMCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0b2tlbnNbaV1bMF0gPT0gJy0nKSB7XG4gICAgICB0b2dnbGVzW3Rva2Vuc1tpXS5zdWJzdHIoMSldID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvZ2dsZXNbdG9rZW5zW2ldXSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvZ2dsZXM7XG59XG5cbi8qKlxuICogU2F2ZXMgYSBzZXQgb2YgZXhwZXJpbWVudCBJRHMgY3VycmVudGx5IG9uLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+fSB0b2dnbGVzXG4gKi9cbmZ1bmN0aW9uIHNhdmVFeHBlcmltZW50VG9nZ2xlc1RvQ29va2llKHdpbiwgdG9nZ2xlcykge1xuICBjb25zdCBleHBlcmltZW50SWRzID0gW107XG4gIGZvciAoY29uc3QgZXhwZXJpbWVudCBpbiB0b2dnbGVzKSB7XG4gICAgZXhwZXJpbWVudElkcy5wdXNoKCh0b2dnbGVzW2V4cGVyaW1lbnRdID09PSBmYWxzZSA/ICctJyA6ICcnKSArIGV4cGVyaW1lbnQpO1xuICB9XG5cbiAgc2V0Q29va2llKHdpbiwgQ09PS0lFX05BTUUsIGV4cGVyaW1lbnRJZHMuam9pbignLCcpLFxuICAgICAgRGF0ZS5ub3coKSArIENPT0tJRV9FWFBJUkFUSU9OX0lOVEVSVkFMLCB7XG4gICAgICAgIC8vIFNldCBleHBsaWNpdCBkb21haW4sIHNvIHRoZSBjb29raWUgZ2V0cyBzZW5kIHRvIHN1YiBkb21haW5zLlxuICAgICAgICBkb21haW46IHdpbi5sb2NhdGlvbi5ob3N0bmFtZSxcbiAgICAgICAgYWxsb3dPblByb3h5T3JpZ2luOiB0cnVlLFxuICAgICAgfSk7XG59XG5cbi8qKlxuICogU2VlIGdldEV4cGVyaW1lbnRUb2dnbGVzRnJvbUNvb2tpZSgpLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPn1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwZXJpbWVudFRvZ2xlc0Zyb21Db29raWVGb3JUZXN0aW5nKHdpbikge1xuICByZXR1cm4gZ2V0RXhwZXJpbWVudFRvZ2dsZXNGcm9tQ29va2llKHdpbik7XG59XG5cbi8qKlxuICogUmVzZXRzIHRoZSBleHBlcmltZW50c1RvZ2dsZSBjYWNoZSBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RXhwZXJpbWVudFRvZ2dsZXNGb3JUZXN0aW5nKHdpbikge1xuICBzZXRDb29raWUod2luLCBDT09LSUVfTkFNRSwgJycsIDAsIHtcbiAgICBkb21haW46IHdpbi5sb2NhdGlvbi5ob3N0bmFtZSxcbiAgfSk7XG4gIHdpbltUT0dHTEVTX1dJTkRPV19QUk9QRVJUWV0gPSBudWxsO1xufVxuXG4vKipcbiAqIEluIHNvbWUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgb2YgTWF0aC5yYW5kb20oKSwgc2VxdWVudGlhbCBjYWxscyBvZlxuICogTWF0aC5yYW5kb20oKSBhcmUgY29ycmVsYXRlZCBhbmQgY2FuIGNhdXNlIGEgYmlhcy4gIEluIHBhcnRpY3VsYXIsXG4gKiBpZiB0aGUgcHJldmlvdXMgcmFuZG9tKCkgY2FsbCB3YXMgPCAwLjAwMSAoYXMgaXQgd2lsbCBiZSBpZiB3ZSBzZWxlY3RcbiAqIGludG8gYW4gZXhwZXJpbWVudCksIHRoZSBuZXh0IHZhbHVlIGNvdWxkIGJlIGxlc3MgdGhhbiAwLjUgbW9yZSB0aGFuXG4gKiA1MC43JSBvZiB0aGUgdGltZS4gIFRoaXMgcHJvdmlkZXMgYW4gaW1wbGVtZW50YXRpb24gdGhhdCByb290cyBkb3duIGludG9cbiAqIHRoZSBjcnlwdG8gQVBJLCB3aGVuIGF2YWlsYWJsZSwgdG8gcHJvZHVjZSBsZXNzIGJpYXNlZCBzYW1wbGVzLlxuICpcbiAqIEByZXR1cm4ge251bWJlcn0gUHNldWRvLXJhbmRvbSBmbG9hdGluZy1wb2ludCB2YWx1ZSBvbiB0aGUgcmFuZ2UgWzAsIDEpLlxuICovXG5mdW5jdGlvbiBzbG93QnV0QWNjdXJhdGVQcm5nKCkge1xuICAvLyBUT0RPKHRkcmwpOiBJbXBsZW1lbnQuXG4gIHJldHVybiBNYXRoLnJhbmRvbSgpO1xufVxuXG4vKipcbiAqIENvbnRhaW5lciBmb3IgYWx0ZXJuYXRlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGltcGxlbWVudGF0aW9ucy4gIFRoaXNcbiAqIGFsbG93cyB1cyB0byBzZXQgYW4gXCJhY2N1cmF0ZVwiIFBSTkcgZm9yIGJyYW5jaCBzZWxlY3Rpb24sIGJ1dCB0byBtb2NrIGl0XG4gKiBvdXQgZWFzaWx5IGluIHRlc3RzLlxuICpcbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICogQGNvbnN0IHshe2FjY3VyYXRlUHJuZzogZnVuY3Rpb24oKTpudW1iZXJ9fVxuICovXG5leHBvcnQgY29uc3QgUkFORE9NX05VTUJFUl9HRU5FUkFUT1JTID0ge1xuICBhY2N1cmF0ZVBybmc6IHNsb3dCdXRBY2N1cmF0ZVBybmcsXG59O1xuXG4vKipcbiAqIFNlbGVjdHMsIHVuaWZvcm1seSBhdCByYW5kb20sIGEgc2luZ2xlIGl0ZW0gZnJvbSB0aGUgYXJyYXkuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBhcnIgT2JqZWN0IHRvIHNlbGVjdCBmcm9tLlxuICogQHJldHVybiB7P3N0cmluZ30gU2luZ2xlIGl0ZW0gZnJvbSBhcnIgb3IgbnVsbCBpZiBhcnIgd2FzIGVtcHR5LlxuICovXG5mdW5jdGlvbiBzZWxlY3RSYW5kb21JdGVtKGFycikge1xuICBjb25zdCBybiA9IFJBTkRPTV9OVU1CRVJfR0VORVJBVE9SUy5hY2N1cmF0ZVBybmcoKTtcbiAgcmV0dXJuIGFycltNYXRoLmZsb29yKHJuICogYXJyLmxlbmd0aCldIHx8IG51bGw7XG59XG5cbi8qKlxuICogU2VsZWN0cyB3aGljaCBwYWdlLWxldmVsIGV4cGVyaW1lbnQgYnJhbmNoZXMgYXJlIGVuYWJsZWQuIElmIGEgZ2l2ZW5cbiAqIGV4cGVyaW1lbnQgbmFtZSBpcyBhbHJlYWR5IHNldCAoaW5jbHVkaW5nIHRvIHRoZSBudWxsIC8gbm8gYnJhbmNoZXMgc2VsZWN0ZWRcbiAqIHN0YXRlKSwgdGhpcyB3b24ndCBhbHRlciBpdHMgc3RhdGUuXG4gKlxuICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIGV4cGVyaW1lbnQgaXMgc2V0IHVzaW5nIGlzRXhwZXJpbWVudE9uKHdpbixcbiAqIGV4cGVyaW1lbnROYW1lKSBhbmQsIGlmIGl0IGlzIG9uLCBsb29rIGZvciB3aGljaCBicmFuY2ggaXMgc2VsZWN0ZWQgaW5cbiAqIHdpbi5leHBlcmltZW50QnJhbmNoZXNbZXhwZXJpbWVudE5hbWVdLlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luIFdpbmRvdyBjb250ZXh0IG9uIHdoaWNoIHRvIHNhdmUgZXhwZXJpbWVudFxuICogICAgIHNlbGVjdGlvbiBzdGF0ZS5cbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICFFeHBlcmltZW50SW5mbz59IGV4cGVyaW1lbnRzICBTZXQgb2YgZXhwZXJpbWVudHMgdG9cbiAqICAgICBjb25maWd1cmUgZm9yIHRoaXMgcGFnZSBsb2FkLlxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IE1hcCBvZiBleHBlcmltZW50IG5hbWVzIHRvIHNlbGVjdGVkXG4gKiAgICAgYnJhbmNoZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21seVNlbGVjdFVuc2V0RXhwZXJpbWVudHMod2luLCBleHBlcmltZW50cykge1xuICB3aW4uZXhwZXJpbWVudEJyYW5jaGVzID0gd2luLmV4cGVyaW1lbnRCcmFuY2hlcyB8fCB7fTtcbiAgY29uc3Qgc2VsZWN0ZWRFeHBlcmltZW50cyA9IHt9O1xuICBmb3IgKGNvbnN0IGV4cGVyaW1lbnROYW1lIGluIGV4cGVyaW1lbnRzKSB7XG4gICAgLy8gU2tpcCBleHBlcmltZW50TmFtZSBpZiBpdCBpcyBub3QgYSBrZXkgb2YgZXhwZXJpbWVudHMgb2JqZWN0IG9yIGlmIGl0XG4gICAgLy8gaGFzIGFscmVhZHkgYmVlbiBwb3B1bGF0ZWQgYnkgc29tZSBvdGhlciBwcm9wZXJ0eS5cbiAgICBpZiAoIWhhc093bihleHBlcmltZW50cywgZXhwZXJpbWVudE5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGhhc093bih3aW4uZXhwZXJpbWVudEJyYW5jaGVzLCBleHBlcmltZW50TmFtZSkpIHtcbiAgICAgIHNlbGVjdGVkRXhwZXJpbWVudHNbZXhwZXJpbWVudE5hbWVdID1cbiAgICAgICAgICB3aW4uZXhwZXJpbWVudEJyYW5jaGVzW2V4cGVyaW1lbnROYW1lXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghZXhwZXJpbWVudHNbZXhwZXJpbWVudE5hbWVdLmlzVHJhZmZpY0VsaWdpYmxlIHx8XG4gICAgICAgICFleHBlcmltZW50c1tleHBlcmltZW50TmFtZV0uaXNUcmFmZmljRWxpZ2libGUod2luKSkge1xuICAgICAgd2luLmV4cGVyaW1lbnRCcmFuY2hlc1tleHBlcmltZW50TmFtZV0gPSBudWxsO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgaW4gdGhlIGV4cGVyaW1lbnQsIGJ1dCB3ZSBoYXZlbid0IGFscmVhZHkgZm9yY2VkIGEgc3BlY2lmaWNcbiAgICAvLyBleHBlcmltZW50IGJyYW5jaCAoZS5nLiwgdmlhIGEgdGVzdCBzZXR1cCksIHRoZW4gcmFuZG9taXplIHRoZSBicmFuY2hcbiAgICAvLyBjaG9pY2UuXG4gICAgaWYgKCF3aW4uZXhwZXJpbWVudEJyYW5jaGVzW2V4cGVyaW1lbnROYW1lXSAmJlxuICAgICAgaXNFeHBlcmltZW50T24od2luLCAvKk9LKi9leHBlcmltZW50TmFtZSkpIHtcbiAgICAgIGNvbnN0IHticmFuY2hlc30gPSBleHBlcmltZW50c1tleHBlcmltZW50TmFtZV07XG4gICAgICB3aW4uZXhwZXJpbWVudEJyYW5jaGVzW2V4cGVyaW1lbnROYW1lXSA9IHNlbGVjdFJhbmRvbUl0ZW0oYnJhbmNoZXMpO1xuICAgICAgc2VsZWN0ZWRFeHBlcmltZW50c1tleHBlcmltZW50TmFtZV0gPVxuICAgICAgICAgIHdpbi5leHBlcmltZW50QnJhbmNoZXNbZXhwZXJpbWVudE5hbWVdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VsZWN0ZWRFeHBlcmltZW50cztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBleHBlcmltZW50IGJyYW5jaCBlbmFibGVkIGZvciB0aGUgZ2l2ZW4gZXhwZXJpbWVudCBJRC5cbiAqIEZvciBleGFtcGxlLCAnY29udHJvbCcgb3IgJ2V4cGVyaW1lbnQnLlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luIFdpbmRvdyBjb250ZXh0IHRvIGNoZWNrIGZvciBleHBlcmltZW50IHN0YXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IGV4cGVyaW1lbnROYW1lIE5hbWUgb2YgdGhlIGV4cGVyaW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBBY3RpdmUgZXhwZXJpbWVudCBicmFuY2ggSUQgZm9yIGV4cGVyaW1lbnROYW1lIChwb3NzaWJseVxuICogICAgIG51bGwgaWYgZXhwZXJpbWVudE5hbWUgaGFzIGJlZW4gdGVzdGVkIGJ1dCBubyBicmFuY2ggd2FzIGVuYWJsZWQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwZXJpbWVudEJyYW5jaCh3aW4sIGV4cGVyaW1lbnROYW1lKSB7XG4gIHJldHVybiB3aW4uZXhwZXJpbWVudEJyYW5jaGVzID8gd2luLmV4cGVyaW1lbnRCcmFuY2hlc1tleHBlcmltZW50TmFtZV0gOiBudWxsO1xufVxuXG4vKipcbiAqIEZvcmNlIGVuYWJsZSAob3IgZGlzYWJsZSkgYSBzcGVjaWZpYyBicmFuY2ggb2YgYSBnaXZlbiBleHBlcmltZW50IG5hbWUuXG4gKiBEaXNhYmxlcyB0aGUgZXhwZXJpbWVudCBuYW1lIGFsdG9nZXRoZXIgaWYgYnJhbmNoSWQgaXMgZmFsc2Vpc2guXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW4gV2luZG93IGNvbnRleHQgdG8gY2hlY2sgZm9yIGV4cGVyaW1lbnQgc3RhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpbWVudE5hbWUgTmFtZSBvZiB0aGUgZXhwZXJpbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSB7P3N0cmluZ30gYnJhbmNoSWQgSUQgb2YgYnJhbmNoIHRvIGZvcmNlIG9yIG51bGwgdG8gZGlzYWJsZVxuICogICAgIGFsdG9nZXRoZXIuXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcmNlRXhwZXJpbWVudEJyYW5jaCh3aW4sIGV4cGVyaW1lbnROYW1lLCBicmFuY2hJZCkge1xuICB3aW4uZXhwZXJpbWVudEJyYW5jaGVzID0gd2luLmV4cGVyaW1lbnRCcmFuY2hlcyB8fCB7fTtcbiAgdG9nZ2xlRXhwZXJpbWVudCh3aW4sIGV4cGVyaW1lbnROYW1lLCAhIWJyYW5jaElkLCB0cnVlKTtcbiAgd2luLmV4cGVyaW1lbnRCcmFuY2hlc1tleHBlcmltZW50TmFtZV0gPSBicmFuY2hJZDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfYmFzZSBFeHBvbmVudGlhbCBiYXNlLiBEZWZhdWx0cyB0byAyLlxuICogQHJldHVybiB7ZnVuY3Rpb24oZnVuY3Rpb24oKSk6IG51bWJlcn0gRnVuY3Rpb24gdGhhdCB3aGVuIGludm9rZWQgd2lsbFxuICogICAgIGNhbGwgdGhlIHBhc3NlZCBpbiBmdW5jdGlvbi4gT24gZXZlcnkgaW52b2NhdGlvbiB0aGUgbmV4dFxuICogICAgIGludm9jYXRpb24gb2YgdGhlIHBhc3NlZCBpbiBmdW5jdGlvbiB3aWxsIGJlIGV4cG9uZW50aWFsbHlcbiAqICAgICBsYXRlci4gUmV0dXJuZWQgZnVuY3Rpb24gcmV0dXJucyB0aW1lb3V0IGlkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwb25lbnRpYWxCYWNrb2ZmKG9wdF9iYXNlKSB7XG4gIGNvbnN0IGdldFRpbWVvdXQgPSBleHBvbmVudGlhbEJhY2tvZmZDbG9jayhvcHRfYmFzZSk7XG4gIHJldHVybiB3b3JrID0+IHtcbiAgICByZXR1cm4gc2V0VGltZW91dCh3b3JrLCBnZXRUaW1lb3V0KCkpO1xuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2Jhc2UgRXhwb25lbnRpYWwgYmFzZS4gRGVmYXVsdHMgdG8gMi5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKCk6IG51bWJlcn0gRnVuY3Rpb24gdGhhdCB3aGVuIGludm9rZWQgd2lsbCByZXR1cm5cbiAqICAgIGEgbnVtYmVyIHRoYXQgZXhwb25lbnRpYWxseSBncm93cyBwZXIgaW52b2NhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9uZW50aWFsQmFja29mZkNsb2NrKG9wdF9iYXNlKSB7XG4gIGNvbnN0IGJhc2UgPSBvcHRfYmFzZSB8fCAyO1xuICBsZXQgY291bnQgPSAwO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCB3YWl0ID0gTWF0aC5wb3coYmFzZSwgY291bnQrKyk7XG4gICAgd2FpdCArPSBnZXRKaXR0ZXIod2FpdCk7XG4gICAgcmV0dXJuIHdhaXQgKiAxMDAwO1xuICB9O1xufVxuXG4vKipcbiAqIEFkZCBqaXR0ZXIgdG8gYXZvaWQgdGhlIHRodW5kZXJpbmcgaGVyZC4gVGhpcyBjYW4gZS5nLiBoYXBwZW4gd2hlblxuICogd2UgcG9sbCBhIGJhY2tlbmQgYW5kIGl0IGZhaWxzIGZvciBldmVyeW9uZSBhdCB0aGUgc2FtZSB0aW1lLlxuICogV2UgYWRkIHVwIHRvIDMwJSAoZGVmYXVsdCkgbG9uZ2VyIG9yIHNob3J0ZXIgdGhhbiB0aGUgZ2l2ZW4gdGltZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdCB0aGUgYW1vdW50IGlmIGJhc2UgbWlsbGlzZWNvbmRzXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9wZXJjIHRoZSBtaW4vbWF4IHBlcmNlbnRhZ2UgdG8gYWRkIG9yIHN1dHJhY3RcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEppdHRlcih3YWl0LCBvcHRfcGVyYykge1xuICBvcHRfcGVyYyA9IG9wdF9wZXJjIHx8IC4zO1xuICBsZXQgaml0dGVyID0gd2FpdCAqIG9wdF9wZXJjICogTWF0aC5yYW5kb20oKTtcbiAgaWYgKE1hdGgucmFuZG9tKCkgPiAuNSkge1xuICAgIGppdHRlciAqPSAtMTtcbiAgfVxuICByZXR1cm4gaml0dGVyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Q29tbW9uU2lnbmFsc30gZnJvbSAnLi9jb21tb24tc2lnbmFscyc7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7XG4gIGNyZWF0ZUVsZW1lbnRXaXRoQXR0cmlidXRlcyxcbiAgcmVtb3ZlRWxlbWVudCxcbn0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHtkZXZ9IGZyb20gJy4vbG9nJztcbmltcG9ydCB7ZGljdH0gZnJvbSAnLi91dGlscy9vYmplY3QnO1xuaW1wb3J0IHtpc0FycmF5LCB0b1dpbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge3RyaWdnZXJBbmFseXRpY3NFdmVudH0gZnJvbSAnLi9hbmFseXRpY3MnO1xuXG4vKipcbiAqIE1ldGhvZCB0byBjcmVhdGUgc2NvcGVkIGFuYWx5dGljcyBlbGVtZW50IGZvciBhbnkgZWxlbWVudC5cbiAqIFRPRE86IE1ha2UgdGhpcyBmdW5jdGlvbiBwcml2YXRlXG4gKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnRFbGVtZW50XG4gKiBAcGFyYW0geyFKc29uT2JqZWN0fSBjb25maWdcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGxvYWRBbmFseXRpY3NcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGRpc2FibGVJbW1lZGlhdGVcbiAqIEByZXR1cm4geyFFbGVtZW50fSBjcmVhdGVkIGFuYWx5dGljcyBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnRBbmFseXRpY3NFbGVtZW50KFxuICBwYXJlbnRFbGVtZW50LCBjb25maWcsIGxvYWRBbmFseXRpY3MgPSBmYWxzZSwgZGlzYWJsZUltbWVkaWF0ZSA9IGZhbHNlKSB7XG4gIGNvbnN0IGRvYyA9IC8qKiBAdHlwZSB7IURvY3VtZW50fSAqLyAocGFyZW50RWxlbWVudC5vd25lckRvY3VtZW50KTtcbiAgY29uc3QgYW5hbHl0aWNzRWxlbSA9IGNyZWF0ZUVsZW1lbnRXaXRoQXR0cmlidXRlcyhcbiAgICAgIGRvYyxcbiAgICAgICdhbXAtYW5hbHl0aWNzJywgZGljdCh7XG4gICAgICAgICdzYW5kYm94JzogJ3RydWUnLFxuICAgICAgICAndHJpZ2dlcic6IGRpc2FibGVJbW1lZGlhdGUgPyAnJyA6ICdpbW1lZGlhdGUnLFxuICAgICAgfSkpO1xuICBjb25zdCBzY3JpcHRFbGVtID0gY3JlYXRlRWxlbWVudFdpdGhBdHRyaWJ1dGVzKFxuICAgICAgZG9jLFxuICAgICAgJ3NjcmlwdCcsIGRpY3Qoe1xuICAgICAgICAndHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0pKTtcbiAgc2NyaXB0RWxlbS50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZyk7XG4gIGFuYWx5dGljc0VsZW0uYXBwZW5kQ2hpbGQoc2NyaXB0RWxlbSk7XG4gIGFuYWx5dGljc0VsZW0uQ09ORklHID0gY29uZmlnO1xuXG4gIC8vIEZvcmNlIGxvYWQgYW5hbHl0aWNzIGV4dGVuc2lvbiBpZiBzY3JpcHQgbm90IGluY2x1ZGVkIGluIHBhZ2UuXG4gIGlmIChsb2FkQW5hbHl0aWNzKSB7XG4gICAgLy8gR2V0IEV4dGVuc2lvbnMgc2VydmljZSBhbmQgZm9yY2UgbG9hZCBhbmFseXRpY3MgZXh0ZW5zaW9uLlxuICAgIGNvbnN0IGV4dGVuc2lvbnMgPVxuICAgICAgICBTZXJ2aWNlcy5leHRlbnNpb25zRm9yKHRvV2luKHBhcmVudEVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykpO1xuICAgIGNvbnN0IGFtcGRvYyA9IFNlcnZpY2VzLmFtcGRvYyhwYXJlbnRFbGVtZW50KTtcbiAgICBleHRlbnNpb25zLi8qT0sqL2luc3RhbGxFeHRlbnNpb25Gb3JEb2MoYW1wZG9jLCAnYW1wLWFuYWx5dGljcycpO1xuICB9IGVsc2Uge1xuICAgIFNlcnZpY2VzLmFuYWx5dGljc0ZvckRvY09yTnVsbChwYXJlbnRFbGVtZW50KS50aGVuKGFuYWx5dGljcyA9PiB7XG4gICAgICBkZXYoKS5hc3NlcnQoYW5hbHl0aWNzKTtcbiAgICB9KTtcbiAgfVxuICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGFuYWx5dGljc0VsZW0pO1xuICByZXR1cm4gYW5hbHl0aWNzRWxlbTtcbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgaGFuZGxlcyBjdXN0b21FdmVudCByZXBvcnRpbmcgb2YgZXh0ZW5zaW9uIGVsZW1lbnQgdGhyb3VnaFxuICogYW1wLWFuYWx5dGljcy4gVGhpcyBjbGFzcyBpcyBub3QgZXhwb3NlZCB0byBleHRlbnNpb24gZWxlbWVudCBkaXJlY3RseSB0b1xuICogcmVzdHJpY3QgdGhlIGdlbnJhdGlvbiBvZiB0aGUgY29uZmlnIFBsZWFzZSB1c2UgQ3VzdG9tRXZlbnRSZXBvcnRlckJ1aWxkZXIgdG9cbiAqIGJ1aWxkIGEgQ3VzdG9tRXZlbnRSZXBvcnRlciBpbnN0YW5jZS5cbiAqL1xuY2xhc3MgQ3VzdG9tRXZlbnRSZXBvcnRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBwYXJlbnRcbiAgICogQHBhcmFtIHshSnNvbk9iamVjdH0gY29uZmlnXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIGNvbmZpZykge1xuICAgIGRldigpLmFzc2VydChjb25maWdbJ3RyaWdnZXJzJ10sICdDb25maWcgbXVzdCBoYXZlIHRyaWdnZXJzIGRlZmluZWQnKTtcbiAgICAvKiogQHByaXZhdGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmlkXyA9IHBhcmVudC5nZXRSZXNvdXJjZUlkKCk7XG5cbiAgICAvKiogQHByaXZhdGUgeyFBbXBFbGVtZW50fSAqL1xuICAgIHRoaXMucGFyZW50XyA9IHBhcmVudDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7SnNvbk9iamVjdH0gKi9cbiAgICB0aGlzLmNvbmZpZ18gPSBjb25maWc7XG5cbiAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGNvbmZpZ1sndHJpZ2dlcnMnXSkge1xuICAgICAgY29uc3QgZXZlbnRUeXBlID0gY29uZmlnWyd0cmlnZ2VycyddW2V2ZW50XVsnb24nXTtcbiAgICAgIGRldigpLmFzc2VydChldmVudFR5cGUsXG4gICAgICAgICAgJ0N1c3RvbUV2ZW50UmVwb3J0ZXIgY29uZmlnIG11c3Qgc3BlY2lmeSB0cmlnZ2VyIGV2ZW50VHlwZScpO1xuICAgICAgY29uc3QgbmV3RXZlbnRUeXBlID0gdGhpcy5nZXRFdmVudFR5cGVJblNhbmRib3hfKGV2ZW50VHlwZSk7XG4gICAgICBjb25maWdbJ3RyaWdnZXJzJ11bZXZlbnRdWydvbiddID0gbmV3RXZlbnRUeXBlO1xuICAgIH1cblxuICAgIHRoaXMucGFyZW50Xy5zaWduYWxzKCkud2hlblNpZ25hbChDb21tb25TaWduYWxzLkxPQURfU1RBUlQpLnRoZW4oKCkgPT4ge1xuICAgICAgaW5zZXJ0QW5hbHl0aWNzRWxlbWVudCh0aGlzLnBhcmVudF8sIGNvbmZpZywgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPj19IG9wdF92YXJzIEEgbWFwIG9mIHZhcnMgYW5kIHRoZWlyIHZhbHVlcy5cbiAgICovXG4gIHRyaWdnZXIoZXZlbnRUeXBlLCBvcHRfdmFycykge1xuICAgIGRldigpLmFzc2VydCh0aGlzLmNvbmZpZ19bJ3RyaWdnZXJzJ11bZXZlbnRUeXBlXSxcbiAgICAgICAgJ0Nhbm5vdCB0cmlnZ2VyIG5vbiBpbml0aWF0ZWQgZXZlbnRUeXBlJyk7XG4gICAgdHJpZ2dlckFuYWx5dGljc0V2ZW50KHRoaXMucGFyZW50XyxcbiAgICAgICAgdGhpcy5nZXRFdmVudFR5cGVJblNhbmRib3hfKGV2ZW50VHlwZSksIG9wdF92YXJzKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRFdmVudFR5cGVJblNhbmRib3hfKGV2ZW50VHlwZSkge1xuICAgIHJldHVybiBgc2FuZGJveC0ke3RoaXMuaWRffS0ke2V2ZW50VHlwZX1gO1xuICB9XG59XG5cblxuLyoqXG4gKiBBIGJ1aWxkZXIgY2xhc3MgdGhhdCBlbmFibGUgZXh0ZW5zaW9uIGVsZW1lbnRzIHRvIGVhc2lseSBidWlsZCBhbmQgZ2V0IGFcbiAqIEN1c3RvbUV2ZW50UmVwb3J0ZXIgaW5zdGFuY2UuIEl0cyBjb25zdHJ1Y3RvciByZXF1aXJlcyB0aGUgcGFyZW50IEFNUFxuICogZWxlbWVudC4gSXQgcHJvdmlkZXMgdHdvIG1ldGhvZHMgI3RyYWNrKCkgYW5kICNidWlsZCgpIHRvIGJ1aWxkIHRoZVxuICogQ3VzdG9tRXZlbnRSZXBvcnRlciBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEN1c3RvbUV2ZW50UmVwb3J0ZXJCdWlsZGVyIHtcbiAgLyoqIEBwYXJhbSB7IUFtcEVsZW1lbnR9IHBhcmVudCAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQpIHtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IUFtcEVsZW1lbnR9ICovXG4gICAgdGhpcy5wYXJlbnRfID0gcGFyZW50O1xuXG4gICAgLyoqIEBwcml2YXRlIHs/SnNvbk9iamVjdH0gKi9cbiAgICB0aGlzLmNvbmZpZ18gPSAvKiogQHR5cGUge0pzb25PYmplY3R9ICovICh7XG4gICAgICAncmVxdWVzdHMnOiB7fSxcbiAgICAgICd0cmlnZ2Vycyc6IHt9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSAjdHJhY2soKSBtZXRob2QgdGFrZXMgaW4gYSB1bmlxdWUgY3VzdG9tLWV2ZW50IG5hbWUsIGFuZCB0aGVcbiAgICogY29ycmVzcG9uZGluZyByZXF1ZXN0IHVybCAob3IgYW4gYXJyYXkgb2YgcmVxdWVzdCB1cmxzKS4gT25lIGNhbiBjYWxsXG4gICAqICN0cmFjaygpIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IGV2ZW50VHlwZSBuYW1lIChvcmRlciBkb2Vzbid0XG4gICAqIG1hdHRlcikgYmVmb3JlICNidWlsZCgpIGlzIGNhbGxlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ3whQXJyYXk8c3RyaW5nPn0gcmVxdWVzdFxuICAgKi9cbiAgdHJhY2soZXZlbnRUeXBlLCByZXF1ZXN0KSB7XG4gICAgcmVxdWVzdCA9IGlzQXJyYXkocmVxdWVzdCkgPyByZXF1ZXN0IDogW3JlcXVlc3RdO1xuICAgIGRldigpLmFzc2VydCghdGhpcy5jb25maWdfWyd0cmlnZ2VycyddW2V2ZW50VHlwZV0sXG4gICAgICAgICdjdXN0b21FdmVudFJlcG9ydGVyQnVpbGRlciBzaG91bGQgbm90IHRyYWNrIHNhbWUgZXZlbnRUeXBlIHR3aWNlJyk7XG4gICAgY29uc3QgcmVxdWVzdExpc3QgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVlc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlcXVlc3ROYW1lID0gYCR7ZXZlbnRUeXBlfS1yZXF1ZXN0LSR7aX1gO1xuICAgICAgdGhpcy5jb25maWdfWydyZXF1ZXN0cyddW3JlcXVlc3ROYW1lXSA9IHJlcXVlc3RbaV07XG4gICAgICByZXF1ZXN0TGlzdC5wdXNoKHJlcXVlc3ROYW1lKTtcbiAgICB9XG4gICAgdGhpcy5jb25maWdfWyd0cmlnZ2VycyddW2V2ZW50VHlwZV0gPSB7XG4gICAgICAnb24nOiBldmVudFR5cGUsXG4gICAgICAncmVxdWVzdCc6IHJlcXVlc3RMaXN0LFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGUgI2J1aWxkKCkgbWV0aG9kIHRvIGJ1aWxkIGFuZCBnZXQgdGhlIEN1c3RvbUV2ZW50UmVwb3J0ZXIgaW5zdGFuY2UuXG4gICAqIE9uZSBDdXN0b21FdmVudFJlcG9ydGVyQnVpbGRlciBpbnN0YW5jZSBjYW4gb25seSBidWlsZCBvbmUgcmVwb3J0ZXIsIHdoaWNoXG4gICAqIG1lYW5zICNidWlsZCgpIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlIGFmdGVyIGFsbCBldmVudFR5cGUgYXJlIGFkZGVkLlxuICAgKi9cbiAgYnVpbGQoKSB7XG4gICAgZGV2KCkuYXNzZXJ0KHRoaXMuY29uZmlnXywgJ0N1c3RvbUV2ZW50UmVwb3J0ZXIgYWxyZWFkeSBidWlsdCcpO1xuICAgIGNvbnN0IHJlcG9ydCA9IG5ldyBDdXN0b21FdmVudFJlcG9ydGVyKFxuICAgICAgICB0aGlzLnBhcmVudF8sIC8qKiBAdHlwZSB7IUpzb25PYmplY3R9ICovICh0aGlzLmNvbmZpZ18pKTtcbiAgICB0aGlzLmNvbmZpZ18gPSBudWxsO1xuICAgIHJldHVybiByZXBvcnQ7XG4gIH1cbn1cblxuXG4vKipcbiAqIEEgaGVscGVyIG1ldGhvZCB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IGFsbCBleHRlbnNpb24gZWxlbWVudHMgdG8gYWRkIHRoZWlyXG4gKiBzYW5kYm94IGFuYWx5dGljcyB0cmFja2luZy4gVGhpcyBtZXRob2QgdGFrZXMgY2FyZSBvZiBpbnNlcnQgYW5kIHJlbW92ZSB0aGVcbiAqIGFuYWx5dGljcyB0cmFja2VyIGF0IHRoZSByaWdodCB0aW1lIG9mIHRoZSBlbGVtZW50IGxpZmVjeWNsZS5cbiAqIEBwYXJhbSB7IUFtcEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7IVByb21pc2U8IUpzb25PYmplY3Q+fSBwcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBbmFseXRpY3NJblNhbmRib3goZWxlbWVudCwgcHJvbWlzZSkge1xuICBsZXQgYW5hbHl0aWNzRWxlbWVudCA9IG51bGw7XG4gIGxldCBjb25maWdQcm9taXNlID0gcHJvbWlzZTtcbiAgLy8gTGlzdGVuZXIgdG8gTE9BRF9TVEFSVCBzaWduYWwuIEluc2VydCBhbmFseXRpY3MgZWxlbWVudCBvbiBMT0FEX1NUQVJUXG4gIGVsZW1lbnQuc2lnbmFscygpLndoZW5TaWduYWwoQ29tbW9uU2lnbmFscy5MT0FEX1NUQVJUKS50aGVuKCgpID0+IHtcbiAgICBpZiAoYW5hbHl0aWNzRWxlbWVudCB8fCAhY29uZmlnUHJvbWlzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWdQcm9taXNlLnRoZW4oY29uZmlnID0+IHtcbiAgICAgIGlmICghY29uZmlnUHJvbWlzZSkge1xuICAgICAgICAvLyBJZiBjb25maWcgcHJvbWlzZSByZXNvbHZlIGFmdGVyIHVubG9hZCwgZG8gbm90aGluZy5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uZmlnUHJvbWlzZSA9IG51bGw7XG4gICAgICBhbmFseXRpY3NFbGVtZW50ID0gaW5zZXJ0QW5hbHl0aWNzRWxlbWVudChlbGVtZW50LCBjb25maWcsIGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTGlzdGVuZXIgdG8gVU5MT0FEIHNpZ25hbC4gRGVzdHJveSByZW1vdmUgZWxlbWVudCBvbiBVTkxPQURcbiAgZWxlbWVudC5zaWduYWxzKCkud2hlblNpZ25hbChDb21tb25TaWduYWxzLlVOTE9BRCkudGhlbigoKSA9PiB7XG4gICAgY29uZmlnUHJvbWlzZSA9IG51bGw7XG4gICAgaWYgKGFuYWx5dGljc0VsZW1lbnQpIHtcbiAgICAgIHJlbW92ZUVsZW1lbnQoYW5hbHl0aWNzRWxlbWVudCk7XG4gICAgICBhbmFseXRpY3NFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Q29tbW9uU2lnbmFsc30gZnJvbSAnLi9jb21tb24tc2lnbmFscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJy4vb2JzZXJ2YWJsZSc7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7U2lnbmFsc30gZnJvbSAnLi91dGlscy9zaWduYWxzJztcbmltcG9ydCB7Y2xvc2VzdEJ5U2VsZWN0b3IsIGVzY2FwZUh0bWx9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7ZGV2LCByZXRocm93QXN5bmMsIHVzZXJ9IGZyb20gJy4vbG9nJztcbmltcG9ydCB7ZGlzcG9zZVNlcnZpY2VzRm9yRW1iZWQsIGdldFRvcFdpbmRvd30gZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCB7aXNEb2N1bWVudFJlYWR5fSBmcm9tICcuL2RvY3VtZW50LXJlYWR5JztcbmltcG9ydCB7bGF5b3V0UmVjdEx0d2gsIG1vdmVMYXlvdXRSZWN0fSBmcm9tICcuL2xheW91dC1yZWN0JztcbmltcG9ydCB7bG9hZFByb21pc2V9IGZyb20gJy4vZXZlbnQtaGVscGVyJztcbmltcG9ydCB7XG4gIHB4LFxuICByZXNldFN0eWxlcyxcbiAgc2V0SW1wb3J0YW50U3R5bGVzLFxuICBzZXRTdHlsZSxcbiAgc2V0U3R5bGVzLFxufSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCB7dG9XaW59IGZyb20gJy4vdHlwZXMnO1xuXG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IEVNQkVEX1BST1AgPSAnX19BTVBfRU1CRURfXyc7XG5cbi8qKiBAY29uc3QgeyFBcnJheTxzdHJpbmc+fSAqL1xuY29uc3QgRVhDTFVERV9JTklfTE9BRCA9XG4gICAgWydBTVAtQUQnLCAnQU1QLUFOQUxZVElDUycsICdBTVAtUElYRUwnLCAnQU1QLUFELUVYSVQnXTtcblxuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgdGhlIG5ldyBcImZyaWVuZGx5IGlmcmFtZVwiIGVtYmVkLlxuICogLSBodG1sOiBUaGUgY29tcGxldGUgY29udGVudCBvZiBhbiBBTVAgZW1iZWQsIHdoaWNoIGlzIGl0c2VsZiBhbiBBTVBcbiAqICAgZG9jdW1lbnQuIENhbiBpbmNsdWRlIHdoYXRldmVyIGlzIG5vcm1hbGx5IGFsbG93ZWQgaW4gYW4gQU1QIGRvY3VtZW50LFxuICogICBleGNlcHQgZm9yIEFNUCBgPHNjcmlwdD5gIGRlY2xhcmF0aW9ucy4gVGhvc2Ugc2hvdWxkIGJlIHBhc3NlZCBhcyBhblxuICogICBhcnJheSBvZiBgZXh0ZW5zaW9uSWRzYC5cbiAqIC0gZXh0ZW5zaW9uc0lkczogQW4gb3B0aW9uYWwgYXJyYXkgb2YgQU1QIGV4dGVuc2lvbiBJRHMgdXNlZCBpbiB0aGlzIGVtYmVkLlxuICogLSBmb250czogQW4gb3B0aW9uYWwgYXJyYXkgb2YgZm9udHMgdXNlZCBpbiB0aGlzIGVtYmVkLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGhvc3Q6ICg/QW1wRWxlbWVudHx1bmRlZmluZWQpLFxuICogICB1cmw6IHN0cmluZyxcbiAqICAgaHRtbDogc3RyaW5nLFxuICogICBleHRlbnNpb25JZHM6ICg/QXJyYXk8c3RyaW5nPnx1bmRlZmluZWQpLFxuICogICBmb250czogKD9BcnJheTxzdHJpbmc+fHVuZGVmaW5lZCksXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IEZyaWVuZGx5SWZyYW1lU3BlYztcblxuXG4vKipcbiAqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH1cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5sZXQgc3JjZG9jU3VwcG9ydGVkO1xuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IHZhbFxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTcmNkb2NTdXBwb3J0ZWRGb3JUZXN0aW5nKHZhbCkge1xuICBzcmNkb2NTdXBwb3J0ZWQgPSB2YWw7XG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIEZyaWVuZGx5IElmcmFtZXMgYXJlIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3JjZG9jU3VwcG9ydGVkKCkge1xuICBpZiAoc3JjZG9jU3VwcG9ydGVkID09PSB1bmRlZmluZWQpIHtcbiAgICBzcmNkb2NTdXBwb3J0ZWQgPSAnc3JjZG9jJyBpbiBIVE1MSUZyYW1lRWxlbWVudC5wcm90b3R5cGU7XG4gIH1cbiAgcmV0dXJuIHNyY2RvY1N1cHBvcnRlZDtcbn1cblxuXG4vKipcbiAqIFNldHMgd2hldGhlciB0aGUgZW1iZWQgaXMgY3VycmVudGx5IHZpc2libGUuIFRoZSBpbnRlcnByZXRhdGlvbiBvZiB2aXNpYmlsaXR5XG4gKiBpcyB1cCB0byB0aGUgZW1iZWQgcGFyZW50LiBIb3dldmVyLCBtb3N0IG9mIHR5cGljYWwgY2FzZXMgd291bGQgcmVseSBvblxuICogd2hldGhlciB0aGUgZW1iZWQgaXMgY3VycmVudGx5IGluIHRoZSB2aWV3cG9ydC5cbiAqIEBwYXJhbSB7IUZyaWVuZGx5SWZyYW1lRW1iZWR9IGVtYmVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZpc2libGVcbiAqIFRPRE8oZHZveXRlbmtvKTogUmUtZXZhbHVhdGUgYW5kIHByb2JhYmx5IGRyb3Agb25jZSBsYXllcnMgYXJlIHJlYWR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0RnJpZW5kbHlJZnJhbWVFbWJlZFZpc2libGUoZW1iZWQsIHZpc2libGUpIHtcbiAgZW1iZWQuc2V0VmlzaWJsZV8odmlzaWJsZSk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbWJlZCBjcmVhdGVkIHVzaW5nIGBpbnN0YWxsRnJpZW5kbHlJZnJhbWVFbWJlZGAgb3IgYG51bGxgLlxuICogQ2F1dGlvbjogVGhpcyB3aWxsIG9ubHkgcmV0dXJuIHRoZSBGSUUgYWZ0ZXIgdGhlIGlmcmFtZSBoYXMgJ2xvYWRlZCcuIElmIHlvdVxuICogYXJlIGNoZWNraW5nIGJlZm9yZSB0aGlzIHNpZ25hbCB5b3UgbWF5IGJlIGluIGEgcmFjZSBjb25kaXRpb24gdGhhdCByZXR1cm5zXG4gKiBudWxsLlxuICogQHBhcmFtIHshSFRNTElGcmFtZUVsZW1lbnR9IGlmcmFtZVxuICogQHJldHVybiB7P0ZyaWVuZGx5SWZyYW1lRW1iZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGcmllbmRseUlmcmFtZUVtYmVkT3B0aW9uYWwoaWZyYW1lKSB7XG4gIHJldHVybiAvKiogQHR5cGUgez9GcmllbmRseUlmcmFtZUVtYmVkfSAqLyAoaWZyYW1lW0VNQkVEX1BST1BdKTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHJlcXVlc3RlZCBcImZyaWVuZGx5IGlmcmFtZVwiIGVtYmVkLiBSZXR1cm5zIHRoZSBwcm9taXNlIHRoYXRcbiAqIHdpbGwgYmUgcmVzb2x2ZWQgYXMgc29vbiBhcyB0aGUgZW1iZWQgaXMgYXZhaWxhYmxlLiBUaGUgYWN0dWFsXG4gKiBpbml0aWFsaXphdGlvbiBvZiB0aGUgZW1iZWQgd2lsbCBzdGFydCBhcyBzb29uIGFzIHRoZSBgaWZyYW1lYCBpcyBhZGRlZFxuICogdG8gdGhlIERPTS5cbiAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGNvbnRhaW5lclxuICogQHBhcmFtIHshRnJpZW5kbHlJZnJhbWVTcGVjfSBzcGVjXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFXaW5kb3cpPX0gb3B0X3ByZWluc3RhbGxDYWxsYmFja1xuICogQHJldHVybiB7IVByb21pc2U8IUZyaWVuZGx5SWZyYW1lRW1iZWQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbEZyaWVuZGx5SWZyYW1lRW1iZWQoaWZyYW1lLCBjb250YWluZXIsIHNwZWMsXG4gIG9wdF9wcmVpbnN0YWxsQ2FsbGJhY2spIHtcbiAgLyoqIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgY29uc3Qgd2luID0gZ2V0VG9wV2luZG93KHRvV2luKGlmcmFtZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSk7XG4gIC8qKiBAY29uc3QgeyEuL3NlcnZpY2UvZXh0ZW5zaW9ucy1pbXBsLkV4dGVuc2lvbnN9ICovXG4gIGNvbnN0IGV4dGVuc2lvbnMgPSBTZXJ2aWNlcy5leHRlbnNpb25zRm9yKHdpbik7XG5cbiAgc2V0U3R5bGUoaWZyYW1lLCAndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgaWZyYW1lLnNldEF0dHJpYnV0ZSgncmVmZXJyZXJwb2xpY3knLCAndW5zYWZlLXVybCcpO1xuXG4gIC8vIFByZS1sb2FkIGV4dGVuc2lvbnMuXG4gIGlmIChzcGVjLmV4dGVuc2lvbklkcykge1xuICAgIHNwZWMuZXh0ZW5zaW9uSWRzLmZvckVhY2goXG4gICAgICAgIGV4dGVuc2lvbklkID0+IGV4dGVuc2lvbnMucHJlbG9hZEV4dGVuc2lvbihleHRlbnNpb25JZCkpO1xuICB9XG5cbiAgY29uc3QgaHRtbCA9IG1lcmdlSHRtbChzcGVjKTtcblxuICAvLyBSZWNlaXZlIHRoZSBzaWduYWwgd2hlbiBpZnJhbWUgaXMgcmVhZHk6IGl0J3MgZG9jdW1lbnQgaXMgZm9ybWVkLlxuICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgIC8vIENocm9tZSBkb2VzIG5vdCByZWZsZWN0IHRoZSBpZnJhbWUgcmVhZHlzdGF0ZS5cbiAgICBpZnJhbWUucmVhZHlTdGF0ZSA9ICdjb21wbGV0ZSc7XG4gIH07XG4gIGNvbnN0IHJlZ2lzdGVyVmlvbGF0aW9uTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2VjdXJpdHlwb2xpY3l2aW9sYXRpb24nLFxuICAgICAgICB2aW9sYXRpb25FdmVudCA9PiB7XG4gICAgICAgICAgZGV2KCkud2FybignRklFJywgJ3NlY3VyaXR5IHBvbGljeSB2aW9sYXRpb24nLCB2aW9sYXRpb25FdmVudCk7XG4gICAgICAgIH0pO1xuICB9O1xuICBsZXQgbG9hZGVkUHJvbWlzZTtcbiAgaWYgKGlzU3JjZG9jU3VwcG9ydGVkKCkpIHtcbiAgICBpZnJhbWUuc3JjZG9jID0gaHRtbDtcbiAgICBsb2FkZWRQcm9taXNlID0gbG9hZFByb21pc2UoaWZyYW1lKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICByZWdpc3RlclZpb2xhdGlvbkxpc3RlbmVyKCk7XG4gIH0gZWxzZSB7XG4gICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgY29uc3QgY2hpbGREb2MgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgICBjaGlsZERvYy5vcGVuKCk7XG4gICAgcmVnaXN0ZXJWaW9sYXRpb25MaXN0ZW5lcigpO1xuICAgIGNoaWxkRG9jLndyaXRlKGh0bWwpO1xuICAgIC8vIFdpdGggZG9jdW1lbnQud3JpdGUsIGBpZnJhbWUub25sb2FkYCBhcnJpdmVzIGFsbW9zdCBpbW1lZGlhdGVseSwgdGh1c1xuICAgIC8vIHdlIG5lZWQgdG8gd2FpdCBmb3IgY2hpbGQncyBgd2luZG93Lm9ubG9hZGAuXG4gICAgbG9hZGVkUHJvbWlzZSA9IGxvYWRQcm9taXNlKGlmcmFtZS5jb250ZW50V2luZG93KTtcbiAgICBjaGlsZERvYy5jbG9zZSgpO1xuICB9XG5cbiAgLy8gV2FpdCBmb3IgZG9jdW1lbnQgcmVhZHkgc2lnbmFsLlxuICAvLyBUaGlzIGlzIGNvbXBsaWNhdGVkIGR1ZSB0byBjcmJ1Zy5jb20vNjQ5MjAxIG9uIENocm9tZSBhbmQgYSBzaW1pbGFyIGlzc3VlXG4gIC8vIG9uIFNhZmFyaSB3aGVyZSBuZXdseSBjcmVhdGVkIGRvY3VtZW50J3MgYHJlYWR5U3RhdGVgIGltbWVkaWF0ZWx5IGVxdWFsc1xuICAvLyBgY29tcGxldGVgLCBldmVuIHRob3VnaCB0aGUgZG9jdW1lbnQgaXRzZWxmIGlzIG5vdCB5ZXQgYXZhaWxhYmxlLiBUaGVyZSdzXG4gIC8vIG5vIG90aGVyIHJlbGlhYmxlIHNpZ25hbCBmb3IgYHJlYWR5U3RhdGVgIGluIGEgY2hpbGQgd2luZG93IGFuZCB0aHVzXG4gIC8vIHdlIGhhdmUgdG8gZmFsbGJhY2sgdG8gcG9sbGluZy5cbiAgbGV0IHJlYWR5UHJvbWlzZTtcbiAgaWYgKGlzSWZyYW1lUmVhZHkoaWZyYW1lKSkge1xuICAgIHJlYWR5UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB9IGVsc2Uge1xuICAgIHJlYWR5UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgLyoqIEBjb25zdCB7bnVtYmVyfSAqL1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPSB3aW4uc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAoaXNJZnJhbWVSZWFkeShpZnJhbWUpKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIHdpbi5jbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfSwgLyogbWlsbGlzZWNvbmRzICovIDUpO1xuXG4gICAgICAvLyBGb3Igc2FmZXR5LCBtYWtlIHN1cmUgd2UgZGVmaW5pdGVseSBzdG9wIHBvbGxpbmcgd2hlbiBjaGlsZCBkb2MgaXNcbiAgICAgIC8vIGxvYWRlZC5cbiAgICAgIGxvYWRlZFByb21pc2UuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICByZXRocm93QXN5bmMoZXJyb3IpO1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgd2luLmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVhZHlQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgIGNvbnN0IGVtYmVkID0gbmV3IEZyaWVuZGx5SWZyYW1lRW1iZWQoaWZyYW1lLCBzcGVjLCBsb2FkZWRQcm9taXNlKTtcbiAgICBpZnJhbWVbRU1CRURfUFJPUF0gPSBlbWJlZDtcblxuICAgIGNvbnN0IGNoaWxkV2luID0gLyoqIEB0eXBlIHshV2luZG93fSAqLyAoaWZyYW1lLmNvbnRlbnRXaW5kb3cpO1xuICAgIC8vIEFkZCBleHRlbnNpb25zLlxuICAgIGV4dGVuc2lvbnMuaW5zdGFsbEV4dGVuc2lvbnNJbkNoaWxkV2luZG93KFxuICAgICAgICBjaGlsZFdpbiwgc3BlYy5leHRlbnNpb25JZHMgfHwgW10sIG9wdF9wcmVpbnN0YWxsQ2FsbGJhY2spO1xuICAgIC8vIFJlYWR5IHRvIGJlIHNob3duLlxuICAgIGVtYmVkLnN0YXJ0UmVuZGVyXygpO1xuICAgIHJldHVybiBlbWJlZDtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCB3aGVuIGlmcmFtZSBpcyByZWFkeS5cbiAqIEBwYXJhbSB7IUhUTUxJRnJhbWVFbGVtZW50fSBpZnJhbWVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSWZyYW1lUmVhZHkoaWZyYW1lKSB7XG4gIC8vIFRoaXMgaXMgY29tcGxpY2F0ZWQgZHVlIHRvIGNyYnVnLmNvbS82NDkyMDEgb24gQ2hyb21lIGFuZCBhIHNpbWlsYXIgaXNzdWVcbiAgLy8gb24gU2FmYXJpIHdoZXJlIG5ld2x5IGNyZWF0ZWQgZG9jdW1lbnQncyBgcmVhZHlTdGF0ZWAgaW1tZWRpYXRlbHkgZXF1YWxzXG4gIC8vIGBjb21wbGV0ZWAsIGV2ZW4gdGhvdWdoIHRoZSBkb2N1bWVudCBpdHNlbGYgaXMgbm90IHlldCBhdmFpbGFibGUuIFRoZXJlJ3NcbiAgLy8gbm8gb3RoZXIgcmVsaWFibGUgc2lnbmFsIGZvciBgcmVhZHlTdGF0ZWAgaW4gYSBjaGlsZCB3aW5kb3cgYW5kIHRodXNcbiAgLy8gdGhlIGJlc3Qgd2F5IHRvIGNoZWNrIGlzIHRvIHNlZSB0aGUgY29udGVudHMgb2YgdGhlIGJvZHkuXG4gIGNvbnN0IGNoaWxkRG9jID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIHJldHVybiAhIShjaGlsZERvYyAmJlxuICAgICAgaXNEb2N1bWVudFJlYWR5KGNoaWxkRG9jKSAmJlxuICAgICAgY2hpbGREb2MuYm9keSAmJlxuICAgICAgY2hpbGREb2MuYm9keS5maXJzdENoaWxkKTtcbn1cblxuXG4vKipcbiAqIE1lcmdlcyBiYXNlIGFuZCBmb250cyBpbnRvIGh0bWwgZG9jdW1lbnQuXG4gKiBAcGFyYW0geyFGcmllbmRseUlmcmFtZVNwZWN9IHNwZWNcbiAqL1xuZnVuY3Rpb24gbWVyZ2VIdG1sKHNwZWMpIHtcbiAgY29uc3Qgb3JpZ2luYWxIdG1sID0gc3BlYy5odG1sO1xuICBjb25zdCBvcmlnaW5hbEh0bWxVcCA9IG9yaWdpbmFsSHRtbC50b1VwcGVyQ2FzZSgpO1xuXG4gIC8vIEZpbmQgdGhlIGluc2VydGlvbiBwb2ludC5cbiAgbGV0IGlwID0gb3JpZ2luYWxIdG1sVXAuaW5kZXhPZignPEhFQUQnKTtcbiAgaWYgKGlwICE9IC0xKSB7XG4gICAgaXAgPSBvcmlnaW5hbEh0bWxVcC5pbmRleE9mKCc+JywgaXAgKyAxKSArIDE7XG4gIH1cbiAgaWYgKGlwID09IC0xKSB7XG4gICAgaXAgPSBvcmlnaW5hbEh0bWxVcC5pbmRleE9mKCc8Qk9EWScpO1xuICB9XG4gIGlmIChpcCA9PSAtMSkge1xuICAgIGlwID0gb3JpZ2luYWxIdG1sVXAuaW5kZXhPZignPEhUTUwnKTtcbiAgICBpZiAoaXAgIT0gLTEpIHtcbiAgICAgIGlwID0gb3JpZ2luYWxIdG1sVXAuaW5kZXhPZignPicsIGlwICsgMSkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIC8vIFByZWFtYnVsZS5cbiAgaWYgKGlwID4gMCkge1xuICAgIHJlc3VsdC5wdXNoKG9yaWdpbmFsSHRtbC5zdWJzdHJpbmcoMCwgaXApKTtcbiAgfVxuXG4gIC8vIEFkZCA8QkFTRT4gdGFnLlxuICByZXN1bHQucHVzaChgPGJhc2UgaHJlZj1cIiR7ZXNjYXBlSHRtbChzcGVjLnVybCl9XCI+YCk7XG5cbiAgLy8gTG9hZCBmb250cy5cbiAgaWYgKHNwZWMuZm9udHMpIHtcbiAgICBzcGVjLmZvbnRzLmZvckVhY2goZm9udCA9PiB7XG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICBgPGxpbmsgaHJlZj1cIiR7ZXNjYXBlSHRtbChmb250KX1cIiByZWw9XCJzdHlsZXNoZWV0XCIgdHlwZT1cInRleHQvY3NzXCI+YCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBMb2FkIENTUFxuICByZXN1bHQucHVzaCgnPG1ldGEgaHR0cC1lcXVpdj1Db250ZW50LVNlY3VyaXR5LVBvbGljeSAnICtcbiAgICAgICdjb250ZW50PVwic2NyaXB0LXNyYyBcXCdub25lXFwnO29iamVjdC1zcmMgXFwnbm9uZVxcJztjaGlsZC1zcmMgXFwnbm9uZVxcJ1wiPicpO1xuXG4gIC8vIFBvc3RhbWJ1bGUuXG4gIGlmIChpcCA+IDApIHtcbiAgICByZXN1bHQucHVzaChvcmlnaW5hbEh0bWwuc3Vic3RyaW5nKGlwKSk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnB1c2gob3JpZ2luYWxIdG1sKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJyk7XG59XG5cblxuLyoqXG4gKiBFeHBvc2VzIGBtZXJnZUh0bWxgIGZvciB0ZXN0aW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIHshRnJpZW5kbHlJZnJhbWVTcGVjfSBzcGVjXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSHRtbEZvclRlc3Rpbmcoc3BlYykge1xuICByZXR1cm4gbWVyZ2VIdG1sKHNwZWMpO1xufVxuXG5cbi8qKlxuICogQSBcImZyaWVuZGx5IGlmcmFtZVwiIGVtYmVkLiBUaGlzIGlzIHRoZSBpZnJhbWUgdGhhdCdzIGZ1bGx5IGFjY2Vzc2libGUgdG9cbiAqIHRoZSBBTVAgcnVudGltZS4gSXQncyBzaW1pbGFyIHRvIFNoYWRvdyBET00gaW4gbWFueSByZXNwZWN0cywgYnV0IGl0IGFsc29cbiAqIHByb3ZpZGVzIGlmcmFtZS92aWV3cG9ydCBtZWFzdXJlbWVudHMgYW5kIGVuYWJsZXMgdGhlIHVzZSBvZiBgdmhgLCBgdndgIGFuZFxuICogYEBtZWRpYWAgQ1NTLlxuICpcbiAqIFRoZSBmcmllbmRseSBpZnJhbWUgaXMgbWFuYWdlZCBieSB0aGUgdG9wLWxldmVsIEFNUCBSdW50aW1lLiBXaGVuIGl0J3NcbiAqIGRlc3Ryb3llZCwgdGhlIGBkZXN0cm95YCBtZXRob2QgbXVzdCBiZSBjYWxsZWQgdG8gZnJlZSB1cCB0aGUgc2hhcmVkXG4gKiByZXNvdXJjZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGcmllbmRseUlmcmFtZUVtYmVkIHtcblxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTElGcmFtZUVsZW1lbnR9IGlmcmFtZVxuICAgKiBAcGFyYW0geyFGcmllbmRseUlmcmFtZVNwZWN9IHNwZWNcbiAgICogQHBhcmFtIHshUHJvbWlzZX0gbG9hZGVkUHJvbWlzZVxuICAgKi9cbiAgY29uc3RydWN0b3IoaWZyYW1lLCBzcGVjLCBsb2FkZWRQcm9taXNlKSB7XG4gICAgLyoqIEBjb25zdCB7IUhUTUxJRnJhbWVFbGVtZW50fSAqL1xuICAgIHRoaXMuaWZyYW1lID0gaWZyYW1lO1xuXG4gICAgLyoqIEBjb25zdCB7IVdpbmRvd30gKi9cbiAgICB0aGlzLndpbiA9IC8qKiBAdHlwZXshV2luZG93fSAqLyhpZnJhbWUuY29udGVudFdpbmRvdyk7XG5cbiAgICAvKiogQGNvbnN0IHshRnJpZW5kbHlJZnJhbWVTcGVjfSAqL1xuICAgIHRoaXMuc3BlYyA9IHNwZWM7XG5cbiAgICAvKiogQGNvbnN0IHs/QW1wRWxlbWVudH0gKi9cbiAgICB0aGlzLmhvc3QgPSBzcGVjLmhvc3QgfHwgbnVsbDtcblxuICAgIC8qKiBAY29uc3QgQHByaXZhdGUge3RpbWV9ICovXG4gICAgdGhpcy5zdGFydFRpbWVfID0gRGF0ZS5ub3coKTtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBvdXQgYXMgaW52aXNpYmxlLiBUaGUgaW50ZXJwcmV0YXRpb24gb2YgdGhpcyBmbGFnIGlzIHVwIHRvXG4gICAgICogdGhlIGVtZGVkIHBhcmVudC5cbiAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnZpc2libGVfID0gZmFsc2U7XG5cbiAgICAvKiogQHByaXZhdGUgeyFPYnNlcnZhYmxlPGJvb2xlYW4+fSAqL1xuICAgIHRoaXMudmlzaWJpbGl0eU9ic2VydmFibGVfID0gbmV3IE9ic2VydmFibGUoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgKi9cbiAgICB0aGlzLnNpZ25hbHNfID0gdGhpcy5ob3N0ID8gdGhpcy5ob3N0LnNpZ25hbHMoKSA6IG5ldyBTaWduYWxzKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshUHJvbWlzZX0gKi9cbiAgICB0aGlzLndpbkxvYWRlZFByb21pc2VfID0gUHJvbWlzZS5hbGwoW2xvYWRlZFByb21pc2UsIHRoaXMud2hlblJlYWR5KCldKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmVzIHRoYXQgYWxsIHJlc291cmNlcyBmcm9tIHRoaXMgaWZyYW1lIGhhdmUgYmVlbiByZWxlYXNlZC5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgU2VydmljZXMucmVzb3VyY2VzRm9yRG9jKHRoaXMuaWZyYW1lKS5yZW1vdmVGb3JDaGlsZFdpbmRvdyh0aGlzLndpbik7XG4gICAgZGlzcG9zZVNlcnZpY2VzRm9yRW1iZWQodGhpcy53aW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge3RpbWV9XG4gICAqL1xuICBnZXRTdGFydFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRUaW1lXztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBiYXNlIFVSTCBmb3IgdGhlIGVtYmVkZGVkIGRvY3VtZW50LlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BlYy51cmw7XG4gIH1cblxuICAvKiogQHJldHVybiB7IVNpZ25hbHN9ICovXG4gIHNpZ25hbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2lnbmFsc187XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGUgZW1iZWQgZG9jdW1lbnQgaXMgcmVhZHkuXG4gICAqIE5vdGljZSB0aGF0IHRoaXMgc2lnbmFsIGNvaW5jaWRlcyB3aXRoIHRoZSBlbWJlZCdzIGByZW5kZXItc3RhcnRgLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5SZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaWduYWxzXy53aGVuU2lnbmFsKENvbW1vblNpZ25hbHMuUkVOREVSX1NUQVJUKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBjaGlsZCB3aW5kb3cncyBgb25sb2FkYCBldmVudFxuICAgKiBoYXMgYmVlbiBlbWl0dGVkLiBJbiBmcmllbmRseSBpZnJhbWVzIHRoaXMgdHlwaWNhbGx5IG9ubHkgaW5jbHVkZXMgZm9udFxuICAgKiBsb2FkaW5nLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAgICovXG4gIHdoZW5XaW5kb3dMb2FkZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMud2luTG9hZGVkUHJvbWlzZV87XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiB0aGUgaW5pdGlhbCBsb2FkICBvZiB0aGUgZW1iZWQnc1xuICAgKiBjb250ZW50IGhhcyBiZWVuIGNvbXBsZXRlZC5cbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICB3aGVuSW5pTG9hZGVkKCkge1xuICAgIHJldHVybiB0aGlzLnNpZ25hbHNfLndoZW5TaWduYWwoQ29tbW9uU2lnbmFscy5JTklfTE9BRCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHJlc3RyaWN0ZWRcbiAgICovXG4gIHN0YXJ0UmVuZGVyXygpIHtcbiAgICBpZiAodGhpcy5ob3N0KSB7XG4gICAgICB0aGlzLmhvc3QucmVuZGVyU3RhcnRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNpZ25hbHNfLnNpZ25hbChDb21tb25TaWduYWxzLlJFTkRFUl9TVEFSVCk7XG4gICAgfVxuICAgIHNldFN0eWxlKHRoaXMuaWZyYW1lLCAndmlzaWJpbGl0eScsICcnKTtcbiAgICBpZiAodGhpcy53aW4uZG9jdW1lbnQgJiYgdGhpcy53aW4uZG9jdW1lbnQuYm9keSkge1xuICAgICAgdGhpcy53aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ktYW1waHRtbC1maWUnKTtcbiAgICAgIHNldFN0eWxlcyhkZXYoKS5hc3NlcnRFbGVtZW50KHRoaXMud2luLmRvY3VtZW50LmJvZHkpLCB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJyxcbiAgICAgICAgYW5pbWF0aW9uOiAnbm9uZScsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsIGxvYWQgc2lnbmFsIHNpZ25hbC5cbiAgICBsZXQgcmVjdDtcbiAgICBpZiAodGhpcy5ob3N0KSB7XG4gICAgICByZWN0ID0gdGhpcy5ob3N0LmdldExheW91dEJveCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gbGF5b3V0UmVjdEx0d2goXG4gICAgICAgICAgMCwgMCxcbiAgICAgICAgICB0aGlzLndpbi4vKk9LKi9pbm5lcldpZHRoLFxuICAgICAgICAgIHRoaXMud2luLi8qT0sqL2lubmVySGVpZ2h0KTtcbiAgICB9XG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgdGhpcy53aGVuUmVhZHkoKSxcbiAgICAgIHdoZW5Db250ZW50SW5pTG9hZCh0aGlzLmlmcmFtZSwgdGhpcy53aW4sIHJlY3QpLFxuICAgIF0pLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5zaWduYWxzXy5zaWduYWwoQ29tbW9uU2lnbmFscy5JTklfTE9BRCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgZW1iZWQgaXMgY3VycmVudGx5IHZpc2libGUuIFRoZSBpbnRlcnByZXRhdGlvbiBvZiB2aXNpYmlsaXR5XG4gICAqIGlzIHVwIHRvIHRoZSBlbWJlZCBwYXJlbnQuIEhvd2V2ZXIsIG1vc3Qgb2YgdHlwaWNhbCBjYXNlcyB3b3VsZCByZWx5IG9uXG4gICAqIHdoZXRoZXIgdGhlIGVtYmVkIGlzIGN1cnJlbnRseSBpbiB0aGUgdmlld3BvcnQuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqIFRPRE8oZHZveXRlbmtvKTogUmUtZXZhbHVhdGUgYW5kIHByb2JhYmx5IGRyb3Agb25jZSBsYXllcnMgYXJlIHJlYWR5LlxuICAgKi9cbiAgaXNWaXNpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnZpc2libGVfO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlZSBgaXNWaXNpYmxlYCBmb3IgbW9yZSBpbmZvLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGJvb2xlYW4pfSBoYW5kbGVyXG4gICAqIEByZXR1cm4geyFVbmxpc3RlbkRlZn1cbiAgICovXG4gIG9uVmlzaWJpbGl0eUNoYW5nZWQoaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLnZpc2liaWxpdHlPYnNlcnZhYmxlXy5hZGQoaGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtib29sZWFufSB2aXNpYmxlXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXN0cmljdGVkXG4gICAqL1xuICBzZXRWaXNpYmxlXyh2aXNpYmxlKSB7XG4gICAgaWYgKHRoaXMudmlzaWJsZV8gIT0gdmlzaWJsZSkge1xuICAgICAgdGhpcy52aXNpYmxlXyA9IHZpc2libGU7XG4gICAgICB0aGlzLnZpc2liaWxpdHlPYnNlcnZhYmxlXy5maXJlKHRoaXMudmlzaWJsZV8pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshSFRNTEJvZHlFbGVtZW50fVxuICAgKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAgICovXG4gIGdldEJvZHlFbGVtZW50KCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFIVE1MQm9keUVsZW1lbnR9ICovIChcbiAgICAgICh0aGlzLmlmcmFtZS5jb250ZW50RG9jdW1lbnQgfHwgdGhpcy5pZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudClcbiAgICAgICAgICAuYm9keSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IS4vc2VydmljZS9yZXNvdXJjZXMtaW1wbC5SZXNvdXJjZXN9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRSZXNvdXJjZXNfKCkge1xuICAgIHJldHVybiBTZXJ2aWNlcy5yZXNvdXJjZXNGb3JEb2ModGhpcy5pZnJhbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBtZWFzdXJlL211dGF0ZSBjeWNsZSBlbnN1cmluZyB0aGF0IHRoZSBpZnJhbWUgY2hhbmdlIGlzIHByb3BhZ2F0ZWRcbiAgICogdG8gdGhlIHJlc291cmNlIG1hbmFnZXIuXG4gICAqIEBwYXJhbSB7e21lYXN1cmU6IChmdW5jdGlvbigpfHVuZGVmaW5lZCksIG11dGF0ZTogZnVuY3Rpb24oKX19IHRhc2tcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtZWFzdXJlTXV0YXRlXyh0YXNrKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2VzXygpLm1lYXN1cmVNdXRhdGVFbGVtZW50KHRoaXMuaWZyYW1lLFxuICAgICAgICB0YXNrLm1lYXN1cmUgfHwgbnVsbCwgdGFzay5tdXRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgZW50ZXJGdWxsT3ZlcmxheU1vZGUoKSB7XG4gICAgY29uc3QgYW1wQWRQYXJlbnQgPSBkZXYoKS5hc3NlcnRFbGVtZW50KHRoaXMuaWZyYW1lLnBhcmVudE5vZGUpO1xuXG4gICAgLy8gU2VjdXJpdHkgYXNzZXJ0aW9uLiBPdGhlcndpc2UgYW55IDNwIGZyYW1lIGNvdWxkIHJlcXVlc3QgbGlnaGJveCBtb2RlLlxuICAgIHVzZXIoKS5hc3NlcnQoYW1wQWRQYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdhbXAtYWQnLFxuICAgICAgICAnT25seSA8YW1wLWFkPiBpcyBhbGxvd2VkIHRvIGVudGVyIGxpZ2h0Ym94IG1vZGUuJyk7XG5cbiAgICBjb25zdCBib2R5U3R5bGUgPSB7XG4gICAgICAnYmFja2dyb3VuZCc6ICd0cmFuc3BhcmVudCcsXG4gICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgJ2JvdHRvbSc6ICdhdXRvJyxcbiAgICAgICdyaWdodCc6ICdhdXRvJyxcblxuICAgICAgLy8gU2V0IGZvciByZXBsYWNpbmcgd2l0aCB2c3luYyB2YWx1ZXMuXG4gICAgICAndG9wJzogJycsXG4gICAgICAnbGVmdCc6ICcnLFxuICAgICAgJ3dpZHRoJzogJycsXG4gICAgICAnaGVpZ2h0JzogJycsXG4gICAgfTtcblxuICAgIGNvbnN0IGlmcmFtZVN0eWxlID0ge1xuICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICdsZWZ0JzogMCxcbiAgICAgICdyaWdodCc6IDAsXG4gICAgICAnYm90dG9tJzogMCxcbiAgICAgICd3aWR0aCc6ICcxMDB2dycsXG4gICAgICAndG9wJzogMCxcbiAgICAgICdoZWlnaHQnOiAnMTAwdmgnLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5tZWFzdXJlTXV0YXRlXyh7XG4gICAgICBtZWFzdXJlOiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmhvc3QgP1xuICAgICAgICAgIHRoaXMuaG9zdC5nZXRMYXlvdXRCb3goKSA6XG4gICAgICAgICAgdGhpcy5pZnJhbWUuLypPSyovZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgLy8gT2Zmc2V0IGJ5IHNjcm9sbCB0b3AgYXMgaWZyYW1lIHdpbGwgYmUgcG9zaXRpb246IGZpeGVkLlxuICAgICAgICBjb25zdCBkeSA9IC1TZXJ2aWNlcy52aWV3cG9ydEZvckRvYyh0aGlzLmlmcmFtZSkuZ2V0U2Nyb2xsVG9wKCk7XG4gICAgICAgIGNvbnN0IHt0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHR9ID0gbW92ZUxheW91dFJlY3QocmVjdCwgLyogZHggKi8gMCwgZHkpO1xuXG4gICAgICAgIC8vIE9mZnNldCBib2R5IGJ5IGhlYWRlciBoZWlnaHQgdG8gcHJldmVudCB2aXN1YWwganVtcC5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5U3R5bGUsIHtcbiAgICAgICAgICAndG9wJzogcHgodG9wKSxcbiAgICAgICAgICAnbGVmdCc6IHB4KGxlZnQpLFxuICAgICAgICAgICd3aWR0aCc6IHB4KHdpZHRoKSxcbiAgICAgICAgICAnaGVpZ2h0JzogcHgoaGVpZ2h0KSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgbXV0YXRlOiAoKSA9PiB7XG4gICAgICAgIC8vICFpbXBvcnRhbnQgdG8gcHJldmVudCBhYnVzZSBlLmcuIGJveCBAIGx0d2ggPSAwLCAwLCAwLCAwXG4gICAgICAgIHNldEltcG9ydGFudFN0eWxlcyh0aGlzLmlmcmFtZSwgaWZyYW1lU3R5bGUpO1xuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gb3ZlcnJpZGUgcnVudGltZS1sZXZlbCAhaW1wb3J0YW50IHJ1bGVzXG4gICAgICAgIHNldEltcG9ydGFudFN0eWxlcyh0aGlzLmdldEJvZHlFbGVtZW50KCksIGJvZHlTdHlsZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9taXNlfVxuICAgKi9cbiAgbGVhdmVGdWxsT3ZlcmxheU1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVhc3VyZU11dGF0ZV8oe1xuICAgICAgbXV0YXRlOiAoKSA9PiB7XG4gICAgICAgIHJlc2V0U3R5bGVzKHRoaXMuaWZyYW1lLCBbXG4gICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgJ3JpZ2h0JyxcbiAgICAgICAgICAndG9wJyxcbiAgICAgICAgICAnYm90dG9tJyxcbiAgICAgICAgICAnd2lkdGgnLFxuICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICBdKTtcblxuICAgICAgICAvLyB3ZSdyZSBub3QgcmVzZXR0aW5nIGJhY2tncm91bmQgaGVyZSBhcyB3ZSBuZWVkIHRvIHNldCBpdCB0b1xuICAgICAgICAvLyB0cmFuc3BhcmVudCBwZXJtYW5lbnRseS5cbiAgICAgICAgcmVzZXRTdHlsZXModGhpcy5nZXRCb2R5RWxlbWVudCgpLCBbXG4gICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAndG9wJyxcbiAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgICAnYm90dG9tJyxcbiAgICAgICAgICAncmlnaHQnLFxuICAgICAgICBdKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIGFsbCBjb250ZW50IGVsZW1lbnRzXG4gKiBoYXZlIGJlZW4gbG9hZGVkIGluIHRoZSBpbml0aWFsbHkgdmlzaWJsZSBzZXQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAqIEBwYXJhbSB7IVdpbmRvd30gaG9zdFdpblxuICogQHBhcmFtIHshLi9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmfSByZWN0XG4gKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5Db250ZW50SW5pTG9hZChlbGVtZW50T3JBbXBEb2MsIGhvc3RXaW4sIHJlY3QpIHtcbiAgcmV0dXJuIFNlcnZpY2VzLnJlc291cmNlc0ZvckRvYyhlbGVtZW50T3JBbXBEb2MpXG4gICAgICAuZ2V0UmVzb3VyY2VzSW5SZWN0KGhvc3RXaW4sIHJlY3QpXG4gICAgICAudGhlbihyZXNvdXJjZXMgPT4ge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICByZXNvdXJjZXMuZm9yRWFjaChyID0+IHtcbiAgICAgICAgICBpZiAoIUVYQ0xVREVfSU5JX0xPQUQuaW5jbHVkZXMoci5lbGVtZW50LnRhZ05hbWUpKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHIubG9hZGVkT25jZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW5GaWUoZWxlbWVudCkge1xuICByZXR1cm4gISFjbG9zZXN0QnlTZWxlY3RvcihlbGVtZW50LCAnLmktYW1waHRtbC1maWUnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHtEb21GaW5nZXJwcmludH0gZnJvbSAnLi91dGlscy9kb20tZmluZ2VycHJpbnQnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0LmpzJztcbmltcG9ydCB7ZXhwZXJpbWVudFRvZ2dsZXMsIGlzQ2FuYXJ5fSBmcm9tICcuL2V4cGVyaW1lbnRzJztcbmltcG9ydCB7Z2V0TGVuZ3RoTnVtZXJhbH0gZnJvbSAnLi9sYXlvdXQnO1xuaW1wb3J0IHtnZXRNb2RlT2JqZWN0fSBmcm9tICcuL21vZGUtb2JqZWN0JztcbmltcG9ydCB7dXJsc30gZnJvbSAnLi9jb25maWcnO1xuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSBhdHRyaWJ1dGVzIGZvciB0aGUgYWQgdGVtcGxhdGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHBhcmVudFdpbmRvd1xuICogQHBhcmFtIHshQW1wRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRpbmVsXG4gKiBAcGFyYW0geyFKc29uT2JqZWN0PX0gYXR0cmlidXRlc1xuICogQHJldHVybiB7IUpzb25PYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0TWV0YWRhdGEoXG4gIHBhcmVudFdpbmRvdywgZWxlbWVudCwgc2VudGluZWwsIGF0dHJpYnV0ZXMpIHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcyA/IGF0dHJpYnV0ZXMgOiBkaWN0KCk7XG4gIGF0dHJpYnV0ZXNbJ3dpZHRoJ10gPSBnZXRMZW5ndGhOdW1lcmFsKHdpZHRoKTtcbiAgYXR0cmlidXRlc1snaGVpZ2h0J10gPSBnZXRMZW5ndGhOdW1lcmFsKGhlaWdodCk7XG4gIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSkge1xuICAgIGF0dHJpYnV0ZXNbJ3RpdGxlJ10gPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgfVxuICBsZXQgbG9jYXRpb25IcmVmID0gcGFyZW50V2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIC8vIFRoaXMgaXMgcmVhbGx5IG9ubHkgbmVlZGVkIGZvciB0ZXN0cywgYnV0IHdoYXRldmVyLiBDaGlsZHJlblxuICAvLyBzZWUgdXMgYXMgdGhlIGxvZ2ljYWwgb3JpZ2luLCBzbyB0ZWxsaW5nIHRoZW0gd2UgYXJlIGFib3V0OnNyY2RvY1xuICAvLyB3aWxsIGZhaWwgYW5jZXN0b3IgY2hlY2tzLlxuICBpZiAobG9jYXRpb25IcmVmID09ICdhYm91dDpzcmNkb2MnKSB7XG4gICAgbG9jYXRpb25IcmVmID0gcGFyZW50V2luZG93LnBhcmVudC5sb2NhdGlvbi5ocmVmO1xuICB9XG5cbiAgY29uc3QgZG9jSW5mbyA9IFNlcnZpY2VzLmRvY3VtZW50SW5mb0ZvckRvYyhlbGVtZW50KTtcbiAgY29uc3Qgdmlld2VyID0gU2VydmljZXMudmlld2VyRm9yRG9jKGVsZW1lbnQpO1xuICBjb25zdCByZWZlcnJlciA9IHZpZXdlci5nZXRVbmNvbmZpcm1lZFJlZmVycmVyVXJsKCk7XG5cbiAgLy8gVE9ETyhhbGFub3JvemNvKTogUmVkZXNpZ24gZGF0YSBzdHJ1Y3R1cmUgc28gdGhhdCBmaWVsZHMgbm90IGV4cG9zZWQgYnlcbiAgLy8gQW1wQ29udGV4dCBhcmUgbm90IHBhcnQgb2YgdGhpcyBvYmplY3QuXG4gIGNvbnN0IGxheW91dFJlY3QgPSBlbGVtZW50LmdldFBhZ2VMYXlvdXRCb3goKTtcbiAgYXR0cmlidXRlc1snX2NvbnRleHQnXSA9IGRpY3Qoe1xuICAgICdhbXBjb250ZXh0VmVyc2lvbic6ICckaW50ZXJuYWxSdW50aW1lVmVyc2lvbiQnLFxuICAgICdhbXBjb250ZXh0RmlsZXBhdGgnOiB1cmxzLnRoaXJkUGFydHkgKyAnLyRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJCcgK1xuICAgICAgICAnL2FtcGNvbnRleHQtdjAuanMnLFxuICAgICdzb3VyY2VVcmwnOiBkb2NJbmZvLnNvdXJjZVVybCxcbiAgICAncmVmZXJyZXInOiByZWZlcnJlcixcbiAgICAnY2Fub25pY2FsVXJsJzogZG9jSW5mby5jYW5vbmljYWxVcmwsXG4gICAgJ3BhZ2VWaWV3SWQnOiBkb2NJbmZvLnBhZ2VWaWV3SWQsXG4gICAgJ2xvY2F0aW9uJzoge1xuICAgICAgJ2hyZWYnOiBsb2NhdGlvbkhyZWYsXG4gICAgfSxcbiAgICAnc3RhcnRUaW1lJzogc3RhcnRUaW1lLFxuICAgICd0YWdOYW1lJzogZWxlbWVudC50YWdOYW1lLFxuICAgICdtb2RlJzogZ2V0TW9kZU9iamVjdCgpLFxuICAgICdjYW5hcnknOiBpc0NhbmFyeShwYXJlbnRXaW5kb3cpLFxuICAgICdoaWRkZW4nOiAhdmlld2VyLmlzVmlzaWJsZSgpLFxuICAgICdpbml0aWFsTGF5b3V0UmVjdCc6IGxheW91dFJlY3QgPyB7XG4gICAgICAnbGVmdCc6IGxheW91dFJlY3QubGVmdCxcbiAgICAgICd0b3AnOiBsYXlvdXRSZWN0LnRvcCxcbiAgICAgICd3aWR0aCc6IGxheW91dFJlY3Qud2lkdGgsXG4gICAgICAnaGVpZ2h0JzogbGF5b3V0UmVjdC5oZWlnaHQsXG4gICAgfSA6IG51bGwsXG4gICAgJ2luaXRpYWxJbnRlcnNlY3Rpb24nOiBlbGVtZW50LmdldEludGVyc2VjdGlvbkNoYW5nZUVudHJ5KCksXG4gICAgJ2RvbUZpbmdlcnByaW50JzogRG9tRmluZ2VycHJpbnQuZ2VuZXJhdGUoZWxlbWVudCksXG4gICAgJ2V4cGVyaW1lbnRUb2dnbGVzJzogZXhwZXJpbWVudFRvZ2dsZXMocGFyZW50V2luZG93KSxcbiAgICAnc2VudGluZWwnOiBzZW50aW5lbCxcbiAgfSk7XG4gIGNvbnN0IGFkU3JjID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICBpZiAoYWRTcmMpIHtcbiAgICBhdHRyaWJ1dGVzWydzcmMnXSA9IGFkU3JjO1xuICB9XG4gIHJldHVybiBhdHRyaWJ1dGVzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7YWRkQXR0cmlidXRlc1RvRWxlbWVudCwgY2xvc2VzdEJ5U2VsZWN0b3J9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7ZGVzZXJpYWxpemVNZXNzYWdlLCBpc0FtcE1lc3NhZ2V9IGZyb20gJy4vM3AtZnJhbWUtbWVzc2FnaW5nJztcbmltcG9ydCB7ZGV2fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7ZmlsdGVyU3BsaWNlfSBmcm9tICcuL3V0aWxzL2FycmF5JztcbmltcG9ydCB7Z2V0RGF0YX0gZnJvbSAnLi9ldmVudC1oZWxwZXInO1xuaW1wb3J0IHtwYXJzZVVybERlcHJlY2F0ZWR9IGZyb20gJy4vdXJsJztcbmltcG9ydCB7c2V0U3R5bGV9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IHt0cnlQYXJzZUpzb259IGZyb20gJy4vanNvbic7XG5cbi8qKlxuICogU2VudGluZWwgdXNlZCB0byBmb3JjZSB1bmxpc3RlbmluZyBhZnRlciBhIGlmcmFtZSBpcyBkZXRhY2hlZC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFVOTElTVEVOX1NFTlRJTkVMID0gJ3VubGlzdGVuJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBmcmFtZTogIUVsZW1lbnQsXG4gKiAgIGV2ZW50czogIU9iamVjdDxzdHJpbmcsICFBcnJheTxmdW5jdGlvbighSnNvbk9iamVjdCk+PlxuICogfX1cbiAqL1xubGV0IFdpbmRvd0V2ZW50c0RlZjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbWFwcGluZyBmcm9tIGEgVVJMJ3Mgb3JpZ2luIHRvIGFuIGFycmF5IG9mIHdpbmRvd3MgYW5kIHRoZWlyXG4gKiBsaXN0ZW5Gb3IgbGlzdGVuZXJzLlxuICogQHBhcmFtIHs/V2luZG93fSBwYXJlbnRXaW4gdGhlIHdpbmRvdyB0aGF0IGNyZWF0ZWQgdGhlIGlmcmFtZVxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2NyZWF0ZSBjcmVhdGUgdGhlIG1hcHBpbmcgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAqIEByZXR1cm4gez9PYmplY3Q8c3RyaW5nLCAhQXJyYXk8IVdpbmRvd0V2ZW50c0RlZj4+fVxuICovXG5mdW5jdGlvbiBnZXRMaXN0ZW5Gb3JzKHBhcmVudFdpbiwgb3B0X2NyZWF0ZSkge1xuICBsZXQge2xpc3RlbmluZ0ZvcnN9ID0gcGFyZW50V2luO1xuXG4gIGlmICghbGlzdGVuaW5nRm9ycyAmJiBvcHRfY3JlYXRlKSB7XG4gICAgbGlzdGVuaW5nRm9ycyA9IHBhcmVudFdpbi5saXN0ZW5pbmdGb3JzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuICByZXR1cm4gbGlzdGVuaW5nRm9ycyB8fCBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgV2luZG93RXZlbnRzRGVmIHRoYXQgaGF2ZSBoYWQgYW55IGxpc3RlbkZvciBsaXN0ZW5lcnNcbiAqIHJlZ2lzdGVyZWQgZm9yIHRoaXMgc2VudGluZWwuXG4gKiBAcGFyYW0gez9XaW5kb3d9IHBhcmVudFdpbiB0aGUgd2luZG93IHRoYXQgY3JlYXRlZCB0aGUgaWZyYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGluZWwgdGhlIHNlbnRpbmVsIG9mIHRoZSBtZXNzYWdlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY3JlYXRlIGNyZWF0ZSB0aGUgYXJyYXkgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAqIEByZXR1cm4gez9BcnJheTwhV2luZG93RXZlbnRzRGVmPn1cbiAqL1xuZnVuY3Rpb24gZ2V0TGlzdGVuRm9yU2VudGluZWwocGFyZW50V2luLCBzZW50aW5lbCwgb3B0X2NyZWF0ZSkge1xuICBjb25zdCBsaXN0ZW5pbmdGb3JzID0gZ2V0TGlzdGVuRm9ycyhwYXJlbnRXaW4sIG9wdF9jcmVhdGUpO1xuICBpZiAoIWxpc3RlbmluZ0ZvcnMpIHtcbiAgICByZXR1cm4gbGlzdGVuaW5nRm9ycztcbiAgfVxuXG4gIGxldCBsaXN0ZW5TZW50aW5lbCA9IGxpc3RlbmluZ0ZvcnNbc2VudGluZWxdO1xuICBpZiAoIWxpc3RlblNlbnRpbmVsICYmIG9wdF9jcmVhdGUpIHtcbiAgICBsaXN0ZW5TZW50aW5lbCA9IGxpc3RlbmluZ0ZvcnNbc2VudGluZWxdID0gW107XG4gIH1cbiAgcmV0dXJuIGxpc3RlblNlbnRpbmVsIHx8IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBtYXBwaW5nIG9mIGV2ZW50IG5hbWVzIHRvIGxpc3RlbkZvciBsaXN0ZW5lcnMuXG4gKiBAcGFyYW0gez9XaW5kb3d9IHBhcmVudFdpbiB0aGUgd2luZG93IHRoYXQgY3JlYXRlZCB0aGUgaWZyYW1lXG4gKiBAcGFyYW0geyFFbGVtZW50fSBpZnJhbWUgdGhlIGlmcmFtZSBlbGVtZW50IHdobydzIGNvbnRleHQgd2lsbCB0cmlnZ2VyIHRoZVxuICogICAgIGV2ZW50XG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXMzUCBzZXQgdG8gdHJ1ZSBpZiB0aGUgaWZyYW1lIGlzIDNwLlxuICogQHJldHVybiB7P09iamVjdDxzdHJpbmcsICFBcnJheTxmdW5jdGlvbighSnNvbk9iamVjdCwgIVdpbmRvdywgc3RyaW5nKT4+fVxuICovXG5mdW5jdGlvbiBnZXRPckNyZWF0ZUxpc3RlbkZvckV2ZW50cyhwYXJlbnRXaW4sIGlmcmFtZSwgb3B0X2lzM1ApIHtcbiAgY29uc3Qge29yaWdpbn0gPSBwYXJzZVVybERlcHJlY2F0ZWQoaWZyYW1lLnNyYyk7XG4gIGNvbnN0IHNlbnRpbmVsID0gZ2V0U2VudGluZWxfKGlmcmFtZSwgb3B0X2lzM1ApO1xuICBjb25zdCBsaXN0ZW5TZW50aW5lbCA9IGdldExpc3RlbkZvclNlbnRpbmVsKHBhcmVudFdpbiwgc2VudGluZWwsIHRydWUpO1xuXG4gIGxldCB3aW5kb3dFdmVudHM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuU2VudGluZWwubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB3ZSA9IGxpc3RlblNlbnRpbmVsW2ldO1xuICAgIGlmICh3ZS5mcmFtZSA9PT0gaWZyYW1lKSB7XG4gICAgICB3aW5kb3dFdmVudHMgPSB3ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghd2luZG93RXZlbnRzKSB7XG4gICAgd2luZG93RXZlbnRzID0ge1xuICAgICAgZnJhbWU6IGlmcmFtZSxcbiAgICAgIG9yaWdpbixcbiAgICAgIGV2ZW50czogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICB9O1xuICAgIGxpc3RlblNlbnRpbmVsLnB1c2god2luZG93RXZlbnRzKTtcbiAgfVxuXG4gIHJldHVybiB3aW5kb3dFdmVudHMuZXZlbnRzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gbWFwcGluZyBvZiBldmVudCBuYW1lcyB0byBsaXN0ZW5Gb3IgbGlzdGVuZXJzLlxuICogQHBhcmFtIHs/V2luZG93fSBwYXJlbnRXaW4gdGhlIHdpbmRvdyB0aGF0IGNyZWF0ZWQgdGhlIGlmcmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlbnRpbmVsIHRoZSBzZW50aW5lbCBvZiB0aGUgbWVzc2FnZVxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiB0aGUgc291cmNlIHdpbmRvdydzIG9yaWdpblxuICogQHBhcmFtIHs/V2luZG93fSB0cmlnZ2VyV2luIHRoZSB3aW5kb3cgdGhhdCB0cmlnZ2VyZWQgdGhlIGV2ZW50XG4gKiBAcmV0dXJuIHs/T2JqZWN0PHN0cmluZywgIUFycmF5PGZ1bmN0aW9uKCFKc29uT2JqZWN0LCAhV2luZG93LCBzdHJpbmcpPj59XG4gKi9cbmZ1bmN0aW9uIGdldExpc3RlbkZvckV2ZW50cyhwYXJlbnRXaW4sIHNlbnRpbmVsLCBvcmlnaW4sIHRyaWdnZXJXaW4pIHtcbiAgY29uc3QgbGlzdGVuU2VudGluZWwgPSBnZXRMaXN0ZW5Gb3JTZW50aW5lbChwYXJlbnRXaW4sIHNlbnRpbmVsKTtcblxuICBpZiAoIWxpc3RlblNlbnRpbmVsKSB7XG4gICAgcmV0dXJuIGxpc3RlblNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgZW50cnkgZm9yIHRoZSBmcmFtZS5cbiAgLy8gVE9ETyhAbmVrb2RvKTogQWRkIGEgV2Vha01hcDxXaW5kb3csIFdpbmRvd0V2ZW50c0RlZj4gY2FjaGUgdG9cbiAgLy8gICAgIHNwZWVkIHVwIHRoaXMgcHJvY2Vzcy5cbiAgbGV0IHdpbmRvd0V2ZW50cztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5TZW50aW5lbC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHdlID0gbGlzdGVuU2VudGluZWxbaV07XG4gICAgY29uc3Qge2NvbnRlbnRXaW5kb3d9ID0gd2UuZnJhbWU7XG4gICAgaWYgKCFjb250ZW50V2luZG93KSB7XG4gICAgICBzZXRUaW1lb3V0KGRyb3BMaXN0ZW5TZW50aW5lbCwgMCwgbGlzdGVuU2VudGluZWwpO1xuICAgIH0gZWxzZSBpZiAoc2VudGluZWwgPT09ICdhbXAnKSB7XG4gICAgICAvLyBBIG5vbi0zUCBjb2RlIHBhdGgsIG9yaWdpbiBtdXN0IG1hdGNoLlxuICAgICAgaWYgKHdlLm9yaWdpbiA9PT0gb3JpZ2luICYmIGNvbnRlbnRXaW5kb3cgPT0gdHJpZ2dlcldpbikge1xuICAgICAgICB3aW5kb3dFdmVudHMgPSB3ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmlnZ2VyV2luID09IGNvbnRlbnRXaW5kb3cgfHxcbiAgICAgICAgaXNEZXNjZW5kYW50V2luZG93KGNvbnRlbnRXaW5kb3csIHRyaWdnZXJXaW4pKSB7XG4gICAgICAvLyAzcCBjb2RlIHBhdGgsIHdlIG1heSBhY2NlcHQgbWVzc2FnZXMgZnJvbSBuZXN0ZWQgZnJhbWVzLlxuICAgICAgd2luZG93RXZlbnRzID0gd2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2luZG93RXZlbnRzID8gd2luZG93RXZlbnRzLmV2ZW50cyA6IG51bGw7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgb25lIHdpbmRvdyBpcyBhIGRlc2NlbmRhbnQgb2YgYW5vdGhlciBieSBjbGltYmluZ1xuICogdGhlIHBhcmVudCBjaGFpbi5cbiAqIEBwYXJhbSB7P1dpbmRvd30gYW5jZXN0b3IgcG90ZW50aWFsIGFuY2VzdG9yIHdpbmRvd1xuICogQHBhcmFtIHs/V2luZG93fSBkZXNjZW5kYW50IHBvdGVudGlhbCBkZXNjZW5kYW50IHdpbmRvd1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNEZXNjZW5kYW50V2luZG93KGFuY2VzdG9yLCBkZXNjZW5kYW50KSB7XG4gIGZvciAobGV0IHdpbiA9IGRlc2NlbmRhbnQ7IHdpbiAmJiB3aW4gIT0gd2luLnBhcmVudDsgd2luID0gd2luLnBhcmVudCkge1xuICAgIGlmICh3aW4gPT0gYW5jZXN0b3IpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbnkgbGlzdGVuRm9ycyByZWdpc3RlZCBvbiBsaXN0ZW5TZW50aW5lbCB0aGF0IGRvIG5vdCBoYXZlXG4gKiBhIGNvbnRlbnRXaW5kb3cgKHRoZSBmcmFtZSB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZSkuXG4gKiBAcGFyYW0geyFBcnJheTwhV2luZG93RXZlbnRzRGVmPn0gbGlzdGVuU2VudGluZWxcbiAqL1xuZnVuY3Rpb24gZHJvcExpc3RlblNlbnRpbmVsKGxpc3RlblNlbnRpbmVsKSB7XG4gIGNvbnN0IG5vb3BEYXRhID0gZGljdCh7J3NlbnRpbmVsJzogVU5MSVNURU5fU0VOVElORUx9KTtcblxuICBmb3IgKGxldCBpID0gbGlzdGVuU2VudGluZWwubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCB3aW5kb3dFdmVudHMgPSBsaXN0ZW5TZW50aW5lbFtpXTtcblxuICAgIGlmICghd2luZG93RXZlbnRzLmZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgIGxpc3RlblNlbnRpbmVsLnNwbGljZShpLCAxKTtcblxuICAgICAgY29uc3Qge2V2ZW50c30gPSB3aW5kb3dFdmVudHM7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgIC8vIFNwbGljZSBoZXJlLCBzbyB0aGF0IGVhY2ggdW5saXN0ZW4gZG9lcyBub3Qgc2hpZnQgdGhlIGFycmF5XG4gICAgICAgIGV2ZW50c1tuYW1lXS5zcGxpY2UoMCwgSW5maW5pdHkpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgICAgIGV2ZW50KG5vb3BEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBnbG9iYWwgbGlzdGVuRm9yIGV2ZW50IGxpc3RlbmVyIGlmIGl0IGhhcyB5ZXQgdG8gYmUuXG4gKiBAcGFyYW0gez9XaW5kb3d9IHBhcmVudFdpblxuICovXG5mdW5jdGlvbiByZWdpc3Rlckdsb2JhbExpc3RlbmVySWZOZWVkZWQocGFyZW50V2luKSB7XG4gIGlmIChwYXJlbnRXaW4ubGlzdGVuaW5nRm9ycykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBsaXN0ZW5Gb3JMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKCFnZXREYXRhKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gcGFyc2VJZk5lZWRlZChnZXREYXRhKGV2ZW50KSk7XG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhWydzZW50aW5lbCddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuRm9yRXZlbnRzID0gZ2V0TGlzdGVuRm9yRXZlbnRzKFxuICAgICAgICBwYXJlbnRXaW4sXG4gICAgICAgIGRhdGFbJ3NlbnRpbmVsJ10sXG4gICAgICAgIGV2ZW50Lm9yaWdpbixcbiAgICAgICAgZXZlbnQuc291cmNlXG4gICAgKTtcbiAgICBpZiAoIWxpc3RlbkZvckV2ZW50cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBsaXN0ZW5lcnMgPSBsaXN0ZW5Gb3JFdmVudHNbZGF0YVsndHlwZSddXTtcbiAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIHNsaWNlIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGFkZGluZyBhbm90aGVyIGxpc3RlbmVyIG9yIHVubGlzdGVuaW5nXG4gICAgLy8gZHVyaW5nIGl0ZXJhdGlvbi4gV2UgY291bGQgbW92ZSB0byBhIERvdWJseSBMaW5rZWQgTGlzdCB3aXRoXG4gICAgLy8gYmFja3RyYWNraW5nLCBidXQgdGhhdCdzIG92ZXJseSBjb21wbGljYXRlZC5cbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcihkYXRhLCBldmVudC5zb3VyY2UsIGV2ZW50Lm9yaWdpbik7XG4gICAgfVxuICB9O1xuXG4gIHBhcmVudFdpbi5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuRm9yTGlzdGVuZXIpO1xufVxuXG4vKipcbiAqIEFsbG93cyBsaXN0ZW5pbmcgZm9yIG1lc3NhZ2UgZnJvbSB0aGUgaWZyYW1lLiBSZXR1cm5zIGFuIHVubGlzdGVuXG4gKiBmdW5jdGlvbiB0byByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7P0VsZW1lbnR9IGlmcmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVPZk1lc3NhZ2VcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKCFKc29uT2JqZWN0LCAhV2luZG93LCBzdHJpbmcpfSBjYWxsYmFjayBDYWxsZWQgd2hlbiBhXG4gKiAgICAgbWVzc2FnZSBvZiB0aGlzIHR5cGUgYXJyaXZlcyBmb3IgdGhpcyBpZnJhbWUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXMzUCBzZXQgdG8gdHJ1ZSBpZiB0aGUgaWZyYW1lIGlzIDNwLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGluZ05lc3RlZFdpbmRvd3Mgc2V0IHRvIHRydWUgaWYgYSBtZXNzYWdlcyBmcm9tXG4gKiAgICAgbmVzdGVkIGZyYW1lcyBzaG91bGQgYWxzbyBiZSBhY2NlcHRlZC5cbiAqIEByZXR1cm4geyFVbmxpc3RlbkRlZn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbkZvcihcbiAgaWZyYW1lLCB0eXBlT2ZNZXNzYWdlLCBjYWxsYmFjaywgb3B0X2lzM1AsIG9wdF9pbmNsdWRpbmdOZXN0ZWRXaW5kb3dzKSB7XG4gIGRldigpLmFzc2VydChpZnJhbWUuc3JjLCAnb25seSBpZnJhbWVzIHdpdGggc3JjIHN1cHBvcnRlZCcpO1xuICBkZXYoKS5hc3NlcnQoIWlmcmFtZS5wYXJlbnROb2RlLCAnY2Fubm90IHJlZ2lzdGVyIGV2ZW50cyBvbiBhbiBhdHRhY2hlZCAnICtcbiAgICAgICdpZnJhbWUuIEl0IHdpbGwgY2F1c2UgaGFpci1wdWxsaW5nIGJ1Z3MgbGlrZSAjMjk0MicpO1xuICBkZXYoKS5hc3NlcnQoY2FsbGJhY2spO1xuICBjb25zdCBwYXJlbnRXaW4gPSBpZnJhbWUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuICByZWdpc3Rlckdsb2JhbExpc3RlbmVySWZOZWVkZWQocGFyZW50V2luKTtcblxuICBjb25zdCBsaXN0ZW5Gb3JFdmVudHMgPSBnZXRPckNyZWF0ZUxpc3RlbkZvckV2ZW50cyhcbiAgICAgIHBhcmVudFdpbixcbiAgICAgIGlmcmFtZSxcbiAgICAgIG9wdF9pczNQXG4gICk7XG5cblxuICBsZXQgZXZlbnRzID0gbGlzdGVuRm9yRXZlbnRzW3R5cGVPZk1lc3NhZ2VdIHx8XG4gICAgKGxpc3RlbkZvckV2ZW50c1t0eXBlT2ZNZXNzYWdlXSA9IFtdKTtcblxuICBsZXQgdW5saXN0ZW47XG4gIGxldCBsaXN0ZW5lciA9IGZ1bmN0aW9uKGRhdGEsIHNvdXJjZSwgb3JpZ2luKSB7XG4gICAgLy8gRXhjbHVkZSBuZXN0ZWQgZnJhbWVzIGlmIG5lY2Vzc2FyeS5cbiAgICAvLyBOb3RlIHRoYXQgdGhlIHNvdXJjZSB3YXMgYWxyZWFkeSB2ZXJpZmllZCB0byBiZSBlaXRoZXIgdGhlIGNvbnRlbnRXaW5kb3dcbiAgICAvLyBvZiB0aGUgaWZyYW1lIGl0c2VsZiBvciBhIGRlc2NlbmRhbnQgd2luZG93IHdpdGhpbiBpdC5cbiAgICBpZiAoIW9wdF9pbmNsdWRpbmdOZXN0ZWRXaW5kb3dzICYmIHNvdXJjZSAhPSBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnNlbnRpbmVsID09IFVOTElTVEVOX1NFTlRJTkVMKSB7XG4gICAgICB1bmxpc3RlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjayhkYXRhLCBzb3VyY2UsIG9yaWdpbik7XG4gIH07XG5cbiAgZXZlbnRzLnB1c2gobGlzdGVuZXIpO1xuXG4gIHJldHVybiB1bmxpc3RlbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgY29uc3QgaW5kZXggPSBldmVudHMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC8vIE1ha2Ugc3VyZSByZWZlcmVuY2VzIHRvIHRoZSB1bmxpc3RlbiBmdW5jdGlvbiBkbyBub3Qga2VlcFxuICAgICAgLy8gYWxpdmUgdG9vIG11Y2guXG4gICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICBldmVudHMgPSBudWxsO1xuICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gb25lIG9mIGdpdmVuIG1lc3NhZ2VzIGhhcyBiZWVuIG9ic2VydmVkXG4gKiBmb3IgdGhlIGZpcnN0IHRpbWUuIEFuZCByZW1vdmUgbGlzdGVuZXIgZm9yIGFsbCBvdGhlciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGlmcmFtZVxuICogQHBhcmFtIHtzdHJpbmd8IUFycmF5PHN0cmluZz59IHR5cGVPZk1lc3NhZ2VzXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXMzUFxuICogQHJldHVybiB7IVByb21pc2U8IXtkYXRhOiAhSnNvbk9iamVjdCwgc291cmNlOiAhV2luZG93LCBvcmlnaW46IHN0cmluZ30+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuRm9yT25jZVByb21pc2UoaWZyYW1lLCB0eXBlT2ZNZXNzYWdlcywgb3B0X2lzM1ApIHtcbiAgY29uc3QgdW5saXN0ZW5MaXN0ID0gW107XG4gIGlmICh0eXBlb2YgdHlwZU9mTWVzc2FnZXMgPT0gJ3N0cmluZycpIHtcbiAgICB0eXBlT2ZNZXNzYWdlcyA9IFt0eXBlT2ZNZXNzYWdlc107XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZU9mTWVzc2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0eXBlT2ZNZXNzYWdlc1tpXTtcbiAgICAgIGNvbnN0IHVubGlzdGVuID0gbGlzdGVuRm9yKGlmcmFtZSwgbWVzc2FnZSwgKGRhdGEsIHNvdXJjZSwgb3JpZ2luKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW5saXN0ZW5MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdW5saXN0ZW5MaXN0W2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSh7ZGF0YSwgc291cmNlLCBvcmlnaW59KTtcbiAgICAgIH0sIG9wdF9pczNQKTtcbiAgICAgIHVubGlzdGVuTGlzdC5wdXNoKHVubGlzdGVuKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFBvc3RzIGEgbWVzc2FnZSB0byB0aGUgaWZyYW1lLlxuICogQHBhcmFtIHshRWxlbWVudH0gaWZyYW1lIFRoZSBpZnJhbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIHRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHshSnNvbk9iamVjdH0gb2JqZWN0IE1lc3NhZ2UgcGF5bG9hZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YXJnZXRPcmlnaW4gb3JpZ2luIG9mIHRoZSB0YXJnZXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaXMzUCBzZXQgdG8gdHJ1ZSBpZiB0aGUgaWZyYW1lIGlzIDNwLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9zdE1lc3NhZ2UoaWZyYW1lLCB0eXBlLCBvYmplY3QsIHRhcmdldE9yaWdpbiwgb3B0X2lzM1ApIHtcbiAgcG9zdE1lc3NhZ2VUb1dpbmRvd3MoaWZyYW1lLFxuICAgICAgW3t3aW46IGlmcmFtZS5jb250ZW50V2luZG93LCBvcmlnaW46IHRhcmdldE9yaWdpbn1dLCB0eXBlLCBvYmplY3QsXG4gICAgICBvcHRfaXMzUCk7XG59XG5cbi8qKlxuICogUG9zdHMgYW4gaWRlbnRpY2FsIG1lc3NhZ2UgdG8gbXVsdGlwbGUgdGFyZ2V0IHdpbmRvd3Mgd2l0aCB0aGUgc2FtZVxuICogc2VudGluZWwuXG4gKiBUaGUgbWVzc2FnZSBpcyBzZXJpYWxpemVkIG9ubHkgb25jZS5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGlmcmFtZSBUaGUgaWZyYW1lLlxuICogQHBhcmFtIHshQXJyYXk8e3dpbjogIVdpbmRvdywgb3JpZ2luOiBzdHJpbmd9Pn0gdGFyZ2V0cyB0byBzZW5kIHRoZSBtZXNzYWdlXG4gKiAgICAgdG8sIHBhaXJzIG9mIHdpbmRvdyBhbmQgaXRzIG9yaWdpbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgdGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0geyFKc29uT2JqZWN0fSBvYmplY3QgTWVzc2FnZSBwYXlsb2FkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzM1Agc2V0IHRvIHRydWUgaWYgdGhlIGlmcmFtZSBpcyAzcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlVG9XaW5kb3dzKGlmcmFtZSwgdGFyZ2V0cywgdHlwZSwgb2JqZWN0LCBvcHRfaXMzUCkge1xuICBpZiAoIWlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9iamVjdFsndHlwZSddID0gdHlwZTtcbiAgb2JqZWN0WydzZW50aW5lbCddID0gZ2V0U2VudGluZWxfKGlmcmFtZSwgb3B0X2lzM1ApO1xuICBsZXQgcGF5bG9hZCA9IG9iamVjdDtcbiAgaWYgKG9wdF9pczNQKSB7XG4gICAgLy8gU2VyaWFsaXplIG91cnNlbHZlcyBiZWNhdXNlIHRoYXQgaXMgbXVjaCBmYXN0ZXIgaW4gQ2hyb21lLlxuICAgIHBheWxvYWQgPSAnYW1wLScgKyBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldHNbaV07XG4gICAgdGFyZ2V0Lndpbi4vKk9LKi9wb3N0TWVzc2FnZShwYXlsb2FkLCB0YXJnZXQub3JpZ2luKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNlbnRpbmVsIHN0cmluZy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGlmcmFtZSBUaGUgaWZyYW1lLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzM1Agc2V0IHRvIHRydWUgaWYgdGhlIGlmcmFtZSBpcyAzcC5cbiAqIEByZXR1cm4ge3N0cmluZ30gU2VudGluZWwgc3RyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0U2VudGluZWxfKGlmcmFtZSwgb3B0X2lzM1ApIHtcbiAgcmV0dXJuIG9wdF9pczNQID8gaWZyYW1lLmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtM3Atc2VudGluZWwnKSA6ICdhbXAnO1xufVxuXG4vKipcbiAqIEpTT04gcGFyc2VzIGV2ZW50LmRhdGEgaWYgaXQgbmVlZHMgdG8gYmVcbiAqIEBwYXJhbSB7Kn0gZGF0YVxuICogQHJldHVybiB7P0pzb25PYmplY3R9IG9iamVjdCBtZXNzYWdlXG4gKiBAcHJpdmF0ZVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUlmTmVlZGVkKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09ICd7Jykge1xuICAgICAgZGF0YSA9IHRyeVBhcnNlSnNvbihkYXRhLCBlID0+IHtcbiAgICAgICAgZGV2KCkud2FybignSUZSQU1FLUhFTFBFUicsXG4gICAgICAgICAgICAnUG9zdG1lc3NhZ2UgY291bGQgbm90IGJlIHBhcnNlZC4gJyArXG4gICAgICAgICAgICAnSXMgaXQgaW4gYSB2YWxpZCBKU09OIGZvcm1hdD8nLCBlKTtcbiAgICAgIH0pIHx8IG51bGw7XG4gICAgfSBlbHNlIGlmIChpc0FtcE1lc3NhZ2UoZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBkZXNlcmlhbGl6ZU1lc3NhZ2UoZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHs/SnNvbk9iamVjdH0gKi8gKGRhdGEpO1xufVxuXG5cblxuLyoqXG4gKiBNYW5hZ2VzIGEgcG9zdE1lc3NhZ2UgQVBJIGZvciBhbiBpZnJhbWUgd2l0aCBhIHN1YnNjcmlwdGlvbiBtZXNzYWdlIGFuZFxuICogYSB3YXkgdG8gYnJvYWRjYXN0IG1lc3NhZ2VzIHRvIGFsbCBzdWJzY3JpYmVkIHdpbmRvd3MsIHdoaWNoXG4gKiBpbiB0dXJuIG11c3QgYWxsIGJlIGRlc2NlbmRhbnRzIG9mIHRoZSBjb250ZW50V2luZG93IG9mIHRoZSBpZnJhbWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJzY3JpcHRpb25BcGkge1xuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudH0gaWZyYW1lIFRoZSBpZnJhbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgb2YgdGhlIHN1YnNjcmlwdGlvbiBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzM3Agc2V0IHRvIHRydWUgaWYgdGhlIGlmcmFtZSBpcyAzcC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbighSnNvbk9iamVjdCwgIVdpbmRvdywgc3RyaW5nKX0gcmVxdWVzdENhbGxiYWNrIENhbGxiYWNrXG4gICAqICAgICBpbnZva2VkIHdoZW5ldmVyIGEgbmV3IHdpbmRvdyBzdWJzY3JpYmVzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoaWZyYW1lLCB0eXBlLCBpczNwLCByZXF1ZXN0Q2FsbGJhY2spIHtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshRWxlbWVudH0gKi9cbiAgICB0aGlzLmlmcmFtZV8gPSBpZnJhbWU7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmlzM3BfID0gaXMzcDtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshQXJyYXk8e3dpbjogIVdpbmRvdywgb3JpZ2luOiBzdHJpbmd9Pn0gKi9cbiAgICB0aGlzLmNsaWVudFdpbmRvd3NfID0gW107XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshVW5saXN0ZW5EZWZ9ICovXG4gICAgdGhpcy51bmxpc3Rlbl8gPSBsaXN0ZW5Gb3IodGhpcy5pZnJhbWVfLCB0eXBlLCAoZGF0YSwgc291cmNlLCBvcmlnaW4pID0+IHtcbiAgICAgIC8vIFRoaXMgbWVzc2FnZSBtaWdodCBiZSBmcm9tIGFueSB3aW5kb3cgd2l0aGluIHRoZSBpZnJhbWUsIHdlIG5lZWRcbiAgICAgIC8vIHRvIGtlZXAgdHJhY2sgb2Ygd2hpY2ggd2luZG93cyB3YW50IHRvIGJlIHNlbnQgdXBkYXRlcy5cbiAgICAgIGlmICghdGhpcy5jbGllbnRXaW5kb3dzXy5zb21lKGVudHJ5ID0+IGVudHJ5LndpbiA9PSBzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuY2xpZW50V2luZG93c18ucHVzaCh7d2luOiBzb3VyY2UsIG9yaWdpbn0pO1xuICAgICAgfVxuICAgICAgcmVxdWVzdENhbGxiYWNrKGRhdGEsIHNvdXJjZSwgb3JpZ2luKTtcbiAgICB9LCB0aGlzLmlzM3BfLFxuICAgICAgICAvLyBGb3IgM1AgZnJhbWVzIHdlIGFsc28gYWxsb3cgbmVzdGVkIGZyYW1lcyB3aXRoaW4gdGhlbSB0byBzdWJzY3JpYmUuLlxuICAgIHRoaXMuaXMzcF8gLyogb3B0X2luY2x1ZGluZ05lc3RlZFdpbmRvd3MgKi8pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgbWVzc2FnZSB0byBhbGwgc3Vic2NyaWJlZCB3aW5kb3dzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIHRoZSBtZXNzYWdlLlxuICAgKiBAcGFyYW0geyFKc29uT2JqZWN0fSBkYXRhIE1lc3NhZ2UgcGF5bG9hZC5cbiAgICovXG4gIHNlbmQodHlwZSwgZGF0YSkge1xuICAgIC8vIFJlbW92ZSBjbGllbnRzIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgIGZpbHRlclNwbGljZSh0aGlzLmNsaWVudFdpbmRvd3NfLCBjbGllbnQgPT4gISFjbGllbnQud2luLnBhcmVudCk7XG4gICAgcG9zdE1lc3NhZ2VUb1dpbmRvd3MoXG4gICAgICAgIHRoaXMuaWZyYW1lXyxcbiAgICAgICAgdGhpcy5jbGllbnRXaW5kb3dzXyxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgdGhpcy5pczNwXyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgaWZyYW1lLlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVubGlzdGVuXygpO1xuICAgIHRoaXMuY2xpZW50V2luZG93c18ubGVuZ3RoID0gMDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb29rc0xpa2VUcmFja2luZ0lmcmFtZShlbGVtZW50KSB7XG4gIGNvbnN0IGJveCA9IGVsZW1lbnQuZ2V0TGF5b3V0Qm94KCk7XG4gIC8vIFRoaXMgaGV1cmlzdGljIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICBpZiAoYm94LndpZHRoID4gMTAgfHwgYm94LmhlaWdodCA+IDEwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElmcmFtZSBpcyBub3QgdHJhY2tpbmcgaWZyYW1lIGlmIG9wZW4gd2l0aCB1c2VyIGludGVyYWN0aW9uXG4gIHJldHVybiAhY2xvc2VzdEJ5U2VsZWN0b3IoZWxlbWVudCwgJy5pLWFtcGh0bWwtb3ZlcmxheScpO1xufVxuXG4vLyBNb3N0IGNvbW1vbiBhZCBzaXplc1xuLy8gQXJyYXkgb2YgW3dpZHRoLCBoZWlnaHRdIHBhaXJzLlxuY29uc3QgYWRTaXplcyA9IFtcbiAgWzMwMCwgMjUwXSxcbiAgWzMyMCwgNTBdLFxuICBbMzAwLCA1MF0sXG4gIFszMjAsIDEwMF0sXG5dO1xuXG4vKipcbiAqIEd1ZXNzIHdoZXRoZXIgdGhpcyBlbGVtZW50IG1pZ2h0IGJlIGFuIGFkLlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBBbiBhbXAtaWZyYW1lIGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FkTGlrZShlbGVtZW50KSB7XG4gIGNvbnN0IGJveCA9IGVsZW1lbnQuZ2V0TGF5b3V0Qm94KCk7XG4gIGNvbnN0IHtoZWlnaHQsIHdpZHRofSA9IGJveDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZFNpemVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcmVmV2lkdGggPSBhZFNpemVzW2ldWzBdO1xuICAgIGNvbnN0IHJlZkhlaWdodCA9IGFkU2l6ZXNbaV1bMV07XG4gICAgaWYgKHJlZkhlaWdodCA+IGhlaWdodCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChyZWZXaWR0aCA+IHdpZHRoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gRnV6enkgbWF0Y2hpbmcgdG8gYWNjb3VudCBmb3IgcGFkZGluZy5cbiAgICBpZiAoaGVpZ2h0IC0gcmVmSGVpZ2h0IDw9IDIwICYmIHdpZHRoIC0gcmVmV2lkdGggPD0gMjApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudH0gaWZyYW1lXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzYWJsZVNjcm9sbGluZ09uSWZyYW1lKGlmcmFtZSkge1xuICBhZGRBdHRyaWJ1dGVzVG9FbGVtZW50KGlmcmFtZSwgZGljdCh7J3Njcm9sbGluZyc6ICdubyd9KSk7XG5cbiAgLy8gVGhpcyBzaG91bGRuJ3Qgd29yaywgYnV0IGl0IGRvZXMgb24gRmlyZWZveC5cbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1NDk0OTY5XG4gIHNldFN0eWxlKGlmcmFtZSwgJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuXG4gIHJldHVybiBpZnJhbWU7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtEZWZlcnJlZH0gZnJvbSAnLi91dGlscy9wcm9taXNlJztcbmltcG9ydCB7U2VydmljZXN9IGZyb20gJy4vc2VydmljZXMnO1xuaW1wb3J0IHtcbiAgYWRkUGFyYW1zVG9VcmwsXG4gIGlzUHJveHlPcmlnaW4sXG4gIHBhcnNlUXVlcnlTdHJpbmcsXG4gIHBhcnNlVXJsRGVwcmVjYXRlZCxcbn0gZnJvbSAnLi91cmwnO1xuaW1wb3J0IHtkZXYsIHVzZXJ9IGZyb20gJy4vbG9nJztcbmltcG9ydCB7Z2V0TW9kZX0gZnJvbSAnLi9tb2RlJztcbmltcG9ydCB7aXNFeHBlcmltZW50T259IGZyb20gJy4vZXhwZXJpbWVudHMnO1xuXG5jb25zdCBUSU1FT1VUX1ZBTFVFID0gODAwMDtcblxubGV0IHRyYWNrSW1wcmVzc2lvblByb21pc2UgPSBudWxsO1xuXG5jb25zdCBERUZBVUxUX0FQUEVORF9VUkxfUEFSQU0gPSBbXG4gICdnY2xpZCcsXG4gICdnY2xzcmMnLFxuXTtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIGdldCB0aGUgdHJhY2tJbXByZXNzaW9uUHJvbWlzZTtcbiAqIEByZXR1cm4geyFQcm9taXNlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhY2tJbXByZXNzaW9uUHJvbWlzZSgpIHtcbiAgcmV0dXJuIGRldigpLmFzc2VydCh0cmFja0ltcHJlc3Npb25Qcm9taXNlKTtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHJlc2V0IHRoZSB0cmFja0ltcHJlc3Npb25Qcm9taXNlIG9ubHkgZm9yIHRlc3RpbmdcbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRUcmFja0ltcHJlc3Npb25Qcm9taXNlRm9yVGVzdGluZygpIHtcbiAgdHJhY2tJbXByZXNzaW9uUHJvbWlzZSA9IG51bGw7XG59XG5cbi8qKlxuICogRW1pdCBhIEhUVFAgcmVxdWVzdCB0byBhIGRlc3RpbmF0aW9uIGRlZmluZWQgb24gdGhlIGluY29taW5nIFVSTC5cbiAqIExhdW5jaGVkIGZvciB0cnVzdGVkIHZpZXdlci4gT3RoZXJ3aXNlIGd1YXJkZWQgYnkgZXhwZXJpbWVudC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXliZVRyYWNrSW1wcmVzc2lvbih3aW4pIHtcbiAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgY29uc3Qge3Byb21pc2UsIHJlc29sdmU6IHJlc29sdmVJbXByZXNzaW9ufSA9IGRlZmVycmVkO1xuXG5cbiAgdHJhY2tJbXByZXNzaW9uUHJvbWlzZSA9IFNlcnZpY2VzLnRpbWVyRm9yKHdpbikudGltZW91dFByb21pc2UoVElNRU9VVF9WQUxVRSxcbiAgICAgIHByb21pc2UsICdUcmFja0ltcHJlc3Npb25Qcm9taXNlIHRpbWVvdXQnKS5jYXRjaChlcnJvciA9PiB7XG4gICAgZGV2KCkud2FybignSU1QUkVTU0lPTicsIGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3Qgdmlld2VyID0gU2VydmljZXMudmlld2VyRm9yRG9jKHdpbi5kb2N1bWVudCk7XG4gIGNvbnN0IGlzVHJ1c3RlZFZpZXdlclByb21pc2UgPSB2aWV3ZXIuaXNUcnVzdGVkVmlld2VyKCk7XG4gIGNvbnN0IGlzVHJ1c3RlZFJlZmVycmVyUHJvbWlzZSA9IHZpZXdlci5pc1RydXN0ZWRSZWZlcnJlcigpO1xuICBQcm9taXNlLmFsbChbXG4gICAgaXNUcnVzdGVkVmlld2VyUHJvbWlzZSxcbiAgICBpc1RydXN0ZWRSZWZlcnJlclByb21pc2UsXG4gIF0pLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgY29uc3QgaXNUcnVzdGVkVmlld2VyID0gcmVzdWx0c1swXTtcbiAgICBjb25zdCBpc1RydXN0ZWRSZWZlcnJlciA9IHJlc3VsdHNbMV07XG4gICAgLy8gQ3VycmVudGx5IHRoaXMgZmVhdHVyZSBpcyBsYXVuY2hlZCBmb3IgdHJ1c3RlZCB2aWV3ZXIgYW5kIHRydXN0ZWRcbiAgICAvLyByZWZlcnJlciwgYnV0IHN0aWxsIGV4cGVyaW1lbnQgZ3VhcmRlZCBmb3IgYWxsIEFNUCBkb2NzLlxuICAgIGlmICghaXNUcnVzdGVkVmlld2VyICYmICFpc1RydXN0ZWRSZWZlcnJlciAmJiAhaXNFeHBlcmltZW50T24od2luLCAnYWxwJykpIHtcbiAgICAgIHJlc29sdmVJbXByZXNzaW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVwbGFjZVVybFByb21pc2UgPSBoYW5kbGVSZXBsYWNlVXJsKHdpbik7XG4gICAgY29uc3QgY2xpY2tVcmxQcm9taXNlID0gaGFuZGxlQ2xpY2tVcmwod2luKTtcblxuICAgIFByb21pc2UuYWxsKFtyZXBsYWNlVXJsUHJvbWlzZSwgY2xpY2tVcmxQcm9taXNlXSkudGhlbigoKSA9PiB7XG4gICAgICByZXNvbHZlSW1wcmVzc2lvbigpO1xuICAgIH0sICgpID0+IHt9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogU2lnbmFsIHRoYXQgaW1wcmVzc2lvbiB0cmFja2luZyBpcyBub3QgcmVsZXZhbnQgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvTm90VHJhY2tJbXByZXNzaW9uKCkge1xuICB0cmFja0ltcHJlc3Npb25Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG5cbi8qKlxuICogSGFuZGxlIHRoZSBnZXRSZXBsYWNlVXJsIGFuZCByZXR1cm4gYSBwcm9taXNlIHdoZW4gdXJsIGlzIHJlcGxhY2VkIE9ubHlcbiAqIGhhbmRsZXMgcmVwbGFjZVVybCB3aGVuIHZpZXdlciBpbmRpY2F0ZXMgQU1QIHRvIGRvIHNvLiBWaWV3ZXIgc2hvdWxkIGluZGljYXRlXG4gKiBieSBzZXR0aW5nIHRoZSBsZWdhY3kgcmVwbGFjZVVybCBpbml0IHBhcmFtIGFuZCBhZGQgYHJlcGxhY2VVcmxgIHRvIGl0c1xuICogY2FwYWJpbGl0eSBwYXJhbS4gRnV0dXJlIHBsYW4gaXMgdG8gY2hhbmdlIHRoZSB0eXBlIG9mIGxlZ2FjeSBpbml0IHJlcGxhY2VVcmxcbiAqIHBhcmFtIGZyb20gdXJsIHN0cmluZyB0byBib29sZWFuIHZhbHVlLiBQbGVhc2UgTk9URSByZXBsYWNlVXJsIGFuZCBhZExvY2F0aW9uXG4gKiB3aWxsIG5ldmVyIGFycml2ZSBhdCBzYW1lIHRpbWUsIHNvIHRoZXJlIGlzIG5vIHJhY2UgY29uZGl0aW9uIG9uIHRoZSBvcmRlciBvZlxuICogaGFuZGxpbmcgdXJsIHJlcGxhY2VtZW50LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4geyFQcm9taXNlfVxuICovXG5mdW5jdGlvbiBoYW5kbGVSZXBsYWNlVXJsKHdpbikge1xuICBjb25zdCB2aWV3ZXIgPSBTZXJ2aWNlcy52aWV3ZXJGb3JEb2Mod2luLmRvY3VtZW50KTtcblxuICAvLyBSZXBsYWNlVXJsIHN1YnN0aXR1dGlvbiBkb2Vzbid0IGhhdmUgdG8gd2FpdCB1bnRpbCB0aGUgZG9jdW1lbnQgaXMgdmlzaWJsZVxuICBpZiAoIXZpZXdlci5nZXRQYXJhbSgncmVwbGFjZVVybCcpKSB7XG4gICAgLy8gVGhlIGluaXQgcmVwbGFjZVVybCBwYXJhbSBzZXJ2ZSBhcyBhIHNpZ25hbCBvbiB3aGV0aGVyIHJlcGxhY2VVcmwgaXNcbiAgICAvLyByZXF1aXJlZCBmb3IgdGhpcyBkb2MuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgaWYgKCF2aWV3ZXIuaGFzQ2FwYWJpbGl0eSgncmVwbGFjZVVybCcpKSB7XG4gICAgLy8gSWYgVmlld2VyIGlzIG5vdCBjYXBhYmlsaXR5IG9mIHByb3ZpZGluZyBhc3luYyByZXBsYWNlVXJsLCB1c2UgdGhlIGxlZ2FjeVxuICAgIC8vIGluaXQgcmVwbGFjZVVybCBwYXJhbS5cbiAgICB2aWV3ZXIucmVwbGFjZVVybCh2aWV3ZXIuZ2V0UGFyYW0oJ3JlcGxhY2VVcmwnKSB8fCBudWxsKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvLyByZXF1ZXN0IGFzeW5jIHJlcGxhY2VVcmwgaXMgdmlld2VyIHN1cHBvcnQgZ2V0UmVwbGFjZVVybC5cbiAgcmV0dXJuIHZpZXdlci5zZW5kTWVzc2FnZUF3YWl0UmVzcG9uc2UoJ2dldFJlcGxhY2VVcmwnLCAvKiBkYXRhICovIHVuZGVmaW5lZClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSB8fCB0eXBlb2YgcmVzcG9uc2UgIT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBkZXYoKS53YXJuKCdJTVBSRVNTSU9OJywgJ2dldCBpbnZhbGlkIHJlcGxhY2VVcmwgcmVzcG9uc2UnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmlld2VyLnJlcGxhY2VVcmwocmVzcG9uc2VbJ3JlcGxhY2VVcmwnXSB8fCBudWxsKTtcbiAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgIGRldigpLndhcm4oJ0lNUFJFU1NJT04nLCAnRXJyb3IgcmVxdWVzdCByZXBsYWNlVXJsIGZyb20gdmlld2VyJywgZXJyKTtcbiAgICAgIH0pO1xufVxuXG5cbi8qKlxuICogUGVyZm9ybSB0aGUgaW1wcmVzc2lvbiByZXF1ZXN0IGlmIGl0IGhhcyBiZWVuIHByb3ZpZGVkIHZpYVxuICogdGhlIGNsaWNrIHBhcmFtIGluIHRoZSB2aWV3ZXIgYXJndW1lbnRzLiBSZXR1cm5zIGEgcHJvbWlzZS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshUHJvbWlzZX1cbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ2xpY2tVcmwod2luKSB7XG4gIGNvbnN0IHZpZXdlciA9IFNlcnZpY2VzLnZpZXdlckZvckRvYyh3aW4uZG9jdW1lbnQpO1xuICAvKiogQGNvbnN0IHtzdHJpbmd8dW5kZWZpbmVkfSAqL1xuICBjb25zdCBjbGlja1VybCA9IHZpZXdlci5nZXRQYXJhbSgnY2xpY2snKTtcblxuXG4gIGlmICghY2xpY2tVcmwpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBpZiAoY2xpY2tVcmwuaW5kZXhPZignaHR0cHM6Ly8nKSAhPSAwKSB7XG4gICAgdXNlcigpLndhcm4oJ0lNUFJFU1NJT04nLFxuICAgICAgICAnY2xpY2sgZnJhZ21lbnQgcGFyYW0gc2hvdWxkIHN0YXJ0IHdpdGggaHR0cHM6Ly8uIEZvdW5kICcsXG4gICAgICAgIGNsaWNrVXJsKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBpZiAod2luLmxvY2F0aW9uLmhhc2gpIHtcbiAgICAvLyBUaGlzIGlzIHR5cGljYWxseSBkb25lIHVzaW5nIHJlcGxhY2VTdGF0ZSBpbnNpZGUgdGhlIHZpZXdlci5cbiAgICAvLyBJZiBmb3Igc29tZSByZWFzb24gaXQgZmFpbGVkLCBnZXQgcmlkIG9mIHRoZSBmcmFnbWVudCBoZXJlIHRvXG4gICAgLy8gYXZvaWQgZHVwbGljYXRlIHRyYWNraW5nLlxuICAgIHdpbi5sb2NhdGlvbi5oYXNoID0gJyc7XG4gIH1cblxuICAvLyBUT0RPKEB6aG91eXgpIG5lZWQgdGVzdCB3aXRoIGEgcmVhbCByZXNwb25zZS5cbiAgcmV0dXJuIHZpZXdlci53aGVuRmlyc3RWaXNpYmxlKCkudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuIGludm9rZSh3aW4sIGRldigpLmFzc2VydFN0cmluZyhjbGlja1VybCkpO1xuICB9KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICBhcHBseVJlc3BvbnNlKHdpbiwgcmVzcG9uc2UpO1xuICB9KS5jYXRjaChlcnIgPT4ge1xuICAgIHVzZXIoKS53YXJuKCdJTVBSRVNTSU9OJywgJ0Vycm9yIG9uIHJlcXVlc3QgY2xpY2tVcmw6ICcsIGVycik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNlbmQgdGhlIHVybCB0byBhZCBzZXJ2ZXIgYW5kIHdhaXQgZm9yIGl0cyByZXNwb25zZVxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGlja1VybFxuICogQHJldHVybiB7IVByb21pc2U8P0pzb25PYmplY3Q+fVxuICovXG5mdW5jdGlvbiBpbnZva2Uod2luLCBjbGlja1VybCkge1xuICBpZiAoZ2V0TW9kZSgpLmxvY2FsRGV2ICYmICFnZXRNb2RlKCkudGVzdCkge1xuICAgIGNsaWNrVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9pbXByZXNzaW9uLXByb3h5P3VybD0nICsgY2xpY2tVcmw7XG4gIH1cbiAgcmV0dXJuIFNlcnZpY2VzLnhockZvcih3aW4pLmZldGNoSnNvbihjbGlja1VybCwge1xuICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgLy8gQWxsIG9yaWdpbnMgYXJlIGFsbG93cyB0byBzZW5kIHRoZXNlIHJlcXVlc3RzLlxuICAgIHJlcXVpcmVBbXBSZXNwb25zZVNvdXJjZU9yaWdpbjogZmFsc2UsXG4gIH0pLnRoZW4ocmVzID0+IHtcbiAgICAvLyBUcmVhdCAyMDQgbm8gY29udGVudCByZXNwb25zZSBzcGVjaWFsbHlcbiAgICBpZiAocmVzLnN0YXR1cyA9PSAyMDQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgfSk7XG59XG5cbi8qKlxuICogcGFyc2UgdGhlIHJlc3BvbnNlIGJhY2sgZnJvbSBhZCBzZXJ2ZXJcbiAqIFNldCBmb3IgYW5hbHl0aWNzIHB1cnBvc2VzXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHs/SnNvbk9iamVjdH0gcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYXBwbHlSZXNwb25zZSh3aW4sIHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhZExvY2F0aW9uID0gcmVzcG9uc2VbJ2xvY2F0aW9uJ107XG4gIGNvbnN0IGFkVHJhY2tpbmcgPSByZXNwb25zZVsndHJhY2tpbmdfdXJsJ107XG5cbiAgLy8gSWYgdGhlcmUgaXMgYSB0cmFja2luZ191cmwsIG5lZWQgdG8gdHJhY2sgaXRcbiAgLy8gT3RoZXJ3aXNlIHRyYWNrIHRoZSBsb2NhdGlvblxuICBjb25zdCB0cmFja1VybCA9IGFkVHJhY2tpbmcgfHwgYWRMb2NhdGlvbjtcblxuICBpZiAodHJhY2tVcmwgJiYgIWlzUHJveHlPcmlnaW4odHJhY2tVcmwpKSB7XG4gICAgLy8gVG8gcmVxdWVzdCB0aGUgcHJvdmlkZWQgdHJhY2tVcmwgZm9yIHRyYWNraW5nIHB1cnBvc2VzLlxuICAgIG5ldyBJbWFnZSgpLnNyYyA9IHRyYWNrVXJsO1xuICB9XG5cbiAgLy8gUmVwbGFjZSB0aGUgbG9jYXRpb24gaHJlZiBwYXJhbXMgd2l0aCBuZXcgbG9jYXRpb24gcGFyYW1zIHdlIGdldCAoaWYgYW55KS5cbiAgaWYgKGFkTG9jYXRpb24pIHtcbiAgICBpZiAoIXdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHZpZXdlciA9IFNlcnZpY2VzLnZpZXdlckZvckRvYyh3aW4uZG9jdW1lbnQpO1xuICAgIGNvbnN0IGN1cnJlbnRIcmVmID0gd2luLmxvY2F0aW9uLmhyZWY7XG4gICAgY29uc3QgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKGFkTG9jYXRpb24pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcodXJsLnNlYXJjaCk7XG4gICAgY29uc3QgbmV3SHJlZiA9IGFkZFBhcmFtc1RvVXJsKGN1cnJlbnRIcmVmLCBwYXJhbXMpO1xuICAgIC8vIFRPRE86IEF2b2lkIG92ZXJ3cml0aW5nIHRoZSBmcmFnbWVudCBwYXJhbWV0ZXIuXG4gICAgd2luLmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsICcnLCBuZXdIcmVmKTtcbiAgICB2aWV3ZXIubWF5YmVVcGRhdGVGcmFnbWVudEZvckNjdCgpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdoZXRoZXIgYXBwZW5kaW5nIGV4dHJhIHVybCBwYXJhbXMgdG8gb3V0Z29pbmcgbGluayBpc1xuICogcmVxdWlyZWQuXG4gKiBAcGFyYW0geyEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBhbXBkb2NcbiAqIEByZXR1cm4geyFQcm9taXNlPGJvb2xlYW4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQXBwZW5kRXh0cmFQYXJhbXMoYW1wZG9jKSB7XG4gIHJldHVybiBhbXBkb2Mud2hlblJlYWR5KCkudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuICEhYW1wZG9jLmdldEJvZHkoKS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnYW1wLWFuYWx5dGljc1t0eXBlPWdvb2dsZWFuYWx5dGljc10nKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBleHRyYSB1cmwgcGFyYW1zIHN0cmluZyB0aGF0IHNob3VsZCBiZSBhcHBlbmRlZCB0byBvdXRnb2luZyBsaW5rXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHshRWxlbWVudH0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRyYVBhcmFtc1VybCh3aW4sIHRhcmdldCkge1xuICAvLyBHZXQgYW4gYXJyYXkgd2l0aCBleHRyYSBwYXJhbXMgdGhhdCBuZWVkcyB0byBhcHBlbmQuXG4gIGNvbnN0IHVybCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh3aW4ubG9jYXRpb24uaHJlZik7XG4gIGNvbnN0IHBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcodXJsLnNlYXJjaCk7XG4gIGNvbnN0IGFwcGVuZFBhcmFtcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IERFRkFVTFRfQVBQRU5EX1VSTF9QQVJBTS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhcmFtID0gREVGQVVMVF9BUFBFTkRfVVJMX1BBUkFNW2ldO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zW3BhcmFtXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGFwcGVuZFBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgcGFyYW0gYWxyZWFkeSBleGlzdHNcbiAgY29uc3QgYWRkaXRpb25hbFVybFBhcmFtcyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYW1wLWFkZHBhcmFtcycpO1xuICBsZXQge2hyZWZ9ID0gdGFyZ2V0O1xuICBpZiAoYWRkaXRpb25hbFVybFBhcmFtcykge1xuICAgIGhyZWYgPSBhZGRQYXJhbXNUb1VybChocmVmLCBwYXJzZVF1ZXJ5U3RyaW5nKGFkZGl0aW9uYWxVcmxQYXJhbXMpKTtcbiAgfVxuICBjb25zdCBsb2MgPSBwYXJzZVVybERlcHJlY2F0ZWQoaHJlZik7XG4gIGNvbnN0IGV4aXN0UGFyYW1zID0gcGFyc2VRdWVyeVN0cmluZyhsb2Muc2VhcmNoKTtcbiAgZm9yIChsZXQgaSA9IGFwcGVuZFBhcmFtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHBhcmFtID0gYXBwZW5kUGFyYW1zW2ldO1xuICAgIGlmICh0eXBlb2YgZXhpc3RQYXJhbXNbcGFyYW1dICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgYXBwZW5kUGFyYW1zLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGdldFF1ZXJ5UGFyYW1VcmwoYXBwZW5kUGFyYW1zKTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIGNvbnZlcnQgYW4gcXVlcnkgcGFyYW0gYXJyYXkgdG8gc3RyaW5nXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBwYXJhbXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0UXVlcnlQYXJhbVVybChwYXJhbXMpIHtcbiAgbGV0IHVybCA9ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zW2ldO1xuICAgIHVybCArPSAoaSA9PSAwKSA/XG4gICAgICBgJHtwYXJhbX09UVVFUllfUEFSQU0oJHtwYXJhbX0pYCA6XG4gICAgICBgJiR7cGFyYW19PVFVRVJZX1BBUkFNKCR7cGFyYW19KWA7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1N1YnNjcmlwdGlvbkFwaX0gZnJvbSAnLi9pZnJhbWUtaGVscGVyJztcbmltcG9ydCB7ZGV2fSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7aXNBcnJheSwgaXNGaW5pdGVOdW1iZXJ9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtsYXlvdXRSZWN0THR3aCwgbW92ZUxheW91dFJlY3QsIHJlY3RJbnRlcnNlY3Rpb259IGZyb20gJy4vbGF5b3V0LXJlY3QnO1xuXG4vKipcbiAqIFRoZSBzdHJ1Y3R1cmUgdGhhdCBkZWZpbmVzIHRoZSByZWN0YW5nbGUgdXNlZCBpbiBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXJzLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHRvcDogbnVtYmVyLFxuICogICBib3R0b206IG51bWJlcixcbiAqICAgbGVmdDogbnVtYmVyLFxuICogICByaWdodDogbnVtYmVyLFxuICogICB3aWR0aDogbnVtYmVyLFxuICogICBoZWlnaHQ6IG51bWJlcixcbiAqICAgeDogbnVtYmVyLFxuICogICB5OiBudW1iZXIsXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IERPTVJlY3Q7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1RIUkVTSE9MRCA9XG4gICAgWzAsIDAuMDUsIDAuMSwgMC4xNSwgMC4yLCAwLjI1LCAwLjMsIDAuMzUsIDAuNCxcbiAgICAgIDAuNDUsIDAuNSwgMC41NSwgMC42LCAwLjY1LCAwLjcsIDAuNzUsIDAuOCwgMC44NSwgMC45LCAwLjk1LCAxXTtcblxuLyoqIEB0eXBlZGVmIHt7XG4gKiAgICBlbGVtZW50OiAhRWxlbWVudCxcbiAqICAgIGN1cnJlbnRUaHJlc2hvbGRTbG90OiBudW1iZXIsXG4gKiAgfX1cbiAqL1xubGV0IEVsZW1lbnRJbnRlcnNlY3Rpb25TdGF0ZURlZjtcblxuLyoqIEBjb25zdCBAcHJpdmF0ZSAqL1xuY29uc3QgVEFHID0gJ0lOVEVSU0VDVElPTi1PQlNFUlZFUic7XG5cbi8qKiBAY29uc3QgQHByaXZhdGUgKi9cbmNvbnN0IElOSVRfVElNRSA9IERhdGUubm93KCk7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0byBnZXQgdGhlIGVsZW1lbnQncyBjdXJyZW50IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlcbiAqIHJlZ2FyZGxlc3Mgb2YgdGhlIGludGVyc2V0aW9uIHJhdGlvLiBPbmx5IGF2YWlsYWJsZSB3aGVuIGVsZW1lbnQgaXMgbm90XG4gKiBuZXN0ZWQgaW4gYSBjb250YWluZXIgaWZyYW1lLlxuICogVE9ETzogc3VwcG9ydCBvcHRfaWZyYW1lIGlmIHRoZXJlJ3MgdmFsaWQgdXNlIGNhc2VzLlxuICogQHBhcmFtIHshLi9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmfSBlbGVtZW50IGVsZW1lbnQncyByZWN0XG4gKiBAcGFyYW0gez8uL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IG93bmVyIGVsZW1lbnQncyBvd25lciByZWN0XG4gKiBAcGFyYW0geyEuL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IGhvc3RWaWV3cG9ydCBob3N0Vmlld3BvcnQncyByZWN0XG4gKiBAcmV0dXJuIHshSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeX0gQSBjaGFuZ2UgZW50cnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb25DaGFuZ2VFbnRyeShcbiAgZWxlbWVudCwgb3duZXIsIGhvc3RWaWV3cG9ydCkge1xuICBjb25zdCBpbnRlcnNlY3Rpb24gPSByZWN0SW50ZXJzZWN0aW9uKGVsZW1lbnQsIG93bmVyLCBob3N0Vmlld3BvcnQpIHx8XG4gICAgICBsYXlvdXRSZWN0THR3aCgwLCAwLCAwLCAwKTtcbiAgY29uc3QgcmF0aW8gPSBpbnRlcnNlY3Rpb25SYXRpbyhpbnRlcnNlY3Rpb24sIGVsZW1lbnQpO1xuICByZXR1cm4gY2FsY3VsYXRlQ2hhbmdlRW50cnkoXG4gICAgICBlbGVtZW50LCBob3N0Vmlld3BvcnQsIGludGVyc2VjdGlvbiwgcmF0aW8pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmF0aXZlSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQod2luKSB7XG4gIHJldHVybiAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbiAmJlxuICAgICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHdpbiAmJlxuICAgICAgJ2ludGVyc2VjdGlvblJhdGlvJyBpbiB3aW4uSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeS5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogQSBjbGFzcyB0byBoZWxwIGFtcC1pZnJhbWUgYW5kIGFtcC1hZCBuZXN0ZWQgaWZyYW1lIGxpc3RlbiB0byBpbnRlcnNlY3Rpb25cbiAqIGNoYW5nZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyQXBpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFNUC5CYXNlRWxlbWVudH0gYmFzZUVsZW1lbnRcbiAgICogQHBhcmFtIHshRWxlbWVudH0gaWZyYW1lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pczNwXG4gICAqL1xuICBjb25zdHJ1Y3RvcihiYXNlRWxlbWVudCwgaWZyYW1lLCBvcHRfaXMzcCkge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFBTVAuQmFzZUVsZW1lbnR9ICovXG4gICAgdGhpcy5iYXNlRWxlbWVudF8gPSBiYXNlRWxlbWVudDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P0ludGVyc2VjdGlvbk9ic2VydmVyUG9seWZpbGx9ICovXG4gICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlcl8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuc2hvdWxkT2JzZXJ2ZV8gPSBmYWxzZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmlzSW5WaWV3cG9ydF8gPSBmYWxzZTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P2Z1bmN0aW9uKCl9ICovXG4gICAgdGhpcy51bmxpc3Rlbk9uRGVzdHJveV8gPSBudWxsO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7IS4vc2VydmljZS92aWV3cG9ydC92aWV3cG9ydC1pbXBsLlZpZXdwb3J0fSAqL1xuICAgIHRoaXMudmlld3BvcnRfID0gYmFzZUVsZW1lbnQuZ2V0Vmlld3BvcnQoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7P1N1YnNjcmlwdGlvbkFwaX0gKi9cbiAgICB0aGlzLnN1YnNjcmlwdGlvbkFwaV8gPSBuZXcgU3Vic2NyaXB0aW9uQXBpKFxuICAgICAgICBpZnJhbWUsICdzZW5kLWludGVyc2VjdGlvbnMnLCBvcHRfaXMzcCB8fCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc3RhcnRTZW5kaW5nSW50ZXJzZWN0aW9uXygpO1xuICAgICAgICB9KTtcblxuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyUG9seWZpbGwoZW50cmllcyA9PiB7XG4gICAgICAvLyBSZW1vdmUgdGFyZ2V0IGluZm8gZnJvbSBjcm9zcyBvcmlnaW4gaWZyYW1lLlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSBlbnRyaWVzW2ldWyd0YXJnZXQnXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uQXBpXy5zZW5kKCdpbnRlcnNlY3Rpb24nLCBkaWN0KHsnY2hhbmdlcyc6IGVudHJpZXN9KSk7XG4gICAgfSwge3RocmVzaG9sZDogREVGQVVMVF9USFJFU0hPTER9KTtcbiAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyXy50aWNrKHRoaXMudmlld3BvcnRfLmdldFJlY3QoKSk7XG5cbiAgICAvKiogQGNvbnN0IHtmdW5jdGlvbigpfSAqL1xuICAgIHRoaXMuZmlyZSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5zaG91bGRPYnNlcnZlXyB8fCAhdGhpcy5pc0luVmlld3BvcnRfKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfLnRpY2sodGhpcy52aWV3cG9ydF8uZ2V0UmVjdCgpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHN0YXJ0IGxpc3RlbmluZyB0byB2aWV3cG9ydCBldmVudC4gYW5kIG9ic2VydmVyIGludGVyc2VjdGlvblxuICAgKiBjaGFuZ2Ugb24gdGhlIGVsZW1lbnQuXG4gICAqL1xuICBzdGFydFNlbmRpbmdJbnRlcnNlY3Rpb25fKCkge1xuICAgIHRoaXMuc2hvdWxkT2JzZXJ2ZV8gPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfLm9ic2VydmUodGhpcy5iYXNlRWxlbWVudF8uZWxlbWVudCk7XG4gICAgdGhpcy5iYXNlRWxlbWVudF8uZ2V0VnN5bmMoKS5tZWFzdXJlKCgpID0+IHtcbiAgICAgIHRoaXMuaXNJblZpZXdwb3J0XyA9IHRoaXMuYmFzZUVsZW1lbnRfLmlzSW5WaWV3cG9ydCgpO1xuICAgICAgdGhpcy5maXJlKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB1bmxpc3RlblZpZXdwb3J0U2Nyb2xsID0gdGhpcy52aWV3cG9ydF8ub25TY3JvbGwodGhpcy5maXJlKTtcbiAgICBjb25zdCB1bmxpc3RlblZpZXdwb3J0Q2hhbmdlID0gdGhpcy52aWV3cG9ydF8ub25DaGFuZ2VkKHRoaXMuZmlyZSk7XG4gICAgdGhpcy51bmxpc3Rlbk9uRGVzdHJveV8gPSAoKSA9PiB7XG4gICAgICB1bmxpc3RlblZpZXdwb3J0U2Nyb2xsKCk7XG4gICAgICB1bmxpc3RlblZpZXdwb3J0Q2hhbmdlKCk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgdG8gdGhlIFBvc2l0aW9uT2JzZXJ2ZXIgdG8gbGlzdGVuIHRvIHZpZXdwb3J0IGV2ZW50c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluVmlld3BvcnRcbiAgICovXG4gIG9uVmlld3BvcnRDYWxsYmFjayhpblZpZXdwb3J0KSB7XG4gICAgdGhpcy5pc0luVmlld3BvcnRfID0gaW5WaWV3cG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiBhbGwgbGlzdGVucnNcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5zaG91bGRPYnNlcnZlXyA9IGZhbHNlO1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXJfID0gbnVsbDtcbiAgICBpZiAodGhpcy51bmxpc3Rlbk9uRGVzdHJveV8pIHtcbiAgICAgIHRoaXMudW5saXN0ZW5PbkRlc3Ryb3lfKCk7XG4gICAgICB0aGlzLnVubGlzdGVuT25EZXN0cm95XyA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaXB0aW9uQXBpXy5kZXN0cm95KCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25BcGlfID0gbnVsbDtcbiAgfVxufVxuXG5cbi8qKlxuICogVGhlIEludGVyc2VjdGlvbk9ic2VydmVyUG9seWZpbGwgY2xhc3MgbGV0cyBhbnkgZWxlbWVudCByZWNlaXZlIGl0c1xuICogaW50ZXJzZWN0aW9uIGRhdGEgd2l0aCB0aGUgdmlld3BvcnQuIEl0IGFjdHMgbGlrZSBuYXRpdmUgYnJvd3NlciBzdXBwb3J0ZWRcbiAqIEludGVyc2VjdGlvbk9ic2VydmVyLlxuICogVGhlIEludGVyc2VjdGlvbk9ic2VydmVyIHJlY2VpdmVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIGFuIG9wdGlvbmFsIG9wdGlvblxuICogYXMgcGFyYW1zLiBXaGVuZXZlciB0aGUgZWxlbWVudCBpbnRlcnNlY3Rpb24gcmF0aW8gY3Jvc3MgYSB0aHJlc2hvbGQgdmFsdWUsXG4gKiBJbnRlcnNlY3Rpb25PYnNlcnZlclBvbHlmaWxsIHdpbGwgY2FsbCB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aFxuICogdGhlIGNoYW5nZSBlbnRyeS5cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJQb2x5ZmlsbCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCFBcnJheTwhSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4pfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBvcHRfb3B0aW9uKSB7XG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7ZnVuY3Rpb24oIUFycmF5PCFJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5Pil9ICovXG4gICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcblxuICAgIC8vIFRoZSBpbnB1dCB0aHJlc2hvbGQgY2FuIGJlIGEgbnVtYmVyIG9yIGFuIGFycmF5IG9mIG51bWJlcnMuXG4gICAgbGV0IHRocmVzaG9sZCA9IG9wdF9vcHRpb24gJiYgb3B0X29wdGlvbi50aHJlc2hvbGQ7XG4gICAgaWYgKHRocmVzaG9sZCkge1xuICAgICAgdGhyZXNob2xkID0gaXNBcnJheSh0aHJlc2hvbGQpID9cbiAgICAgICAgdGhyZXNob2xkIDogW3RocmVzaG9sZF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocmVzaG9sZCA9IFswXTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRocmVzaG9sZC5sZW5ndGg7IGkrKykge1xuICAgICAgZGV2KCkuYXNzZXJ0KGlzRmluaXRlTnVtYmVyKHRocmVzaG9sZFtpXSksICdUaHJlc2hvbGQgc2hvdWxkIGJlIGEgJyArXG4gICAgICAgICAgJ2Zpbml0ZSBudW1iZXIgb3IgYW4gYXJyYXkgb2YgZmluaXRlIG51bWJlcnMnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgdGhyZXNob2xkLCBzb3J0ZWQgaW4gaW5jcmVhc2luZyBudW1lcmljIG9yZGVyXG4gICAgICogQHByaXZhdGUgQGNvbnN0IHshQXJyYXl9XG4gICAgICovXG4gICAgdGhpcy50aHJlc2hvbGRfID0gdGhyZXNob2xkLnNvcnQoKTtcbiAgICBkZXYoKS5hc3NlcnQodGhpcy50aHJlc2hvbGRfWzBdID49IDAgJiZcbiAgICAgICAgdGhpcy50aHJlc2hvbGRfW3RoaXMudGhyZXNob2xkXy5sZW5ndGggLSAxXSA8PSAxLFxuICAgICdUaHJlc2hvbGQgc2hvdWxkIGJlIGluIHRoZSByYW5nZSBmcm9tIFwiWzAsIDFdXCInKTtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Py4vbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZn0gKi9cbiAgICB0aGlzLmxhc3RWaWV3cG9ydFJlY3RfID0gbnVsbDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7Li9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmfHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmxhc3RJZnJhbWVSZWN0XyA9IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFN0b3JlIGEgbGlzdCBvZiBvYnNlcnZlZCBlbGVtZW50cyBhbmQgdGhlaXIgY3VycmVudCB0aHJlc2hvbGQgc2xvdCB3aGljaFxuICAgICAqIHRoZWlyIGludGVyc2VjdGlvbiByYXRpbyBmaWxscywgcmFuZ2UgZnJvbSBbMCwgdGhpcy50aHJlc2hvbGRfLmxlbmd0aF1cbiAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8IUVsZW1lbnRJbnRlcnNlY3Rpb25TdGF0ZURlZj59XG4gICAgICovXG4gICAgdGhpcy5vYnNlcnZlRW50cmllc18gPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKi9cbiAgZGlzY29ubmVjdCgpIHtcbiAgICB0aGlzLm9ic2VydmVFbnRyaWVzXy5sZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFByb3ZpZGUgYSB3YXkgdG8gb2JzZXJ2ZSB0aGUgaW50ZXJzZWN0aW9uIGNoYW5nZSBmb3IgYSBzcGVjaWZpYyBlbGVtZW50XG4gICAqIFBsZWFzZSBub3RlIEludGVyc2VjdGlvbk9ic2VydmVyUG9seWZpbGwgb25seSBzdXBwb3J0IEFNUCBlbGVtZW50IG5vd1xuICAgKiBUT0RPOiBTdXBwb3J0IG5vbiBBTVAgZWxlbWVudFxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gICAqL1xuICBvYnNlcnZlKGVsZW1lbnQpIHtcbiAgICAvLyBDaGVjayB0aGUgZWxlbWVudCBpcyBhbiBBTVAgZWxlbWVudC5cbiAgICBkZXYoKS5hc3NlcnQoZWxlbWVudC5nZXRMYXlvdXRCb3gpO1xuXG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBleGlzdHMgaW4gY3VycmVudCBvYnNlcnZlRW50cmllcywgZG8gbm90aGluZ1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlRW50cmllc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVFbnRyaWVzX1tpXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgICAgIGRldigpLndhcm4oVEFHLCAnc2hvdWxkIG9ic2VydmUgc2FtZSBlbGVtZW50IG9uY2UnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgZWxlbWVudCxcbiAgICAgIGN1cnJlbnRUaHJlc2hvbGRTbG90OiAwLFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIG5ldyBvYnNlcnZlZCBlbGVtZW50J3MgZmlyc3QgY2hhbmdlRW50cnkgYmFzZWQgb24gbGFzdCB2aWV3cG9ydFxuICAgIGlmICh0aGlzLmxhc3RWaWV3cG9ydFJlY3RfKSB7XG4gICAgICBjb25zdCBjaGFuZ2UgPSB0aGlzLmdldFZhbGlkSW50ZXJzZWN0aW9uQ2hhbmdlRW50cnlfKFxuICAgICAgICAgIG5ld1N0YXRlLCB0aGlzLmxhc3RWaWV3cG9ydFJlY3RfLCB0aGlzLmxhc3RJZnJhbWVSZWN0Xyk7XG4gICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tfKFtjaGFuZ2VdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwdXNoIG5ldyBvYnNlcnZlZCBlbGVtZW50XG4gICAgdGhpcy5vYnNlcnZlRW50cmllc18ucHVzaChuZXdTdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZSBhIHdheSB0byB1bm9ic2VydmUgaW50ZXJzZWN0aW9uIGNoYW5nZSBmb3IgYSBzcGVjaWZpZWQgZWxlbWVudFxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gICAqL1xuICB1bm9ic2VydmUoZWxlbWVudCkge1xuICAgIC8vIGZpbmQgdGhlIHVub2JzZXJ2ZWQgZWxlbWVudCBpbiBvYnNlcnZlRW50cmllc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlRW50cmllc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVFbnRyaWVzX1tpXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZUVudHJpZXNfLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBkZXYoKS53YXJuKFRBRywgJ3Vub2JzZXJ2ZSBub24tb2JzZXJ2ZWQgZWxlbWVudCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRpY2sgZnVuY3Rpb24gdGhhdCB1cGRhdGUgdGhlIERPTVJlY3Qgb2YgdGhlIHJvb3Qgb2Ygb2JzZXJ2ZWQgZWxlbWVudHMuXG4gICAqIENhbGxlciBuZWVkcyB0byBtYWtlIHN1cmUgdG8gcGFzcyBpbiB0aGUgY29ycmVjdCBjb250YWluZXIuXG4gICAqIE5vdGU6IHRoZSBvcHRfaWZyYW1lIHBhcmFtIGlzIHRoZSBpZnJhbWUgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGhvc3QgZG9jLFxuICAgKiBUaGUgaWZyYW1lIG11c3QgYmUgYSBub24tc2Nyb2xsYWJsZSBpZnJhbWUuXG4gICAqIEBwYXJhbSB7IS4vbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZn0gaG9zdFZpZXdwb3J0XG4gICAqIEBwYXJhbSB7Li9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmPX0gb3B0X2lmcmFtZVxuICAgKi9cbiAgdGljayhob3N0Vmlld3BvcnQsIG9wdF9pZnJhbWUpIHtcblxuICAgIGlmIChvcHRfaWZyYW1lKSB7XG4gICAgICAvLyBJZiBlbGVtZW50IGluc2lkZSBhbiBpZnJhbWUuIEFkanVzdCBvcmlnaW4gdG8gdGhlIGlmcmFtZS5sZWZ0L3RvcC5cbiAgICAgIGhvc3RWaWV3cG9ydCA9XG4gICAgICAgICAgbW92ZUxheW91dFJlY3QoaG9zdFZpZXdwb3J0LCAtb3B0X2lmcmFtZS5sZWZ0LCAtb3B0X2lmcmFtZS50b3ApO1xuICAgICAgb3B0X2lmcmFtZSA9XG4gICAgICAgICAgbW92ZUxheW91dFJlY3Qob3B0X2lmcmFtZSwgLW9wdF9pZnJhbWUubGVmdCwgLW9wdF9pZnJhbWUudG9wKTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RWaWV3cG9ydFJlY3RfID0gaG9zdFZpZXdwb3J0O1xuICAgIHRoaXMubGFzdElmcmFtZVJlY3RfID0gb3B0X2lmcmFtZTtcblxuICAgIGNvbnN0IGNoYW5nZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlRW50cmllc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoYW5nZSA9IHRoaXMuZ2V0VmFsaWRJbnRlcnNlY3Rpb25DaGFuZ2VFbnRyeV8oXG4gICAgICAgICAgdGhpcy5vYnNlcnZlRW50cmllc19baV0sIGhvc3RWaWV3cG9ydCwgb3B0X2lmcmFtZSk7XG4gICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgIGNoYW5nZXMucHVzaChjaGFuZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jYWxsYmFja18oY2hhbmdlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIGNoYW5nZSBlbnRyeSBmb3Igb25lIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgY29tcGF0aWJsZSB3aXRoXG4gICAqIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgaWYgaXQncyB2YWxpZCB3aXRoIGN1cnJlbnQgY29uZmlnLlxuICAgKiBXaGVuIHRoZSBuZXcgaW50ZXJzZWN0aW9uIHJhdGlvIGRvZXNuJ3QgY3Jvc3Mgb25lIG9mIGEgdGhyZXNob2xkIHZhbHVlLFxuICAgKiB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gbnVsbC5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudEludGVyc2VjdGlvblN0YXRlRGVmfSBzdGF0ZVxuICAgKiBAcGFyYW0geyEuL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IGhvc3RWaWV3cG9ydCBob3N0Vmlld3BvcnQncyByZWN0XG4gICAqIEBwYXJhbSB7Li9sYXlvdXQtcmVjdC5MYXlvdXRSZWN0RGVmPX0gb3B0X2lmcmFtZSBpZnJhbWUgY29udGFpbmVyIHJlY3RcbiAgICogQHJldHVybiB7P0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnl9IEEgdmFsaWQgY2hhbmdlIGVudHJ5IG9yIG51bGwgaWYgcmF0aW9cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFZhbGlkSW50ZXJzZWN0aW9uQ2hhbmdlRW50cnlfKHN0YXRlLCBob3N0Vmlld3BvcnQsIG9wdF9pZnJhbWUpIHtcbiAgICBjb25zdCB7ZWxlbWVudH0gPSBzdGF0ZTtcblxuICAgIC8vIE5vcm1hbGl6ZSBjb250YWluZXIgTGF5b3V0UmVjdCB0byBiZSByZWxhdGl2ZSB0byBwYWdlXG4gICAgbGV0IG93bmVyUmVjdCA9IG51bGw7XG5cbiAgICAvLyBJZiBvcHRfaWZyYW1lIGlzIHByb3ZpZGVkLCBhbGwgTGF5b3V0UmVjdCBoYXMgcG9zaXRpb24gcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgaWZyYW1lLlxuICAgIC8vIElmIG9wdF9pZnJhbWUgaXMgbm90IHByb3ZpZGVkLCBhbGwgTGF5b3V0UmVjdCBoYXMgcG9zaXRpb24gcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgaG9zdCBkb2N1bWVudC5cbiAgICBjb25zdCBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0TGF5b3V0Qm94KCk7XG4gICAgY29uc3Qgb3duZXIgPSBlbGVtZW50LmdldE93bmVyKCk7XG4gICAgb3duZXJSZWN0ID0gb3duZXIgJiYgb3duZXIuZ2V0TGF5b3V0Qm94KCk7XG5cbiAgICAvLyBjYWxjdWxhdGUgaW50ZXJzZWN0aW9uUmVjdC4gdGhhdCB0aGUgZWxlbWVudCBpbnRlcnNlY3RzIHdpdGggaG9zdFZpZXdwb3J0XG4gICAgLy8gYW5kIGludGVyc2VjdHMgd2l0aCBvd25lciBlbGVtZW50IGFuZCBjb250YWluZXIgaWZyYW1lIGlmIGV4aXN0cy5cbiAgICBjb25zdCBpbnRlcnNlY3Rpb25SZWN0ID1cbiAgICAgICAgcmVjdEludGVyc2VjdGlvbihlbGVtZW50UmVjdCwgb3duZXJSZWN0LCBob3N0Vmlld3BvcnQsIG9wdF9pZnJhbWUpIHx8XG4gICAgICAgIGxheW91dFJlY3RMdHdoKDAsIDAsIDAsIDApO1xuICAgIC8vIGNhbGN1bGF0ZSByYXRpbywgY2FsbCBjYWxsYmFjayBiYXNlZCBvbiBuZXcgcmF0aW8gdmFsdWUuXG4gICAgY29uc3QgcmF0aW8gPSBpbnRlcnNlY3Rpb25SYXRpbyhpbnRlcnNlY3Rpb25SZWN0LCBlbGVtZW50UmVjdCk7XG4gICAgY29uc3QgbmV3VGhyZXNob2xkU2xvdCA9IGdldFRocmVzaG9sZFNsb3QodGhpcy50aHJlc2hvbGRfLCByYXRpbyk7XG5cbiAgICBpZiAobmV3VGhyZXNob2xkU2xvdCA9PSBzdGF0ZS5jdXJyZW50VGhyZXNob2xkU2xvdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN0YXRlLmN1cnJlbnRUaHJlc2hvbGRTbG90ID0gbmV3VGhyZXNob2xkU2xvdDtcblxuICAgIC8vIFRvIGdldCBzYW1lIGJlaGF2aW9yIGFzIG5hdGl2ZSBJbnRlcnNlY3Rpb25PYnNlcnZlciBzZXQgaG9zdFZpZXdwb3J0IG51bGxcbiAgICAvLyBpZiBpbnNpZGUgYW4gaWZyYW1lXG4gICAgY29uc3QgY2hhbmdlRW50cnkgPSBjYWxjdWxhdGVDaGFuZ2VFbnRyeShlbGVtZW50UmVjdCxcbiAgICAgICAgKG9wdF9pZnJhbWUgPyBudWxsIDogaG9zdFZpZXdwb3J0KSwgaW50ZXJzZWN0aW9uUmVjdCwgcmF0aW8pO1xuICAgIGNoYW5nZUVudHJ5LnRhcmdldCA9IGVsZW1lbnQ7XG4gICAgcmV0dXJuIGNoYW5nZUVudHJ5O1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmF0aW8gb2YgdGhlIHNtYWxsZXIgYm94J3MgYXJlYSB0byB0aGUgbGFyZ2VyIGJveCdzIGFyZWEuXG4gKiBAcGFyYW0geyEuL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IHNtYWxsZXJcbiAqIEBwYXJhbSB7IS4vbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZn0gbGFyZ2VyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGludGVyc2VjdGlvblJhdGlvKHNtYWxsZXIsIGxhcmdlcikge1xuICByZXR1cm4gKHNtYWxsZXIud2lkdGggKiBzbWFsbGVyLmhlaWdodCkgLyAobGFyZ2VyLndpZHRoICogbGFyZ2VyLmhlaWdodCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2xvdCBudW1iZXIgdGhhdCB0aGUgY3VycmVudCByYXRpbyBmaWxscyBpbi5cbiAqIEBwYXJhbSB7IUFycmF5fSBzb3J0ZWRUaHJlc2hvbGQgdmFsaWQgc29ydGVkIElvQiB0aHJlc2hvbGRcbiAqIEBwYXJhbSB7bnVtYmVyfSByYXRpbyBSYW5nZSBmcm9tIFswLCAxXVxuICogQHJldHVybiB7bnVtYmVyfSBSYW5nZSBmcm9tIFswLCB0aHJlc2hvbGQubGVuZ3RoXVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaHJlc2hvbGRTbG90KHNvcnRlZFRocmVzaG9sZCwgcmF0aW8pIHtcbiAgbGV0IHN0YXJ0SWR4ID0gMDtcbiAgbGV0IGVuZElkeCA9IHNvcnRlZFRocmVzaG9sZC5sZW5ndGg7XG4gIC8vIDAgaXMgYSBzcGVjaWFsIGNhc2UgdGhhdCBkb2VzIG5vdCBmaXQgaW50byBbc21hbGwsIGxhcmdlKSByYW5nZVxuICBpZiAocmF0aW8gPT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGxldCBtaWQgPSAoKHN0YXJ0SWR4ICsgZW5kSWR4KSAvIDIpIHwgMDtcbiAgd2hpbGUgKHN0YXJ0SWR4IDwgbWlkKSB7XG4gICAgY29uc3QgbWlkVmFsdWUgPSBzb3J0ZWRUaHJlc2hvbGRbbWlkXTtcbiAgICAvLyBJbiB0aGUgcmFuZ2Ugb2YgW3NtYWxsLCBsYXJnZSlcbiAgICBpZiAocmF0aW8gPCBtaWRWYWx1ZSkge1xuICAgICAgZW5kSWR4ID0gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydElkeCA9IG1pZDtcbiAgICB9XG4gICAgbWlkID0gKChzdGFydElkeCArIGVuZElkeCkgLyAyKSB8IDA7XG4gIH1cbiAgcmV0dXJuIGVuZElkeDtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBJbnRlcnNlY3Rpb25PYnNlcnZlciBjaGFuZ2UgZW50cnkuXG4gKiBAcGFyYW0geyEuL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9IGVsZW1lbnQgZWxlbWVudCdzIHJlY3RcbiAqIEBwYXJhbSB7Py4vbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZn0gaG9zdFZpZXdwb3J0IGhvc3RWaWV3cG9ydCdzIHJlY3RcbiAqIEBwYXJhbSB7IS4vbGF5b3V0LXJlY3QuTGF5b3V0UmVjdERlZn0gaW50ZXJzZWN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gcmF0aW9cbiAqIEByZXR1cm4geyFJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5fX1cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlRW50cnkoXG4gIGVsZW1lbnQsIGhvc3RWaWV3cG9ydCwgaW50ZXJzZWN0aW9uLCByYXRpbykge1xuICAvLyBJZiBlbGVtZW50IG5vdCBpbiBhbiBpZnJhbWUuXG4gIC8vIGFkanVzdCBhbGwgTGF5b3V0UmVjdCB0byBob3N0Vmlld3BvcnQgT3JpZ2luLlxuICBsZXQgYm91bmRpbmdDbGllbnRSZWN0ID0gZWxlbWVudDtcbiAgbGV0IHJvb3RCb3VuZHMgPSBob3N0Vmlld3BvcnQ7XG4gIC8vIElmIG5vIGhvc3RWaWV3cG9ydCBpcyBwcm92aWRlZCwgZWxlbWVudCBpcyBpbnNpZGUgYW4gbm9uLXNjcm9sbGFibGUgaWZyYW1lLlxuICAvLyBFdmVyeSBMYXlvdXRyZWN0IGhhcyBhbHJlYWR5IGFkanVzdCB0aGVpciBvcmlnaW4gYWNjb3JkaW5nIHRvIGlmcmFtZVxuICAvLyByZWN0IG9yaWdpbi4gTGF5b3V0UmVjdCBwb3NpdGlvbiBpcyByZWxhdGl2ZSB0byBpZnJhbWUgb3JpZ2luLFxuICAvLyB0aHVzIHJlbGF0aXZlIHRvIGlmcmFtZSdzIHZpZXdwb3J0IG9yaWdpbiBiZWNhdXNlIHRoZSB2aWV3cG9ydCBpcyBhdCB0aGVcbiAgLy8gaWZyYW1lIG9yaWdpbi4gTm8gbmVlZCB0byBhZGp1c3QgcG9zaXRpb24gaGVyZS5cblxuICBpZiAoaG9zdFZpZXdwb3J0KSB7XG4gICAgLy8gSWYgZWxlbWVudCBub3QgaW4gYW4gaWZyYW1lLlxuICAgIC8vIGFkanVzdCBhbGwgTGF5b3V0UmVjdCB0byBob3N0Vmlld3BvcnQgT3JpZ2luLlxuICAgIHJvb3RCb3VuZHMgPSAvKiogQHR5cGUgeyEuL2xheW91dC1yZWN0LkxheW91dFJlY3REZWZ9ICovIChyb290Qm91bmRzKTtcbiAgICBpbnRlcnNlY3Rpb24gPSBtb3ZlTGF5b3V0UmVjdChpbnRlcnNlY3Rpb24sIC1ob3N0Vmlld3BvcnQubGVmdCxcbiAgICAgICAgLWhvc3RWaWV3cG9ydC50b3ApO1xuICAgIC8vIFRoZSBlbGVtZW50IGlzIHJlbGF0aXZlIHRvICgwLCAwKSwgd2hpbGUgdGhlIHZpZXdwb3J0IG1vdmVzLiBTbywgd2UgbXVzdFxuICAgIC8vIGFkanVzdC5cbiAgICBib3VuZGluZ0NsaWVudFJlY3QgPSBtb3ZlTGF5b3V0UmVjdChib3VuZGluZ0NsaWVudFJlY3QsXG4gICAgICAgIC1ob3N0Vmlld3BvcnQubGVmdCwgLWhvc3RWaWV3cG9ydC50b3ApO1xuICAgIC8vIE5vdywgbW92ZSB0aGUgdmlld3BvcnQgdG8gKDAsIDApXG4gICAgcm9vdEJvdW5kcyA9IG1vdmVMYXlvdXRSZWN0KHJvb3RCb3VuZHMsXG4gICAgICAgIC1ob3N0Vmlld3BvcnQubGVmdCwgLWhvc3RWaWV3cG9ydC50b3ApO1xuICB9XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUludGVyc2VjdGlvbk9ic2VydmVyRW50cnl9ICovICh7XG4gICAgdGltZTogKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcGVyZm9ybWFuY2Uubm93KSA/XG4gICAgICBwZXJmb3JtYW5jZS5ub3coKSA6IERhdGUubm93KCkgLSBJTklUX1RJTUUsXG4gICAgcm9vdEJvdW5kcyxcbiAgICBib3VuZGluZ0NsaWVudFJlY3QsXG4gICAgaW50ZXJzZWN0aW9uUmVjdDogaW50ZXJzZWN0aW9uLFxuICAgIGludGVyc2VjdGlvblJhdGlvOiByYXRpbyxcbiAgfSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoaXMgbW9kdWxlIGRlY2xhcmVzIEpTT04gdHlwZXMgYXMgZGVmaW5lZCBpbiB0aGVcbiAqIHtAbGluayBodHRwOi8vanNvbi5vcmcvfS5cbiAqL1xuXG5pbXBvcnQge2lzT2JqZWN0fSBmcm9tICcuL3R5cGVzJztcblxuXG4vLyBOT1RFIFR5cGUgYXJlIGNoYW5nZWQgdG8geyp9IGJlY2F1c2Ugb2Zcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvMTk5OVxuXG4vKipcbiAqIEpTT04gc2NhbGFyLiBJdCdzIGVpdGhlciBzdHJpbmcsIG51bWJlciBvciBib29sZWFuLlxuICogQHR5cGVkZWYgeyp9IHNob3VsZCBiZSBzdHJpbmd8bnVtYmVyfGJvb2xlYW5cbiAqL1xubGV0IEpTT05TY2FsYXJEZWY7XG5cblxuLyoqXG4gKiBKU09OIG9iamVjdC4gSXQncyBhIG1hcCB3aXRoIHN0cmluZyBrZXlzIGFuZCBKU09OIHZhbHVlcy5cbiAqIEB0eXBlZGVmIHsqfSBzaG91bGQgYmUgIU9iamVjdDxzdHJpbmcsID9KU09OVmFsdWVEZWY+XG4gKi9cbmxldCBKU09OT2JqZWN0RGVmO1xuXG5cbi8qKlxuICogSlNPTiBhcnJheS4gSXQncyBhbiBhcnJheSB3aXRoIEpTT04gdmFsdWVzLlxuICogQHR5cGVkZWYgeyp9IHNob3VsZCBiZSAhQXJyYXk8P0pTT05WYWx1ZURlZj5cbiAqL1xubGV0IEpTT05BcnJheURlZjtcblxuXG4vKipcbiAqIEpTT04gdmFsdWUuIEl0J3MgZWl0aGVyIGEgc2NhbGFyLCBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuXG4gKiBAdHlwZWRlZiB7Kn0gc2hvdWxkIGJlICFKU09OU2NhbGFyRGVmfCFKU09OT2JqZWN0RGVmfCFKU09OQXJyYXlEZWZcbiAqL1xubGV0IEpTT05WYWx1ZURlZjtcblxuLyoqXG4gKiBSZWNyZWF0ZXMgb2JqZWN0cyB3aXRoIHByb3RvdHlwZS1sZXNzIGNvcGllcy5cbiAqIEBwYXJhbSB7IUpzb25PYmplY3R9IG9ialxuICogQHJldHVybiB7IUpzb25PYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNyZWF0ZU5vblByb3RvT2JqZWN0KG9iaikge1xuICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHYgPSBvYmpba107XG4gICAgY29weVtrXSA9IGlzT2JqZWN0KHYpID8gcmVjcmVhdGVOb25Qcm90b09iamVjdCh2KSA6IHY7XG4gIH1cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUpzb25PYmplY3R9ICovIChjb3B5KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgZnJvbSBhbiBvYmplY3QgZm9yIGEgZmllbGQtYmFzZWQgZXhwcmVzc2lvbi4gVGhlIGV4cHJlc3Npb25cbiAqIGlzIGEgc2ltcGxlIG5lc3RlZCBkb3Qtbm90YXRpb24gb2YgZmllbGRzLCBzdWNoIGFzIGBmaWVsZDEuZmllbGQyYC4gSWYgYW55XG4gKiBmaWVsZCBpbiBhIGNoYWluIGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXksIHRoZSByZXR1cm5lZFxuICogdmFsdWUgd2lsbCBiZSBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAcGFyYW0geyFKc29uT2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGb3JFeHByKG9iaiwgZXhwcikge1xuICAvLyBUaGUgYC5gIGluZGljYXRlcyBcInRoZSBvYmplY3QgaXRzZWxmXCIuXG4gIGlmIChleHByID09ICcuJykge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlLCBuYXZpZ2F0ZSB2aWEgcHJvcGVydGllcy5cbiAgY29uc3QgcGFydHMgPSBleHByLnNwbGl0KCcuJyk7XG4gIGxldCB2YWx1ZSA9IG9iajtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICBpZiAocGFydCAmJlxuICAgICAgICB2YWx1ZSAmJlxuICAgICAgICB2YWx1ZVtwYXJ0XSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGhhc093blByb3BlcnR5KHZhbHVlLCBwYXJ0KVxuICAgICkge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtwYXJ0XTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogU2ltcGxlIHdyYXBwZXIgYXJvdW5kIEpTT04ucGFyc2UgdGhhdCBjYXN0cyB0aGUgcmV0dXJuIHZhbHVlXG4gKiB0byBKc29uT2JqZWN0LlxuICogQ3JlYXRlIGEgbmV3IHdyYXBwZXIgaWYgYW4gYXJyYXkgcmV0dXJuIHZhbHVlIGlzIGRlc2lyZWQuXG4gKiBAcGFyYW0geyp9IGpzb24gSlNPTiBzdHJpbmcgdG8gcGFyc2VcbiAqIEByZXR1cm4gez9Kc29uT2JqZWN0fSBNYXkgYmUgZXh0ZW5kIHRvIHBhcnNlIGFycmF5cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbihqc29uKSB7XG4gIHJldHVybiAvKiogQHR5cGUgez9Kc29uT2JqZWN0fSAqLyhKU09OLnBhcnNlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNvbikpKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGdpdmVuIGBqc29uYCBzdHJpbmcgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24gaWYgbm90IHZhbGlkLlxuICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBwYXJzaW5nIGZhaWxzLlxuICogUmV0dXJucyB0aGUgYE9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgSlNPTiBzdHJpbmcgd2hlbiBwYXJzaW5nIHN1Y2NlZWRzLlxuICogQHBhcmFtIHsqfSBqc29uIEpTT04gc3RyaW5nIHRvIHBhcnNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFFcnJvcik9fSBvcHRfb25GYWlsZWQgT3B0aW9uYWwgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZFxuICogICAgIHdpdGggdGhlIGVycm9yIGlmIHBhcnNpbmcgZmFpbHMuXG4gKiBAcmV0dXJuIHs/SnNvbk9iamVjdHx1bmRlZmluZWR9IE1heSBiZSBleHRlbmQgdG8gcGFyc2UgYXJyYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ5UGFyc2VKc29uKGpzb24sIG9wdF9vbkZhaWxlZCkge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZUpzb24oanNvbik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAob3B0X29uRmFpbGVkKSB7XG4gICAgICBvcHRfb25GYWlsZWQoZSk7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjaGVja3Mgc3RyaWN0IGVxdWFsaXR5IG9mIGl0ZW1zIGluIG5lc3RlZCBhcnJheXMgYW5kIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHtKU09OVmFsdWVEZWZ9IGFcbiAqIEBwYXJhbSB7SlNPTlZhbHVlRGVmfSBiXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLiBNdXN0IGJlIGZpbml0ZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgZGVwdGggYXJndW1lbnQgaXMgbm90IGZpbml0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZUVxdWFscyhhLCBiLCBkZXB0aCA9IDMpIHtcbiAgaWYgKCFpc0Zpbml0ZShkZXB0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlcHRoIGFyZyBtdXN0IGJlIGZpbml0ZTogJyArIGRlcHRoKTtcbiAgfVxuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIE9ubHkgY2hlY2sgc2hhbGxvdyBlcXVhbGl0eSBmb3IgZGVwdGggPCAxLlxuICBpZiAoZGVwdGggPCAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkgJiYgQXJyYXkuaXNBcnJheShiKSkge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXJlY3Vyc2l2ZUVxdWFscyhhW2ldLCBiW2ldLCBkZXB0aCAtIDEpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cygvKiogQHR5cGUgeyFPYmplY3R9ICovIChhKSk7XG4gICAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cygvKiogQHR5cGUgeyFPYmplY3R9ICovIChiKSk7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleUEgPSBrZXlzQVtpXTtcbiAgICAgIGNvbnN0IHZhbHVlQSA9IGFba2V5QV07XG4gICAgICBjb25zdCB2YWx1ZUIgPSBiW2tleUFdO1xuICAgICAgaWYgKCFyZWN1cnNpdmVFcXVhbHModmFsdWVBLCB2YWx1ZUIsIGRlcHRoIC0gMSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBrZXkpIHtcbiAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgIC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKG9iaiksIGtleSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIFRoZSBzdHJ1Y3R1cmUgdGhhdCBjb21iaW5lcyBwb3NpdGlvbiBhbmQgc2l6ZSBmb3IgYW4gZWxlbWVudC4gVGhlIGV4YWN0XG4gKiBpbnRlcnByZXRhdGlvbiBvZiBwb3NpdGlvbiBhbmQgc2l6ZSBkZXBlbmRzIG9uIHRoZSB1c2UgY2FzZS5cbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICB0b3A6IG51bWJlcixcbiAqICAgYm90dG9tOiBudW1iZXIsXG4gKiAgIGxlZnQ6IG51bWJlcixcbiAqICAgcmlnaHQ6IG51bWJlcixcbiAqICAgd2lkdGg6IG51bWJlcixcbiAqICAgaGVpZ2h0OiBudW1iZXIsXG4gKiAgIHg6IG51bWJlcixcbiAqICAgeTogbnVtYmVyXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IExheW91dFJlY3REZWY7XG5cblxuLyoqXG4gKiBUaGUgc3RydWN0dXJlIHRoYXQgcmVwcmVzZW50cyB0aGUgbWFyZ2lucyBvZiBhbiBFbGVtZW50LlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHRvcDogbnVtYmVyLFxuICogICByaWdodDogbnVtYmVyLFxuICogICBib3R0b206IG51bWJlcixcbiAqICAgbGVmdDogbnVtYmVyXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IExheW91dE1hcmdpbnNEZWY7XG5cblxuLyoqXG4gKiBUaGUgc3RydWN0dXJlIHRoYXQgcmVwcmVzZW50cyBhIHJlcXVlc3RlZCBjaGFuZ2UgdG8gdGhlIG1hcmdpbnMgb2YgYW5cbiAqIEVsZW1lbnQuIEFueSBuZXcgdmFsdWVzIHNwZWNpZmllZCB3aWxsIHJlcGxhY2UgZXhpc3Rpbmcgb25lcyAocmF0aGVyIHRoYW5cbiAqIGJlaW5nIGFkZGl0aXZlKS5cbiAqXG4gKiBAdHlwZWRlZiB7e1xuICogICB0b3A6IChudW1iZXJ8dW5kZWZpbmVkKSxcbiAqICAgcmlnaHQ6IChudW1iZXJ8dW5kZWZpbmVkKSxcbiAqICAgYm90dG9tOiAobnVtYmVyfHVuZGVmaW5lZCksXG4gKiAgIGxlZnQ6IChudW1iZXJ8dW5kZWZpbmVkKVxuICogfX1cbiAqL1xuZXhwb3J0IGxldCBMYXlvdXRNYXJnaW5zQ2hhbmdlRGVmO1xuXG4vKipcbiogUmVsYXRpdmVQb3NpdGlvbnNcbipcbiogRGVzY3JpYmVzIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHRvIGFub3RoZXIgKHdoZXRoZXIgdGhlXG4qIGZpcnN0IGlzIGluc2lkZSB0aGUgc2Vjb25kLCBvbiB0b3Agb2YgdGhlIHNlY29uZCBvciBvbiB0aGUgYm90dG9tXG4qIEBlbnVtIHtzdHJpbmd9XG4qL1xuZXhwb3J0IGNvbnN0IFJlbGF0aXZlUG9zaXRpb25zID0ge1xuICBJTlNJREU6ICdpbnNpZGUnLFxuICBUT1A6ICd0b3AnLFxuICBCT1RUT006ICdib3R0b20nLFxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbGF5b3V0IHJlY3QgYmFzZWQgb24gdGhlIGxlZnQsIHRvcCwgd2lkdGggYW5kIGhlaWdodCBwYXJhbWV0ZXJzXG4gKiBpbiB0aGF0IG9yZGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnRcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3BcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICogQHJldHVybiB7IUxheW91dFJlY3REZWZ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXlvdXRSZWN0THR3aChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0LFxuICAgIHRvcCxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgYm90dG9tOiB0b3AgKyBoZWlnaHQsXG4gICAgcmlnaHQ6IGxlZnQgKyB3aWR0aCxcbiAgICB4OiBsZWZ0LFxuICAgIHk6IHRvcCxcbiAgfTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBsYXlvdXQgcmVjdCBiYXNlZCBvbiB0aGUgRE9NUmVjdCwgZS5nLiBvYnRhaW5lZCBmcm9tIGNhbGxpbmdcbiAqIGdldEJvdW5kaW5nQ2xpZW50UmVjdC5cbiAqIEBwYXJhbSB7IUNsaWVudFJlY3R9IHJlY3RcbiAqIEByZXR1cm4geyFMYXlvdXRSZWN0RGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGF5b3V0UmVjdEZyb21Eb21SZWN0KHJlY3QpIHtcbiAgcmV0dXJuIGxheW91dFJlY3RMdHdoKE51bWJlcihyZWN0LmxlZnQpLCBOdW1iZXIocmVjdC50b3ApLFxuICAgICAgTnVtYmVyKHJlY3Qud2lkdGgpLCBOdW1iZXIocmVjdC5oZWlnaHQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB0d28gcmVjdHMgb3ZlcmxhcCBieSBhIHNpbmdsZSBwaXhlbC5cbiAqIEBwYXJhbSB7IUxheW91dFJlY3REZWZ9IHIxXG4gKiBAcGFyYW0geyFMYXlvdXRSZWN0RGVmfSByMlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxheW91dFJlY3RzT3ZlcmxhcChyMSwgcjIpIHtcbiAgcmV0dXJuIChyMS50b3AgPD0gcjIuYm90dG9tICYmIHIyLnRvcCA8PSByMS5ib3R0b20gJiZcbiAgICAgIHIxLmxlZnQgPD0gcjIucmlnaHQgJiYgcjIubGVmdCA8PSByMS5yaWdodCk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiBhLCBiIG9yIG51bGwgaWYgdGhlcmUgaXMgbm9uZS5cbiAqIEBwYXJhbSB7Li4uP0xheW91dFJlY3REZWZ8dW5kZWZpbmVkfSB2YXJfYXJnc1xuICogQHJldHVybiB7P0xheW91dFJlY3REZWZ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWN0SW50ZXJzZWN0aW9uKHZhcl9hcmdzKSB7XG4gIGxldCB4MCA9IC1JbmZpbml0eTtcbiAgbGV0IHgxID0gSW5maW5pdHk7XG4gIGxldCB5MCA9IC1JbmZpbml0eTtcbiAgbGV0IHkxID0gSW5maW5pdHk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY3VycmVudCA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB4MCA9IE1hdGgubWF4KHgwLCBjdXJyZW50LmxlZnQpO1xuICAgIHgxID0gTWF0aC5taW4oeDEsIGN1cnJlbnQubGVmdCArIGN1cnJlbnQud2lkdGgpO1xuICAgIHkwID0gTWF0aC5tYXgoeTAsIGN1cnJlbnQudG9wKTtcbiAgICB5MSA9IE1hdGgubWluKHkxLCBjdXJyZW50LnRvcCArIGN1cnJlbnQuaGVpZ2h0KTtcbiAgICBpZiAoeDEgPCB4MCB8fCB5MSA8IHkwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKHgxID09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGxheW91dFJlY3RMdHdoKHgwLCB5MCwgeDEgLSB4MCwgeTEgLSB5MCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcG9zaXRpb24gb2YgcjIgcmVsYXRpdmUgdG8gcjFcbiAqIEBwYXJhbSB7IUxheW91dFJlY3REZWZ9IHIxXG4gKiBAcGFyYW0geyFMYXlvdXRSZWN0RGVmfSByMlxuICogQHJldHVybiB7UmVsYXRpdmVQb3NpdGlvbnN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXlvdXRSZWN0c1JlbGF0aXZlUG9zKHIxLCByMikge1xuICBpZiAocjEudG9wIDwgcjIudG9wKSB7XG4gICAgcmV0dXJuIFJlbGF0aXZlUG9zaXRpb25zLlRPUDtcbiAgfSBlbHNlIGlmIChyMS5ib3R0b20gPiByMi5ib3R0b20pIHtcbiAgICByZXR1cm4gUmVsYXRpdmVQb3NpdGlvbnMuQk9UVE9NO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBSZWxhdGl2ZVBvc2l0aW9ucy5JTlNJREU7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBhbmQgdGhlIGxheW91dCByZWN0IHVzaW5nIG11bHRpcGxlcyBvZiB3aWR0aCBhbmQgaGVpZ2h0LlxuICogQHBhcmFtIHshTGF5b3V0UmVjdERlZn0gcmVjdCBPcmlnaW5hbCByZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IGR3IEV4cGFuc2lvbiBpbiB3aWR0aCwgc3BlY2lmaWVkIGFzIGEgbXVsdGlwbGUgb2Ygd2lkdGguXG4gKiBAcGFyYW0ge251bWJlcn0gZGggRXhwYW5zaW9uIGluIGhlaWdodCwgc3BlY2lmaWVkIGFzIGEgbXVsdGlwbGUgb2YgaGVpZ2h0LlxuICogQHJldHVybiB7IUxheW91dFJlY3REZWZ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRMYXlvdXRSZWN0KHJlY3QsIGR3LCBkaCkge1xuICByZXR1cm4gbGF5b3V0UmVjdEx0d2gocmVjdC5sZWZ0IC0gcmVjdC53aWR0aCAqIGR3LFxuICAgICAgcmVjdC50b3AgLSByZWN0LmhlaWdodCAqIGRoLFxuICAgICAgcmVjdC53aWR0aCAqICgxICsgZHcgKiAyKSxcbiAgICAgIHJlY3QuaGVpZ2h0ICogKDEgKyBkaCAqIDIpKTtcbn1cblxuLyoqXG4gKiBNb3ZlcyB0aGUgbGF5b3V0IHJlY3QgdXNpbmcgZHggYW5kIGR5LlxuICogQHBhcmFtIHshTGF5b3V0UmVjdERlZn0gcmVjdCBPcmlnaW5hbCByZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IGR4IE1vdmUgaG9yaXpvbnRhbGx5IHdpdGggdGhpcyB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkeSBNb3ZlIHZlcnRpY2FsbHkgd2l0aCB0aGlzIHZhbHVlLlxuICogQHJldHVybiB7IUxheW91dFJlY3REZWZ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlTGF5b3V0UmVjdChyZWN0LCBkeCwgZHkpIHtcbiAgaWYgKChkeCA9PSAwICYmIGR5ID09IDApIHx8XG4gICAgICAocmVjdC53aWR0aCA9PSAwICYmIHJlY3QuaGVpZ2h0ID09IDApKSB7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH1cbiAgcmV0dXJuIGxheW91dFJlY3RMdHdoKHJlY3QubGVmdCArIGR4LCByZWN0LnRvcCArIGR5LFxuICAgICAgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshTGF5b3V0TWFyZ2luc0RlZn0gbWFyZ2luc1xuICogQHBhcmFtIHshTGF5b3V0TWFyZ2luc0NoYW5nZURlZn0gY2hhbmdlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJlTWFyZ2luc0NoYW5nZWQobWFyZ2lucywgY2hhbmdlKSB7XG4gIHJldHVybiAoY2hhbmdlLnRvcCAhPT0gdW5kZWZpbmVkICYmIGNoYW5nZS50b3AgIT0gbWFyZ2lucy50b3ApIHx8XG4gICAgICAoY2hhbmdlLnJpZ2h0ICE9PSB1bmRlZmluZWQgJiYgY2hhbmdlLnJpZ2h0ICE9IG1hcmdpbnMucmlnaHQpIHx8XG4gICAgICAoY2hhbmdlLmJvdHRvbSAhPT0gdW5kZWZpbmVkICYmIGNoYW5nZS5ib3R0b20gIT0gbWFyZ2lucy5ib3R0b20pIHx8XG4gICAgICAoY2hhbmdlLmxlZnQgIT09IHVuZGVmaW5lZCAmJiBjaGFuZ2UubGVmdCAhPSBtYXJnaW5zLmxlZnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUxheW91dFJlY3REZWZ9IGZyb21cbiAqIEBwYXJhbSB7IUxheW91dFJlY3REZWZ9IHRvXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGF5b3V0UmVjdFNpemVFcXVhbHMoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZyb20ud2lkdGggPT0gdG8ud2lkdGggJiZcbiAgICAgIGZyb20uaGVpZ2h0ID09PSB0by5oZWlnaHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHs/TGF5b3V0UmVjdERlZn0gcjFcbiAqIEBwYXJhbSB7P0xheW91dFJlY3REZWZ9IHIyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGF5b3V0UmVjdEVxdWFscyhyMSwgcjIpIHtcbiAgaWYgKCFyMSB8fCAhcjIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHIxLmxlZnQgPT0gcjIubGVmdCAmJiByMS50b3AgPT0gcjIudG9wICYmXG4gICAgICByMS53aWR0aCA9PSByMi53aWR0aCAmJiByMS5oZWlnaHQgPT0gcjIuaGVpZ2h0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBJbXBsZW1lbnRzIGVsZW1lbnQgbGF5b3V0LiBTZWUgaHR0cHM6Ly9nb28uZ2wvOWF2WHVUIGZvclxuICogZGV0YWlscy5cbiAqL1xuXG5pbXBvcnQge2RldiwgdXNlcn0gZnJvbSAnLi9sb2cnO1xuaW1wb3J0IHtodG1sRm9yfSBmcm9tICcuL3N0YXRpYy10ZW1wbGF0ZSc7XG5pbXBvcnQge2lzRmluaXRlTnVtYmVyfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7c2V0U3R5bGUsIHNldFN0eWxlc30gZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQge3N0YXJ0c1dpdGh9IGZyb20gJy4vc3RyaW5nJztcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgTGF5b3V0ID0ge1xuICBOT0RJU1BMQVk6ICdub2Rpc3BsYXknLFxuICBGSVhFRDogJ2ZpeGVkJyxcbiAgRklYRURfSEVJR0hUOiAnZml4ZWQtaGVpZ2h0JyxcbiAgUkVTUE9OU0lWRTogJ3Jlc3BvbnNpdmUnLFxuICBDT05UQUlORVI6ICdjb250YWluZXInLFxuICBGSUxMOiAnZmlsbCcsXG4gIEZMRVhfSVRFTTogJ2ZsZXgtaXRlbScsXG4gIEZMVUlEOiAnZmx1aWQnLFxuICBJTlRSSU5TSUM6ICdpbnRyaW5zaWMnLFxufTtcblxuXG4vKipcbiAqIExheW91dCBwcmlvcml0aWVzIHRvIHVzZSB3aXRoIEJhc2VFbGVtZW50I2dldExheW91dFByaW9yaXR5KCkgYW5kXG4gKiBCYXNlRWxlbWVudCN1cGRhdGVMYXlvdXRQcmlvcml0eSgpLlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IExheW91dFByaW9yaXR5ID0ge1xuICBDT05URU5UOiAwLFxuICBNRVRBREFUQTogMSxcbiAgQURTOiAyLFxuICBCQUNLR1JPVU5EOiAzLFxufTtcblxuXG4vKipcbiAqIENTUyBMZW5ndGggdHlwZS4gRS5nLiBcIjFweFwiIG9yIFwiMjB2aFwiLlxuICogQHR5cGVkZWYge3N0cmluZ31cbiAqL1xuZXhwb3J0IGxldCBMZW5ndGhEZWY7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICB3aWR0aDogc3RyaW5nLFxuICogICBoZWlnaHQ6IHN0cmluZ1xuICogfX1cbiAqL1xubGV0IERpbWVuc2lvbnNEZWY7XG5cblxuLyoqXG4gKiBUaGUgc2V0IG9mIGVsZW1lbnRzIHdpdGggbmF0dXJhbCBkaW1lbnNpb25zLCB0aGF0IGlzLCBlbGVtZW50c1xuICogd2hpY2ggaGF2ZSBhIGtub3duIGRpbWVuc2lvbiBlaXRoZXIgYmFzZWQgb24gdGhlaXIgdmFsdWUgc3BlY2lmaWVkIGhlcmUsXG4gKiBvciwgaWYgdGhlIHZhbHVlIGlzIG51bGwsIGEgZGltZW5zaW9uIHNwZWNpZmljIHRvIHRoZSBicm93c2VyLlxuICogYGhhc05hdHVyYWxEaW1lbnNpb25zYCBjaGVja3MgZm9yIG1lbWJlcnNoaXAgaW4gdGhpcyBzZXQuXG4gKiBgZ2V0TmF0dXJhbERpbWVuc2lvbnNgIGRldGVybWluZXMgdGhlIGRpbWVuc2lvbnMgZm9yIGFuIGVsZW1lbnQgaW4gdGhlXG4gKiAgICBzZXQgYW5kIGNhY2hlcyBpdC5cbiAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgP0RpbWVuc2lvbnNEZWY+fVxuICogQHByaXZhdGUgIFZpc2libGUgZm9yIHRlc3Rpbmcgb25seSFcbiAqL1xuZXhwb3J0IGNvbnN0IG5hdHVyYWxEaW1lbnNpb25zXyA9IHtcbiAgJ0FNUC1QSVhFTCc6IHt3aWR0aDogJzBweCcsIGhlaWdodDogJzBweCd9LFxuICAnQU1QLUFOQUxZVElDUyc6IHt3aWR0aDogJzFweCcsIGhlaWdodDogJzFweCd9LFxuICAvLyBUT0RPKGR2b3l0ZW5rbyk6IGF1ZGlvIHNob3VsZCBoYXZlIHdpZHRoOmF1dG8uXG4gICdBTVAtQVVESU8nOiBudWxsLFxuICAnQU1QLVNPQ0lBTC1TSEFSRSc6IHt3aWR0aDogJzYwcHgnLCBoZWlnaHQ6ICc0NHB4J30sXG59O1xuXG5cbi8qKlxuICogRWxlbWVudHMgdGhhdCB0aGUgcHJvZ2VzcyBjYW4gYmUgc2hvd24gZm9yLiBUaGlzIHNldCBoYXMgdG8gYmUgZXh0ZXJuYWxpemVkXG4gKiBzaW5jZSB0aGUgZWxlbWVudCdzIGltcGxlbWVudGF0aW9uIG1heSBub3QgYmUgZG93bmxvYWRlZCB5ZXQuXG4gKiBAZW51bSB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlICBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkhXG4gKi9cbmV4cG9ydCBjb25zdCBMT0FESU5HX0VMRU1FTlRTXyA9IHtcbiAgJ0FNUC1BTklNJzogdHJ1ZSxcbiAgJ0FNUC1CUklHSFRDT1ZFJzogdHJ1ZSxcbiAgJ0FNUC1HT09HTEUtRE9DVU1FTlQtRU1CRUQnOiB0cnVlLFxuICAnQU1QLUVNQkVEJzogdHJ1ZSxcbiAgJ0FNUC1GQUNFQk9PSyc6IHRydWUsXG4gICdBTVAtRkFDRUJPT0stQ09NTUVOVFMnOiB0cnVlLFxuICAnQU1QLUZBQ0VCT09LLUxJS0UnOiB0cnVlLFxuICAnQU1QLUZBQ0VCT09LLVBBR0UnOiB0cnVlLFxuICAnQU1QLUlGUkFNRSc6IHRydWUsXG4gICdBTVAtSU1HJzogdHJ1ZSxcbiAgJ0FNUC1JTlNUQUdSQU0nOiB0cnVlLFxuICAnQU1QLUxJU1QnOiB0cnVlLFxuICAnQU1QLU9PWUFMQS1QTEFZRVInOiB0cnVlLFxuICAnQU1QLVBJTlRFUkVTVCc6IHRydWUsXG4gICdBTVAtUExBWUJVWlonOiB0cnVlLFxuICAnQU1QLVZJREVPJzogdHJ1ZSxcbiAgJ0FNUC1ZT1VUVUJFJzogdHJ1ZSxcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7TGF5b3V0fHVuZGVmaW5lZH0gUmV0dXJucyB1bmRlZmluZWQgaW4gY2FzZSBvZiBmYWlsdXJlIHRvIHBhcnNlXG4gKiAgIHRoZSBsYXlvdXQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VMYXlvdXQocykge1xuICBmb3IgKGNvbnN0IGsgaW4gTGF5b3V0KSB7XG4gICAgaWYgKExheW91dFtrXSA9PSBzKSB7XG4gICAgICByZXR1cm4gTGF5b3V0W2tdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshTGF5b3V0fSBsYXlvdXRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExheW91dENsYXNzKGxheW91dCkge1xuICByZXR1cm4gJ2ktYW1waHRtbC1sYXlvdXQtJyArIGxheW91dDtcbn1cblxuXG4vKipcbiAqIFdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoaXMgbGF5b3V0IGluaGVyZW50bHkgZGVmaW5lcyB0aGUgc2l6ZS5cbiAqIEBwYXJhbSB7IUxheW91dH0gbGF5b3V0XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMYXlvdXRTaXplRGVmaW5lZChsYXlvdXQpIHtcbiAgcmV0dXJuIChsYXlvdXQgPT0gTGF5b3V0LkZJWEVEIHx8XG4gICAgICBsYXlvdXQgPT0gTGF5b3V0LkZJWEVEX0hFSUdIVCB8fFxuICAgICAgbGF5b3V0ID09IExheW91dC5SRVNQT05TSVZFIHx8XG4gICAgICBsYXlvdXQgPT0gTGF5b3V0LkZJTEwgfHxcbiAgICAgIGxheW91dCA9PSBMYXlvdXQuRkxFWF9JVEVNIHx8XG4gICAgICBsYXlvdXQgPT0gTGF5b3V0LkZMVUlEIHx8XG4gICAgICBsYXlvdXQgPT0gTGF5b3V0LklOVFJJTlNJQyk7XG59XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSB0YWcgaXMgYW4gaW50ZXJuYWwgKHNlcnZpY2UpIEFNUCB0YWcuXG4gKiBAcGFyYW0geyFOb2RlfHN0cmluZ30gdGFnXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm5hbEVsZW1lbnQodGFnKSB7XG4gIGNvbnN0IHRhZ05hbWUgPSAodHlwZW9mIHRhZyA9PSAnc3RyaW5nJykgPyB0YWcgOiB0YWcudGFnTmFtZTtcbiAgcmV0dXJuIHRhZ05hbWUgJiYgc3RhcnRzV2l0aCh0YWdOYW1lLnRvTG93ZXJDYXNlKCksICdpLScpO1xufVxuXG5cbi8qKlxuICogUGFyc2VzIHRoZSBDU1MgbGVuZ3RoIHZhbHVlLiBJZiBubyB1bml0cyBzcGVjaWZpZWQsIHRoZSBhc3N1bWVkIHZhbHVlIGlzXG4gKiBcInB4XCIuIFJldHVybnMgdW5kZWZpbmVkIGluIGNhc2Ugb2YgcGFyc2luZyBlcnJvci5cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZHxudWxsfSBzXG4gKiBAcmV0dXJuIHshTGVuZ3RoRGVmfHVuZGVmaW5lZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTGVuZ3RoKHMpIHtcbiAgaWYgKHR5cGVvZiBzID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHMgKyAncHgnO1xuICB9XG4gIGlmICghcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCEvXlxcZCsoXFwuXFxkKyk/KHB4fGVtfHJlbXx2aHx2d3x2bWlufHZtYXh8Y218bW18cXxpbnxwY3xwdCk/JC8udGVzdChzKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKC9eXFxkKyhcXC5cXGQrKT8kLy50ZXN0KHMpKSB7XG4gICAgcmV0dXJuIHMgKyAncHgnO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG5cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIHN1cHBsaWVkIHZhbHVlIGlzIGEgbm9uLXBlcmNlbnQgQ1NTIExlbmd0aCB2YWx1ZS5cbiAqIEBwYXJhbSB7IUxlbmd0aERlZnxzdHJpbmd8bnVsbHx1bmRlZmluZWR9IGxlbmd0aFxuICogQHJldHVybiB7IUxlbmd0aERlZn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydExlbmd0aChsZW5ndGgpIHtcbiAgdXNlcigpLmFzc2VydChcbiAgICAgIC9eXFxkKyhcXC5cXGQrKT8ocHh8ZW18cmVtfHZofHZ3fHZtaW58dm1heHxjbXxtbXxxfGlufHBjfHB0KSQvLnRlc3QobGVuZ3RoKSxcbiAgICAgICdJbnZhbGlkIGxlbmd0aCB2YWx1ZTogJXMnLCBsZW5ndGgpO1xuICByZXR1cm4gLyoqIEB0eXBlIHshTGVuZ3RoRGVmfSAqLyAobGVuZ3RoKTtcbn1cblxuXG5cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIHN1cHBsaWVkIHZhbHVlIGlzIGEgQ1NTIExlbmd0aCB2YWx1ZVxuICogKGluY2x1ZGluZyBwZXJjZW50IHVuaXQpLlxuICogQHBhcmFtIHshTGVuZ3RoRGVmfHN0cmluZ30gbGVuZ3RoXG4gKiBAcmV0dXJuIHshTGVuZ3RoRGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoT3JQZXJjZW50KGxlbmd0aCkge1xuICB1c2VyKCkuYXNzZXJ0KC9eXFxkKyhcXC5cXGQrKT8ocHh8ZW18cmVtfHZofHZ3fHZtaW58dm1heHwlKSQvLnRlc3QobGVuZ3RoKSxcbiAgICAgICdJbnZhbGlkIGxlbmd0aCBvciBwZXJjZW50IHZhbHVlOiAlcycsIGxlbmd0aCk7XG4gIHJldHVybiBsZW5ndGg7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHVuaXRzIGZyb20gdGhlIENTUyBsZW5ndGggdmFsdWUuXG4gKiBAcGFyYW0geyFMZW5ndGhEZWZ8c3RyaW5nfG51bGx8dW5kZWZpbmVkfSBsZW5ndGhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExlbmd0aFVuaXRzKGxlbmd0aCkge1xuICBhc3NlcnRMZW5ndGgobGVuZ3RoKTtcbiAgZGV2KCkuYXNzZXJ0U3RyaW5nKGxlbmd0aCk7XG4gIGNvbnN0IG0gPSB1c2VyKCkuYXNzZXJ0KGxlbmd0aC5tYXRjaCgvW2Etel0rL2kpLFxuICAgICAgJ0ZhaWxlZCB0byByZWFkIHVuaXRzIGZyb20gJXMnLCBsZW5ndGgpO1xuICByZXR1cm4gbVswXTtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWVyaWMgdmFsdWUgb2YgYSBDU1MgbGVuZ3RoIHZhbHVlLlxuICogQHBhcmFtIHshTGVuZ3RoRGVmfHN0cmluZ3xudWxsfHVuZGVmaW5lZH0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVuZ3RoTnVtZXJhbChsZW5ndGgpIHtcbiAgY29uc3QgcmVzID0gcGFyc2VGbG9hdChsZW5ndGgpO1xuICByZXR1cm4gaXNGaW5pdGVOdW1iZXIocmVzKSA/IHJlcyA6IHVuZGVmaW5lZDtcbn1cblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgdGFnTmFtZSBpcyBhIGtub3duIGVsZW1lbnQgdGhhdCBoYXMgbmF0dXJhbCBkaW1lbnNpb25zXG4gKiBpbiBvdXIgcnVudGltZSBvciB0aGUgYnJvd3Nlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSBlbGVtZW50IHRhZyBuYW1lLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc05hdHVyYWxEaW1lbnNpb25zKHRhZ05hbWUpIHtcbiAgdGFnTmFtZSA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIG5hdHVyYWxEaW1lbnNpb25zX1t0YWdOYW1lXSAhPT0gdW5kZWZpbmVkO1xufVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgZGVmYXVsdCBkaW1lbnNpb25zIGZvciBhbiBlbGVtZW50IHdoaWNoIGNvdWxkIHZhcnkgYWNyb3NzXG4gKiBkaWZmZXJlbnQgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMsIGxpa2UgPGF1ZGlvPiBmb3IgaW5zdGFuY2UuXG4gKiBUaGlzIG9wZXJhdGlvbiBjYW4gb25seSBiZSBjb21wbGV0ZWQgZm9yIGFuIGVsZW1lbnQgd2hpdGVsaXN0ZWQgYnlcbiAqIGBoYXNOYXR1cmFsRGltZW5zaW9uc2AuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtEaW1lbnNpb25zRGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmF0dXJhbERpbWVuc2lvbnMoZWxlbWVudCkge1xuICBjb25zdCB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gIGRldigpLmFzc2VydChuYXR1cmFsRGltZW5zaW9uc19bdGFnTmFtZV0gIT09IHVuZGVmaW5lZCk7XG4gIGlmICghbmF0dXJhbERpbWVuc2lvbnNfW3RhZ05hbWVdKSB7XG4gICAgY29uc3QgZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IG5hdHVyYWxUYWdOYW1lID0gdGFnTmFtZS5yZXBsYWNlKC9eQU1QXFwtLywgJycpO1xuICAgIGNvbnN0IHRlbXAgPSBkb2MuY3JlYXRlRWxlbWVudChuYXR1cmFsVGFnTmFtZSk7XG4gICAgLy8gRm9yIGF1ZGlvLCBzaG91bGQgbm8tb3AgZWxzZXdoZXJlLlxuICAgIHRlbXAuY29udHJvbHMgPSB0cnVlO1xuICAgIHNldFN0eWxlcyh0ZW1wLCB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIH0pO1xuICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRlbXApO1xuICAgIG5hdHVyYWxEaW1lbnNpb25zX1t0YWdOYW1lXSA9IHtcbiAgICAgIHdpZHRoOiAodGVtcC4vKk9LKi9vZmZzZXRXaWR0aCB8fCAxKSArICdweCcsXG4gICAgICBoZWlnaHQ6ICh0ZW1wLi8qT0sqL29mZnNldEhlaWdodCB8fCAxKSArICdweCcsXG4gICAgfTtcbiAgICBkb2MuYm9keS5yZW1vdmVDaGlsZCh0ZW1wKTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtEaW1lbnNpb25zRGVmfSAqLyAobmF0dXJhbERpbWVuc2lvbnNfW3RhZ05hbWVdKTtcbn1cblxuXG4vKipcbiAqIFdoZXRoZXIgdGhlIGxvYWRpbmcgY2FuIGJlIHNob3duIGZvciB0aGUgc3BlY2lmaWVkIGVsZW1lZW50LiBUaGlzIHNldCBoYXNcbiAqIHRvIGJlIGV4dGVybmFsaXplZCBzaW5jZSB0aGUgZWxlbWVudCdzIGltcGxlbWVudGF0aW9uIG1heSBub3QgYmVcbiAqIGRvd25sb2FkZWQgeWV0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9hZGluZ0FsbG93ZWQoZWxlbWVudCkge1xuICBjb25zdCB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG4gIGlmICh0YWdOYW1lID09ICdBTVAtQUQnIHx8IHRhZ05hbWUgPT0gJ0FNUC1FTUJFRCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gTE9BRElOR19FTEVNRU5UU19bdGFnTmFtZV0gfHwgZmFsc2U7XG59XG5cblxuLyoqXG4gKiBBcHBsaWVzIGxheW91dCB0byB0aGUgZWxlbWVudC4gVmlzaWJsZSBmb3IgdGVzdGluZyBvbmx5LlxuICpcbiAqIFxcICAgXFwgIC8gIFxcICAvICAgLyAvICAgXFwgICAgIHwgICBfICBcXCAgICAgfCAgXFwgfCAgfCB8ICB8IHwgIFxcIHwgIHwgIC8gX19fX198XG4gKiAgXFwgICBcXC8gICAgXFwvICAgLyAvICBeICBcXCAgICB8ICB8XykgIHwgICAgfCAgIFxcfCAgfCB8ICB8IHwgICBcXHwgIHwgfCAgfCAgX19cbiAqICAgXFwgICAgICAgICAgICAvIC8gIC9fXFwgIFxcICAgfCAgICAgIC8gICAgIHwgIC4gYCAgfCB8ICB8IHwgIC4gYCAgfCB8ICB8IHxfIHxcbiAqICAgIFxcICAgIC9cXCAgICAvIC8gIF9fX19fICBcXCAgfCAgfFxcICBcXC0tLS0ufCAgfFxcICAgfCB8ICB8IHwgIHxcXCAgIHwgfCAgfF9ffCB8XG4gKiAgICAgXFxfXy8gIFxcX18vIC9fXy8gICAgIFxcX19cXCB8IF98IGAuX19fX198fF9ffCBcXF9ffCB8X198IHxfX3wgXFxfX3wgIFxcX19fX19ffFxuICpcbiAqIFRoZSBlcXVpdmFsZW50IG9mIHRoaXMgbWV0aG9kIGlzIHVzZWQgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZyAoU1NSKSBhbmRcbiAqIGFueSBjaGFuZ2VzIG1hZGUgdG8gaXQgbXVzdCBiZSBtYWRlIGluIGNvb3JkaW5hdGlvbiB3aXRoIGNhY2hlcyB0aGF0XG4gKiBpbXBsZW1lbnQgU1NSLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBTU1Igc2VlIGJpdC5seS9hbXAtc3NyLlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4geyFMYXlvdXR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0YXRpY0xheW91dChlbGVtZW50KSB7XG4gIC8vIENoZWNrIGlmIHRoZSBsYXlvdXQgaGFzIGFscmVhZHkgYmVlbiBkb25lIGJ5IHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVGhlXG4gIC8vIGRvY3VtZW50IG1heSBiZSB2aXNpYmxlIHRvIHRoZSB1c2VyIGlmIHRoZSBib2lsZXJwbGF0ZSB3YXMgcmVtb3ZlZCBzb1xuICAvLyBwbGVhc2UgdGFrZSBjYXJlIGluIG1ha2luZyBjaGFuZ2VzIGhlcmUuXG4gIGNvbnN0IGNvbXBsZXRlZExheW91dEF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaS1hbXBodG1sLWxheW91dCcpO1xuICBpZiAoY29tcGxldGVkTGF5b3V0QXR0cikge1xuICAgIGNvbnN0IGxheW91dCA9IC8qKiBAdHlwZSB7IUxheW91dH0gKi8gKGRldigpLmFzc2VydChcbiAgICAgICAgcGFyc2VMYXlvdXQoY29tcGxldGVkTGF5b3V0QXR0cikpKTtcbiAgICBpZiAoKGxheW91dCA9PSBMYXlvdXQuUkVTUE9OU0lWRSB8fCBsYXlvdXQgPT0gTGF5b3V0LklOVFJJTlNJQylcbiAgICAgICYmIGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgIC8vIEZpbmQgc2l6ZXIsIGJ1dCBhc3N1bWUgdGhhdCBpdCBtaWdodCBub3QgaGF2ZSBiZWVuIHBhcnNlZCB5ZXQuXG4gICAgICBlbGVtZW50LnNpemVyRWxlbWVudCA9XG4gICAgICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpLWFtcGh0bWwtc2l6ZXInKSB8fCB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChsYXlvdXQgPT0gTGF5b3V0Lk5PRElTUExBWSkge1xuICAgICAgYXBwbHlOb0Rpc3BsYXlMYXlvdXQoZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBsYXlvdXQ7XG4gIH1cblxuICAvLyBJZiB0aGUgbGF5b3V0IHdhcyBhbHJlYWR5IGRvbmUgYnkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIChTU1IpLCB0aGVuIHRoZVxuICAvLyBjb2RlIGJlbG93IHdpbGwgbm90IHJ1bi4gQW55IGNoYW5nZXMgYmVsb3cgd2lsbCBuZWNlc3NpdGF0ZSBhIGNoYW5nZSB0byBTU1JcbiAgLy8gYW5kIG11c3QgYmUgY29vcmRpbmF0ZWQgd2l0aCBjYWNoZXMgdGhhdCBpbXBsZW1lbnQgU1NSLiBTZWUgYml0Lmx5L2FtcC1zc3IuXG5cbiAgLy8gUGFyc2UgbGF5b3V0IGZyb20gdGhlIGVsZW1lbnQuXG4gIGNvbnN0IGxheW91dEF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnbGF5b3V0Jyk7XG4gIGNvbnN0IHdpZHRoQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICBjb25zdCBoZWlnaHRBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICBjb25zdCBzaXplc0F0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc2l6ZXMnKTtcbiAgY29uc3QgaGVpZ2h0c0F0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaGVpZ2h0cycpO1xuXG4gIC8vIElucHV0IGxheW91dCBhdHRyaWJ1dGVzLlxuICBjb25zdCBpbnB1dExheW91dCA9IGxheW91dEF0dHIgPyBwYXJzZUxheW91dChsYXlvdXRBdHRyKSA6IG51bGw7XG4gIHVzZXIoKS5hc3NlcnQoaW5wdXRMYXlvdXQgIT09IHVuZGVmaW5lZCwgJ1Vua25vd24gbGF5b3V0OiAlcycsIGxheW91dEF0dHIpO1xuICAvKiogQGNvbnN0IHtzdHJpbmd8bnVsbHx1bmRlZmluZWR9ICovXG4gIGNvbnN0IGlucHV0V2lkdGggPSAod2lkdGhBdHRyICYmIHdpZHRoQXR0ciAhPSAnYXV0bycpID9cbiAgICBwYXJzZUxlbmd0aCh3aWR0aEF0dHIpIDogd2lkdGhBdHRyO1xuICB1c2VyKCkuYXNzZXJ0KGlucHV0V2lkdGggIT09IHVuZGVmaW5lZCwgJ0ludmFsaWQgd2lkdGggdmFsdWU6ICVzJywgd2lkdGhBdHRyKTtcbiAgLyoqIEBjb25zdCB7c3RyaW5nfG51bGx8dW5kZWZpbmVkfSAqL1xuICBjb25zdCBpbnB1dEhlaWdodCA9IChoZWlnaHRBdHRyICYmIGhlaWdodEF0dHIgIT0gJ2ZsdWlkJykgP1xuICAgIHBhcnNlTGVuZ3RoKGhlaWdodEF0dHIpIDogaGVpZ2h0QXR0cjtcbiAgdXNlcigpLmFzc2VydChpbnB1dEhlaWdodCAhPT0gdW5kZWZpbmVkLCAnSW52YWxpZCBoZWlnaHQgdmFsdWU6ICVzJyxcbiAgICAgIGhlaWdodEF0dHIpO1xuXG4gIC8vIEVmZmVjdGl2ZSBsYXlvdXQgYXR0cmlidXRlcy4gVGhlc2UgYXJlIGVmZmVjdGl2ZWx5IGNvbnN0YW50cy5cbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBsZXQgbGF5b3V0O1xuXG4gIC8vIENhbGN1bGF0ZSBlZmZlY3RpdmUgd2lkdGggYW5kIGhlaWdodC5cbiAgaWYgKCghaW5wdXRMYXlvdXQgfHwgaW5wdXRMYXlvdXQgPT0gTGF5b3V0LkZJWEVEIHx8XG4gICAgICBpbnB1dExheW91dCA9PSBMYXlvdXQuRklYRURfSEVJR0hUKSAmJlxuICAgICAgKCFpbnB1dFdpZHRoIHx8ICFpbnB1dEhlaWdodCkgJiYgaGFzTmF0dXJhbERpbWVuc2lvbnMoZWxlbWVudC50YWdOYW1lKSkge1xuICAgIC8vIERlZmF1bHQgd2lkdGggYW5kIGhlaWdodDogaGFuZGxlIGVsZW1lbnRzIHRoYXQgZG8gbm90IHNwZWNpZnkgYVxuICAgIC8vIHdpZHRoL2hlaWdodCBhbmQgYXJlIGRlZmluZWQgdG8gaGF2ZSBuYXR1cmFsIGJyb3dzZXIgZGltZW5zaW9ucy5cbiAgICBjb25zdCBkaW1lbnNpb25zID0gZ2V0TmF0dXJhbERpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgd2lkdGggPSAoaW5wdXRXaWR0aCB8fCBpbnB1dExheW91dCA9PSBMYXlvdXQuRklYRURfSEVJR0hUKSA/IGlucHV0V2lkdGggOlxuICAgICAgZGltZW5zaW9ucy53aWR0aDtcbiAgICBoZWlnaHQgPSBpbnB1dEhlaWdodCB8fCBkaW1lbnNpb25zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9IGlucHV0V2lkdGg7XG4gICAgaGVpZ2h0ID0gaW5wdXRIZWlnaHQ7XG4gIH1cblxuICAvLyBDYWxjdWxhdGUgZWZmZWN0aXZlIGxheW91dC5cbiAgaWYgKGlucHV0TGF5b3V0KSB7XG4gICAgbGF5b3V0ID0gaW5wdXRMYXlvdXQ7XG4gIH0gZWxzZSBpZiAoIXdpZHRoICYmICFoZWlnaHQpIHtcbiAgICBsYXlvdXQgPSBMYXlvdXQuQ09OVEFJTkVSO1xuICB9IGVsc2UgaWYgKGhlaWdodCA9PSAnZmx1aWQnKSB7XG4gICAgbGF5b3V0ID0gTGF5b3V0LkZMVUlEO1xuICB9IGVsc2UgaWYgKGhlaWdodCAmJiAoIXdpZHRoIHx8IHdpZHRoID09ICdhdXRvJykpIHtcbiAgICBsYXlvdXQgPSBMYXlvdXQuRklYRURfSEVJR0hUO1xuICB9IGVsc2UgaWYgKGhlaWdodCAmJiB3aWR0aCAmJiAoc2l6ZXNBdHRyIHx8IGhlaWdodHNBdHRyKSkge1xuICAgIGxheW91dCA9IExheW91dC5SRVNQT05TSVZFO1xuICB9IGVsc2Uge1xuICAgIGxheW91dCA9IExheW91dC5GSVhFRDtcbiAgfVxuXG4gIC8vIFZlcmlmeSBsYXlvdXQgYXR0cmlidXRlcy5cbiAgaWYgKGxheW91dCA9PSBMYXlvdXQuRklYRUQgfHwgbGF5b3V0ID09IExheW91dC5GSVhFRF9IRUlHSFQgfHxcbiAgICAgIGxheW91dCA9PSBMYXlvdXQuUkVTUE9OU0lWRSB8fCBsYXlvdXQgPT0gTGF5b3V0LklOVFJJTlNJQykge1xuICAgIHVzZXIoKS5hc3NlcnQoaGVpZ2h0LCAnRXhwZWN0ZWQgaGVpZ2h0IHRvIGJlIGF2YWlsYWJsZTogJXMnLCBoZWlnaHRBdHRyKTtcbiAgfVxuICBpZiAobGF5b3V0ID09IExheW91dC5GSVhFRF9IRUlHSFQpIHtcbiAgICB1c2VyKCkuYXNzZXJ0KCF3aWR0aCB8fCB3aWR0aCA9PSAnYXV0bycsXG4gICAgICAgICdFeHBlY3RlZCB3aWR0aCB0byBiZSBlaXRoZXIgYWJzZW50IG9yIGVxdWFsIFwiYXV0b1wiICcgK1xuICAgICAgICAnZm9yIGZpeGVkLWhlaWdodCBsYXlvdXQ6ICVzJywgd2lkdGhBdHRyKTtcbiAgfVxuICBpZiAobGF5b3V0ID09IExheW91dC5GSVhFRCB8fCBsYXlvdXQgPT0gTGF5b3V0LlJFU1BPTlNJVkUgfHxcbiAgICAgIGxheW91dCA9PSBMYXlvdXQuSU5UUklOU0lDKSB7XG4gICAgdXNlcigpLmFzc2VydCh3aWR0aCAmJiB3aWR0aCAhPSAnYXV0bycsXG4gICAgICAgICdFeHBlY3RlZCB3aWR0aCB0byBiZSBhdmFpbGFibGUgYW5kIG5vdCBlcXVhbCB0byBcImF1dG9cIjogJXMnLFxuICAgICAgICB3aWR0aEF0dHIpO1xuICB9XG5cbiAgaWYgKGxheW91dCA9PSBMYXlvdXQuUkVTUE9OU0lWRSB8fCBsYXlvdXQgPT0gTGF5b3V0LklOVFJJTlNJQykge1xuICAgIHVzZXIoKS5hc3NlcnQoZ2V0TGVuZ3RoVW5pdHMod2lkdGgpID09IGdldExlbmd0aFVuaXRzKGhlaWdodCksXG4gICAgICAgICdMZW5ndGggdW5pdHMgc2hvdWxkIGJlIHRoZSBzYW1lIGZvciB3aWR0aCBhbmQgaGVpZ2h0OiAlcywgJXMnLFxuICAgICAgICB3aWR0aEF0dHIsIGhlaWdodEF0dHIpO1xuICB9IGVsc2Uge1xuICAgIHVzZXIoKS5hc3NlcnQoaGVpZ2h0c0F0dHIgPT09IG51bGwsXG4gICAgICAgICdVbmV4cGVjdGVkIFwiaGVpZ2h0c1wiIGF0dHJpYnV0ZSBmb3Igbm9uZS1yZXNwb25zaXZlIGxheW91dCcpO1xuICB9XG5cbiAgLy8gQXBwbHkgVUkuXG4gIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChnZXRMYXlvdXRDbGFzcyhsYXlvdXQpKTtcbiAgaWYgKGlzTGF5b3V0U2l6ZURlZmluZWQobGF5b3V0KSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaS1hbXBodG1sLWxheW91dC1zaXplLWRlZmluZWQnKTtcbiAgfVxuICBpZiAobGF5b3V0ID09IExheW91dC5OT0RJU1BMQVkpIHtcbiAgICAvLyBDU1MgZGVmaW5lcyBsYXlvdXQ9bm9kaXNwbGF5IGF1dG9tYXRpY2FsbHkgd2l0aCBgZGlzcGxheTpub25lYC4gVGh1c1xuICAgIC8vIG5vIGFkZGl0aW9uYWwgc3R5bGluZyBpcyBuZWVkZWQuXG4gICAgYXBwbHlOb0Rpc3BsYXlMYXlvdXQoZWxlbWVudCk7XG4gIH0gZWxzZSBpZiAobGF5b3V0ID09IExheW91dC5GSVhFRCkge1xuICAgIHNldFN0eWxlcyhlbGVtZW50LCB7XG4gICAgICB3aWR0aDogZGV2KCkuYXNzZXJ0U3RyaW5nKHdpZHRoKSxcbiAgICAgIGhlaWdodDogZGV2KCkuYXNzZXJ0U3RyaW5nKGhlaWdodCksXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobGF5b3V0ID09IExheW91dC5GSVhFRF9IRUlHSFQpIHtcbiAgICBzZXRTdHlsZShlbGVtZW50LCAnaGVpZ2h0JywgZGV2KCkuYXNzZXJ0U3RyaW5nKGhlaWdodCkpO1xuICB9IGVsc2UgaWYgKGxheW91dCA9PSBMYXlvdXQuUkVTUE9OU0lWRSkge1xuICAgIGNvbnN0IHNpemVyID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ktYW1waHRtbC1zaXplcicpO1xuICAgIHNldFN0eWxlcyhzaXplciwge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBhZGRpbmdUb3A6XG4gICAgICAgICgoZ2V0TGVuZ3RoTnVtZXJhbChoZWlnaHQpIC8gZ2V0TGVuZ3RoTnVtZXJhbCh3aWR0aCkpICogMTAwKSArICclJyxcbiAgICB9KTtcbiAgICBlbGVtZW50Lmluc2VydEJlZm9yZShzaXplciwgZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICBlbGVtZW50LnNpemVyRWxlbWVudCA9IHNpemVyO1xuICB9IGVsc2UgaWYgKGxheW91dCA9PSBMYXlvdXQuSU5UUklOU0lDKSB7XG4gICAgLy8gSW50cmluc2ljIHVzZXMgYW4gc3ZnIGluc2lkZSB0aGUgc2l6ZXIgZWxlbWVudCByYXRoZXIgdGhhbiB0aGUgcGFkZGluZ1xuICAgIC8vIHRyaWNrIE5vdGUgYSBuYWtlZCBzdmcgd29uJ3Qgd29yayBiZWNhc3VlIG90aGVyIHRoaW5nIGV4cGVjdCB0aGVcbiAgICAvLyBpLWFtcGh0bWwtc2l6ZXIgZWxlbWVudFxuICAgIGNvbnN0IHNpemVyID0gaHRtbEZvcihlbGVtZW50KWBcbiAgICAgIDxpLWFtcGh0bWwtc2l6ZXIgY2xhc3M9XCJpLWFtcGh0bWwtc2l6ZXJcIj5cbiAgICAgICAgPGltZyBjbGFzcz1cImktYW1waHRtbC1pbnRyaW5zaWMtc2l6ZXJcIiAvPlxuICAgICAgPC9pLWFtcGh0bWwtc2l6ZXI+YDtcbiAgICBjb25zdCBpbnRyaW5zaWNTaXplciA9IHNpemVyLmZpcnN0RWxlbWVudENoaWxkO1xuICAgIGludHJpbnNpY1NpemVyLnNldEF0dHJpYnV0ZSgnc3JjJyxcbiAgICAgICAgYGRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LDxzdmcgaGVpZ2h0PVwiJHtoZWlnaHR9XCIgd2lkdGg9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIvPmApO1xuICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKHNpemVyLCBlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIC8vIFRPRE8oanBldHRpdHQpOiBzaXplciBpcyBsZWFrZWQgYW5kIGNhbid0IGJlIGNsZWFuZWQgdXAuXG4gICAgZWxlbWVudC5zaXplckVsZW1lbnQgPSBpbnRyaW5zaWNTaXplcjtcbiAgfSBlbHNlIGlmIChsYXlvdXQgPT0gTGF5b3V0LkZJTEwpIHtcbiAgICAvLyBEbyBub3RoaW5nLlxuICB9IGVsc2UgaWYgKGxheW91dCA9PSBMYXlvdXQuQ09OVEFJTkVSKSB7XG4gICAgLy8gRG8gbm90aGluZy4gRWxlbWVudHMgdGhlbXNlbHZlcyB3aWxsIGNoZWNrIHdoZXRoZXIgdGhlIHN1cHBsaWVkXG4gICAgLy8gbGF5b3V0IHZhbHVlIGlzIGFjY2VwdGFibGUuIEluIHBhcnRpY3VsYXIgY29udGFpbmVyIGlzIG9ubHkgT0tcbiAgICAvLyBzb21ldGltZXMuXG4gIH0gZWxzZSBpZiAobGF5b3V0ID09IExheW91dC5GTEVYX0lURU0pIHtcbiAgICAvLyBTZXQgaGVpZ2h0IGFuZCB3aWR0aCB0byBhIGZsZXggaXRlbSBpZiB0aGV5IGV4aXN0LlxuICAgIC8vIFRoZSBzaXplIHNldCB0byBhIGZsZXggaXRlbSBjb3VsZCBiZSBvdmVycmlkZGVuIGJ5IGBkaXNwbGF5OiBmbGV4YCBsYXRlci5cbiAgICBpZiAod2lkdGgpIHtcbiAgICAgIHNldFN0eWxlKGVsZW1lbnQsICd3aWR0aCcsIHdpZHRoKTtcbiAgICB9XG4gICAgaWYgKGhlaWdodCkge1xuICAgICAgc2V0U3R5bGUoZWxlbWVudCwgJ2hlaWdodCcsIGhlaWdodCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGxheW91dCA9PSBMYXlvdXQuRkxVSUQpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ktYW1waHRtbC1sYXlvdXQtYXdhaXRpbmctc2l6ZScpO1xuICAgIGlmICh3aWR0aCkge1xuICAgICAgc2V0U3R5bGUoZWxlbWVudCwgJ3dpZHRoJywgd2lkdGgpO1xuICAgIH1cbiAgICBzZXRTdHlsZShlbGVtZW50LCAnaGVpZ2h0JywgMCk7XG4gIH1cbiAgcmV0dXJuIGxheW91dDtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlOb0Rpc3BsYXlMYXlvdXQoZWxlbWVudCkge1xuICAvLyBUT0RPKGR2b3l0ZW5rbywgIzkzNTMpOiBvbmNlIGB0b2dnbGVMYXlvdXREaXNwbGF5YCBBUEkgaGFzIGJlZW4gZGVwbG95ZWRcbiAgLy8gZXZlcnl3aGVyZSwgc3dpdGNoIGFsbCByZWxldmFudCBlbGVtZW50cyB0byB0aGlzIEFQSS4gSW4gdGhlIG1lYW50aW1lLFxuICAvLyBzaW1wbHkgdW5ibG9jayBkaXNwbGF5IHRvZ2dsaW5nIHZpYSBgc3R5bGU9XCJkaXNwbGF5OiAuLi5cImAuXG4gIHNldFN0eWxlKGVsZW1lbnQsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpLWFtcGh0bWwtZGlzcGxheScpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7Z2V0TW9kZX0gZnJvbSAnLi9tb2RlJztcbmltcG9ydCB7Z2V0TW9kZU9iamVjdH0gZnJvbSAnLi9tb2RlLW9iamVjdCc7XG5pbXBvcnQge2lzRW51bVZhbHVlfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBUcmlwbGUgemVybyB3aWR0aCBzcGFjZS5cbiAqXG4gKiBUaGlzIGlzIGFkZGVkIHRvIHVzZXIgZXJyb3IgbWVzc2FnZXMsIHNvIHRoYXQgd2UgY2FuIGxhdGVyIGlkZW50aWZ5XG4gKiB0aGVtLCB3aGVuIHRoZSBvbmx5IHRoaW5nIHRoYXQgd2UgaGF2ZSBpcyB0aGUgbWVzc2FnZS4gVGhpcyBpcyB0aGVcbiAqIGNhc2UgaW4gbWFueSBicm93c2VycyB3aGVuIHRoZSBnbG9iYWwgZXhjZXB0aW9uIGhhbmRsZXIgaXMgaW52b2tlZC5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFVTRVJfRVJST1JfU0VOVElORUwgPSAnXFx1MjAwQlxcdTIwMEJcXHUyMDBCJztcblxuXG4vKipcbiAqIEZvdXIgemVybyB3aWR0aCBzcGFjZS5cbiAqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IFVTRVJfRVJST1JfRU1CRURfU0VOVElORUwgPSAnXFx1MjAwQlxcdTIwMEJcXHUyMDBCXFx1MjAwQic7XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIG1lc3NhZ2Ugd2FzIGEgdXNlciBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlckVycm9yTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBtZXNzYWdlLmluZGV4T2YoVVNFUl9FUlJPUl9TRU5USU5FTCkgPj0gMDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIG1lc3NhZ2Ugd2FzIGEgYSB1c2VyIGVycm9yIGZyb20gYW4gaWZyYW1lIGVtYmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyRXJyb3JFbWJlZChtZXNzYWdlKSB7XG4gIHJldHVybiBtZXNzYWdlLmluZGV4T2YoVVNFUl9FUlJPUl9FTUJFRF9TRU5USU5FTCkgPj0gMDtcbn1cblxuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKiBAcHJpdmF0ZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuXG4gKi9cbmV4cG9ydCBjb25zdCBMb2dMZXZlbCA9IHtcbiAgT0ZGOiAwLFxuICBFUlJPUjogMSxcbiAgV0FSTjogMixcbiAgSU5GTzogMyxcbiAgRklORTogNCxcbn07XG5cbi8qKlxuICogU2V0cyByZXBvcnRFcnJvciBmdW5jdGlvbi4gQ2FsbGVkIGZyb20gZXJyb3IuanMgdG8gYnJlYWsgY3ljbGljXG4gKiBkZXBlbmRlbmN5LlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCAhRWxlbWVudD0pfHVuZGVmaW5lZH0gZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFJlcG9ydEVycm9yKGZuKSB7XG4gIHNlbGYucmVwb3J0RXJyb3IgPSBmbjtcbn1cblxuLyoqXG4gKiBAdHlwZSB7IUxvZ0xldmVsfHVuZGVmaW5lZH1cbiAqIEBwcml2YXRlXG4gKi9cbmxldCBsZXZlbE92ZXJyaWRlXyA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBAcGFyYW0geyFMb2dMZXZlbH0gbGV2ZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG92ZXJyaWRlTG9nTGV2ZWwobGV2ZWwpIHtcbiAgbGV2ZWxPdmVycmlkZV8gPSBsZXZlbDtcbn1cblxuLyoqXG4gKiBMb2dnaW5nIGNsYXNzLiBVc2Ugb2Ygc2VudGluZWwgc3RyaW5nIGluc3RlYWQgb2YgYSBib29sZWFuIHRvIGNoZWNrIHVzZXIvZGV2XG4gKiBlcnJvcnMgYmVjYXVzZSBlcnJvcnMgY291bGQgYmUgcmV0aHJvd24gYnkgc29tZSBuYXRpdmUgY29kZSBhcyBhIG5ldyBlcnJvcixcbiAqIGFuZCBvbmx5IGEgbWVzc2FnZSB3b3VsZCBzdXJ2aXZlLiBBbHNvLCBzb21lIGJyb3dzZXIgZG9u4oCZdCBzdXBwb3J0IGEgNXRoXG4gKiBlcnJvciBvYmplY3QgYXJndW1lbnQgaW4gd2luZG93Lm9uZXJyb3IuIExpc3Qgb2Ygc3VwcG9ydGluZyBicm93c2VyIGNhbiBiZVxuICogZm91bmQgaGVyZTpcbiAqIGh0dHBzOi8vYmxvZy5zZW50cnkuaW8vMjAxNi8wMS8wNC9jbGllbnQtamF2YXNjcmlwdC1yZXBvcnRpbmctd2luZG93LW9uZXJyb3IuaHRtbFxuICogQGZpbmFsXG4gKiBAcHJpdmF0ZSBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2cge1xuICAvKipcbiAgICogb3B0X3N1ZmZpeCB3aWxsIGJlIGFwcGVuZGVkIHRvIGVycm9yIG1lc3NhZ2UgdG8gaWRlbnRpZnkgdGhlIHR5cGUgb2YgdGhlXG4gICAqIGVycm9yIG1lc3NhZ2UuIFdlIGNhbid0IHJlbHkgb24gdGhlIGVycm9yIG9iamVjdCB0byBwYXNzIGFsb25nIHRoZSB0eXBlXG4gICAqIGJlY2F1c2Ugc29tZSBicm93c2VycyBkbyBub3QgaGF2ZSB0aGlzIHBhcmFtIGluIGl0cyB3aW5kb3cub25lcnJvciBBUEkuXG4gICAqIFNlZTpcbiAgICogaHR0cHM6Ly9ibG9nLnNlbnRyeS5pby8yMDE2LzAxLzA0L2NsaWVudC1qYXZhc2NyaXB0LXJlcG9ydGluZy13aW5kb3ctb25lcnJvci5odG1sXG4gICAqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIS4vbW9kZS5Nb2RlRGVmKTohTG9nTGV2ZWx9IGxldmVsRnVuY1xuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zdWZmaXhcbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbiwgbGV2ZWxGdW5jLCBvcHRfc3VmZml4KSB7XG4gICAgLyoqXG4gICAgICogSW4gdGVzdHMgd2UgdXNlIHRoZSBtYWluIHRlc3Qgd2luZG93IGluc3RlYWQgb2YgdGhlIGlmcmFtZSB3aGVyZVxuICAgICAqIHRoZSB0ZXN0cyBydW5zIGJlY2F1c2Ugb25seSB0aGUgZm9ybWVyIGlzIHJlbGF5ZWQgdG8gdGhlIGNvbnNvbGUuXG4gICAgICogQGNvbnN0IHshV2luZG93fVxuICAgICAqL1xuICAgIHRoaXMud2luID0gKGdldE1vZGUoKS50ZXN0ICYmIHdpbi5BTVBfVEVTVF9JRlJBTUUpID8gd2luLnBhcmVudCA6IHdpbjtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge2Z1bmN0aW9uKCEuL21vZGUuTW9kZURlZik6IUxvZ0xldmVsfSAqL1xuICAgIHRoaXMubGV2ZWxGdW5jXyA9IGxldmVsRnVuYztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFMb2dMZXZlbH0gKi9cbiAgICB0aGlzLmxldmVsXyA9IHRoaXMuZGVmYXVsdExldmVsXygpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuICAgIHRoaXMuc3VmZml4XyA9IG9wdF9zdWZmaXggfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7IUxvZ0xldmVsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0TGV2ZWxfKCkge1xuICAgIHJldHVybiAobGV2ZWxPdmVycmlkZV8gIT09IHVuZGVmaW5lZCkgPyBsZXZlbE92ZXJyaWRlXyA6IHRoaXMubGV2ZWxfO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFMb2dMZXZlbH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRlZmF1bHRMZXZlbF8oKSB7XG4gICAgLy8gTm8gY29uc29sZSAtIGNhbid0IGVuYWJsZSBsb2dnaW5nLlxuICAgIGlmICghdGhpcy53aW4uY29uc29sZSB8fCAhdGhpcy53aW4uY29uc29sZS5sb2cpIHtcbiAgICAgIHJldHVybiBMb2dMZXZlbC5PRkY7XG4gICAgfVxuXG4gICAgLy8gTG9nZ2luZyBoYXMgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkLlxuICAgIGlmIChnZXRNb2RlKCkubG9nID09ICcwJykge1xuICAgICAgcmV0dXJuIExvZ0xldmVsLk9GRjtcbiAgICB9XG5cbiAgICAvLyBMb2dnaW5nIGlzIGVuYWJsZWQgZm9yIHRlc3RzIGRpcmVjdGx5LlxuICAgIGlmIChnZXRNb2RlKCkudGVzdCAmJiB0aGlzLndpbi5FTkFCTEVfTE9HKSB7XG4gICAgICByZXR1cm4gTG9nTGV2ZWwuRklORTtcbiAgICB9XG5cbiAgICAvLyBMb2NhbERldiBieSBkZWZhdWx0IGFsbG93cyBJTkZPIGxldmVsLCB1bmxlc3Mgb3ZlcnJpZGVuIGJ5IGAjbG9nYC5cbiAgICBpZiAoZ2V0TW9kZSgpLmxvY2FsRGV2ICYmICFnZXRNb2RlKCkubG9nKSB7XG4gICAgICByZXR1cm4gTG9nTGV2ZWwuSU5GTztcbiAgICB9XG5cbiAgICAvLyBEZWxlZ2F0ZSB0byB0aGUgc3BlY2lmaWMgcmVzb2x2ZXIuXG4gICAgcmV0dXJuIHRoaXMubGV2ZWxGdW5jXyhnZXRNb2RlT2JqZWN0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldmVsXG4gICAqIEBwYXJhbSB7IUFycmF5fSBtZXNzYWdlc1xuICAgKi9cbiAgbXNnXyh0YWcsIGxldmVsLCBtZXNzYWdlcykge1xuICAgIGlmICh0aGlzLmdldExldmVsXygpICE9IExvZ0xldmVsLk9GRikge1xuICAgICAgbGV0IGZuID0gdGhpcy53aW4uY29uc29sZS5sb2c7XG4gICAgICBpZiAobGV2ZWwgPT0gJ0VSUk9SJykge1xuICAgICAgICBmbiA9IHRoaXMud2luLmNvbnNvbGUuZXJyb3IgfHwgZm47XG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09ICdJTkZPJykge1xuICAgICAgICBmbiA9IHRoaXMud2luLmNvbnNvbGUuaW5mbyB8fCBmbjtcbiAgICAgIH0gZWxzZSBpZiAobGV2ZWwgPT0gJ1dBUk4nKSB7XG4gICAgICAgIGZuID0gdGhpcy53aW4uY29uc29sZS53YXJuIHx8IGZuO1xuICAgICAgfVxuICAgICAgaWYgKGdldE1vZGUoKS5sb2NhbERldikge1xuICAgICAgICBtZXNzYWdlcy51bnNoaWZ0KCdbJyArIHRhZyArICddJyk7XG4gICAgICB9XG4gICAgICBmbi5hcHBseSh0aGlzLndpbi5jb25zb2xlLCBtZXNzYWdlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGxvZ2dpbmcgaXMgZW5hYmxlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMZXZlbF8oKSAhPSBMb2dMZXZlbC5PRkY7XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0cyBhIGZpbmUtZ3JhaW5lZCBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gICAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3NcbiAgICovXG4gIGZpbmUodGFnLCB2YXJfYXJncykge1xuICAgIGlmICh0aGlzLmdldExldmVsXygpID49IExvZ0xldmVsLkZJTkUpIHtcbiAgICAgIHRoaXMubXNnXyh0YWcsICdGSU5FJywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydHMgYSBpbmZvcm1hdGlvbmFsIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcbiAgICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xuICAgKi9cbiAgaW5mbyh0YWcsIHZhcl9hcmdzKSB7XG4gICAgaWYgKHRoaXMuZ2V0TGV2ZWxfKCkgPj0gTG9nTGV2ZWwuSU5GTykge1xuICAgICAgdGhpcy5tc2dfKHRhZywgJ0lORk8nLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0cyBhIHdhcm5pbmcgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICAgKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzXG4gICAqL1xuICB3YXJuKHRhZywgdmFyX2FyZ3MpIHtcbiAgICBpZiAodGhpcy5nZXRMZXZlbF8oKSA+PSBMb2dMZXZlbC5XQVJOKSB7XG4gICAgICB0aGlzLm1zZ18odGFnLCAnV0FSTicsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnRzIGFuIGVycm9yIG1lc3NhZ2UuIElmIHRoZSBsb2dnaW5nIGlzIGRpc2FibGVkLCB0aGUgZXJyb3IgaXMgcmV0aHJvd25cbiAgICogYXN5bmNocm9ub3VzbHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcbiAgICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xuICAgKiBAcmV0dXJuIHshRXJyb3J8dW5kZWZpbmVkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZXJyb3JfKHRhZywgdmFyX2FyZ3MpIHtcbiAgICBpZiAodGhpcy5nZXRMZXZlbF8oKSA+PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgdGhpcy5tc2dfKHRhZywgJ0VSUk9SJywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVycm9yID0gY3JlYXRlRXJyb3JWYXJncy5hcHBseShudWxsLFxuICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgICAgdGhpcy5wcmVwYXJlRXJyb3JfKGVycm9yKTtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0cyBhbiBlcnJvciBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gICAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3NcbiAgICovXG4gIGVycm9yKHRhZywgdmFyX2FyZ3MpIHtcbiAgICBjb25zdCBlcnJvciA9IHRoaXMuZXJyb3JfLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBlcnJvci5uYW1lID0gdGFnIHx8IGVycm9yLm5hbWU7XG4gICAgICAvLyByZXBvcnRFcnJvciBpcyBpbnN0YWxsZWQgZ2xvYmFsbHkgcGVyIHdpbmRvdyBpbiB0aGUgZW50cnkgcG9pbnQuXG4gICAgICBzZWxmLnJlcG9ydEVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0cyBhbiBlcnJvciBtZXNzYWdlIGFuZCBtYXJrcyB3aXRoIGFuIGV4cGVjdGVkIHByb3BlcnR5LiBJZiB0aGVcbiAgICogbG9nZ2luZyBpcyBkaXNhYmxlZCwgdGhlIGVycm9yIGlzIHJldGhyb3duIGFzeW5jaHJvbm91c2x5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW51c2VkVGFnXG4gICAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3NcbiAgICovXG4gIGV4cGVjdGVkRXJyb3IodW51c2VkVGFnLCB2YXJfYXJncykge1xuICAgIGNvbnN0IGVycm9yID0gdGhpcy5lcnJvcl8uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGVycm9yLmV4cGVjdGVkID0gdHJ1ZTtcbiAgICAgIC8vIHJlcG9ydEVycm9yIGlzIGluc3RhbGxlZCBnbG9iYWxseSBwZXIgd2luZG93IGluIHRoZSBlbnRyeSBwb2ludC5cbiAgICAgIHNlbGYucmVwb3J0RXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGVycm9yIG9iamVjdC5cbiAgICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xuICAgKiBAcmV0dXJuIHshRXJyb3J9XG4gICAqL1xuICBjcmVhdGVFcnJvcih2YXJfYXJncykge1xuICAgIGNvbnN0IGVycm9yID0gY3JlYXRlRXJyb3JWYXJncy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIHRoaXMucHJlcGFyZUVycm9yXyhlcnJvcik7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZXJyb3Igb2JqZWN0IHdpdGggaXRzIGV4cGVjdGVkIHByb3BlcnR5IHNldCB0byB0cnVlLlxuICAgKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzXG4gICAqIEByZXR1cm4geyFFcnJvcn1cbiAgICovXG4gIGNyZWF0ZUV4cGVjdGVkRXJyb3IodmFyX2FyZ3MpIHtcbiAgICBjb25zdCBlcnJvciA9IGNyZWF0ZUVycm9yVmFyZ3MuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB0aGlzLnByZXBhcmVFcnJvcl8oZXJyb3IpO1xuICAgIGVycm9yLmV4cGVjdGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpc24ndCB0cnVlaXNoLlxuICAgKlxuICAgKiBTdXBwb3J0cyBhcmd1bWVudCBzdWJzdGl0dXRpb24gaW50byB0aGUgbWVzc2FnZSB2aWEgJXMgcGxhY2Vob2xkZXJzLlxuICAgKlxuICAgKiBUaHJvd3MgYW4gZXJyb3Igb2JqZWN0IHRoYXQgaGFzIHR3byBleHRyYSBwcm9wZXJ0aWVzOlxuICAgKiAtIGFzc29jaWF0ZWRFbGVtZW50OiBUaGlzIGlzIHRoZSBmaXJzdCBlbGVtZW50IHByb3ZpZGVkIGluIHRoZSB2YXIgYXJncy5cbiAgICogICBJdCBjYW4gYmUgdXNlZCBmb3IgaW1wcm92ZWQgZGlzcGxheSBvZiBlcnJvciBtZXNzYWdlcy5cbiAgICogLSBtZXNzYWdlQXJyYXk6IFRoZSBlbGVtZW50cyBvZiB0aGUgc3Vic3RpdHV0ZWQgbWVzc2FnZSBhcyBub24tc3RyaW5naWZpZWRcbiAgICogICBlbGVtZW50cyBpbiBhbiBhcnJheS4gV2hlbiBlLmcuIHBhc3NlZCB0byBjb25zb2xlLmVycm9yIHRoaXMgeWllbGRzXG4gICAqICAgbmF0aXZlIGRpc3BsYXlzIG9mIHRoaW5ncyBsaWtlIEhUTUwgZWxlbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7VH0gc2hvdWxkQmVUcnVlaXNoIFRoZSB2YWx1ZSB0byBhc3NlcnQuIFRoZSBhc3NlcnQgZmFpbHMgaWYgaXQgZG9lc1xuICAgKiAgICAgbm90IGV2YWx1YXRlIHRvIHRydWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgVGhlIGFzc2VydGlvbiBtZXNzYWdlXG4gICAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgQXJndW1lbnRzIHN1YnN0aXR1dGVkIGludG8gJXMgaW4gdGhlIG1lc3NhZ2UuXG4gICAqIEByZXR1cm4ge1R9IFRoZSB2YWx1ZSBvZiBzaG91bGRCZVRydWVpc2guXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIGVzbGludCBcImdvb2dsZS1jYW1lbGNhc2UvZ29vZ2xlLWNhbWVsY2FzZVwiOiAwXG4gICAqL1xuICBhc3NlcnQoc2hvdWxkQmVUcnVlaXNoLCBvcHRfbWVzc2FnZSwgdmFyX2FyZ3MpIHtcbiAgICBsZXQgZmlyc3RFbGVtZW50O1xuICAgIGlmICghc2hvdWxkQmVUcnVlaXNoKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gb3B0X21lc3NhZ2UgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnO1xuICAgICAgY29uc3Qgc3BsaXRNZXNzYWdlID0gbWVzc2FnZS5zcGxpdCgnJXMnKTtcbiAgICAgIGNvbnN0IGZpcnN0ID0gc3BsaXRNZXNzYWdlLnNoaWZ0KCk7XG4gICAgICBsZXQgZm9ybWF0dGVkID0gZmlyc3Q7XG4gICAgICBjb25zdCBtZXNzYWdlQXJyYXkgPSBbXTtcbiAgICAgIHB1c2hJZk5vbkVtcHR5KG1lc3NhZ2VBcnJheSwgZmlyc3QpO1xuICAgICAgZm9yIChsZXQgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdmFsID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBpZiAodmFsICYmIHZhbC50YWdOYW1lKSB7XG4gICAgICAgICAgZmlyc3RFbGVtZW50ID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRDb25zdGFudCA9IHNwbGl0TWVzc2FnZS5zaGlmdCgpO1xuICAgICAgICBtZXNzYWdlQXJyYXkucHVzaCh2YWwpO1xuICAgICAgICBwdXNoSWZOb25FbXB0eShtZXNzYWdlQXJyYXksIG5leHRDb25zdGFudC50cmltKCkpO1xuICAgICAgICBmb3JtYXR0ZWQgKz0gdG9TdHJpbmcodmFsKSArIG5leHRDb25zdGFudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGUgPSBuZXcgRXJyb3IoZm9ybWF0dGVkKTtcbiAgICAgIGUuZnJvbUFzc2VydCA9IHRydWU7XG4gICAgICBlLmFzc29jaWF0ZWRFbGVtZW50ID0gZmlyc3RFbGVtZW50O1xuICAgICAgZS5tZXNzYWdlQXJyYXkgPSBtZXNzYWdlQXJyYXk7XG4gICAgICB0aGlzLnByZXBhcmVFcnJvcl8oZSk7XG4gICAgICAvLyByZXBvcnRFcnJvciBpcyBpbnN0YWxsZWQgZ2xvYmFsbHkgcGVyIHdpbmRvdyBpbiB0aGUgZW50cnkgcG9pbnQuXG4gICAgICBzZWxmLnJlcG9ydEVycm9yKGUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgcmV0dXJuIHNob3VsZEJlVHJ1ZWlzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzbid0IGFuIEVsZW1lbnRcbiAgICpcbiAgICogT3RoZXJ3aXNlIHNlZSBgYXNzZXJ0YCBmb3IgdXNhZ2VcbiAgICpcbiAgICogQHBhcmFtIHsqfSBzaG91bGRCZUVsZW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBUaGUgYXNzZXJ0aW9uIG1lc3NhZ2VcbiAgICogQHJldHVybiB7IUVsZW1lbnR9IFRoZSB2YWx1ZSBvZiBzaG91bGRCZVRydWVpc2guXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqIGVzbGludCBcImdvb2dsZS1jYW1lbGNhc2UvZ29vZ2xlLWNhbWVsY2FzZVwiOiAyXG4gICAqL1xuICBhc3NlcnRFbGVtZW50KHNob3VsZEJlRWxlbWVudCwgb3B0X21lc3NhZ2UpIHtcbiAgICBjb25zdCBzaG91bGRCZVRydWVpc2ggPSBzaG91bGRCZUVsZW1lbnQgJiYgc2hvdWxkQmVFbGVtZW50Lm5vZGVUeXBlID09IDE7XG4gICAgdGhpcy5hc3NlcnQoc2hvdWxkQmVUcnVlaXNoLCAob3B0X21lc3NhZ2UgfHwgJ0VsZW1lbnQgZXhwZWN0ZWQnKSArICc6ICVzJyxcbiAgICAgICAgc2hvdWxkQmVFbGVtZW50KTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRWxlbWVudH0gKi8gKHNob3VsZEJlRWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpc24ndCBhIHN0cmluZy4gVGhlIHN0cmluZyBjYW5cbiAgICogYmUgZW1wdHkuXG4gICAqXG4gICAqIEZvciBtb3JlIGRldGFpbHMgc2VlIGBhc3NlcnRgLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHNob3VsZEJlU3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21lc3NhZ2UgVGhlIGFzc2VydGlvbiBtZXNzYWdlXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyB2YWx1ZS4gQ2FuIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICogZXNsaW50IFwiZ29vZ2xlLWNhbWVsY2FzZS9nb29nbGUtY2FtZWxjYXNlXCI6IDJcbiAgICovXG4gIGFzc2VydFN0cmluZyhzaG91bGRCZVN0cmluZywgb3B0X21lc3NhZ2UpIHtcbiAgICB0aGlzLmFzc2VydCh0eXBlb2Ygc2hvdWxkQmVTdHJpbmcgPT0gJ3N0cmluZycsXG4gICAgICAgIChvcHRfbWVzc2FnZSB8fCAnU3RyaW5nIGV4cGVjdGVkJykgKyAnOiAlcycsIHNob3VsZEJlU3RyaW5nKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChzaG91bGRCZVN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpc24ndCBhIG51bWJlci4gVGhlIGFsbG93ZWQgdmFsdWVzXG4gICAqIGluY2x1ZGUgYDBgIGFuZCBgTmFOYC5cbiAgICpcbiAgICogRm9yIG1vcmUgZGV0YWlscyBzZWUgYGFzc2VydGAuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gc2hvdWxkQmVOdW1iZXJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBUaGUgYXNzZXJ0aW9uIG1lc3NhZ2VcbiAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIHZhbHVlLiBUaGUgYWxsb3dlZCB2YWx1ZXMgaW5jbHVkZSBgMGBcbiAgICogICBhbmQgYE5hTmAuXG4gICAqL1xuICBhc3NlcnROdW1iZXIoc2hvdWxkQmVOdW1iZXIsIG9wdF9tZXNzYWdlKSB7XG4gICAgdGhpcy5hc3NlcnQodHlwZW9mIHNob3VsZEJlTnVtYmVyID09ICdudW1iZXInLFxuICAgICAgICAob3B0X21lc3NhZ2UgfHwgJ051bWJlciBleHBlY3RlZCcpICsgJzogJXMnLCBzaG91bGRCZU51bWJlcik7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoc2hvdWxkQmVOdW1iZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXNuJ3QgYSBib29sZWFuLlxuICAgKlxuICAgKiBGb3IgbW9yZSBkZXRhaWxzIHNlZSBgYXNzZXJ0YC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBzaG91bGRCZUJvb2xlYW5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBUaGUgYXNzZXJ0aW9uIG1lc3NhZ2VcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGJvb2xlYW4gdmFsdWUuXG4gICAqL1xuICBhc3NlcnRCb29sZWFuKHNob3VsZEJlQm9vbGVhbiwgb3B0X21lc3NhZ2UpIHtcbiAgICB0aGlzLmFzc2VydCghIXNob3VsZEJlQm9vbGVhbiA9PT0gc2hvdWxkQmVCb29sZWFuLFxuICAgICAgICAob3B0X21lc3NhZ2UgfHwgJ0Jvb2xlYW4gZXhwZWN0ZWQnKSArICc6ICVzJywgc2hvdWxkQmVCb29sZWFuKTtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoc2hvdWxkQmVCb29sZWFuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NlcnRzIGFuZCByZXR1cm5zIHRoZSBlbnVtIHZhbHVlLiBJZiB0aGUgZW51bSBkb2Vzbid0IGNvbnRhaW4gc3VjaCBhXG4gICAqIHZhbHVlLCB0aGUgZXJyb3IgaXMgdGhyb3duLlxuICAgKlxuICAgKiBAcGFyYW0geyFPYmplY3Q8VD59IGVudW1PYmpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZW51bU5hbWVcbiAgICogQHJldHVybiB7VH1cbiAgICogQHRlbXBsYXRlIFRcbiAgICogZXNsaW50IFwiZ29vZ2xlLWNhbWVsY2FzZS9nb29nbGUtY2FtZWxjYXNlXCI6IDJcbiAgICovXG4gIGFzc2VydEVudW1WYWx1ZShlbnVtT2JqLCBzLCBvcHRfZW51bU5hbWUpIHtcbiAgICBpZiAoaXNFbnVtVmFsdWUoZW51bU9iaiwgcykpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICB0aGlzLmFzc2VydChmYWxzZSxcbiAgICAgICAgJ1Vua25vd24gJXMgdmFsdWU6IFwiJXNcIicsXG4gICAgICAgIG9wdF9lbnVtTmFtZSB8fCAnZW51bScsIHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVycm9yfSBlcnJvclxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJlcGFyZUVycm9yXyhlcnJvcikge1xuICAgIGVycm9yID0gZHVwbGljYXRlRXJyb3JJZk5lY2Vzc2FyeShlcnJvcik7XG4gICAgaWYgKHRoaXMuc3VmZml4Xykge1xuICAgICAgaWYgKCFlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgPSB0aGlzLnN1ZmZpeF87XG4gICAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5kZXhPZih0aGlzLnN1ZmZpeF8pID09IC0xKSB7XG4gICAgICAgIGVycm9yLm1lc3NhZ2UgKz0gdGhpcy5zdWZmaXhfO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNVc2VyRXJyb3JNZXNzYWdlKGVycm9yLm1lc3NhZ2UpKSB7XG4gICAgICBlcnJvci5tZXNzYWdlID0gZXJyb3IubWVzc2FnZS5yZXBsYWNlKFVTRVJfRVJST1JfU0VOVElORUwsICcnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3whRWxlbWVudH0gdmFsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbCkge1xuICAvLyBEbyBjaGVjayBlcXVpdmFsZW50IHRvIGB2YWwgaW5zdGFuY2VvZiBFbGVtZW50YCB3aXRob3V0IGNyb3NzLXdpbmRvdyBidWdcbiAgaWYgKHZhbCAmJiB2YWwubm9kZVR5cGUgPT0gMSkge1xuICAgIHJldHVybiB2YWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpICsgKHZhbC5pZCA/ICcjJyArIHZhbC5pZCA6ICcnKTtcbiAgfVxuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWwpO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXl9IGFycmF5XG4gKiBAcGFyYW0geyp9IHZhbFxuICovXG5mdW5jdGlvbiBwdXNoSWZOb25FbXB0eShhcnJheSwgdmFsKSB7XG4gIGlmICh2YWwgIT0gJycpIHtcbiAgICBhcnJheS5wdXNoKHZhbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTb21lIGV4Y2VwdGlvbnMgKERPTUV4Y2VwdGlvbiwgbmFtZWx5KSBoYXZlIHJlYWQtb25seSBtZXNzYWdlLlxuICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG4gKiBAcmV0dXJuIHshRXJyb3J9O1xuICovXG5leHBvcnQgZnVuY3Rpb24gZHVwbGljYXRlRXJyb3JJZk5lY2Vzc2FyeShlcnJvcikge1xuICBjb25zdCB7bWVzc2FnZX0gPSBlcnJvcjtcbiAgY29uc3QgdGVzdCA9IFN0cmluZyhNYXRoLnJhbmRvbSgpKTtcbiAgZXJyb3IubWVzc2FnZSA9IHRlc3Q7XG5cbiAgaWYgKGVycm9yLm1lc3NhZ2UgPT09IHRlc3QpIHtcbiAgICBlcnJvci5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICBjb25zdCBlID0gbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAvLyBDb3B5IGFsbCB0aGUgZXh0cmFuZW91cyB0aGluZ3Mgd2UgYXR0YWNoLlxuICBmb3IgKGNvbnN0IHByb3AgaW4gZXJyb3IpIHtcbiAgICBlW3Byb3BdID0gZXJyb3JbcHJvcF07XG4gIH1cbiAgLy8gRW5zdXJlIHRoZXNlIGFyZSBjb3BpZWQuXG4gIGUuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgcmV0dXJuIGU7XG59XG5cbi8qKlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xuICogQHJldHVybiB7IUVycm9yfVxuICogQHZpc2libGVGb3JUZXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvclZhcmdzKHZhcl9hcmdzKSB7XG4gIGxldCBlcnJvciA9IG51bGw7XG4gIGxldCBtZXNzYWdlID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvciAmJiAhZXJyb3IpIHtcbiAgICAgIGVycm9yID0gZHVwbGljYXRlRXJyb3JJZk5lY2Vzc2FyeShhcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlICs9ICcgJztcbiAgICAgIH1cbiAgICAgIG1lc3NhZ2UgKz0gYXJnO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZXJyb3IpIHtcbiAgICBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChtZXNzYWdlKSB7XG4gICAgZXJyb3IubWVzc2FnZSA9IG1lc3NhZ2UgKyAnOiAnICsgZXJyb3IubWVzc2FnZTtcbiAgfVxuICByZXR1cm4gZXJyb3I7XG59XG5cblxuLyoqXG4gKiBSZXRocm93cyB0aGUgZXJyb3Igd2l0aG91dCB0ZXJtaW5hdGluZyB0aGUgY3VycmVudCBjb250ZXh0LiBUaGlzIHByZXNlcnZlc1xuICogd2hldGhlciB0aGUgb3JpZ2luYWwgZXJyb3IgZGVzaWduYXRpb24gaXMgYSB1c2VyIGVycm9yIG9yIGEgZGV2IGVycm9yLlxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmV0aHJvd0FzeW5jKHZhcl9hcmdzKSB7XG4gIGNvbnN0IGVycm9yID0gY3JlYXRlRXJyb3JWYXJncy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAvLyByZXBvcnRFcnJvciBpcyBpbnN0YWxsZWQgZ2xvYmFsbHkgcGVyIHdpbmRvdyBpbiB0aGUgZW50cnkgcG9pbnQuXG4gICAgc2VsZi5yZXBvcnRFcnJvcihlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQ2FjaGUgZm9yIGxvZ3MuIFdlIGRvIG5vdCB1c2UgYSBTZXJ2aWNlIHNpbmNlIHRoZSBzZXJ2aWNlIG1vZHVsZSBkZXBlbmRzXG4gKiBvbiBMb2cgYW5kIGNsb3N1cmUgbGl0ZXJhbGx5IGNhbid0IGV2ZW4uXG4gKiBAdHlwZSB7e3VzZXI6ID9Mb2csIGRldjogP0xvZywgdXNlckZvckVtYmVkOiA/TG9nfX1cbiAqL1xuc2VsZi5sb2cgPSAoc2VsZi5sb2cgfHwge1xuICB1c2VyOiBudWxsLFxuICBkZXY6IG51bGwsXG4gIHVzZXJGb3JFbWJlZDogbnVsbCxcbn0pO1xuXG5jb25zdCBsb2dzID0gc2VsZi5sb2c7XG5cbi8qKlxuICogRXZlbnR1YWxseSBob2xkcyBhIGNvbnN0cnVjdG9yIGZvciBMb2cgb2JqZWN0cy4gTGF6aWx5IGluaXRpYWxpemVkLCBzbyB3ZVxuICogY2FuIGF2b2lkIGV2ZXIgcmVmZXJlbmNpbmcgdGhlIHJlYWwgY29uc3RydWN0b3IgZXhjZXB0IGluIEpTIGJpbmFyaWVzXG4gKiB0aGF0IGFjdHVhbGx5IHdhbnQgdG8gaW5jbHVkZSB0aGUgaW1wbGVtZW50YXRpb24uXG4gKiBAdHlwZSB7P0Z1bmN0aW9ufVxuICovXG5sZXQgbG9nQ29uc3RydWN0b3IgPSBudWxsO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGxvZyBjb250cnVjdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdExvZ0NvbnN0cnVjdG9yKCkge1xuICBsb2dDb25zdHJ1Y3RvciA9IExvZztcbiAgLy8gSW5pdGlhbGl6ZSBpbnN0YW5jZXMgZm9yIHVzZS4gSWYgYSBiaW5hcnkgKGFuIGV4dGVuc2lvbiBmb3IgZXhhbXBsZSkgdGhhdFxuICAvLyBkb2VzIG5vdCBjYWxsIGBpbml0TG9nQ29uc3RydWN0b3JgIGludm9rZXMgYGRldigpYCBvciBgdXNlcigpYCBlYXJsaWVyIHRoYW5cbiAgLy8gdGhlIGJpbmFyeSB0aGF0IGRvZXMgY2FsbCBgaW5pdExvZ0NvbnN0cnVjdG9yYCAoYW1wLmpzKSwgdGhlIGV4dGVuc2lvbiB3aWxsXG4gIC8vIHRocm93IGFuIGVycm9yIGFzIHRoYXQgZXh0ZW5zaW9uIHdpbGwgbmV2ZXIgYmUgYWJsZSB0byBpbml0aWFsaXplIHRoZSBsb2dcbiAgLy8gaW5zdGFuY2VzIGFuZCB3ZSBhbHNvIGRvbid0IHdhbnQgaXQgdG8gY2FsbCBgaW5pdExvZ0NvbnN0cnVjdG9yYCBlaXRoZXJcbiAgLy8gKHNpbmNlIHRoYXQgd2lsbCBjYXVzZSB0aGUgTG9nIGltcGxlbWVudGF0aW9uIHRvIGJlIGJ1bmRsZWQgaW50byB0aGF0XG4gIC8vIGJpbmFyeSkuIFNvIHdlIG11c3QgaW5pdGlhbGl6ZSB0aGUgaW5zdGFuY2VzIGVhZ2VybHkgc28gdGhhdCB0aGV5IGFyZSByZWFkeVxuICAvLyBmb3IgdXNlIChzdG9yZWQgZ2xvYmFsbHkpIGFmdGVyIHRoZSBtYWluIGJpbmFyeSBjYWxscyBgaW5pdExvZ0NvbnN0cnVjdG9yYC5cbiAgZGV2KCk7XG4gIHVzZXIoKTtcbn1cblxuLyoqXG4gKiBSZXNldHMgbG9nIGNvbnRydWN0b3IgZm9yIHRlc3RpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldExvZ0NvbnN0cnVjdG9yRm9yVGVzdGluZygpIHtcbiAgbG9nQ29uc3RydWN0b3IgPSBudWxsO1xufVxuXG4vKipcbiAqIFB1Ymxpc2hlciBsZXZlbCBsb2cuXG4gKlxuICogRW5hYmxlZCBpbiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKiAgMS4gTm90IGRpc2FibGVkIHVzaW5nIGAjbG9nPTBgLlxuICogIDIuIERldmVsb3BtZW50IG1vZGUgaXMgZW5hYmxlZCB2aWEgYCNkZXZlbG9wbWVudD0xYCBvciBsb2dnaW5nIGlzIGV4cGxpY2l0bHlcbiAqICAgICBlbmFibGVkIHZpYSBgI2xvZz1EYCB3aGVyZSBEID49IDEuXG4gKiAgMy4gQU1QLnNldExvZ0xldmVsKEQpIGlzIGNhbGxlZCwgd2hlcmUgRCA+PSAxLlxuICpcbiAqIEBwYXJhbSB7IUVsZW1lbnQ9fSBvcHRfZWxlbWVudFxuICogQHJldHVybiB7IUxvZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZXIob3B0X2VsZW1lbnQpIHtcbiAgaWYgKCFsb2dzLnVzZXIpIHtcbiAgICBsb2dzLnVzZXIgPSBnZXRVc2VyTG9nZ2VyKFVTRVJfRVJST1JfU0VOVElORUwpO1xuICB9XG4gIGlmICghaXNGcm9tRW1iZWQobG9ncy51c2VyLndpbiwgb3B0X2VsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGxvZ3MudXNlcjtcbiAgfSBlbHNlIHtcbiAgICBpZiAobG9ncy51c2VyRm9yRW1iZWQpIHtcbiAgICAgIHJldHVybiBsb2dzLnVzZXJGb3JFbWJlZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ3MudXNlckZvckVtYmVkID0gZ2V0VXNlckxvZ2dlcihVU0VSX0VSUk9SX0VNQkVEX1NFTlRJTkVMKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHRlciBmb3IgdXNlciBsb2dnZXJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gc3VmZml4XG4gKiBAcmV0dXJuIHshTG9nfVxuICovXG5mdW5jdGlvbiBnZXRVc2VyTG9nZ2VyKHN1ZmZpeCkge1xuICBpZiAoIWxvZ0NvbnN0cnVjdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gY2FsbCBpbml0TG9nQ29uc3RydWN0b3InKTtcbiAgfVxuICByZXR1cm4gbmV3IGxvZ0NvbnN0cnVjdG9yKHNlbGYsIG1vZGUgPT4ge1xuICAgIGNvbnN0IGxvZ051bSA9IHBhcnNlSW50KG1vZGUubG9nLCAxMCk7XG4gICAgaWYgKG1vZGUuZGV2ZWxvcG1lbnQgfHwgbG9nTnVtID49IDEpIHtcbiAgICAgIHJldHVybiBMb2dMZXZlbC5GSU5FO1xuICAgIH1cbiAgICByZXR1cm4gTG9nTGV2ZWwuV0FSTjtcbiAgfSwgc3VmZml4KTtcbn1cblxuLyoqXG4gKiBBTVAgZGV2ZWxvcG1lbnQgbG9nLiBDYWxscyB0byBgZGV2TG9nKCkuYXNzZXJ0YCBhbmQgYGRldi5maW5lYCBhcmUgc3RyaXBwZWRcbiAqIGluIHRoZSBQUk9EIGJpbmFyeS4gSG93ZXZlciwgYGRldkxvZygpLmFzc2VydGAgcmVzdWx0IGlzIHByZXNlcnZlZCBpbiBlaXRoZXJcbiAqIGNhc2UuXG4gKlxuICogRW5hYmxlZCBpbiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKiAgMS4gTm90IGRpc2FibGVkIHVzaW5nIGAjbG9nPTBgLlxuICogIDIuIExvZ2dpbmcgaXMgZXhwbGljaXRseSBlbmFibGVkIHZpYSBgI2xvZz1EYCwgd2hlcmUgRCA+PSAyLlxuICogIDMuIEFNUC5zZXRMb2dMZXZlbChEKSBpcyBjYWxsZWQsIHdoZXJlIEQgPj0gMi5cbiAqXG4gKiBAcmV0dXJuIHshTG9nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV2KCkge1xuICBpZiAobG9ncy5kZXYpIHtcbiAgICByZXR1cm4gbG9ncy5kZXY7XG4gIH1cbiAgaWYgKCFsb2dDb25zdHJ1Y3Rvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIGNhbGwgaW5pdExvZ0NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgcmV0dXJuIGxvZ3MuZGV2ID0gbmV3IGxvZ0NvbnN0cnVjdG9yKHNlbGYsIG1vZGUgPT4ge1xuICAgIGNvbnN0IGxvZ051bSA9IHBhcnNlSW50KG1vZGUubG9nLCAxMCk7XG4gICAgaWYgKGxvZ051bSA+PSAzKSB7XG4gICAgICByZXR1cm4gTG9nTGV2ZWwuRklORTtcbiAgICB9XG4gICAgaWYgKGxvZ051bSA+PSAyKSB7XG4gICAgICByZXR1cm4gTG9nTGV2ZWwuSU5GTztcbiAgICB9XG4gICAgcmV0dXJuIExvZ0xldmVsLk9GRjtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnQ9fSBvcHRfZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gaXNFbWJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGcm9tRW1iZWQod2luLCBvcHRfZWxlbWVudCkge1xuICBpZiAoIW9wdF9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBvcHRfZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3ICE9IHdpbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2dldE1vZGV9IGZyb20gJy4vbW9kZSc7XG5cbi8qKlxuICogUHJvdmlkZXMgaW5mbyBhYm91dCB0aGUgY3VycmVudCBhcHAuIFRoaXMgcmV0dXJuIHZhbHVlIG1heSBiZSBjYWNoZWQgYW5kXG4gKiBwYXNzZWQgYXJvdW5kIGFzIGl0IHdpbGwgYWx3YXlzIGJlIERDRSdkLlxuICogQHBhcmFtIHs/V2luZG93PX0gb3B0X3dpblxuICogQHJldHVybiB7IS4vbW9kZS5Nb2RlRGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kZU9iamVjdChvcHRfd2luKSB7XG4gIHJldHVybiB7XG4gICAgbG9jYWxEZXY6IGdldE1vZGUob3B0X3dpbikubG9jYWxEZXYsXG4gICAgZGV2ZWxvcG1lbnQ6IGdldE1vZGUob3B0X3dpbikuZGV2ZWxvcG1lbnQsXG4gICAgZmlsdGVyOiBnZXRNb2RlKG9wdF93aW4pLmZpbHRlcixcbiAgICBtaW5pZmllZDogZ2V0TW9kZShvcHRfd2luKS5taW5pZmllZCxcbiAgICBsaXRlOiBnZXRNb2RlKG9wdF93aW4pLmxpdGUsXG4gICAgdGVzdDogZ2V0TW9kZShvcHRfd2luKS50ZXN0LFxuICAgIGxvZzogZ2V0TW9kZShvcHRfd2luKS5sb2csXG4gICAgdmVyc2lvbjogZ2V0TW9kZShvcHRfd2luKS52ZXJzaW9uLFxuICAgIHJ0dlZlcnNpb246IGdldE1vZGUob3B0X3dpbikucnR2VmVyc2lvbixcbiAgfTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge3BhcnNlUXVlcnlTdHJpbmdffSBmcm9tICcuL3VybC1wYXJzZS1xdWVyeS1zdHJpbmcnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGxvY2FsRGV2OiBib29sZWFuLFxuICogICBkZXZlbG9wbWVudDogYm9vbGVhbixcbiAqICAgZmlsdGVyOiAoc3RyaW5nfHVuZGVmaW5lZCksXG4gKiAgIG1pbmlmaWVkOiBib29sZWFuLFxuICogICBsaXRlOiBib29sZWFuLFxuICogICB0ZXN0OiBib29sZWFuLFxuICogICBsb2c6IChzdHJpbmd8dW5kZWZpbmVkKSxcbiAqICAgdmVyc2lvbjogc3RyaW5nLFxuICogICBydHZWZXJzaW9uOiBzdHJpbmcsXG4gKiB9fVxuICovXG5leHBvcnQgbGV0IE1vZGVEZWY7XG5cbi8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuY29uc3QgdmVyc2lvbiA9ICckaW50ZXJuYWxSdW50aW1lVmVyc2lvbiQnO1xuXG4vKipcbiAqIGBydHZWZXJzaW9uYCBpcyB0aGUgcHJlZml4ZWQgdmVyc2lvbiB3ZSBzZXJ2ZSBvZmYgb2YgdGhlIGNkbi5cbiAqIFRoZSBwcmVmaXggZGVub3RlcyBjYW5hcnkoMDApIG9yIHByb2QoMDEpIG9yIGFuIGV4cGVyaW1lbnQgdmVyc2lvbiAoID4gMDEpLlxuICogQHR5cGUge3N0cmluZ31cbiAqL1xubGV0IHJ0dlZlcnNpb24gPSAnJztcblxuLyoqXG4gKiBQcm92aWRlcyBpbmZvIGFib3V0IHRoZSBjdXJyZW50IGFwcC5cbiAqIEBwYXJhbSB7P1dpbmRvdz19IG9wdF93aW5cbiAqIEByZXR1cm4geyFNb2RlRGVmfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kZShvcHRfd2luKSB7XG4gIGNvbnN0IHdpbiA9IG9wdF93aW4gfHwgc2VsZjtcbiAgaWYgKHdpbi5BTVBfTU9ERSkge1xuICAgIHJldHVybiB3aW4uQU1QX01PREU7XG4gIH1cbiAgcmV0dXJuIHdpbi5BTVBfTU9ERSA9IGdldE1vZGVfKHdpbik7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgaW5mbyBhYm91dCB0aGUgY3VycmVudCBhcHAuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7IU1vZGVEZWZ9XG4gKi9cbmZ1bmN0aW9uIGdldE1vZGVfKHdpbikge1xuICAvLyBNYWdpYyBjb25zdGFudHMgdGhhdCBhcmUgcmVwbGFjZWQgYnkgY2xvc3VyZSBjb21waWxlci5cbiAgLy8gSVNfTUlOSUZJRUQgaXMgYWx3YXlzIHJlcGxhY2VkIHdpdGggdHJ1ZSB3aGVuIGNsb3N1cmUgY29tcGlsZXIgaXMgdXNlZFxuICAvLyB3aGlsZSBJU19ERVYgaXMgb25seSByZXBsYWNlZCB3aGVuIGBndWxwIGRpc3RgIGlzIGNhbGxlZCB3aXRob3V0IHRoZVxuICAvLyAtLWZvcnRlc3RpbmcgZmxhZy5cbiAgY29uc3QgSVNfREVWID0gdHJ1ZTtcbiAgY29uc3QgSVNfTUlOSUZJRUQgPSBmYWxzZTtcblxuICBjb25zdCBsb2NhbERldkVuYWJsZWQgPSAhIShzZWxmLkFNUF9DT05GSUcgJiYgc2VsZi5BTVBfQ09ORklHLmxvY2FsRGV2KTtcbiAgY29uc3QgcnVubmluZ1Rlc3RzID0gSVNfREVWICYmICEhKHdpbi5BTVBfVEVTVCB8fCB3aW4uX19rYXJtYV9fKTtcbiAgY29uc3QgaXNMb2NhbERldiA9IElTX0RFViAmJiAobG9jYWxEZXZFbmFibGVkIHx8IHJ1bm5pbmdUZXN0cyk7XG4gIGNvbnN0IGhhc2hRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmdfKFxuICAgICAgLy8gbG9jYXRpb24ub3JpZ2luYWxIYXNoIGlzIHNldCBieSB0aGUgdmlld2VyIHdoZW4gaXQgcmVtb3ZlcyB0aGUgZnJhZ21lbnRcbiAgICAgIC8vIGZyb20gdGhlIFVSTC5cbiAgICAgIHdpbi5sb2NhdGlvbi5vcmlnaW5hbEhhc2ggfHwgd2luLmxvY2F0aW9uLmhhc2gpO1xuXG4gIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZ18od2luLmxvY2F0aW9uLnNlYXJjaCk7XG5cbiAgaWYgKCFydHZWZXJzaW9uKSB7XG4gICAgcnR2VmVyc2lvbiA9IGdldFJ0dlZlcnNpb24od2luLCBpc0xvY2FsRGV2KTtcbiAgfVxuXG4gIC8vIFRoZSBgbWluaWZpZWRgLCBgdGVzdGAgYW5kIGBsb2NhbERldmAgcHJvcGVydGllcyBhcmUgcmVwbGFjZWRcbiAgLy8gYXMgYm9vbGVhbiBsaXRlcmFscyB3aGVuIHdlIHJ1biBgZ3VscCBkaXN0YCB3aXRob3V0IHRoZSBgLS1mb3J0ZXN0aW5nYFxuICAvLyBmbGFncy4gVGhpcyBpbXByb3ZlZCBEQ0Ugb24gdGhlIHByb2R1Y3Rpb24gZmlsZSB3ZSBkZXBsb3kgYXMgdGhlIGNvZGVcbiAgLy8gcGF0aHMgZm9yIGxvY2FsaG9zdC90ZXN0aW5nL2RldmVsb3BtZW50IGFyZSBlbGltaW5hdGVkLlxuICByZXR1cm4ge1xuICAgIGxvY2FsRGV2OiBpc0xvY2FsRGV2LFxuICAgIC8vIFRyaWdnZXJzIHZhbGlkYXRpb24gb3IgZW5hYmxlIHB1YiBsZXZlbCBsb2dnaW5nLiBWYWxpZGF0aW9uIGNhbiBiZVxuICAgIC8vIGJ5cGFzc2VkIHZpYSAjdmFsaWRhdGU9MC5cbiAgICAvLyBOb3RlIHRoYXQgQU1QX0RFVl9NT0RFIGZsYWcgaXMgdXNlZCBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgICBkZXZlbG9wbWVudDogISEoaGFzaFF1ZXJ5WydkZXZlbG9wbWVudCddID09ICcxJyB8fCB3aW4uQU1QX0RFVl9NT0RFKSxcbiAgICBleGFtaW5lcjogaGFzaFF1ZXJ5WydkZXZlbG9wbWVudCddID09ICcyJyxcbiAgICAvLyBBbGxvd3MgZmlsdGVyaW5nIHZhbGlkYXRpb24gZXJyb3JzIGJ5IGVycm9yIGNhdGVnb3J5LiBGb3IgdGhlXG4gICAgLy8gYXZhaWxhYmxlIGNhdGVnb3JpZXMsIHNlZSBFcnJvckNhdGVnb3J5IGluIHZhbGlkYXRvci92YWxpZGF0b3IucHJvdG8uXG4gICAgZmlsdGVyOiBoYXNoUXVlcnlbJ2ZpbHRlciddLFxuICAgIC8vIGFtcC1nZW8gb3ZlcnJpZGVcbiAgICBnZW9PdmVycmlkZTogaGFzaFF1ZXJ5WydhbXAtZ2VvJ10sXG4gICAgbWluaWZpZWQ6IElTX01JTklGSUVELFxuICAgIC8vIFdoZXRoZXIgZG9jdW1lbnQgaXMgaW4gYW4gYW1wLWxpdGUgdmlld2VyLiBJdCBzaWduYWwgdGhhdCB0aGUgdXNlclxuICAgIC8vIHdvdWxkIHByZWZlciB0byB1c2UgbGVzcyBiYW5kd2lkdGguXG4gICAgbGl0ZTogc2VhcmNoUXVlcnlbJ2FtcF9saXRlJ10gIT0gdW5kZWZpbmVkLFxuICAgIHRlc3Q6IHJ1bm5pbmdUZXN0cyxcbiAgICBsb2c6IGhhc2hRdWVyeVsnbG9nJ10sXG4gICAgdmVyc2lvbixcbiAgICBydHZWZXJzaW9uLFxuICB9O1xufVxuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBgcnR2VmVyc2lvbmAgd2hpY2ggd2lsbCBoYXZlIGEgbnVtZXJpYyBwcmVmaXhcbiAqIGRlbm90aW5nIGNhbmFyeS9wcm9kL2V4cGVyaW1lbnQgKHVubGVzcyBgaXNMb2NhbERldmAgaXMgdHJ1ZSkuXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNMb2NhbERldlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRSdHZWZXJzaW9uKHdpbiwgaXNMb2NhbERldikge1xuICAvLyBJZiBpdCdzIGxvY2FsIGRldiB0aGVuIHdlIHdvbid0IGFjdHVhbGx5IGhhdmUgYSBmdWxsIHZlcnNpb24gc29cbiAgLy8ganVzdCB1c2UgdGhlIHZlcnNpb24uXG4gIGlmIChpc0xvY2FsRGV2KSB7XG4gICAgcmV0dXJuIHZlcnNpb247XG4gIH1cblxuICBpZiAod2luLkFNUF9DT05GSUcgJiYgd2luLkFNUF9DT05GSUcudikge1xuICAgIHJldHVybiB3aW4uQU1QX0NPTkZJRy52O1xuICB9XG5cbiAgLy8gQ3VycmVudGx5IGAkaW50ZXJuYWxSdW50aW1lVmVyc2lvbiRgIGFuZCB0aHVzIGBtb2RlLnZlcnNpb25gIGNvbnRhaW4gb25seVxuICAvLyBtYWpvciB2ZXJzaW9uLiBUaGUgZnVsbCB2ZXJzaW9uIGhvd2V2ZXIgbXVzdCBhbHNvIGNhcnJ5IHRoZSBtaW5vciB2ZXJzaW9uLlxuICAvLyBXZSB3aWxsIGRlZmF1bHQgdG8gcHJvZHVjdGlvbiBkZWZhdWx0IGAwMWAgbWlub3IgdmVyc2lvbiBmb3Igbm93LlxuICAvLyBUT0RPKGVyd2lubW9tYmF5KTogZGVjaWRlIHdoZXRoZXIgJGludGVybmFsUnVudGltZVZlcnNpb24kIHNob3VsZCBjb250YWluXG4gIC8vIG1pbm9yIHZlcnNpb24uXG4gIHJldHVybiBgMDEke3ZlcnNpb259YDtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzTG9jYWxEZXZcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnR2VmVyc2lvbkZvclRlc3Rpbmcod2luLCBpc0xvY2FsRGV2KSB7XG4gIHJldHVybiBnZXRSdHZWZXJzaW9uKHdpbiwgaXNMb2NhbERldik7XG59XG5cblxuLyoqIEB2aXNpYmxlRm9yVGVzdGluZyAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0UnR2VmVyc2lvbkZvclRlc3RpbmcoKSB7XG4gIHJ0dlZlcnNpb24gPSAnJztcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGhlbHBzIHRvIG1hbmFnZSBvYnNlcnZlcnMuIE9ic2VydmVycyBjYW4gYmUgYWRkZWQsIHJlbW92ZWQgb3JcbiAqIGZpcmVkIHRocm91Z2ggYW5kIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MuXG4gKiBAdGVtcGxhdGUgVFlQRVxuICovXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgT2JzZXJ2YWJsZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8qKiBAdHlwZSB7P0FycmF5PGZ1bmN0aW9uKFRZUEUpPn0gKi9cbiAgICB0aGlzLmhhbmRsZXJzXyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgb2JzZXJ2ZXIgdG8gdGhpcyBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihUWVBFKX0gaGFuZGxlciBPYnNlcnZlcidzIGhhbmRsZXIuXG4gICAqIEByZXR1cm4geyFVbmxpc3RlbkRlZn1cbiAgICovXG4gIGFkZChoYW5kbGVyKSB7XG4gICAgaWYgKCF0aGlzLmhhbmRsZXJzXykge1xuICAgICAgdGhpcy5oYW5kbGVyc18gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVyc18ucHVzaChoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmUoaGFuZGxlcik7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBvYnNlcnZlciBmcm9tIHRoaXMgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oVFlQRSl9IGhhbmRsZXIgT2JzZXJ2ZXIncyBpbnN0YW5jZS5cbiAgICovXG4gIHJlbW92ZShoYW5kbGVyKSB7XG4gICAgaWYgKCF0aGlzLmhhbmRsZXJzXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaGFuZGxlcnNfLmluZGV4T2YoaGFuZGxlcik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNfLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIG9ic2VydmVycy5cbiAgICovXG4gIHJlbW92ZUFsbCgpIHtcbiAgICBpZiAoIXRoaXMuaGFuZGxlcnNfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlcnNfLmxlbmd0aCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgYW4gZXZlbnQuIEFsbCBvYnNlcnZlcnMgYXJlIGNhbGxlZC5cbiAgICogQHBhcmFtIHtUWVBFPX0gb3B0X2V2ZW50XG4gICAqL1xuICBmaXJlKG9wdF9ldmVudCkge1xuICAgIGlmICghdGhpcy5oYW5kbGVyc18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzXztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbaV07XG4gICAgICBoYW5kbGVyKG9wdF9ldmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbnVtYmVyIG9mIGhhbmRsZXJzLiBNb3N0bHkgbmVlZGVkIGZvciB0ZXN0cy5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0SGFuZGxlckNvdW50KCkge1xuICAgIGlmICghdGhpcy5oYW5kbGVyc18pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyc18ubGVuZ3RoO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtnZXRNb2RlfSBmcm9tICcuL21vZGUnO1xuaW1wb3J0IHtpbnN0YWxsIGFzIGluc3RhbGxBcnJheUluY2x1ZGVzfSBmcm9tICcuL3BvbHlmaWxscy9hcnJheS1pbmNsdWRlcyc7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbEN1c3RvbUVsZW1lbnRzfSBmcm9tICcuL3BvbHlmaWxscy9jdXN0b20tZWxlbWVudHMnO1xuaW1wb3J0IHtcbiAgaW5zdGFsbCBhcyBpbnN0YWxsRE9NVG9rZW5MaXN0VG9nZ2xlLFxufSBmcm9tICcuL3BvbHlmaWxscy9kb210b2tlbmxpc3QtdG9nZ2xlJztcbmltcG9ydCB7aW5zdGFsbCBhcyBpbnN0YWxsRG9jQ29udGFpbnN9IGZyb20gJy4vcG9seWZpbGxzL2RvY3VtZW50LWNvbnRhaW5zJztcbmltcG9ydCB7aW5zdGFsbCBhcyBpbnN0YWxsTWF0aFNpZ259IGZyb20gJy4vcG9seWZpbGxzL21hdGgtc2lnbic7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbE9iamVjdEFzc2lnbn0gZnJvbSAnLi9wb2x5ZmlsbHMvb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQge2luc3RhbGwgYXMgaW5zdGFsbFByb21pc2V9IGZyb20gJy4vcG9seWZpbGxzL3Byb21pc2UnO1xuaW1wb3J0IHtpbnN0YWxsQ3VzdG9tRWxlbWVudHMgYXMgaW5zdGFsbFJlZ2lzdGVyRWxlbWVudH0gZnJvbVxuICAnZG9jdW1lbnQtcmVnaXN0ZXItZWxlbWVudC9idWlsZC9kb2N1bWVudC1yZWdpc3Rlci1lbGVtZW50LnBhdGNoZWQnO1xuaW1wb3J0IHtpc0V4cGVyaW1lbnRPbn0gZnJvbSAnLi9leHBlcmltZW50cyc7XG5cbmlmIChpc0V4cGVyaW1lbnRPbihzZWxmLCAnY3VzdG9tLWVsZW1lbnRzLXYxJykgfHwgZ2V0TW9kZSgpLnRlc3QpIHtcbiAgaW5zdGFsbEN1c3RvbUVsZW1lbnRzKHNlbGYsIGNsYXNzIHt9KTtcbn0gZWxzZSB7XG4gIGluc3RhbGxSZWdpc3RlckVsZW1lbnQoc2VsZiwgJ2F1dG8nKTtcbn1cbmluc3RhbGxET01Ub2tlbkxpc3RUb2dnbGUoc2VsZik7XG5pbnN0YWxsTWF0aFNpZ24oc2VsZik7XG5pbnN0YWxsT2JqZWN0QXNzaWduKHNlbGYpO1xuaW5zdGFsbFByb21pc2Uoc2VsZik7XG5pbnN0YWxsRG9jQ29udGFpbnMoc2VsZik7XG5pbnN0YWxsQXJyYXlJbmNsdWRlcyhzZWxmKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGlzIGluIHRoZSBhcnJheSBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2Zyb21JbmRleFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEB0aGlzIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gaW5jbHVkZXModmFsdWUsIG9wdF9mcm9tSW5kZXgpIHtcbiAgY29uc3QgZnJvbUluZGV4ID0gb3B0X2Zyb21JbmRleCB8fCAwO1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgbGV0IGkgPSBmcm9tSW5kZXggPj0gMCA/IGZyb21JbmRleCA6IE1hdGgubWF4KGxlbiArIGZyb21JbmRleCwgMCk7XG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBvdGhlciA9IHRoaXNbaV07XG4gICAgLy8gSWYgdmFsdWUgaGFzIGJlZW4gZm91bmQgT1IgKHZhbHVlIGlzIE5hTiBBTkQgb3RoZXIgaXMgTmFOKVxuICAgIC8qZXNsaW50IFwibm8tc2VsZi1jb21wYXJlXCI6IDAqL1xuICAgIGlmIChvdGhlciA9PT0gdmFsdWUgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiogU2V0cyB0aGUgQXJyYXkuY29udGFpbnMgcG9seWZpbGwgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4qIEBwYXJhbSB7IVdpbmRvd30gd2luXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLkFycmF5LnByb3RvdHlwZS5pbmNsdWRlcykge1xuICAgIHdpbi5PYmplY3QuZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAnaW5jbHVkZXMnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGluY2x1ZGVzLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7e1xuICogICBwcm9taXNlOiAhUHJvbWlzZTx1bmRlZmluZWQ+LFxuICogICByZXNvbHZlOiBmdW5jdGlvbigpLFxuICogfX1cbiAqL1xubGV0IERlZmVycmVkRGVmO1xuXG4vKipcbiAqIEB0eXBlZGVmIHshRnVuY3Rpb259XG4gKi9cbmxldCBDdXN0b21FbGVtZW50Q29uc3RydWN0b3JEZWY7XG5cbi8qKlxuICogQHR5cGVkZWYge3tcbiAqICBuYW1lOiBzdHJpbmcsXG4gKiAgY3RvcjogIUN1c3RvbUVsZW1lbnRDb25zdHJ1Y3RvckRlZixcbiAqIH19XG4gKi9cbmxldCBDdXN0b21FbGVtZW50RGVmO1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgY3VzdG9tIGVsZW1lbnQncyBuYW1lLlxuICogVGhpcyBpbnRlbnRpb25hbGx5IGlnbm9yZXMgXCJ2YWxpZFwiIGhpZ2hlciBVbmljb2RlIENvZGUgUG9pbnRzLlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvY3VzdG9tLWVsZW1lbnRzLmh0bWwjdmFsaWQtY3VzdG9tLWVsZW1lbnQtbmFtZVxuICovXG5jb25zdCBWQUxJRF9OQU1FID0gL15bYS16XVthLXowLTkuX10qLVthLXowLTkuXy1dKiQvO1xuY29uc3QgSU5WQUxJRF9OQU1FUyA9IFtcbiAgJ2Fubm90YXRpb24teG1sJyxcbiAgJ2NvbG9yLXByb2ZpbGUnLFxuICAnZm9udC1mYWNlJyxcbiAgJ2ZvbnQtZmFjZS1zcmMnLFxuICAnZm9udC1mYWNlLXVyaScsXG4gICdmb250LWZhY2UtZm9ybWF0JyxcbiAgJ2ZvbnQtZmFjZS1uYW1lJyxcbiAgJ21pc3NpbmctZ2x5cGgnLFxuXTtcblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGN1c3RvbSBlbGVtZW50IG5hbWUgY29uZm9ybXMgdG8gdGhlIHNwZWMuXG4gKlxuICogQHBhcmFtIHshRnVuY3Rpb259IFN5bnRheEVycm9yXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5mdW5jdGlvbiBhc3NlcnRWYWxpZE5hbWUoU3ludGF4RXJyb3IsIG5hbWUpIHtcbiAgaWYgKCFWQUxJRF9OQU1FLnRlc3QobmFtZSkgfHwgSU5WQUxJRF9OQU1FUy5pbmRleE9mKG5hbWUpID49IDApIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYGludmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBcIiR7bmFtZX1cImApO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyB3aW4gaGF2ZSBhIGZ1bGwgQ3VzdG9tIEVsZW1lbnRzIHJlZ2lzdHJ5P1xuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNDdXN0b21FbGVtZW50cyh3aW4pIHtcbiAgY29uc3Qge2N1c3RvbUVsZW1lbnRzfSA9IHdpbjtcblxuICByZXR1cm4gISEoXG4gICAgY3VzdG9tRWxlbWVudHMgJiZcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUgJiZcbiAgICBjdXN0b21FbGVtZW50cy5nZXQgJiZcbiAgICBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZCk7XG59XG5cbi8qKlxuICogV2FzIEhUTUxFbGVtZW50IGFscmVhZHkgcGF0Y2hlZCBmb3IgdGhpcyB3aW5kb3c/XG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUGF0Y2hlZCh3aW4pIHtcbiAgY29uc3QgdGFnID0gd2luLkhUTUxFbGVtZW50LnRvU3RyaW5nKCk7XG4gIHJldHVybiB0YWcuaW5kZXhPZignW25hdGl2ZSBjb2RlXScpID09PSAtMTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEN1c3RvbSBFbGVtZW50cyBBUEkuXG4gKi9cbmNsYXNzIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcGFyYW0geyFSZWdpc3RyeX0gcmVnaXN0cnlcbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbiwgcmVnaXN0cnkpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3QgQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLndpbl8gPSB3aW47XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3QgQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnJlZ2lzdHJ5XyA9IHJlZ2lzdHJ5O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBEZWZlcnJlZERlZj59XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RcbiAgICAgKi9cbiAgICB0aGlzLnBlbmRpbmdEZWZpbmVzXyA9IHRoaXMud2luXy5PYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHRoZSBjdXN0b20gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHshQ3VzdG9tRWxlbWVudENvbnN0cnVjdG9yRGVmfSBjdG9yXG4gICAqIEBwYXJhbSB7IU9iamVjdD19IG9wdGlvbnNcbiAgICovXG4gIGRlZmluZShuYW1lLCBjdG9yLCBvcHRpb25zKSB7XG4gICAgdGhpcy5yZWdpc3RyeV8uZGVmaW5lKG5hbWUsIGN0b3IsIG9wdGlvbnMpO1xuXG4gICAgLy8gSWYgYW55b25lIGlzIHdhaXRpbmcgZm9yIHRoaXMgY3VzdG9tIGVsZW1lbnQgdG8gYmUgZGVmaW5lZCwgcmVzb2x2ZVxuICAgIC8vIHRoZWlyIHByb21pc2UuXG4gICAgY29uc3QgcGVuZGluZyA9IHRoaXMucGVuZGluZ0RlZmluZXNfO1xuICAgIGNvbnN0IGRlZmVycmVkID0gcGVuZGluZ1tuYW1lXTtcbiAgICBpZiAoZGVmZXJyZWQpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nW25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSAoYWxyZWFkeSBkZWZpbmVkKSBjdXN0b20gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7IUN1c3RvbUVsZW1lbnRDb25zdHJ1Y3RvckRlZnx1bmRlZmluZWR9XG4gICAqL1xuICBnZXQobmFtZSkge1xuICAgIGNvbnN0IGRlZiA9IHRoaXMucmVnaXN0cnlfLmdldEJ5TmFtZShuYW1lKTtcbiAgICBpZiAoZGVmKSB7XG4gICAgICByZXR1cm4gZGVmLmN0b3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FpdHMgdW50aWwgdGhlIGN1c3RvbSBlbGVtZW50IGlzIGRlZmluZWQuXG4gICAqIElmIHRoZSBjdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGRlZmluZWQsIHJldHVybnMgYSByZXNvbHZlZCBwcm9taXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTx1bmRlZmluZWQ+fVxuICAgKi9cbiAgd2hlbkRlZmluZWQobmFtZSkge1xuICAgIGNvbnN0IHtQcm9taXNlLCBTeW50YXhFcnJvcn0gPSB0aGlzLndpbl87XG4gICAgYXNzZXJ0VmFsaWROYW1lKFN5bnRheEVycm9yLCBuYW1lKTtcblxuICAgIGlmICh0aGlzLnJlZ2lzdHJ5Xy5nZXRCeU5hbWUobmFtZSkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBwZW5kaW5nID0gdGhpcy5wZW5kaW5nRGVmaW5lc187XG4gICAgY29uc3QgZGVmZXJyZWQgPSBwZW5kaW5nW25hbWVdO1xuICAgIGlmIChkZWZlcnJlZCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmU7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyAvKk9LKi9Qcm9taXNlKHJlcyA9PiByZXNvbHZlID0gcmVzKTtcbiAgICBwZW5kaW5nW25hbWVdID0ge1xuICAgICAgcHJvbWlzZSxcbiAgICAgIHJlc29sdmUsXG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZ3JhZGUgYWxsIGN1c3RvbSBlbGVtZW50cyBpbnNpZGUgcm9vdC5cbiAgICpcbiAgICogQHBhcmFtIHshTm9kZX0gcm9vdFxuICAgKi9cbiAgdXBncmFkZShyb290KSB7XG4gICAgdGhpcy5yZWdpc3RyeV8udXBncmFkZShyb290KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaW50ZXJuYWwgQVBJcyBuZWNlc3NhcnkgdG8gcnVuIHRoZSBDdXN0b21FbGVtZW50UmVnaXN0cnkuXG4gKiBTaW5jZSBSZWdpc3RyeSBpcyBuZXZlciBleHBvc2VkIGV4dGVybmFsbHksIGFsbCBtZXRob2RzIGFyZSBhY3R1YWxseVxuICogYXZhaWxhYmxlIG9uIHRoZSBpbnN0YW5jZS5cbiAqL1xuY2xhc3MgUmVnaXN0cnkge1xuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHdpbikge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIEBjb25zdFxuICAgICAqL1xuICAgIHRoaXMud2luXyA9IHdpbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIEBjb25zdFxuICAgICAqL1xuICAgIHRoaXMuZG9jXyA9IHdpbi5kb2N1bWVudDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgIUN1c3RvbUVsZW1lbnREZWY+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0XG4gICAgICovXG4gICAgdGhpcy5kZWZpbml0aW9uc18gPSB3aW4uT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8qKlxuICAgICAqIEEgdXAtdG8tZGF0ZSBET00gc2VsZWN0b3IgZm9yIGFsbCBjdXN0b20gZWxlbWVudHMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXJ5XyA9ICcnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnRseSB1cGdyYWRpbmcgZWxlbWVudC5cbiAgICAgKiBAcHJpdmF0ZSB7RWxlbWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5LWJlaW5nLXVwZ3JhZGVkIGN1c3RvbSBlbGVtZW50LlxuICAgKlxuICAgKiBXaGVuIGFuIGFscmVhZHkgY3JlYXRlZCAodGhyb3VnaCB0aGUgRE9NIHBhcnNpbmcgQVBJcywgb3IgaW5uZXJIVE1MKVxuICAgKiBjdXN0b20gZWxlbWVudCBub2RlIGlzIGJlaW5nIHVwZ3JhZGVkLCB3ZSBjYW4ndCBqdXN0IGNyZWF0ZSBhIG5ldyBub2RlXG4gICAqIChpdCdzIGlsbGVnYWwgaW4gdGhlIHNwZWMpLiBCdXQgd2Ugc3RpbGwgbmVlZCB0byBydW4gdGhlIGN1c3RvbSBlbGVtZW50J3NcbiAgICogY29uc3RydWN0b3IgY29kZSBvbiB0aGUgbm9kZS4gV2UgYXZvaWQgdGhpcyBjb251bmRydW0gYnkgcnVubmluZyB0aGVcbiAgICogY29uc3RydWN0b3Igd2hpbGUgcmV0dXJuaW5nIHRoaXMgY3VycmVudCBub2RlIGluIHRoZSBIVE1MRWxlbWVudFxuICAgKiBjbGFzcyBjb25zdHJ1Y3RvciAodGhlIGJhc2UgY2xhc3Mgb2YgYWxsIGN1c3RvbSBlbGVtZW50cykuXG4gICAqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBjdXJyZW50KCkge1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnRfO1xuICAgIHRoaXMuY3VycmVudF8gPSBudWxsO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBjdXN0b20gZWxlbWVudCBkZWZpbml0aW9uIGJ5IG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4ge0N1c3RvbUVsZW1lbnREZWZ8dW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0QnlOYW1lKG5hbWUpIHtcbiAgICBjb25zdCBkZWZpbml0aW9uID0gdGhpcy5kZWZpbml0aW9uc19bbmFtZV07XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgY3VzdG9tIGVsZW1lbnQgZGVmaW5pdGlvbiBieSBjb25zdHJ1Y3RvciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtDdXN0b21FbGVtZW50Q29uc3RydWN0b3JEZWZ9IGN0b3JcbiAgICogQHJldHVybiB7Q3VzdG9tRWxlbWVudERlZnx1bmRlZmluZWR9XG4gICAqL1xuICBnZXRCeUNvbnN0cnVjdG9yKGN0b3IpIHtcbiAgICBjb25zdCBkZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnNfO1xuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIGRlZmluaXRpb25zKSB7XG4gICAgICBjb25zdCBkZWYgPSBkZWZpbml0aW9uc1tuYW1lXTtcbiAgICAgIGlmIChkZWYuY3RvciA9PT0gY3Rvcikge1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIGN1c3RvbSBlbGVtZW50IGRlZmluaXRpb24sIGFuZCB1cGdyYWRlcyBhbGwgZWxlbWVudHMgYnkgdGhhdFxuICAgKiBuYW1lIGluIHRoZSByb290IGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0geyFDdXN0b21FbGVtZW50Q29uc3RydWN0b3JEZWZ9IGN0b3JcbiAgICogQHBhcmFtIHshT2JqZWN0fHVuZGVmaW5lZH0gb3B0aW9uc1xuICAgKi9cbiAgZGVmaW5lKG5hbWUsIGN0b3IsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7RXJyb3IsIFN5bnRheEVycm9yfSA9IHRoaXMud2luXztcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVuZGluZyBuYXRpdmUgY3VzdG9tIGVsZW1lbnRzIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG5cbiAgICBhc3NlcnRWYWxpZE5hbWUoU3ludGF4RXJyb3IsIG5hbWUpO1xuXG4gICAgaWYgKHRoaXMuZ2V0QnlOYW1lKG5hbWUpIHx8XG4gICAgICAgIHRoaXMuZ2V0QnlDb25zdHJ1Y3RvcihjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBkdXBsaWNhdGUgZGVmaW5pdGlvbiBcIiR7bmFtZX1cImApO1xuICAgIH1cblxuICAgIC8vIFRPRE8oanJpZGdld2VsbCk6IFJlY29yZCBjb25uZWN0ZWRDYWxsYmFjaywgZGlzY29ubmVjdGVkQ2FsbGJhY2ssXG4gICAgLy8gYWRvcHRlZENhbGxiYWNrLCBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2ssIGFuZCBvYnNlcnZlZEF0dHJpYnV0ZXMuXG4gICAgLy8gVE9ETyhqcmlkZ2V3ZWxsKTogSWYgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLCBnYXRoZXIgb2JzZXJ2ZWRBdHRyaWJ1dGVzXG4gICAgdGhpcy5kZWZpbml0aW9uc19bbmFtZV0gPSB7XG4gICAgICBuYW1lLFxuICAgICAgY3RvcixcbiAgICB9O1xuXG4gICAgdGhpcy5vYnNlcnZlXyhuYW1lKTtcbiAgICB0aGlzLnVwZ3JhZGUodGhpcy5kb2NfLCBuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGdyYWRlcyBjdXN0b20gZWxlbWVudHMgZGVzY2VuZGFudHMgb2Ygcm9vdCAoYnV0IG5vdCBpbmNsdWRpbmcgcm9vdCkuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYW4gb3B0X3F1ZXJ5LCBpdCBib3RoIHVwZ3JhZGVzIGFuZCBjb25uZWN0cyB0aGUgY3VzdG9tXG4gICAqIGVsZW1lbnRzICh0aGlzIGlzIHVzZWQgZHVyaW5nIHRoZSBjdXN0b20gZWxlbWVudCBkZWZpbmUgYWxnb3JpdGhtKS5cbiAgICpcbiAgICogQHBhcmFtIHshTm9kZX0gcm9vdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9xdWVyeVxuICAgKi9cbiAgdXBncmFkZShyb290LCBvcHRfcXVlcnkpIHtcbiAgICAvLyBPbmx5IEN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wLmRlZmluZSBwcm92aWRlcyBhIHF1ZXJ5ICh0aGUgbmV3bHkgZGVmaW5lZFxuICAgIC8vIGN1c3RvbSBlbGVtZW50KS4gSW4gdGhpcyBjYXNlLCB3ZSBhcmUgYm90aCB1cGdyYWRpbmcgX2FuZF8gY29ubmVjdGluZ1xuICAgIC8vIHRoZSBjdXN0b20gZWxlbWVudHMuXG4gICAgY29uc3QgbmV3bHlEZWZpbmVkID0gISFvcHRfcXVlcnk7XG4gICAgY29uc3QgcXVlcnkgPSBvcHRfcXVlcnkgfHwgdGhpcy5xdWVyeV87XG4gICAgY29uc3QgdXBncmFkZUNhbmRpZGF0ZXMgPSB0aGlzLnF1ZXJ5QWxsXyhyb290LCBxdWVyeSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwZ3JhZGVDYW5kaWRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjYW5kaWRhdGUgPSB1cGdyYWRlQ2FuZGlkYXRlc1tpXTtcbiAgICAgIGlmIChuZXdseURlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFja18oY2FuZGlkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBncmFkZVNlbGYoY2FuZGlkYXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBncmFkZXMgdGhlIGN1c3RvbSBlbGVtZW50IG5vZGUsIGlmIGEgY3VzdG9tIGVsZW1lbnQgaGFzIGJlZW4gcmVnaXN0ZXJlZFxuICAgKiBieSB0aGlzIG5hbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICovXG4gIHVwZ3JhZGVTZWxmKG5vZGUpIHtcbiAgICBjb25zdCBkZWYgPSB0aGlzLmdldEJ5TmFtZShub2RlLmxvY2FsTmFtZSk7XG4gICAgaWYgKCFkZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnVwZ3JhZGVTZWxmXygvKiogQHR5cGUgeyFFbGVtZW50fSAqLyhub2RlKSwgZGVmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFOb2RlfSByb290XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuICAgKiBAcmV0dXJuIHshQXJyYXl8IU5vZGVMaXN0fVxuICAgKi9cbiAgcXVlcnlBbGxfKHJvb3QsIHF1ZXJ5KSB7XG4gICAgaWYgKCFxdWVyeSB8fCAhcm9vdC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvLi4uXG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3QucXVlcnlTZWxlY3RvckFsbChxdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogVXBncmFkZXMgdGhlIChhbHJlYWR5IGNyZWF0ZWQgdmlhIERPTSBwYXJzaW5nKSBjdXN0b20gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0geyFDdXN0b21FbGVtZW50RGVmfSBkZWZcbiAgICovXG4gIHVwZ3JhZGVTZWxmXyhub2RlLCBkZWYpIHtcbiAgICBjb25zdCB7Y3Rvcn0gPSBkZWY7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBjdG9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVzcGl0ZSBob3cgaXQgbG9va3MsIHRoaXMgaXMgbm90IGEgdXNlbGVzcyBjb25zdHJ1Y3Rpb24uXG4gICAgLy8gSFRNTEVsZW1lbnRQb2x5ZmlsbCAodGhlIGJhc2UgY2xhc3Mgb2YgYWxsIGN1c3RvbSBlbGVtZW50cykgd2lsbCByZXR1cm5cbiAgICAvLyB0aGUgY3VycmVudCBub2RlLCBhbGxvd2luZyB0aGUgY3VzdG9tIGVsZW1lbnQncyBzdWJjbGFzcyBjb25zdHJ1Y3RvciB0b1xuICAgIC8vIHJ1biBvbiB0aGUgbm9kZS4gVGhlIG5vZGUgaXRzZWxmIGlzIGFscmVhZHkgY29uc3RydWN0ZWQsIHNvIHRoZSByZXR1cm5cbiAgICAvLyB2YWx1ZSBpcyBqdXN0IHRoZSBub2RlLlxuICAgIHRoaXMuY3VycmVudF8gPSBub2RlO1xuICAgIGNvbnN0IGVsID0gbmV3IGN0b3IoKTtcblxuICAgIGlmIChlbCAhPT0gbm9kZSkge1xuICAgICAgdGhyb3cgbmV3IHRoaXMud2luXy5FcnJvcihcbiAgICAgICAgICAnQ29uc3RydWN0b3IgaWxsZWdhbGx5IHJldHVybmVkIGEgZGlmZmVyZW50IGluc3RhbmNlLicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlcyBjb25uZWN0ZWRDYWxsYmFjayBvbiB0aGUgY3VzdG9tIGVsZW1lbnQsIGlmIGl0IGhhcyBvbmUuXG4gICAqIFRoaXMgYWxzbyB1cGdyYWRlcyB0aGUgY3VzdG9tIGVsZW1lbnQsIHNpbmNlIGl0IG1heSBub3QgaGF2ZSBiZWVuXG4gICAqIGFjY2Vzc2libGUgdmlhIHRoZSByb290IGRvY3VtZW50IGJlZm9yZSAoYSBkZXRhY2hlZCBET00gdHJlZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICovXG4gIGNvbm5lY3RlZENhbGxiYWNrXyhub2RlKSB7XG4gICAgY29uc3QgZGVmID0gdGhpcy5nZXRCeU5hbWUobm9kZS5sb2NhbE5hbWUpO1xuICAgIGlmICghZGVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudXBncmFkZVNlbGZfKC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovKG5vZGUpLCBkZWYpO1xuICAgIC8vIFRPRE8oanJpZGdld2VsbCk6IEl0IG1heSBiZSBhcHByb3ByaWF0ZSB0byBhZG9wdENhbGxiYWNrLCBpZiB0aGUgbm9kZVxuICAgIC8vIHVzZWQgdG8gYmUgaW4gYW5vdGhlciBkb2MuXG4gICAgLy8gVE9ETyhqcmlkZ2V3ZWxsKTogSSBzaG91bGQgYmUgY2FsbGluZyB0aGUgZGVmaW5pdGlvbnMgY29ubmVjdGVkQ2FsbGJhY2tcbiAgICAvLyB3aXRoIG5vZGUgYXMgdGhlIGNvbnRleHQuXG4gICAgaWYgKG5vZGUuY29ubmVjdGVkQ2FsbGJhY2spIHtcbiAgICAgIG5vZGUuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgZGlzY29ubmVjdGVkQ2FsbGJhY2sgb24gdGhlIGN1c3RvbSBlbGVtZW50LCBpZiBpdCBoYXMgb25lLlxuICAgKlxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFja18obm9kZSkge1xuICAgIC8vIFRPRE8oanJpZGdld2VsbCk6IEkgc2hvdWxkIGJlIGNhbGxpbmcgdGhlIGRlZmluaXRpb25zIGNvbm5lY3RlZENhbGxiYWNrXG4gICAgLy8gd2l0aCBub2RlIGFzIHRoZSBjb250ZXh0LlxuICAgIGlmIChub2RlLmRpc2Nvbm5lY3RlZENhbGxiYWNrKSB7XG4gICAgICBub2RlLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlY29yZHMgbmFtZSBhcyBhIHJlZ2lzdGVyZWQgY3VzdG9tIGVsZW1lbnQgdG8gb2JzZXJ2ZS5cbiAgICpcbiAgICogU3RhcnRzIHRoZSBNdXRhdGlvbiBPYnNlcnZlciBpZiB0aGlzIGlzIHRoZSBmaXJzdCByZWdpc3RlcmVkIGN1c3RvbVxuICAgKiBlbGVtZW50LiBUaGlzIGlzIGRlZmVycmVkIHVudGlsIHRoZSBmaXJzdCBjdXN0b20gZWxlbWVudCBpcyBkZWZpbmVkIHRvXG4gICAqIHNwZWVkIHVwIGluaXRpYWwgcmVuZGVyaW5nIG9mIHRoZSBwYWdlLlxuICAgKlxuICAgKiBNdXRhdGlvbiBPYnNlcnZlcnMgYXJlIGNvbnZlbmllbnRseSBhdmFpbGFibGUgaW4gZXZlcnkgYnJvd3NlciB3ZSBjYXJlXG4gICAqIGFib3V0LiBXaGVuIGEgbm9kZSBpcyBjb25uZWN0ZWQgdG8gdGhlIHJvb3QgZG9jdW1lbnQsIGFsbCBjdXN0b21cbiAgICogZWxlbWVudHMgKGluY2x1ZGluZyB0aGF0IG5vZGUgaXRlc2VsZikgd2lsbCBiZSB1cGdyYWRlZCBhbmQgY2FsbFxuICAgKiBjb25uZWN0ZWRDYWxsYmFjay4gV2hlbiBhIG5vZGUgaXMgZGlzY29ubmVjdGVkQ2FsbGJhY2sgZnJvbSB0aGUgcm9vdFxuICAgKiBkb2N1bWVudCwgYWxsIGN1c3RvbSBlbGVtZW50cyB3aWxsIGNhbGwgZGlzY29ubmVjdGVkQ2FsbGJhY2suXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBvYnNlcnZlXyhuYW1lKSB7XG4gICAgaWYgKHRoaXMucXVlcnlfKSB7XG4gICAgICB0aGlzLnF1ZXJ5XyArPSBgLCR7bmFtZX1gO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucXVlcnlfID0gbmFtZTtcblxuICAgIC8vIFRoZSBmaXJzdCByZWdpc3RlcmVkIG5hbWUgc3RhcnRzIHRoZSBtdXRhdGlvbiBvYnNlcnZlci5cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyB0aGlzLndpbl8uTXV0YXRpb25PYnNlcnZlcihyZWNvcmRzID0+IHtcbiAgICAgIGlmIChyZWNvcmRzKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVjb3Jkc18ocmVjb3Jkcyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmRvY18sIHtcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGFsbCB0aGUgTXV0YXRpb24gT2JzZXJ2ZXIncyBNdXRhdGlvbiBSZWNvcmRzLlxuICAgKiBBbGwgYWRkZWQgY3VzdG9tIGVsZW1lbnRzIHdpbGwgYmUgdXBncmFkZWQgKGlmIG5vdCBhbHJlYWR5KSBhbmQgY2FsbFxuICAgKiBjb25uZWN0ZWRDYWxsYmFjay4gQWxsIHJlbW92ZWQgY3VzdG9tIGVsZW1lbnRzIHdpbGwgY2FsbFxuICAgKiBkaXNjb25uZWN0ZWRDYWxsYmFjay5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8IU11dGF0aW9uUmVjb3JkPn0gcmVjb3Jkc1xuICAgKi9cbiAgaGFuZGxlUmVjb3Jkc18ocmVjb3Jkcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVjb3JkID0gcmVjb3Jkc1tpXTtcbiAgICAgIGlmICghcmVjb3JkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7YWRkZWROb2RlcywgcmVtb3ZlZE5vZGVzfSA9IHJlY29yZDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBub2RlID0gYWRkZWROb2Rlc1tpXTtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkQ2FuZGlkYXRlcyA9IHRoaXMucXVlcnlBbGxfKG5vZGUsIHRoaXMucXVlcnlfKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFja18obm9kZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29ubmVjdGVkQ2FuZGlkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRoaXMuY29ubmVjdGVkQ2FsbGJhY2tfKGNvbm5lY3RlZENhbmRpZGF0ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSByZW1vdmVkTm9kZXNbaV07XG4gICAgICAgIGNvbnN0IGRpc2Nvbm5lY3RlZENhbmRpZGF0ZXMgPSB0aGlzLnF1ZXJ5QWxsXyhub2RlLCB0aGlzLnF1ZXJ5Xyk7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdGVkQ2FsbGJhY2tfKG5vZGUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpc2Nvbm5lY3RlZENhbmRpZGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZENhbGxiYWNrXyhkaXNjb25uZWN0ZWRDYW5kaWRhdGVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERvZXMgdGhlIHBvbHlmaWxsaW5nLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZnVuY3Rpb24gcG9seWZpbGwod2luKSB7XG4gIGNvbnN0IHtIVE1MRWxlbWVudCwgRWxlbWVudCwgTm9kZSwgRG9jdW1lbnQsIE9iamVjdCwgZG9jdW1lbnR9ID0gd2luO1xuICBjb25zdCB7Y3JlYXRlRWxlbWVudCwgY2xvbmVOb2RlLCBpbXBvcnROb2RlfSA9IGRvY3VtZW50O1xuXG4gIGNvbnN0IHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KHdpbik7XG4gIGNvbnN0IGN1c3RvbUVsZW1lbnRzID0gbmV3IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSh3aW4sIHJlZ2lzdHJ5KTtcblxuICAvLyBFeHBvc2UgdGhlIGN1c3RvbSBlbGVtZW50IHJlZ2lzdHJ5LlxuICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2N1c3RvbUVsZW1lbnRzJylcbiAgLy8ge2dldDogxpIsIHNldDogdW5kZWZpbmVkLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW4sICdjdXN0b21FbGVtZW50cycsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAvLyB3cml0YWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGN1c3RvbUVsZW1lbnRzLFxuICB9KTtcblxuICAvLyBQYXRjaCBjcmVhdGVFbGVtZW50IHRvIGltbWVkaWF0ZWx5IHVwZ3JhZGUgdGhlIGN1c3RvbSBlbGVtZW50LlxuICAvLyBUaGlzIGhhcyB0aGUgYWRkZWQgYmVuZWZpdCB0aGF0IGl0IGF2b2lkcyB0aGUgXCJhbHJlYWR5IGNyZWF0ZWQgYnV0IG5lZWRzXG4gIC8vIGNvbnN0cnVjdG9yIGNvZGUgcnVuXCIgY2hpY2tlbi1hbmQtZWdnIHByb2JsZW0uXG4gIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudFBvbHlmaWxsKG5hbWUpIHtcbiAgICBjb25zdCBkZWYgPSByZWdpc3RyeS5nZXRCeU5hbWUobmFtZSk7XG4gICAgaWYgKGRlZikge1xuICAgICAgcmV0dXJuIG5ldyBkZWYuY3RvcigpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIC8vIFBhdGNoIGltcG9ydE5vZGUgdG8gaW1tZWRpYXRlbHkgdXBncmFkZSBjdXN0b20gZWxlbWVudHMuXG4gIC8vIFRPRE8oanJpZGdld2VsbCk6IENhbiBmaXJlIGFkb3B0ZWRDYWxsYmFjayBmb3IgY3Jvc3MgZG9jIGltcG9ydHMuXG4gIERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlID0gZnVuY3Rpb24gaW1wb3J0Tm9kZVBvbHlmaWxsKCkge1xuICAgIGNvbnN0IGltcG9ydGVkID0gaW1wb3J0Tm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpbXBvcnRlZCkge1xuICAgICAgcmVnaXN0cnkudXBncmFkZVNlbGYoaW1wb3J0ZWQpO1xuICAgICAgcmVnaXN0cnkudXBncmFkZShpbXBvcnRlZCk7XG4gICAgfVxuICAgIHJldHVybiBpbXBvcnRlZDtcbiAgfTtcblxuICAvLyBQYXRjaCBjbG9uZU5vZGUgdG8gaW1tZWRpYXRlbHkgdXBncmFkZSBjdXN0b20gZWxlbWVudHMuXG4gIE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uIGNsb25lTm9kZVBvbHlmaWxsKCkge1xuICAgIGNvbnN0IGNsb25lZCA9IGNsb25lTm9kZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHJlZ2lzdHJ5LnVwZ3JhZGVTZWxmKGNsb25lZCk7XG4gICAgcmVnaXN0cnkudXBncmFkZShjbG9uZWQpO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH07XG5cbiAgLy8gUGF0Y2ggdGhlIGlubmVySFRNTCBzZXR0ZXIgdG8gaW1tZWRpYXRlbHkgdXBncmFkZSBjdXN0b20gZWxlbWVudHMuXG4gIC8vIE5vdGUsIHRoaXMgY291bGQgdGVjaG5pY2FsbHkgZmlyZSBjb25uZWN0ZWRDYWxsYmFja3MgaWYgdGhpcyBub2RlIHdhc1xuICAvLyBjb25uZWN0ZWQsIGJ1dCB3ZSBsZWF2ZSB0aGF0IHRvIHRoZSBNdXRhdGlvbiBPYnNlcnZlci5cbiAgY29uc3QgaW5uZXJIVE1MRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRWxlbWVudC5wcm90b3R5cGUsXG4gICAgICAnaW5uZXJIVE1MJyk7XG4gIGNvbnN0IGlubmVySFRNTFNldHRlciA9IGlubmVySFRNTERlc2Muc2V0O1xuICBpbm5lckhUTUxEZXNjLnNldCA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICBpbm5lckhUTUxTZXR0ZXIuY2FsbCh0aGlzLCBodG1sKTtcbiAgICByZWdpc3RyeS51cGdyYWRlKHRoaXMpO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudC5wcm90b3R5cGUsICdpbm5lckhUTUwnLCBpbm5lckhUTUxEZXNjKTtcblxuICAvKipcbiAgICogWW91IGNhbid0IHVzZSB0aGUgcmVhbCBIVE1MRWxlbWVudCBjb25zdHJ1Y3RvciwgYmVjYXVzZSB5b3UgY2FuJ3Qgc3ViY2xhc3NcbiAgICogaXQgd2l0aG91dCB1c2luZyBuYXRpdmUgY2xhc3Nlcy4gU28sIG1vY2sgaXRzIGFwcHJveGltYXRpb24gdXNpbmdcbiAgICogY3JlYXRlRWxlbWVudC5cbiAgICovXG4gIGZ1bmN0aW9uIEhUTUxFbGVtZW50UG9seWZpbGwoKSB7XG4gICAgY29uc3Qge2NvbnN0cnVjdG9yfSA9IHRoaXM7XG5cbiAgICAvLyBJZiB3ZSdyZSB1cGdyYWRpbmcgYW4gYWxyZWFkeSBjcmVhdGVkIGN1c3RvbSBlbGVtZW50LCB3ZSBjYW4ndCBjcmVhdGVcbiAgICAvLyBhbm90aGVyIG5ldyBub2RlIChieSB0aGUgc3BlYywgaXQgbXVzdCBiZSB0aGUgc2FtZSBub2RlKS5cbiAgICBsZXQgZWwgPSByZWdpc3RyeS5jdXJyZW50KCk7XG5cbiAgICAvLyBJZiB0aGVyZSdzIG5vdCBhIGFscmVhZHkgY3JlYXRlZCBjdXN0b20gZWxlbWVudCwgd2UncmUgYmVpbmcgaW52b2tlZCB2aWFcbiAgICAvLyBgbmV3YGluZyB0aGUgY29uc3RydWN0b3IuXG4gICAgLy9cbiAgICAvLyBUZWNobmljYWxseSwgd2UgY291bGQgZ2V0IGhlcmUgdmlhIGNyZWF0ZUVsZW1lbnQsIGJ1dCB3ZSBwYXRjaGVkIHRoYXQuXG4gICAgLy8gSWYgaXQgdGhlIGN1c3RvbSBlbGVtZW50IHdhcyByZWdpc3RlcmVkLCB0aGUgcGF0Y2ggdHVybmVkIGl0IGludG8gYVxuICAgIC8vIGBuZXdgIGNhbGwuXG4gICAgLy8gSWYgaXQgd2FzIG5vdCByZWdpc3RlcmVkLCB0aGUgbmF0aXZlIGNyZWF0ZUVsZW1lbnQgaXMgdXNlZC4gQW5kIGlmXG4gICAgLy8gbmF0aXZlIGNyZWF0ZUVsZW1lbnQgaXMgYmVpbmcgdXNlZCBhbmQgd2UgZ290IHRvIHRoaXMgY29kZSwgd2UncmUgcmVhbGx5XG4gICAgLy8gaW4gYW4gaW5maW5pdGUgbG9vcCAoYSBuYXRpdmUgY3JlYXRlRWxlbWVudCBjYWxsIGp1c3QgYmVsb3cpIHNvIHdlJ3ZlXG4gICAgLy8gZ290IGJpZ2dlciBwcm9ibGVtcy5cbiAgICAvL1xuICAgIC8vIFNvIGp1c3QgdGFrZSBteSB3b3JkIHdlIGdvdCBoZXJlIHZpYSBgbmV3YC5cbiAgICBpZiAoIWVsKSB7XG4gICAgICAvLyBUaGUgY3VzdG9tIGVsZW1lbnQgZGVmaW5pdGlvbiBpcyBhbiBpbnZhcmlhbnQuIElmIHRoZSBjdXN0b20gZWxlbWVudFxuICAgICAgLy8gaXMgcmVnaXN0ZXJlZCwgZXZlcnl0aGluZyB3b3Jrcy4gSWYgaXQncyBub3QsIGl0IHRocm93cyBpbiB0aGUgbWVtYmVyXG4gICAgICAvLyBwcm9wZXJ0eSBhY2Nlc3MgKG9ubHkgZGVmaW5lZCBjdXN0b20gZWxlbWVudHMgY2FuIGJlIGRpcmVjdGx5XG4gICAgICAvLyBjb25zdHJ1Y3RlZCB2aWEgYG5ld2ApLlxuICAgICAgY29uc3QgZGVmID0gcmVnaXN0cnkuZ2V0QnlDb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvcik7XG4gICAgICBlbCA9IGNyZWF0ZUVsZW1lbnQuY2FsbChkb2N1bWVudCwgZGVmLm5hbWUpO1xuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGlmIHRoZSBub2RlIHdhcyBhbHJlYWR5IGNvbnN0cnVjdGVkLCB3ZSBuZWVkIHRvIHJlc2V0IGl0J3NcbiAgICAvLyBwcm90b3R5cGUgdG8gdGhlIGN1c3RvbSBlbGVtZW50IHByb3RvdHlwZS4gQW5kIGlmIGl0IHdhc24ndCBhbHJlYWR5XG4gICAgLy8gY29uc3RydWN0ZWQsIHdlIGNyZWF0ZWQgYSBuZXcgbm9kZSB2aWEgbmF0aXZlIGNyZWF0ZUVsZW1lbnQsIGFuZCB3ZSBuZWVkXG4gICAgLy8gdG8gcmVzZXQgaXQncyBwcm90b3R5cGUuIEJhc2ljYWxseSBhbHdheXMgcmVzZXQgdGhlIHByb3RvdHlwZS5cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZWwsIGNvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIHN1YkNsYXNzKE9iamVjdCwgSFRNTEVsZW1lbnQsIEhUTUxFbGVtZW50UG9seWZpbGwpO1xuXG4gIC8vIEV4cG9zZSB0aGUgcG9seWZpbGxlZCBIVE1MRWxlbWVudCBjb25zdHJ1Y3RvciBmb3IgZXZlcnlvbmUgdG8gZXh0ZW5kIGZyb20uXG4gIHdpbi5IVE1MRWxlbWVudCA9IEhUTUxFbGVtZW50UG9seWZpbGw7XG59XG5cbi8qKlxuICogV3JhcHMgSFRNTEVsZW1lbnQgaW4gYSBSZWZsZWN0LmNvbnN0cnVjdCBjb25zdHJ1Y3Rvciwgc28gdGhhdCB0cmFuc3BpbGVkXG4gKiBjbGFzc2VzIGNhbiBgX3RoaXMgPSBzdXBlckNsYXNzLmNhbGwodGhpcylgIGR1cmluZyB0aGVpciBjb25zdHJ1Y3Rpb24uXG4gKlxuICogVGhpcyBpcyBvbmx5IHVzZWQgd2hlbiBDdXN0b20gRWxlbWVudHMgdjEgaXMgYWxyZWFkeSBhdmFpbGFibGUgX2FuZF8gd2UncmVcbiAqIHVzaW5nIHRyYW5zcGlsZWQgY2xhc3NlcyAod2hpY2ggdXNlIEVTNSBjb25zdHJ1Y3Rpb24gaWRpb21zKS5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICovXG5mdW5jdGlvbiB3cmFwSFRNTEVsZW1lbnQod2luKSB7XG4gIGNvbnN0IHtIVE1MRWxlbWVudCwgUmVmbGVjdCwgT2JqZWN0fSA9IHdpbjtcbiAgLyoqXG4gICAqL1xuICBmdW5jdGlvbiBIVE1MRWxlbWVudFdyYXBwZXIoKSB7XG4gICAgY29uc3QgY3RvciA9IC8qKiBAdHlwZSB7ZnVuY3Rpb24oLi4uPyk6P3x1bmRlZmluZWR9ICovKFxuICAgICAgLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovKHRoaXMpLmNvbnN0cnVjdG9yKTtcblxuICAgIC8vIFJlZmxlY3QuY29uc3RydWN0IGFsbG93cyB1cyB0byBjb25zdHJ1Y3QgYSBuZXcgSFRNTEVsZW1lbnQgd2l0aG91dCB1c2luZ1xuICAgIC8vIGBuZXdgICh3aGljaCB3aWxsIGFsd2F5cyBmYWlsIGJlY2F1c2UgbmF0aXZlIEhUTUxFbGVtZW50IGlzIGEgcmVzdHJpY3RlZFxuICAgIC8vIGNvbnN0cnVjdG9yKS5cbiAgICByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QoSFRNTEVsZW1lbnQsIFtdLCBjdG9yKTtcbiAgfVxuICBzdWJDbGFzcyhPYmplY3QsIEhUTUxFbGVtZW50LCBIVE1MRWxlbWVudFdyYXBwZXIpO1xuXG4gIC8vIEV4cG9zZSB0aGUgd3JhcHBlZCBIVE1MRWxlbWVudCBjb25zdHJ1Y3RvciBmb3IgZXZlcnlvbmUgdG8gZXh0ZW5kIGZyb20uXG4gIHdpbi5IVE1MRWxlbWVudCA9IEhUTUxFbGVtZW50V3JhcHBlcjtcbn1cblxuLyoqXG4gKiBTZXR1cHMgdXAgcHJvdG90eXBlIGluaGVyaXRhbmNlXG4gKlxuICogQHBhcmFtIHshT2JqZWN0fSBPYmplY3RcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBzdXBlckNsYXNzXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gc3ViQ2xhc3NcbiAqL1xuZnVuY3Rpb24gc3ViQ2xhc3MoT2JqZWN0LCBzdXBlckNsYXNzLCBzdWJDbGFzcykge1xuICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN1cGVyQ2xhc3MucHJvdG90eXBlLCAnY29uc3RydWN0b3InKVxuICAvLyB7dmFsdWU6IMaSLCB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZX1cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAvLyBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIFBvbHlmaWxscyBDdXN0b20gRWxlbWVudHMgdjEgQVBJLiBUaGlzIGhhcyA0IG1vZGVzOlxuICpcbiAqIDEuIEN1c3RvbSBlbGVtZW50cyB2MSBhbHJlYWR5IHN1cHBvcnRlZCwgdXNpbmcgbmF0aXZlIGNsYXNzZXNcbiAqIDIuIEN1c3RvbSBlbGVtZW50cyB2MSBhbHJlYWR5IHN1cHBvcnRlZCwgdXNpbmcgdHJhbnNwaWxlZCBjbGFzc2VzXG4gKiAzLiBDdXN0b20gZWxlbWVudHMgdjEgbm90IHN1cHBvcnRlZCwgdXNpbmcgbmF0aXZlIGNsYXNzZXNcbiAqIDQuIEN1c3RvbSBlbGVtZW50cyB2MSBub3Qgc3VwcG9ydGVkLCB1c2luZyB0cmFuc3BpbGVkIGNsYXNzZXNcbiAqXG4gKiBJbiBtb2RlIDEsIG5vdGhpbmcgaXMgZG9uZS4gSW4gbW9kZSAyLCBhIG1pbmltYWwgcG9seWZpbGwgaXMgdXNlZCB0byBzdXBwb3J0XG4gKiBleHRlbmRpbmcgdGhlIEhUTUxFbGVtZW50IGJhc2UgY2xhc3MuIEluIG1vZGUgMyBhbmQgNCwgYSBmdWxsIHBvbHlmaWxsIGlzXG4gKiBkb25lLlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0geyFGdW5jdGlvbn0gY3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbCh3aW4sIGN0b3IpIHtcbiAgaWYgKGlzUGF0Y2hlZCh3aW4pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGluc3RhbGwgPSB0cnVlO1xuICBsZXQgaW5zdGFsbFdyYXBwZXIgPSBmYWxzZTtcblxuICBpZiAoaGFzQ3VzdG9tRWxlbWVudHMod2luKSkge1xuICAgIC8vIElmIGN0b3IgaXMgY29uc3RydWN0YWJsZSB3aXRob3V0IG5ldywgaXQncyBhIGZ1bmN0aW9uLiBUaGF0IG1lYW5zIGl0IHdhc1xuICAgIC8vIGNvbXBpbGVkIGRvd24sIGFuZCB3ZSBuZWVkIHRvIGRvIHRoZSBtaW5pbWFsIHBvbHlmaWxsIGJlY2F1c2UgYWxsIHlvdVxuICAgIC8vIGNhbm5vdCBleHRlbmQgSFRNTEVsZW1lbnQgd2l0aG91dCBuYXRpdmUgY2xhc3Nlcy5cbiAgICB0cnkge1xuICAgICAgY29uc3Qge09iamVjdCwgUmVmbGVjdH0gPSB3aW47XG5cbiAgICAgIC8vIFwiQ29uc3RydWN0XCIgY3RvciB1c2luZyBFUzUgaWRpb21zXG4gICAgICBjb25zdCBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY3Rvci5wcm90b3R5cGUpO1xuICAgICAgY3Rvci5jYWxsKGluc3RhbmNlKTtcblxuICAgICAgLy8gSWYgdGhhdCBzdWNjZWVkZWQsIHdlJ3JlIGluIGEgdHJhbnNwaWxlZCBlbnZpcm9ubWVudFxuICAgICAgLy8gTGV0J3MgZmluZCBvdXQgaWYgd2UgY2FuIHdyYXAgSFRNTEVsZW1lbnQgYW5kIGF2b2lkIGEgZnVsbCBwYXRjaC5cbiAgICAgIGluc3RhbGxXcmFwcGVyID0gISEoUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCk7XG4gICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAvLyBUaGUgY3RvciB0aHJldyB3aGVuIHdlIGNvbnN0cnVjdGVkIGlzIHZpYSBFUzUsIHNvIGl0J3MgYSByZWFsIGNsYXNzLlxuICAgICAgLy8gV2UncmUgb2sgdG8gbm90IGluc3RhbGwgdGhlIHBvbHlmaWxsLlxuICAgICAgaW5zdGFsbCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbnN0YWxsV3JhcHBlcikge1xuICAgIHdyYXBIVE1MRWxlbWVudCh3aW4pO1xuICB9IGVsc2UgaWYgKGluc3RhbGwpIHtcbiAgICBwb2x5ZmlsbCh3aW4pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBgZG9jdW1lbnQuY29udGFpbnMoKWAgbWV0aG9kLiBOb3RpY2UgdGhhdCBhY2NvcmRpbmcgdG8gc3BlY1xuICogYGRvY3VtZW50LmNvbnRhaW5zYCBpcyBpbmNsdXNpb25hcnkuXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvY29udGFpbnNcbiAqIEBwYXJhbSB7P05vZGV9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKiBAdGhpcyB7Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZG9jdW1lbnRDb250YWluc1BvbHlmaWxsKG5vZGUpIHtcbiAgLy8gUGVyIHNwZWMsIFwiY29udGFpbnNcIiBtZXRob2QgaXMgaW5jbHVzaW9uYXJ5XG4gIC8vIGkuZS4gYG5vZGUuY29udGFpbnMobm9kZSkgPT0gdHJ1ZWAuIEhvd2V2ZXIsIHdlIHN0aWxsIG5lZWQgdG8gdGVzdFxuICAvLyBlcXVhbGl0eSB0byB0aGUgZG9jdW1lbnQgaXRzZWxmLlxuICByZXR1cm4gbm9kZSA9PSB0aGlzIHx8IHRoaXMuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKG5vZGUpO1xufVxuXG5cbi8qKlxuICogUG9seWZpbGxzIGBIVE1MRG9jdW1lbnQuY29udGFpbnNgIEFQSS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsKHdpbikge1xuICAvLyBIVE1MRG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLCBidXQgaXQgaGFzIERvY3VtZW50LFxuICAvLyBzbyB3ZSB1c2UgdGhhdCBhcyBhIGZhbGxiYWNrLlxuICBjb25zdCBkb2N1bWVudENsYXNzID0gd2luLkhUTUxEb2N1bWVudCB8fCB3aW4uRG9jdW1lbnQ7XG4gIGlmICghZG9jdW1lbnRDbGFzcy5wcm90b3R5cGUuY29udGFpbnMpIHtcbiAgICB3aW4uT2JqZWN0LmRlZmluZVByb3BlcnR5KGRvY3VtZW50Q2xhc3MucHJvdG90eXBlLCAnY29udGFpbnMnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGRvY3VtZW50Q29udGFpbnNQb2x5ZmlsbCxcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgYERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlKHRva2VuLCBvcHRfZm9yY2UpYCBtZXRob2QuIFRoaXNcbiAqIGlzIHNwZWNpYWxseSBpbXBvcnRhbnQgYmVjYXVzZSBJRSBkb2VzIG5vdCBzdXBwb3J0IGBvcHRfZm9yY2VgIGF0dHJpYnV0ZS4gU2VlXG4gKiBodHRwczovL2dvby5nbC9oZ0tOWVkgZm9yIGRldGFpbHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9mb3JjZVxuICogQHRoaXMge0RPTVRva2VuTGlzdH1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGRvbVRva2VuTGlzdFRvZ2dsZVBvbHlmaWxsKHRva2VuLCBvcHRfZm9yY2UpIHtcbiAgY29uc3QgcmVtb3ZlID0gb3B0X2ZvcmNlID09PSB1bmRlZmluZWQgPyB0aGlzLmNvbnRhaW5zKHRva2VuKSA6ICFvcHRfZm9yY2U7XG4gIGlmIChyZW1vdmUpIHtcbiAgICB0aGlzLnJlbW92ZSh0b2tlbik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWRkKHRva2VuKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5cbi8qKlxuICogUG9seWZpbGxzIGBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZWAgQVBJIGluIElFLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmIChpc0llKHdpbikgJiYgd2luLkRPTVRva2VuTGlzdCkge1xuICAgIHdpbi5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luLkRPTVRva2VuTGlzdC5wcm90b3R5cGUsICd0b2dnbGUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGRvbVRva2VuTGlzdFRvZ2dsZVBvbHlmaWxsLFxuICAgIH0pO1xuICB9XG59XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBjdXJyZW50IGJyb3dzZXIgaXMgYSBJRSBicm93c2VyLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSWUod2luKSB7XG4gIHJldHVybiAvVHJpZGVudHxNU0lFfElFTW9iaWxlL2kudGVzdCh3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgdGhlIG51bWJlciB4IGFuZCByZXR1cm5zIGl0cyBzaWduLiBGb3IgcG9zaXRpdmUgeCByZXR1cm5zIDEsIGZvclxuICogbmVnYXRpdmUsIC0xLiBGb3IgMCBhbmQgLTAsIHJldHVybnMgMCBhbmQgLTAgcmVzcGVjdGl2ZWx5LiBGb3IgYW55IG51bWJlclxuICogdGhhdCBwYXJzZXMgdG8gTmFOLCByZXR1cm5zIE5hTi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbih4KSB7XG4gIHggPSBOdW1iZXIoeCk7XG5cbiAgLy8gSWYgeCBpcyAwLCAtMCwgb3IgTmFOLCByZXR1cm4gaXQuXG4gIGlmICgheCkge1xuICAgIHJldHVybiB4O1xuICB9XG5cbiAgcmV0dXJuIHggPiAwID8gMSA6IC0xO1xufVxuXG5cbi8qKlxuICogU2V0cyB0aGUgTWF0aC5zaWduIHBvbHlmaWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLk1hdGguc2lnbikge1xuICAgIHdpbi5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luLk1hdGgsICdzaWduJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBzaWduLFxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3Qge2hhc093blByb3BlcnR5fSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ29waWVzIHZhbHVlcyBvZiBhbGwgZW51bWVyYWJsZSBvd24gcHJvcGVydGllcyBmcm9tIG9uZSBvciBtb3JlIHNvdXJjZVxuICogb2JqZWN0cyAocHJvdmlkZWQgYXMgZXh0ZW5kZWQgYXJndW1lbnRzIHRvIHRoZSBmdW5jdGlvbikgdG8gYSB0YXJnZXQgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0gey4uLk9iamVjdH0gdmFyX2FyZ3NcbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCB2YXJfYXJncykge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dCA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBPYmplY3QuYXNzaWduIHBvbHlmaWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLk9iamVjdC5hc3NpZ24pIHtcbiAgICB3aW4uT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbi5PYmplY3QsICdhc3NpZ24nLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGFzc2lnbixcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdwcm9taXNlLXBqcy9wcm9taXNlJztcblxuLyoqXG4gKiBTZXRzIHRoZSBQcm9taXNlIHBvbHlmaWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGwod2luKSB7XG4gIGlmICghd2luLlByb21pc2UpIHtcbiAgICB3aW4uUHJvbWlzZSA9IC8qKiBAdHlwZSB7P30gKi8gKFByb21pc2UpO1xuICAgIC8vIEluIGJhYmVsIHRoZSAqIGV4cG9ydCBpcyBhbiBPYmplY3Qgd2l0aCBhIGRlZmF1bHQgcHJvcGVydHkuXG4gICAgLy8gSW4gY2xvc3VyZSBjb21waWxlciBpdCBpcyB0aGUgUHJvbWlzZSBmdW5jdGlvbiBpdHNlbGYuXG4gICAgaWYgKFByb21pc2UuZGVmYXVsdCkge1xuICAgICAgd2luLlByb21pc2UgPSBQcm9taXNlLmRlZmF1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNvcHkgdGhlIGluZGl2aWR1YWwgc3RhdGljIG1ldGhvZHMsIGJlY2F1c2UgY2xvc3VyZVxuICAgIC8vIGNvbXBpbGVyIGZsYXR0ZW5zIHRoZSBwb2x5ZmlsbCBuYW1lc3BhY2UuXG4gICAgd2luLlByb21pc2UucmVzb2x2ZSA9IFByb21pc2UucmVzb2x2ZTtcbiAgICB3aW4uUHJvbWlzZS5yZWplY3QgPSBQcm9taXNlLnJlamVjdDtcbiAgICB3aW4uUHJvbWlzZS5hbGwgPSBQcm9taXNlLmFsbDtcbiAgICB3aW4uUHJvbWlzZS5yYWNlID0gUHJvbWlzZS5yYWNlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcyc7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi9sb2cnO1xuaW1wb3J0IHtnZXRTZXJ2aWNlUHJvbWlzZX0gZnJvbSAnLi9zZXJ2aWNlJztcblxuLyoqXG4gKiBBIG1hcCBvZiBzZXJ2aWNlcyB0aGF0IGRlbGF5IHJlbmRlcmluZy4gVGhlIGtleSBpcyB0aGUgbmFtZSBvZiB0aGUgc2VydmljZVxuICogYW5kIHRoZSB2YWx1ZSBpcyBhIERPTSBxdWVyeSB3aGljaCBpcyB1c2VkIHRvIGNoZWNrIGlmIHRoZSBzZXJ2aWNlIGlzIG5lZWRlZFxuICogaW4gdGhlIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBEbyBub3QgYWRkIGEgc2VydmljZSB1bmxlc3MgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKlxuICogXFwgICBcXCAgLyAgXFwgIC8gICAvIC8gICBcXCAgICAgfCAgIF8gIFxcICAgICB8ICBcXCB8ICB8IHwgIHwgfCAgXFwgfCAgfCAgLyBfX19fX3xcbiAqICBcXCAgIFxcLyAgICBcXC8gICAvIC8gIF4gIFxcICAgIHwgIHxfKSAgfCAgICB8ICAgXFx8ICB8IHwgIHwgfCAgIFxcfCAgfCB8ICB8ICBfX1xuICogICBcXCAgICAgICAgICAgIC8gLyAgL19cXCAgXFwgICB8ICAgICAgLyAgICAgfCAgLiBgICB8IHwgIHwgfCAgLiBgICB8IHwgIHwgfF8gfFxuICogICAgXFwgICAgL1xcICAgIC8gLyAgX19fX18gIFxcICB8ICB8XFwgIFxcLS0tLS58ICB8XFwgICB8IHwgIHwgfCAgfFxcICAgfCB8ICB8X198IHxcbiAqICAgICBcXF9fLyAgXFxfXy8gL19fLyAgICAgXFxfX1xcIHwgX3wgYC5fX19fX3x8X198IFxcX198IHxfX3wgfF9ffCBcXF9ffCAgXFxfX19fX198XG4gKlxuICogVGhlIGVxdWl2YWxlbnQgb2YgdGhpcyBsaXN0IGlzIHVzZWQgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZyAoU1NSKSBhbmQgYW55XG4gKiBjaGFuZ2VzIG1hZGUgdG8gaXQgbXVzdCBiZSBtYWRlIGluIGNvb3JkaW5hdGlvbiB3aXRoIGNhY2hlcyB0aGF0IGltcGxlbWVudFxuICogU1NSLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBTU1Igc2VlIGJpdC5seS9hbXAtc3NyLlxuICpcbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IFNFUlZJQ0VTID0ge1xuICAnYW1wLWR5bmFtaWMtY3NzLWNsYXNzZXMnOiAnW2N1c3RvbS1lbGVtZW50PWFtcC1keW5hbWljLWNzcy1jbGFzc2VzXScsXG4gICd2YXJpYW50JzogJ2FtcC1leHBlcmltZW50JyxcbiAgJ2FtcC1zdG9yeSc6ICdhbXAtc3Rvcnlbc3RhbmRhbG9uZV0nLFxufTtcblxuLyoqXG4gKiBNYXhpbXVtIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBhbGwgZXh0ZW5zaW9ucyB0byBsb2FkIGJlZm9yZSBlcnJvcmluZy5cbiAqIEBjb25zdFxuICovXG5jb25zdCBMT0FEX1RJTUVPVVQgPSAzMDAwO1xuXG4vKipcbiAqIERldGVjdHMgYW55IHJlbmRlciBkZWxheWluZyBzZXJ2aWNlcyB0aGF0IGFyZSByZXF1aXJlZCBvbiB0aGUgcGFnZSwgYW5kXG4gKiByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGEgdGltZW91dC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhQXJyYXk8Kj4+fSByZXNvbHZlcyB0byBhbiBBcnJheSB0aGF0IGhhcyB0aGUgc2FtZSBsZW5ndGhcbiAqICAgICBhcyB0aGUgZGV0ZWN0ZWQgcmVuZGVyIGRlbGF5aW5nIHNlcnZpY2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWl0Rm9yU2VydmljZXMod2luKSB7XG4gIGNvbnN0IHByb21pc2VzID0gaW5jbHVkZWRTZXJ2aWNlcyh3aW4pLm1hcChzZXJ2aWNlID0+IHtcbiAgICByZXR1cm4gU2VydmljZXMudGltZXJGb3Iod2luKS50aW1lb3V0UHJvbWlzZShcbiAgICAgICAgTE9BRF9USU1FT1VULFxuICAgICAgICBnZXRTZXJ2aWNlUHJvbWlzZSh3aW4sIHNlcnZpY2UpLFxuICAgICAgICBgUmVuZGVyIHRpbWVvdXQgd2FpdGluZyBmb3Igc2VydmljZSAke3NlcnZpY2V9IHRvIGJlIHJlYWR5LmBcbiAgICApO1xuICB9KTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBhZ2UgaGFzIGEgcmVuZGVyIGRlbGF5aW5nIHNlcnZpY2UuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlbmRlckRlbGF5aW5nU2VydmljZXMod2luKSB7XG4gIHJldHVybiBpbmNsdWRlZFNlcnZpY2VzKHdpbikubGVuZ3RoID4gMDtcbn1cblxuLyoqXG4gKiBEZXRlY3RzIHdoaWNoLCBpZiBhbnksIHJlbmRlci1kZWxheWluZyBleHRlbnNpb25zIGFyZSBpbmNsdWRlZCBvbiB0aGUgcGFnZS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshQXJyYXk8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVkU2VydmljZXMod2luKSB7XG4gIC8qKiBAY29uc3QgeyFEb2N1bWVudH0gKi9cbiAgY29uc3QgZG9jID0gd2luLmRvY3VtZW50O1xuICBkZXYoKS5hc3NlcnQoZG9jLmJvZHkpO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhTRVJWSUNFUykuZmlsdGVyKHNlcnZpY2UgPT4ge1xuICAgIHJldHVybiBkb2MucXVlcnlTZWxlY3RvcihTRVJWSUNFU1tzZXJ2aWNlXSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBSZWdpc3RyYXRpb24gYW5kIGdldHRlciBmdW5jdGlvbnMgZm9yIEFNUCBzZXJ2aWNlcy5cbiAqXG4gKiBJbnZhcmlhbnQ6IFNlcnZpY2UgZ2V0dGVycyBuZXZlciByZXR1cm4gbnVsbCBmb3IgcmVnaXN0ZXJlZCBzZXJ2aWNlcy5cbiAqL1xuXG4vLyBzcmMvcG9seWZpbGxzLmpzIG11c3QgYmUgdGhlIGZpcnN0IGltcG9ydC5cbmltcG9ydCAnLi9wb2x5ZmlsbHMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHNvcnQtaW1wb3J0cy1lczYtYXV0b2ZpeC9zb3J0LWltcG9ydHMtZXM2XG5cbmltcG9ydCB7RGVmZXJyZWR9IGZyb20gJy4vdXRpbHMvcHJvbWlzZSc7XG5pbXBvcnQge2Rldn0gZnJvbSAnLi9sb2cnO1xuaW1wb3J0IHt0b1dpbn0gZnJvbSAnLi90eXBlcyc7XG5cblxuLyoqXG4gKiBIb2xkcyBpbmZvIGFib3V0IGEgc2VydmljZS5cbiAqIC0gb2JqOiBBY3R1YWwgc2VydmljZSBpbXBsZW1lbnRhdGlvbiB3aGVuIGF2YWlsYWJsZS5cbiAqIC0gcHJvbWlzZTogUHJvbWlzZSBmb3IgdGhlIG9iai5cbiAqIC0gcmVzb2x2ZTogRnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aXRoIHRoZSBvYmplY3QuXG4gKiAtIGNvbnRleHQ6IEFyZ3VtZW50IGZvciBjdG9yLCBlaXRoZXIgYSB3aW5kb3cgb3IgYW4gYW1wZG9jLlxuICogLSBjdG9yOiBGdW5jdGlvbiB0aGF0IGNvbnN0cnVjdHMgYW5kIHJldHVybnMgdGhlIHNlcnZpY2UuXG4gKiBAdHlwZWRlZiB7e1xuICogICBvYmo6ICg/T2JqZWN0KSxcbiAqICAgcHJvbWlzZTogKD9Qcm9taXNlKSxcbiAqICAgcmVzb2x2ZTogKD9mdW5jdGlvbighT2JqZWN0KSksXG4gKiAgIGNvbnRleHQ6ICg/V2luZG93fD8uL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jKSxcbiAqICAgY3RvcjogKD9mdW5jdGlvbihuZXc6T2JqZWN0LCAhV2luZG93KXxcbiAqICAgICAgICAgID9mdW5jdGlvbihuZXc6T2JqZWN0LCAhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvYykpLFxuICogfX1cbiAqL1xubGV0IFNlcnZpY2VIb2xkZXJEZWY7XG5cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBwcm92aWRlcyBhIGBkaXNwb3NlYCBtZXRob2QgdGhhdCB3aWxsIGJlIGNhbGxlZCBieVxuICogcnVudGltZSB3aGVuIGEgc2VydmljZSBuZWVkcyB0byBiZSBkaXNwb3NlZCBvZi5cbiAqIEBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGUge1xuXG4gIC8qKlxuICAgKiBJbnN0cnVjdHMgdGhlIHNlcnZpY2UgdG8gcmVsZWFzZSBhbnkgcmVzb3VyY2VzIGl0IG1pZ2h0IGJlIGhvbGRpbmcuIENhblxuICAgKiBiZSBjYWxsZWQgb25seSBvbmNlIGluIHRoZSBsaWZlY3ljbGUgb2YgYSBzZXJ2aWNlLlxuICAgKi9cbiAgZGlzcG9zZSgpIHt9XG59XG5cblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBwcm92aWRlcyBhIGBhZG9wdEVtYmVkV2luZG93YCBtZXRob2QgdGhhdCB3aWxsIGJlIGNhbGxlZCBieVxuICogcnVudGltZSBmb3IgYSBuZXcgZW1iZWQgd2luZG93LlxuICogQGludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgRW1iZWRkYWJsZVNlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiBJbnN0cnVjdHMgdGhlIHNlcnZpY2UgdG8gYWRvcHQgdGhlIGVtYmVkIHdpbmRvdyBhbmQgYWRkIGFueSBuZWNlc3NhcnlcbiAgICogbGlzdGVuZXJzIGFuZCByZXNvdXJjZXMuXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gdW51c2VkRW1iZWRXaW5cbiAgICovXG4gIGFkb3B0RW1iZWRXaW5kb3codW51c2VkRW1iZWRXaW4pIHt9XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VydmljZSB3aXRoIHRoZSBnaXZlbiBpZC4gQXNzdW1lcyB0aGF0IGl0IGhhcyBiZWVuIHJlZ2lzdGVyZWRcbiAqIGFscmVhZHkuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZmFsbGJhY2tUb1RvcFdpblxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc2VydmljZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV4aXN0aW5nU2VydmljZUluRW1iZWRTY29wZSh3aW4sIGlkLCBvcHRfZmFsbGJhY2tUb1RvcFdpbikge1xuICAvLyBGaXJzdCwgdHJ5IHRvIHJlc29sdmUgdmlhIGxvY2FsIChlbWJlZCkgd2luZG93LlxuICBjb25zdCBsb2NhbCA9IGdldExvY2FsRXhpc3RpbmdTZXJ2aWNlRm9yRW1iZWRXaW5Pck51bGwod2luLCBpZCk7XG4gIGlmIChsb2NhbCkge1xuICAgIHJldHVybiBsb2NhbDtcbiAgfVxuICBpZiAob3B0X2ZhbGxiYWNrVG9Ub3BXaW4pIHtcbiAgICByZXR1cm4gZ2V0U2VydmljZSh3aW4sIGlkKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VydmljZSB3aXRoIHRoZSBnaXZlbiBpZC4gQXNzdW1lcyB0aGF0IGl0IGhhcyBiZWVuIGNvbnN0cnVjdGVkXG4gKiBhbHJlYWR5LlxuICpcbiAqIFVubGlrZSBtb3N0IHNlcnZpY2UgZ2V0dGVycywgcGFzc2luZyBgTm9kZWAgaXMgbmVjZXNzYXJ5IGZvciBzb21lIEZJRS1zY29wZVxuICogc2VydmljZXMgc2luY2Ugc29tZXRpbWVzIHdlIG9ubHkgaGF2ZSB0aGUgRklFIERvY3VtZW50IGZvciBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7IU5vZGV8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IG5vZGVPckRvY1xuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfZmFsbGJhY2tUb1RvcFdpblxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgc2VydmljZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV4aXN0aW5nU2VydmljZUZvckRvY0luRW1iZWRTY29wZShcbiAgbm9kZU9yRG9jLCBpZCwgb3B0X2ZhbGxiYWNrVG9Ub3BXaW4pIHtcbiAgLy8gRmlyc3QsIHRyeSB0byByZXNvbHZlIHZpYSBsb2NhbCAoZW1iZWQpIHdpbmRvdy5cbiAgaWYgKG5vZGVPckRvYy5ub2RlVHlwZSkge1xuICAgIC8vIElmIGEgbm9kZSBpcyBwYXNzZWQsIHRyeSB0byByZXNvbHZlIHZpYSB0aGlzIG5vZGUuXG4gICAgY29uc3Qgd2luID0gdG9XaW4oLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovIChcbiAgICAgIG5vZGVPckRvYy5vd25lckRvY3VtZW50IHx8IG5vZGVPckRvYykuZGVmYXVsdFZpZXcpO1xuICAgIGNvbnN0IGxvY2FsID0gZ2V0TG9jYWxFeGlzdGluZ1NlcnZpY2VGb3JFbWJlZFdpbk9yTnVsbCh3aW4sIGlkKTtcbiAgICBpZiAobG9jYWwpIHtcbiAgICAgIHJldHVybiBsb2NhbDtcbiAgICB9XG4gIH1cbiAgLy8gSWYgYW4gYW1wZG9jIGlzIHBhc3NlZCBvciBmYWxsYmFjayBpcyBhbGxvd2VkLCBjb250aW51ZSByZXNvbHZpbmcuXG4gIGlmICghbm9kZU9yRG9jLm5vZGVUeXBlIHx8IG9wdF9mYWxsYmFja1RvVG9wV2luKSB7XG4gICAgcmV0dXJuIGdldFNlcnZpY2VGb3JEb2NEZXByZWNhdGVkKG5vZGVPckRvYywgaWQpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEluc3RhbGxzIGEgc2VydmljZSBvdmVycmlkZSBvbiBhbXAtZG9jIGxldmVsLlxuICogQHBhcmFtIHshV2luZG93fSBlbWJlZFdpblxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcGFyYW0geyFPYmplY3R9IHNlcnZpY2UgVGhlIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsU2VydmljZUluRW1iZWRTY29wZShlbWJlZFdpbiwgaWQsIHNlcnZpY2UpIHtcbiAgY29uc3QgdG9wV2luID0gZ2V0VG9wV2luZG93KGVtYmVkV2luKTtcbiAgZGV2KCkuYXNzZXJ0KGVtYmVkV2luICE9IHRvcFdpbixcbiAgICAgICdTZXJ2aWNlIG92ZXJyaWRlIGNhbiBvbmx5IGJlIGluc3RhbGxlZCBpbiBlbWJlZCB3aW5kb3c6ICVzJywgaWQpO1xuICBkZXYoKS5hc3NlcnQoIWdldExvY2FsRXhpc3RpbmdTZXJ2aWNlRm9yRW1iZWRXaW5Pck51bGwoZW1iZWRXaW4sIGlkKSxcbiAgICAgICdTZXJ2aWNlIG92ZXJyaWRlIGhhcyBhbHJlYWR5IGJlZW4gaW5zdGFsbGVkOiAlcycsIGlkKTtcbiAgcmVnaXN0ZXJTZXJ2aWNlSW50ZXJuYWwoZW1iZWRXaW4sIGVtYmVkV2luLCBpZCwgKCkgPT4gc2VydmljZSk7XG4gIGdldFNlcnZpY2VJbnRlcm5hbChlbWJlZFdpbiwgaWQpOyAvLyBGb3JjZSBzZXJ2aWNlIHRvIGJ1aWxkLlxufVxuXG4vKipcbiAqIEBwYXJhbSB7IVdpbmRvd30gZW1iZWRXaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7P09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TG9jYWxFeGlzdGluZ1NlcnZpY2VGb3JFbWJlZFdpbk9yTnVsbChlbWJlZFdpbiwgaWQpIHtcbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGN1cnJlbnRseSBvbmx5IHJlc29sdmVzIGFnYWluc3QgdGhlIGdpdmVuIHdpbmRvdy5cbiAgLy8gSXQgZG9lcyBub3QgdHJ5IHRvIGdvIGFsbCB0aGUgd2F5IHVwIHRoZSBwYXJlbnQgd2luZG93IGNoYWluLiBXZSBjYW4gY2hhbmdlXG4gIC8vIHRoaXMgaW4gdGhlIGZ1dHVyZSwgYnV0IGZvciBub3cgdGhpcyBnaXZlcyB1cyBhIGJldHRlciBwZXJmb3JtYW5jZS5cbiAgY29uc3QgdG9wV2luID0gZ2V0VG9wV2luZG93KGVtYmVkV2luKTtcbiAgaWYgKGVtYmVkV2luICE9IHRvcFdpbiAmJiBpc1NlcnZpY2VSZWdpc3RlcmVkKGVtYmVkV2luLCBpZCkpIHtcbiAgICByZXR1cm4gZ2V0U2VydmljZUludGVybmFsKGVtYmVkV2luLCBpZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBzZXJ2aWNlIGdpdmVuIGEgY2xhc3MgdG8gYmUgdXNlZCBhcyBpbXBsZW1lbnRhdGlvbi5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgb2YgdGhlIHNlcnZpY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpPYmplY3QsICFXaW5kb3cpfSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luc3RhbnRpYXRlIFdoZXRoZXIgdG8gaW1tZWRpYXRlbHkgY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclNlcnZpY2VCdWlsZGVyKHdpbixcbiAgaWQsXG4gIGNvbnN0cnVjdG9yLFxuICBvcHRfaW5zdGFudGlhdGUpIHtcbiAgd2luID0gZ2V0VG9wV2luZG93KHdpbik7XG4gIHJlZ2lzdGVyU2VydmljZUludGVybmFsKHdpbiwgd2luLCBpZCwgY29uc3RydWN0b3IpO1xuICBpZiAob3B0X2luc3RhbnRpYXRlKSB7XG4gICAgZ2V0U2VydmljZUludGVybmFsKHdpbiwgaWQpO1xuICB9XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VydmljZSBhbmQgcmVnaXN0ZXJzIGl0IGdpdmVuIGEgY2xhc3MgdG8gYmUgdXNlZCBhc1xuICogaW1wbGVtZW50YXRpb24uXG4gKiBAcGFyYW0geyFOb2RlfCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBub2RlT3JEb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3Ok9iamVjdCwgIS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2MpfSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luc3RhbnRpYXRlIFdoZXRoZXIgdG8gaW1tZWRpYXRlbHkgY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclNlcnZpY2VCdWlsZGVyRm9yRG9jKG5vZGVPckRvYyxcbiAgaWQsXG4gIGNvbnN0cnVjdG9yLFxuICBvcHRfaW5zdGFudGlhdGUpIHtcbiAgY29uc3QgYW1wZG9jID0gZ2V0QW1wZG9jKG5vZGVPckRvYyk7XG4gIGNvbnN0IGhvbGRlciA9IGdldEFtcGRvY1NlcnZpY2VIb2xkZXIoYW1wZG9jKTtcbiAgcmVnaXN0ZXJTZXJ2aWNlSW50ZXJuYWwoaG9sZGVyLCBhbXBkb2MsIGlkLCBjb25zdHJ1Y3Rvcik7XG4gIGlmIChvcHRfaW5zdGFudGlhdGUpIHtcbiAgICBnZXRTZXJ2aWNlSW50ZXJuYWwoaG9sZGVyLCBpZCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBzZXJ2aWNlIGZvciB0aGUgZ2l2ZW4gaWQgYW5kIHdpbmRvdyAoYSBwZXItd2luZG93IHNpbmdsZXRvbikuIFVzZXJzXG4gKiBzaG91bGQgdHlwaWNhbGx5IHdyYXAgdGhpcyBhcyBhIHNwZWNpYWwgcHVycG9zZSBmdW5jdGlvbiAoZS5nLlxuICogYFNlcnZpY2VzLnZzeW5jRm9yKHdpbilgKSBmb3IgdHlwZSBzYWZldHkgYW5kIGJlY2F1c2UgdGhlIGZhY3Rvcnkgc2hvdWxkIG5vdFxuICogYmUgcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgb2YgdGhlIHNlcnZpY2UuXG4gKiBAdGVtcGxhdGUgVFxuICogQHJldHVybiB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZpY2Uod2luLCBpZCkge1xuICB3aW4gPSBnZXRUb3BXaW5kb3cod2luKTtcbiAgcmV0dXJuIGdldFNlcnZpY2VJbnRlcm5hbCh3aW4sIGlkKTtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIGZvciBhIHNlcnZpY2UgZm9yIHRoZSBnaXZlbiBpZCBhbmQgd2luZG93LiBBbHNvIGV4cGVjdHMgYW5cbiAqIGVsZW1lbnQgdGhhdCBoYXMgdGhlIGFjdHVhbCBpbXBsZW1lbnRhdGlvbi4gVGhlIHByb21pc2UgcmVzb2x2ZXMgd2hlbiB0aGVcbiAqIGltcGxlbWVudGF0aW9uIGxvYWRlZC4gVXNlcnMgc2hvdWxkIHR5cGljYWxseSB3cmFwIHRoaXMgYXMgYSBzcGVjaWFsIHB1cnBvc2VcbiAqIGZ1bmN0aW9uIChlLmcuIGBTZXJ2aWNlcy52c3luY0Zvcih3aW4pYCkgZm9yIHR5cGUgc2FmZXR5IGFuZCBiZWNhdXNlIHRoZVxuICogZmFjdG9yeSBzaG91bGQgbm90IGJlIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtzdHJpbmd9IGlkIG9mIHRoZSBzZXJ2aWNlLlxuICogQHJldHVybiB7IVByb21pc2U8IU9iamVjdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlUHJvbWlzZSh3aW4sIGlkKSB7XG4gIHJldHVybiBnZXRTZXJ2aWNlUHJvbWlzZUludGVybmFsKHdpbiwgaWQpO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIHNlcnZpY2Ugb3IgbnVsbCB3aXRoIHRoZSBnaXZlbiBpZC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4gez9PYmplY3R9IFRoZSBzZXJ2aWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhpc3RpbmdTZXJ2aWNlT3JOdWxsKHdpbiwgaWQpIHtcbiAgd2luID0gZ2V0VG9wV2luZG93KHdpbik7XG4gIGlmIChpc1NlcnZpY2VSZWdpc3RlcmVkKHdpbiwgaWQpKSB7XG4gICAgcmV0dXJuIGdldFNlcnZpY2VJbnRlcm5hbCh3aW4sIGlkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5cbi8qKlxuICogTGlrZSBnZXRTZXJ2aWNlUHJvbWlzZSBidXQgcmV0dXJucyBudWxsIGlmIHRoZSBzZXJ2aWNlIHdhcyBuZXZlciByZWdpc3RlcmVkLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7P1Byb21pc2U8IU9iamVjdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbCh3aW4sIGlkKSB7XG4gIHJldHVybiBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbEludGVybmFsKHdpbiwgaWQpO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIHNlcnZpY2UgZm9yIHRoZSBnaXZlbiBpZCBhbmQgYW1wZG9jIChhIHBlci1hbXBkb2Mgc2luZ2xldG9uKS5cbiAqIEV4cGVjdHMgc2VydmljZSBgaWRgIHRvIGJlIHJlZ2lzdGVyZWQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7VH1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgaWQpIHtcbiAgY29uc3QgYW1wZG9jID0gZ2V0QW1wZG9jKGVsZW1lbnRPckFtcERvYyk7XG4gIGNvbnN0IGhvbGRlciA9IGdldEFtcGRvY1NlcnZpY2VIb2xkZXIoYW1wZG9jKTtcbiAgcmV0dXJuIGdldFNlcnZpY2VJbnRlcm5hbChob2xkZXIsIGlkKTtcbn1cblxuXG4vKipcbiAqIHRsO2RyIC0tIFVzZSBnZXRTZXJ2aWNlRm9yRG9jKCkgaW5zdGVhZCBvZiB0aGlzLlxuICpcbiAqIFByaXZpbGVnZWQgdmFyaWFudCBvZiBnZXRTZXJ2aWNlRm9yRG9jKCkgdGhhdCBhY2NlcHRzIG5vbi1lbGVtZW50IHBhcmFtcyxcbiAqIGUuZy4gd2luZG93LmRvY3VtZW50LiBUaGlzIGlzIGN1cnJlbnRseSBuZWNlc3NhcnkgZm9yIGRvYy1sZXZlbCBzZXJ2aWNlc1xuICogdXNlZCBpbiBzdGFydHVwLCBlLmcuIENodW5rcy4gRXZlbnR1YWxseSB3ZSB3YW50IHRvIHJlbW92ZSB0aGlzIGZ1bmN0aW9uXG4gKiBhbmQgaGF2ZSBjYWxsZXJzIGZpbmQgdGhlIGFwcHJvcHJpYXRlIEFtcERvYyBhbmQgdXNlIGdldFNlcnZpY2VGb3JEb2MoKS5cbiAqXG4gKiBAcGFyYW0geyFOb2RlfCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBub2RlT3JEb2NcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7VH1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXJ2aWNlRm9yRG9jRGVwcmVjYXRlZChub2RlT3JEb2MsIGlkKSB7XG4gIGNvbnN0IGFtcGRvYyA9IGdldEFtcGRvYyhub2RlT3JEb2MpO1xuICBjb25zdCBob2xkZXIgPSBnZXRBbXBkb2NTZXJ2aWNlSG9sZGVyKGFtcGRvYyk7XG4gIHJldHVybiBnZXRTZXJ2aWNlSW50ZXJuYWwoaG9sZGVyLCBpZCk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgYSBzZXJ2aWNlIGZvciB0aGUgZ2l2ZW4gaWQgYW5kIGFtcGRvYy4gQWxzbyBleHBlY3RzXG4gKiBhIHNlcnZpY2UgdGhhdCBoYXMgdGhlIGFjdHVhbCBpbXBsZW1lbnRhdGlvbi4gVGhlIHByb21pc2UgcmVzb2x2ZXMgd2hlblxuICogdGhlIGltcGxlbWVudGF0aW9uIGxvYWRlZC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhT2JqZWN0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZpY2VQcm9taXNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgaWQpIHtcbiAgcmV0dXJuIGdldFNlcnZpY2VQcm9taXNlSW50ZXJuYWwoXG4gICAgICBnZXRBbXBkb2NTZXJ2aWNlSG9sZGVyKGVsZW1lbnRPckFtcERvYyksIGlkKTtcbn1cblxuXG4vKipcbiAqIExpa2UgZ2V0U2VydmljZVByb21pc2VGb3JEb2MgYnV0IHJldHVybnMgbnVsbCBpZiB0aGUgc2VydmljZSB3YXMgbmV2ZXJcbiAqIHJlZ2lzdGVyZWQgZm9yIHRoaXMgYW1wZG9jLlxuICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4gez9Qcm9taXNlPCFPYmplY3Q+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmljZVByb21pc2VPck51bGxGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCBpZCkge1xuICByZXR1cm4gZ2V0U2VydmljZVByb21pc2VPck51bGxJbnRlcm5hbChcbiAgICAgIGdldEFtcGRvY1NlcnZpY2VIb2xkZXIoZWxlbWVudE9yQW1wRG9jKSwgaWQpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgcGFyZW50IGFuZCB0b3Agd2luZG93cyBvbiBhIGNoaWxkIHdpbmRvdyAoZnJpZW5kbHkgaWZyYW1lKS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0geyFXaW5kb3d9IHBhcmVudFdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0UGFyZW50V2luZG93KHdpbiwgcGFyZW50V2luKSB7XG4gIHdpbi5fX0FNUF9QQVJFTlQgPSBwYXJlbnRXaW47XG4gIHdpbi5fX0FNUF9UT1AgPSBnZXRUb3BXaW5kb3cocGFyZW50V2luKTtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudCB3aW5kb3cgZm9yIGEgY2hpbGQgd2luZG93IChmcmllbmRseSBpZnJhbWUpLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEByZXR1cm4geyFXaW5kb3d9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnRXaW5kb3cod2luKSB7XG4gIHJldHVybiB3aW4uX19BTVBfUEFSRU5UIHx8IHdpbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRvcCB3aW5kb3cgd2hlcmUgQU1QIFJ1bnRpbWUgaXMgaW5zdGFsbGVkIGZvciBhIGNoaWxkIHdpbmRvd1xuICogKGZyaWVuZGx5IGlmcmFtZSkuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHJldHVybiB7IVdpbmRvd31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvcFdpbmRvdyh3aW4pIHtcbiAgcmV0dXJuIHdpbi5fX0FNUF9UT1AgfHwgd2luO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50IFwiZnJpZW5kbHlcIiBpZnJhbWUgaWYgdGhlIG5vZGUgYmVsb25ncyB0byBhIGNoaWxkIHdpbmRvdy5cbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7IVdpbmRvd30gdG9wV2luXG4gKiBAcmV0dXJuIHs/SFRNTElGcmFtZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJlbnRXaW5kb3dGcmFtZUVsZW1lbnQobm9kZSwgdG9wV2luKSB7XG4gIGNvbnN0IGNoaWxkV2luID0gKG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlKS5kZWZhdWx0VmlldztcbiAgaWYgKGNoaWxkV2luICYmIGNoaWxkV2luICE9IHRvcFdpbiAmJiBnZXRUb3BXaW5kb3coY2hpbGRXaW4pID09IHRvcFdpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHs/SFRNTElGcmFtZUVsZW1lbnR9ICovIChjaGlsZFdpbi5mcmFtZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElnbm9yZSB0aGUgZXJyb3IuXG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFtcGRvYyhub2RlT3JEb2MpIHtcbiAgaWYgKG5vZGVPckRvYy5ub2RlVHlwZSkge1xuICAgIGNvbnN0IHdpbiA9IHRvV2luKC8qKiBAdHlwZSB7IURvY3VtZW50fSAqLyAoXG4gICAgICBub2RlT3JEb2Mub3duZXJEb2N1bWVudCB8fCBub2RlT3JEb2MpLmRlZmF1bHRWaWV3KTtcbiAgICByZXR1cm4gZ2V0QW1wZG9jU2VydmljZSh3aW4pLmdldEFtcERvYygvKiogQHR5cGUgeyFOb2RlfSAqLyAobm9kZU9yRG9jKSk7XG4gIH1cbiAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9ICovIChub2RlT3JEb2MpO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY3whV2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRBbXBkb2NTZXJ2aWNlSG9sZGVyKG5vZGVPckRvYykge1xuICBjb25zdCBhbXBkb2MgPSBnZXRBbXBkb2Mobm9kZU9yRG9jKTtcbiAgcmV0dXJuIGFtcGRvYy5pc1NpbmdsZURvYygpID8gYW1wZG9jLndpbiA6IGFtcGRvYztcbn1cblxuXG4vKipcbiAqIFRoaXMgaXMgZXNzZW50aWFsbHkgYSBkdXBsaWNhdGUgb2YgYGFtcGRvYy5qc2AsIGJ1dCBuZWNlc3NhcnkgdG8gYXZvaWRcbiAqIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY1NlcnZpY2V9XG4gKi9cbmZ1bmN0aW9uIGdldEFtcGRvY1NlcnZpY2Uod2luKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jU2VydmljZX0gKi8gKFxuICAgIGdldFNlcnZpY2Uod2luLCAnYW1wZG9jJykpO1xufVxuXG5cbi8qKlxuICogR2V0IHNlcnZpY2UgYGlkYCBmcm9tIGBob2xkZXJgLiBBc3N1bWVzIHRoZSBzZXJ2aWNlXG4gKiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQuXG4gKiBAcGFyYW0geyFPYmplY3R9IGhvbGRlciBPYmplY3QgaG9sZGluZyB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmZ1bmN0aW9uIGdldFNlcnZpY2VJbnRlcm5hbChob2xkZXIsIGlkKSB7XG4gIGRldigpLmFzc2VydChpc1NlcnZpY2VSZWdpc3RlcmVkKGhvbGRlciwgaWQpLFxuICAgICAgYEV4cGVjdGVkIHNlcnZpY2UgJHtpZH0gdG8gYmUgcmVnaXN0ZXJlZGApO1xuICBjb25zdCBzZXJ2aWNlcyA9IGdldFNlcnZpY2VzKGhvbGRlcik7XG4gIGNvbnN0IHMgPSBzZXJ2aWNlc1tpZF07XG4gIGlmICghcy5vYmopIHtcbiAgICBkZXYoKS5hc3NlcnQocy5jdG9yLCBgU2VydmljZSAke2lkfSByZWdpc3RlcmVkIHdpdGhvdXQgY3RvciBub3IgaW1wbC5gKTtcbiAgICBkZXYoKS5hc3NlcnQocy5jb250ZXh0LCBgU2VydmljZSAke2lkfSByZWdpc3RlcmVkIHdpdGhvdXQgY29udGV4dC5gKTtcbiAgICBzLm9iaiA9IG5ldyBzLmN0b3Iocy5jb250ZXh0KTtcbiAgICBkZXYoKS5hc3NlcnQocy5vYmosIGBTZXJ2aWNlICR7aWR9IGNvbnN0cnVjdGVkIHRvIG51bGwuYCk7XG4gICAgcy5jdG9yID0gbnVsbDtcbiAgICBzLmNvbnRleHQgPSBudWxsO1xuICAgIC8vIFRoZSBzZXJ2aWNlIG1heSBoYXZlIGJlZW4gcmVxdWVzdGVkIGFscmVhZHksIGluIHdoaWNoIGNhc2Ugd2UgaGF2ZSBhXG4gICAgLy8gcGVuZGluZyBwcm9taXNlIHdlIG5lZWQgdG8gZnVsZmlsbC5cbiAgICBpZiAocy5yZXNvbHZlKSB7XG4gICAgICBzLnJlc29sdmUocy5vYmopO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcy5vYmo7XG59XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSBob2xkZXIgT2JqZWN0IGhvbGRpbmcgdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyFXaW5kb3d8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGNvbnRleHQgV2luIG9yIEFtcERvYy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKG5ldzpPYmplY3QsICFXaW5kb3cpfD9mdW5jdGlvbihuZXc6T2JqZWN0LCAhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvYyl9IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gbmV3IHRoZSBzZXJ2aWNlLiBDYWxsZWQgd2l0aCBjb250ZXh0LlxuICovXG5mdW5jdGlvbiByZWdpc3RlclNlcnZpY2VJbnRlcm5hbChob2xkZXIsIGNvbnRleHQsIGlkLCBjdG9yKSB7XG4gIGNvbnN0IHNlcnZpY2VzID0gZ2V0U2VydmljZXMoaG9sZGVyKTtcbiAgbGV0IHMgPSBzZXJ2aWNlc1tpZF07XG5cbiAgaWYgKCFzKSB7XG4gICAgcyA9IHNlcnZpY2VzW2lkXSA9IHtcbiAgICAgIG9iajogbnVsbCxcbiAgICAgIHByb21pc2U6IG51bGwsXG4gICAgICByZXNvbHZlOiBudWxsLFxuICAgICAgY29udGV4dDogbnVsbCxcbiAgICAgIGN0b3I6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChzLmN0b3IgfHwgcy5vYmopIHtcbiAgICAvLyBTZXJ2aWNlIGFscmVhZHkgcmVnaXN0ZXJlZC5cbiAgICByZXR1cm47XG4gIH1cblxuICBzLmN0b3IgPSBjdG9yO1xuICBzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gIC8vIFRoZSBzZXJ2aWNlIG1heSBoYXZlIGJlZW4gcmVxdWVzdGVkIGFscmVhZHksIGluIHdoaWNoIGNhc2UgdGhlcmUgaXMgYVxuICAvLyBwZW5kaW5nIHByb21pc2UgdGhhdCBuZWVkcyB0byBmdWxmaWxsZWQuXG4gIGlmIChzLnJlc29sdmUpIHtcbiAgICAvLyBnZXRTZXJ2aWNlSW50ZXJuYWwgd2lsbCByZXNvbHZlIHRoZSBwcm9taXNlLlxuICAgIGdldFNlcnZpY2VJbnRlcm5hbChob2xkZXIsIGlkKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7IU9iamVjdH0gaG9sZGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgb2YgdGhlIHNlcnZpY2UuXG4gKiBAcmV0dXJuIHshUHJvbWlzZTwhT2JqZWN0Pn1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VydmljZVByb21pc2VJbnRlcm5hbChob2xkZXIsIGlkKSB7XG4gIGNvbnN0IGNhY2hlZCA9IGdldFNlcnZpY2VQcm9taXNlT3JOdWxsSW50ZXJuYWwoaG9sZGVyLCBpZCk7XG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG4gIC8vIFNlcnZpY2UgaXMgbm90IHJlZ2lzdGVyZWQuXG5cbiAgLy8gVE9ETyhAY3JhbWZvcmNlKTogQWRkIGEgY2hlY2sgdGhhdCBpZiB0aGUgZWxlbWVudCBpcyBldmVudHVhbGx5IHJlZ2lzdGVyZWRcbiAgLy8gdGhhdCB0aGUgc2VydmljZSBpcyBhY3R1YWxseSBwcm92aWRlZCBhbmQgdGhpcyBwcm9taXNlIHJlc29sdmVzLlxuICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICBjb25zdCB7cHJvbWlzZSwgcmVzb2x2ZX0gPSBkZWZlcnJlZDtcblxuICBjb25zdCBzZXJ2aWNlcyA9IGdldFNlcnZpY2VzKGhvbGRlcik7XG4gIHNlcnZpY2VzW2lkXSA9IHtcbiAgICBvYmo6IG51bGwsXG4gICAgcHJvbWlzZSxcbiAgICByZXNvbHZlLFxuICAgIGNvbnRleHQ6IG51bGwsXG4gICAgY3RvcjogbnVsbCxcbiAgfTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3Igc2VydmljZSBgaWRgIGlmIHRoZSBzZXJ2aWNlIGhhcyBiZWVuIHJlZ2lzdGVyZWRcbiAqIG9uIGBob2xkZXJgLlxuICogQHBhcmFtIHshT2JqZWN0fSBob2xkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEByZXR1cm4gez9Qcm9taXNlPCFPYmplY3Q+fVxuICovXG5mdW5jdGlvbiBnZXRTZXJ2aWNlUHJvbWlzZU9yTnVsbEludGVybmFsKGhvbGRlciwgaWQpIHtcbiAgY29uc3Qgc2VydmljZXMgPSBnZXRTZXJ2aWNlcyhob2xkZXIpO1xuICBjb25zdCBzID0gc2VydmljZXNbaWRdO1xuICBpZiAocykge1xuICAgIGlmIChzLnByb21pc2UpIHtcbiAgICAgIHJldHVybiBzLnByb21pc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluc3RhbnRpYXRlIHNlcnZpY2UgaWYgbm90IGFscmVhZHkgaW5zdGFudGlhdGVkLlxuICAgICAgZ2V0U2VydmljZUludGVybmFsKGhvbGRlciwgaWQpO1xuICAgICAgcmV0dXJuIHMucHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgvKiogQHR5cGUgeyFPYmplY3R9ICovIChzLm9iaikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9iamVjdCB0aGF0IGhvbGRzIHRoZSBzZXJ2aWNlcyByZWdpc3RlcmVkIGluIGEgaG9sZGVyLlxuICogQHBhcmFtIHshT2JqZWN0fSBob2xkZXJcbiAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCFTZXJ2aWNlSG9sZGVyRGVmPn1cbiAqL1xuZnVuY3Rpb24gZ2V0U2VydmljZXMoaG9sZGVyKSB7XG4gIGxldCB7c2VydmljZXN9ID0gaG9sZGVyO1xuICBpZiAoIXNlcnZpY2VzKSB7XG4gICAgc2VydmljZXMgPSBob2xkZXIuc2VydmljZXMgPSB7fTtcbiAgfVxuICByZXR1cm4gc2VydmljZXM7XG59XG5cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBzcGVjaWZpZWQgc2VydmljZSBpbXBsZW1lbnRzIGBEaXNwb3NhYmxlYCBpbnRlcmZhY2UuXG4gKiBAcGFyYW0geyFPYmplY3R9IHNlcnZpY2VcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Rpc3Bvc2FibGUoc2VydmljZSkge1xuICByZXR1cm4gdHlwZW9mIHNlcnZpY2UuZGlzcG9zZSA9PSAnZnVuY3Rpb24nO1xufVxuXG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBzcGVjaWZpZWQgc2VydmljZSBpbXBsZW1lbnRzIGBEaXNwb3NhYmxlYCBpbnRlcmZhY2UgYW5kXG4gKiB0eXBlY2FzdHMgdGhlIGluc3RhbmNlIHRvIGBEaXNwb3NhYmxlYC5cbiAqIEBwYXJhbSB7IU9iamVjdH0gc2VydmljZVxuICogQHJldHVybiB7IURpc3Bvc2FibGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREaXNwb3NhYmxlKHNlcnZpY2UpIHtcbiAgZGV2KCkuYXNzZXJ0KGlzRGlzcG9zYWJsZShzZXJ2aWNlKSwgJ3JlcXVpcmVkIHRvIGltcGxlbWVudCBEaXNwb3NhYmxlJyk7XG4gIHJldHVybiAvKiogQHR5cGUgeyFEaXNwb3NhYmxlfSAqLyAoc2VydmljZSk7XG59XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBhbGwgZGlzcG9zYWJsZSAoaW1wbGVtZW50cyBgRGlzcG9zYWJsZWAgaW50ZXJmYWNlKSBzZXJ2aWNlcyBpblxuICogYW1wZG9jIHNjb3BlLlxuICogQHBhcmFtIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlU2VydmljZXNGb3JEb2MoYW1wZG9jKSB7XG4gIGRpc3Bvc2VTZXJ2aWNlc0ludGVybmFsKGFtcGRvYyk7XG59XG5cblxuLyoqXG4gKiBEaXNwb3NlcyBhbGwgZGlzcG9zYWJsZSAoaW1wbGVtZW50cyBgRGlzcG9zYWJsZWAgaW50ZXJmYWNlKSBzZXJ2aWNlcyBpblxuICogZW1iZWQgc2NvcGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IGVtYmVkV2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlU2VydmljZXNGb3JFbWJlZChlbWJlZFdpbikge1xuICBkaXNwb3NlU2VydmljZXNJbnRlcm5hbChlbWJlZFdpbik7XG59XG5cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IGhvbGRlciBPYmplY3QgaG9sZGluZyB0aGUgc2VydmljZSBpbnN0YW5jZXMuXG4gKi9cbmZ1bmN0aW9uIGRpc3Bvc2VTZXJ2aWNlc0ludGVybmFsKGhvbGRlcikge1xuICAvLyBUT0RPKGR2b3l0ZW5rbyk6IENvbnNpZGVyIG1hcmtpbmcgaG9sZGVyIGFzIGRlc3Ryb3llZCBmb3IgbGF0ZXItYXJyaXZpbmdcbiAgLy8gc2VydmljZSB0byBiZSBjYW5jZWxlZCBhdXRvbWF0aWNhbGx5LlxuICBjb25zdCBzZXJ2aWNlcyA9IGdldFNlcnZpY2VzKGhvbGRlcik7XG4gIGZvciAoY29uc3QgaWQgaW4gc2VydmljZXMpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZXJ2aWNlcywgaWQpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3Qgc2VydmljZUhvbGRlciA9IHNlcnZpY2VzW2lkXTtcbiAgICBpZiAoc2VydmljZUhvbGRlci5vYmopIHtcbiAgICAgIGRpc3Bvc2VTZXJ2aWNlSW50ZXJuYWwoaWQsIHNlcnZpY2VIb2xkZXIub2JqKTtcbiAgICB9IGVsc2UgaWYgKHNlcnZpY2VIb2xkZXIucHJvbWlzZSkge1xuICAgICAgc2VydmljZUhvbGRlci5wcm9taXNlLnRoZW4oXG4gICAgICAgICAgaW5zdGFuY2UgPT4gZGlzcG9zZVNlcnZpY2VJbnRlcm5hbChpZCwgaW5zdGFuY2UpKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHBhcmFtIHshT2JqZWN0fSBzZXJ2aWNlXG4gKi9cbmZ1bmN0aW9uIGRpc3Bvc2VTZXJ2aWNlSW50ZXJuYWwoaWQsIHNlcnZpY2UpIHtcbiAgaWYgKCFpc0Rpc3Bvc2FibGUoc2VydmljZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBhc3NlcnREaXNwb3NhYmxlKHNlcnZpY2UpLmRpc3Bvc2UoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIEVuc3VyZSB0aGF0IGEgZmFpbHVyZSB0byBkaXNwb3NlIGEgc2VydmljZSBkb2VzIG5vdCBkaXNydXB0IG90aGVyXG4gICAgLy8gc2VydmljZXMuXG4gICAgZGV2KCkuZXJyb3IoJ1NFUlZJQ0UnLCAnZmFpbGVkIHRvIGRpc3Bvc2Ugc2VydmljZScsIGlkLCBlKTtcbiAgfVxufVxuXG5cbi8qKlxuICogV2hldGhlciB0aGUgc3BlY2lmaWVkIHNlcnZpY2UgaW1wbGVtZW50cyBgRW1iZWRkYWJsZVNlcnZpY2VgIGludGVyZmFjZS5cbiAqIEBwYXJhbSB7IU9iamVjdH0gc2VydmljZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1iZWRkYWJsZShzZXJ2aWNlKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VydmljZS5hZG9wdEVtYmVkV2luZG93ID09ICdmdW5jdGlvbic7XG59XG5cblxuLyoqXG4gKiBBZG9wdHMgYW4gZW1iZWRkYWJsZSAoaW1wbGVtZW50cyBgRW1iZWRkYWJsZVNlcnZpY2VgIGludGVyZmFjZSkgc2VydmljZVxuICogaW4gZW1iZWQgc2NvcGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IGVtYmVkV2luXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZUlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZG9wdFNlcnZpY2VGb3JFbWJlZChlbWJlZFdpbiwgc2VydmljZUlkKSB7XG4gIGNvbnN0IGFkb3B0ZWQgPSBhZG9wdFNlcnZpY2VGb3JFbWJlZElmRW1iZWRkYWJsZShlbWJlZFdpbiwgc2VydmljZUlkKTtcbiAgZGV2KCkuYXNzZXJ0KGFkb3B0ZWQsIGBTZXJ2aWNlICR7c2VydmljZUlkfSBub3QgZm91bmQgb24gcGFyZW50IGAgK1xuICAgICAgJ29yIGRvZXNuXFwndCBpbXBsZW1lbnQgRW1iZWRkYWJsZVNlcnZpY2UuJyk7XG59XG5cblxuLyoqXG4gKiBBZG9wdHMgYW4gZW1iZWRkYWJsZSAoaW1wbGVtZW50cyBgRW1iZWRkYWJsZVNlcnZpY2VgIGludGVyZmFjZSkgc2VydmljZVxuICogaW4gZW1iZWQgc2NvcGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IGVtYmVkV2luXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VydmljZUlkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRvcHRTZXJ2aWNlRm9yRW1iZWRJZkVtYmVkZGFibGUoZW1iZWRXaW4sIHNlcnZpY2VJZCkge1xuICBjb25zdCBmcmFtZUVsZW1lbnQgPSAvKiogQHR5cGUgeyFOb2RlfSAqLyAoZGV2KCkuYXNzZXJ0KFxuICAgICAgZW1iZWRXaW4uZnJhbWVFbGVtZW50LFxuICAgICAgJ2ZyYW1lRWxlbWVudCBub3QgZm91bmQgZm9yIGVtYmVkJykpO1xuICBjb25zdCBhbXBkb2MgPSBnZXRBbXBkb2MoZnJhbWVFbGVtZW50KTtcbiAgY29uc3QgaG9sZGVyID0gZ2V0QW1wZG9jU2VydmljZUhvbGRlcihhbXBkb2MpO1xuICBpZiAoIWlzU2VydmljZVJlZ2lzdGVyZWQoaG9sZGVyLCBzZXJ2aWNlSWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHNlcnZpY2UgPSBnZXRTZXJ2aWNlRm9yRG9jRGVwcmVjYXRlZChmcmFtZUVsZW1lbnQsIHNlcnZpY2VJZCk7XG4gIGlmICghaXNFbWJlZGRhYmxlKHNlcnZpY2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHNlcnZpY2UuYWRvcHRFbWJlZFdpbmRvdyhlbWJlZFdpbik7XG4gIHJldHVybiB0cnVlO1xufVxuXG5cbi8qKlxuICogUmVzZXRzIGEgc2luZ2xlIHNlcnZpY2UsIHNvIGl0IGdldHMgcmVjcmVhdGVkIG9uIG5leHQgZ2V0U2VydmljZSBpbnZvY2F0aW9uLlxuICogQHBhcmFtIHshT2JqZWN0fSBob2xkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0U2VydmljZUZvclRlc3RpbmcoaG9sZGVyLCBpZCkge1xuICBpZiAoaG9sZGVyLnNlcnZpY2VzKSB7XG4gICAgaG9sZGVyLnNlcnZpY2VzW2lkXSA9IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyFPYmplY3R9IGhvbGRlciBPYmplY3QgaG9sZGluZyB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvZiB0aGUgc2VydmljZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU2VydmljZVJlZ2lzdGVyZWQoaG9sZGVyLCBpZCkge1xuICBjb25zdCBzZXJ2aWNlID0gaG9sZGVyLnNlcnZpY2VzICYmIGhvbGRlci5zZXJ2aWNlc1tpZF07XG4gIC8vIEFsbCByZWdpc3RlcmVkIHNlcnZpY2VzIG11c3QgaGF2ZSBhbiBpbXBsZW1lbnRhdGlvbiBvciBhIGNvbnN0cnVjdG9yLlxuICByZXR1cm4gISEoc2VydmljZSAmJiAoc2VydmljZS5jdG9yIHx8IHNlcnZpY2Uub2JqKSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi4vc2VydmljZXMnO1xuaW1wb3J0IHtcbiAgY2xvc2VzdEJ5VGFnLFxuICBlc2NhcGVDc3NTZWxlY3RvcklkZW50LFxuICBpc0lmcmFtZWQsXG4gIG9wZW5XaW5kb3dEaWFsb2csXG59IGZyb20gJy4uL2RvbSc7XG5pbXBvcnQge2RldiwgdXNlcn0gZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7XG4gIGdldEV4dHJhUGFyYW1zVXJsLFxuICBzaG91bGRBcHBlbmRFeHRyYVBhcmFtcyxcbn0gZnJvbSAnLi4vaW1wcmVzc2lvbic7XG5pbXBvcnQge2dldE1vZGV9IGZyb20gJy4uL21vZGUnO1xuaW1wb3J0IHtcbiAgaW5zdGFsbFNlcnZpY2VJbkVtYmVkU2NvcGUsXG4gIHJlZ2lzdGVyU2VydmljZUJ1aWxkZXJGb3JEb2MsXG59IGZyb20gJy4uL3NlcnZpY2UnO1xuaW1wb3J0IHt0b1dpbn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBUQUcgPSAnbmF2aWdhdGlvbic7XG4vKiogQHByaXZhdGUgQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBFVkVOVF9UWVBFX0NMSUNLID0gJ2NsaWNrJztcbi8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IEVWRU5UX1RZUEVfQ09OVEVYVF9NRU5VID0gJ2NvbnRleHRtZW51JztcblxuLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgT1JJR19IUkVGX0FUVFJJQlVURSA9ICdkYXRhLWE0YS1vcmlnLWhyZWYnO1xuXG4vKipcbiAqIEluc3RhbGwgbmF2aWdhdGlvbiBzZXJ2aWNlIGZvciBhbXBkb2MsIHdoaWNoIGhhbmRsZXMgbmF2aWdhdGlvbnMgZnJvbSBhbmNob3JcbiAqIHRhZyBjbGlja3MgYW5kIG90aGVyIHJ1bnRpbWUgZmVhdHVyZXMgbGlrZSBBTVAubmF2aWdhdGVUbygpLlxuICpcbiAqIEltbWVkaWF0ZWx5IGluc3RhbnRpYXRlcyB0aGUgc2VydmljZS5cbiAqXG4gKiBAcGFyYW0geyEuL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsR2xvYmFsTmF2aWdhdGlvbkhhbmRsZXJGb3JEb2MoYW1wZG9jKSB7XG4gIHJlZ2lzdGVyU2VydmljZUJ1aWxkZXJGb3JEb2MoXG4gICAgICBhbXBkb2MsXG4gICAgICBUQUcsXG4gICAgICBOYXZpZ2F0aW9uLFxuICAgICAgLyogb3B0X2luc3RhbnRpYXRlICovIHRydWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IS4vYW1wZG9jLWltcGwuQW1wRG9jfSBhbXBkb2NcbiAqIEBwYXJhbSB7IUV2ZW50fSBlXG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRXhwYW5kVXJsUGFyYW1zRm9yVGVzdGluZyhhbXBkb2MsIGUpIHtcbiAgbWF5YmVFeHBhbmRVcmxQYXJhbXMoYW1wZG9jLCBlKTtcbn1cblxuLyoqXG4gKiBJbnRlcmNlcHQgYW55IGNsaWNrIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50IGFuZCBwcmV2ZW50IGFueVxuICogbGlua2luZyB0byBhbiBpZGVudGlmaWVyIGZyb20gcHVzaGluZyBpbnRvIHRoZSBoaXN0b3J5IHN0YWNrLlxuICogQGltcGxlbWVudHMgey4uL3NlcnZpY2UuRW1iZWRkYWJsZVNlcnZpY2V9XG4gKiBAdmlzaWJsZUZvclRlc3RpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIE5hdmlnYXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9hbXBkb2MtaW1wbC5BbXBEb2N9IGFtcGRvY1xuICAgKiBAcGFyYW0geyghRG9jdW1lbnR8IVNoYWRvd1Jvb3QpPX0gb3B0X3Jvb3ROb2RlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhbXBkb2MsIG9wdF9yb290Tm9kZSkge1xuICAgIC8qKiBAY29uc3QgeyEuL2FtcGRvYy1pbXBsLkFtcERvY30gKi9cbiAgICB0aGlzLmFtcGRvYyA9IGFtcGRvYztcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFEb2N1bWVudHwhU2hhZG93Um9vdH0gKi9cbiAgICB0aGlzLnJvb3ROb2RlXyA9IG9wdF9yb290Tm9kZSB8fCBhbXBkb2MuZ2V0Um9vdE5vZGUoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL3ZpZXdwb3J0L3ZpZXdwb3J0LWltcGwuVmlld3BvcnR9ICovXG4gICAgdGhpcy52aWV3cG9ydF8gPSBTZXJ2aWNlcy52aWV3cG9ydEZvckRvYyh0aGlzLmFtcGRvYyk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshLi92aWV3ZXItaW1wbC5WaWV3ZXJ9ICovXG4gICAgdGhpcy52aWV3ZXJfID0gU2VydmljZXMudmlld2VyRm9yRG9jKHRoaXMuYW1wZG9jKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyEuL2hpc3RvcnktaW1wbC5IaXN0b3J5fSAqL1xuICAgIHRoaXMuaGlzdG9yeV8gPSBTZXJ2aWNlcy5oaXN0b3J5Rm9yRG9jKHRoaXMuYW1wZG9jKTtcblxuICAgIGNvbnN0IHBsYXRmb3JtID0gU2VydmljZXMucGxhdGZvcm1Gb3IodGhpcy5hbXBkb2Mud2luKTtcbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNJb3NTYWZhcmlfID0gcGxhdGZvcm0uaXNJb3MoKSAmJiBwbGF0Zm9ybS5pc1NhZmFyaSgpO1xuXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCB7Ym9vbGVhbn0gKi9cbiAgICB0aGlzLmlzSWZyYW1lZF8gPVxuICAgICAgICBpc0lmcmFtZWQodGhpcy5hbXBkb2Mud2luKSAmJiB0aGlzLnZpZXdlcl8uaXNPdmVydGFrZUhpc3RvcnkoKTtcblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge2Jvb2xlYW59ICovXG4gICAgdGhpcy5pc0VtYmVkXyA9IHRoaXMucm9vdE5vZGVfICE9IHRoaXMuYW1wZG9jLmdldFJvb3ROb2RlKCk7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHtib29sZWFufSAqL1xuICAgIHRoaXMuaXNJbkFCb3hfID0gZ2V0TW9kZSh0aGlzLmFtcGRvYy53aW4pLnJ1bnRpbWUgPT0gJ2luYWJveCc7XG5cblxuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFmdW5jdGlvbighRXZlbnQpfHVuZGVmaW5lZH0gKi9cbiAgICB0aGlzLmJvdW5kSGFuZGxlXyA9IHRoaXMuaGFuZGxlXy5iaW5kKHRoaXMpO1xuICAgIHRoaXMucm9vdE5vZGVfLmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRfVFlQRV9DTElDSywgdGhpcy5ib3VuZEhhbmRsZV8pO1xuICAgIHRoaXMucm9vdE5vZGVfLmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRfVFlQRV9DT05URVhUX01FTlUsIHRoaXMuYm91bmRIYW5kbGVfKTtcbiAgICAvKiogQHByaXZhdGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5hcHBlbmRFeHRyYVBhcmFtc18gPSBmYWxzZTtcbiAgICBzaG91bGRBcHBlbmRFeHRyYVBhcmFtcyh0aGlzLmFtcGRvYykudGhlbihyZXMgPT4ge1xuICAgICAgdGhpcy5hcHBlbmRFeHRyYVBhcmFtc18gPSByZXM7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBMYXp5LWdlbmVyYXRlZCBsaXN0IG9mIEEyQS1lbmFibGVkIG5hdmlnYXRpb24gZmVhdHVyZXMuXG4gICAgICogQHByaXZhdGUgez9BcnJheTxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuYTJhRmVhdHVyZXNfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBoYW5kbGVyIHRoYXQgcGVyZm9ybXMgVVJMIHJlcGxhY2VtZW50IG9uIHRoZSBocmVmXG4gICAqIG9mIGFuIGFkIGNsaWNrLlxuICAgKiBAcGFyYW0geyEuL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqL1xuICBzdGF0aWMgaW5zdGFsbEFuY2hvckNsaWNrSW50ZXJjZXB0b3IoYW1wZG9jLCB3aW4pIHtcbiAgICB3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAgICAgbWF5YmVFeHBhbmRVcmxQYXJhbXMuYmluZChudWxsLCBhbXBkb2MpLCAvKiBjYXB0dXJlICovIHRydWUpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhZG9wdEVtYmVkV2luZG93KGVtYmVkV2luKSB7XG4gICAgaW5zdGFsbFNlcnZpY2VJbkVtYmVkU2NvcGUoZW1iZWRXaW4sIFRBRyxcbiAgICAgICAgbmV3IE5hdmlnYXRpb24odGhpcy5hbXBkb2MsIGVtYmVkV2luLmRvY3VtZW50KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZXZlbnQgbGlzdGVuZXJzLlxuICAgKi9cbiAgY2xlYW51cCgpIHtcbiAgICBpZiAodGhpcy5ib3VuZEhhbmRsZV8pIHtcbiAgICAgIHRoaXMucm9vdE5vZGVfLnJlbW92ZUV2ZW50TGlzdGVuZXIoRVZFTlRfVFlQRV9DTElDSywgdGhpcy5ib3VuZEhhbmRsZV8pO1xuICAgICAgdGhpcy5yb290Tm9kZV8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBFVkVOVF9UWVBFX0NPTlRFWFRfTUVOVSwgdGhpcy5ib3VuZEhhbmRsZV8pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZXMgYSB3aW5kb3cgdG8gYSBVUkwuXG4gICAqXG4gICAqIElmIG9wdF9yZXF1ZXN0ZWRCeSBtYXRjaGVzIGEgZmVhdHVyZSBuYW1lIGluIGEgPG1ldGE+IHRhZyB3aXRoIGF0dHJpYnV0ZVxuICAgKiBuYW1lPVwiYW1wLXRvLWFtcC1uYXZpZ2F0aW9uXCIsIHRoZW4gdHJlYXRzIHRoZSBVUkwgYXMgYW4gQU1QIFVSTCAoQTJBKS5cbiAgICpcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9yZXF1ZXN0ZWRCeVxuICAgKi9cbiAgbmF2aWdhdGVUbyh3aW4sIHVybCwgb3B0X3JlcXVlc3RlZEJ5KSB7XG4gICAgY29uc3QgdXJsU2VydmljZSA9IFNlcnZpY2VzLnVybEZvckRvYyh0aGlzLmFtcGRvYyk7XG4gICAgaWYgKCF1cmxTZXJ2aWNlLmlzUHJvdG9jb2xWYWxpZCh1cmwpKSB7XG4gICAgICB1c2VyKCkuZXJyb3IoVEFHLCAnQ2Fubm90IG5hdmlnYXRlIHRvIGludmFsaWQgcHJvdG9jb2w6ICcgKyB1cmwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgcmVkaXJlY3Qgd2FzIHJlcXVlc3RlZCBieSBhIGZlYXR1cmUgdGhhdCBvcHRlZCBpbnRvIEEyQSxcbiAgICAvLyB0cnkgdG8gYXNrIHRoZSB2aWV3ZXIgdG8gbmF2aWdhdGUgdGhpcyBBTVAgVVJMLlxuICAgIGlmIChvcHRfcmVxdWVzdGVkQnkpIHtcbiAgICAgIGlmICghdGhpcy5hMmFGZWF0dXJlc18pIHtcbiAgICAgICAgdGhpcy5hMmFGZWF0dXJlc18gPSB0aGlzLnF1ZXJ5QTJBRmVhdHVyZXNfKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hMmFGZWF0dXJlc18uaW5jbHVkZXMob3B0X3JlcXVlc3RlZEJ5KSkge1xuICAgICAgICBpZiAodGhpcy52aWV3ZXJfLm5hdmlnYXRlVG9BbXBVcmwodXJsLCBvcHRfcmVxdWVzdGVkQnkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBwZXJmb3JtIG5vcm1hbCBiZWhhdmlvciBvZiBuYXZpZ2F0aW5nIHRoZSB0b3AgZnJhbWUuXG4gICAgd2luLnRvcC5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcXVlcnlBMkFGZWF0dXJlc18oKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMucm9vdE5vZGVfLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICdtZXRhW25hbWU9XCJhbXAtdG8tYW1wLW5hdmlnYXRpb25cIl0nKTtcbiAgICBpZiAobWV0YSAmJiBtZXRhLmhhc0F0dHJpYnV0ZSgnY29udGVudCcpKSB7XG4gICAgICByZXR1cm4gbWV0YS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKS5zcGxpdCgnLCcpLm1hcChzID0+IHMudHJpbSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdCBhbnkgY2xpY2sgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kIHByZXZlbnQgYW55XG4gICAqIGxpbmtpbmcgdG8gYW4gaWRlbnRpZmllciBmcm9tIHB1c2hpbmcgaW50byB0aGUgaGlzdG9yeSBzdGFjay5cbiAgICpcbiAgICogVGhpcyBhbHNvIGhhbmRsZXMgY3VzdG9tIHByb3RvY29scyAoZS5nLiB3aGF0c2FwcDovLykgd2hlbiBpZnJhbWVkXG4gICAqIG9uIGlPUyBTYWZhcmkuXG4gICAqXG4gICAqIEBwYXJhbSB7IUV2ZW50fSBlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGVfKGUpIHtcbiAgICBpZiAoZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGNsb3Nlc3RCeVRhZyhkZXYoKS5hc3NlcnRFbGVtZW50KGUudGFyZ2V0KSwgJ0EnKTtcbiAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUudHlwZSA9PSBFVkVOVF9UWVBFX0NMSUNLKSB7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrXyh0YXJnZXQsIGUpO1xuICAgIH0gZWxzZSBpZiAoZS50eXBlID09IEVWRU5UX1RZUEVfQ09OVEVYVF9NRU5VKSB7XG4gICAgICAvLyBIYW5kbGVzIGNvbnRleHRtZW51IGNsaWNrLiBOb3RlIHRoYXQgY3VycmVudGx5IHRoaXMgb25seSBkZWFsc1xuICAgICAgLy8gd2l0aCB1cmwgdmFyaWFibGUgc3Vic3RpdHV0aW9uIGFuZCBleHBhbnNpb24sIGFzIHRoZXJlIGlzXG4gICAgICAvLyBzdHJhaWdodGZvcndhcmQgd2F5IG9mIGRldGVybWluaW5nIHdoYXQgdGhlIHVzZXIgY2xpY2tlZCBpbiB0aGVcbiAgICAgIC8vIGNvbnRleHQgbWVudSwgcmVxdWlyZWQgZm9yIEEyQSBuYXZpZ2F0aW9uIGFuZCBjdXN0b20gbGluayBwcm90b2NvbFxuICAgICAgLy8gaGFuZGxpbmcuXG4gICAgICAvLyBUT0RPKGFsYWJpYWdhKTogaW52ZXN0aWdhdGUgZml4IGZvciBoYW5kbGluZyBBMkEgYW5kIGN1c3RvbSBsaW5rXG4gICAgICAvLyBwcm90b2NvbHMuXG4gICAgICB0aGlzLmV4cGFuZFZhcnNGb3JBbmNob3JfKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IHRhcmdldFxuICAgKiBAcGFyYW0geyFFdmVudH0gZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQ2xpY2tfKHRhcmdldCwgZSkge1xuICAgIHRoaXMuZXhwYW5kVmFyc0ZvckFuY2hvcl8odGFyZ2V0KTtcblxuICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5wYXJzZVVybF8odGFyZ2V0LmhyZWYpO1xuXG4gICAgLy8gSGFuZGxlIEFNUC10by1BTVAgbmF2aWdhdGlvbiBpZiByZWw9YW1waHRtbC5cbiAgICBpZiAodGhpcy5oYW5kbGVBMkFDbGlja18oZSwgdGFyZ2V0LCBsb2NhdGlvbikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgbmF2aWdhdGluZyB0byBjdXN0b20gcHJvdG9jb2wgaWYgYXBwbGljYWJsZS5cbiAgICBpZiAodGhpcy5oYW5kbGVDdXN0b21Qcm90b2NvbENsaWNrXyhlLCB0YXJnZXQsIGxvY2F0aW9uKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGhhbmRsZSBub3JtYWwgY2xpY2stbmF2aWdhdGlvbiBiZWhhdmlvci5cbiAgICB0aGlzLmhhbmRsZU5hdkNsaWNrXyhlLCB0YXJnZXQsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZXhwYW5kVmFyc0ZvckFuY2hvcl8oZWwpIHtcbiAgICAvLyBGaXJzdCBjaGVjayBpZiBuZWVkIHRvIGhhbmRsZSBleHRlcm5hbCBsaW5rIGRlY29yYXRpb24uXG4gICAgbGV0IGRlZmF1bHRFeHBhbmRQYXJhbXNVcmwgPSBudWxsO1xuICAgIGlmICh0aGlzLmFwcGVuZEV4dHJhUGFyYW1zXyAmJiAhdGhpcy5pc0VtYmVkXykge1xuICAgICAgLy8gT25seSBkZWNvcmF0ZSBvdXRnb2luZyBsaW5rIHdoZW4gbmVlZGVkIHRvIGFuZCBpcyBub3QgaW4gRklFLlxuICAgICAgZGVmYXVsdEV4cGFuZFBhcmFtc1VybCA9IGdldEV4dHJhUGFyYW1zVXJsKHRoaXMuYW1wZG9jLndpbiwgZWwpO1xuICAgIH1cblxuICAgIGNvbnN0IHVybFJlcGxhY2VtZW50cyA9IFNlcnZpY2VzLnVybFJlcGxhY2VtZW50c0ZvckRvYyhlbCk7XG4gICAgdXJsUmVwbGFjZW1lbnRzLm1heWJlRXhwYW5kTGluayhlbCwgZGVmYXVsdEV4cGFuZFBhcmFtc1VybCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBjbGlja2luZyBvbiBhIGN1c3RvbSBwcm90b2NvbCBsaW5rLlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG5hdmlnYXRpb24gd2FzIGhhbmRsZWQuIE90aGVyd2lzZSwgcmV0dXJucyBmYWxzZS5cbiAgICogQHBhcmFtIHshRXZlbnR9IGVcbiAgICogQHBhcmFtIHshRWxlbWVudH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7IUxvY2F0aW9ufSBsb2NhdGlvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQ3VzdG9tUHJvdG9jb2xDbGlja18oZSwgdGFyZ2V0LCBsb2NhdGlvbikge1xuICAgIC8vIEhhbmRsZSBjdXN0b20gcHJvdG9jb2xzIG9ubHkgaWYgdGhlIGRvY3VtZW50IGlzIGlmcmFtZWQuXG4gICAgaWYgKCF0aGlzLmlzSWZyYW1lZF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKiogQGNvbnN0IHshV2luZG93fSAqL1xuICAgIGNvbnN0IHdpbiA9IHRvV2luKHRhcmdldC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KTtcbiAgICBjb25zdCB1cmwgPSB0YXJnZXQuaHJlZjtcbiAgICBjb25zdCB7cHJvdG9jb2x9ID0gbG9jYXRpb247XG5cbiAgICAvLyBPbiBTYWZhcmkgaU9TLCBjdXN0b20gcHJvdG9jb2wgbGlua3Mgd2lsbCBmYWlsIHRvIG9wZW4gYXBwcyB3aGVuIHRoZVxuICAgIC8vIGRvY3VtZW50IGlzIGlmcmFtZWQgLSBpbiBvcmRlciB0byBnbyBhcm91bmQgdGhpcywgd2Ugc2V0IHRoZSB0b3AubG9jYXRpb25cbiAgICAvLyB0byB0aGUgY3VzdG9tIHByb3RvY29sIGhyZWYuXG4gICAgY29uc3QgaXNGVFAgPSBwcm90b2NvbCA9PSAnZnRwOic7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEZUUCBMaW5rcyBpbiBlbWJlZGRlZCBkb2N1bWVudHMgYWx3YXlzIG9wZW4gdGhlbiBpbiBfYmxhbmsuXG4gICAgaWYgKGlzRlRQKSB7XG4gICAgICBvcGVuV2luZG93RGlhbG9nKHdpbiwgdXJsLCAnX2JsYW5rJyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc05vcm1hbFByb3RvY29sID0gL14oaHR0cHM/fG1haWx0byk6JC8udGVzdChwcm90b2NvbCk7XG4gICAgaWYgKHRoaXMuaXNJb3NTYWZhcmlfICYmICFpc05vcm1hbFByb3RvY29sKSB7XG4gICAgICBvcGVuV2luZG93RGlhbG9nKHdpbiwgdXJsLCAnX3RvcCcpO1xuICAgICAgLy8gV2l0aG91dCBwcmV2ZW50aW5nIGRlZmF1bHQgdGhlIHBhZ2Ugd291bGQgc2hvdWxkIGFuIGFsZXJ0IGVycm9yIHR3aWNlXG4gICAgICAvLyBpbiB0aGUgY2FzZSB3aGVyZSB0aGVyZSdzIG5vIGFwcCB0byBoYW5kbGUgdGhlIGN1c3RvbSBwcm90b2NvbC5cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGNsaWNraW5nIG9uIGFuIEFNUCBsaW5rLlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG5hdmlnYXRpb24gd2FzIGhhbmRsZWQuIE90aGVyd2lzZSwgcmV0dXJucyBmYWxzZS5cbiAgICogQHBhcmFtIHshRXZlbnR9IGVcbiAgICogQHBhcmFtIHshRWxlbWVudH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7IUxvY2F0aW9ufSBsb2NhdGlvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQTJBQ2xpY2tfKGUsIHRhcmdldCwgbG9jYXRpb24pIHtcbiAgICBpZiAoIXRhcmdldC5oYXNBdHRyaWJ1dGUoJ3JlbCcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHJlbGF0aW9ucyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3JlbCcpLnNwbGl0KCcgJykubWFwKHMgPT4gcy50cmltKCkpO1xuICAgIGlmICghcmVsYXRpb25zLmluY2x1ZGVzKCdhbXBodG1sJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gVGhlIHZpZXdlciBtYXkgbm90IHN1cHBvcnQgdGhlIGNhcGFiaWxpdHkgZm9yIG5hdmlnYXRpbmcgQU1QIGxpbmtzLlxuICAgIGlmICh0aGlzLnZpZXdlcl8ubmF2aWdhdGVUb0FtcFVybChsb2NhdGlvbi5ocmVmLCAnPGEgcmVsPWFtcGh0bWw+JykpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGNsaWNraW5nIG9uIGEgbGluayB3aXRoIGhhc2ggbmF2aWdhdGlvbi5cbiAgICogQHBhcmFtIHshRXZlbnR9IGVcbiAgICogQHBhcmFtIHshRWxlbWVudH0gdGFyZ2V0XG4gICAqIEBwYXJhbSB7IUxvY2F0aW9ufSB0Z3RMb2NcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGhhbmRsZU5hdkNsaWNrXyhlLCB0YXJnZXQsIHRndExvYykge1xuICAgIC8vIEluIHRlc3QgbW9kZSwgd2UncmUgbm90IGFibGUgdG8gcHJvcGVybHkgZml4IHRoZSBhbmNob3IgdGFnJ3MgYmFzZSBVUkwuXG4gICAgLy8gU28sIHdlIGhhdmUgdG8gdXNlIHRoZSAobW9ja2VkKSB3aW5kb3cncyBsb2NhdGlvbiBpbnN0ZWFkLlxuICAgIGNvbnN0IGJhc2VIcmVmID0gZ2V0TW9kZSgpLnRlc3QgJiYgIXRoaXMuaXNFbWJlZF9cbiAgICAgID8gdGhpcy5hbXBkb2Mud2luLmxvY2F0aW9uLmhyZWZcbiAgICAgIDogJyc7XG4gICAgY29uc3QgY3VyTG9jID0gdGhpcy5wYXJzZVVybF8oYmFzZUhyZWYpO1xuICAgIGNvbnN0IHRndEhyZWYgPSBgJHt0Z3RMb2Mub3JpZ2lufSR7dGd0TG9jLnBhdGhuYW1lfSR7dGd0TG9jLnNlYXJjaH1gO1xuICAgIGNvbnN0IGN1ckhyZWYgPSBgJHtjdXJMb2Mub3JpZ2lufSR7Y3VyTG9jLnBhdGhuYW1lfSR7Y3VyTG9jLnNlYXJjaH1gO1xuXG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgdGFyZ2V0IGFuY2hvciBsaW5rIGlzIHRoZSBzYW1lIG9yaWdpbiArIHBhdGhcbiAgICAvLyBhcyB0aGUgY3VycmVudCBkb2N1bWVudCB0aGVuIHdlIGtub3cgd2UgYXJlIGp1c3QgbGlua2luZyB0byBhblxuICAgIC8vIGlkZW50aWZpZXIgaW4gdGhlIGRvY3VtZW50LiBPdGhlcndpc2UsIGl0J3MgYW4gZXh0ZXJuYWwgbmF2aWdhdGlvbi5cbiAgICBpZiAoIXRndExvYy5oYXNoIHx8IHRndEhyZWYgIT0gY3VySHJlZikge1xuICAgICAgaWYgKHRoaXMuaXNFbWJlZF8gfHwgdGhpcy5pc0luQUJveF8pIHtcbiAgICAgICAgLy8gVGFyZ2V0IGluIHRoZSBlbWJlZCBtdXN0IGJlIGVpdGhlciBfdG9wIG9yIF9ibGFuay4gSWYgbm9uZSBzcGVjaWZpZWQsXG4gICAgICAgIC8vIGZvcmNlIHRvIF9ibGFuay5cbiAgICAgICAgY29uc3QgdGFyZ2V0QXR0ciA9ICh0YXJnZXQuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRhcmdldEF0dHIgIT0gJ190b3AnICYmIHRhcmdldEF0dHIgIT0gJ19ibGFuaycpIHtcbiAgICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBwcmV2ZW50IGRlZmF1bHQgc28gdGhhdCB0aGUgY3VycmVudCBjbGljayBkb2VzIG5vdCBwdXNoXG4gICAgLy8gaW50byB0aGUgaGlzdG9yeSBzdGFjayBhcyB0aGlzIG1lc3NlcyB1cCB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRzXG4gICAgLy8gaGlzdG9yeSB3aGljaCBjb250YWlucyB0aGUgYW1wIGRvY3VtZW50LlxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIC8vIEZvciBhbiBlbWJlZCwgZG8gbm90IHBlcmZvcm0gc2Nyb2xsaW5nIG9yIGdsb2JhbCBoaXN0b3J5IHB1c2ggLSBib3RoIGhhdmVcbiAgICAvLyBzaWduaWZpY2FudCBVWCBhbmQgYnJvd3NlciBwcm9ibGVtcy5cbiAgICBpZiAodGhpcy5pc0VtYmVkXykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIExvb2sgZm9yIHRoZSByZWZlcmVuY2VkIGVsZW1lbnQuXG4gICAgY29uc3QgaGFzaCA9IHRndExvYy5oYXNoLnNsaWNlKDEpO1xuICAgIGxldCBlbGVtID0gbnVsbDtcbiAgICBpZiAoaGFzaCkge1xuICAgICAgY29uc3QgZXNjYXBlZEhhc2ggPSBlc2NhcGVDc3NTZWxlY3RvcklkZW50KGhhc2gpO1xuICAgICAgZWxlbSA9ICh0aGlzLnJvb3ROb2RlXy5nZXRFbGVtZW50QnlJZChoYXNoKSB8fFxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGFuY2hvcltuYW1lXSBpZiBlbGVtZW50IHdpdGggaWQgaXMgbm90IGZvdW5kLlxuICAgICAgICAgIC8vIExpbmtpbmcgdG8gYW4gYW5jaG9yIGVsZW1lbnQgd2l0aCBuYW1lIGlzIG9ic29sZXRlIGluIGh0bWw1LlxuICAgICAgICAgIHRoaXMucm9vdE5vZGVfLi8qT0sqL3F1ZXJ5U2VsZWN0b3IoYGFbbmFtZT1cIiR7ZXNjYXBlZEhhc2h9XCJdYCkpO1xuICAgIH1cblxuICAgIC8vIElmIHBvc3NpYmxlIGRvIHVwZGF0ZSB0aGUgVVJMIHdpdGggdGhlIGhhc2guIEFzIGV4cGxhaW5lZCBhYm92ZVxuICAgIC8vIHdlIGRvIGByZXBsYWNlYCB0byBhdm9pZCBtZXNzaW5nIHdpdGggdGhlIGNvbnRhaW5lcidzIGhpc3RvcnkuXG4gICAgaWYgKHRndExvYy5oYXNoICE9IGN1ckxvYy5oYXNoKSB7XG4gICAgICB0aGlzLmhpc3RvcnlfLnJlcGxhY2VTdGF0ZUZvclRhcmdldCh0Z3RMb2MuaGFzaCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9FbGVtZW50XyhlbGVtLCBoYXNoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgaGFzaCBkaWQgbm90IHVwZGF0ZSBqdXN0IHNjcm9sbCB0byB0aGUgZWxlbWVudC5cbiAgICAgIHRoaXMuc2Nyb2xsVG9FbGVtZW50XyhlbGVtLCBoYXNoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2Nyb2xscyB0aGUgcGFnZSB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHs/RWxlbWVudH0gZWxlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc2Nyb2xsVG9FbGVtZW50XyhlbGVtLCBoYXNoKSB7XG4gICAgLy8gU2Nyb2xsIHRvIHRoZSBlbGVtZW50IGlmIGZvdW5kLlxuICAgIGlmIChlbGVtKSB7XG4gICAgICAvLyBUaGUgZmlyc3QgY2FsbCB0byBzY3JvbGxJbnRvVmlldyBvdmVycmlkZXMgYnJvd3NlcnMnIGRlZmF1bHQgc2Nyb2xsaW5nXG4gICAgICAvLyBiZWhhdmlvci4gVGhlIHNlY29uZCBjYWxsIGluc2lkZXMgc2V0VGltZW91dCBhbGxvd3MgdXMgdG8gc2Nyb2xsIHRvXG4gICAgICAvLyB0aGF0IGVsZW1lbnQgcHJvcGVybHkuIFdpdGhvdXQgZG9pbmcgdGhpcywgdGhlIHZpZXdwb3J0IHdpbGwgbm90IGNhdGNoXG4gICAgICAvLyB0aGUgdXBkYXRlZCBzY3JvbGwgcG9zaXRpb24gb24gaU9TIFNhZmFyaSBhbmQgaGVuY2UgY2FsY3VsYXRlIHRoZSB3cm9uZ1xuICAgICAgLy8gc2Nyb2xsVG9wIGZvciB0aGUgc2Nyb2xsYmFyIGp1bXBpbmcgdGhlIHVzZXIgYmFjayB0byB0aGUgdG9wIGZvclxuICAgICAgLy8gZmFpbGluZyB0byBjYWxjdWxhdGUgdGhlIG5ldyBqdW1wZWQgb2Zmc2V0LiBXaXRob3V0IHRoZSBmaXJzdCBjYWxsXG4gICAgICAvLyB0aGVyZSB3aWxsIGJlIGEgdmlzdWFsIGp1bXAgZHVlIHRvIGJyb3dzZXIgc2Nyb2xsLiBTZWVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbXBwcm9qZWN0L2FtcGh0bWwvaXNzdWVzLzUzMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHRoaXMudmlld3BvcnRfLi8qT0sqL3Njcm9sbEludG9WaWV3KGVsZW0pO1xuICAgICAgU2VydmljZXMudGltZXJGb3IodGhpcy5hbXBkb2Mud2luKS5kZWxheSgoKSA9PlxuICAgICAgICB0aGlzLnZpZXdwb3J0Xy4vKk9LKi9zY3JvbGxJbnRvVmlldyhkZXYoKS5hc3NlcnRFbGVtZW50KGVsZW0pKSwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRldigpLndhcm4oVEFHLFxuICAgICAgICAgIGBmYWlsZWQgdG8gZmluZCBlbGVtZW50IHdpdGggaWQ9JHtoYXNofSBvciBhW25hbWU9JHtoYXNofV1gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcmV0dXJuIHshTG9jYXRpb259XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwYXJzZVVybF8odXJsKSB7XG4gICAgLy8gTXVzdCB1c2UgVVJMIHBhcnNpbmcgc2NvcGVkIHRvIHRoaXMucm9vdE5vZGVfIGZvciBjb3JyZWN0IEZJRSBiZWhhdmlvci5cbiAgICByZXR1cm4gU2VydmljZXMudXJsRm9yRG9jKHRoaXMucm9vdE5vZGVfKS5wYXJzZSh1cmwpO1xuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGNsaWNrIG9uIGxpbmtzIGFuZCByZXBsYWNlIHZhcmlhYmxlcyBpbiB0aGUgY2xpY2sgVVJMLlxuICogVGhlIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIGFjdHVhbCBocmVmIHZhbHVlIGFuZCBzdG9yZXMgdGhlXG4gKiB0ZW1wbGF0ZSBpbiB0aGUgT1JJR0lOQUxfSFJFRl9BVFRSSUJVVEUgYXR0cmlidXRlXG4gKiBAcGFyYW0geyEuL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gKiBAcGFyYW0geyFFdmVudH0gZVxuICovXG5mdW5jdGlvbiBtYXliZUV4cGFuZFVybFBhcmFtcyhhbXBkb2MsIGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gY2xvc2VzdEJ5VGFnKGRldigpLmFzc2VydEVsZW1lbnQoZS50YXJnZXQpLCAnQScpO1xuICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmhyZWYpIHtcbiAgICAvLyBOb3QgYSBjbGljayBvbiBhIGxpbmsuXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGhyZWZUb0V4cGFuZCA9XG4gICAgICB0YXJnZXQuZ2V0QXR0cmlidXRlKE9SSUdfSFJFRl9BVFRSSUJVVEUpIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgaWYgKCFocmVmVG9FeHBhbmQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdmFycyA9IHtcbiAgICAnQ0xJQ0tfWCc6ICgpID0+IHtcbiAgICAgIHJldHVybiBlLnBhZ2VYO1xuICAgIH0sXG4gICAgJ0NMSUNLX1knOiAoKSA9PiB7XG4gICAgICByZXR1cm4gZS5wYWdlWTtcbiAgICB9LFxuICB9O1xuICBjb25zdCBuZXdIcmVmID0gU2VydmljZXMudXJsUmVwbGFjZW1lbnRzRm9yRG9jKGFtcGRvYykuZXhwYW5kVXJsU3luYyhcbiAgICAgIGhyZWZUb0V4cGFuZCwgdmFycywgdW5kZWZpbmVkLCAvKiBvcHRfd2hpdGVsaXN0ICovIHtcbiAgICAgICAgLy8gRm9yIG5vdyB3ZSBvbmx5IGFsbG93IHRvIHJlcGxhY2UgdGhlIGNsaWNrIGxvY2F0aW9uIHZhcnNcbiAgICAgICAgLy8gYW5kIG5vdGhpbmcgZWxzZS5cbiAgICAgICAgLy8gTk9URTogQWRkaXRpb24gdG8gdGhpcyB3aGl0ZWxpc3QgcmVxdWlyZXMgYWRkaXRpb25hbCByZXZpZXcuXG4gICAgICAgICdDTElDS19YJzogdHJ1ZSxcbiAgICAgICAgJ0NMSUNLX1knOiB0cnVlLFxuICAgICAgfSk7XG4gIGlmIChuZXdIcmVmICE9IGhyZWZUb0V4cGFuZCkge1xuICAgIC8vIFN0b3JlIG9yaWdpbmFsIHZhbHVlIHNvIHRoYXQgbGF0ZXIgY2xpY2tzIGNhbiBiZSBwcm9jZXNzZWQgd2l0aFxuICAgIC8vIGZyZXNoZXN0IHZhbHVlcy5cbiAgICBpZiAoIXRhcmdldC5nZXRBdHRyaWJ1dGUoT1JJR19IUkVGX0FUVFJJQlVURSkpIHtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoT1JJR19IUkVGX0FUVFJJQlVURSwgaHJlZlRvRXhwYW5kKTtcbiAgICB9XG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnaHJlZicsIG5ld0hyZWYpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtoYXNPd259IGZyb20gJy4uLy4uL3V0aWxzL29iamVjdCc7XG5pbXBvcnQge3JldGhyb3dBc3luYywgdXNlcn0gZnJvbSAnLi4vLi4vbG9nJztcbmltcG9ydCB7dHJ5UmVzb2x2ZX0gZnJvbSAnLi4vLi4vdXRpbHMvcHJvbWlzZSc7XG5cbi8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IFBBUlNFUl9JR05PUkVfRkxBRyA9ICdgJztcblxuLyoqIEBwcml2YXRlIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgVEFHID0gJ0V4cGFuZGVyJztcblxuLyoqIEEgd2hpdGVsaXN0IGZvciByZXBsYWNlbWVudHMgd2hvc2UgdmFsdWVzIHNob3VsZCBub3QgYmUgJS1lbmNvZGVkLiAqL1xuLyoqIEBjb25zdCB7T2JqZWN0PHN0cmluZywgYm9vbGVhbj59ICovXG5leHBvcnQgY29uc3QgTk9FTkNPREVfV0hJVEVMSVNUID0geydBTkNFU1RPUl9PUklHSU4nOiB0cnVlfTtcblxuLyoqIFJ1ZGFtZW50YXJ5IHBhcnNlciB0byBoYW5kbGUgbmVzdGVkIFVybCByZXBsYWNlbWVudC4gKi9cbmV4cG9ydCBjbGFzcyBFeHBhbmRlciB7XG5cbiAgLyoqXG4gICAqIExpbmsgdGhpcyBpbnN0YW5jZSBvZiBwYXJzZXIgdG8gdGhlIGNhbGxpbmcgVXJsUmVwbGFjbWVudFxuICAgKiBAcGFyYW0geyEuLi92YXJpYWJsZS1zb3VyY2UuVmFyaWFibGVTb3VyY2V8bnVsbH0gdmFyaWFibGVTb3VyY2UgdGhlIGtleXdvcmRzIHRvIHJlcGxhY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhcmlhYmxlU291cmNlKSB7XG4gICAgdGhpcy52YXJpYWJsZVNvdXJjZV8gPSB2YXJpYWJsZVNvdXJjZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIHRha2UgdGhlIHRlbXBsYXRlIHVybCBhbmQgcmV0dXJuIGEgcHJvbWlzZSBvZiBpdHMgZXZhbHVhdGVkIHZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdXJsIHRvIGJlIHN1YnN0aXR1dGVkXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICo+PX0gb3B0X2JpbmRpbmdzIGFkZGl0aW9uYWwgb25lLW9mZiBiaW5kaW5nc1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAqPj19IG9wdF9jb2xsZWN0VmFycyBPYmplY3QgcGFzc2VkIGluIHRvIGNvbGxlY3RcbiAgICogICB2YXJpYWJsZSByZXNvbHV0aW9ucy5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3N5bmMgSWYgdGhlIG1ldGhvZCBzaG91bGQgcmVzb2x2ZSBzeW5jcm9ub3VzbHkuXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+PX0gb3B0X3doaXRlTGlzdCBPcHRpb25hbCB3aGl0ZSBsaXN0IG9mIG5hbWVzXG4gICAqICAgdGhhdCBjYW4gYmUgc3Vic3RpdHV0ZWQuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz58c3RyaW5nfVxuICAgKi9cbiAgZXhwYW5kKHVybCwgb3B0X2JpbmRpbmdzLCBvcHRfY29sbGVjdFZhcnMsIG9wdF9zeW5jLCBvcHRfd2hpdGVMaXN0KSB7XG4gICAgaWYgKCF1cmwubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gb3B0X3N5bmMgPyB1cmwgOiBQcm9taXNlLnJlc29sdmUodXJsKTtcbiAgICB9XG4gICAgY29uc3QgZXhwciA9IHRoaXMudmFyaWFibGVTb3VyY2VfXG4gICAgICAgIC5nZXRFeHByKG9wdF9iaW5kaW5ncywgLypvcHRfaWdub3JlQXJncyAqLyB0cnVlLCBvcHRfd2hpdGVMaXN0KTtcblxuICAgIGNvbnN0IG1hdGNoZXMgPSB0aGlzLmZpbmRNYXRjaGVzXyh1cmwsIGV4cHIpO1xuICAgIC8vIGlmIG5vIGtleXdvcmRzIG1vdmUgb25cbiAgICBpZiAoIW1hdGNoZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gb3B0X3N5bmMgPyB1cmwgOiBQcm9taXNlLnJlc29sdmUodXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VVcmxSZWN1cnNpdmVseV8odXJsLCBtYXRjaGVzLCBvcHRfYmluZGluZ3MsXG4gICAgICAgIG9wdF9jb2xsZWN0VmFycywgb3B0X3N5bmMpO1xuICB9XG5cblxuICAvKipcbiAgICogU3RydWN0dXJlcyB0aGUgcmVnZXggbWF0Y2hpbmcgaW50byB0aGUgZGVzaXJlZCBmb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCB1cmwgdG8gYmUgc3Vic3RpdHV0ZWRcbiAgICogQHBhcmFtIHtSZWdFeHB9IGV4cHJlc3Npb24gcmVnZXggY29udGFpbmluZyBhbGwga2V5d29yZHNcbiAgICogQHJldHVybiB7QXJyYXk8T2JqZWN0PHN0cmluZywgc3RyaW5nfG51bWJlcj4+fSBhcnJheSBvZiBvYmplY3RzIHJlcHJlc2VudGluZ1xuICAgKiAgbWF0Y2hpbmcga2V5d29yZHNcbiAgICovXG4gIGZpbmRNYXRjaGVzXyh1cmwsIGV4cHJlc3Npb24pIHtcbiAgICBjb25zdCBtYXRjaGVzID0gW107XG4gICAgdXJsLnJlcGxhY2UoZXhwcmVzc2lvbiwgKG1hdGNoLCBuYW1lLCBzdGFydFBvc2l0aW9uKSA9PiB7XG4gICAgICBjb25zdCB7bGVuZ3RofSA9IG1hdGNoO1xuICAgICAgY29uc3Qgc3RvcFBvc2l0aW9uID0gbGVuZ3RoICsgc3RhcnRQb3NpdGlvbiAtIDE7XG4gICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICBzdGFydDogc3RhcnRQb3NpdGlvbixcbiAgICAgICAgc3RvcDogc3RvcFBvc2l0aW9uLFxuICAgICAgICBuYW1lLFxuICAgICAgICBsZW5ndGgsXG4gICAgICB9O1xuICAgICAgbWF0Y2hlcy5wdXNoKGluZm8pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXRjaGVzO1xuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0geyFBcnJheTxPYmplY3Q8c3RyaW5nLCBzdHJpbmd8bnVtYmVyPj59IG1hdGNoZXMgQXJyYXkgb2Ygb2JqZWN0c1xuICAgKiAgIHJlcHJlc2VudGluZyBtYXRjaGluZyBrZXl3b3Jkcy5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfYmluZGluZ3MgQWRkaXRpb25hbCBvbmUtb2ZmIGJpbmRpbmdzLlxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAqPj19IG9wdF9jb2xsZWN0VmFycyBPYmplY3QgcGFzc2VkIGluIHRvIGNvbGxlY3RcbiAgICogICB2YXJpYWJsZSByZXNvbHV0aW9ucy5cbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3N5bmNcbiAgICogQHJldHVybiB7IVByb21pc2U8c3RyaW5nPnxzdHJpbmd9XG4gICAqL1xuICBwYXJzZVVybFJlY3Vyc2l2ZWx5Xyh1cmwsIG1hdGNoZXMsIG9wdF9iaW5kaW5ncywgb3B0X2NvbGxlY3RWYXJzLCBvcHRfc3luYykge1xuICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgbGV0IHVybEluZGV4ID0gMDtcbiAgICBsZXQgbWF0Y2hJbmRleCA9IDA7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlc1ttYXRjaEluZGV4XTtcbiAgICBsZXQgbnVtT2ZQZW5kaW5nQ2FsbHMgPSAwO1xuICAgIGxldCBpZ25vcmluZ0NoYXJzID0gZmFsc2U7XG4gICAgbGV0IG5leHRBcmdTaG91bGRCZVJhdyA9IGZhbHNlO1xuXG4gICAgY29uc3QgZXZhbHVhdGVOZXh0TGV2ZWwgPSAoKSA9PiB7XG4gICAgICBsZXQgYnVpbGRlciA9ICcnO1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgICB3aGlsZSAodXJsSW5kZXggPCB1cmwubGVuZ3RoICYmIG1hdGNoSW5kZXggPD0gbWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG1hdGNoICYmIHVybEluZGV4ID09PSBtYXRjaC5zdGFydCkge1xuICAgICAgICAgIGxldCBiaW5kaW5nO1xuICAgICAgICAgIC8vIGZpbmQgb3V0IHdoZXJlIHRoaXMga2V5d29yZCBpcyBjb21pbmcgZnJvbVxuICAgICAgICAgIGlmIChvcHRfYmluZGluZ3MgJiYgaGFzT3duKG9wdF9iaW5kaW5ncywgbWF0Y2gubmFtZSkpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvcHRpb25hbCBiaW5kaW5nc1xuICAgICAgICAgICAgYmluZGluZyA9IHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBjb25zdHJ1Y3Rpb24gaGVscHMgdXMgc2F2ZSB0aGUgbWF0Y2ggbmFtZSBhbmQgZGV0ZXJtaW5lXG4gICAgICAgICAgICAgIC8vIHByZWNlZGVuY2Ugb2YgcmVzb2x1dGlvbiBjaG9pY2VzIGluICNleHBhbmRCaW5kaW5nXyBsYXRlci5cbiAgICAgICAgICAgICAgbmFtZTogbWF0Y2gubmFtZSxcbiAgICAgICAgICAgICAgcHJpb3JpdGl6ZWQ6IG9wdF9iaW5kaW5nc1ttYXRjaC5uYW1lXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG9yIHRoZSBnbG9iYWwgc291cmNlXG4gICAgICAgICAgICBiaW5kaW5nID0gdGhpcy52YXJpYWJsZVNvdXJjZV8uZ2V0KG1hdGNoLm5hbWUpO1xuICAgICAgICAgICAgYmluZGluZy5uYW1lID0gbWF0Y2gubmFtZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1cmxJbmRleCA9IG1hdGNoLnN0b3AgKyAxO1xuICAgICAgICAgIG1hdGNoID0gbWF0Y2hlc1srK21hdGNoSW5kZXhdO1xuXG4gICAgICAgICAgaWYgKHVybFt1cmxJbmRleF0gPT09ICcoJykge1xuICAgICAgICAgICAgLy8gaWYgd2UgaGl0IGEgbGVmdCBwYXJlbnRoZXNpcyB3ZSBzdGlsbCBuZWVkIHRvIGdldCBhcmdzXG4gICAgICAgICAgICB1cmxJbmRleCsrO1xuICAgICAgICAgICAgbnVtT2ZQZW5kaW5nQ2FsbHMrKztcbiAgICAgICAgICAgIHN0YWNrLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAvLyB0cmltIHNwYWNlIGluIGJldHdlZW4gYXJnc1xuICAgICAgICAgICAgaWYgKGJ1aWxkZXIudHJpbSgpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goYnVpbGRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goZXZhbHVhdGVOZXh0TGV2ZWwoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChidWlsZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goYnVpbGRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5ldmFsdWF0ZUJpbmRpbmdfKGJpbmRpbmcsXG4gICAgICAgICAgICAgICAgLyogb3B0X2FyZ3MgKi8gdW5kZWZpbmVkLCBvcHRfY29sbGVjdFZhcnMsIG9wdF9zeW5jKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnVpbGRlciA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAodXJsW3VybEluZGV4XSA9PT0gUEFSU0VSX0lHTk9SRV9GTEFHKSB7XG4gICAgICAgICAgaWYgKCFpZ25vcmluZ0NoYXJzKSB7XG4gICAgICAgICAgICBpZ25vcmluZ0NoYXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIG5leHRBcmdTaG91bGRCZVJhdyA9IHRydWU7XG4gICAgICAgICAgICB1c2VyKCkuYXNzZXJ0KGJ1aWxkZXIudHJpbSgpID09PSAnJyxcbiAgICAgICAgICAgICAgICBgVGhlIHN1YnN0cmluZyBcIiR7YnVpbGRlcn1cIiB3YXMgbG9zdCBkdXJpbmcgdXJsLXJlcGxhY2VtZW50LiBgICtcbiAgICAgICAgICAgICAgICAnUGxlYXNlIGVuc3VyZSB0aGUgdXJsIHN5bnRheCBpcyBjb3JyZWN0Jyk7XG4gICAgICAgICAgICBidWlsZGVyID0gJyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlnbm9yaW5nQ2hhcnMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXJsSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKG51bU9mUGVuZGluZ0NhbGxzICYmIHVybFt1cmxJbmRleF0gPT09ICcsJyAmJiAhaWdub3JpbmdDaGFycykge1xuICAgICAgICAgIGlmIChidWlsZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dEFyZyA9IG5leHRBcmdTaG91bGRCZVJhdyA/IGJ1aWxkZXIgOiBidWlsZGVyLnRyaW0oKTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZXh0QXJnKTtcbiAgICAgICAgICAgIG5leHRBcmdTaG91bGRCZVJhdyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzdXBwb3J0IGV4aXN0aW5nIHR3byBjb21tYSBmb3JtYXRcbiAgICAgICAgICAvLyBlZyBDTElFTlRfSUQoX19nYSwsZ2EtdXJsKVxuICAgICAgICAgIGlmICh1cmxbdXJsSW5kZXggKyAxXSA9PT0gJywnKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goJycpOyAvLyBUT0RPKGNjb3JkcnkpOiBtYXkgd2FudCB0aGlzIHRvIGJlIHVuZGVmaW5lZCBhdCBzb21lIHBvaW50XG4gICAgICAgICAgICB1cmxJbmRleCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWlsZGVyID0gJyc7XG4gICAgICAgICAgdXJsSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEludm9rZSBhIGZ1bmN0aW9uIG9uIGV2ZXJ5IHJpZ2h0IHBhcmVudGhlc2lzIHVubGVzcyB0aGUgc3RhY2sgaXNcbiAgICAgICAgLy8gZW1wdHkuXG4gICAgICAgIGVsc2UgaWYgKG51bU9mUGVuZGluZ0NhbGxzICYmIHVybFt1cmxJbmRleF0gPT09ICcpJyAmJiAhaWdub3JpbmdDaGFycykge1xuICAgICAgICAgIHVybEluZGV4Kys7XG4gICAgICAgICAgbnVtT2ZQZW5kaW5nQ2FsbHMtLTtcbiAgICAgICAgICBjb25zdCBiaW5kaW5nID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgY29uc3QgbmV4dEFyZyA9IG5leHRBcmdTaG91bGRCZVJhdyA/IGJ1aWxkZXIgOiBidWlsZGVyLnRyaW0oKTtcbiAgICAgICAgICByZXN1bHRzLnB1c2gobmV4dEFyZyk7XG4gICAgICAgICAgbmV4dEFyZ1Nob3VsZEJlUmF3ID0gZmFsc2U7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmV2YWx1YXRlQmluZGluZ18oYmluZGluZywgLyogb3B0X2FyZ3MgKi8gcmVzdWx0cyxcbiAgICAgICAgICAgICAgb3B0X2NvbGxlY3RWYXJzLCBvcHRfc3luYyk7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYnVpbGRlciArPSB1cmxbdXJsSW5kZXhdO1xuICAgICAgICAgIHVybEluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NhcHR1cmUgdHJhaWxpbmcgY2hhcmFjdGVyc1xuICAgICAgICBpZiAodXJsSW5kZXggPT09IHVybC5sZW5ndGggJiYgYnVpbGRlci5sZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2goYnVpbGRlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdF9zeW5jKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRzLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cylcbiAgICAgICAgICAudGhlbihwcm9taXNlQXJyYXkgPT4gcHJvbWlzZUFycmF5LmpvaW4oJycpKVxuICAgICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIHJldGhyb3dBc3luYyhlKTtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGV2YWx1YXRlTmV4dExldmVsKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGJpbmRpbmcgaXMgcmVhZHkgdG8gYmUgcmVzb2x2ZWQuIERldGVybWluZXMgd2hpY2ggdmVyc2lvbiBvZlxuICAgKiBiaW5kaW5nIHRvIHVzZSBhbmQgaWYgc3luY3Jvbm91cyBvciBhc3luY3Jvbm91cyB2ZXJzaW9uIHNob3VsZCBiZSBjYWxsZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgKj59IGJpbmRpbmdJbmZvIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBuYW1lIG9mIG1hY3JvXG4gICAqICAgYW5kIHZhbHVlIHRvIGJlIHJlc29sdmVkLlxuICAgKiBAcGFyYW0ge0FycmF5PX0gb3B0X2FyZ3MgQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgbWFjcm8uXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICo+PX0gb3B0X2NvbGxlY3RWYXJzIE9iamVjdCBwYXNzZWQgaW4gdG8gY29sbGVjdFxuICAgKiAgIHZhcmlhYmxlIHJlc29sdXRpb25zLlxuICAgKiBAcGFyYW0geyo9fSBvcHRfc3luYyBXaGV0aGVyIHRoZSBiaW5kaW5nIHNob3VsZCBiZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5LlxuICAgKi9cbiAgZXZhbHVhdGVCaW5kaW5nXyhiaW5kaW5nSW5mbywgb3B0X2FyZ3MsIG9wdF9jb2xsZWN0VmFycywgb3B0X3N5bmMpIHtcbiAgICBjb25zdCB7bmFtZX0gPSBiaW5kaW5nSW5mbztcbiAgICBsZXQgYmluZGluZztcbiAgICBpZiAoYmluZGluZ0luZm8ucHJpb3JpdGl6ZWQpIHtcbiAgICAgIC8vIElmIGEgYmluZGluZyBpcyBwYXNzZWQgaW4gdGhyb3VnaCBvcHRfYmluZGluZ3MgaXQgYWx3YXlzIHRha2VzXG4gICAgICAvLyBwcmVjZWRlbmNlLlxuICAgICAgYmluZGluZyA9IGJpbmRpbmdJbmZvLnByaW9yaXRpemVkO1xuICAgIH0gZWxzZSBpZiAob3B0X3N5bmMgJiYgYmluZGluZ0luZm8uc3luYykge1xuICAgICAgLy8gVXNlIHRoZSBzeW5jIHJlc29sdXRpb24gaWYgYXZhbGlhYmxlIHdoZW4gY2FsbGVkIHN5bmNocm9ub3VzbHkuXG4gICAgICBiaW5kaW5nID0gYmluZGluZ0luZm8uc3luYztcbiAgICB9IGVsc2UgaWYgKG9wdF9zeW5jKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBzeW5jIHJlc29sdXRpb24gd2UgY2FuIG5vdCB3YWl0LlxuICAgICAgdXNlcigpLmVycm9yKFRBRywgJ2lnbm9yaW5nIGFzeW5jIHJlcGxhY2VtZW50IGtleTogJywgYmluZGluZ0luZm8ubmFtZSk7XG4gICAgICBiaW5kaW5nID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFByZWZlciB0aGUgYXN5bmMgb3ZlciB0aGUgc3luYyBidXQgaXQgbWF5IG5vdCBleGlzdC5cbiAgICAgIGJpbmRpbmcgPSBiaW5kaW5nSW5mby5hc3luYyB8fCBiaW5kaW5nSW5mby5zeW5jO1xuICAgIH1cbiAgICByZXR1cm4gb3B0X3N5bmMgP1xuICAgICAgdGhpcy5ldmFsdWF0ZUJpbmRpbmdTeW5jXyhiaW5kaW5nLCBuYW1lLCBvcHRfYXJncywgb3B0X2NvbGxlY3RWYXJzKSA6XG4gICAgICB0aGlzLmV2YWx1YXRlQmluZGluZ0FzeW5jXyhiaW5kaW5nLCBuYW1lLCBvcHRfYXJncywgb3B0X2NvbGxlY3RWYXJzKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGJpbmRpbmcgdG8gdmFsdWUgdG8gYmUgc3Vic3RpdHV0ZWQgYXN5bmNyb25vdXNseS5cbiAgICogQHBhcmFtIHsqfSBiaW5kaW5nIENvbnRhaW5lciBmb3Igc3luYy9hc3luYyByZXNvbHV0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHs/QXJyYXk9fSBvcHRfYXJncyBBcmd1bWVudHMgdG8gYmUgcGFzc2VkIGlmIGJpbmRpbmcgaXMgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICo+PX0gb3B0X2NvbGxlY3RWYXJzIE9iamVjdCBwYXNzZWQgaW4gdG8gY29sbGVjdFxuICAgKiAgIHZhcmlhYmxlIHJlc29sdXRpb25zLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTxzdHJpbmc+fSBSZXNvbHZlZCB2YWx1ZS5cbiAgICovXG4gIGV2YWx1YXRlQmluZGluZ0FzeW5jXyhiaW5kaW5nLCBuYW1lLCBvcHRfYXJncywgb3B0X2NvbGxlY3RWYXJzKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIGJpbmRpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKG9wdF9hcmdzKSB7XG4gICAgICAgICAgdmFsdWUgPSBQcm9taXNlLmFsbChvcHRfYXJncylcbiAgICAgICAgICAgICAgLnRoZW4oYXJncyA9PiBiaW5kaW5nLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IHRyeVJlc29sdmUoYmluZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gUHJvbWlzZS5yZXNvbHZlKGJpbmRpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlLnRoZW4odmFsID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQgPSAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBOT0VOQ09ERV9XSElURUxJU1RbbmFtZV0gPyB2YWwgOiBlbmNvZGVVUklDb21wb25lbnQodmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRfY29sbGVjdFZhcnMpIHtcbiAgICAgICAgICBvcHRfY29sbGVjdFZhcnNbbmFtZV0gPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICByZXRocm93QXN5bmMoZSk7XG4gICAgICAgIGlmIChvcHRfY29sbGVjdFZhcnMpIHtcbiAgICAgICAgICBvcHRfY29sbGVjdFZhcnNbbmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCcnKTtcbiAgICAgIH0pO1xuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUmVwb3J0IGVycm9yLCBidXQgZG8gbm90IGRpc3J1cHQgVVJMIHJlcGxhY2VtZW50LiBUaGlzIHdpbGxcbiAgICAgIC8vIGludGVycG9sYXRlIGFzIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICByZXRocm93QXN5bmMoZSk7XG4gICAgICBpZiAob3B0X2NvbGxlY3RWYXJzKSB7XG4gICAgICAgIG9wdF9jb2xsZWN0VmFyc1tuYW1lXSA9ICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJyk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYmluZGluZyB0byB2YWx1ZSB0byBiZSBzdWJzdGl0dXRlZCBhc3luY3Jvbm91c2x5LlxuICAgKiBAcGFyYW0geyp9IGJpbmRpbmcgQ29udGFpbmVyIGZvciBzeW5jL2FzeW5jIHJlc29sdXRpb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0gez9BcnJheT19IG9wdF9hcmdzIEFyZ3VtZW50cyB0byBiZSBwYXNzZWQgaWYgYmluZGluZyBpcyBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfY29sbGVjdFZhcnMgT2JqZWN0IHBhc3NlZCBpbiB0byBjb2xsZWN0XG4gICAqICAgdmFyaWFibGUgcmVzb2x1dGlvbnMuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gUmVzb2x2ZWQgdmFsdWUuXG4gICAqL1xuICBldmFsdWF0ZUJpbmRpbmdTeW5jXyhiaW5kaW5nLCBuYW1lLCBvcHRfYXJncywgb3B0X2NvbGxlY3RWYXJzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIGJpbmRpbmcgPT09ICdmdW5jdGlvbicgP1xuICAgICAgICBiaW5kaW5nLmFwcGx5KG51bGwsIG9wdF9hcmdzKSA6IGJpbmRpbmc7XG5cbiAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50aGVuKSB7XG4gICAgICAgIC8vIElmIGJpbmRpbmcgaXMgcGFzc2VkIGluIGFzIG9wdF9iaW5kaW5nIHdlIHRyeSB0byByZXNvbHZlIGl0IGFuZCBpdFxuICAgICAgICAvLyBtYXkgcmV0dXJuIGEgcHJvbWlzZS5cbiAgICAgICAgdXNlcigpLmVycm9yKFRBRywgJ2lnbm9yaW5nIGFzeW5jIG1hY3JvIHJlc29sdXRpb24nKTtcbiAgICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBOb3JtYWwgY2FzZS5cbiAgICAgICAgcmVzdWx0ID0gTk9FTkNPREVfV0hJVEVMSVNUW25hbWVdID8gdmFsdWUudG9TdHJpbmcoKSA6XG4gICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodmFsdWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1vc3QgbGlrZWx5IGEgYnJva2VuIGJpbmRpbmcgZ2V0cyB1cyBoZXJlLlxuICAgICAgICByZXN1bHQgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdF9jb2xsZWN0VmFycykge1xuICAgICAgICBvcHRfY29sbGVjdFZhcnNbbmFtZV0gPSByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUmVwb3J0IGVycm9yLCBidXQgZG8gbm90IGRpc3J1cHQgVVJMIHJlcGxhY2VtZW50LiBUaGlzIHdpbGxcbiAgICAgIC8vIGludGVycG9sYXRlIGFzIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICByZXRocm93QXN5bmMoZSk7XG4gICAgICBpZiAob3B0X2NvbGxlY3RWYXJzKSB7XG4gICAgICAgIG9wdF9jb2xsZWN0VmFyc1tuYW1lXSA9ICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEFzeW5jUmVzb2x2ZXJEZWYsXG4gIFJlc29sdmVyUmV0dXJuRGVmLFxuICBTeW5jUmVzb2x2ZXJEZWYsXG4gIFZhcmlhYmxlU291cmNlLFxuICBnZXROYXZpZ2F0aW9uRGF0YSxcbiAgZ2V0VGltaW5nRGF0YUFzeW5jLFxuICBnZXRUaW1pbmdEYXRhU3luYyxcbn0gZnJvbSAnLi92YXJpYWJsZS1zb3VyY2UnO1xuaW1wb3J0IHtFeHBhbmRlciwgTk9FTkNPREVfV0hJVEVMSVNUfSBmcm9tICcuL3VybC1leHBhbmRlci9leHBhbmRlcic7XG5pbXBvcnQge1NlcnZpY2VzfSBmcm9tICcuLi9zZXJ2aWNlcyc7XG5pbXBvcnQge1dpbmRvd0ludGVyZmFjZX0gZnJvbSAnLi4vd2luZG93LWludGVyZmFjZSc7XG5pbXBvcnQge1xuICBhZGRQYXJhbXNUb1VybCxcbiAgZ2V0U291cmNlVXJsLFxuICBwYXJzZVF1ZXJ5U3RyaW5nLFxuICBwYXJzZVVybERlcHJlY2F0ZWQsXG4gIHJlbW92ZUFtcEpzUGFyYW1zRnJvbVVybCxcbiAgcmVtb3ZlRnJhZ21lbnQsXG4gIHJlbW92ZVNlYXJjaCxcbn0gZnJvbSAnLi4vdXJsJztcbmltcG9ydCB7ZGV2LCByZXRocm93QXN5bmMsIHVzZXJ9IGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2dldFRyYWNrSW1wcmVzc2lvblByb21pc2V9IGZyb20gJy4uL2ltcHJlc3Npb24uanMnO1xuaW1wb3J0IHtoYXNPd259IGZyb20gJy4uL3V0aWxzL29iamVjdCc7XG5pbXBvcnQge1xuICBpbnN0YWxsU2VydmljZUluRW1iZWRTY29wZSxcbiAgcmVnaXN0ZXJTZXJ2aWNlQnVpbGRlckZvckRvYyxcbn0gZnJvbSAnLi4vc2VydmljZSc7XG5pbXBvcnQge2lzRXhwZXJpbWVudE9ufSBmcm9tICcuLi9leHBlcmltZW50cyc7XG5pbXBvcnQge2lzUHJvdG9jb2xWYWxpZH0gZnJvbSAnLi4vdXJsJztcbmltcG9ydCB7dHJ5UmVzb2x2ZX0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzZSc7XG5cbi8qKiBAcHJpdmF0ZSBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IFRBRyA9ICdVcmxSZXBsYWNlbWVudHMnO1xuY29uc3QgRVhQRVJJTUVOVF9ERUxJTUlURVIgPSAnISc7XG5jb25zdCBWQVJJQU5UX0RFTElNSVRFUiA9ICcuJztcbmNvbnN0IEdFT19ERUxJTSA9ICcsJztcbmNvbnN0IE9SSUdJTkFMX0hSRUZfUFJPUEVSVFkgPSAnYW1wLW9yaWdpbmFsLWhyZWYnO1xuY29uc3QgT1JJR0lOQUxfVkFMVUVfUFJPUEVSVFkgPSAnYW1wLW9yaWdpbmFsLXZhbHVlJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgZW5jb2RlZCBVUkkgQ29tcG9uZW50LCBvciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHZhbHVlIGlzIG51bGxpc2guXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVWYWx1ZSh2YWwpIHtcbiAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoLyoqIEB0eXBlIHtzdHJpbmd9ICovKHZhbCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIG1ldGhvZCBvbiBhIG5ldyBEYXRlIGluc3RhbmNlLiBUaGlzIGlzIGFcbiAqIGJ5dGUgc2F2aW5nIGhhY2suXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICogQHJldHVybiB7IVN5bmNSZXNvbHZlckRlZn1cbiAqL1xuZnVuY3Rpb24gZGF0ZU1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuICgpID0+IG5ldyBEYXRlKClbbWV0aG9kXSgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgcHJvcGVydHkgb2Ygc2NyZWVuLiBUaGlzIGlzIGEgYnl0ZSBzYXZpbmdcbiAqIGhhY2suXG4gKlxuICogQHBhcmFtIHshU2NyZWVufSBzY3JlZW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybiB7IVN5bmNSZXNvbHZlckRlZn1cbiAqL1xuZnVuY3Rpb24gc2NyZWVuUHJvcGVydHkoc2NyZWVuLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gKCkgPT4gc2NyZWVuW3Byb3BlcnR5XTtcbn1cblxuLyoqXG4gKiBDbGFzcyB0byBwcm92aWRlIHZhcmlhYmxlcyB0aGF0IHBlcnRhaW4gdG8gdG9wIGxldmVsIEFNUCB3aW5kb3cuXG4gKi9cbmV4cG9ydCBjbGFzcyBHbG9iYWxWYXJpYWJsZVNvdXJjZSBleHRlbmRzIFZhcmlhYmxlU291cmNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IS4vYW1wZG9jLWltcGwuQW1wRG9jfSBhbXBkb2NcbiAgICovXG4gIGNvbnN0cnVjdG9yKGFtcGRvYykge1xuICAgIHN1cGVyKGFtcGRvYyk7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlPD9PYmplY3Q8c3RyaW5nLCBzdHJpbmc+Pn0gKi9cbiAgICB0aGlzLnZhcmlhbnRzXyA9IG51bGw7XG5cbiAgICAvKiogQHByaXZhdGUgez9Qcm9taXNlPD9TaGFyZVRyYWNraW5nRnJhZ21lbnRzRGVmPn0gKi9cbiAgICB0aGlzLnNoYXJlVHJhY2tpbmdGcmFnbWVudHNfID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBzZXR0aW5nIHJlc29sdmVyIGZvciB0aW1pbmcgZGF0YSB0aGF0IHN1cHBvcnRzXG4gICAqIHN5bmMgYW5kIGFzeW5jLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFyTmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhcnRFdmVudFxuICAgKiBAcGFyYW0ge3N0cmluZz19IGVuZEV2ZW50XG4gICAqIEByZXR1cm4geyFWYXJpYWJsZVNvdXJjZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldFRpbWluZ1Jlc29sdmVyXyh2YXJOYW1lLCBzdGFydEV2ZW50LCBlbmRFdmVudCkge1xuICAgIHJldHVybiB0aGlzLnNldEJvdGgodmFyTmFtZSwgKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldFRpbWluZ0RhdGFTeW5jKHRoaXMuYW1wZG9jLndpbiwgc3RhcnRFdmVudCwgZW5kRXZlbnQpO1xuICAgIH0sICgpID0+IHtcbiAgICAgIHJldHVybiBnZXRUaW1pbmdEYXRhQXN5bmModGhpcy5hbXBkb2Mud2luLCBzdGFydEV2ZW50LCBlbmRFdmVudCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGluaXRpYWxpemUoKSB7XG4gICAgLyoqIEBjb25zdCB7IS4vdmlld3BvcnQvdmlld3BvcnQtaW1wbC5WaWV3cG9ydH0gKi9cbiAgICBjb25zdCB2aWV3cG9ydCA9IFNlcnZpY2VzLnZpZXdwb3J0Rm9yRG9jKHRoaXMuYW1wZG9jKTtcblxuICAgIC8vIFJldHVybnMgYSByYW5kb20gdmFsdWUgZm9yIGNhY2hlIGJ1c3RlcnMuXG4gICAgdGhpcy5zZXQoJ1JBTkRPTScsICgpID0+IE1hdGgucmFuZG9tKCkpO1xuXG4gICAgLy8gUHJvdmlkZXMgYSBjb3VudGVyIHN0YXJ0aW5nIGF0IDEgcGVyIGdpdmVuIHNjb3BlLlxuICAgIGNvbnN0IGNvdW50ZXJTdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5zZXQoJ0NPVU5URVInLCBzY29wZSA9PiB7XG4gICAgICByZXR1cm4gY291bnRlclN0b3JlW3Njb3BlXSA9IChjb3VudGVyU3RvcmVbc2NvcGVdIHwgMCkgKyAxO1xuICAgIH0pO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgY2Fub25pY2FsIFVSTCBmb3IgdGhpcyBBTVAgZG9jdW1lbnQuXG4gICAgdGhpcy5zZXQoJ0NBTk9OSUNBTF9VUkwnLCB0aGlzLmdldERvY0luZm9VcmxfKCdjYW5vbmljYWxVcmwnKSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBob3N0IG9mIHRoZSBjYW5vbmljYWwgVVJMIGZvciB0aGlzIEFNUCBkb2N1bWVudC5cbiAgICB0aGlzLnNldCgnQ0FOT05JQ0FMX0hPU1QnLCB0aGlzLmdldERvY0luZm9VcmxfKCdjYW5vbmljYWxVcmwnLCAnaG9zdCcpKTtcblxuICAgIC8vIFJldHVybnMgdGhlIGhvc3RuYW1lIG9mIHRoZSBjYW5vbmljYWwgVVJMIGZvciB0aGlzIEFNUCBkb2N1bWVudC5cbiAgICB0aGlzLnNldCgnQ0FOT05JQ0FMX0hPU1ROQU1FJywgdGhpcy5nZXREb2NJbmZvVXJsXygnY2Fub25pY2FsVXJsJyxcbiAgICAgICAgJ2hvc3RuYW1lJykpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgcGF0aCBvZiB0aGUgY2Fub25pY2FsIFVSTCBmb3IgdGhpcyBBTVAgZG9jdW1lbnQuXG4gICAgdGhpcy5zZXQoJ0NBTk9OSUNBTF9QQVRIJywgdGhpcy5nZXREb2NJbmZvVXJsXygnY2Fub25pY2FsVXJsJywgJ3BhdGhuYW1lJykpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgcmVmZXJyZXIgVVJMLlxuICAgIHRoaXMuc2V0QXN5bmMoJ0RPQ1VNRU5UX1JFRkVSUkVSJywgLyoqIEB0eXBlIHtBc3luY1Jlc29sdmVyRGVmfSAqLygoKSA9PiB7XG4gICAgICByZXR1cm4gU2VydmljZXMudmlld2VyRm9yRG9jKHRoaXMuYW1wZG9jKS5nZXRSZWZlcnJlclVybCgpO1xuICAgIH0pKTtcblxuICAgIC8vIExpa2UgRE9DVU1FTlRfUkVGRVJSRVIsIGJ1dCByZXR1cm5zIG51bGwgaWYgdGhlIHJlZmVycmVyIGlzIG9mXG4gICAgLy8gc2FtZSBkb21haW4gb3IgdGhlIGNvcnJlc3BvbmRpbmcgQ0ROIHByb3h5LlxuICAgIHRoaXMuc2V0QXN5bmMoJ0VYVEVSTkFMX1JFRkVSUkVSJywgLyoqIEB0eXBlIHtBc3luY1Jlc29sdmVyRGVmfSAqLygoKSA9PiB7XG4gICAgICByZXR1cm4gU2VydmljZXMudmlld2VyRm9yRG9jKHRoaXMuYW1wZG9jKS5nZXRSZWZlcnJlclVybCgpXG4gICAgICAgICAgLnRoZW4ocmVmZXJyZXIgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZWZlcnJlcikge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlZmVycmVySG9zdG5hbWUgPSBwYXJzZVVybERlcHJlY2F0ZWQoZ2V0U291cmNlVXJsKHJlZmVycmVyKSlcbiAgICAgICAgICAgICAgICAuaG9zdG5hbWU7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SG9zdG5hbWUgPVxuICAgICAgICAgICAgICAgIFdpbmRvd0ludGVyZmFjZS5nZXRIb3N0bmFtZSh0aGlzLmFtcGRvYy53aW4pO1xuICAgICAgICAgICAgcmV0dXJuIHJlZmVycmVySG9zdG5hbWUgPT09IGN1cnJlbnRIb3N0bmFtZSA/IG51bGwgOiByZWZlcnJlcjtcbiAgICAgICAgICB9KTtcbiAgICB9KSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0aXRsZSBvZiB0aGlzIEFNUCBkb2N1bWVudC5cbiAgICB0aGlzLnNldCgnVElUTEUnLCAoKSA9PiB7XG4gICAgICAvLyBUaGUgZW52aXJvbm1lbnQgbWF5IG92ZXJyaWRlIHRoZSB0aXRsZSBhbmQgc2V0IG9yaWdpbmFsVGl0bGUuIFByZWZlclxuICAgICAgLy8gdGhhdCBpZiBhdmFpbGFibGUuXG4gICAgICByZXR1cm4gdGhpcy5hbXBkb2Mud2luLmRvY3VtZW50WydvcmlnaW5hbFRpdGxlJ10gfHxcbiAgICAgICAgICB0aGlzLmFtcGRvYy53aW4uZG9jdW1lbnQudGl0bGU7XG4gICAgfSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBVUkwgZm9yIHRoaXMgQU1QIGRvY3VtZW50LlxuICAgIHRoaXMuc2V0KCdBTVBET0NfVVJMJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHJlbW92ZUZyYWdtZW50KFxuICAgICAgICAgIHRoaXMuYWRkUmVwbGFjZVBhcmFtc0lmTWlzc2luZ18oXG4gICAgICAgICAgICAgIHRoaXMuYW1wZG9jLndpbi5sb2NhdGlvbi5ocmVmKSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBob3N0IG9mIHRoZSBVUkwgZm9yIHRoaXMgQU1QIGRvY3VtZW50LlxuICAgIHRoaXMuc2V0KCdBTVBET0NfSE9TVCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh0aGlzLmFtcGRvYy53aW4ubG9jYXRpb24uaHJlZik7XG4gICAgICByZXR1cm4gdXJsICYmIHVybC5ob3N0O1xuICAgIH0pO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgaG9zdG5hbWUgb2YgdGhlIFVSTCBmb3IgdGhpcyBBTVAgZG9jdW1lbnQuXG4gICAgdGhpcy5zZXQoJ0FNUERPQ19IT1NUTkFNRScsICgpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh0aGlzLmFtcGRvYy53aW4ubG9jYXRpb24uaHJlZik7XG4gICAgICByZXR1cm4gdXJsICYmIHVybC5ob3N0bmFtZTtcbiAgICB9KTtcblxuICAgIC8vIFJldHVybnMgdGhlIFNvdXJjZSBVUkwgZm9yIHRoaXMgQU1QIGRvY3VtZW50LlxuICAgIGNvbnN0IGV4cGFuZFNvdXJjZVVybCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGRvY0luZm8gPSBTZXJ2aWNlcy5kb2N1bWVudEluZm9Gb3JEb2ModGhpcy5hbXBkb2MpO1xuICAgICAgcmV0dXJuIHJlbW92ZUZyYWdtZW50KHRoaXMuYWRkUmVwbGFjZVBhcmFtc0lmTWlzc2luZ18oZG9jSW5mby5zb3VyY2VVcmwpKTtcbiAgICB9O1xuICAgIHRoaXMuc2V0Qm90aCgnU09VUkNFX1VSTCcsXG4gICAgICAgICgpID0+IGV4cGFuZFNvdXJjZVVybCgpLFxuICAgICAgICAoKSA9PiBnZXRUcmFja0ltcHJlc3Npb25Qcm9taXNlKCkudGhlbigoKSA9PiBleHBhbmRTb3VyY2VVcmwoKSkpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgaG9zdCBvZiB0aGUgU291cmNlIFVSTCBmb3IgdGhpcyBBTVAgZG9jdW1lbnQuXG4gICAgdGhpcy5zZXQoJ1NPVVJDRV9IT1NUJywgdGhpcy5nZXREb2NJbmZvVXJsXygnc291cmNlVXJsJywgJ2hvc3QnKSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBob3N0bmFtZSBvZiB0aGUgU291cmNlIFVSTCBmb3IgdGhpcyBBTVAgZG9jdW1lbnQuXG4gICAgdGhpcy5zZXQoJ1NPVVJDRV9IT1NUTkFNRScsIHRoaXMuZ2V0RG9jSW5mb1VybF8oJ3NvdXJjZVVybCcsICdob3N0bmFtZScpKTtcblxuICAgIC8vIFJldHVybnMgdGhlIHBhdGggb2YgdGhlIFNvdXJjZSBVUkwgZm9yIHRoaXMgQU1QIGRvY3VtZW50LlxuICAgIHRoaXMuc2V0KCdTT1VSQ0VfUEFUSCcsIHRoaXMuZ2V0RG9jSW5mb1VybF8oJ3NvdXJjZVVybCcsICdwYXRobmFtZScpKTtcblxuICAgIC8vIFJldHVybnMgYSByYW5kb20gc3RyaW5nIHRoYXQgd2lsbCBiZSB0aGUgY29uc3RhbnQgZm9yIHRoZSBkdXJhdGlvbiBvZlxuICAgIC8vIHNpbmdsZSBwYWdlIHZpZXcuIEl0IHNob3VsZCBoYXZlIHN1ZmZpY2llbnQgZW50cm9weSB0byBiZSB1bmlxdWUgZm9yXG4gICAgLy8gYWxsIHRoZSBwYWdlIHZpZXdzIGEgc2luZ2xlIHVzZXIgaXMgbWFraW5nIGF0IGEgdGltZS5cbiAgICB0aGlzLnNldCgnUEFHRV9WSUVXX0lEJywgdGhpcy5nZXREb2NJbmZvVXJsXygncGFnZVZpZXdJZCcpKTtcblxuICAgIHRoaXMuc2V0Qm90aCgnUVVFUllfUEFSQU0nLCAocGFyYW0sIGRlZmF1bHRWYWx1ZSA9ICcnKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRRdWVyeVBhcmFtRGF0YV8ocGFyYW0sIGRlZmF1bHRWYWx1ZSk7XG4gICAgfSwgKHBhcmFtLCBkZWZhdWx0VmFsdWUgPSAnJykgPT4ge1xuICAgICAgcmV0dXJuIGdldFRyYWNrSW1wcmVzc2lvblByb21pc2UoKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UXVlcnlQYXJhbURhdGFfKHBhcmFtLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZmllbGQgbmFtZSBpbiB0aGUgZnJhZ21lbnQgcXVlcnkgc3RyaW5nLlxuICAgIC8vIFNlY29uZCBwYXJhbWV0ZXIgaXMgYW4gb3B0aW9uYWwgZGVmYXVsdCB2YWx1ZS5cbiAgICAvLyBGb3IgZXhhbXBsZSwgaWYgbG9jYXRpb24gaXMgJ3B1Yi5jb20vYW1wLmh0bWw/eD0xI3k9MicgdGhlblxuICAgIC8vIEZSQUdNRU5UX1BBUkFNKHkpIHJldHVybnMgJzInIGFuZCBGUkFHTUVOVF9QQVJBTSh6LCAzKSByZXR1cm5zIDMuXG4gICAgdGhpcy5zZXRBc3luYygnRlJBR01FTlRfUEFSQU0nLFxuICAgICAgICB0aGlzLmdldFZpZXdlckludGVncmF0aW9uVmFsdWVfKCdmcmFnbWVudFBhcmFtJywgJ0ZSQUdNRU5UX1BBUkFNJykpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYW5jZXN0b3JPcmlnaW5zIGFycmF5LCBpZiBhdmFpbGFibGUuXG4gICAgdGhpcy5zZXRBc3luYygnQU5DRVNUT1JfT1JJR0lOJyxcbiAgICAgICAgdGhpcy5nZXRWaWV3ZXJJbnRlZ3JhdGlvblZhbHVlXygnYW5jZXN0b3JPcmlnaW4nLCAnQU5DRVNUT1JfT1JJR0lOJykpO1xuXG4gICAgLyoqXG4gICAgICogU3RvcmVzIGNsaWVudCBpZHMgdGhhdCB3ZXJlIGdlbmVyYXRlZCBkdXJpbmcgdGhpcyBwYWdlIHZpZXdcbiAgICAgKiBpbmRleGVkIGJ5IHNjb3BlLlxuICAgICAqIEB0eXBlIHs/T2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAgICAgKi9cbiAgICBsZXQgY2xpZW50SWRzID0gbnVsbDtcbiAgICAvLyBTeW5jaHJvbm91cyBhbHRlcm5hdGl2ZS4gT25seSB3b3JrcyBmb3Igc2NvcGVzIHRoYXQgd2VyZSBwcmV2aW91c2x5XG4gICAgLy8gcmVxdWVzdGVkIHVzaW5nIHRoZSBhc3luYyBtZXRob2QuXG4gICAgdGhpcy5zZXRCb3RoKCdDTElFTlRfSUQnLCBzY29wZSA9PiB7XG4gICAgICBpZiAoIWNsaWVudElkcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbGllbnRJZHNbZGV2KCkuYXNzZXJ0U3RyaW5nKHNjb3BlKV07XG4gICAgfSwgKHNjb3BlLCBvcHRfdXNlck5vdGlmaWNhdGlvbklkLCBvcHRfY29va2llTmFtZSkgPT4ge1xuICAgICAgdXNlcigpLmFzc2VydFN0cmluZyhzY29wZSxcbiAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IHRvIENMSUVOVF9JRCwgdGhlIGZhbGxiYWNrJyArXG4gICAgICAgICAgLypPSyovJyBDb29raWUgbmFtZSwgaXMgcmVxdWlyZWQnKTtcbiAgICAgIGxldCBjb25zZW50ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAgIC8vIElmIG5vIGBvcHRfdXNlck5vdGlmaWNhdGlvbklkYCBhcmd1bWVudCBpcyBwcm92aWRlZCB0aGVuXG4gICAgICAvLyBhc3N1bWUgY29uc2VudCBpcyBnaXZlbiBieSBkZWZhdWx0LlxuICAgICAgaWYgKG9wdF91c2VyTm90aWZpY2F0aW9uSWQpIHtcbiAgICAgICAgY29uc2VudCA9IFNlcnZpY2VzLnVzZXJOb3RpZmljYXRpb25NYW5hZ2VyRm9yRG9jKHRoaXMuYW1wZG9jKVxuICAgICAgICAgICAgLnRoZW4oc2VydmljZSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmdldChvcHRfdXNlck5vdGlmaWNhdGlvbklkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFNlcnZpY2VzLmNpZEZvckRvYyh0aGlzLmFtcGRvYykudGhlbihjaWQgPT4ge1xuICAgICAgICByZXR1cm4gY2lkLmdldCh7XG4gICAgICAgICAgc2NvcGU6IGRldigpLmFzc2VydFN0cmluZyhzY29wZSksXG4gICAgICAgICAgY3JlYXRlQ29va2llSWZOb3RQcmVzZW50OiB0cnVlLFxuICAgICAgICAgIGNvb2tpZU5hbWU6IG9wdF9jb29raWVOYW1lLFxuICAgICAgICB9LCBjb25zZW50KTtcbiAgICAgIH0pLnRoZW4oY2lkID0+IHtcbiAgICAgICAgaWYgKCFjbGllbnRJZHMpIHtcbiAgICAgICAgICBjbGllbnRJZHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQSB0ZW1wb3Jhcnkgd29yayBhcm91bmQgdG8gZXh0cmFjdCBDbGllbnQgSUQgZnJvbSBfZ2EgY29va2llLiAjNTc2MVxuICAgICAgICAvLyBUT0RPOiByZXBsYWNlIHdpdGggXCJmaWx0ZXJcIiB3aGVuIGl0J3MgaW4gcGxhY2UuICMyMTk4XG4gICAgICAgIGNvbnN0IGNvb2tpZU5hbWUgPSBvcHRfY29va2llTmFtZSB8fCBzY29wZTtcbiAgICAgICAgaWYgKGNpZCAmJiBjb29raWVOYW1lID09ICdfZ2EnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjaWQgPSBleHRyYWN0Q2xpZW50SWRGcm9tR2FDb29raWUoY2lkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETyhAanJpZGdld2VsbCwgIzExMTIwKTogcmVtb3ZlIG9uY2UgIzExMTIwIGlzIGZpZ3VyZWQgb3V0LlxuICAgICAgICAgICAgLy8gRG8gbm90IGxvZyB0aGUgQ0lEIGRpcmVjdGx5LCB0aGF0J3MgUElJLlxuICAgICAgICAgICAgZGV2KCkuZXJyb3IoVEFHLCAnbm9uLXN0cmluZyBjaWQsIHdoYXQgaXMgaXQ/JywgT2JqZWN0LmtleXMoY2lkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2xpZW50SWRzW3Njb3BlXSA9IGNpZDtcbiAgICAgICAgcmV0dXJuIGNpZDtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUmV0dXJucyBhc3NpZ25lZCB2YXJpYW50IG5hbWUgZm9yIHRoZSBnaXZlbiBleHBlcmltZW50LlxuICAgIHRoaXMuc2V0QXN5bmMoJ1ZBUklBTlQnLCAvKiogQHR5cGUge0FzeW5jUmVzb2x2ZXJEZWZ9ICovKGV4cGVyaW1lbnQgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFyaWFudHNWYWx1ZV8odmFyaWFudHMgPT4ge1xuICAgICAgICBjb25zdCB2YXJpYW50ID0gdmFyaWFudHNbLyoqIEB0eXBlIHtzdHJpbmd9ICovKGV4cGVyaW1lbnQpXTtcbiAgICAgICAgdXNlcigpLmFzc2VydCh2YXJpYW50ICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICAnVGhlIHZhbHVlIHBhc3NlZCB0byBWQVJJQU5UKCkgaXMgbm90IGEgdmFsaWQgZXhwZXJpbWVudCBuYW1lOicgK1xuICAgICAgICAgICAgICAgIGV4cGVyaW1lbnQpO1xuICAgICAgICAvLyBXaGVuIG5vIHZhcmlhbnQgYXNzaWduZWQsIHVzZSByZXNlcnZlZCBrZXl3b3JkICdub25lJy5cbiAgICAgICAgcmV0dXJuIHZhcmlhbnQgPT09IG51bGwgPyAnbm9uZScgOiAvKiogQHR5cGUge3N0cmluZ30gKi8odmFyaWFudCk7XG4gICAgICB9LCAnVkFSSUFOVCcpO1xuICAgIH0pKTtcblxuICAgIC8vIFJldHVybnMgYWxsIGFzc2lnbmVkIGV4cGVyaW1lbnQgdmFyaWFudHMgaW4gYSBzZXJpYWxpemVkIGZvcm0uXG4gICAgdGhpcy5zZXRBc3luYygnVkFSSUFOVFMnLCAvKiogQHR5cGUge0FzeW5jUmVzb2x2ZXJEZWZ9ICovKCgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhcmlhbnRzVmFsdWVfKHZhcmlhbnRzID0+IHtcbiAgICAgICAgY29uc3QgZXhwZXJpbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBleHBlcmltZW50IGluIHZhcmlhbnRzKSB7XG4gICAgICAgICAgY29uc3QgdmFyaWFudCA9IHZhcmlhbnRzW2V4cGVyaW1lbnRdO1xuICAgICAgICAgIGV4cGVyaW1lbnRzLnB1c2goXG4gICAgICAgICAgICAgIGV4cGVyaW1lbnQgKyBWQVJJQU5UX0RFTElNSVRFUiArICh2YXJpYW50IHx8ICdub25lJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBleHBlcmltZW50cy5qb2luKEVYUEVSSU1FTlRfREVMSU1JVEVSKTtcbiAgICAgIH0sICdWQVJJQU5UUycpO1xuICAgIH0pKTtcblxuICAgIC8vIFJldHVybnMgYXNzaWduZWQgZ2VvIHZhbHVlIGZvciBnZW9UeXBlIG9yIGFsbCBncm91cHMuXG4gICAgdGhpcy5zZXRBc3luYygnQU1QX0dFTycsIC8qKiBAdHlwZSB7QXN5bmNSZXNvbHZlckRlZn0gKi8oZ2VvVHlwZSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRHZW9fKGdlb3MgPT4ge1xuICAgICAgICBpZiAoZ2VvVHlwZSkge1xuICAgICAgICAgIHVzZXIoKS5hc3NlcnQoZ2VvVHlwZSA9PT0gJ0lTT0NvdW50cnknLFxuICAgICAgICAgICAgICAnVGhlIHZhbHVlIHBhc3NlZCB0byBBTVBfR0VPKCkgaXMgbm90IHZhbGlkIG5hbWU6JyArIGdlb1R5cGUpO1xuICAgICAgICAgIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGdlb3NbZ2VvVHlwZV0gfHwgJ3Vua25vd24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChnZW9zLklTT0NvdW50cnlHcm91cHMuam9pbihHRU9fREVMSU0pKTtcbiAgICAgIH0sICdBTVBfR0VPJyk7XG4gICAgfSkpO1xuXG4gICAgLy8gUmV0dXJucyBpbmNvbWluZyBzaGFyZSB0cmFja2luZyBmcmFnbWVudC5cbiAgICB0aGlzLnNldEFzeW5jKCdTSEFSRV9UUkFDS0lOR19JTkNPTUlORycsIC8qKiBAdHlwZSB7QXN5bmNSZXNvbHZlckRlZn0gKi8oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNoYXJlVHJhY2tpbmdWYWx1ZV8oZnJhZ21lbnRzID0+IHtcbiAgICAgICAgICByZXR1cm4gZnJhZ21lbnRzLmluY29taW5nRnJhZ21lbnQ7XG4gICAgICAgIH0sICdTSEFSRV9UUkFDS0lOR19JTkNPTUlORycpO1xuICAgICAgfSkpO1xuXG4gICAgLy8gUmV0dXJucyBvdXRnb2luZyBzaGFyZSB0cmFja2luZyBmcmFnbWVudC5cbiAgICB0aGlzLnNldEFzeW5jKCdTSEFSRV9UUkFDS0lOR19PVVRHT0lORycsIC8qKiBAdHlwZSB7QXN5bmNSZXNvbHZlckRlZn0gKi8oXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNoYXJlVHJhY2tpbmdWYWx1ZV8oZnJhZ21lbnRzID0+IHtcbiAgICAgICAgICByZXR1cm4gZnJhZ21lbnRzLm91dGdvaW5nRnJhZ21lbnQ7XG4gICAgICAgIH0sICdTSEFSRV9UUkFDS0lOR19PVVRHT0lORycpO1xuICAgICAgfSkpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAxIEphbiAxOTcwIDAwOjAwOjAwIFVUQy5cbiAgICB0aGlzLnNldCgnVElNRVNUQU1QJywgZGF0ZU1ldGhvZCgnZ2V0VGltZScpKTtcblxuICAgIC8vIFJldHVybnMgdGhlIGh1bWFuIHJlYWRhYmxlIHRpbWVzdGFtcCBpbiBmb3JtYXQgb2ZcbiAgICAvLyAyMDExLTAxLTAxVDExOjExOjExLjYxMlouXG4gICAgdGhpcy5zZXQoJ1RJTUVTVEFNUF9JU08nLCBkYXRlTWV0aG9kKCd0b0lTT1N0cmluZycpKTtcblxuICAgIC8vIFJldHVybnMgdGhlIHVzZXIncyB0aW1lLXpvbmUgb2Zmc2V0IGZyb20gVVRDLCBpbiBtaW51dGVzLlxuICAgIHRoaXMuc2V0KCdUSU1FWk9ORScsIGRhdGVNZXRob2QoJ2dldFRpbWV6b25lT2Zmc2V0JykpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgSUFOQSB0aW1lem9uZSBjb2RlXG4gICAgdGhpcy5zZXQoJ1RJTUVaT05FX0NPREUnLCAoKSA9PiB7XG4gICAgICBsZXQgdHpDb2RlO1xuICAgICAgaWYgKCdJbnRsJyBpbiB0aGlzLmFtcGRvYy53aW4gJiZcbiAgICAgICAgJ0RhdGVUaW1lRm9ybWF0JyBpbiB0aGlzLmFtcGRvYy53aW4uSW50bCkge1xuICAgICAgICAvLyBJdCBjb3VsZCBiZSB1bmRlZmluZWQgKGkuZS4gSUUxMSlcbiAgICAgICAgdHpDb2RlID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR6Q29kZSB8fCAnJztcbiAgICB9KTtcblxuICAgIC8vIFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byB2aWV3cG9ydC5nZXRTY3JvbGxUb3AuXG4gICAgdGhpcy5zZXQoJ1NDUk9MTF9UT1AnLCAoKSA9PiB2aWV3cG9ydC5nZXRTY3JvbGxUb3AoKSk7XG5cbiAgICAvLyBSZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdmlld3BvcnQuZ2V0U2Nyb2xsTGVmdC5cbiAgICB0aGlzLnNldCgnU0NST0xMX0xFRlQnLCAoKSA9PiB2aWV3cG9ydC5nZXRTY3JvbGxMZWZ0KCkpO1xuXG4gICAgLy8gUmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHRvIHZpZXdwb3J0LmdldFNjcm9sbEhlaWdodC5cbiAgICB0aGlzLnNldCgnU0NST0xMX0hFSUdIVCcsICgpID0+IHZpZXdwb3J0LmdldFNjcm9sbEhlaWdodCgpKTtcblxuICAgIC8vIFJldHVybnMgYSBwcm9taXNlIHJlc29sdmluZyB0byB2aWV3cG9ydC5nZXRTY3JvbGxXaWR0aC5cbiAgICB0aGlzLnNldCgnU0NST0xMX1dJRFRIJywgKCkgPT4gdmlld3BvcnQuZ2V0U2Nyb2xsV2lkdGgoKSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2aWV3cG9ydCBoZWlnaHQuXG4gICAgdGhpcy5zZXQoJ1ZJRVdQT1JUX0hFSUdIVCcsICgpID0+IHZpZXdwb3J0LmdldEhlaWdodCgpKTtcblxuICAgIC8vIFJldHVybnMgdGhlIHZpZXdwb3J0IHdpZHRoLlxuICAgIHRoaXMuc2V0KCdWSUVXUE9SVF9XSURUSCcsICgpID0+IHZpZXdwb3J0LmdldFdpZHRoKCkpO1xuXG5cbiAgICBjb25zdCB7c2NyZWVufSA9IHRoaXMuYW1wZG9jLndpbjtcbiAgICAvLyBSZXR1cm5zIHNjcmVlbi53aWR0aC5cbiAgICB0aGlzLnNldCgnU0NSRUVOX1dJRFRIJywgc2NyZWVuUHJvcGVydHkoc2NyZWVuLCAnd2lkdGgnKSk7XG5cbiAgICAvLyBSZXR1cm5zIHNjcmVlbi5oZWlnaHQuXG4gICAgdGhpcy5zZXQoJ1NDUkVFTl9IRUlHSFQnLCBzY3JlZW5Qcm9wZXJ0eShzY3JlZW4sICdoZWlnaHQnKSk7XG5cbiAgICAvLyBSZXR1cm5zIHNjcmVlbi5hdmFpbEhlaWdodC5cbiAgICB0aGlzLnNldCgnQVZBSUxBQkxFX1NDUkVFTl9IRUlHSFQnLCBzY3JlZW5Qcm9wZXJ0eShzY3JlZW4sICdhdmFpbEhlaWdodCcpKTtcblxuICAgIC8vIFJldHVybnMgc2NyZWVuLmF2YWlsV2lkdGguXG4gICAgdGhpcy5zZXQoJ0FWQUlMQUJMRV9TQ1JFRU5fV0lEVEgnLCBzY3JlZW5Qcm9wZXJ0eShzY3JlZW4sICdhdmFpbFdpZHRoJykpO1xuXG4gICAgLy8gUmV0dXJucyBzY3JlZW4uQ29sb3JEZXB0aC5cbiAgICB0aGlzLnNldCgnU0NSRUVOX0NPTE9SX0RFUFRIJywgc2NyZWVuUHJvcGVydHkoc2NyZWVuLCAnY29sb3JEZXB0aCcpKTtcblxuICAgIC8vIFJldHVybnMgZG9jdW1lbnQgY2hhcmFjdGVyc2V0LlxuICAgIHRoaXMuc2V0KCdET0NVTUVOVF9DSEFSU0VUJywgKCkgPT4ge1xuICAgICAgY29uc3QgZG9jID0gdGhpcy5hbXBkb2Mud2luLmRvY3VtZW50O1xuICAgICAgcmV0dXJuIGRvYy5jaGFyYWN0ZXJTZXQgfHwgZG9jLmNoYXJzZXQ7XG4gICAgfSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBicm93c2VyIGxhbmd1YWdlLlxuICAgIHRoaXMuc2V0KCdCUk9XU0VSX0xBTkdVQUdFJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmF2ID0gdGhpcy5hbXBkb2Mud2luLm5hdmlnYXRvcjtcbiAgICAgIHJldHVybiAobmF2Lmxhbmd1YWdlIHx8IG5hdi51c2VyTGFuZ3VhZ2UgfHwgbmF2LmJyb3dzZXJMYW5ndWFnZSB8fCAnJylcbiAgICAgICAgICAudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIFJldHVybnMgdGhlIHVzZXIgYWdlbnQuXG4gICAgdGhpcy5zZXQoJ1VTRVJfQUdFTlQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYXYgPSB0aGlzLmFtcGRvYy53aW4ubmF2aWdhdG9yO1xuICAgICAgcmV0dXJuIG5hdi51c2VyQWdlbnQ7XG4gICAgfSk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0aW1lIGl0IHRvb2sgdG8gbG9hZCB0aGUgd2hvbGUgcGFnZS4gKGV4Y2x1ZGVzIGFtcC0qIGVsZW1lbnRzXG4gICAgLy8gdGhhdCBhcmUgbm90IHJlbmRlcmVkIGJ5IHRoZSBzeXN0ZW0geWV0LilcbiAgICB0aGlzLnNldFRpbWluZ1Jlc29sdmVyXyhcbiAgICAgICAgJ1BBR0VfTE9BRF9USU1FJywgJ25hdmlnYXRpb25TdGFydCcsICdsb2FkRXZlbnRTdGFydCcpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgdGltZSBpdCB0b29rIHRvIHBlcmZvcm0gRE5TIGxvb2t1cCBmb3IgdGhlIGRvbWFpbi5cbiAgICB0aGlzLnNldFRpbWluZ1Jlc29sdmVyXyhcbiAgICAgICAgJ0RPTUFJTl9MT09LVVBfVElNRScsICdkb21haW5Mb29rdXBTdGFydCcsICdkb21haW5Mb29rdXBFbmQnKTtcblxuICAgIC8vIFJldHVybnMgdGhlIHRpbWUgaXQgdG9vayB0byBjb25uZWN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAgdGhpcy5zZXRUaW1pbmdSZXNvbHZlcl8oXG4gICAgICAgICdUQ1BfQ09OTkVDVF9USU1FJywgJ2Nvbm5lY3RTdGFydCcsICdjb25uZWN0RW5kJyk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0aW1lIGl0IHRvb2sgZm9yIHNlcnZlciB0byBzdGFydCBzZW5kaW5nIGEgcmVzcG9uc2UgdG8gdGhlXG4gICAgLy8gcmVxdWVzdC5cbiAgICB0aGlzLnNldFRpbWluZ1Jlc29sdmVyXyhcbiAgICAgICAgJ1NFUlZFUl9SRVNQT05TRV9USU1FJywgJ3JlcXVlc3RTdGFydCcsICdyZXNwb25zZVN0YXJ0Jyk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0aW1lIGl0IHRvb2sgdG8gZG93bmxvYWQgdGhlIHBhZ2UuXG4gICAgdGhpcy5zZXRUaW1pbmdSZXNvbHZlcl8oXG4gICAgICAgICdQQUdFX0RPV05MT0FEX1RJTUUnLCAncmVzcG9uc2VTdGFydCcsICdyZXNwb25zZUVuZCcpO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgdGltZSBpdCB0b29rIGZvciByZWRpcmVjdHMgdG8gY29tcGxldGUuXG4gICAgdGhpcy5zZXRUaW1pbmdSZXNvbHZlcl8oXG4gICAgICAgICdSRURJUkVDVF9USU1FJywgJ25hdmlnYXRpb25TdGFydCcsICdmZXRjaFN0YXJ0Jyk7XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB0aW1lIGl0IHRvb2sgZm9yIERPTSB0byBiZWNvbWUgaW50ZXJhY3RpdmUuXG4gICAgdGhpcy5zZXRUaW1pbmdSZXNvbHZlcl8oXG4gICAgICAgICdET01fSU5URVJBQ1RJVkVfVElNRScsICduYXZpZ2F0aW9uU3RhcnQnLCAnZG9tSW50ZXJhY3RpdmUnKTtcblxuICAgIC8vIFJldHVybnMgdGhlIHRpbWUgaXQgdG9vayBmb3IgY29udGVudCB0byBsb2FkLlxuICAgIHRoaXMuc2V0VGltaW5nUmVzb2x2ZXJfKFxuICAgICAgICAnQ09OVEVOVF9MT0FEX1RJTUUnLCAnbmF2aWdhdGlvblN0YXJ0JywgJ2RvbUNvbnRlbnRMb2FkZWRFdmVudFN0YXJ0Jyk7XG5cbiAgICAvLyBBY2Nlc3M6IFJlYWRlciBJRC5cbiAgICB0aGlzLnNldEFzeW5jKCdBQ0NFU1NfUkVBREVSX0lEJywgLyoqIEB0eXBlIHtBc3luY1Jlc29sdmVyRGVmfSAqLygoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRBY2Nlc3NWYWx1ZV8oYWNjZXNzU2VydmljZSA9PiB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NTZXJ2aWNlLmdldEFjY2Vzc1JlYWRlcklkKCk7XG4gICAgICB9LCAnQUNDRVNTX1JFQURFUl9JRCcpO1xuICAgIH0pKTtcblxuICAgIC8vIEFjY2VzczogZGF0YSBmcm9tIHRoZSBhdXRob3JpemF0aW9uIHJlc3BvbnNlLlxuICAgIHRoaXMuc2V0QXN5bmMoJ0FVVEhEQVRBJywgLyoqIEB0eXBlIHtBc3luY1Jlc29sdmVyRGVmfSAqLyhmaWVsZCA9PiB7XG4gICAgICB1c2VyKCkuYXNzZXJ0KGZpZWxkLFxuICAgICAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgdG8gQVVUSERBVEEsIHRoZSBmaWVsZCwgaXMgcmVxdWlyZWQnKTtcbiAgICAgIHJldHVybiB0aGlzLmdldEFjY2Vzc1ZhbHVlXyhhY2Nlc3NTZXJ2aWNlID0+IHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc1NlcnZpY2UuZ2V0QXV0aGRhdGFGaWVsZChmaWVsZCk7XG4gICAgICB9LCAnQVVUSERBVEEnKTtcbiAgICB9KSk7XG5cbiAgICAvLyBSZXR1cm5zIGFuIGlkZW50aWZpZXIgZm9yIHRoZSB2aWV3ZXIuXG4gICAgdGhpcy5zZXRBc3luYygnVklFV0VSJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIFNlcnZpY2VzLnZpZXdlckZvckRvYyh0aGlzLmFtcGRvYylcbiAgICAgICAgICAuZ2V0Vmlld2VyT3JpZ2luKCkudGhlbih2aWV3ZXIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXdlciA9PSB1bmRlZmluZWQgPyAnJyA6IHZpZXdlcjtcbiAgICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFJldHVybnMgdGhlIHRvdGFsIGVuZ2FnZWQgdGltZSBzaW5jZSB0aGUgY29udGVudCBiZWNhbWUgdmlld2FibGUuXG4gICAgdGhpcy5zZXRBc3luYygnVE9UQUxfRU5HQUdFRF9USU1FJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIFNlcnZpY2VzLmFjdGl2aXR5Rm9yRG9jKHRoaXMuYW1wZG9jKS50aGVuKGFjdGl2aXR5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFjdGl2aXR5LmdldFRvdGFsRW5nYWdlZFRpbWUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUmV0dXJucyB0aGUgaW5jcmVtZW50YWwgZW5nYWdlZCB0aW1lIHNpbmNlIHRoZSBsYXN0IHB1c2ggdW5kZXIgdGhlXG4gICAgLy8gc2FtZSBuYW1lLlxuICAgIHRoaXMuc2V0QXN5bmMoJ0lOQ1JFTUVOVEFMX0VOR0FHRURfVElNRScsIChuYW1lLCByZXNldCkgPT4ge1xuICAgICAgcmV0dXJuIFNlcnZpY2VzLmFjdGl2aXR5Rm9yRG9jKHRoaXMuYW1wZG9jKS50aGVuKGFjdGl2aXR5ID0+IHtcbiAgICAgICAgcmV0dXJuIGFjdGl2aXR5LmdldEluY3JlbWVudGFsRW5nYWdlZFRpbWUobmFtZSwgcmVzZXQgIT09ICdmYWxzZScpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldCgnTkFWX1RJTUlORycsIChzdGFydEF0dHJpYnV0ZSwgZW5kQXR0cmlidXRlKSA9PiB7XG4gICAgICB1c2VyKCkuYXNzZXJ0KHN0YXJ0QXR0cmlidXRlLCAnVGhlIGZpcnN0IGFyZ3VtZW50IHRvIE5BVl9USU1JTkcsIHRoZSAnICtcbiAgICAgICAgICAnc3RhcnQgYXR0cmlidXRlIG5hbWUsIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm4gZ2V0VGltaW5nRGF0YVN5bmMoXG4gICAgICAgICAgdGhpcy5hbXBkb2Mud2luLFxuICAgICAgICAgIC8qKkB0eXBlIHtzdHJpbmd9Ki8oc3RhcnRBdHRyaWJ1dGUpLFxuICAgICAgICAgIC8qKkB0eXBlIHtzdHJpbmd9Ki8oZW5kQXR0cmlidXRlKSk7XG4gICAgfSk7XG4gICAgdGhpcy5zZXRBc3luYygnTkFWX1RJTUlORycsIChzdGFydEF0dHJpYnV0ZSwgZW5kQXR0cmlidXRlKSA9PiB7XG4gICAgICB1c2VyKCkuYXNzZXJ0KHN0YXJ0QXR0cmlidXRlLCAnVGhlIGZpcnN0IGFyZ3VtZW50IHRvIE5BVl9USU1JTkcsIHRoZSAnICtcbiAgICAgICAgICAnc3RhcnQgYXR0cmlidXRlIG5hbWUsIGlzIHJlcXVpcmVkJyk7XG4gICAgICByZXR1cm4gZ2V0VGltaW5nRGF0YUFzeW5jKFxuICAgICAgICAgIHRoaXMuYW1wZG9jLndpbixcbiAgICAgICAgICAvKipAdHlwZSB7c3RyaW5nfSovKHN0YXJ0QXR0cmlidXRlKSxcbiAgICAgICAgICAvKipAdHlwZSB7c3RyaW5nfSovKGVuZEF0dHJpYnV0ZSkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXQoJ05BVl9UWVBFJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldE5hdmlnYXRpb25EYXRhKHRoaXMuYW1wZG9jLndpbiwgJ3R5cGUnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0KCdOQVZfUkVESVJFQ1RfQ09VTlQnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gZ2V0TmF2aWdhdGlvbkRhdGEodGhpcy5hbXBkb2Mud2luLCAncmVkaXJlY3RDb3VudCcpO1xuICAgIH0pO1xuXG4gICAgLy8gcmV0dXJucyB0aGUgQU1QIHZlcnNpb24gbnVtYmVyXG4gICAgdGhpcy5zZXQoJ0FNUF9WRVJTSU9OJywgKCkgPT4gJyRpbnRlcm5hbFJ1bnRpbWVWZXJzaW9uJCcpO1xuXG4gICAgdGhpcy5zZXQoJ0JBQ0tHUk9VTkRfU1RBVEUnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gU2VydmljZXMudmlld2VyRm9yRG9jKHRoaXMuYW1wZG9jKS5pc1Zpc2libGUoKSA/ICcwJyA6ICcxJztcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0QXN5bmMoJ1ZJREVPX1NUQVRFJywgKGlkLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuYW1wZG9jLmdldFJvb3ROb2RlKCk7XG4gICAgICBjb25zdCB2aWRlbyA9IHVzZXIoKS5hc3NlcnRFbGVtZW50KFxuICAgICAgICAgIHJvb3QuZ2V0RWxlbWVudEJ5SWQoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChpZCkpLFxuICAgICAgICAgIGBDb3VsZCBub3QgZmluZCBhbiBlbGVtZW50IHdpdGggaWQ9XCIke2lkfVwiIGZvciBWSURFT19TVEFURWApO1xuICAgICAgcmV0dXJuIFNlcnZpY2VzLnZpZGVvTWFuYWdlckZvckRvYyh0aGlzLmFtcGRvYylcbiAgICAgICAgICAuZ2V0QW5hbHl0aWNzRGV0YWlscyh2aWRlbylcbiAgICAgICAgICAudGhlbihkZXRhaWxzID0+IGRldGFpbHMgPyBkZXRhaWxzW3Byb3BlcnR5XSA6ICcnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0QXN5bmMoJ1NUT1JZX1BBR0VfSU5ERVgnLCB0aGlzLmdldFN0b3J5VmFsdWVfKCdwYWdlSW5kZXgnLFxuICAgICAgICAnU1RPUllfUEFHRV9JTkRFWCcpKTtcblxuICAgIHRoaXMuc2V0QXN5bmMoJ1NUT1JZX1BBR0VfSUQnLCB0aGlzLmdldFN0b3J5VmFsdWVfKCdwYWdlSWQnLFxuICAgICAgICAnU1RPUllfUEFHRV9JRCcpKTtcblxuICAgIHRoaXMuc2V0QXN5bmMoJ0ZJUlNUX0NPTlRFTlRGVUxfUEFJTlQnLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdHJ5UmVzb2x2ZSgoKSA9PlxuICAgICAgICBTZXJ2aWNlcy5wZXJmb3JtYW5jZUZvcih0aGlzLmFtcGRvYy53aW4pLmdldEZpcnN0Q29udGVudGZ1bFBhaW50KCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRBc3luYygnRklSU1RfVklFV1BPUlRfUkVBRFknLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdHJ5UmVzb2x2ZSgoKSA9PlxuICAgICAgICBTZXJ2aWNlcy5wZXJmb3JtYW5jZUZvcih0aGlzLmFtcGRvYy53aW4pLmdldEZpcnN0Vmlld3BvcnRSZWFkeSgpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0QXN5bmMoJ01BS0VfQk9EWV9WSVNJQkxFJywgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRyeVJlc29sdmUoKCkgPT5cbiAgICAgICAgU2VydmljZXMucGVyZm9ybWFuY2VGb3IodGhpcy5hbXBkb2Mud2luKS5nZXRNYWtlQm9keVZpc2libGUoKSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNldEFzeW5jKCdBTVBfU1RBVEUnLCBrZXkgPT4ge1xuICAgICAgcmV0dXJuIFNlcnZpY2VzLmJpbmRGb3JEb2NPck51bGwodGhpcy5hbXBkb2MpLnRoZW4oYmluZCA9PiB7XG4gICAgICAgIGlmICghYmluZCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmluZC5nZXRTdGF0ZVZhbHVlKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoa2V5KSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZXMgYW55IHJlcGxhY2VtZW50IHBhcmFtZXRlcnMgaW50byBhIGdpdmVuIFVSTCdzIHF1ZXJ5IHN0cmluZyxcbiAgICogcHJlZmVycmluZyB2YWx1ZXMgc2V0IGluIHRoZSBvcmlnaW5hbCBxdWVyeSBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnIFRoZSBvcmlnaW5hbCBVUkxcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVzdWx0aW5nIFVSTFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkUmVwbGFjZVBhcmFtc0lmTWlzc2luZ18ob3JpZykge1xuICAgIGNvbnN0IHtyZXBsYWNlUGFyYW1zfSA9XG4gICAgLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoU2VydmljZXMuZG9jdW1lbnRJbmZvRm9yRG9jKHRoaXMuYW1wZG9jKSk7XG4gICAgY29uc3QgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKHJlbW92ZUFtcEpzUGFyYW1zRnJvbVVybChvcmlnKSk7XG4gICAgY29uc3QgcGFyYW1zID0gcGFyc2VRdWVyeVN0cmluZyh1cmwuc2VhcmNoKTtcbiAgICByZXR1cm4gYWRkUGFyYW1zVG9VcmwocmVtb3ZlU2VhcmNoKG9yaWcpLFxuICAgICAgICAvKiogQHR5cGUgeyFKc29uT2JqZWN0fSAqKi8gKE9iamVjdC5hc3NpZ24oe30sIHJlcGxhY2VQYXJhbXMsIHBhcmFtcykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGUgdmFsdWUgdmlhIG9uZSBvZiBkb2N1bWVudCBpbmZvJ3MgdXJscy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIEEgZmllbGQgb24gdGhlIGRvY0luZm9cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdXJsUHJvcCBBIHN1YnByb3BlcnR5IG9mIHRoZSBmaWVsZFxuICAgKiBAcmV0dXJuIHtUfVxuICAgKiBAdGVtcGxhdGUgVFxuICAgKi9cbiAgZ2V0RG9jSW5mb1VybF8oZmllbGQsIG9wdF91cmxQcm9wKSB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGRvY0luZm8gPSBTZXJ2aWNlcy5kb2N1bWVudEluZm9Gb3JEb2ModGhpcy5hbXBkb2MpO1xuICAgICAgY29uc3QgdmFsdWUgPSBkb2NJbmZvW2ZpZWxkXTtcbiAgICAgIHJldHVybiBvcHRfdXJsUHJvcCA/IHBhcnNlVXJsRGVwcmVjYXRlZCh2YWx1ZSlbb3B0X3VybFByb3BdIDogdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGUgdmFsdWUgdmlhIGFjY2VzcyBzZXJ2aWNlLiBJZiBhY2Nlc3Mgc2VydmljZSBpcyBub3QgY29uZmlndXJlZCxcbiAgICogdGhlIHJlc3VsdGluZyB2YWx1ZSBpcyBgbnVsbGAuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIS4uLy4uL2V4dGVuc2lvbnMvYW1wLWFjY2Vzcy8wLjEvYWNjZXNzLXZhcnMuQWNjZXNzVmFycyk6KFR8IVByb21pc2U8VD4pfSBnZXR0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJcbiAgICogQHJldHVybiB7VHxudWxsfVxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0QWNjZXNzVmFsdWVfKGdldHRlciwgZXhwcikge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICBTZXJ2aWNlcy5hY2Nlc3NTZXJ2aWNlRm9yRG9jT3JOdWxsKHRoaXMuYW1wZG9jKSxcbiAgICAgIFNlcnZpY2VzLnN1YnNjcmlwdGlvbnNTZXJ2aWNlRm9yRG9jT3JOdWxsKHRoaXMuYW1wZG9jKSxcbiAgICBdKS50aGVuKHNlcnZpY2VzID0+IHtcbiAgICAgIGNvbnN0IHNlcnZpY2UgPSAvKiogQHR5cGUgez8uLi8uLi9leHRlbnNpb25zL2FtcC1hY2Nlc3MvMC4xL2FjY2Vzcy12YXJzLkFjY2Vzc1ZhcnN9ICovIChcbiAgICAgICAgc2VydmljZXNbMF0gfHwgc2VydmljZXNbMV0pO1xuICAgICAgaWYgKCFzZXJ2aWNlKSB7XG4gICAgICAgIC8vIEFjY2Vzcy9zdWJzY3JpcHRpb25zIHNlcnZpY2UgaXMgbm90IGluc3RhbGxlZC5cbiAgICAgICAgdXNlcigpLmVycm9yKFxuICAgICAgICAgICAgVEFHLFxuICAgICAgICAgICAgJ0FjY2VzcyBvciBzdWJzY2lwdGlvbnMgc2VydmljZSBpcyBub3QgaW5zdGFsbGVkIHRvIGFjY2VzczogJyxcbiAgICAgICAgICAgIGV4cHIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXR0ZXIoc2VydmljZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBRVUVSWV9QQVJBTSBmcm9tIHRoZSBjdXJyZW50IGxvY2F0aW9uIGhyZWZcbiAgICogQHBhcmFtIHsqfSBwYXJhbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGVmYXVsdFZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFF1ZXJ5UGFyYW1EYXRhXyhwYXJhbSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdXNlcigpLmFzc2VydChwYXJhbSxcbiAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCB0byBRVUVSWV9QQVJBTSwgdGhlIHF1ZXJ5IHN0cmluZyAnICtcbiAgICAgICAgJ3BhcmFtIGlzIHJlcXVpcmVkJyk7XG4gICAgY29uc3QgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKFxuICAgICAgICByZW1vdmVBbXBKc1BhcmFtc0Zyb21VcmwodGhpcy5hbXBkb2Mud2luLmxvY2F0aW9uLmhyZWYpKTtcbiAgICBjb25zdCBwYXJhbXMgPSBwYXJzZVF1ZXJ5U3RyaW5nKHVybC5zZWFyY2gpO1xuICAgIGNvbnN0IGtleSA9IHVzZXIoKS5hc3NlcnRTdHJpbmcocGFyYW0pO1xuICAgIGNvbnN0IHtyZXBsYWNlUGFyYW1zfSA9IFNlcnZpY2VzLmRvY3VtZW50SW5mb0ZvckRvYyh0aGlzLmFtcGRvYyk7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBwYXJhbXNba2V5XTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXBsYWNlUGFyYW1zW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovKHJlcGxhY2VQYXJhbXNba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIHZpYSBhbXAtZXhwZXJpbWVudCdzIHZhcmlhbnRzIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIU9iamVjdDxzdHJpbmcsIHN0cmluZz4pOig/c3RyaW5nKX0gZ2V0dGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD9zdHJpbmc+fVxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0VmFyaWFudHNWYWx1ZV8oZ2V0dGVyLCBleHByKSB7XG4gICAgaWYgKCF0aGlzLnZhcmlhbnRzXykge1xuICAgICAgdGhpcy52YXJpYW50c18gPSBTZXJ2aWNlcy52YXJpYW50Rm9yT3JOdWxsKHRoaXMuYW1wZG9jLndpbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhcmlhbnRzXy50aGVuKHZhcmlhbnRzID0+IHtcbiAgICAgIHVzZXIoKS5hc3NlcnQodmFyaWFudHMsXG4gICAgICAgICAgJ1RvIHVzZSB2YXJpYWJsZSAlcywgYW1wLWV4cGVyaW1lbnQgc2hvdWxkIGJlIGNvbmZpZ3VyZWQnLFxuICAgICAgICAgIGV4cHIpO1xuICAgICAgcmV0dXJuIGdldHRlcih2YXJpYW50cyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIHZpYSBnZW8gc2VydmljZS5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihPYmplY3Q8c3RyaW5nLCBzdHJpbmc+KX0gZ2V0dGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByXG4gICAqIEByZXR1cm4geyFQcm9taXNlPE9iamVjdDxzdHJpbmcsKHN0cmluZ3xBcnJheTxzdHJpbmc+KT4+fVxuICAgKiBAdGVtcGxhdGUgVFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0R2VvXyhnZXR0ZXIsIGV4cHIpIHtcbiAgICByZXR1cm4gU2VydmljZXMuZ2VvRm9yRG9jT3JOdWxsKHRoaXMuYW1wZG9jKVxuICAgICAgICAudGhlbihnZW8gPT4ge1xuICAgICAgICAgIHVzZXIoKS5hc3NlcnQoZ2VvLFxuICAgICAgICAgICAgICAnVG8gdXNlIHZhcmlhYmxlICVzLCBhbXAtZ2VvIHNob3VsZCBiZSBjb25maWd1cmVkJyxcbiAgICAgICAgICAgICAgZXhwcik7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcihnZW8pO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0aGUgdmFsdWUgdmlhIGFtcC1zaGFyZS10cmFja2luZydzIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oIVNoYXJlVHJhY2tpbmdGcmFnbWVudHNEZWYpOlR9IGdldHRlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwclxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTxUPn1cbiAgICogQHRlbXBsYXRlIFRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFNoYXJlVHJhY2tpbmdWYWx1ZV8oZ2V0dGVyLCBleHByKSB7XG4gICAgaWYgKCF0aGlzLnNoYXJlVHJhY2tpbmdGcmFnbWVudHNfKSB7XG4gICAgICB0aGlzLnNoYXJlVHJhY2tpbmdGcmFnbWVudHNfID1cbiAgICAgICAgICBTZXJ2aWNlcy5zaGFyZVRyYWNraW5nRm9yT3JOdWxsKHRoaXMuYW1wZG9jLndpbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNoYXJlVHJhY2tpbmdGcmFnbWVudHNfLnRoZW4oZnJhZ21lbnRzID0+IHtcbiAgICAgIHVzZXIoKS5hc3NlcnQoZnJhZ21lbnRzLCAnVG8gdXNlIHZhcmlhYmxlICVzLCAnICtcbiAgICAgICAgICAnYW1wLXNoYXJlLXRyYWNraW5nIHNob3VsZCBiZSBjb25maWd1cmVkJyxcbiAgICAgIGV4cHIpO1xuICAgICAgcmV0dXJuIGdldHRlcigvKiogQHR5cGUgeyFTaGFyZVRyYWNraW5nRnJhZ21lbnRzRGVmfSAqLyAoZnJhZ21lbnRzKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIHZpYSBhbXAtc3RvcnkncyBzZXJ2aWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7IUFzeW5jUmVzb2x2ZXJEZWZ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBnZXRTdG9yeVZhbHVlXyhwcm9wZXJ0eSwgbmFtZSkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBzZXJ2aWNlID0gU2VydmljZXMuc3RvcnlWYXJpYWJsZVNlcnZpY2VGb3JPck51bGwodGhpcy5hbXBkb2Mud2luKTtcbiAgICAgIHJldHVybiBzZXJ2aWNlLnRoZW4oc3RvcnlWYXJpYWJsZXMgPT4ge1xuICAgICAgICB1c2VyKCkuYXNzZXJ0KHN0b3J5VmFyaWFibGVzLFxuICAgICAgICAgICAgJ1RvIHVzZSB2YXJpYWJsZSAlcyBhbXAtc3Rvcnkgc2hvdWxkIGJlIGNvbmZpZ3VyZWQnLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuIHN0b3J5VmFyaWFibGVzW3Byb3BlcnR5XTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIHZhbHVlIHZpYSBhbXAtdmlld2VyLWludGVncmF0aW9uJ3Mgc2VydmljZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4geyFBc3luY1Jlc29sdmVyRGVmfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0Vmlld2VySW50ZWdyYXRpb25WYWx1ZV8ocHJvcGVydHksIG5hbWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshQXN5bmNSZXNvbHZlckRlZn0gKi8gKFxuICAgICAgKHBhcmFtLCBkZWZhdWx0VmFsdWUgPSAnJykgPT4ge1xuICAgICAgICBjb25zdCBzZXJ2aWNlID1cbiAgICAgICAgICAgIFNlcnZpY2VzLnZpZXdlckludGVncmF0aW9uVmFyaWFibGVTZXJ2aWNlRm9yT3JOdWxsKHRoaXMuYW1wZG9jLndpbik7XG4gICAgICAgIHJldHVybiBzZXJ2aWNlLnRoZW4odmlld2VySW50ZWdyYXRpb25WYXJpYWJsZXMgPT4ge1xuICAgICAgICAgIHVzZXIoKS5hc3NlcnQodmlld2VySW50ZWdyYXRpb25WYXJpYWJsZXMsICdUbyB1c2UgdmFyaWFibGUgJXMgJyArXG4gICAgICAgICAgICAgICdhbXAtdmlld2VyLWludGVncmF0aW9uIG11c3QgYmUgaW5zdGFsbGVkJywgbmFtZSk7XG4gICAgICAgICAgcmV0dXJuIHZpZXdlckludGVncmF0aW9uVmFyaWFibGVzW3Byb3BlcnR5XShwYXJhbSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwbGFjZXMgc3Vic3RpdHV0aW9uIHZhcmlhYmxlcyB3aXRoIHRoZWlyIHZhbHVlcy5cbiAqIERvY3VtZW50IG5ldyB2YWx1ZXMgaW4gLi4vc3BlYy9hbXAtdmFyLXN1YnN0aXR1dGlvbnMubWRcbiAqIEBwYWNrYWdlIEZvciBleHBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIFVybFJlcGxhY2VtZW50cyB7XG4gIC8qKlxuICAgKiBAcGFyYW0geyEuL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gICAqIEBwYXJhbSB7IVZhcmlhYmxlU291cmNlfSB2YXJpYWJsZVNvdXJjZVxuICAgKi9cbiAgY29uc3RydWN0b3IoYW1wZG9jLCB2YXJpYWJsZVNvdXJjZSkge1xuICAgIC8qKiBAY29uc3QgeyEuL2FtcGRvYy1pbXBsLkFtcERvY30gKi9cbiAgICB0aGlzLmFtcGRvYyA9IGFtcGRvYztcblxuICAgIC8qKiBAdHlwZSB7VmFyaWFibGVTb3VyY2V9ICovXG4gICAgdGhpcy52YXJpYWJsZVNvdXJjZV8gPSB2YXJpYWJsZVNvdXJjZTtcblxuICAgIC8qKiBAdHlwZSB7IUV4cGFuZGVyfSAqL1xuICAgIHRoaXMuZXhwYW5kZXJfID0gbmV3IEV4cGFuZGVyKHRoaXMudmFyaWFibGVTb3VyY2VfKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFN5bmNocm9ub3VzbHkgZXhwYW5kcyB0aGUgcHJvdmlkZWQgc291cmNlIGJ5IHJlcGxhY2luZyBhbGwga25vd24gdmFyaWFibGVzXG4gICAqIHdpdGggdGhlaXIgcmVzb2x2ZWQgdmFsdWVzLiBPcHRpb25hbCBgb3B0X2JpbmRpbmdzYCBjYW4gYmUgdXNlZCB0byBhZGQgbmV3XG4gICAqIHZhcmlhYmxlcyBvciBvdmVycmlkZSBleGlzdGluZyBvbmVzLiAgQW55IGFzeW5jIGJpbmRpbmdzIGFyZSBpZ25vcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIChSZXNvbHZlclJldHVybkRlZnwhU3luY1Jlc29sdmVyRGVmKT49fSBvcHRfYmluZGluZ3NcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgUmVzb2x2ZXJSZXR1cm5EZWY+PX0gb3B0X2NvbGxlY3RWYXJzXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+PX0gb3B0X3doaXRlTGlzdCBPcHRpb25hbCB3aGl0ZSBsaXN0IG9mXG4gICAqICAgICBuYW1lcyB0aGF0IGNhbiBiZSBzdWJzdGl0dXRlZC5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZXhwYW5kU3RyaW5nU3luYyhzb3VyY2UsIG9wdF9iaW5kaW5ncywgb3B0X2NvbGxlY3RWYXJzLCBvcHRfd2hpdGVMaXN0KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoXG4gICAgICB0aGlzLmV4cGFuZF8oc291cmNlLCBvcHRfYmluZGluZ3MsIG9wdF9jb2xsZWN0VmFycywgLyogb3B0X3N5bmMgKi8gdHJ1ZSxcbiAgICAgICAgICBvcHRfd2hpdGVMaXN0KSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyB0aGUgcHJvdmlkZWQgc291cmNlIGJ5IHJlcGxhY2luZyBhbGwga25vd24gdmFyaWFibGVzIHdpdGggdGhlaXJcbiAgICogcmVzb2x2ZWQgdmFsdWVzLiBPcHRpb25hbCBgb3B0X2JpbmRpbmdzYCBjYW4gYmUgdXNlZCB0byBhZGQgbmV3IHZhcmlhYmxlc1xuICAgKiBvciBvdmVycmlkZSBleGlzdGluZyBvbmVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICo+PX0gb3B0X2JpbmRpbmdzXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBleHBhbmRTdHJpbmdBc3luYyhzb3VyY2UsIG9wdF9iaW5kaW5ncykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPHN0cmluZz59ICovICh0aGlzLmV4cGFuZF8oc291cmNlLCBvcHRfYmluZGluZ3MpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbm91c2x5IGV4cGFuZHMgdGhlIHByb3ZpZGVkIFVSTCBieSByZXBsYWNpbmcgYWxsIGtub3duIHZhcmlhYmxlc1xuICAgKiB3aXRoIHRoZWlyIHJlc29sdmVkIHZhbHVlcy4gT3B0aW9uYWwgYG9wdF9iaW5kaW5nc2AgY2FuIGJlIHVzZWQgdG8gYWRkIG5ld1xuICAgKiB2YXJpYWJsZXMgb3Igb3ZlcnJpZGUgZXhpc3Rpbmcgb25lcy4gIEFueSBhc3luYyBiaW5kaW5ncyBhcmUgaWdub3JlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAoUmVzb2x2ZXJSZXR1cm5EZWZ8IVN5bmNSZXNvbHZlckRlZik+PX0gb3B0X2JpbmRpbmdzXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIFJlc29sdmVyUmV0dXJuRGVmPj19IG9wdF9jb2xsZWN0VmFyc1xuICAgKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPj19IG9wdF93aGl0ZUxpc3QgT3B0aW9uYWwgd2hpdGUgbGlzdCBvZlxuICAgKiAgICAgbmFtZXMgdGhhdCBjYW4gYmUgc3Vic3RpdHV0ZWQuXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGV4cGFuZFVybFN5bmModXJsLCBvcHRfYmluZGluZ3MsIG9wdF9jb2xsZWN0VmFycywgb3B0X3doaXRlTGlzdCkge1xuICAgIHJldHVybiB0aGlzLmVuc3VyZVByb3RvY29sTWF0Y2hlc18odXJsLCAvKiogQHR5cGUge3N0cmluZ30gKi8gKHRoaXMuZXhwYW5kXyhcbiAgICAgICAgdXJsLCBvcHRfYmluZGluZ3MsIG9wdF9jb2xsZWN0VmFycywgLyogb3B0X3N5bmMgKi8gdHJ1ZSxcbiAgICAgICAgb3B0X3doaXRlTGlzdCkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmRzIHRoZSBwcm92aWRlZCBVUkwgYnkgcmVwbGFjaW5nIGFsbCBrbm93biB2YXJpYWJsZXMgd2l0aCB0aGVpclxuICAgKiByZXNvbHZlZCB2YWx1ZXMuIE9wdGlvbmFsIGBvcHRfYmluZGluZ3NgIGNhbiBiZSB1c2VkIHRvIGFkZCBuZXcgdmFyaWFibGVzXG4gICAqIG9yIG92ZXJyaWRlIGV4aXN0aW5nIG9uZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfYmluZGluZ3NcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj49fSBvcHRfd2hpdGVMaXN0IE9wdGlvbmFsIHdoaXRlIGxpc3Qgb2YgbmFtZXNcbiAgICogICAgIHRoYXQgY2FuIGJlIHN1YnN0aXR1dGVkLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgZXhwYW5kVXJsQXN5bmModXJsLCBvcHRfYmluZGluZ3MsIG9wdF93aGl0ZUxpc3QpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTxzdHJpbmc+fSAqLyAoXG4gICAgICB0aGlzLmV4cGFuZF8odXJsLCBvcHRfYmluZGluZ3MsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLFxuICAgICAgICAgIG9wdF93aGl0ZUxpc3QpLnRoZW4oXG4gICAgICAgICAgcmVwbGFjZW1lbnQgPT4gdGhpcy5lbnN1cmVQcm90b2NvbE1hdGNoZXNfKHVybCwgcmVwbGFjZW1lbnQpKSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyBhbiBpbnB1dCBlbGVtZW50IHZhbHVlIGF0dHJpYnV0ZSB3aXRoIHZhcmlhYmxlIHN1YnN0aXR1dGVkLlxuICAgKiBAcGFyYW0geyFIVE1MSW5wdXRFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBleHBhbmRJbnB1dFZhbHVlQXN5bmMoZWxlbWVudCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPHN0cmluZz59ICovIChcbiAgICAgIHRoaXMuZXhwYW5kSW5wdXRWYWx1ZV8oZWxlbWVudCwgLypvcHRfc3luYyovIGZhbHNlKSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyBhbiBpbnB1dCBlbGVtZW50IHZhbHVlIGF0dHJpYnV0ZSB3aXRoIHZhcmlhYmxlIHN1YnN0aXR1dGVkLlxuICAgKiBAcGFyYW0geyFIVE1MSW5wdXRFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ30gUmVwbGFjZWQgc3RyaW5nIGZvciB0ZXN0aW5nXG4gICAqL1xuICBleHBhbmRJbnB1dFZhbHVlU3luYyhlbGVtZW50KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoXG4gICAgICB0aGlzLmV4cGFuZElucHV0VmFsdWVfKGVsZW1lbnQsIC8qb3B0X3N5bmMqLyB0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICogRXhwYW5kcyBpbiBpbnB1dCBlbGVtZW50IHZhbHVlIGF0dHJpYnV0ZSB3aXRoIHZhcmlhYmxlIHN1YnN0aXR1dGVkLlxuICAgKiBAcGFyYW0geyFIVE1MSW5wdXRFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9zeW5jXG4gICAqIEByZXR1cm4ge3N0cmluZ3whUHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgZXhwYW5kSW5wdXRWYWx1ZV8oZWxlbWVudCwgb3B0X3N5bmMpIHtcbiAgICBkZXYoKS5hc3NlcnQoZWxlbWVudC50YWdOYW1lID09ICdJTlBVVCcgJiZcbiAgICAgICAgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgfHwgJycpLnRvTG93ZXJDYXNlKCkgPT0gJ2hpZGRlbicsXG4gICAgJ0lucHV0IHZhbHVlIGV4cGFuc2lvbiBvbmx5IHdvcmtzIG9uIGhpZGRlbiBpbnB1dCBmaWVsZHM6ICVzJywgZWxlbWVudCk7XG5cbiAgICBjb25zdCB3aGl0ZWxpc3QgPSB0aGlzLmdldFdoaXRlbGlzdEZvckVsZW1lbnRfKGVsZW1lbnQpO1xuICAgIGlmICghd2hpdGVsaXN0KSB7XG4gICAgICByZXR1cm4gb3B0X3N5bmMgPyBlbGVtZW50LnZhbHVlIDogUHJvbWlzZS5yZXNvbHZlKGVsZW1lbnQudmFsdWUpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudFtPUklHSU5BTF9WQUxVRV9QUk9QRVJUWV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZWxlbWVudFtPUklHSU5BTF9WQUxVRV9QUk9QRVJUWV0gPSBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmV4cGFuZF8oXG4gICAgICAgIGVsZW1lbnRbT1JJR0lOQUxfVkFMVUVfUFJPUEVSVFldIHx8IGVsZW1lbnQudmFsdWUsXG4gICAgICAgIC8qIG9wdF9iaW5kaW5ncyAqLyB1bmRlZmluZWQsXG4gICAgICAgIC8qIG9wdF9jb2xsZWN0VmFycyAqLyB1bmRlZmluZWQsXG4gICAgICAgIC8qIG9wdF9zeW5jICovIG9wdF9zeW5jLFxuICAgICAgICAvKiBvcHRfd2hpdGVsaXN0ICovIHdoaXRlbGlzdCk7XG5cbiAgICBpZiAob3B0X3N5bmMpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlID0gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnRoZW4obmV3VmFsdWUgPT4ge1xuICAgICAgZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXBsYWNlbWVudCB3aGl0ZWxpc3QgZnJvbSBlbGVtZW50cycgZGF0YS1hbXAtcmVwbGFjZSBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj49fSBvcHRfc3VwcG9ydGVkUmVwbGFjZW1lbnQgT3B0aW9uYWwgc3VwcG9ydGVkXG4gICAqIHJlcGxhY2VtZW50IHRoYXQgZmlsdGVycyB3aGl0ZWxpc3QgdG8gYSBzdWJzZXQuXG4gICAqIEByZXR1cm4geyFPYmplY3Q8c3RyaW5nLCBib29sZWFuPnx1bmRlZmluZWR9XG4gICAqL1xuICBnZXRXaGl0ZWxpc3RGb3JFbGVtZW50XyhlbGVtZW50LCBvcHRfc3VwcG9ydGVkUmVwbGFjZW1lbnQpIHtcbiAgICBjb25zdCB3aGl0ZWxpc3QgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtcmVwbGFjZScpO1xuICAgIGlmICghd2hpdGVsaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RlZFJlcGxhY2VtZW50cyA9IHt9O1xuICAgIHdoaXRlbGlzdC50cmltKCkuc3BsaXQoL1xccysvKS5mb3JFYWNoKHJlcGxhY2VtZW50ID0+IHtcbiAgICAgIGlmICghb3B0X3N1cHBvcnRlZFJlcGxhY2VtZW50IHx8XG4gICAgICAgICAgaGFzT3duKG9wdF9zdXBwb3J0ZWRSZXBsYWNlbWVudCwgcmVwbGFjZW1lbnQpKSB7XG4gICAgICAgIHJlcXVlc3RlZFJlcGxhY2VtZW50c1tyZXBsYWNlbWVudF0gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlcigpLndhcm4oJ1VSTCcsICdJZ25vcmluZyB1bnN1cHBvcnRlZCByZXBsYWNlbWVudCcsIHJlcGxhY2VtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVxdWVzdGVkUmVwbGFjZW1lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAgKiBSZXR1cm5zIHdoZXRoZXIgdmFyaWFibGUgc3Vic3RpdHV0aW9uIGlzIGFsbG93ZWQgZm9yIGdpdmVuIHVybC5cbiAgICAqIEBwYXJhbSB7IUxvY2F0aW9ufSB1cmxcbiAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgKi9cbiAgaXNBbGxvd2VkT3JpZ2luXyh1cmwpIHtcbiAgICBjb25zdCBkb2NJbmZvID0gU2VydmljZXMuZG9jdW1lbnRJbmZvRm9yRG9jKHRoaXMuYW1wZG9jKTtcbiAgICBpZiAodXJsLm9yaWdpbiA9PSBwYXJzZVVybERlcHJlY2F0ZWQoZG9jSW5mby5jYW5vbmljYWxVcmwpLm9yaWdpbiB8fFxuICAgICAgICB1cmwub3JpZ2luID09IHBhcnNlVXJsRGVwcmVjYXRlZChkb2NJbmZvLnNvdXJjZVVybCkub3JpZ2luKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRhID0gdGhpcy5hbXBkb2MuZ2V0Um9vdE5vZGUoKS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnbWV0YVtuYW1lPWFtcC1saW5rLXZhcmlhYmxlLWFsbG93ZWQtb3JpZ2luXScpO1xuXG4gICAgaWYgKG1ldGEgJiYgbWV0YS5oYXNBdHRyaWJ1dGUoJ2NvbnRlbnQnKSkge1xuICAgICAgY29uc3Qgd2hpdGVsaXN0ID0gbWV0YS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKS50cmltKCkuc3BsaXQoL1xccysvKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2hpdGVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09IHBhcnNlVXJsRGVwcmVjYXRlZCh3aGl0ZWxpc3RbaV0pLm9yaWdpbikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHZhbHVlcyBpbiB0aGUgbGluayBvZiBhbiBhbmNob3IgdGFnIGlmXG4gICAqIC0gdGhlIGxpbmsgb3B0cyBpbnRvIGl0ICh2aWEgZGF0YS1hbXAtcmVwbGFjZSBhcmd1bWVudClcbiAgICogLSB0aGUgZGVzdGluYXRpb24gaXMgdGhlIHNvdXJjZSBvciBjYW5vbmljYWwgb3JpZ2luIG9mIHRoaXMgZG9jLlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IEFuIGFuY2hvciBlbGVtZW50LlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGRlZmF1bHRVcmxQYXJhbXMgdG8gZXhwYW5kIGxpbmsgaWYgY2FsbGVyIHJlcXVlc3QuXG4gICAqIEByZXR1cm4ge3N0cmluZ3x1bmRlZmluZWR9IFJlcGxhY2VkIHN0cmluZyBmb3IgdGVzdGluZ1xuICAgKi9cbiAgbWF5YmVFeHBhbmRMaW5rKGVsZW1lbnQsIGRlZmF1bHRVcmxQYXJhbXMpIHtcbiAgICBkZXYoKS5hc3NlcnQoZWxlbWVudC50YWdOYW1lID09ICdBJyk7XG4gICAgY29uc3Qgc3VwcG9ydGVkUmVwbGFjZW1lbnRzID0ge1xuICAgICAgJ0NMSUVOVF9JRCc6IHRydWUsXG4gICAgICAnUVVFUllfUEFSQU0nOiB0cnVlLFxuICAgIH07XG4gICAgY29uc3QgYWRkaXRpb25hbFVybFBhcmFtZXRlcnMgPVxuICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1hbXAtYWRkcGFyYW1zJykgfHwgJyc7XG4gICAgY29uc3Qgd2hpdGVsaXN0ID0gdGhpcy5nZXRXaGl0ZWxpc3RGb3JFbGVtZW50XyhcbiAgICAgICAgZWxlbWVudCwgc3VwcG9ydGVkUmVwbGFjZW1lbnRzKTtcblxuICAgIGlmICghd2hpdGVsaXN0ICYmICFhZGRpdGlvbmFsVXJsUGFyYW1ldGVycyAmJiAhZGVmYXVsdFVybFBhcmFtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPUklHSU5BTF9IUkVGX1BST1BFUlRZIGhhcyB0aGUgdmFsdWUgb2YgdGhlIGhyZWYgXCJwcmUtcmVwbGFjZW1lbnRcIi5cbiAgICAvLyBXZSBzZXQgdGhpcyB0byB0aGUgb3JpZ2luYWwgdmFsdWUgYmVmb3JlIGRvaW5nIGFueSB3b3JrIGFuZCB1c2UgaXRcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHJlcGxhY2VtZW50cywgc28gdGhhdCBlYWNoIHJ1biBnZXRzIGEgZnJlc2ggdmFsdWUuXG4gICAgbGV0IGhyZWYgPSBkZXYoKS5hc3NlcnRTdHJpbmcoXG4gICAgICAgIGVsZW1lbnRbT1JJR0lOQUxfSFJFRl9QUk9QRVJUWV0gfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7XG4gICAgY29uc3QgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKGhyZWYpO1xuICAgIGlmIChlbGVtZW50W09SSUdJTkFMX0hSRUZfUFJPUEVSVFldID09IG51bGwpIHtcbiAgICAgIGVsZW1lbnRbT1JJR0lOQUxfSFJFRl9QUk9QRVJUWV0gPSBocmVmO1xuICAgIH1cbiAgICBpZiAoYWRkaXRpb25hbFVybFBhcmFtZXRlcnMpIHtcbiAgICAgIGhyZWYgPSBhZGRQYXJhbXNUb1VybChcbiAgICAgICAgICBocmVmLFxuICAgICAgICAgIHBhcnNlUXVlcnlTdHJpbmcoYWRkaXRpb25hbFVybFBhcmFtZXRlcnMpKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0FsbG93ZWRPcmlnaW4gPSB0aGlzLmlzQWxsb3dlZE9yaWdpbl8odXJsKTtcbiAgICBpZiAoIWlzQWxsb3dlZE9yaWdpbikge1xuICAgICAgaWYgKHdoaXRlbGlzdCkge1xuICAgICAgICB1c2VyKCkud2FybignVVJMJywgJ0lnbm9yaW5nIGxpbmsgcmVwbGFjZW1lbnQnLCBocmVmLFxuICAgICAgICAgICAgJyBiZWNhdXNlIHRoZSBsaW5rIGRvZXMgbm90IGdvIHRvIHRoZSBkb2N1bWVudFxcJ3MnICtcbiAgICAgICAgICAgICcgc291cmNlLCBjYW5vbmljYWwsIG9yIHdoaXRlbGlzdGVkIG9yaWdpbi4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LmhyZWYgPSBocmVmO1xuICAgIH1cblxuICAgIC8vIE5vdGUgdGhhdCBkZWZhdWx0VXJsUGFyYW1zIGlzIHRyZWF0ZWQgZGlmZmVyZW50bHkgdGhhblxuICAgIC8vIGFkZGl0aW9uYWxVcmxQYXJhbWV0ZXJzIGluIHR3byB3YXlzICMxOiBJZiB0aGUgb3V0Z29pbmcgdXJsIG9yaWdpbiBpcyBub3RcbiAgICAvLyB3aGl0ZWxpc3RlZDogYWRkaXRpb25hbFVybFBhcmFtZXRlcnMgYXJlIGFsd2F5cyBhcHBlbmRlZCBieSBub3QgZXhwYW5kZWQsXG4gICAgLy8gZGVmYXVsdFVybFBhcmFtcyB3aWxsIG5vdCBiZSBhcHBlbmRlZC4gIzI6IElmIHRoZSBleHBhbnNpb24gZnVuY3Rpb24gaXNcbiAgICAvLyBub3Qgd2hpdGVsaXN0ZWQ6IGFkZGl0aW9uYWxVcmxQYXJhbXRlcnMgd2lsbCBub3QgYmUgZXhwYW5kZWQsXG4gICAgLy8gZGVmYXVsdFVybFBhcmFtcyB3aWxsIGJ5IGRlZmF1bHQgc3VwcG9ydCBRVUVSWV9QQVJBTSwgYW5kIHdpbGwgc3RpbGwgYmVcbiAgICAvLyBleHBhbmRlZC5cbiAgICBpZiAoZGVmYXVsdFVybFBhcmFtcykge1xuICAgICAgaWYgKCF3aGl0ZWxpc3QgfHwgIXdoaXRlbGlzdFsnUVVFUllfUEFSQU0nXSkge1xuICAgICAgICAvLyBvdmVycmlkZSB3aGl0ZWxpc3QgYW5kIGV4cGFuZCBkZWZhdWx0VXJsUGFyYW1zO1xuICAgICAgICBjb25zdCBvdmVycmlkZVdoaXRlbGlzdCA9IHsnUVVFUllfUEFSQU0nOiB0cnVlfTtcbiAgICAgICAgZGVmYXVsdFVybFBhcmFtcyA9IHRoaXMuZXhwYW5kVXJsU3luYyhcbiAgICAgICAgICAgIGRlZmF1bHRVcmxQYXJhbXMsXG4gICAgICAgICAgICAvKiBvcHRfYmluZGluZ3MgKi8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgLyogb3B0X2NvbGxlY3RWYXJzICovIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIC8qIG9wdF93aGl0ZWxpc3QgKi8gb3ZlcnJpZGVXaGl0ZWxpc3QpO1xuICAgICAgfVxuICAgICAgaHJlZiA9IGFkZFBhcmFtc1RvVXJsKGhyZWYsIHBhcnNlUXVlcnlTdHJpbmcoZGVmYXVsdFVybFBhcmFtcykpO1xuICAgIH1cblxuICAgIGlmICh3aGl0ZWxpc3QpIHtcbiAgICAgIGhyZWYgPSB0aGlzLmV4cGFuZFVybFN5bmMoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICAvKiBvcHRfYmluZGluZ3MgKi8gdW5kZWZpbmVkLFxuICAgICAgICAgIC8qIG9wdF9jb2xsZWN0VmFycyAqLyB1bmRlZmluZWQsXG4gICAgICAgICAgLyogb3B0X3doaXRlbGlzdCAqLyB3aGl0ZWxpc3QpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmhyZWYgPSBocmVmO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfYmluZGluZ3NcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfY29sbGVjdFZhcnNcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3N5bmNcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgYm9vbGVhbj49fSBvcHRfd2hpdGVMaXN0IE9wdGlvbmFsIHdoaXRlIGxpc3Qgb2YgbmFtZXNcbiAgICogICAgIHRoYXQgY2FuIGJlIHN1YnN0aXR1dGVkLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTxzdHJpbmc+fHN0cmluZ31cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGV4cGFuZF8odXJsLCBvcHRfYmluZGluZ3MsIG9wdF9jb2xsZWN0VmFycywgb3B0X3N5bmMsIG9wdF93aGl0ZUxpc3QpIHtcbiAgICBjb25zdCBpc1YyRXhwZXJpbWVudE9uID0gaXNFeHBlcmltZW50T24odGhpcy5hbXBkb2Mud2luLFxuICAgICAgICAndXJsLXJlcGxhY2VtZW50LXYyJyk7XG4gICAgaWYgKGlzVjJFeHBlcmltZW50T24pIHtcbiAgICAgIC8vIFRPRE8oY2NvcmR5KSBzdXBwb3J0IG9wdF9jb2xsZWN0VmFycyAmJiBvcHRfd2hpdGVsaXN0XG4gICAgICByZXR1cm4gdGhpcy5leHBhbmRlcl8uLypPSyovZXhwYW5kKHVybCwgb3B0X2JpbmRpbmdzLCBvcHRfY29sbGVjdFZhcnMsXG4gICAgICAgICAgb3B0X3N5bmMsIG9wdF93aGl0ZUxpc3QpO1xuICAgIH1cblxuICAgIC8vIGV4aXN0aW5nIHBhcnNpbmcgbWV0aG9kXG4gICAgY29uc3QgZXhwciA9IHRoaXMudmFyaWFibGVTb3VyY2VfLmdldEV4cHIob3B0X2JpbmRpbmdzKTtcbiAgICBsZXQgcmVwbGFjZW1lbnRQcm9taXNlO1xuICAgIGxldCByZXBsYWNlbWVudCA9IHVybC5yZXBsYWNlKGV4cHIsIChtYXRjaCwgbmFtZSwgb3B0X3N0cmFyZ3MpID0+IHtcbiAgICAgIGxldCBhcmdzID0gW107XG4gICAgICBpZiAodHlwZW9mIG9wdF9zdHJhcmdzID09ICdzdHJpbmcnKSB7XG4gICAgICAgIGFyZ3MgPSBvcHRfc3RyYXJncy5zcGxpdCgvLFxccyovKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRfd2hpdGVMaXN0ICYmICFvcHRfd2hpdGVMaXN0W25hbWVdKSB7XG4gICAgICAgIC8vIERvIG5vdCBwZXJmb3JtIHN1YnN0aXR1dGlvbiBhbmQganVzdCByZXR1cm4gYmFjayB0aGUgb3JpZ2luYWxcbiAgICAgICAgLy8gbWF0Y2gsIHNvIHRoYXQgdGhlIHN0cmluZyBkb2Vzbid0IGNoYW5nZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuICAgICAgbGV0IGJpbmRpbmc7XG4gICAgICBpZiAob3B0X2JpbmRpbmdzICYmIChuYW1lIGluIG9wdF9iaW5kaW5ncykpIHtcbiAgICAgICAgYmluZGluZyA9IG9wdF9iaW5kaW5nc1tuYW1lXTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpbmRpbmcgPSB0aGlzLnZhcmlhYmxlU291cmNlXy5nZXQobmFtZSkpKSB7XG4gICAgICAgIGlmIChvcHRfc3luYykge1xuICAgICAgICAgIGJpbmRpbmcgPSBiaW5kaW5nLnN5bmM7XG4gICAgICAgICAgaWYgKCFiaW5kaW5nKSB7XG4gICAgICAgICAgICB1c2VyKCkuZXJyb3IoVEFHLCAnaWdub3JpbmcgYXN5bmMgcmVwbGFjZW1lbnQga2V5OiAnLCBuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmluZGluZyA9IGJpbmRpbmcuYXN5bmMgfHwgYmluZGluZy5zeW5jO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgdmFsO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsID0gKHR5cGVvZiBiaW5kaW5nID09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICBiaW5kaW5nLmFwcGx5KG51bGwsIGFyZ3MpIDogYmluZGluZztcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVwb3J0IGVycm9yLCBidXQgZG8gbm90IGRpc3J1cHQgVVJMIHJlcGxhY2VtZW50LiBUaGlzIHdpbGxcbiAgICAgICAgLy8gaW50ZXJwb2xhdGUgYXMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgICAgaWYgKG9wdF9zeW5jKSB7XG4gICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0aHJvd0FzeW5jKGUpO1xuICAgICAgfVxuICAgICAgLy8gSW4gY2FzZSB0aGUgcHJvZHVjZWQgdmFsdWUgaXMgYSBwcm9taXNlLCB3ZSBkb24ndCBhY3R1YWxseVxuICAgICAgLy8gcmVwbGFjZSBhbnl0aGluZyBoZXJlLCBidXQgZG8gaXQgYWdhaW4gd2hlbiB0aGUgcHJvbWlzZSByZXNvbHZlcy5cbiAgICAgIGlmICh2YWwgJiYgdmFsLnRoZW4pIHtcbiAgICAgICAgaWYgKG9wdF9zeW5jKSB7XG4gICAgICAgICAgdXNlcigpLmVycm9yKFRBRywgJ2lnbm9yaW5nIHByb21pc2UgdmFsdWUgZm9yIGtleTogJywgbmFtZSk7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBAY29uc3Qge1Byb21pc2U8c3RyaW5nPn0gKi9cbiAgICAgICAgY29uc3QgcCA9IHZhbC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIC8vIFJlcG9ydCBlcnJvciwgYnV0IGRvIG5vdCBkaXNydXB0IFVSTCByZXBsYWNlbWVudC4gVGhpcyB3aWxsXG4gICAgICAgICAgLy8gaW50ZXJwb2xhdGUgYXMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgICAgICByZXRocm93QXN5bmMoZXJyKTtcbiAgICAgICAgfSkudGhlbih2ID0+IHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IHJlcGxhY2VtZW50LnJlcGxhY2UobWF0Y2gsXG4gICAgICAgICAgICAgIE5PRU5DT0RFX1dISVRFTElTVFttYXRjaF0gPyB2IDogZW5jb2RlVmFsdWUodikpO1xuICAgICAgICAgIGlmIChvcHRfY29sbGVjdFZhcnMpIHtcbiAgICAgICAgICAgIG9wdF9jb2xsZWN0VmFyc1ttYXRjaF0gPSB2O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXBsYWNlbWVudFByb21pc2UpIHtcbiAgICAgICAgICByZXBsYWNlbWVudFByb21pc2UgPSByZXBsYWNlbWVudFByb21pc2UudGhlbigoKSA9PiBwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudFByb21pc2UgPSBwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRfY29sbGVjdFZhcnMpIHtcbiAgICAgICAgb3B0X2NvbGxlY3RWYXJzW21hdGNoXSA9IHZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBOT0VOQ09ERV9XSElURUxJU1RbbWF0Y2hdID8gdmFsIDogZW5jb2RlVmFsdWUodmFsKTtcbiAgICB9KTtcblxuICAgIGlmIChyZXBsYWNlbWVudFByb21pc2UpIHtcbiAgICAgIHJlcGxhY2VtZW50UHJvbWlzZSA9IHJlcGxhY2VtZW50UHJvbWlzZS50aGVuKCgpID0+IHJlcGxhY2VtZW50KTtcbiAgICB9XG5cbiAgICBpZiAob3B0X3N5bmMpIHtcbiAgICAgIHJldHVybiByZXBsYWNlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcGxhY2VtZW50UHJvbWlzZSB8fCBQcm9taXNlLnJlc29sdmUocmVwbGFjZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3RzIGFsbCBzdWJzdGl0dXRpb25zIGluIHRoZSBwcm92aWRlZCBVUkwgYW5kIGV4cGFuZHMgdGhlbSB0byB0aGVcbiAgICogdmFsdWVzIGZvciBrbm93biB2YXJpYWJsZXMuIE9wdGlvbmFsIGBvcHRfYmluZGluZ3NgIGNhbiBiZSB1c2VkIHRvIGFkZFxuICAgKiBuZXcgdmFyaWFibGVzIG9yIG92ZXJyaWRlIGV4aXN0aW5nIG9uZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfYmluZGluZ3NcbiAgICogQHJldHVybiB7IVByb21pc2U8IU9iamVjdDxzdHJpbmcsICo+Pn1cbiAgICovXG4gIGNvbGxlY3RWYXJzKHVybCwgb3B0X2JpbmRpbmdzKSB7XG4gICAgY29uc3QgdmFycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV0dXJuIHRoaXMuZXhwYW5kXyh1cmwsIG9wdF9iaW5kaW5ncywgdmFycykudGhlbigoKSA9PiB2YXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb2xsZWN0cyBzdWJzdGl0dXRpb25zIGluIHRoZSBgc3JjYCBhdHRyaWJ1dGUgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAgICogdGhhdCBhcmUgX25vdF8gd2hpdGVsaXN0ZWQgdmlhIGBkYXRhLWFtcC1yZXBsYWNlYCBvcHQtaW4gYXR0cmlidXRlLlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICAgKi9cbiAgY29sbGVjdFVud2hpdGVsaXN0ZWRWYXJzU3luYyhlbGVtZW50KSB7XG4gICAgY29uc3QgdXJsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgIGNvbnN0IHZhcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuZXhwYW5kU3RyaW5nU3luYyh1cmwsIC8qIG9wdF9iaW5kaW5ncyAqLyB1bmRlZmluZWQsIHZhcnMpO1xuICAgIGNvbnN0IHZhck5hbWVzID0gT2JqZWN0LmtleXModmFycyk7XG5cbiAgICBjb25zdCB3aGl0ZWxpc3QgPSB0aGlzLmdldFdoaXRlbGlzdEZvckVsZW1lbnRfKGVsZW1lbnQpO1xuICAgIGlmICh3aGl0ZWxpc3QpIHtcbiAgICAgIHJldHVybiB2YXJOYW1lcy5maWx0ZXIodiA9PiAhd2hpdGVsaXN0W3ZdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWxsIHZhcnMgYXJlIHVud2hpdGVsaXN0ZWQgaWYgdGhlIGVsZW1lbnQgaGFzIG5vIHdoaXRlbGlzdC5cbiAgICAgIHJldHVybiB2YXJOYW1lcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyB0aGF0IHRoZSBwcm90b2NvbCBvZiB0aGUgb3JpZ2luYWwgdXJsIG1hdGNoZXMgdGhlIHByb3RvY29sIG9mIHRoZVxuICAgKiByZXBsYWNlbWVudCB1cmwuIFJldHVybnMgdGhlIHJlcGxhY2VtZW50IGlmIHRoZXkgZG8sIHRoZSBvcmlnaW5hbCBpZiB0aGV5XG4gICAqIGRvIG5vdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZW5zdXJlUHJvdG9jb2xNYXRjaGVzXyh1cmwsIHJlcGxhY2VtZW50KSB7XG4gICAgY29uc3QgbmV3UHJvdG9jb2wgPSBwYXJzZVVybERlcHJlY2F0ZWQocmVwbGFjZW1lbnQsIC8qIG9wdF9ub2NhY2hlICovIHRydWUpXG4gICAgICAgIC5wcm90b2NvbDtcbiAgICBjb25zdCBvbGRQcm90b2NvbCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh1cmwsIC8qIG9wdF9ub2NhY2hlICovIHRydWUpXG4gICAgICAgIC5wcm90b2NvbDtcbiAgICBpZiAobmV3UHJvdG9jb2wgIT0gb2xkUHJvdG9jb2wpIHtcbiAgICAgIHVzZXIoKS5lcnJvcihUQUcsICdJbGxlZ2FsIHJlcGxhY2VtZW50IG9mIHRoZSBwcm90b2NvbDogJywgdXJsKTtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIHVzZXIoKS5hc3NlcnQoaXNQcm90b2NvbFZhbGlkKHJlcGxhY2VtZW50KSxcbiAgICAgICAgJ1RoZSByZXBsYWNlbWVudCB1cmwgaGFzIGludmFsaWQgcHJvdG9jb2w6ICVzJywgcmVwbGFjZW1lbnQpO1xuXG4gICAgcmV0dXJuIHJlcGxhY2VtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge1ZhcmlhYmxlU291cmNlfVxuICAgKi9cbiAgZ2V0VmFyaWFibGVTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFyaWFibGVTb3VyY2VfO1xuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdHMgY2xpZW50IElEIGZyb20gYSBfZ2EgY29va2llLlxuICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2FuYWx5dGljc2pzL2Nvb2tpZXMtdXNlci1pZFxuICogQHBhcmFtIHtzdHJpbmd9IGdhQ29va2llXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Q2xpZW50SWRGcm9tR2FDb29raWUoZ2FDb29raWUpIHtcbiAgcmV0dXJuIGdhQ29va2llLnJlcGxhY2UoL14oR0ExfDEpXFwuW1xcZC1dK1xcLi8sICcnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyEuL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsVXJsUmVwbGFjZW1lbnRzU2VydmljZUZvckRvYyhhbXBkb2MpIHtcbiAgcmVnaXN0ZXJTZXJ2aWNlQnVpbGRlckZvckRvYyhcbiAgICAgIGFtcGRvYyxcbiAgICAgICd1cmwtcmVwbGFjZScsXG4gICAgICBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVcmxSZXBsYWNlbWVudHMoZG9jLCBuZXcgR2xvYmFsVmFyaWFibGVTb3VyY2UoZG9jKSk7XG4gICAgICB9KTtcbn1cblxuXG4vKipcbiAqIEBwYXJhbSB7IS4vYW1wZG9jLWltcGwuQW1wRG9jfSBhbXBkb2NcbiAqIEBwYXJhbSB7IVdpbmRvd30gZW1iZWRXaW5cbiAqIEBwYXJhbSB7IVZhcmlhYmxlU291cmNlfSB2YXJTb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxVcmxSZXBsYWNlbWVudHNGb3JFbWJlZChhbXBkb2MsIGVtYmVkV2luLCB2YXJTb3VyY2UpIHtcbiAgaW5zdGFsbFNlcnZpY2VJbkVtYmVkU2NvcGUoZW1iZWRXaW4sICd1cmwtcmVwbGFjZScsXG4gICAgICBuZXcgVXJsUmVwbGFjZW1lbnRzKGFtcGRvYywgdmFyU291cmNlKSk7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge3tpbmNvbWluZ0ZyYWdtZW50OiBzdHJpbmcsIG91dGdvaW5nRnJhZ21lbnQ6IHN0cmluZ319XG4gKi9cbmxldCBTaGFyZVRyYWNraW5nRnJhZ21lbnRzRGVmO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge2Rldn0gZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7aXNGaW5pdGVOdW1iZXJ9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7bG9hZFByb21pc2V9IGZyb20gJy4uL2V2ZW50LWhlbHBlcic7XG5cbi8qKiBAdHlwZWRlZiB7c3RyaW5nfG51bWJlcnxib29sZWFufHVuZGVmaW5lZHxudWxsfSAqL1xubGV0IFJlc29sdmVyUmV0dXJuRGVmO1xuXG4vKiogQHR5cGVkZWYge2Z1bmN0aW9uKC4uLiopOlJlc29sdmVyUmV0dXJuRGVmfSAqL1xuZXhwb3J0IGxldCBTeW5jUmVzb2x2ZXJEZWY7XG5cbi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oLi4uKik6IVByb21pc2U8UmVzb2x2ZXJSZXR1cm5EZWY+fSAqL1xuZXhwb3J0IGxldCBBc3luY1Jlc29sdmVyRGVmO1xuXG4vKiogQHR5cGVkZWYge3tzeW5jOiBTeW5jUmVzb2x2ZXJEZWYsIGFzeW5jOiBBc3luY1Jlc29sdmVyRGVmfX0gKi9cbmxldCBSZXBsYWNlbWVudERlZjtcblxuXG4vKipcbiAqIFJldHVybnMgbmF2aWdhdGlvbiB0aW1pbmcgaW5mb3JtYXRpb24gYmFzZWQgb24gdGhlIHN0YXJ0IGFuZCBlbmQgZXZlbnRzLlxuICogVGhlIGRhdGEgZm9yIHRoZSB0aW1pbmcgZXZlbnRzIGlzIHJldHJpZXZlZCBmcm9tIHBlcmZvcm1hbmNlLnRpbWluZyBBUEkuXG4gKiBJZiBzdGFydCBhbmQgZW5kIGV2ZW50cyBhcmUgYm90aCBnaXZlbiwgdGhlIHJlc3VsdCBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gKiB0aGUgdHdvLiBJZiBvbmx5IHN0YXJ0IGV2ZW50IGlzIGdpdmVuLCB0aGUgcmVzdWx0IGlzIHRoZSB0aW1pbmcgdmFsdWUgYXRcbiAqIHN0YXJ0IGV2ZW50LlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydEV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZz19IGVuZEV2ZW50XG4gKiBAcmV0dXJuIHshUHJvbWlzZTxSZXNvbHZlclJldHVybkRlZj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1pbmdEYXRhQXN5bmMod2luLCBzdGFydEV2ZW50LCBlbmRFdmVudCkge1xuICByZXR1cm4gbG9hZFByb21pc2Uod2luKS50aGVuKCgpID0+IHtcbiAgICByZXR1cm4gZ2V0VGltaW5nRGF0YVN5bmMod2luLCBzdGFydEV2ZW50LCBlbmRFdmVudCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgbmF2aWdhdGlvbiB0aW1pbmcgaW5mb3JtYXRpb24gYmFzZWQgb24gdGhlIHN0YXJ0IGFuZCBlbmQgZXZlbnRzLlxuICogVGhlIGRhdGEgZm9yIHRoZSB0aW1pbmcgZXZlbnRzIGlzIHJldHJpZXZlZCBmcm9tIHBlcmZvcm1hbmNlLnRpbWluZyBBUEkuXG4gKiBJZiBzdGFydCBhbmQgZW5kIGV2ZW50cyBhcmUgYm90aCBnaXZlbiwgdGhlIHJlc3VsdCBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gKiB0aGUgdHdvLiBJZiBvbmx5IHN0YXJ0IGV2ZW50IGlzIGdpdmVuLCB0aGUgcmVzdWx0IGlzIHRoZSB0aW1pbmcgdmFsdWUgYXRcbiAqIHN0YXJ0IGV2ZW50LiBFbmZvcmNlcyBzeW5jaHJvbm91cyBldmFsdWF0aW9uLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydEV2ZW50XG4gKiBAcGFyYW0ge3N0cmluZz19IGVuZEV2ZW50XG4gKiBAcmV0dXJuIHtSZXNvbHZlclJldHVybkRlZn0gdW5kZWZpbmVkIGlmIEFQSSBpcyBub3QgYXZhaWxhYmxlLCBlbXB0eSBzdHJpbmdcbiAqICAgIGlmIGl0IGlzIG5vdCB5ZXQgYXZhaWxhYmxlLCBvciB2YWx1ZSBhcyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWluZ0RhdGFTeW5jKHdpbiwgc3RhcnRFdmVudCwgZW5kRXZlbnQpIHtcbiAgY29uc3QgdGltaW5nSW5mbyA9IHdpblsncGVyZm9ybWFuY2UnXSAmJiB3aW5bJ3BlcmZvcm1hbmNlJ11bJ3RpbWluZyddO1xuICBpZiAoIXRpbWluZ0luZm8gfHwgdGltaW5nSW5mb1snbmF2aWdhdGlvblN0YXJ0J10gPT0gMCkge1xuICAgIC8vIE5hdmlnYXRpb24gdGltaW5nIEFQSSBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG1ldHJpYyA9IChlbmRFdmVudCA9PT0gdW5kZWZpbmVkKVxuICAgID8gdGltaW5nSW5mb1tzdGFydEV2ZW50XVxuICAgIDogdGltaW5nSW5mb1tlbmRFdmVudF0gLSB0aW1pbmdJbmZvW3N0YXJ0RXZlbnRdO1xuXG4gIGlmICghaXNGaW5pdGVOdW1iZXIobWV0cmljKSB8fCBtZXRyaWMgPCAwKSB7XG4gICAgLy8gVGhlIG1ldHJpYyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWV0cmljO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBuYXZpZ2F0aW9uIGluZm9ybWF0aW9uIGZyb20gdGhlIGN1cnJlbnQgYnJvd3NpbmcgY29udGV4dC5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gKiBAcmV0dXJuIHtSZXNvbHZlclJldHVybkRlZn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROYXZpZ2F0aW9uRGF0YSh3aW4sIGF0dHJpYnV0ZSkge1xuICBjb25zdCBuYXZpZ2F0aW9uSW5mbyA9IHdpblsncGVyZm9ybWFuY2UnXSAmJlxuICAgIHdpblsncGVyZm9ybWFuY2UnXVsnbmF2aWdhdGlvbiddO1xuICBpZiAoIW5hdmlnYXRpb25JbmZvIHx8IG5hdmlnYXRpb25JbmZvW2F0dHJpYnV0ZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFBlcmZvcm1hbmNlTmF2aWdhdGlvbiBpbnRlcmZhY2UgaXMgbm90IHN1cHBvcnRlZCBvciBhdHRyaWJ1dGUgaXMgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiBuYXZpZ2F0aW9uSW5mb1thdHRyaWJ1dGVdO1xufVxuXG5cbi8qKlxuICogQSBjbGFzcyB0byBwcm92aWRlIHZhcmlhYmxlIHN1YnN0aXR1dGlvbiByZWxhdGVkIGZlYXR1cmVzLiBFeHRlbmQgdGhpcyBjbGFzc1xuICogYW5kIG92ZXJyaWRlIGluaXRpYWxpemUoKSB0byBhZGQgbW9yZSBzdXBwb3J0ZWQgdmFyaWFibGVzLlxuICovXG5leHBvcnQgY2xhc3MgVmFyaWFibGVTb3VyY2Uge1xuICAvKipcbiAgICogQHBhcmFtIHshLi9hbXBkb2MtaW1wbC5BbXBEb2N9IGFtcGRvY1xuICAgKi9cbiAgY29uc3RydWN0b3IoYW1wZG9jKSB7XG4gICAgLyoqIEBwcm90ZWN0ZWQgQGNvbnN0IHshLi9hbXBkb2MtaW1wbC5BbXBEb2N9ICovXG4gICAgdGhpcy5hbXBkb2MgPSBhbXBkb2M7XG5cbiAgICAvKiogQHByaXZhdGUgeyFSZWdFeHB8dW5kZWZpbmVkfSAqL1xuICAgIHRoaXMucmVwbGFjZW1lbnRFeHByXyA9IHVuZGVmaW5lZDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IVJlZ0V4cHx1bmRlZmluZWR9ICovXG4gICAgdGhpcy5yZXBsYWNlbWVudEV4cHJWMl8gPSB1bmRlZmluZWQ7XG5cbiAgICAvKiogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIVJlcGxhY2VtZW50RGVmPn0gKi9cbiAgICB0aGlzLnJlcGxhY2VtZW50c18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgLyoqIEBwcml2YXRlIHtib29sZWFufSAqL1xuICAgIHRoaXMuaW5pdGlhbGl6ZWRfID0gZmFsc2U7XG5cbiAgICB0aGlzLmdldFVybE1hY3JvV2hpdGVsaXN0XygpO1xuICB9XG5cbiAgLyoqXG4gICAqIExhemlseSBpbml0aWFsaXplIHRoZSBkZWZhdWx0IHJlcGxhY2VtZW50cy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluaXRpYWxpemVfKCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZWRfID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBzZXQgYWxsIHRoZSB2YXJpYWJsZXMgc3VwcG9ydGVkIGJ5IGRlcml2ZWQgY2xhc3MuXG4gICAqL1xuICBpbml0aWFsaXplKCkge1xuICAgIC8vIE5lZWRzIHRvIGJlIGltcGxlbWVudGVkIGJ5IGRlcml2ZWQgY2xhc3Nlcy5cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgZXhpc3RzIHRvIGFzc2lzdCBzdHViYmluZyBpbiB0ZXN0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7IVJlcGxhY2VtZW50RGVmfVxuICAgKi9cbiAgZ2V0KG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWRfKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVfKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZW1lbnRzX1tuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3luY2hyb25vdXMgdmFsdWUgcmVzb2x2ZXIgZm9yIHRoZSB2YXJpYWJsZSB3aXRoIHRoZSBzcGVjaWZpZWQgbmFtZS5cbiAgICogVGhlIHZhbHVlIHJlc29sdmVyIG1heSBvcHRpb25hbGx5IHRha2UgYW4gZXh0cmEgcGFyYW1ldGVyLlxuICAgKiBDYW4gYmUgY2FsbGVkIGluIGNvbmp1bmN0aW9uIHdpdGggc2V0QXN5bmMgdG8gYWxsb3cgZm9yIGFkZGl0aW9uYWxcbiAgICogYXN5bmNocm9ub3VzIHJlc29sdmVyIHdoZXJlIGV4cGFuZCB3aWxsIHVzZSBhc3luYyBhbmQgZXhwYW5kU3luYyB0aGUgc3luY1xuICAgKiB2ZXJzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFyTmFtZVxuICAgKiBAcGFyYW0geyFTeW5jUmVzb2x2ZXJEZWZ9IHN5bmNSZXNvbHZlclxuICAgKiBAcmV0dXJuIHshVmFyaWFibGVTb3VyY2V9XG4gICAqL1xuICBzZXQodmFyTmFtZSwgc3luY1Jlc29sdmVyKSB7XG4gICAgZGV2KCkuYXNzZXJ0KHZhck5hbWUuaW5kZXhPZignUkVUVVJOJykgPT0gLTEpO1xuICAgIHRoaXMucmVwbGFjZW1lbnRzX1t2YXJOYW1lXSA9XG4gICAgICAgIHRoaXMucmVwbGFjZW1lbnRzX1t2YXJOYW1lXSB8fCB7c3luYzogdW5kZWZpbmVkLCBhc3luYzogdW5kZWZpbmVkfTtcbiAgICB0aGlzLnJlcGxhY2VtZW50c19bdmFyTmFtZV0uc3luYyA9IHN5bmNSZXNvbHZlcjtcbiAgICB0aGlzLnJlcGxhY2VtZW50RXhwcl8gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yZXBsYWNlbWVudEV4cHJWMl8gPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBhc3luYyB2YWx1ZSByZXNvbHZlciBmb3IgdGhlIHZhcmlhYmxlIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICAgKiBUaGUgdmFsdWUgcmVzb2x2ZXIgbWF5IG9wdGlvbmFsbHkgdGFrZSBhbiBleHRyYSBwYXJhbWV0ZXIuXG4gICAqIENhbiBiZSBjYWxsZWQgaW4gY29uanVjdGlvbiB3aXRoIHNldEFzeW5jIHRvIGFsbG93IGZvciBhZGRpdGlvbmFsXG4gICAqIGFzeW5jaHJvbm91cyByZXNvbHZlciB3aGVyZSBleHBhbmQgd2lsbCB1c2UgYXN5bmMgYW5kIGV4cGFuZFN5bmMgdGhlIHN5bmNcbiAgICogdmVyc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhck5hbWVcbiAgICogQHBhcmFtIHshQXN5bmNSZXNvbHZlckRlZn0gYXN5bmNSZXNvbHZlclxuICAgKiBAcmV0dXJuIHshVmFyaWFibGVTb3VyY2V9XG4gICAqL1xuICBzZXRBc3luYyh2YXJOYW1lLCBhc3luY1Jlc29sdmVyKSB7XG4gICAgZGV2KCkuYXNzZXJ0KHZhck5hbWUuaW5kZXhPZignUkVUVVJOJykgPT0gLTEpO1xuICAgIHRoaXMucmVwbGFjZW1lbnRzX1t2YXJOYW1lXSA9XG4gICAgICAgIHRoaXMucmVwbGFjZW1lbnRzX1t2YXJOYW1lXSB8fCB7c3luYzogdW5kZWZpbmVkLCBhc3luYzogdW5kZWZpbmVkfTtcbiAgICB0aGlzLnJlcGxhY2VtZW50c19bdmFyTmFtZV0uYXN5bmMgPSBhc3luY1Jlc29sdmVyO1xuICAgIHRoaXMucmVwbGFjZW1lbnRFeHByXyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJlcGxhY2VtZW50RXhwclYyXyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIHNldCBib3RoIHN5bmMgYW5kIGFzeW5jIHJlc29sdmVycy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhck5hbWVcbiAgICogQHBhcmFtIHshU3luY1Jlc29sdmVyRGVmfSBzeW5jUmVzb2x2ZXJcbiAgICogQHBhcmFtIHshQXN5bmNSZXNvbHZlckRlZn0gYXN5bmNSZXNvbHZlclxuICAgKiBAcmV0dXJuIHshVmFyaWFibGVTb3VyY2V9XG4gICAqL1xuICBzZXRCb3RoKHZhck5hbWUsIHN5bmNSZXNvbHZlciwgYXN5bmNSZXNvbHZlcikge1xuICAgIHJldHVybiB0aGlzLnNldCh2YXJOYW1lLCBzeW5jUmVzb2x2ZXIpLnNldEFzeW5jKHZhck5hbWUsIGFzeW5jUmVzb2x2ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBjYW4gYmUgdXNlZCB0byBkZXRlY3QgYWxsIHRoZSB2YXJpYWJsZXNcbiAgICogaW4gYSB0ZW1wbGF0ZS5cbiAgICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgKj49fSBvcHRfYmluZGluZ3NcbiAgICogQHBhcmFtIHtib29sZWFuPX0gaXNWMiBGbGFnIHRvIGlnbm9yZSBjYXB0dXJlIG9mIGFyZ3MuXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+PX0gb3B0X3doaXRlTGlzdCBPcHRpb25hbCB3aGl0ZSBsaXN0IG9mIG5hbWVzXG4gICAqICAgdGhhdCBjYW4gYmUgc3Vic3RpdHV0ZWQuXG4gICAqL1xuICBnZXRFeHByKG9wdF9iaW5kaW5ncywgaXNWMiwgb3B0X3doaXRlTGlzdCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZF8pIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZV8oKTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRpdGlvbmFsS2V5cyA9IG9wdF9iaW5kaW5ncyA/IE9iamVjdC5rZXlzKG9wdF9iaW5kaW5ncykgOiBudWxsO1xuICAgIGlmIChhZGRpdGlvbmFsS2V5cyAmJiBhZGRpdGlvbmFsS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBhbGxLZXlzID0gT2JqZWN0LmtleXModGhpcy5yZXBsYWNlbWVudHNfKTtcbiAgICAgIGFkZGl0aW9uYWxLZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKHRoaXMucmVwbGFjZW1lbnRzX1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhbGxLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZEV4cHJfKGFsbEtleXMsIGlzVjIsIG9wdF93aGl0ZUxpc3QpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucmVwbGFjZW1lbnRFeHByXyAmJiAhaXNWMikge1xuICAgICAgdGhpcy5yZXBsYWNlbWVudEV4cHJfID0gdGhpcy5idWlsZEV4cHJfKFxuICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucmVwbGFjZW1lbnRzXykpO1xuICAgIH1cbiAgICAvLyBzb21ldGltZXMgdGhlIHYxIGV4cGFuZCB3aWxsIGJlIGNhbGxlZCBiZWZvcmUgdGhlIHYyXG4gICAgLy8gc28gd2UgbmVlZCB0byBjYWNoZSBib3RoIHZlcnNpb25zXG4gICAgaWYgKCF0aGlzLnJlcGxhY2VtZW50RXhwclYyXyAmJiBpc1YyKSB7XG4gICAgICB0aGlzLnJlcGxhY2VtZW50RXhwclYyXyA9IHRoaXMuYnVpbGRFeHByXyhcbiAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnJlcGxhY2VtZW50c18pLCBpc1YyLCBvcHRfd2hpdGVMaXN0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWMiA/IHRoaXMucmVwbGFjZW1lbnRFeHByVjJfIDpcbiAgICAgIHRoaXMucmVwbGFjZW1lbnRFeHByXztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBrZXlzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlzVjIgZmxhZyB0byBpZ25vcmUgY2FwdHVyZSBvZiBhcmdzXG4gICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIGJvb2xlYW4+PX0gb3B0X3doaXRlTGlzdCBPcHRpb25hbCB3aGl0ZSBsaXN0IG9mIG5hbWVzXG4gICAqICAgdGhhdCBjYW4gYmUgc3Vic3RpdHV0ZWQuXG4gICAqIEByZXR1cm4geyFSZWdFeHB9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBidWlsZEV4cHJfKGtleXMsIGlzVjIsIG9wdF93aGl0ZUxpc3QpIHtcbiAgICAvLyBJZiBhIHdoaXRlbGlzdCBpcyBwcmVzZW50LCB0aGUga2V5cyBtdXN0IGJlbG9uZyB0byB0aGUgd2hpdGVsaXN0LlxuICAgIC8vIFdlIGZpbHRlciB0aGUga2V5cyBvbmUgbGFzdCB0aW1lIHRvIGVuc3VyZSBubyB1bndoaXRlbGlzdGVkIGtleSBpc1xuICAgIC8vIGFsbG93ZWQuXG4gICAgaWYgKHRoaXMuZ2V0VXJsTWFjcm9XaGl0ZWxpc3RfKCkpIHtcbiAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4gdGhpcy5nZXRVcmxNYWNyb1doaXRlbGlzdF8oKS5pbmNsdWRlcyhrZXkpKTtcbiAgICB9XG4gICAgLy8gSWYgYSB3aGl0ZWxpc3QgaXMgcGFzc2VkIGludG8gdGhlIGNhbGwgdG8gR2xvYmFsVmFyaWFibGVTb3VyY2UuZXhwYW5kX1xuICAgIC8vIHRoZW4gd2Ugb25seSByZXNvbHZlIHZhbHVlcyBjb250YWluZWQgaW4gdGhlIHdoaXRlbGlzdC5cbiAgICBpZiAob3B0X3doaXRlTGlzdCkge1xuICAgICAga2V5cyA9IGtleXMuZmlsdGVyKGtleSA9PiBvcHRfd2hpdGVMaXN0W2tleV0pO1xuICAgIH1cbiAgICAvLyBUaGUga2V5cyBtdXN0IGJlIHNvcnRlZCB0byBlbnN1cmUgdGhhdCB0aGUgbG9uZ2VzdCBrZXlzIGFyZSBjb25zaWRlcmVkXG4gICAgLy8gZmlyc3QuIFRoaXMgYXZvaWRzIGEgcHJvYmxlbSB3aGVyZSBhIFJBTkRPTSBjb25mbGljdHMgd2l0aCBSQU5ET01fT05FLlxuICAgIGtleXMuc29ydCgoczEsIHMyKSA9PiBzMi5sZW5ndGggLSBzMS5sZW5ndGgpO1xuICAgIC8vIEtleXMgdGhhdCBzdGFydCB3aXRoIGEgYCRgIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgZG8gbm90XG4gICAgLy8gaW50ZXJmZXJlIHdpdGggdGhlIHJlZ2V4IHRoYXQgaXMgY29uc3RydWN0ZWQuXG4gICAgY29uc3QgZXNjYXBlZCA9IGtleXMubWFwKGtleSA9PiB7XG4gICAgICBpZiAoa2V5WzBdID09PSAnJCcpIHtcbiAgICAgICAgcmV0dXJuICdcXFxcJyArIGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBhbGwgPSBlc2NhcGVkLmpvaW4oJ3wnKTtcbiAgICAvLyBNYXRjaCB0aGUgZ2l2ZW4gcmVwbGFjZW1lbnQgcGF0dGVybnMsIGFzIHdlbGwgYXMgb3B0aW9uYWxseVxuICAgIC8vIGFyZ3VtZW50cyB0byB0aGUgcmVwbGFjZW1lbnQgYmVoaW5kIGl0IGluIHBhcmVudGhlc2VzLlxuICAgIC8vIEV4YW1wbGUgc3RyaW5nIHRoYXQgbWF0Y2hcbiAgICAvLyBGT09fQkFSXG4gICAgLy8gRk9PX0JBUihhcmcxKVxuICAgIC8vIEZPT19CQVIoYXJnMSxhcmcyKVxuICAgIC8vIEZPT19CQVIoYXJnMSwgYXJnMilcbiAgICBsZXQgcmVnZXhTdHIgPSAnXFxcXCQ/KCcgKyBhbGwgKyAnKSc7XG4gICAgLy8gaWdub3JlIHRoZSBjYXB0dXJpbmcgb2YgYXJndW1lbnRzIGluIG5ldyBwYXJzZXJcbiAgICBpZiAoIWlzVjIpIHtcbiAgICAgIHJlZ2V4U3RyICs9ICcoPzpcXFxcKCgoPzpcXFxccypbMC05YS16QS1aLV8uXSpcXFxccyooPz0sfFxcXFwpKSw/KSopXFxcXHMqXFxcXCkpPyc7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4U3RyLCAnZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gez9BcnJheTxzdHJpbmc+fSBUaGUgd2hpdGVsaXN0IG9mIGFsbG93ZWQgQU1QIHZhcmlhYmxlcy4gKGlmIHByb3ZpZGVkIGluXG4gICAqICAgICBhIG1ldGEgdGFnKS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldFVybE1hY3JvV2hpdGVsaXN0XygpIHtcbiAgICBpZiAodGhpcy52YXJpYWJsZVdoaXRlbGlzdF8pIHtcbiAgICAgIHJldHVybiB0aGlzLnZhcmlhYmxlV2hpdGVsaXN0XztcbiAgICB9XG5cbiAgICBjb25zdCB7aGVhZH0gPSB0aGlzLmFtcGRvYy5nZXRSb290Tm9kZSgpO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gQSBtZXRhW25hbWU9XCJhbXAtYWxsb3dlZC11cmwtbWFjcm9zXCJdIHRhZywgaWYgcHJlc2VudCxcbiAgICAvLyBjb250YWlucywgaW4gaXRzIGNvbnRlbnQgYXR0cmlidXRlLCBhIHdoaXRlbGlzdCBvZiB2YXJpYWJsZSBzdWJzdGl0dXRpb24uXG4gICAgY29uc3QgbWV0YSA9XG4gICAgICBoZWFkLnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImFtcC1hbGxvd2VkLXVybC1tYWNyb3NcIl0nKTtcbiAgICBpZiAoIW1ldGEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB3aGl0ZWxpc3Qgb2YgdmFyaWFibGVzIGFsbG93ZWQgZm9yIHZhcmlhYmxlIHN1YnN0aXR1dGlvbi5cbiAgICAgKiBAcHJpdmF0ZSB7P0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy52YXJpYWJsZVdoaXRlbGlzdF8gPSBtZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpLnNwbGl0KCcsJylcbiAgICAgICAgLm1hcCh2YXJpYWJsZSA9PiB2YXJpYWJsZS50cmltKCkpO1xuICAgIHJldHVybiB0aGlzLnZhcmlhYmxlV2hpdGVsaXN0XztcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIGdldEFtcGRvYyxcbiAgZ2V0RXhpc3RpbmdTZXJ2aWNlRm9yRG9jSW5FbWJlZFNjb3BlLFxuICBnZXRFeGlzdGluZ1NlcnZpY2VPck51bGwsXG4gIGdldFNlcnZpY2UsXG4gIGdldFNlcnZpY2VGb3JEb2MsXG4gIGdldFNlcnZpY2VGb3JEb2NEZXByZWNhdGVkLFxuICBnZXRTZXJ2aWNlUHJvbWlzZUZvckRvYyxcbn0gZnJvbSAnLi9zZXJ2aWNlJztcbmltcG9ydCB7XG4gIGdldEVsZW1lbnRTZXJ2aWNlRm9yRG9jLFxuICBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlLFxuICBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlRm9yRG9jLFxuICBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlRm9yRG9jSW5FbWJlZFNjb3BlLFxufSBmcm9tICcuL2VsZW1lbnQtc2VydmljZSc7XG5cbi8qKiBAdHlwZWRlZiB7IS4uL2V4dGVuc2lvbnMvYW1wLXN1YnNjcmlwdGlvbnMvMC4xL2FtcC1zdWJzY3JpcHRpb25zLlN1YnNjcmlwdGlvblNlcnZpY2V9ICovXG5leHBvcnQgbGV0IFN1YnNjcmlwdGlvblNlcnZpY2U7XG5cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlcyB7XG4gIC8qKlxuICAgKiBIaW50OiBBZGQgZXh0ZW5zaW9ucyBmb2xkZXIgcGF0aCB0byBjb21waWxlLmpzIHdpdGhcbiAgICogd2FybmluZ3MgY2Fubm90IGZpbmQgbW9kdWxlcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgQWNjZXNzIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhLi4vZXh0ZW5zaW9ucy9hbXAtYWNjZXNzLzAuMS9hbXAtYWNjZXNzLkFjY2Vzc1NlcnZpY2U+fVxuICAgKi9cbiAgc3RhdGljIGFjY2Vzc1NlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyFQcm9taXNlPCEuLi9leHRlbnNpb25zL2FtcC1hY2Nlc3MvMC4xL2FtcC1hY2Nlc3MuQWNjZXNzU2VydmljZT59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ2FjY2VzcycsICdhbXAtYWNjZXNzJykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIEFjY2VzcyBzZXJ2aWNlIG9yIGEgcHJvbWlzZSBmb3IgbnVsbCBpZiB0aGVcbiAgICogc2VydmljZSBpcyBub3QgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtYWNjZXNzLzAuMS9hbXAtYWNjZXNzLkFjY2Vzc1NlcnZpY2U+fVxuICAgKi9cbiAgc3RhdGljIGFjY2Vzc1NlcnZpY2VGb3JEb2NPck51bGwoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyFQcm9taXNlPD8uLi9leHRlbnNpb25zL2FtcC1hY2Nlc3MvMC4xL2FtcC1hY2Nlc3MuQWNjZXNzU2VydmljZT59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAnYWNjZXNzJyxcbiAgICAgICAgICAnYW1wLWFjY2VzcycpKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSBTdWJzY3JpcHRpb25zIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhU3Vic2NyaXB0aW9uU2VydmljZT59XG4gICAqL1xuICBzdGF0aWMgc3Vic2NyaXB0aW9uc1NlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyFQcm9taXNlPCFTdWJzY3JpcHRpb25TZXJ2aWNlPn0gKi8gKFxuICAgICAgZ2V0RWxlbWVudFNlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAnc3Vic2NyaXB0aW9ucycsXG4gICAgICAgICAgJ2FtcC1zdWJzY3JpcHRpb25zJykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIFN1YnNjcmlwdGlvbnMgc2VydmljZS5cbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD9TdWJzY3JpcHRpb25TZXJ2aWNlPn1cbiAgICovXG4gIHN0YXRpYyBzdWJzY3JpcHRpb25zU2VydmljZUZvckRvY09yTnVsbChlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7IVByb21pc2U8P1N1YnNjcmlwdGlvblNlcnZpY2U+fSAqLyAoXG4gICAgICBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ3N1YnNjcmlwdGlvbnMnLFxuICAgICAgICAgICdhbXAtc3Vic2NyaXB0aW9ucycpKSk7XG4gIH1cblxuICAvKipcbiAgICogVW5saWtlIG1vc3Qgc2VydmljZSBnZXR0ZXJzLCBwYXNzaW5nIGBOb2RlYCBpcyBuZWNlc3NhcnkgZm9yIHNvbWUgRklFLXNjb3BlXG4gICAqIHNlcnZpY2VzIHNpbmNlIHNvbWV0aW1lcyB3ZSBvbmx5IGhhdmUgdGhlIEZJRSBEb2N1bWVudCBmb3IgY29udGV4dC5cbiAgICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvYWN0aW9uLWltcGwuQWN0aW9uU2VydmljZX1cbiAgICovXG4gIHN0YXRpYyBhY3Rpb25TZXJ2aWNlRm9yRG9jKG5vZGVPckRvYykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvYWN0aW9uLWltcGwuQWN0aW9uU2VydmljZX0gKi8gKFxuICAgICAgZ2V0RXhpc3RpbmdTZXJ2aWNlRm9yRG9jSW5FbWJlZFNjb3BlKFxuICAgICAgICAgIG5vZGVPckRvYywgJ2FjdGlvbicsIC8qIG9wdF9mYWxsYmFja1RvVG9wV2luICovIHRydWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IVByb21pc2U8IUFjdGl2aXR5Pn1cbiAgICovXG4gIHN0YXRpYyBhY3Rpdml0eUZvckRvYyhlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTwhQWN0aXZpdHk+fSAqLyAoXG4gICAgICBnZXRFbGVtZW50U2VydmljZUZvckRvYyhlbGVtZW50T3JBbXBEb2MsICdhY3Rpdml0eScsICdhbXAtYW5hbHl0aWNzJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdsb2JhbCBpbnN0YW5jZSBvZiB0aGUgYEFtcERvY1NlcnZpY2VgIHNlcnZpY2UgdGhhdCBjYW4gYmVcbiAgICogdXNlZCB0byByZXNvbHZlIGFuIGFtcGRvYyBmb3IgYW55IG5vZGU6IGVpdGhlciBpbiB0aGUgc2luZ2xlLWRvYyBvclxuICAgKiBzaGFkb3ctZG9jIGVudmlyb25tZW50LlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY1NlcnZpY2V9XG4gICAqL1xuICBzdGF0aWMgYW1wZG9jU2VydmljZUZvcih3aW5kb3cpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY1NlcnZpY2V9ICovIChcbiAgICAgIGdldFNlcnZpY2Uod2luZG93LCAnYW1wZG9jJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEFtcERvYyBmb3IgdGhlIHNwZWNpZmllZCBjb250ZXh0IG5vZGUuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY31cbiAgICovXG4gIHN0YXRpYyBhbXBkb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuIGdldEFtcGRvYyhlbGVtZW50T3JBbXBEb2MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBsb2FkQW5hbHl0aWNzXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCEuLi9leHRlbnNpb25zL2FtcC1hbmFseXRpY3MvMC4xL2luc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25TZXJ2aWNlPn1cbiAgICovXG4gIHN0YXRpYyBhbmFseXRpY3NGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCBsb2FkQW5hbHl0aWNzID0gZmFsc2UpIHtcbiAgICBpZiAobG9hZEFuYWx5dGljcykge1xuICAgICAgLy8gR2V0IEV4dGVuc2lvbnMgc2VydmljZSBhbmQgZm9yY2UgbG9hZCBhbmFseXRpY3MgZXh0ZW5zaW9uLlxuICAgICAgY29uc3QgYW1wZG9jID0gZ2V0QW1wZG9jKGVsZW1lbnRPckFtcERvYyk7XG4gICAgICBTZXJ2aWNlcy5leHRlbnNpb25zRm9yKGFtcGRvYy53aW4pLi8qT0sqL2luc3RhbGxFeHRlbnNpb25Gb3JEb2MoXG4gICAgICAgICAgYW1wZG9jLCAnYW1wLWFuYWx5dGljcycpO1xuICAgIH1cbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTwhLi4vZXh0ZW5zaW9ucy9hbXAtYW5hbHl0aWNzLzAuMS9pbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uU2VydmljZT59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ2FtcC1hbmFseXRpY3MtaW5zdHJ1bWVudGF0aW9uJyxcbiAgICAgICAgICAnYW1wLWFuYWx5dGljcycpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IVByb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLWFuYWx5dGljcy8wLjEvaW5zdHJ1bWVudGF0aW9uLkluc3RydW1lbnRhdGlvblNlcnZpY2U+fVxuICAgKi9cbiAgc3RhdGljIGFuYWx5dGljc0ZvckRvY09yTnVsbChlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtYW5hbHl0aWNzLzAuMS9pbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uU2VydmljZT59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoZWxlbWVudE9yQW1wRG9jLFxuICAgICAgICAgICdhbXAtYW5hbHl0aWNzLWluc3RydW1lbnRhdGlvbicsICdhbXAtYW5hbHl0aWNzJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luZG93XG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvYmF0Y2hlZC14aHItaW1wbC5CYXRjaGVkWGhyfVxuICAgKi9cbiAgc3RhdGljIGJhdGNoZWRYaHJGb3Iod2luZG93KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS9iYXRjaGVkLXhoci1pbXBsLkJhdGNoZWRYaHJ9ICovIChcbiAgICAgIGdldFNlcnZpY2Uod2luZG93LCAnYmF0Y2hlZC14aHInKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD8uLi9leHRlbnNpb25zL2FtcC1iaW5kLzAuMS9iaW5kLWltcGwuQmluZD59XG4gICAqL1xuICBzdGF0aWMgYmluZEZvckRvY09yTnVsbChlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtYmluZC8wLjEvYmluZC1pbXBsLkJpbmQ+fSAqLyAoXG4gICAgICBnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlRm9yRG9jSW5FbWJlZFNjb3BlKFxuICAgICAgICAgIGVsZW1lbnRPckFtcERvYywgJ2JpbmQnLCAnYW1wLWJpbmQnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCEuL3NlcnZpY2UvY2lkLWltcGwuQ2lkPn1cbiAgICovXG4gIHN0YXRpYyBjaWRGb3JEb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2U8IS4vc2VydmljZS9jaWQtaW1wbC5DaWQ+fSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlUHJvbWlzZUZvckRvYyhlbGVtZW50T3JBbXBEb2MsICdjaWQnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvbmF2aWdhdGlvbi5OYXZpZ2F0aW9ufVxuICAgKi9cbiAgc3RhdGljIG5hdmlnYXRpb25Gb3JEb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS9uYXZpZ2F0aW9uLk5hdmlnYXRpb259ICovIChcbiAgICAgIGdldFNlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAnbmF2aWdhdGlvbicpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2NyeXB0by1pbXBsLkNyeXB0b31cbiAgICovXG4gIHN0YXRpYyBjcnlwdG9Gb3Iod2luZG93KSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyEuL3NlcnZpY2UvY3J5cHRvLWltcGwuQ3J5cHRvfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlKHdpbmRvdywgJ2NyeXB0bycpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvZG9jdW1lbnQtaW5mby1pbXBsLkRvY3VtZW50SW5mb0RlZn0gSW5mbyBhYm91dCB0aGUgZG9jXG4gICAqL1xuICBzdGF0aWMgZG9jdW1lbnRJbmZvRm9yRG9jKGVsZW1lbnRPckFtcERvYykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvZG9jdW1lbnQtaW5mby1pbXBsLkRvY0luZm99ICovIChcbiAgICAgIGdldFNlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAnZG9jdW1lbnRJbmZvJykpLmdldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luZG93XG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvZG9jdW1lbnQtc3RhdGUuRG9jdW1lbnRTdGF0ZX1cbiAgICovXG4gIHN0YXRpYyBkb2N1bWVudFN0YXRlRm9yKHdpbmRvdykge1xuICAgIHJldHVybiBnZXRTZXJ2aWNlKHdpbmRvdywgJ2RvY3VtZW50U3RhdGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL2V4dGVuc2lvbnMtaW1wbC5FeHRlbnNpb25zfVxuICAgKi9cbiAgc3RhdGljIGV4dGVuc2lvbnNGb3Iod2luZG93KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS9leHRlbnNpb25zLWltcGwuRXh0ZW5zaW9uc30gKi8gKFxuICAgICAgZ2V0U2VydmljZSh3aW5kb3csICdleHRlbnNpb25zJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc2VydmljZSBpbXBsZW1lbnRlZCBpbiBzZXJ2aWNlL2hpc3RvcnktaW1wbC5cbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvaGlzdG9yeS1pbXBsLkhpc3Rvcnl9XG4gICAqL1xuICBzdGF0aWMgaGlzdG9yeUZvckRvYyhlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL2hpc3RvcnktaW1wbC5IaXN0b3J5fSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ2hpc3RvcnknKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7IS4vaW5wdXQuSW5wdXR9XG4gICAqL1xuICBzdGF0aWMgaW5wdXRGb3Iod2luKSB7XG4gICAgcmV0dXJuIGdldFNlcnZpY2Uod2luLCAnaW5wdXQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IS4vc2VydmljZS9sYXllcnMtaW1wbC5MYXlvdXRMYXllcnN9XG4gICAqL1xuICBzdGF0aWMgbGF5ZXJzRm9yRG9jKGVsZW1lbnRPckFtcERvYykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvbGF5ZXJzLWltcGwuTGF5b3V0TGF5ZXJzfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ2xheWVycycpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL3BlcmZvcm1hbmNlLWltcGwuUGVyZm9ybWFuY2V9XG4gICAqL1xuICBzdGF0aWMgcGVyZm9ybWFuY2VGb3Iod2luZG93KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS9wZXJmb3JtYW5jZS1pbXBsLlBlcmZvcm1hbmNlfSovIChcbiAgICAgIGdldFNlcnZpY2Uod2luZG93LCAncGVyZm9ybWFuY2UnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5kb3dcbiAgICogQHJldHVybiB7IS4vc2VydmljZS9wZXJmb3JtYW5jZS1pbXBsLlBlcmZvcm1hbmNlfVxuICAgKi9cbiAgc3RhdGljIHBlcmZvcm1hbmNlRm9yT3JOdWxsKHdpbmRvdykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvcGVyZm9ybWFuY2UtaW1wbC5QZXJmb3JtYW5jZX0qLyAoXG4gICAgICBnZXRFeGlzdGluZ1NlcnZpY2VPck51bGwod2luZG93LCAncGVyZm9ybWFuY2UnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5kb3dcbiAgICogQHJldHVybiB7IS4vc2VydmljZS9wbGF0Zm9ybS1pbXBsLlBsYXRmb3JtfVxuICAgKi9cbiAgc3RhdGljIHBsYXRmb3JtRm9yKHdpbmRvdykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvcGxhdGZvcm0taW1wbC5QbGF0Zm9ybX0gKi8gKFxuICAgICAgZ2V0U2VydmljZSh3aW5kb3csICdwbGF0Zm9ybScpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VzIGdldFNlcnZpY2VGb3JEb2NEZXByZWNhdGVkKCkgc2luY2UgUmVzb3VyY2VzIGlzIGEgc3RhcnR1cCBzZXJ2aWNlLlxuICAgKiBAcGFyYW0geyFOb2RlfCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBub2RlT3JEb2NcbiAgICogQHJldHVybiB7IS4vc2VydmljZS9yZXNvdXJjZXMtaW1wbC5SZXNvdXJjZXN9XG4gICAqL1xuICBzdGF0aWMgcmVzb3VyY2VzRm9yRG9jKG5vZGVPckRvYykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvcmVzb3VyY2VzLWltcGwuUmVzb3VyY2VzfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlRm9yRG9jRGVwcmVjYXRlZChub2RlT3JEb2MsICdyZXNvdXJjZXMnKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7P1Byb21pc2U8P3tpbmNvbWluZ0ZyYWdtZW50OiBzdHJpbmcsIG91dGdvaW5nRnJhZ21lbnQ6IHN0cmluZ30+fVxuICAgKi9cbiAgc3RhdGljIHNoYXJlVHJhY2tpbmdGb3JPck51bGwod2luKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyFQcm9taXNlPD97aW5jb21pbmdGcmFnbWVudDogc3RyaW5nLCBvdXRnb2luZ0ZyYWdtZW50OiBzdHJpbmd9Pn0gKi8gKFxuICAgICAgZ2V0RWxlbWVudFNlcnZpY2VJZkF2YWlsYWJsZSh3aW4sICdzaGFyZS10cmFja2luZycsXG4gICAgICAgICAgJ2FtcC1zaGFyZS10cmFja2luZycsIHRydWUpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7P1Byb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzEuMC92YXJpYWJsZS1zZXJ2aWNlLlN0b3J5VmFyaWFibGVEZWY+fVxuICAgKi9cbiAgc3RhdGljIHN0b3J5VmFyaWFibGVTZXJ2aWNlRm9yT3JOdWxsKHdpbikge1xuICAgIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMS4wL3ZhcmlhYmxlLXNlcnZpY2UuU3RvcnlWYXJpYWJsZURlZj59ICovXG4gICAgICAoZ2V0RWxlbWVudFNlcnZpY2VJZkF2YWlsYWJsZSh3aW4sICdzdG9yeS12YXJpYWJsZScsICdhbXAtc3RvcnknLFxuICAgICAgICAgIHRydWUpKSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyc2lvbiBvZiB0aGUgc3Rvcnkgc3RvcmUgc2VydmljZSBkZXBlbmRzIG9uIHdoaWNoIHZlcnNpb24gb2YgYW1wLXN0b3J5XG4gICAqIHRoZSBwdWJsaXNoZXIgaXMgbG9hZGluZy4gVGhleSBhbGwgaGF2ZSB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbi5cbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7P1Byb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzEuMC9hbXAtc3Rvcnktc3RvcmUtc2VydmljZS5BbXBTdG9yeVN0b3JlU2VydmljZXw/Li4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMC4xL2FtcC1zdG9yeS1zdG9yZS1zZXJ2aWNlLkFtcFN0b3J5U3RvcmVTZXJ2aWNlPn1cbiAgICovXG4gIHN0YXRpYyBzdG9yeVN0b3JlU2VydmljZUZvck9yTnVsbCh3aW4pIHtcbiAgICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7IVByb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzEuMC9hbXAtc3Rvcnktc3RvcmUtc2VydmljZS5BbXBTdG9yeVN0b3JlU2VydmljZXw/Li4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMC4xL2FtcC1zdG9yeS1zdG9yZS1zZXJ2aWNlLkFtcFN0b3J5U3RvcmVTZXJ2aWNlPn0gKi9cbiAgICAgIChnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlKHdpbiwgJ3N0b3J5LXN0b3JlJywgJ2FtcC1zdG9yeScpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7Py4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzEuMC9hbXAtc3Rvcnktc3RvcmUtc2VydmljZS5BbXBTdG9yeVN0b3JlU2VydmljZX1cbiAgICovXG4gIHN0YXRpYyBzdG9yeVN0b3JlU2VydmljZSh3aW4pIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7Py4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzEuMC9hbXAtc3Rvcnktc3RvcmUtc2VydmljZS5BbXBTdG9yeVN0b3JlU2VydmljZX0gKi9cbiAgICAgIChnZXRFeGlzdGluZ1NlcnZpY2VPck51bGwod2luLCAnc3Rvcnktc3RvcmUnKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEByZXR1cm4gez8uLi9leHRlbnNpb25zL2FtcC1zdG9yeS8xLjAvYW1wLXN0b3J5LXJlcXVlc3Qtc2VydmljZS5BbXBTdG9yeVJlcXVlc3RTZXJ2aWNlfVxuICAgKi9cbiAgc3RhdGljIHN0b3J5UmVxdWVzdFNlcnZpY2Uod2luKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgez8uLi9leHRlbnNpb25zL2FtcC1zdG9yeS8xLjAvYW1wLXN0b3J5LXJlcXVlc3Qtc2VydmljZS5BbXBTdG9yeVJlcXVlc3RTZXJ2aWNlfSAqL1xuICAgICAgKGdldEV4aXN0aW5nU2VydmljZU9yTnVsbCh3aW4sICdzdG9yeS1yZXF1ZXN0JykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMS4wL2xvY2FsaXphdGlvbi5Mb2NhbGl6YXRpb25TZXJ2aWNlPn1cbiAgICovXG4gIHN0YXRpYyBsb2NhbGl6YXRpb25TZXJ2aWNlRm9yT3JOdWxsKHdpbikge1xuICAgIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMS4wL2xvY2FsaXphdGlvbi5Mb2NhbGl6YXRpb25TZXJ2aWNlPn0gKi9cbiAgICAgIChnZXRFbGVtZW50U2VydmljZUlmQXZhaWxhYmxlKHdpbiwgJ2xvY2FsaXphdGlvbicsICdhbXAtc3RvcnknLCB0cnVlKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEByZXR1cm4geyEuLi9leHRlbnNpb25zL2FtcC1zdG9yeS8xLjAvbG9jYWxpemF0aW9uLkxvY2FsaXphdGlvblNlcnZpY2V9XG4gICAqL1xuICBzdGF0aWMgbG9jYWxpemF0aW9uU2VydmljZSh3aW4pIHtcbiAgICByZXR1cm4gZ2V0U2VydmljZSh3aW4sICdsb2NhbGl6YXRpb24nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPKCMxNDM1Nyk6IFJlbW92ZSB0aGlzIHdoZW4gYW1wLXN0b3J5OjAuMSBpcyBkZXByZWNhdGVkLlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcmV0dXJuIHshLi4vZXh0ZW5zaW9ucy9hbXAtc3RvcnkvMC4xL2FtcC1zdG9yeS1zdG9yZS1zZXJ2aWNlLkFtcFN0b3J5U3RvcmVTZXJ2aWNlfVxuICAgKi9cbiAgc3RhdGljIHN0b3J5U3RvcmVTZXJ2aWNlVjAxKHdpbikge1xuICAgIHJldHVybiBnZXRTZXJ2aWNlKHdpbiwgJ3N0b3J5LXN0b3JlJyk7XG4gIH1cblxuICAvKipcbiAgICogVE9ETygjMTQzNTcpOiBSZW1vdmUgdGhpcyB3aGVuIGFtcC1zdG9yeTowLjEgaXMgZGVwcmVjYXRlZC5cbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7IS4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzAuMS9hbXAtc3RvcnktcmVxdWVzdC1zZXJ2aWNlLkFtcFN0b3J5UmVxdWVzdFNlcnZpY2V9XG4gICAqL1xuICBzdGF0aWMgc3RvcnlSZXF1ZXN0U2VydmljZVYwMSh3aW4pIHtcbiAgICByZXR1cm4gZ2V0U2VydmljZSh3aW4sICdzdG9yeS1yZXF1ZXN0LXYwMScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRPRE8oIzE0MzU3KTogUmVtb3ZlIHRoaXMgd2hlbiBhbXAtc3Rvcnk6MC4xIGlzIGRlcHJlY2F0ZWQuXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD8uLi9leHRlbnNpb25zL2FtcC1zdG9yeS8wLjEvbG9jYWxpemF0aW9uLkxvY2FsaXphdGlvblNlcnZpY2U+fVxuICAgKi9cbiAgc3RhdGljIGxvY2FsaXphdGlvblNlcnZpY2VGb3JPck51bGxWMDEod2luKSB7XG4gICAgcmV0dXJuIChcbiAgICAvKiogQHR5cGUgeyFQcm9taXNlPD8uLi9leHRlbnNpb25zL2FtcC1zdG9yeS8wLjEvbG9jYWxpemF0aW9uLkxvY2FsaXphdGlvblNlcnZpY2U+fSAqL1xuICAgICAgKGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGUod2luLCAnbG9jYWxpemF0aW9uLXYwMScsICdhbXAtc3RvcnknLFxuICAgICAgICAgIHRydWUpKSk7XG4gIH1cblxuICAvKipcbiAgICogVE9ETygjMTQzNTcpOiBSZW1vdmUgdGhpcyB3aGVuIGFtcC1zdG9yeTowLjEgaXMgZGVwcmVjYXRlZC5cbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7IS4uL2V4dGVuc2lvbnMvYW1wLXN0b3J5LzAuMS9sb2NhbGl6YXRpb24uTG9jYWxpemF0aW9uU2VydmljZX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbGl6YXRpb25TZXJ2aWNlVjAxKHdpbikge1xuICAgIHJldHVybiBnZXRTZXJ2aWNlKHdpbiwgJ2xvY2FsaXphdGlvbi12MDEnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcmV0dXJuIHs/UHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtdmlld2VyLWludGVncmF0aW9uLzAuMS92YXJpYWJsZS1zZXJ2aWNlLlZpZXdlckludGVncmF0aW9uVmFyaWFibGVEZWY+fVxuICAgKi9cbiAgc3RhdGljIHZpZXdlckludGVncmF0aW9uVmFyaWFibGVTZXJ2aWNlRm9yT3JOdWxsKHdpbikge1xuICAgIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtdmlld2VyLWludGVncmF0aW9uLzAuMS92YXJpYWJsZS1zZXJ2aWNlLlZpZXdlckludGVncmF0aW9uVmFyaWFibGVEZWY+fSAqL1xuICAgICAgKGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGUod2luLCAndmlld2VyLWludGVncmF0aW9uLXZhcmlhYmxlJyxcbiAgICAgICAgICAnYW1wLXZpZXdlci1pbnRlZ3JhdGlvbicsIHRydWUpKSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyFQcm9taXNlPCEuLi9leHRlbnNpb25zL2FtcC1hbmltYXRpb24vMC4xL3dlYi1hbmltYXRpb24tc2VydmljZS5XZWJBbmltYXRpb25TZXJ2aWNlPn1cbiAgICovXG4gIHN0YXRpYyB3ZWJBbmltYXRpb25TZXJ2aWNlRm9yKGVsZW1lbnRPckFtcERvYykge1xuICAgIHJldHVybiAoLyoqIEB0eXBlIHshUHJvbWlzZTwhLi4vZXh0ZW5zaW9ucy9hbXAtYW5pbWF0aW9uLzAuMS93ZWItYW5pbWF0aW9uLXNlcnZpY2UuV2ViQW5pbWF0aW9uU2VydmljZT59ICovXG4gICAgICAoZ2V0RWxlbWVudFNlcnZpY2VGb3JEb2MoXG4gICAgICAgICAgZWxlbWVudE9yQW1wRG9jLCAnd2ViLWFuaW1hdGlvbicsICdhbXAtYW5pbWF0aW9uJykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IVByb21pc2U8IS4vc2VydmljZS9zdG9yYWdlLWltcGwuU3RvcmFnZT59XG4gICAqL1xuICBzdGF0aWMgc3RvcmFnZUZvckRvYyhlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTwhLi9zZXJ2aWNlL3N0b3JhZ2UtaW1wbC5TdG9yYWdlPn0gKi8gKFxuICAgICAgZ2V0U2VydmljZVByb21pc2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAnc3RvcmFnZScpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL3RlbXBsYXRlLWltcGwuVGVtcGxhdGVzfVxuICAgKi9cbiAgc3RhdGljIHRlbXBsYXRlc0Zvcih3aW5kb3cpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL3RlbXBsYXRlLWltcGwuVGVtcGxhdGVzfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlKHdpbmRvdywgJ3RlbXBsYXRlcycpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL3RpbWVyLWltcGwuVGltZXJ9XG4gICAqL1xuICBzdGF0aWMgdGltZXJGb3Iod2luZG93KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS90aW1lci1pbXBsLlRpbWVyfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlKHdpbmRvdywgJ3RpbWVyJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVubGlrZSBtb3N0IHNlcnZpY2UgZ2V0dGVycywgcGFzc2luZyBgTm9kZWAgaXMgbmVjZXNzYXJ5IGZvciBzb21lIEZJRS1zY29wZVxuICAgKiBzZXJ2aWNlcyBzaW5jZSBzb21ldGltZXMgd2Ugb25seSBoYXZlIHRoZSBGSUUgRG9jdW1lbnQgZm9yIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7IU5vZGV8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IG5vZGVPckRvY1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL3VybC1yZXBsYWNlbWVudHMtaW1wbC5VcmxSZXBsYWNlbWVudHN9XG4gICAqL1xuICBzdGF0aWMgdXJsUmVwbGFjZW1lbnRzRm9yRG9jKG5vZGVPckRvYykge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyEuL3NlcnZpY2UvdXJsLXJlcGxhY2VtZW50cy1pbXBsLlVybFJlcGxhY2VtZW50c30gKi8gKFxuICAgICAgZ2V0RXhpc3RpbmdTZXJ2aWNlRm9yRG9jSW5FbWJlZFNjb3BlKFxuICAgICAgICAgIG5vZGVPckRvYywgJ3VybC1yZXBsYWNlJywgLyogb3B0X2ZhbGxiYWNrVG9Ub3BXaW4gKi8gdHJ1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhLi4vZXh0ZW5zaW9ucy9hbXAtdXNlci1ub3RpZmljYXRpb24vMC4xL2FtcC11c2VyLW5vdGlmaWNhdGlvbi5Vc2VyTm90aWZpY2F0aW9uTWFuYWdlcj59XG4gICAqL1xuICBzdGF0aWMgdXNlck5vdGlmaWNhdGlvbk1hbmFnZXJGb3JEb2MoZWxlbWVudE9yQW1wRG9jKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgeyFQcm9taXNlPCEuLi9leHRlbnNpb25zL2FtcC11c2VyLW5vdGlmaWNhdGlvbi8wLjEvYW1wLXVzZXItbm90aWZpY2F0aW9uLlVzZXJOb3RpZmljYXRpb25NYW5hZ2VyPn0gKi9cbiAgICAgIChnZXRFbGVtZW50U2VydmljZUZvckRvYyhlbGVtZW50T3JBbXBEb2MsICd1c2VyTm90aWZpY2F0aW9uTWFuYWdlcicsXG4gICAgICAgICAgJ2FtcC11c2VyLW5vdGlmaWNhdGlvbicpKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSBjb25zZW50UG9saWN5IFNlcnZpY2Ugb3IgYSBwcm9taXNlIGZvciBudWxsIGlmXG4gICAqIHRoZSBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUgb24gdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogQHBhcmFtIHshRWxlbWVudHwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gZWxlbWVudE9yQW1wRG9jXG4gICAqIEByZXR1cm4geyFQcm9taXNlPD8uLi9leHRlbnNpb25zL2FtcC1jb25zZW50LzAuMS9jb25zZW50LXBvbGljeS1tYW5hZ2VyLkNvbnNlbnRQb2xpY3lNYW5hZ2VyPn1cbiAgICovXG4gIHN0YXRpYyBjb25zZW50UG9saWN5U2VydmljZUZvckRvY09yTnVsbChlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7IVByb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLWNvbnNlbnQvMC4xL2NvbnNlbnQtcG9saWN5LW1hbmFnZXIuQ29uc2VudFBvbGljeU1hbmFnZXI+fSAqL1xuICAgICAgKGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoZWxlbWVudE9yQW1wRG9jLFxuICAgICAgICAgICdjb25zZW50UG9saWN5TWFuYWdlcicsICdhbXAtY29uc2VudCcpKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSBnZW8gc2VydmljZSBvciBhIHByb21pc2UgZm9yIG51bGwgaWZcbiAgICogdGhlIHNlcnZpY2UgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGUgY3VycmVudCBwYWdlLlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IVByb21pc2U8Py4uL2V4dGVuc2lvbnMvYW1wLWdlby8wLjEvYW1wLWdlby5HZW9EZWY+fVxuICAgKi9cbiAgc3RhdGljIGdlb0ZvckRvY09yTnVsbChlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTw/Li4vZXh0ZW5zaW9ucy9hbXAtZ2VvLzAuMS9hbXAtZ2VvLkdlb0RlZj59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGVGb3JEb2MoXG4gICAgICAgICAgZWxlbWVudE9yQW1wRG9jLCAnZ2VvJywgJ2FtcC1nZW8nLCB0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICogVW5saWtlIG1vc3Qgc2VydmljZSBnZXR0ZXJzLCBwYXNzaW5nIGBOb2RlYCBpcyBuZWNlc3NhcnkgZm9yIHNvbWUgRklFLXNjb3BlXG4gICAqIHNlcnZpY2VzIHNpbmNlIHNvbWV0aW1lcyB3ZSBvbmx5IGhhdmUgdGhlIEZJRSBEb2N1bWVudCBmb3IgY29udGV4dC5cbiAgICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UvdXJsLWltcGwuVXJsfVxuICAgKi9cbiAgc3RhdGljIHVybEZvckRvYyhub2RlT3JEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL3VybC1pbXBsLlVybH0gKi8gKFxuICAgICAgZ2V0RXhpc3RpbmdTZXJ2aWNlRm9yRG9jSW5FbWJlZFNjb3BlKFxuICAgICAgICAgIG5vZGVPckRvYywgJ3VybCcsIC8qIG9wdF9mYWxsYmFja1RvVG9wV2luICovIHRydWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIGV4cGVyaW1lbnQgdmFyaWFudHMgb3IgYSBwcm9taXNlIGZvciBudWxsIGlmIGl0XG4gICAqIGlzIG5vdCBhdmFpbGFibGUgb24gdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7IVByb21pc2U8P09iamVjdDxzdHJpbmc+Pn1cbiAgICovXG4gIHN0YXRpYyB2YXJpYW50Rm9yT3JOdWxsKHdpbikge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyFQcm9taXNlPD9PYmplY3Q8c3RyaW5nPj59ICovIChcbiAgICAgIGdldEVsZW1lbnRTZXJ2aWNlSWZBdmFpbGFibGUod2luLCAndmFyaWFudCcsICdhbXAtZXhwZXJpbWVudCcsIHRydWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fCEuL3NlcnZpY2UvYW1wZG9jLWltcGwuQW1wRG9jfSBlbGVtZW50T3JBbXBEb2NcbiAgICogQHJldHVybiB7IS4vc2VydmljZS92aWRlby1zZXJ2aWNlLWludGVyZmFjZS5WaWRlb1NlcnZpY2VJbnRlcmZhY2V9XG4gICAqL1xuICBzdGF0aWMgdmlkZW9NYW5hZ2VyRm9yRG9jKGVsZW1lbnRPckFtcERvYykge1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUgeyEuL3NlcnZpY2UvdmlkZW8tc2VydmljZS1pbnRlcmZhY2UuVmlkZW9TZXJ2aWNlSW50ZXJmYWNlfSAqLyAoXG4gICAgICAgIGdldFNlcnZpY2VGb3JEb2MoZWxlbWVudE9yQW1wRG9jLCAndmlkZW8tbWFuYWdlcicpKSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlcyBnZXRTZXJ2aWNlRm9yRG9jRGVwcmVjYXRlZCgpIHNpbmNlIFZpZXdlciBpcyBhIHN0YXJ0dXAgc2VydmljZS5cbiAgICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2Uvdmlld2VyLWltcGwuVmlld2VyfVxuICAgKi9cbiAgc3RhdGljIHZpZXdlckZvckRvYyhub2RlT3JEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL3ZpZXdlci1pbXBsLlZpZXdlcn0gKi8gKFxuICAgICAgZ2V0U2VydmljZUZvckRvY0RlcHJlY2F0ZWQobm9kZU9yRG9jLCAndmlld2VyJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgcHJvbWlzZSBmb3IgdGhlIHZpZXdlci4gVGhpcyBpcyBhbiB1bnVzdWFsIGNhc2UgYW5kIG5lY2Vzc2FyeSBvbmx5XG4gICAqIGZvciBzZXJ2aWNlcyB0aGF0IG5lZWQgcmVmZXJlbmNlIHRvIHRoZSB2aWV3ZXIgYmVmb3JlIGl0IGhhcyBiZWVuXG4gICAqIGluaXRpYWxpemVkLiBNb3N0IG9mIHRoZSBjb2RlLCBob3dldmVyLCBqdXN0IHNob3VsZCB1c2UgYHZpZXdlckZvckRvY2AuXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR8IS4vc2VydmljZS9hbXBkb2MtaW1wbC5BbXBEb2N9IGVsZW1lbnRPckFtcERvY1xuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhLi9zZXJ2aWNlL3ZpZXdlci1pbXBsLlZpZXdlcj59XG4gICAqL1xuICBzdGF0aWMgdmlld2VyUHJvbWlzZUZvckRvYyhlbGVtZW50T3JBbXBEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshUHJvbWlzZTwhLi9zZXJ2aWNlL3ZpZXdlci1pbXBsLlZpZXdlcj59ICovIChcbiAgICAgIGdldFNlcnZpY2VQcm9taXNlRm9yRG9jKGVsZW1lbnRPckFtcERvYywgJ3ZpZXdlcicpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpbmRvd1xuICAgKiBAcmV0dXJuIHshLi9zZXJ2aWNlL3ZzeW5jLWltcGwuVnN5bmN9XG4gICAqL1xuICBzdGF0aWMgdnN5bmNGb3Iod2luZG93KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IS4vc2VydmljZS92c3luYy1pbXBsLlZzeW5jfSAqLyAoXG4gICAgICBnZXRTZXJ2aWNlKHdpbmRvdywgJ3ZzeW5jJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZXMgZ2V0U2VydmljZUZvckRvY0RlcHJlY2F0ZWQoKSBzaW5jZSBWaWV3cG9ydCBpcyBhIHN0YXJ0dXAgc2VydmljZS5cbiAgICogQHBhcmFtIHshTm9kZXwhLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gbm9kZU9yRG9jXG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2Uvdmlld3BvcnQvdmlld3BvcnQtaW1wbC5WaWV3cG9ydH1cbiAgICovXG4gIHN0YXRpYyB2aWV3cG9ydEZvckRvYyhub2RlT3JEb2MpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL3ZpZXdwb3J0L3ZpZXdwb3J0LWltcGwuVmlld3BvcnR9ICovIChcbiAgICAgIGdldFNlcnZpY2VGb3JEb2NEZXByZWNhdGVkKG5vZGVPckRvYywgJ3ZpZXdwb3J0JykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IVdpbmRvd30gd2luZG93XG4gICAqIEByZXR1cm4geyEuL3NlcnZpY2UveGhyLWltcGwuWGhyfVxuICAgKi9cbiAgc3RhdGljIHhockZvcih3aW5kb3cpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHshLi9zZXJ2aWNlL3hoci1pbXBsLlhocn0gKi8gKGdldFNlcnZpY2Uod2luZG93LCAneGhyJykpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE4IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtkZXZ9IGZyb20gJy4vbG9nJztcbmltcG9ydCB7bWFwfSBmcm9tICcuL3V0aWxzL29iamVjdC5qcyc7XG5cbmxldCBjb250YWluZXI7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgaHRtbCBoZWxwZXIgZm9yIHRoZSBkb2MuXG4gKlxuICogQHBhcmFtIHshRWxlbWVudHwhRG9jdW1lbnR9IG5vZGVPckRvY1xuICogQHJldHVybiB7ZnVuY3Rpb24oIUFycmF5PHN0cmluZz4pOiFFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHRtbEZvcihub2RlT3JEb2MpIHtcbiAgY29uc3QgZG9jID0gbm9kZU9yRG9jLm93bmVyRG9jdW1lbnQgfHwgbm9kZU9yRG9jO1xuICBpZiAoIWNvbnRhaW5lciB8fCBjb250YWluZXIub3duZXJEb2N1bWVudCAhPT0gZG9jKSB7XG4gICAgY29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB9XG5cbiAgcmV0dXJuIGh0bWw7XG59XG5cbi8qKlxuICogQSB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbCBoZWxwZXIgdG8gZ2VuZXJhdGUgc3RhdGljIERPTSB0cmVlcy5cbiAqIFRoaXMgbXVzdCBiZSB1c2VkIGFzIGEgdGFnZ2VkIHRlbXBsYXRlLCBpZVxuICpcbiAqIGBgYFxuICogY29uc3QgZGl2ID0gaHRtbGA8ZGl2PjxzcGFuPjwvc3Bhbj48L2Rpdj5gO1xuICogYGBgXG4gKlxuICogT25seSB0aGUgcm9vdCBlbGVtZW50IGFuZCBpdHMgc3VidHJlZSB3aWxsIGJlIHJldHVybmVkLiBETyBOT1QgdXNlIHRoaXMgdG9cbiAqIHJlbmRlciBzdWJ0cmVlJ3Mgd2l0aCBkeW5hbWljIGNvbnRlbnQsIGl0IFdJTEwgcmVzdWx0IGluIGFuIGVycm9yIVxuICpcbiAqIEBwYXJhbSB7IUFycmF5PHN0cmluZz59IHN0cmluZ3NcbiAqIEByZXR1cm4geyFFbGVtZW50fVxuICovXG5mdW5jdGlvbiBodG1sKHN0cmluZ3MpIHtcbiAgZGV2KCkuYXNzZXJ0KHN0cmluZ3MubGVuZ3RoID09PSAxLCAnSW1wcm9wZXIgaHRtbCB0ZW1wbGF0ZSB0YWcgdXNhZ2UuJyk7XG4gIGNvbnRhaW5lci4vKk9LKi9pbm5lckhUTUwgPSBzdHJpbmdzWzBdO1xuXG4gIGNvbnN0IGVsID0gY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkO1xuICBkZXYoKS5hc3NlcnQoZWwsICdObyBlbGVtZW50cyBpbiB0ZW1wbGF0ZScpO1xuICBkZXYoKS5hc3NlcnQoIWVsLm5leHRFbGVtZW50U2libGluZywgJ1RvbyBtYW55IHJvb3QgZWxlbWVudHMgaW4gdGVtcGxhdGUnKTtcblxuICAvLyBDbGVhciB0byBmcmVlIG1lbW9yeS5cbiAgY29udGFpbmVyLi8qT0sqL2lubmVySFRNTCA9ICcnO1xuXG4gIHJldHVybiBlbDtcbn1cblxuLyoqXG4gKiBRdWVyaWVzIGFuIGVsZW1lbnQgZm9yIGFsbCBlbGVtZW50cyB3aXRoIGEgXCJyZWZcIiBhdHRyaWJ1dGUsIHJlbW92aW5nXG4gKiB0aGUgYXR0cmlidXRlIGFmdGVyd2FyZHMuXG4gKiBSZXR1cm5zIGEgbmFtZWQgbWFwIG9mIGFsbCByZWYgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHshRWxlbWVudH0gcm9vdFxuICogQHJldHVybiB7IU9iamVjdDxzdHJpbmcsICFFbGVtZW50Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWxSZWZzKHJvb3QpIHtcbiAgY29uc3QgZWxlbWVudHMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tyZWZdJyk7XG4gIGNvbnN0IHJlZnMgPSBtYXAoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgIGNvbnN0IHJlZiA9IGRldigpLmFzc2VydChlbGVtZW50LmdldEF0dHJpYnV0ZSgncmVmJyksICdFbXB0eSByZWYgYXR0cicpO1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyZWYnKTtcbiAgICBkZXYoKS5hc3NlcnQocmVmc1tyZWZdID09PSB1bmRlZmluZWQsICdEdXBsaWNhdGUgcmVmJyk7XG4gICAgcmVmc1tyZWZdID0gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiByZWZzO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IF9tYXRjaFxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1VwcGVyQ2FzZShfbWF0Y2gsIGNoYXJhY3Rlcikge1xuICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHByZXBlbmREYXNoQW5kVG9Mb3dlckNhc2UobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQXR0cmlidXRlIG5hbWUgY29udGFpbmluZyBkYXNoZXMuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IERhc2hlcyByZW1vdmVkIGFuZCBzdWNjZXNzaXZlIGNoYXJhY3RlciBzZW50IHRvIHVwcGVyIGNhc2UuXG4gKiB2aXNpYmxlRm9yVGVzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGFzaFRvQ2FtZWxDYXNlKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUucmVwbGFjZSgvLShbYS16XSkvZywgdG9VcHBlckNhc2UpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIHRoYXQgaXMgaW4gY2FtZWxDYXNlIHRvIG9uZSB0aGF0IGlzIGluIGRhc2gtY2FzZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZyBpbiBkYXNoLWNhc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2VUb0Rhc2goc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKD8hXilbQS1aXS9nLCBwcmVwZW5kRGFzaEFuZFRvTG93ZXJDYXNlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBBdHRyaWJ1dGUgbmFtZSB3aXRoIGRhc2hlc1xuICogQHJldHVybiB7c3RyaW5nfSBEYXNoZXMgcmVwbGFjZWQgYnkgdW5kZXJsaW5lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhc2hUb1VuZGVybGluZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoJy0nLCAnXycpO1xufVxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IHN1ZmZpeFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgc3VmZml4KSB7XG4gIGNvbnN0IGluZGV4ID0gc3RyaW5nLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGg7XG4gIHJldHVybiBpbmRleCA+PSAwICYmIHN0cmluZy5pbmRleE9mKHN1ZmZpeCwgaW5kZXgpID09IGluZGV4O1xufVxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGguXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHByZWZpeCkge1xuICBpZiAocHJlZml4Lmxlbmd0aCA+IHN0cmluZy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5sYXN0SW5kZXhPZihwcmVmaXgsIDApID09IDA7XG59XG5cbi8qKlxuICogRXhwYW5kcyBwbGFjZWhvbGRlcnMgaW4gYSBnaXZlbiB0ZW1wbGF0ZSBzdHJpbmcgd2l0aCB2YWx1ZXMuXG4gKlxuICogUGxhY2Vob2xkZXJzIHVzZSAke2tleS1uYW1lfSBzeW50YXggYW5kIGFyZSByZXBsYWNlZCB3aXRoIHRoZSB2YWx1ZVxuICogcmV0dXJuZWQgZnJvbSB0aGUgZ2l2ZW4gZ2V0dGVyIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZSBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIGV4cGFuZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKToqfSBnZXR0ZXIgRnVuY3Rpb24gdXNlZCB0byByZXRyaWV2ZSBhIHZhbHVlIGZvciBhXG4gKiAgIHBsYWNlaG9sZGVyLiBSZXR1cm5zIHZhbHVlcyB3aWxsIGJlIGNvZXJjZWQgaW50byBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfbWF4SXRlcmF0aW9ucyBOdW1iZXIgb2YgdGltZXMgdG8gZXhwYW5kIHRoZSB0ZW1wbGF0ZS5cbiAqICAgRGVmYXVsdHMgdG8gMSwgYnV0IHNob3VsZCBiZSBzZXQgdG8gYSBsYXJnZXIgdmFsdWUgeW91ciBwbGFjZWhvbGRlciB0b2tlbnNcbiAqICAgY2FuIGJlIGV4cGFuZGVkIHRvIG90aGVyIHBsYWNlaG9sZGVyIHRva2Vucy4gVGFrZSBjYXV0aW9uIHdpdGggbGFyZ2UgdmFsdWVzXG4gKiAgIGFzIHJlY3Vyc2l2ZWx5IGV4cGFuZGluZyBhIHN0cmluZyBjYW4gYmUgZXhwb25lbnRpYWxseSBleHBlbnNpdmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRUZW1wbGF0ZSh0ZW1wbGF0ZSwgZ2V0dGVyLCBvcHRfbWF4SXRlcmF0aW9ucykge1xuICBjb25zdCBtYXhJdGVyYXRpb25zID0gb3B0X21heEl0ZXJhdGlvbnMgfHwgMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhJdGVyYXRpb25zOyBpKyspIHtcbiAgICBsZXQgbWF0Y2hlcyA9IDA7XG4gICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXCR7KFtefV0qKX0vZywgKF9hLCBiKSA9PiB7XG4gICAgICBtYXRjaGVzKys7XG4gICAgICByZXR1cm4gZ2V0dGVyKGIpO1xuICAgIH0pO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuLyoqXG4gKiBIYXNoIGZ1bmN0aW9uIGRqYjJhXG4gKiBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGEgc2ltcGxlLCBmYXN0IGhhc2hpbmcgZnVuY3Rpb24gdXNpbmcgbWluaW1hbCBjb2RlLlxuICogSXQgZG9lcyAqbm90KiBoYXZlIGdvb2QgY3J5cHRvZ3JhcGhpYyBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfSAzMi1iaXQgdW5zaWduZWQgaGFzaCBvZiB0aGUgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdIYXNoMzIoc3RyKSB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gc3RyO1xuICBsZXQgaGFzaCA9IDUzODE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBoYXNoID0gaGFzaCAqIDMzIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgLy8gQ29udmVydCBmcm9tIDMyLWJpdCBzaWduZWQgdG8gdW5zaWduZWQuXG4gIHJldHVybiBTdHJpbmcoaGFzaCA+Pj4gMCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcyc7XG5pbXBvcnQge2RldiwgcmV0aHJvd0FzeW5jfSBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2luc2VydEFmdGVyT3JBdFN0YXJ0LCB3YWl0Rm9yQm9keX0gZnJvbSAnLi9kb20nO1xuaW1wb3J0IHttYXB9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7c2V0U3R5bGVzfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCB7d2FpdEZvclNlcnZpY2VzfSBmcm9tICcuL3JlbmRlci1kZWxheWluZy1zZXJ2aWNlcyc7XG5cbmNvbnN0IFRSQU5TRk9STUVSX1BST1AgPSAnX19BTVBfQ1NTX1RSJztcbmNvbnN0IFNUWUxFX01BUF9QUk9QID0gJ19fQU1QX0NTU19TTSc7XG5jb25zdCBib2R5VmlzaWJsZVNlbnRpbmVsID0gJ19fQU1QX0JPRFlfVklTSUJMRSc7XG5cblxuLyoqXG4gKiBBZGRzIHRoZSBnaXZlbiBjc3MgdGV4dCB0byB0aGUgZ2l2ZW4gYW1wZG9jLlxuICpcbiAqIFRoZSBzdHlsZSB0YWdzIHdpbGwgYmUgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgaGVhZCBiZWZvcmUgYWxsIGF1dGhvclxuICogc3R5bGVzLiBPbmUgZWxlbWVudCBjYW4gYmUgdGhlIG1haW4gcnVudGltZSBDU1MuIFRoaXMgaXMgZ3VhcmFudGVlZFxuICogdG8gYWx3YXlzIGJlIHRoZSBmaXJzdCBzdHlsZXNoZWV0IGluIHRoZSBkb2MuXG4gKlxuICogQHBhcmFtIHshLi9zZXJ2aWNlL2FtcGRvYy1pbXBsLkFtcERvY30gYW1wZG9jIFRoZSBhbXBkb2MgdGhhdCBzaG91bGQgZ2V0IHRoZSBuZXcgc3R5bGVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEBwYXJhbSB7P2Z1bmN0aW9uKCFFbGVtZW50KXx1bmRlZmluZWR9IGNiIENhbGxlZCB3aGVuIHRoZSBuZXcgc3R5bGVzIGFyZSBhdmFpbGFibGUuXG4gKiAgICAgTm90IHVzaW5nIGEgcHJvbWlzZSwgYmVjYXVzZSB0aGlzIGlzIHN5bmNocm9ub3VzIHdoZW4gcG9zc2libGUuXG4gKiAgICAgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pc1J1bnRpbWVDc3MgSWYgdHJ1ZSwgdGhpcyBzdHlsZSB0YWcgd2lsbCBiZSBpbnNlcnRlZFxuICogICAgIGFzIHRoZSBmaXJzdCBlbGVtZW50IGluIGhlYWQgYW5kIGFsbCBzdHlsZSBlbGVtZW50cyB3aWxsIGJlIHBvc2l0aW9uZWRcbiAqICAgICBhZnRlci5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2V4dFxuICogQHJldHVybiB7IUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsU3R5bGVzRm9yRG9jKFxuICBhbXBkb2MsIGNzc1RleHQsIGNiLCBvcHRfaXNSdW50aW1lQ3NzLCBvcHRfZXh0KSB7XG4gIGNvbnN0IGNzc1Jvb3QgPSBhbXBkb2MuZ2V0SGVhZE5vZGUoKTtcbiAgY29uc3Qgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQoXG4gICAgICBjc3NSb290LFxuICAgICAgbWF5YmVUcmFuc2Zvcm0oY3NzUm9vdCwgY3NzVGV4dCksXG4gICAgICBvcHRfaXNSdW50aW1lQ3NzIHx8IGZhbHNlLFxuICAgICAgb3B0X2V4dCB8fCBudWxsKTtcblxuICBpZiAoY2IpIHtcbiAgICBjb25zdCByb290Tm9kZSA9IGFtcGRvYy5nZXRSb290Tm9kZSgpO1xuICAgIC8vIFN0eWxlcyBhcmVuJ3QgYWx3YXlzIGF2YWlsYWJsZSBzeW5jaHJvbm91c2x5LiBFLmcuIGlmIHRoZXJlIGlzIGFcbiAgICAvLyBwZW5kaW5nIHN0eWxlIGRvd25sb2FkLCBpdCB3aWxsIGhhdmUgdG8gZmluaXNoIGJlZm9yZSB0aGUgbmV3XG4gICAgLy8gc3R5bGUgaXMgdmlzaWJsZS5cbiAgICAvLyBGb3IgdGhpcyByZWFzb24gd2UgcG9sbCB1bnRpbCB0aGUgc3R5bGUgYmVjb21lcyBhdmFpbGFibGUuXG4gICAgLy8gU3luYyBjYXNlLlxuICAgIGlmIChzdHlsZUxvYWRlZChyb290Tm9kZSwgc3R5bGUpKSB7XG4gICAgICBjYihzdHlsZSk7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuICAgIC8vIFBvbGwgdW50aWwgc3R5bGVzIGFyZSBhdmFpbGFibGUuXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoc3R5bGVMb2FkZWQocm9vdE5vZGUsIHN0eWxlKSkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgY2Ioc3R5bGUpO1xuICAgICAgfVxuICAgIH0sIDQpO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cblxuXG4vKipcbiAqIEFkZHMgdGhlIGdpdmVuIGNzcyB0ZXh0IHRvIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAqIFRPRE8oZHZveXRlbmtvLCAjMTA3MDUpOiBSZW1vdmUgdGhpcyBtZXRob2Qgb25jZSBGSUUvYW1wZG9jIG1pZ3JhdGlvbiBpc1xuICogZG9uZS5cbiAqXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB0aGF0IHNob3VsZCBnZXQgdGhlIG5ldyBzdHlsZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHBhcmFtIHs/ZnVuY3Rpb24oIUVsZW1lbnQpfHVuZGVmaW5lZH0gY2IgQ2FsbGVkIHdoZW4gdGhlIG5ldyBzdHlsZXMgYXJlXG4gKiAgICAgYXZhaWxhYmxlLiBOb3QgdXNpbmcgYSBwcm9taXNlLCBiZWNhdXNlIHRoaXMgaXMgc3luY2hyb25vdXMgd2hlblxuICogICAgIHBvc3NpYmxlLiBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2lzUnVudGltZUNzcyBJZiB0cnVlLCB0aGlzIHN0eWxlIHRhZyB3aWxsIGJlIGluc2VydGVkXG4gKiAgICAgYXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gaGVhZCBhbmQgYWxsIHN0eWxlIGVsZW1lbnRzIHdpbGwgYmUgcG9zaXRpb25lZFxuICogICAgIGFmdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZXh0XG4gKiBAcmV0dXJuIHshRWxlbWVudH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxTdHlsZXNMZWdhY3koXG4gIGRvYywgY3NzVGV4dCwgY2IsIG9wdF9pc1J1bnRpbWVDc3MsIG9wdF9leHQpIHtcbiAgY29uc3Qgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQoXG4gICAgICBkZXYoKS5hc3NlcnRFbGVtZW50KGRvYy5oZWFkKSxcbiAgICAgIGNzc1RleHQsXG4gICAgICBvcHRfaXNSdW50aW1lQ3NzIHx8IGZhbHNlLFxuICAgICAgb3B0X2V4dCB8fCBudWxsKTtcblxuICBpZiAoY2IpIHtcbiAgICAvLyBTdHlsZXMgYXJlbid0IGFsd2F5cyBhdmFpbGFibGUgc3luY2hyb25vdXNseS4gRS5nLiBpZiB0aGVyZSBpcyBhXG4gICAgLy8gcGVuZGluZyBzdHlsZSBkb3dubG9hZCwgaXQgd2lsbCBoYXZlIHRvIGZpbmlzaCBiZWZvcmUgdGhlIG5ld1xuICAgIC8vIHN0eWxlIGlzIHZpc2libGUuXG4gICAgLy8gRm9yIHRoaXMgcmVhc29uIHdlIHBvbGwgdW50aWwgdGhlIHN0eWxlIGJlY29tZXMgYXZhaWxhYmxlLlxuICAgIC8vIFN5bmMgY2FzZS5cbiAgICBpZiAoc3R5bGVMb2FkZWQoZG9jLCBzdHlsZSkpIHtcbiAgICAgIGNiKHN0eWxlKTtcbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG4gICAgLy8gUG9sbCB1bnRpbCBzdHlsZXMgYXJlIGF2YWlsYWJsZS5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChzdHlsZUxvYWRlZChkb2MsIHN0eWxlKSkge1xuICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgY2Ioc3R5bGUpO1xuICAgICAgfVxuICAgIH0sIDQpO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIHByb3Blcmx5IGNvbmZpZ3VyZWQgc3R5bGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IVNoYWRvd1Jvb3R9IGNzc1Jvb3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzUnVudGltZUNzc1xuICogQHBhcmFtIHs/c3RyaW5nfSBleHRcbiAqIEByZXR1cm4geyFFbGVtZW50fVxuICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQoY3NzUm9vdCwgY3NzVGV4dCwgaXNSdW50aW1lQ3NzLCBleHQpIHtcbiAgbGV0IHN0eWxlTWFwID0gY3NzUm9vdFtTVFlMRV9NQVBfUFJPUF07XG4gIGlmICghc3R5bGVNYXApIHtcbiAgICBzdHlsZU1hcCA9IGNzc1Jvb3RbU1RZTEVfTUFQX1BST1BdID0gbWFwKCk7XG4gIH1cblxuICBjb25zdCBpc0V4dENzcyA9ICFpc1J1bnRpbWVDc3MgJiZcbiAgICAgIChleHQgJiYgZXh0ICE9ICdhbXAtY3VzdG9tJyAmJiBleHQgIT0gJ2FtcC1rZXlmcmFtZXMnKTtcbiAgY29uc3Qga2V5ID1cbiAgICAgIGlzUnVudGltZUNzcyA/ICdhbXAtcnVudGltZScgOlxuICAgICAgICBpc0V4dENzcyA/IGBhbXAtZXh0ZW5zaW9uPSR7ZXh0fWAgOiBudWxsO1xuXG4gIC8vIENoZWNrIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCBvciBkaXNjb3ZlcmVkLlxuICBpZiAoa2V5KSB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBnZXRFeGlzdGluZ1N0eWxlRWxlbWVudChjc3NSb290LCBzdHlsZU1hcCwga2V5KTtcbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIG5ldyBzdHlsZSBlbGVtZW50IGFuZCBhcHBlbmQgdG8gY3NzUm9vdC5cbiAgY29uc3QgZG9jID0gKGNzc1Jvb3Qub3duZXJEb2N1bWVudCB8fCBjc3NSb290KTtcbiAgY29uc3Qgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUuLypPSyovdGV4dENvbnRlbnQgPSBjc3NUZXh0O1xuICBsZXQgYWZ0ZXJFbGVtZW50ID0gbnVsbDtcbiAgLy8gTWFrZSBzdXJlIHRoYXQgd2UgcGxhY2Ugc3R5bGUgdGFncyBhZnRlciB0aGUgbWFpbiBydW50aW1lIENTUy4gT3RoZXJ3aXNlXG4gIC8vIHRoZSBvcmRlciBpcyByYW5kb20uXG4gIGlmIChpc1J1bnRpbWVDc3MpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ2FtcC1ydW50aW1lJywgJycpO1xuICB9IGVsc2UgaWYgKGlzRXh0Q3NzKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdhbXAtZXh0ZW5zaW9uJywgZXh0IHx8ICcnKTtcbiAgICBhZnRlckVsZW1lbnQgPSBkZXYoKS5hc3NlcnRFbGVtZW50KGdldEV4aXN0aW5nU3R5bGVFbGVtZW50KFxuICAgICAgICBjc3NSb290LCBzdHlsZU1hcCwgJ2FtcC1ydW50aW1lJykpO1xuICB9IGVsc2Uge1xuICAgIGlmIChleHQpIHtcbiAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZShleHQsICcnKTtcbiAgICB9XG4gICAgYWZ0ZXJFbGVtZW50ID0gY3NzUm9vdC5sYXN0Q2hpbGQ7XG4gIH1cbiAgaW5zZXJ0QWZ0ZXJPckF0U3RhcnQoY3NzUm9vdCwgc3R5bGUsIGFmdGVyRWxlbWVudCk7XG4gIGlmIChrZXkpIHtcbiAgICBzdHlsZU1hcFtrZXldID0gc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudHwhU2hhZG93Um9vdH0gY3NzUm9vdFxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZywgIUVsZW1lbnQ+fSBzdHlsZU1hcFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybiB7P0VsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEV4aXN0aW5nU3R5bGVFbGVtZW50KGNzc1Jvb3QsIHN0eWxlTWFwLCBrZXkpIHtcbiAgLy8gQWxyZWFkeSBjYWNoZWQuXG4gIGlmIChzdHlsZU1hcFtrZXldKSB7XG4gICAgcmV0dXJuIHN0eWxlTWFwW2tleV07XG4gIH1cbiAgLy8gQ2hlY2sgaWYgdGhlIHN0eWxlIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgYnkgdGhlIHNlcnZlciBsYXlvdXQuXG4gIGNvbnN0IGV4aXN0aW5nID0gY3NzUm9vdC4vKk9LKi9xdWVyeVNlbGVjdG9yKGBzdHlsZVske2tleX1dYCk7XG4gIGlmIChleGlzdGluZykge1xuICAgIHN0eWxlTWFwW2tleV0gPSBleGlzdGluZztcbiAgICByZXR1cm4gZXhpc3Rpbmc7XG4gIH1cbiAgLy8gTm90aGluZyBmb3VuZC5cbiAgcmV0dXJuIG51bGw7XG59XG5cblxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNmb3JtZXIgdG8gdGhlIENTUyB0ZXh0IGlmIGl0IGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gKiBAcGFyYW0geyFFbGVtZW50fCFTaGFkb3dSb290fSBjc3NSb290XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyk6c3RyaW5nfSB0cmFuc2Zvcm1lclxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5zdGFsbENzc1RyYW5zZm9ybWVyKGNzc1Jvb3QsIHRyYW5zZm9ybWVyKSB7XG4gIGNzc1Jvb3RbVFJBTlNGT1JNRVJfUFJPUF0gPSB0cmFuc2Zvcm1lcjtcbn1cblxuXG4vKipcbiAqIEFwcGxpZXMgYSB0cmFuc2Zvcm1lciB0byB0aGUgQ1NTIHRleHQgaWYgaXQgaGFzIGJlZW4gcmVnaXN0ZXJlZC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR8IVNoYWRvd1Jvb3R9IGNzc1Jvb3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIG1heWJlVHJhbnNmb3JtKGNzc1Jvb3QsIGNzc1RleHQpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBjc3NSb290W1RSQU5TRk9STUVSX1BST1BdO1xuICByZXR1cm4gdHJhbnNmb3JtZXIgPyB0cmFuc2Zvcm1lcihjc3NUZXh0KSA6IGNzc1RleHQ7XG59XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBkb2N1bWVudCdzIGJvZHkgb3BhY2l0eSB0byAxLlxuICogSWYgdGhlIGJvZHkgaXMgbm90IHlldCBhdmFpbGFibGUgKGJlY2F1c2Ugb3VyIHNjcmlwdCB3YXMgbG9hZGVkXG4gKiBzeW5jaHJvbm91c2x5KSwgcG9sbHMgdW50aWwgaXQgaXMuXG4gKiBAcGFyYW0geyFEb2N1bWVudH0gZG9jIFRoZSBkb2N1bWVudCB3aG8ncyBib2R5IHdlIHNob3VsZCBtYWtlIHZpc2libGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfd2FpdEZvclNlcnZpY2VzIFdoZXRoZXIgdGhlIGJvZHkgdmlzaWJpbGl0eSBzaG91bGRcbiAqICAgICBiZSBibG9ja2VkIG9uIGtleSBzZXJ2aWNlcyBiZWluZyBsb2FkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQm9keVZpc2libGUoZG9jLCBvcHRfd2FpdEZvclNlcnZpY2VzKSB7XG4gIGRldigpLmFzc2VydChkb2MuZGVmYXVsdFZpZXcsICdQYXNzZWQgaW4gZG9jdW1lbnQgbXVzdCBoYXZlIGEgZGVmYXVsdFZpZXcnKTtcbiAgY29uc3Qgd2luID0gLyoqIEB0eXBlIHshV2luZG93fSAqLyAoZG9jLmRlZmF1bHRWaWV3KTtcbiAgaWYgKHdpbltib2R5VmlzaWJsZVNlbnRpbmVsXSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzZXQgPSAoKSA9PiB7XG4gICAgd2luW2JvZHlWaXNpYmxlU2VudGluZWxdID0gdHJ1ZTtcbiAgICBzZXRTdHlsZXMoZGV2KCkuYXNzZXJ0RWxlbWVudChkb2MuYm9keSksIHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZScsXG4gICAgICAnYW5pbWF0aW9uJzogJ25vbmUnLFxuICAgIH0pO1xuICAgIHJlbmRlclN0YXJ0ZWROb0lubGluZShkb2MpO1xuICB9O1xuICB0cnkge1xuICAgIHdhaXRGb3JCb2R5KGRvYywgKCkgPT4ge1xuICAgICAgaWYgKHdpbltib2R5VmlzaWJsZVNlbnRpbmVsXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aW5bYm9keVZpc2libGVTZW50aW5lbF0gPSB0cnVlO1xuICAgICAgaWYgKG9wdF93YWl0Rm9yU2VydmljZXMpIHtcbiAgICAgICAgd2FpdEZvclNlcnZpY2VzKHdpbikuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICByZXRocm93QXN5bmMocmVhc29uKTtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH0pLnRoZW4oc2VydmljZXMgPT4ge1xuICAgICAgICAgIHNldCgpO1xuICAgICAgICAgIGlmIChzZXJ2aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBTZXJ2aWNlcy5yZXNvdXJjZXNGb3JEb2MoZG9jKS4vKk9LKi9zY2hlZHVsZVBhc3MoXG4gICAgICAgICAgICAgICAgMSwgLyogcmVsYXlvdXRBbGwgKi8gdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwZXJmID0gU2VydmljZXMucGVyZm9ybWFuY2VGb3Iod2luKTtcbiAgICAgICAgICAgIHBlcmYudGljaygnbWJ2Jyk7XG4gICAgICAgICAgICBwZXJmLmZsdXNoKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElmIHRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgdGhlIGxvZ2ljIGFib3ZlIChzdWNoIGFzIHNlcnZpY2Ugbm90XG4gICAgLy8geWV0IGluc3RhbGxlZCwgZGVmaW5pdGVseSB0cnkgdG8gbWFrZSB0aGUgYm9keSB2aXNpYmxlLlxuICAgIHNldCgpO1xuICAgIC8vIEF2b2lkIGVycm9ycyBpbiB0aGUgZnVuY3Rpb24gdG8gYnJlYWsgZXhlY3V0aW9uIGZsb3cgYXMgdGhpcyBpc1xuICAgIC8vIG9mdGVuIGNhbGxlZCBhcyBhIGxhc3QgcmVzb3J0LlxuICAgIHJldGhyb3dBc3luYyhlKTtcbiAgfVxufVxuXG5cbi8qKlxuICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY1xuICovXG5mdW5jdGlvbiByZW5kZXJTdGFydGVkTm9JbmxpbmUoZG9jKSB7XG4gIHRyeSB7XG4gICAgU2VydmljZXMucmVzb3VyY2VzRm9yRG9jKGRvYykucmVuZGVyU3RhcnRlZCgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gYG1ha2VCb2R5VmlzaWJsZWAgaXMgY2FsbGVkIGluIHRoZSBlcnJvci1wcm9jZXNzaW5nIGN5Y2xlIGFuZCB0aHVzXG4gICAgLy8gY291bGQgYmUgdHJpZ2dlcmVkIHdoZW4gcnVudGltZSdzIGluaXRpYWxpemF0aW9uIGlzIGluY29tcGxldGUgd2hpY2hcbiAgICAvLyB3b3VsZCBjYXVzZSB1bnJlbGF0ZWQgZXJyb3JzIHRvIGJlIHRocm93biBoZXJlLlxuICB9XG59XG5cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgYm9keSBpcyBhbHdheXMgdmlzaWJsZS4gRm9yIGluc3RhbmNlLCBpbiBjYXNlIG9mIFBXQS5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBib2R5QWx3YXlzVmlzaWJsZSh3aW4pIHtcbiAgd2luW2JvZHlWaXNpYmxlU2VudGluZWxdID0gdHJ1ZTtcbn1cblxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgc3R5bGUgZWxlbWVudCB3YXMgcmVnaXN0ZXJlZCBpbiB0aGUgRE9NLlxuICogQHBhcmFtIHshRG9jdW1lbnR8IVNoYWRvd1Jvb3R9IGRvY1xuICogQHBhcmFtIHshRWxlbWVudH0gc3R5bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHN0eWxlTG9hZGVkKGRvYywgc3R5bGUpIHtcbiAgY29uc3Qgc2hlZXRzID0gZG9jLnN0eWxlU2hlZXRzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNoZWV0ID0gc2hlZXRzW2ldO1xuICAgIGlmIChzaGVldC5vd25lck5vZGUgPT0gc3R5bGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gTm90ZTogbG9hZGVkIGJ5IDNwIHN5c3RlbS4gQ2Fubm90IHJlbHkgb24gYmFiZWwgcG9seWZpbGxzLlxuaW1wb3J0IHttYXB9IGZyb20gJy4vdXRpbHMvb2JqZWN0LmpzJztcbmltcG9ydCB7c3RhcnRzV2l0aH0gZnJvbSAnLi9zdHJpbmcnO1xuXG5cbi8qKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbmxldCBwcm9wZXJ0eU5hbWVDYWNoZTtcblxuLyoqIEBjb25zdCB7IUFycmF5PHN0cmluZz59ICovXG5jb25zdCB2ZW5kb3JQcmVmaXhlcyA9IFsnV2Via2l0JywgJ3dlYmtpdCcsICdNb3onLCAnbW96JywgJ21zJywgJ08nLCAnbyddO1xuXG5cbi8qKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtzdHJpbmd9IGNhbWVsQ2FzZSBjYW1lbCBjYXNlZCBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gdGl0bGUgY2FzZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2VUb1RpdGxlQ2FzZShjYW1lbENhc2UpIHtcbiAgcmV0dXJuIGNhbWVsQ2FzZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGNhbWVsQ2FzZS5zbGljZSgxKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgdGhlIHN0eWxlIGlmIGEgcHJlZml4ZWQgdmVyc2lvbiBvZiBhIHByb3BlcnR5IGV4aXN0cyBhbmQgcmV0dXJuc1xuICogaXQgb3IgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHshT2JqZWN0fSBzdHlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHRpdGxlQ2FzZSB0aGUgdGl0bGUgY2FzZSB2ZXJzaW9uIG9mIGEgY3NzIHByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHByZWZpeGVkIHByb3BlcnR5IG5hbWUgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0VmVuZG9ySnNQcm9wZXJ0eU5hbWVfKHN0eWxlLCB0aXRsZUNhc2UpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZW5kb3JQcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IHZlbmRvclByZWZpeGVzW2ldICsgdGl0bGVDYXNlO1xuICAgIGlmIChzdHlsZVtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eU5hbWU7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NzaWJseSBwcmVmaXhlZCBKYXZhU2NyaXB0IHByb3BlcnR5IG5hbWUgb2YgYSBzdHlsZSBwcm9wZXJ0eVxuICogKGV4LiBXZWJraXRUcmFuc2l0aW9uRHVyYXRpb24pIGdpdmVuIGEgY2FtZWxDYXNlJ2QgdmVyc2lvbiBvZiB0aGUgcHJvcGVydHlcbiAqIChleC4gdHJhbnNpdGlvbkR1cmF0aW9uKS5cbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7IU9iamVjdH0gc3R5bGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYW1lbENhc2UgdGhlIGNhbWVsIGNhc2VkIHZlcnNpb24gb2YgYSBjc3MgcHJvcGVydHkgbmFtZVxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2J5cGFzc0NhY2hlIGJ5cGFzcyB0aGUgbWVtb2l6ZWQgY2FjaGUgb2YgcHJvcGVydHlcbiAqICAgbWFwcGluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVuZG9ySnNQcm9wZXJ0eU5hbWUoc3R5bGUsIGNhbWVsQ2FzZSwgb3B0X2J5cGFzc0NhY2hlKSB7XG4gIGlmIChzdGFydHNXaXRoKGNhbWVsQ2FzZSwgJy0tJykpIHtcbiAgICAvLyBDU1MgdmFycyBhcmUgcmV0dXJuZWQgYXMgaXMuXG4gICAgcmV0dXJuIGNhbWVsQ2FzZTtcbiAgfVxuICBpZiAoIXByb3BlcnR5TmFtZUNhY2hlKSB7XG4gICAgcHJvcGVydHlOYW1lQ2FjaGUgPSBtYXAoKTtcbiAgfVxuICBsZXQgcHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lQ2FjaGVbY2FtZWxDYXNlXTtcbiAgaWYgKCFwcm9wZXJ0eU5hbWUgfHwgb3B0X2J5cGFzc0NhY2hlKSB7XG4gICAgcHJvcGVydHlOYW1lID0gY2FtZWxDYXNlO1xuICAgIGlmIChzdHlsZVtjYW1lbENhc2VdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRpdGxlQ2FzZSA9IGNhbWVsQ2FzZVRvVGl0bGVDYXNlKGNhbWVsQ2FzZSk7XG4gICAgICBjb25zdCBwcmVmaXhlZFByb3BlcnR5TmFtZSA9IGdldFZlbmRvckpzUHJvcGVydHlOYW1lXyhzdHlsZSwgdGl0bGVDYXNlKTtcblxuICAgICAgaWYgKHN0eWxlW3ByZWZpeGVkUHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BlcnR5TmFtZSA9IHByZWZpeGVkUHJvcGVydHlOYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW9wdF9ieXBhc3NDYWNoZSkge1xuICAgICAgcHJvcGVydHlOYW1lQ2FjaGVbY2FtZWxDYXNlXSA9IHByb3BlcnR5TmFtZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5TmFtZTtcbn1cblxuXG4vKipcbiAqIFNldHMgdGhlIENTUyBzdHlsZXMgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50IHdpdGggIWltcG9ydGFudC4gVGhlIHN0eWxlc1xuICogYXJlIHNwZWNpZmllZCBhcyBhIG1hcCBmcm9tIENTUyBwcm9wZXJ0eSBuYW1lcyB0byB0aGVpciB2YWx1ZXMuXG4gKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLCAqPn0gc3R5bGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbXBvcnRhbnRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIGZvciAoY29uc3QgayBpbiBzdHlsZXMpIHtcbiAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFxuICAgICAgICBnZXRWZW5kb3JKc1Byb3BlcnR5TmFtZShzdHlsZXMsIGspLCBzdHlsZXNba10udG9TdHJpbmcoKSwgJ2ltcG9ydGFudCcpO1xuICB9XG59XG5cblxuLyoqXG4gKiBTZXRzIHRoZSBDU1Mgc3R5bGUgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50IHdpdGggb3B0aW9uYWwgdW5pdHMsIGUuZy4gXCJweFwiLlxuICogQHBhcmFtIHs/RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF91bml0c1xuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2J5cGFzc0NhY2hlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSwgdmFsdWUsIG9wdF91bml0cywgb3B0X2J5cGFzc0NhY2hlKSB7XG4gIGNvbnN0IHByb3BlcnR5TmFtZSA9IGdldFZlbmRvckpzUHJvcGVydHlOYW1lKGVsZW1lbnQuc3R5bGUsIHByb3BlcnR5LFxuICAgICAgb3B0X2J5cGFzc0NhY2hlKTtcbiAgaWYgKHByb3BlcnR5TmFtZSkge1xuICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHlOYW1lXSA9XG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi8gKG9wdF91bml0cyA/IHZhbHVlICsgb3B0X3VuaXRzIDogdmFsdWUpO1xuICB9XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgQ1NTIHN0eWxlIG9mIHRoZSBzcGVjaWZpZWQgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2J5cGFzc0NhY2hlXG4gKiBAcmV0dXJuIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHksIG9wdF9ieXBhc3NDYWNoZSkge1xuICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBnZXRWZW5kb3JKc1Byb3BlcnR5TmFtZShlbGVtZW50LnN0eWxlLCBwcm9wZXJ0eSxcbiAgICAgIG9wdF9ieXBhc3NDYWNoZSk7XG4gIGlmICghcHJvcGVydHlOYW1lKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5zdHlsZVtwcm9wZXJ0eU5hbWVdO1xufVxuXG5cbi8qKlxuICogU2V0cyB0aGUgQ1NTIHN0eWxlcyBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuIFRoZSBzdHlsZXNcbiAqIGEgc3BlY2lmaWVkIGFzIGEgbWFwIGZyb20gQ1NTIHByb3BlcnR5IG5hbWVzIHRvIHRoZWlyIHZhbHVlcy5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsICo+fSBzdHlsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgZm9yIChjb25zdCBrIGluIHN0eWxlcykge1xuICAgIHNldFN0eWxlKGVsZW1lbnQsIGssIHN0eWxlc1trXSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFNob3dzIG9yIGhpZGVzIHRoZSBzcGVjaWZpZWQgZWxlbWVudC5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9kaXNwbGF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGUoZWxlbWVudCwgb3B0X2Rpc3BsYXkpIHtcbiAgaWYgKG9wdF9kaXNwbGF5ID09PSB1bmRlZmluZWQpIHtcbiAgICBvcHRfZGlzcGxheSA9IGdldFN0eWxlKGVsZW1lbnQsICdkaXNwbGF5JykgPT0gJ25vbmUnO1xuICB9XG4gIHNldFN0eWxlKGVsZW1lbnQsICdkaXNwbGF5Jywgb3B0X2Rpc3BsYXkgPyAnJyA6ICdub25lJyk7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGl4ZWwgdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB4KHZhbHVlKSB7XG4gIHJldHVybiBgJHt2YWx1ZX1weGA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGRlZ3JlZSB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVnKHZhbHVlKSB7XG4gIHJldHVybiBgJHt2YWx1ZX1kZWdgO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBcInRyYW5zbGF0ZVhcIiBmb3IgQ1NTIFwidHJhbnNmb3JtXCIgcHJvcGVydHkuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVYKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYHRyYW5zbGF0ZVgoJHt2YWx1ZX0pYDtcbiAgfVxuICByZXR1cm4gYHRyYW5zbGF0ZVgoJHtweCh2YWx1ZSl9KWA7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgXCJ0cmFuc2xhdGVYXCIgZm9yIENTUyBcInRyYW5zZm9ybVwiIHByb3BlcnR5LlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4XG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IG9wdF95XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUoeCwgb3B0X3kpIHtcbiAgaWYgKHR5cGVvZiB4ID09ICdudW1iZXInKSB7XG4gICAgeCA9IHB4KHgpO1xuICB9XG4gIGlmIChvcHRfeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSlgO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X3kgPT0gJ251bWJlcicpIHtcbiAgICBvcHRfeSA9IHB4KG9wdF95KTtcbiAgfVxuICByZXR1cm4gYHRyYW5zbGF0ZSgke3h9LCAke29wdF95fSlgO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBhIFwic2NhbGVcIiBmb3IgQ1NTIFwidHJhbnNmb3JtXCIgcHJvcGVydHkuXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gYHNjYWxlKCR7dmFsdWV9KWA7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFwicm90YXRlXCIgZm9yIENTUyBcInRyYW5zZm9ybVwiIHByb3BlcnR5LlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICB2YWx1ZSA9IGRlZyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGByb3RhdGUoJHt2YWx1ZX0pYDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYWxwaGEgdmFsdWUgZnJvbSBhIHJnYmEgY29sb3IgdmFsdWUuXG4gKiBSZXR1cm4gdGhlIG5ldyBjb2xvciBwcm9wZXJ0eSB3aXRoIGFscGhhIGVxdWFscyBpZiBoYXMgdGhlIGFscGhhIHZhbHVlLlxuICogQ2FsbGVyIG5lZWRzIHRvIG1ha2Ugc3VyZSB0aGUgaW5wdXQgY29sb3IgdmFsdWUgaXMgYSB2YWxpZCByZ2JhL3JnYiB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHJnYmFDb2xvclxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxwaGFGcm9tQ29sb3IocmdiYUNvbG9yKSB7XG4gIHJldHVybiByZ2JhQ29sb3IucmVwbGFjZShcbiAgICAgIC9cXCgoW14sXSspLChbXixdKyksKFteLCldKyksW14pXStcXCkvZywgJygkMSwkMiwkMywgMSknKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjb21wdXRlZCBzdHlsZSBvZiB0aGUgZWxlbWVudC4gVGhlIGhlbHBlciBpcyBuZWNlc3NhcnkgdG8gZW5mb3JjZVxuICogdGhlIHBvc3NpYmxlIGBudWxsYCB2YWx1ZSByZXR1cm5lZCBieSBhIGJ1Z2d5IEZpcmVmb3guXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkU3R5bGUod2luLCBlbCkge1xuICBjb25zdCBzdHlsZSA9IC8qKiBAdHlwZSB7P0NTU1N0eWxlRGVjbGFyYXRpb259ICovKHdpbi5nZXRDb21wdXRlZFN0eWxlKGVsKSk7XG4gIHJldHVybiAvKiogQHR5cGUgeyFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqLyhzdHlsZSkgfHwgbWFwKCk7XG59XG5cblxuLyoqXG4gKiBSZXNldHMgc3R5bGVzIHRoYXQgd2VyZSBzZXQgZHluYW1pY2FsbHkgKGkuZS4gaW5saW5lKVxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvcGVydGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTdHlsZXMoZWxlbWVudCwgcHJvcGVydGllcykge1xuICBjb25zdCBzdHlsZU9iaiA9IHt9O1xuICBwcm9wZXJ0aWVzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgc3R5bGVPYmpbcHJvcF0gPSBudWxsO1xuICB9KTtcbiAgc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlT2JqKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBAY29uc3QgKi9cbmNvbnN0IHRvU3RyaW5nXyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgRUNNQSBbW0NsYXNzXV0gb2YgYSB2YWx1ZVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmdfLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdmFsdWUgaXMgYWN0dWFsbHkgYW4gQXJyYXkuXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYW4gYXJyYXkuXG4gKiBAcGFyYW0gez9JQXJyYXlMaWtlPFQ+fHN0cmluZ30gYXJyYXlMaWtlXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59XG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9BcnJheShhcnJheUxpa2UpIHtcbiAgaWYgKCFhcnJheUxpa2UpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXkoYXJyYXlMaWtlLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMaWtlLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBhcnJheUxpa2VbaV07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdmFsdWUgaXMgYWN0dWFsbHkgYW4gT2JqZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdmFsdWUgaXMgb2YgbnVtYmVyIHR5cGUgYW5kIGZpbml0ZS5cbiAqIE5hTiBhbmQgSW5maW5pdHkgYXJlIG5vdCBjb25zaWRlcmVkIGEgZmluaXRlIG51bWJlci5cbiAqIFN0cmluZyBudW1iZXJzIGFyZSBub3QgY29uc2lkZXJlZCBudW1iZXJzLlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRmluaXRlTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGBzYCBpcyBhIHZhbGlkIHZhbHVlIG9mIGBlbnVtT2JqYC5cbiAqXG4gKiBAcGFyYW0geyFPYmplY3Q8VD59IGVudW1PYmpcbiAqIEBwYXJhbSB7VH0gc1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VudW1WYWx1ZShlbnVtT2JqLCBzKSB7XG4gIGZvciAoY29uc3QgayBpbiBlbnVtT2JqKSB7XG4gICAgaWYgKGVudW1PYmpba10gPT09IHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogRXh0ZXJucyBkZWNsYXJlIHRoYXQgYWNjZXNzIGBkZWZhdWx0Vmlld2AgZnJvbSBgZG9jdW1lbnRgIG9yXG4gKiBgb3duZXJEb2N1bWVudGAgaXMgb2YgdHlwZSBgKFdpbmRvd3xudWxsKWAgYnV0IG1vc3Qgb2Ygb3VyIHBhcmFtZXRlciB0eXBlc1xuICogYXNzdW1lIHRoYXQgaXQgaXMgbmV2ZXIgbnVsbC4gVGhpcyBpcyBPSyBpbiBwcmFjdGljZSBhcyB3ZSBldmVyIG9ubHkgZ2V0XG4gKiBudWxsIG9uIGRpc2Nvbm5lY3RlZCBkb2N1bWVudHMgb3Igb2xkIElFLlxuICogVGhpcyBoZWxwZXIgZnVuY3Rpb24gY2FzdHMgaXQgaW50byBqdXN0IGEgc2ltcGxlIFdpbmRvdyByZXR1cm4gdHlwZS5cbiAqXG4gKiBAcGFyYW0geyFXaW5kb3d8bnVsbH0gd2luT3JOdWxsXG4gKiBAcmV0dXJuIHshV2luZG93fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9XaW4od2luT3JOdWxsKSB7XG4gIHJldHVybiAvKiogQHR5cGUgeyFXaW5kb3d9ICovICh3aW5Pck51bGwpO1xufVxuXG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHt0cnlEZWNvZGVVcmlDb21wb25lbnRffSBmcm9tICcuL3VybC10cnktZGVjb2RlLXVyaS1jb21wb25lbnQnO1xuXG5jb25zdCByZWdleCA9IC8oPzpeWyM/XT98JikoW149Jl0rKSg/Oj0oW14mXSopKT8vZztcblxuLyoqXG4gKiBQYXJzZXMgdGhlIHF1ZXJ5IHN0cmluZyBvZiBhbiBVUkwuIFRoaXMgbWV0aG9kIHJldHVybnMgYSBzaW1wbGUga2V5L3ZhbHVlXG4gKiBtYXAuIElmIHRoZXJlIGFyZSBkdXBsaWNhdGUga2V5cyB0aGUgbGF0ZXN0IHZhbHVlIGlzIHJldHVybmVkLlxuICpcbiAqIERPIE5PVCBpbXBvcnQgdGhlIGZ1bmN0aW9uIGZyb20gdGhpcyBmaWxlLiBJbnN0ZWFkLCBpbXBvcnQgcGFyc2VRdWVyeVN0cmluZ1xuICogZnJvbSBgc3JjL3VybC5qc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5U3RyaW5nXG4gKiBAcmV0dXJuIHshSnNvbk9iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdfKHF1ZXJ5U3RyaW5nKSB7XG4gIGNvbnN0IHBhcmFtcyA9IC8qKiBAdHlwZSB7IUpzb25PYmplY3R9ICovIChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgaWYgKCFxdWVyeVN0cmluZykge1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKHF1ZXJ5U3RyaW5nKSkpIHtcbiAgICBjb25zdCBuYW1lID0gdHJ5RGVjb2RlVXJpQ29tcG9uZW50XyhtYXRjaFsxXSwgbWF0Y2hbMV0pO1xuICAgIGNvbnN0IHZhbHVlID0gbWF0Y2hbMl0gPyB0cnlEZWNvZGVVcmlDb21wb25lbnRfKG1hdGNoWzJdLCBtYXRjaFsyXSkgOiAnJztcbiAgICBwYXJhbXNbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogVHJpZXMgdG8gZGVjb2RlIGEgVVJJIGNvbXBvbmVudCwgZmFsbGluZyBiYWNrIHRvIG9wdF9mYWxsYmFjayAob3IgYW4gZW1wdHlcbiAqIHN0cmluZylcbiAqXG4gKiBETyBOT1QgaW1wb3J0IHRoZSBmdW5jdGlvbiBmcm9tIHRoaXMgZmlsZS4gSW5zdGVhZCwgaW1wb3J0XG4gKiB0cnlEZWNvZGVVcmlDb21wb25lbnQgZnJvbSBgc3JjL3VybC5qc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFxuICogQHBhcmFtIHtzdHJpbmc9fSBmYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJ5RGVjb2RlVXJpQ29tcG9uZW50Xyhjb21wb25lbnQsIGZhbGxiYWNrID0gJycpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge0xydUNhY2hlfSBmcm9tICcuL3V0aWxzL2xydS1jYWNoZSc7XG5pbXBvcnQge2RpY3R9IGZyb20gJy4vdXRpbHMvb2JqZWN0JztcbmltcG9ydCB7ZW5kc1dpdGgsIHN0YXJ0c1dpdGh9IGZyb20gJy4vc3RyaW5nJztcbmltcG9ydCB7Z2V0TW9kZX0gZnJvbSAnLi9tb2RlJztcbmltcG9ydCB7aXNBcnJheX0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge3BhcnNlUXVlcnlTdHJpbmdffSBmcm9tICcuL3VybC1wYXJzZS1xdWVyeS1zdHJpbmcnO1xuaW1wb3J0IHt0cnlEZWNvZGVVcmlDb21wb25lbnRffSBmcm9tICcuL3VybC10cnktZGVjb2RlLXVyaS1jb21wb25lbnQnO1xuaW1wb3J0IHt1cmxzfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQge3VzZXJ9IGZyb20gJy4vbG9nJztcblxuLyoqXG4gKiBAdHlwZSB7IUpzb25PYmplY3R9XG4gKi9cbmNvbnN0IFNFUlZJTkdfVFlQRV9QUkVGSVggPSBkaWN0KHtcbiAgLy8gTm8gdmlld2VyXG4gICdjJzogdHJ1ZSxcbiAgLy8gSW4gdmlld2VyXG4gICd2JzogdHJ1ZSxcbiAgLy8gQWQgbGFuZGluZyBwYWdlXG4gICdhJzogdHJ1ZSxcbiAgLy8gQWRcbiAgJ2FkJzogdHJ1ZSxcbn0pO1xuXG4vKipcbiAqIENhY2hlZCBhLXRhZyB0byBhdm9pZCBtZW1vcnkgYWxsb2NhdGlvbiBkdXJpbmcgVVJMIHBhcnNpbmcuXG4gKiBAdHlwZSB7SFRNTEFuY2hvckVsZW1lbnR9XG4gKi9cbmxldCBhO1xuXG4vKipcbiAqIFdlIGNhY2hlZCBhbGwgcGFyc2VkIFVSTHMuIEFzIG9mIG5vdyB0aGVyZSBhcmUgbm8gdXNlIGNhc2VzXG4gKiBvZiBBTVAgZG9jcyB0aGF0IHdvdWxkIGV2ZXIgcGFyc2UgYW4gYWN0dWFsIGxhcmdlIG51bWJlciBvZiBVUkxzLFxuICogYnV0IHdlIG9mdGVuIHBhcnNlIHRoZSBzYW1lIG9uZSBvdmVyIGFuZCBvdmVyIGFnYWluLlxuICogQHR5cGUge0xydUNhY2hlfVxuICovXG5sZXQgY2FjaGU7XG5cbi8qKiBAcHJpdmF0ZSBAY29uc3QgTWF0Y2hlcyBhbXBfanNfKiBwYXJhbWV0ZXJzIGluIHF1ZXJ5IHN0cmluZy4gKi9cbmNvbnN0IEFNUF9KU19QQVJBTVNfUkVHRVggPSAvWz8mXWFtcF9qc1teJl0qLztcblxuLyoqIEBwcml2YXRlIEBjb25zdCBNYXRjaGVzIGFtcF9nc2EgcGFyYW1ldGVycyBpbiBxdWVyeSBzdHJpbmcuICovXG5jb25zdCBBTVBfR1NBX1BBUkFNU19SRUdFWCA9IC9bPyZdYW1wX2dzYVteJl0qLztcblxuLyoqIEBwcml2YXRlIEBjb25zdCBNYXRjaGVzIGFtcF9yIHBhcmFtZXRlcnMgaW4gcXVlcnkgc3RyaW5nLiAqL1xuY29uc3QgQU1QX1JfUEFSQU1TX1JFR0VYID0gL1s/Jl1hbXBfclteJl0qLztcblxuLyoqIEBwcml2YXRlIEBjb25zdCBNYXRjaGVzIHVzcXAgcGFyYW1ldGVycyBmcm9tIGdvb2cgZXhwZXJpbWVudCBpbiBxdWVyeSBzdHJpbmcuICovXG5jb25zdCBHT09HTEVfRVhQRVJJTUVOVF9QQVJBTVNfUkVHRVggPSAvWz8mXXVzcXBbXiZdKi87XG5cbmNvbnN0IElOVkFMSURfUFJPVE9DT0xTID0gW1xuICAvKmVzbGludCBuby1zY3JpcHQtdXJsOiAwKi8gJ2phdmFzY3JpcHQ6JyxcbiAgLyplc2xpbnQgbm8tc2NyaXB0LXVybDogMCovICdkYXRhOicsXG4gIC8qZXNsaW50IG5vLXNjcmlwdC11cmw6IDAqLyAndmJzY3JpcHQ6Jyxcbl07XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmV4cG9ydCBjb25zdCBTT1VSQ0VfT1JJR0lOX1BBUkFNID0gJ19fYW1wX3NvdXJjZV9vcmlnaW4nO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvcnJlY3Qgb3JpZ2luIGZvciBhIGdpdmVuIHdpbmRvdy5cbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcmV0dXJuIHtzdHJpbmd9IG9yaWdpblxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2luT3JpZ2luKHdpbikge1xuICByZXR1cm4gd2luLm9yaWdpbiB8fCBwYXJzZVVybERlcHJlY2F0ZWQod2luLmxvY2F0aW9uLmhyZWYpLm9yaWdpbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgTG9jYXRpb24tbGlrZSBvYmplY3QgZm9yIHRoZSBnaXZlbiBVUkwuIElmIGl0IGlzIHJlbGF0aXZlLFxuICogdGhlIFVSTCBnZXRzIHJlc29sdmVkLlxuICogQ29uc2lkZXIgdGhlIHJldHVybmVkIG9iamVjdCBpbW11dGFibGUuIFRoaXMgaXMgZW5mb3JjZWQgZHVyaW5nXG4gKiB0ZXN0aW5nIGJ5IGZyZWV6aW5nIHRoZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfbm9jYWNoZVxuICogQHJldHVybiB7IUxvY2F0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmxEZXByZWNhdGVkKHVybCwgb3B0X25vY2FjaGUpIHtcbiAgaWYgKCFhKSB7XG4gICAgYSA9IC8qKiBAdHlwZSB7IUhUTUxBbmNob3JFbGVtZW50fSAqLyAoc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJykpO1xuICAgIGNhY2hlID0gc2VsZi5VcmxDYWNoZSB8fCAoc2VsZi5VcmxDYWNoZSA9IG5ldyBMcnVDYWNoZSgxMDApKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZVVybFdpdGhBKGEsIHVybCwgb3B0X25vY2FjaGUgPyBudWxsIDogY2FjaGUpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBMb2NhdGlvbi1saWtlIG9iamVjdCBmb3IgdGhlIGdpdmVuIFVSTC4gSWYgaXQgaXMgcmVsYXRpdmUsXG4gKiB0aGUgVVJMIGdldHMgcmVzb2x2ZWQuXG4gKiBDb25zaWRlciB0aGUgcmV0dXJuZWQgb2JqZWN0IGltbXV0YWJsZS4gVGhpcyBpcyBlbmZvcmNlZCBkdXJpbmdcbiAqIHRlc3RpbmcgYnkgZnJlZXppbmcgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7IUhUTUxBbmNob3JFbGVtZW50fSBhXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge0xydUNhY2hlPX0gb3B0X2NhY2hlXG4gKiBAcmV0dXJuIHshTG9jYXRpb259XG4gKiBAcmVzdHJpY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVcmxXaXRoQShhLCB1cmwsIG9wdF9jYWNoZSkge1xuICBpZiAob3B0X2NhY2hlICYmIG9wdF9jYWNoZS5oYXModXJsKSkge1xuICAgIHJldHVybiBvcHRfY2FjaGUuZ2V0KHVybCk7XG4gIH1cblxuICBhLmhyZWYgPSB1cmw7XG5cbiAgLy8gSUUxMSBkb2Vzbid0IHByb3ZpZGUgZnVsbCBVUkwgY29tcG9uZW50cyB3aGVuIHBhcnNpbmcgcmVsYXRpdmUgVVJMcy5cbiAgLy8gQXNzaWduaW5nIHRvIGl0c2VsZiBhZ2FpbiBkb2VzIHRoZSB0cmljayAjMzQ0OS5cbiAgaWYgKCFhLnByb3RvY29sKSB7XG4gICAgYS5ocmVmID0gYS5ocmVmO1xuICB9XG5cbiAgY29uc3QgaW5mbyA9IC8qKiBAdHlwZSB7IUxvY2F0aW9ufSAqLyh7XG4gICAgaHJlZjogYS5ocmVmLFxuICAgIHByb3RvY29sOiBhLnByb3RvY29sLFxuICAgIGhvc3Q6IGEuaG9zdCxcbiAgICBob3N0bmFtZTogYS5ob3N0bmFtZSxcbiAgICBwb3J0OiBhLnBvcnQgPT0gJzAnID8gJycgOiBhLnBvcnQsXG4gICAgcGF0aG5hbWU6IGEucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBhLnNlYXJjaCxcbiAgICBoYXNoOiBhLmhhc2gsXG4gICAgb3JpZ2luOiBudWxsLCAvLyBTZXQgYmVsb3cuXG4gIH0pO1xuXG4gIC8vIFNvbWUgSUUxMSBzcGVjaWZpYyBwb2x5ZmlsbHMuXG4gIC8vIDEpIElFMTEgc3RyaXBzIG91dCB0aGUgbGVhZGluZyAnLycgaW4gdGhlIHBhdGhuYW1lLlxuICBpZiAoaW5mby5wYXRobmFtZVswXSAhPT0gJy8nKSB7XG4gICAgaW5mby5wYXRobmFtZSA9ICcvJyArIGluZm8ucGF0aG5hbWU7XG4gIH1cblxuICAvLyAyKSBGb3IgVVJMcyB3aXRoIGltcGxpY2l0IHBvcnRzLCBJRTExIHBhcnNlcyB0byBkZWZhdWx0IHBvcnRzIHdoaWxlXG4gIC8vIG90aGVyIGJyb3dzZXJzIGxlYXZlIHRoZSBwb3J0IGZpZWxkIGVtcHR5LlxuICBpZiAoKGluZm8ucHJvdG9jb2wgPT0gJ2h0dHA6JyAmJiBpbmZvLnBvcnQgPT0gODApXG4gICAgICB8fCAoaW5mby5wcm90b2NvbCA9PSAnaHR0cHM6JyAmJiBpbmZvLnBvcnQgPT0gNDQzKSkge1xuICAgIGluZm8ucG9ydCA9ICcnO1xuICAgIGluZm8uaG9zdCA9IGluZm8uaG9zdG5hbWU7XG4gIH1cblxuICAvLyBGb3IgZGF0YSBVUkkgYS5vcmlnaW4gaXMgZXF1YWwgdG8gdGhlIHN0cmluZyAnbnVsbCcgd2hpY2ggaXMgbm90IHVzZWZ1bC5cbiAgLy8gV2UgaW5zdGVhZCByZXR1cm4gdGhlIGFjdHVhbCBvcmlnaW4gd2hpY2ggaXMgdGhlIGZ1bGwgVVJMLlxuICBpZiAoYS5vcmlnaW4gJiYgYS5vcmlnaW4gIT0gJ251bGwnKSB7XG4gICAgaW5mby5vcmlnaW4gPSBhLm9yaWdpbjtcbiAgfSBlbHNlIGlmIChpbmZvLnByb3RvY29sID09ICdkYXRhOicgfHwgIWluZm8uaG9zdCkge1xuICAgIGluZm8ub3JpZ2luID0gaW5mby5ocmVmO1xuICB9IGVsc2Uge1xuICAgIGluZm8ub3JpZ2luID0gaW5mby5wcm90b2NvbCArICcvLycgKyBpbmZvLmhvc3Q7XG4gIH1cblxuICAvLyBGcmVlemUgZHVyaW5nIHRlc3RpbmcgdG8gYXZvaWQgYWNjaWRlbnRhbCBtdXRhdGlvbi5cbiAgY29uc3QgZnJvemVuID0gKGdldE1vZGUoKS50ZXN0ICYmIE9iamVjdC5mcmVlemUpID8gT2JqZWN0LmZyZWV6ZShpbmZvKSA6IGluZm87XG5cbiAgaWYgKG9wdF9jYWNoZSkge1xuICAgIG9wdF9jYWNoZS5wdXQodXJsLCBmcm96ZW4pO1xuICB9XG5cbiAgcmV0dXJuIGZyb3plbjtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBzdHJpbmcganVzdCBiZWZvcmUgdGhlIGZyYWdtZW50IHBhcnQgKG9yIG9wdGlvbmFsbHlcbiAqIHRvIHRoZSBmcm9udCBvZiB0aGUgcXVlcnkgc3RyaW5nKSBvZiB0aGUgVVJMLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtU3RyaW5nXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfYWRkVG9Gcm9udFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kRW5jb2RlZFBhcmFtU3RyaW5nVG9VcmwodXJsLCBwYXJhbVN0cmluZyxcbiAgb3B0X2FkZFRvRnJvbnQpIHtcbiAgaWYgKCFwYXJhbVN0cmluZykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgY29uc3QgbWFpbkFuZEZyYWdtZW50ID0gdXJsLnNwbGl0KCcjJywgMik7XG4gIGNvbnN0IG1haW5BbmRRdWVyeSA9IG1haW5BbmRGcmFnbWVudFswXS5zcGxpdCgnPycsIDIpO1xuXG4gIGxldCBuZXdVcmwgPSBtYWluQW5kUXVlcnlbMF0gKyAoXG4gICAgbWFpbkFuZFF1ZXJ5WzFdXG4gICAgICA/IChvcHRfYWRkVG9Gcm9udFxuICAgICAgICA/IGA/JHtwYXJhbVN0cmluZ30mJHttYWluQW5kUXVlcnlbMV19YFxuICAgICAgICA6IGA/JHttYWluQW5kUXVlcnlbMV19JiR7cGFyYW1TdHJpbmd9YClcbiAgICAgIDogYD8ke3BhcmFtU3RyaW5nfWApO1xuICBuZXdVcmwgKz0gbWFpbkFuZEZyYWdtZW50WzFdID8gYCMke21haW5BbmRGcmFnbWVudFsxXX1gIDogJyc7XG4gIHJldHVybiBuZXdVcmw7XG59XG4vKipcbiAqIEFwcGVuZHMgYSBxdWVyeSBzdHJpbmcgZmllbGQgYW5kIHZhbHVlIHRvIGEgdXJsLiBga2V5YCBhbmQgYHZhbHVlYFxuICogd2lsbCBiZSByYW4gdGhyb3VnaCBgZW5jb2RlVVJJQ29tcG9uZW50YCBiZWZvcmUgYXBwZW5kaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfYWRkVG9Gcm9udFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFyYW1Ub1VybCh1cmwsIGtleSwgdmFsdWUsIG9wdF9hZGRUb0Zyb250KSB7XG4gIGNvbnN0IGZpZWxkID0gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gO1xuICByZXR1cm4gYXBwZW5kRW5jb2RlZFBhcmFtU3RyaW5nVG9VcmwodXJsLCBmaWVsZCwgb3B0X2FkZFRvRnJvbnQpO1xufVxuXG4vKipcbiAqIEFwcGVuZHMgcXVlcnkgc3RyaW5nIGZpZWxkcyBhbmQgdmFsdWVzIHRvIGEgdXJsLiBUaGUgYHBhcmFtc2Agb2JqZWN0cydcbiAqIGBrZXlgcyBhbmQgYHZhbHVlYHMgd2lsbCBiZSB0cmFuc2Zvcm1lZCBpbnRvIHF1ZXJ5IHN0cmluZyBrZXlzL3ZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7IUpzb25PYmplY3Q8c3RyaW5nLCBzdHJpbmd8IUFycmF5PHN0cmluZz4+fSBwYXJhbXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFBhcmFtc1RvVXJsKHVybCwgcGFyYW1zKSB7XG4gIHJldHVybiBhcHBlbmRFbmNvZGVkUGFyYW1TdHJpbmdUb1VybCh1cmwsIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nKHBhcmFtcykpO1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgbWFwIGludG8gYSBxdWVyeSBzdHJpbmcgd2l0aCBib3RoIGtleXNcbiAqIGFuZCB2YWx1ZXMgZW5jb2RlZC5cbiAqIEBwYXJhbSB7IUpzb25PYmplY3Q8c3RyaW5nLCBzdHJpbmd8IUFycmF5PHN0cmluZz4+fSBwYXJhbXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nKHBhcmFtcykge1xuICBjb25zdCBzID0gW107XG4gIGZvciAoY29uc3QgayBpbiBwYXJhbXMpIHtcbiAgICBjb25zdCB2ID0gcGFyYW1zW2tdO1xuICAgIGlmICh2ID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN2ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2W2ldKTtcbiAgICAgICAgcy5wdXNoKGAke2VuY29kZVVSSUNvbXBvbmVudChrKX09JHtlbmNvZGVVUklDb21wb25lbnQoc3YpfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdiA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAodik7XG4gICAgICBzLnB1c2goYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGspfT0ke2VuY29kZVVSSUNvbXBvbmVudChzdil9YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzLmpvaW4oJyYnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgVVJMIGlzIHNlY3VyZTogZWl0aGVyIEhUVFBTIG9yIGxvY2FsaG9zdCAoZm9yIHRlc3RpbmcpLlxuICogQHBhcmFtIHtzdHJpbmd8IUxvY2F0aW9ufSB1cmxcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NlY3VyZVVybERlcHJlY2F0ZWQodXJsKSB7XG4gIGlmICh0eXBlb2YgdXJsID09ICdzdHJpbmcnKSB7XG4gICAgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKHVybCk7XG4gIH1cbiAgcmV0dXJuICh1cmwucHJvdG9jb2wgPT0gJ2h0dHBzOicgfHxcbiAgICAgIHVybC5ob3N0bmFtZSA9PSAnbG9jYWxob3N0JyB8fFxuICAgICAgZW5kc1dpdGgodXJsLmhvc3RuYW1lLCAnLmxvY2FsaG9zdCcpKTtcbn1cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYSBnaXZlbiB1cmwgaXMgSFRUUFMgb3IgcHJvdG9jb2wgcmVsYXRpdmUuIEl0J3MgYSB1c2VyLWxldmVsXG4gKiBhc3NlcnQuXG4gKlxuICogUHJvdmlkZXMgYW4gZXhjZXB0aW9uIGZvciBsb2NhbGhvc3QuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfHVuZGVmaW5lZH0gdXJsU3RyaW5nXG4gKiBAcGFyYW0geyFFbGVtZW50fHN0cmluZ30gZWxlbWVudENvbnRleHQgRWxlbWVudCB3aGVyZSB0aGUgdXJsIHdhcyBmb3VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gc291cmNlTmFtZSBVc2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEh0dHBzVXJsKFxuICB1cmxTdHJpbmcsIGVsZW1lbnRDb250ZXh0LCBzb3VyY2VOYW1lID0gJ3NvdXJjZScpIHtcbiAgdXNlcigpLmFzc2VydCh1cmxTdHJpbmcgIT0gbnVsbCwgJyVzICVzIG11c3QgYmUgYXZhaWxhYmxlJyxcbiAgICAgIGVsZW1lbnRDb250ZXh0LCBzb3VyY2VOYW1lKTtcbiAgLy8gKGVyd2lubSwgIzQ1NjApOiB0eXBlIGNhc3QgbmVjZXNzYXJ5IHVudGlsICM0NTYwIGlzIGZpeGVkLlxuICBjb25zdCB0aGVVcmxTdHJpbmcgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHVybFN0cmluZyk7XG4gIHVzZXIoKS5hc3NlcnQoaXNTZWN1cmVVcmxEZXByZWNhdGVkKHRoZVVybFN0cmluZykgfHwgL14oXFwvXFwvKS8udGVzdCh0aGVVcmxTdHJpbmcpLFxuICAgICAgJyVzICVzIG11c3Qgc3RhcnQgd2l0aCAnICtcbiAgICAgICdcImh0dHBzOi8vXCIgb3IgXCIvL1wiIG9yIGJlIHJlbGF0aXZlIGFuZCBzZXJ2ZWQgZnJvbSAnICtcbiAgICAgICdlaXRoZXIgaHR0cHMgb3IgZnJvbSBsb2NhbGhvc3QuIEludmFsaWQgdmFsdWU6ICVzJyxcbiAgICAgIGVsZW1lbnRDb250ZXh0LCBzb3VyY2VOYW1lLCB0aGVVcmxTdHJpbmcpO1xuICByZXR1cm4gdGhlVXJsU3RyaW5nO1xufVxuXG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIGdpdmVuIHVybCBpcyBhbiBhYnNvbHV0ZSBIVFRQIG9yIEhUVFBTIFVSTC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxTdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEFic29sdXRlSHR0cE9ySHR0cHNVcmwodXJsU3RyaW5nKSB7XG4gIHVzZXIoKS5hc3NlcnQoL15odHRwcz9cXDovaS50ZXN0KHVybFN0cmluZyksXG4gICAgICAnVVJMIG11c3Qgc3RhcnQgd2l0aCBcImh0dHA6Ly9cIiBvciBcImh0dHBzOi8vXCIuIEludmFsaWQgdmFsdWU6ICVzJyxcbiAgICAgIHVybFN0cmluZyk7XG4gIHJldHVybiBwYXJzZVVybERlcHJlY2F0ZWQodXJsU3RyaW5nKS5ocmVmO1xufVxuXG5cbi8qKlxuICogUGFyc2VzIHRoZSBxdWVyeSBzdHJpbmcgb2YgYW4gVVJMLiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgc2ltcGxlIGtleS92YWx1ZVxuICogbWFwLiBJZiB0aGVyZSBhcmUgZHVwbGljYXRlIGtleXMgdGhlIGxhdGVzdCB2YWx1ZSBpcyByZXR1cm5lZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGltcGxlbWVudGVkIGluIGEgc2VwYXJhdGUgZmlsZSB0byBhdm9pZCBhIGNpcmN1bGFyXG4gKiBkZXBlbmRlbmN5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZ1xuICogQHJldHVybiB7IUpzb25PYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5nKSB7XG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nXyhxdWVyeVN0cmluZyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgVVJMIHdpdGhvdXQgZnJhZ21lbnQuIElmIFVSTCBkb2Vzbid0IGNvbnRhaW4gZnJhZ21lbnQsIHRoZSBzYW1lXG4gKiBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGcmFnbWVudCh1cmwpIHtcbiAgY29uc3QgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIGluZGV4KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmcmFnbWVudCBmcm9tIHRoZSBVUkwuIElmIHRoZSBVUkwgZG9lc24ndCBjb250YWluIGZyYWdtZW50LFxuICogdGhlIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50KHVybCkge1xuICBjb25zdCBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIGlmIChpbmRleCA9PSAtMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gdXJsLnN1YnN0cmluZyhpbmRleCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBVUkwgaGFzIHRoZSBvcmlnaW4gb2YgYSBwcm94eS5cbiAqIEBwYXJhbSB7c3RyaW5nfCFMb2NhdGlvbn0gdXJsIFVSTCBvZiBhbiBBTVAgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm94eU9yaWdpbih1cmwpIHtcbiAgaWYgKHR5cGVvZiB1cmwgPT0gJ3N0cmluZycpIHtcbiAgICB1cmwgPSBwYXJzZVVybERlcHJlY2F0ZWQodXJsKTtcbiAgfVxuICByZXR1cm4gdXJscy5jZG5Qcm94eVJlZ2V4LnRlc3QodXJsLm9yaWdpbik7XG59XG5cbi8qKlxuICogRm9yIHByb3h5LW9yaWdpbiBVUkxzLCByZXR1cm5zIHRoZSBzZXJ2aW5nIHR5cGUuIE90aGVyd2lzZSwgcmV0dXJucyBudWxsLlxuICogRS5nLiwgJ2h0dHBzOi8vYW1wLWNvbS5jZG4uYW1wcHJvamVjdC5vcmcvYS9zL2FtcC5jb20vYW1wX2RvY3VtZW50Lmh0bWwnXG4gKiByZXR1cm5zICdhJy5cbiAqIEBwYXJhbSB7c3RyaW5nfCFMb2NhdGlvbn0gdXJsIFVSTCBvZiBhbiBBTVAgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJveHlTZXJ2aW5nVHlwZSh1cmwpIHtcbiAgaWYgKHR5cGVvZiB1cmwgPT0gJ3N0cmluZycpIHtcbiAgICB1cmwgPSBwYXJzZVVybERlcHJlY2F0ZWQodXJsKTtcbiAgfVxuICBpZiAoIWlzUHJveHlPcmlnaW4odXJsKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWUuc3BsaXQoJy8nLCAyKTtcbiAgcmV0dXJuIHBhdGhbMV07XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBVUkwgb3JpZ2luIGlzIGxvY2FsaG9zdC5cbiAqIEBwYXJhbSB7c3RyaW5nfCFMb2NhdGlvbn0gdXJsIFVSTCBvZiBhbiBBTVAgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbGhvc3RPcmlnaW4odXJsKSB7XG4gIGlmICh0eXBlb2YgdXJsID09ICdzdHJpbmcnKSB7XG4gICAgdXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKHVybCk7XG4gIH1cbiAgcmV0dXJuIHVybHMubG9jYWxob3N0UmVnZXgudGVzdCh1cmwub3JpZ2luKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhlIFVSTCBoYXMgdmFsaWQgcHJvdG9jb2wuXG4gKiBEZWVwIGxpbmsgcHJvdG9jb2wgaXMgdmFsaWQsIGJ1dCBub3QgamF2YXNjcmlwdCBldGMuXG4gKiBAcGFyYW0ge3N0cmluZ3whTG9jYXRpb259IHVybFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdG9jb2xWYWxpZCh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHVybCA9PSAnc3RyaW5nJykge1xuICAgIHVybCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh1cmwpO1xuICB9XG4gIHJldHVybiAhSU5WQUxJRF9QUk9UT0NPTFMuaW5jbHVkZXModXJsLnByb3RvY29sKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgVVJMIHdpdGhvdXQgQU1QIEpTIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBbXBKc1BhcmFtc0Zyb21VcmwodXJsKSB7XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlVXJsRGVwcmVjYXRlZCh1cmwpO1xuICBjb25zdCBzZWFyY2ggPSByZW1vdmVBbXBKc1BhcmFtc0Zyb21TZWFyY2gocGFyc2VkLnNlYXJjaCk7XG4gIHJldHVybiBwYXJzZWQub3JpZ2luICsgcGFyc2VkLnBhdGhuYW1lICsgc2VhcmNoICsgcGFyc2VkLmhhc2g7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgVVJMIHdpdGhvdXQgYSBxdWVyeSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTZWFyY2godXJsKSB7XG4gIGNvbnN0IGluZGV4ID0gdXJsLmluZGV4T2YoJz8nKTtcbiAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBjb25zdCBmcmFnbWVudCA9IGdldEZyYWdtZW50KHVybCk7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIGluZGV4KSArIGZyYWdtZW50O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgcGFyYW1ldGVycyB0aGF0IHN0YXJ0IHdpdGggYW1wIGpzIHBhcmFtZXRlciBwYXR0ZXJuIGFuZCByZXR1cm5zIHRoZVxuICogbmV3IHNlYXJjaCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsU2VhcmNoXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUFtcEpzUGFyYW1zRnJvbVNlYXJjaCh1cmxTZWFyY2gpIHtcbiAgaWYgKCF1cmxTZWFyY2ggfHwgdXJsU2VhcmNoID09ICc/Jykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBzZWFyY2ggPSB1cmxTZWFyY2hcbiAgICAgIC5yZXBsYWNlKEFNUF9KU19QQVJBTVNfUkVHRVgsICcnKVxuICAgICAgLnJlcGxhY2UoQU1QX0dTQV9QQVJBTVNfUkVHRVgsICcnKVxuICAgICAgLnJlcGxhY2UoQU1QX1JfUEFSQU1TX1JFR0VYLCAnJylcbiAgICAgIC5yZXBsYWNlKEdPT0dMRV9FWFBFUklNRU5UX1BBUkFNU19SRUdFWCwgJycpXG4gICAgICAucmVwbGFjZSgvXls/Jl0vLCAnJyk7IC8vIFJlbW92ZXMgZmlyc3QgPyBvciAmLlxuICByZXR1cm4gc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJyc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc291cmNlIFVSTCBvZiBhbiBBTVAgZG9jdW1lbnQgZm9yIGRvY3VtZW50cyBzZXJ2ZWRcbiAqIG9uIGEgcHJveHkgb3JpZ2luIG9yIGRpcmVjdGx5LlxuICogQHBhcmFtIHtzdHJpbmd8IUxvY2F0aW9ufSB1cmwgVVJMIG9mIGFuIEFNUCBkb2N1bWVudC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNvdXJjZVVybCh1cmwpIHtcbiAgaWYgKHR5cGVvZiB1cmwgPT0gJ3N0cmluZycpIHtcbiAgICB1cmwgPSBwYXJzZVVybERlcHJlY2F0ZWQodXJsKTtcbiAgfVxuXG4gIC8vIE5vdCBhIHByb3h5IFVSTCAtIHJldHVybiB0aGUgVVJMIGl0c2VsZi5cbiAgaWYgKCFpc1Byb3h5T3JpZ2luKHVybCkpIHtcbiAgICByZXR1cm4gdXJsLmhyZWY7XG4gIH1cblxuICAvLyBBIHByb3h5IFVSTC5cbiAgLy8gRXhhbXBsZSBwYXRoIHRoYXQgaXMgYmVpbmcgbWF0Y2hlZCBoZXJlLlxuICAvLyBodHRwczovL2Nkbi5hbXBwcm9qZWN0Lm9yZy9jL3Mvd3d3Lm9yaWdpbi5jb20vZm9vL1xuICAvLyBUaGUgL3MvIGlzIG9wdGlvbmFsIGFuZCBzaWduYWxzIGEgc2VjdXJlIG9yaWdpbi5cbiAgY29uc3QgcGF0aCA9IHVybC5wYXRobmFtZS5zcGxpdCgnLycpO1xuICBjb25zdCBwcmVmaXggPSBwYXRoWzFdO1xuICB1c2VyKCkuYXNzZXJ0KFNFUlZJTkdfVFlQRV9QUkVGSVhbcHJlZml4XSxcbiAgICAgICdVbmtub3duIHBhdGggcHJlZml4IGluIHVybCAlcycsIHVybC5ocmVmKTtcbiAgY29uc3QgZG9tYWluT3JIdHRwc1NpZ25hbCA9IHBhdGhbMl07XG4gIGNvbnN0IG9yaWdpbiA9IGRvbWFpbk9ySHR0cHNTaWduYWwgPT0gJ3MnXG4gICAgPyAnaHR0cHM6Ly8nICsgZGVjb2RlVVJJQ29tcG9uZW50KHBhdGhbM10pXG4gICAgOiAnaHR0cDovLycgKyBkZWNvZGVVUklDb21wb25lbnQoZG9tYWluT3JIdHRwc1NpZ25hbCk7XG4gIC8vIFNhbml0eSB0ZXN0IHRoYXQgd2hhdCB3ZSBmb3VuZCBsb29rcyBsaWtlIGEgZG9tYWluLlxuICB1c2VyKCkuYXNzZXJ0KG9yaWdpbi5pbmRleE9mKCcuJykgPiAwLCAnRXhwZWN0ZWQgYSAuIGluIG9yaWdpbiAlcycsIG9yaWdpbik7XG4gIHBhdGguc3BsaWNlKDEsIGRvbWFpbk9ySHR0cHNTaWduYWwgPT0gJ3MnID8gMyA6IDIpO1xuICByZXR1cm4gb3JpZ2luICsgcGF0aC5qb2luKCcvJykgK1xuICAgICAgcmVtb3ZlQW1wSnNQYXJhbXNGcm9tU2VhcmNoKHVybC5zZWFyY2gpICsgKHVybC5oYXNoIHx8ICcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzb3VyY2Ugb3JpZ2luIG9mIGFuIEFNUCBkb2N1bWVudCBmb3IgZG9jdW1lbnRzIHNlcnZlZFxuICogb24gYSBwcm94eSBvcmlnaW4gb3IgZGlyZWN0bHkuXG4gKiBAcGFyYW0ge3N0cmluZ3whTG9jYXRpb259IHVybCBVUkwgb2YgYW4gQU1QIGRvY3VtZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgc291cmNlIG9yaWdpbiBvZiB0aGUgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U291cmNlT3JpZ2luKHVybCkge1xuICByZXR1cm4gcGFyc2VVcmxEZXByZWNhdGVkKGdldFNvdXJjZVVybCh1cmwpKS5vcmlnaW47XG59XG5cbi8qKlxuICogUmV0dXJucyBhYnNvbHV0ZSBVUkwgcmVzb2x2ZWQgYmFzZWQgb24gdGhlIHJlbGF0aXZlIFVSTCBhbmQgdGhlIGJhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVcmxTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfCFMb2NhdGlvbn0gYmFzZVVybFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlVXJsKHJlbGF0aXZlVXJsU3RyaW5nLCBiYXNlVXJsKSB7XG4gIGlmICh0eXBlb2YgYmFzZVVybCA9PSAnc3RyaW5nJykge1xuICAgIGJhc2VVcmwgPSBwYXJzZVVybERlcHJlY2F0ZWQoYmFzZVVybCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBVUkwgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgVVJMKHJlbGF0aXZlVXJsU3RyaW5nLCBiYXNlVXJsLmhyZWYpLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVSZWxhdGl2ZVVybEZhbGxiYWNrXyhyZWxhdGl2ZVVybFN0cmluZywgYmFzZVVybCk7XG59XG5cbi8qKlxuICogRmFsbGJhY2sgZm9yIFVSTCByZXNvbHZlciB3aGVuIFVSTCBjbGFzcyBpcyBub3QgYXZhaWxhYmxlLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVXJsU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ3whTG9jYXRpb259IGJhc2VVcmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqIEBwcml2YXRlIFZpc2libGUgZm9yIHRlc3RpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUmVsYXRpdmVVcmxGYWxsYmFja18ocmVsYXRpdmVVcmxTdHJpbmcsIGJhc2VVcmwpIHtcbiAgaWYgKHR5cGVvZiBiYXNlVXJsID09ICdzdHJpbmcnKSB7XG4gICAgYmFzZVVybCA9IHBhcnNlVXJsRGVwcmVjYXRlZChiYXNlVXJsKTtcbiAgfVxuICByZWxhdGl2ZVVybFN0cmluZyA9IHJlbGF0aXZlVXJsU3RyaW5nLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgY29uc3QgcmVsYXRpdmVVcmwgPSBwYXJzZVVybERlcHJlY2F0ZWQocmVsYXRpdmVVcmxTdHJpbmcpO1xuXG4gIC8vIEFic29sdXRlIFVSTC5cbiAgaWYgKHN0YXJ0c1dpdGgocmVsYXRpdmVVcmxTdHJpbmcudG9Mb3dlckNhc2UoKSwgcmVsYXRpdmVVcmwucHJvdG9jb2wpKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlVXJsLmhyZWY7XG4gIH1cblxuICAvLyBQcm90b2NvbC1yZWxhdGl2ZSBVUkwuXG4gIGlmIChzdGFydHNXaXRoKHJlbGF0aXZlVXJsU3RyaW5nLCAnLy8nKSkge1xuICAgIHJldHVybiBiYXNlVXJsLnByb3RvY29sICsgcmVsYXRpdmVVcmxTdHJpbmc7XG4gIH1cblxuICAvLyBBYnNvbHV0ZSBwYXRoLlxuICBpZiAoc3RhcnRzV2l0aChyZWxhdGl2ZVVybFN0cmluZywgJy8nKSkge1xuICAgIHJldHVybiBiYXNlVXJsLm9yaWdpbiArIHJlbGF0aXZlVXJsU3RyaW5nO1xuICB9XG5cbiAgLy8gUmVsYXRpdmUgcGF0aC5cbiAgcmV0dXJuIGJhc2VVcmwub3JpZ2luICsgYmFzZVVybC5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXi9dKiQvLCAnLycpXG4gICAgICArIHJlbGF0aXZlVXJsU3RyaW5nO1xufVxuXG5cbi8qKlxuICogQWRkIFwiX19hbXBfc291cmNlX29yaWdpblwiIHF1ZXJ5IHBhcmFtZXRlciB0byB0aGUgVVJMLlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvcnNVcmwod2luLCB1cmwpIHtcbiAgY2hlY2tDb3JzVXJsKHVybCk7XG4gIGNvbnN0IHNvdXJjZU9yaWdpbiA9IGdldFNvdXJjZU9yaWdpbih3aW4ubG9jYXRpb24uaHJlZik7XG4gIHJldHVybiBhZGRQYXJhbVRvVXJsKHVybCwgU09VUkNFX09SSUdJTl9QQVJBTSwgc291cmNlT3JpZ2luKTtcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdXJsIGhhcyBfX2FtcF9zb3VyY2Vfb3JpZ2luIGFuZCB0aHJvd3MgaWYgaXQgZG9lcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ29yc1VybCh1cmwpIHtcbiAgY29uc3QgcGFyc2VkVXJsID0gcGFyc2VVcmxEZXByZWNhdGVkKHVybCk7XG4gIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhwYXJzZWRVcmwuc2VhcmNoKTtcbiAgdXNlcigpLmFzc2VydCghKFNPVVJDRV9PUklHSU5fUEFSQU0gaW4gcXVlcnkpLFxuICAgICAgJ1NvdXJjZSBvcmlnaW4gaXMgbm90IGFsbG93ZWQgaW4gJXMnLCB1cmwpO1xufVxuXG4vKipcbiAqIFRyaWVzIHRvIGRlY29kZSBhIFVSSSBjb21wb25lbnQsIGZhbGxpbmcgYmFjayB0byBvcHRfZmFsbGJhY2sgKG9yIGFuIGVtcHR5XG4gKiBzdHJpbmcpXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZmFsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeURlY29kZVVyaUNvbXBvbmVudChjb21wb25lbnQsIG9wdF9mYWxsYmFjaykge1xuICByZXR1cm4gdHJ5RGVjb2RlVXJpQ29tcG9uZW50Xyhjb21wb25lbnQsIG9wdF9mYWxsYmFjayk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIENvbXBhcmVzIGlmIHR3byBhcnJheXMgY29udGFpbnMgZXhhY3RseSBzYW1lIGVsZW1lbnRzIG9mIHNhbWUgbnVtYmVyXG4gKiBvZiBzYW1lIG9yZGVyLlxuICogTm90aWNlIHRoYXQgaXQgZG9lcyBOT1QgaGFuZGxlIE5hTiBjYXNlIGFzIGV4cGVjdGVkXG4gKlxuICogQHBhcmFtIHshQXJyYXk8VD59IGFycjFcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnIyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFyZUVxdWFsT3JkZXJlZChhcnIxLCBhcnIyKSB7XG4gIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyMVtpXSAhPT0gYXJyMltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEEgYml0IGxpa2UgQXJyYXkjZmlsdGVyLCBidXQgcmVtb3ZlcyBlbGVtZW50cyB0aGF0IGZpbHRlciBmYWxzZSBmcm9tIHRoZVxuICogYXJyYXkuIFJldHVybnMgdGhlIGZpbHRlcmVkIGl0ZW1zLlxuICpcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbihULCBudW1iZXIsICFBcnJheTxUPik6Ym9vbGVhbn0gZmlsdGVyXG4gKiBAcmV0dXJuIHshQXJyYXk8VD59XG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyU3BsaWNlKGFycmF5LCBmaWx0ZXIpIHtcbiAgY29uc3Qgc3BsaWNlID0gW107XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpdGVtID0gYXJyYXlbaV07XG4gICAgaWYgKGZpbHRlcihpdGVtLCBpLCBhcnJheSkpIHtcbiAgICAgIGlmIChpbmRleCA8IGkpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gaXRlbTtcbiAgICAgIH1cbiAgICAgIGluZGV4Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwbGljZS5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmRleCA8IGFycmF5Lmxlbmd0aCkge1xuICAgIGFycmF5Lmxlbmd0aCA9IGluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHNwbGljZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBtYXRjaGluZyB0aGUgcHJlZGljYXRlLlxuICogTGlrZSBBcnJheSNmaW5kSW5kZXguXG4gKlxuICogQHBhcmFtIHshQXJyYXk8VD59IGFycmF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIG51bWJlciwgIUFycmF5PFQ+KTpib29sZWFufSBwcmVkaWNhdGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpXSwgaSwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBpdGVyYXRvciB0byBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0geyFJdGVyYXRvcjxUPn0gaXRlcmF0b3JcbiAqIEByZXR1cm4ge0FycmF5PFQ+fVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYXRvcihpdGVyYXRvcikge1xuICBjb25zdCBhcnJheSA9IFtdO1xuICBmb3IgKGxldCBlID0gaXRlcmF0b3IubmV4dCgpOyAhZS5kb25lOyBlID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgYXJyYXkucHVzaChlLnZhbHVlKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQWRkcyBpdGVtIHRvIGFycmF5IGlmIGl0IGlzIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUPn0gYXJyYXlcbiAqIEBwYXJhbSB7VH0gaXRlbVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1c2hJZk5vdEV4aXN0KGFycmF5LCBpdGVtKSB7XG4gIGlmIChhcnJheS5pbmRleE9mKGl0ZW0pIDwgMCkge1xuICAgIGFycmF5LnB1c2goaXRlbSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2J5dGVzVG9TdHJpbmcsIHN0cmluZ1RvQnl0ZXMsIHV0ZjhFbmNvZGV9IGZyb20gJy4vYnl0ZXMnO1xuXG4vKipcbiAqIENoYXJhY3RlciBtYXBwaW5nIGZyb20gYmFzZTY0dXJsIHRvIGJhc2U2NC5cbiAqIEBjb25zdCB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IGJhc2U2NFVybERlY29kZVN1YnMgPSB7Jy0nOiAnKycsICdfJzogJy8nLCAnLic6ICc9J307XG5cbi8qKlxuICogQ2hhcmFjdGVyIG1hcHBpbmcgZnJvbSBiYXNlNjQgdG8gYmFzZTY0dXJsLlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn1cbiAqL1xuY29uc3QgYmFzZTY0VXJsRW5jb2RlU3VicyA9IHsnKyc6ICctJywgJy8nOiAnXycsICc9JzogJy4nfTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB3aGljaCBpcyBpbiBiYXNlNjR1cmwgZW5jb2RpbmcgaW50byBhIFVpbnQ4QXJyYXlcbiAqIGNvbnRhaW5pbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFVybERlY29kZVRvQnl0ZXMoc3RyKSB7XG4gIGNvbnN0IGVuY29kZWQgPSBhdG9iKHN0ci5yZXBsYWNlKC9bLV8uXS9nLCBjaCA9PiBiYXNlNjRVcmxEZWNvZGVTdWJzW2NoXSkpO1xuICByZXR1cm4gc3RyaW5nVG9CeXRlcyhlbmNvZGVkKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB3aGljaCBpcyBpbiBiYXNlNjQgZW5jb2RpbmcgaW50byBhIFVpbnQ4QXJyYXlcbiAqIGNvbnRhaW5pbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NERlY29kZVRvQnl0ZXMoc3RyKSB7XG4gIHJldHVybiBzdHJpbmdUb0J5dGVzKGF0b2Ioc3RyKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBieXRlcyBhcnJheSBpbnRvIGJhc2U2NHVybCBlbmNvZGVkIHN0cmluZy5cbiAqIGJhc2U2NHVybCBpcyBkZWZpbmVkIGluIFJGQyA0NjQ4LiBJdCBpcyBzb21ldGltZXMgcmVmZXJyZWQgdG8gYXMgXCJ3ZWIgc2FmZVwiLlxuICogQHBhcmFtIHshVWludDhBcnJheX0gYnl0ZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFVybEVuY29kZUZyb21CeXRlcyhieXRlcykge1xuICBjb25zdCBzdHIgPSBieXRlc1RvU3RyaW5nKGJ5dGVzKTtcbiAgcmV0dXJuIGJ0b2Eoc3RyKS5yZXBsYWNlKC9bKy89XS9nLCBjaCA9PiBiYXNlNjRVcmxFbmNvZGVTdWJzW2NoXSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBiYXNlNjR1cmwgZW5jb2RlZCBzdHJpbmcuXG4gKiBiYXNlNjR1cmwgaXMgZGVmaW5lZCBpbiBSRkMgNDY0OC4gSXQgaXMgc29tZXRpbWVzIHJlZmVycmVkIHRvIGFzIFwid2ViIHNhZmVcIi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFVybEVuY29kZUZyb21TdHJpbmcoc3RyKSB7XG4gIGNvbnN0IGJ5dGVzID0gdXRmOEVuY29kZShzdHIpO1xuICByZXR1cm4gYmFzZTY0VXJsRW5jb2RlRnJvbUJ5dGVzKGJ5dGVzKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGJ5dGVzIGFycmF5IGludG8gYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICogQHBhcmFtIHshVWludDhBcnJheX0gYnl0ZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NEVuY29kZUZyb21CeXRlcyhieXRlcykge1xuICByZXR1cm4gYnRvYShieXRlc1RvU3RyaW5nKGJ5dGVzKSk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtkZXZ9IGZyb20gJy4uL2xvZyc7XG5cbi8qKlxuICogSW50ZXJwcmV0IGEgYnl0ZSBhcnJheSBhcyBhIFVURi04IHN0cmluZy5cbiAqIEBwYXJhbSB7IUJ1ZmZlclNvdXJjZX0gYnl0ZXNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhEZWNvZGUoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpLmRlY29kZShieXRlcyk7XG4gIH1cbiAgY29uc3QgYXNjaWlTdHJpbmcgPSBieXRlc1RvU3RyaW5nKG5ldyBVaW50OEFycmF5KGJ5dGVzLmJ1ZmZlciB8fCBieXRlcykpO1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShhc2NpaVN0cmluZykpO1xufVxuXG4vKipcbiAqIFR1cm4gYSBzdHJpbmcgaW50byBVVEYtOCBieXRlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4geyFVaW50OEFycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOEVuY29kZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCd1dGYtOCcpLmVuY29kZShzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmdUb0J5dGVzKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmcpKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgd2hpY2ggaG9sZHMgOC1iaXQgY29kZSBwb2ludHMsIHN1Y2ggYXMgdGhlIHJlc3VsdCBvZiBhdG9iLFxuICogaW50byBhIFVpbnQ4QXJyYXkgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBieXRlcy5cbiAqIElmIHlvdSBoYXZlIGEgc3RyaW5nIG9mIGNoYXJhY3RlcnMsIHlvdSBwcm9iYWJseSB3YW50IHRvIGJlIHVzaW5nIHV0ZjhFbmNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBkZXYoKS5hc3NlcnQoY2hhckNvZGUgPD0gMjU1LCAnQ2hhcmFjdGVycyBtdXN0IGJlIGluIHJhbmdlIFswLDI1NV0nKTtcbiAgICBieXRlc1tpXSA9IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIDgtYml0IGJ5dGVzIGFycmF5IGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSB7IVVpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU3RyaW5nKGJ5dGVzKSB7XG4gIC8vIEludGVudGlvbmFsbHkgYXZvaWRzIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgc28gd2UgZG9uJ3Qgc3VmZmVyIGFcbiAgLy8gc3RhY2sgb3ZlcmZsb3cuICMxMDQ5NSwgaHR0cHM6Ly9qc3BlcmYuY29tL2J5dGVzVG9TdHJpbmctMlxuICBjb25zdCBhcnJheSA9IG5ldyBBcnJheShieXRlcy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXlbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTtcbiAgfVxuICByZXR1cm4gYXJyYXkuam9pbignJyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSA0LWl0ZW0gYnl0ZSBhcnJheSB0byBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICogQXNzdW1lcyBieXRlcyBhcmUgYmlnIGVuZGlhbi5cbiAqIEBwYXJhbSB7IVVpbnQ4QXJyYXl9IGJ5dGVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvVUludDMyKGJ5dGVzKSB7XG4gIGlmIChieXRlcy5sZW5ndGggIT0gNCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgYnl0ZSBhcnJheSB3aXRoIGxlbmd0aCAhPSA0Jyk7XG4gIH1cbiAgY29uc3QgdmFsID0gKGJ5dGVzWzBdICYgMHhGRikgPDwgMjQgfFxuICAgICAoYnl0ZXNbMV0gJiAweEZGKSA8PCAxNiB8XG4gICAgIChieXRlc1syXSAmIDB4RkYpIDw8IDggfFxuICAgICAoYnl0ZXNbM10gJiAweEZGKTtcbiAgLy8gQ29udmVydCB0byB1bnNpZ25lZC5cbiAgcmV0dXJuIHZhbCA+Pj4gMDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBieXRlcyBhcnJheSB3aXRoIHNwZWNpZmljIGxlbmd0aCB1c2luZ1xuICogd2luLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMuIFJldHVybiBudWxsIGlmIGl0IGlzIG5vdCBhdmFpbGFibGUuXG4gKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7P1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcnlwdG9SYW5kb21CeXRlc0FycmF5KHdpbiwgbGVuZ3RoKSB7XG4gIGlmICghd2luLmNyeXB0byB8fCAhd2luLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFdpZGVseSBhdmFpbGFibGUgaW4gYnJvd3NlcnMgd2Ugc3VwcG9ydDpcbiAgLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Z2V0UmFuZG9tVmFsdWVzXG4gIGNvbnN0IHVpbnQ4YXJyYXkgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICB3aW4uY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1aW50OGFycmF5KTtcbiAgcmV0dXJuIHVpbnQ4YXJyYXk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtzdHJpbmdIYXNoMzJ9IGZyb20gJy4uL3N0cmluZyc7XG5cblxuLyoqXG4gKiBHZXRzIGEgc3RyaW5nIG9mIGNvbmNhdGVuYXRlZCBlbGVtZW50IG5hbWVzIGFuZCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAqIG9mIHRoZSBET00gZWxlbWVudCBhbmQgaXRzIHBhcmVudEVsZW1lbnQncyAodXAgdG8gMjUpLiAgUmVsYXRpdmUgcG9zaXRpb25cbiAqIGlzIHRoZSBpbmRleCBvZiBub2RlcyB3aXRoIHRoaXMgdGFnIHdpdGhpbiB0aGUgcGFyZW50J3MgY2hpbGRyZW4uXG4gKiBUaGUgb3JkZXIgaXMgZnJvbSB0aGUgaW5uZXIgdG8gb3V0ZXIgbm9kZXMgaW4gRE9NIGhpZXJhcmNoeS5cbiAqXG4gKiBJZiBhIERPTSBoaWVyYXJjaHkgaXMgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiA8ZGl2IGlkPSdpZDEnIC4uLj5cbiAqICAgPGRpdiBpZD0naWQyJyAuLi4+XG4gKiAgICAgPHRhYmxlIC4uLj4gICAgICAgLy8gdGFibGU6MFxuICogICAgICAgPHRyPiAgICAgICAgICAgIC8vIHRyOjBcbiAqICAgICAgICAgPHRkPi4uLjwvdGQ+ICAvLyB0ZDowXG4gKiAgICAgICAgIDx0ZD4gICAgICAgICAgLy8gdGQ6MVxuICogICAgICAgICAgIDxhbXAtYWQgLi4uPjwvYW1wLWFkPlxuICogICAgICAgICA8L3RkPlxuICogICAgICAgPC90cj5cbiAqICAgICAgIDx0cj4uLi48L3RyPiAgICAvLyB0cjoxXG4gKiAgICAgPC90YWJsZT5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqXG4gKiBXaXRoIHRoZSBhbXAtYWQgZWxlbWVudCBwYXNzZWQgaW46XG4gKiAnYW1wLWFkLjAsdGQuMSx0ci4wLHRhYmxlLjAsZGl2L2lkMi4wLGRpdi9pZDEuMCdcbiAqXG4gKiBOb3RlOiAyNSBpcyBjaG9zZW4gYXJiaXRyYXJpbHkuXG4gKlxuICogQHBhcmFtIHs/RWxlbWVudH0gZWxlbWVudCBET00gbm9kZSBmcm9tIHdoaWNoIHRvIGdldCBmaW5nZXJwcmludC5cbiAqIEByZXR1cm4ge3N0cmluZ30gQ29uY2F0ZW5hdGVkIGVsZW1lbnQgaWRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG9tRmluZ2VycHJpbnRQbGFpbihlbGVtZW50KSB7XG4gIGNvbnN0IGlkcyA9IFtdO1xuICBsZXQgbGV2ZWwgPSAwO1xuICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09IC8qIGVsZW1lbnQgKi8gMSAmJiBsZXZlbCA8IDI1KSB7XG4gICAgbGV0IGlkID0gJyc7XG4gICAgaWYgKGVsZW1lbnQuaWQpIHtcbiAgICAgIGlkID0gYC8ke2VsZW1lbnQuaWR9YDtcbiAgICB9XG4gICAgY29uc3Qgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWRzLnB1c2goYCR7bm9kZU5hbWV9JHtpZH0ke2luZGV4V2l0aGluUGFyZW50KGVsZW1lbnQpfWApO1xuICAgIGxldmVsKys7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gaWRzLmpvaW4oKTtcbn1cblxuXG5leHBvcnQgY2xhc3MgRG9tRmluZ2VycHJpbnQge1xuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhZCBzbG90IERPTSBmaW5nZXJwcmludC4gIFRoaXMga2V5IGlzIGludGVuZGVkIHRvXG4gICAqIGlkZW50aWZ5IFwic2FtZVwiIGFkIHVuaXQgYWNyb3NzIG1hbnkgcGFnZSB2aWV3cy4gVGhpcyBpc1xuICAgKiBiYXNlZCBvbiB3aGVyZSB0aGUgYWQgYXBwZWFycyB3aXRoaW4gdGhlIHBhZ2UncyBET00gc3RydWN0dXJlLlxuICAgKlxuICAgKiBAcGFyYW0gez9FbGVtZW50fSBlbGVtZW50IFRoZSBET00gZWxlbWVudCBmcm9tIHdoaWNoIHRvIGNvbGxlY3RcbiAgICogICAgIHRoZSBET00gY2hhaW4gZWxlbWVudCBJRHMuICBJZiBudWxsLCBET00gY2hhaW4gZWxlbWVudCBJRHMgYXJlIG5vdFxuICAgKiAgICAgaW5jbHVkZWQgaW4gdGhlIGhhc2guXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGFkIHVuaXQgaGFzaCBrZXkgc3RyaW5nLlxuICAgKi9cbiAgc3RhdGljIGdlbmVyYXRlKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gc3RyaW5nSGFzaDMyKGRvbUZpbmdlcnByaW50UGxhaW4oZWxlbWVudCkpO1xuICB9XG59XG5cblxuLyoqXG4gKiBHZXRzIGEgc3RyaW5nIHNob3dpbmcgdGhlIGluZGV4IG9mIGFuIGVsZW1lbnQgd2l0aGluXG4gKiB0aGUgY2hpbGRyZW4gb2YgaXRzIHBhcmVudCwgY291bnRpbmcgb25seSBub2RlcyB3aXRoIHRoZSBzYW1lIHRhZy5cbiAqIFN0b3AgYXQgMjUsIGp1c3QgdG8gaGF2ZSBhIGxpbWl0LlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudCBET00gbm9kZSB0byBnZXQgaW5kZXggb2YuXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICcuPGluZGV4Picgb3IgJycuXG4gKi9cbmZ1bmN0aW9uIGluZGV4V2l0aGluUGFyZW50KGVsZW1lbnQpIHtcbiAgY29uc3Qge25vZGVOYW1lfSA9IGVsZW1lbnQ7XG4gIC8vIEZpbmQgbXkgaW5kZXggd2l0aGluIG15IHBhcmVudCdzIGNoaWxkcmVuXG4gIGxldCBpID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHNpYmxpbmcgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIC8vIERpZmZlcmVudCBicm93c2VycyBoYXZlIGRpZmZlcmVudCBjaGlsZHJlbi5cbiAgLy8gU28gY291bnQgb25seSBub2RlcyB3aXRoIHRoZSBzYW1lIHRhZy5cbiAgLy8gVXNlIGEgbGltaXQgZm9yIHRoZSB0YWdzLCBzbyB0aGF0IGRpZmZlcmVudCBicm93c2VycyBnZXQgdGhlIHNhbWVcbiAgLy8gY291bnQuIFNvIDI1IGFuZCBoaWdoZXIgYWxsIHJldHVybiBubyBpbmRleC5cbiAgd2hpbGUgKHNpYmxpbmcgJiYgY291bnQgPCAyNSAmJiBpIDwgMTAwKSB7XG4gICAgaWYgKHNpYmxpbmcubm9kZU5hbWUgPT0gbm9kZU5hbWUpIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICAgIGkrKztcbiAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG4gIC8vIElmIHdlIGdvdCB0byB0aGUgZW5kLCB0aGVuIHRoZSBjb3VudCBpcyBhY2N1cmF0ZTsgb3RoZXJ3aXNlIHNraXAgY291bnQuXG4gIHJldHVybiBjb3VudCA8IDI1ICYmIGkgPCAxMDAgPyBgLiR7Y291bnR9YCA6ICcnO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOCBUaGUgQU1QIEhUTUwgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTLUlTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7ZGV2fSBmcm9tICcuLi9sb2cnO1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBUQUcgPSAnbHJ1LWNhY2hlJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgTHJ1Q2FjaGUge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNhcGFjaXR5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihjYXBhY2l0eSkge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3Qge251bWJlcn0gKi9cbiAgICB0aGlzLmNhcGFjaXR5XyA9IGNhcGFjaXR5O1xuXG4gICAgLyoqIEBwcml2YXRlIHtudW1iZXJ9ICovXG4gICAgdGhpcy5zaXplXyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbmNyZW1lbnRpbmcgY291bnRlciB0byBkZWZpbmUgdGhlIGxhc3QgYWNjZXNzLlxuICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5hY2Nlc3NfID0gMDtcblxuICAgIC8qKiBAcHJpdmF0ZSB7IU9iamVjdDwobnVtYmVyfHN0cmluZyksIHtwYXlsb2FkOiBULCBhY2Nlc3M6IG51bWJlcn0+fSAqL1xuICAgIHRoaXMuY2FjaGVfID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIga2V5IGlzIGNhY2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gISF0aGlzLmNhY2hlX1trZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30ga2V5XG4gICAqIEByZXR1cm4ge1R9IFRoZSBjYWNoZWQgcGF5bG9hZC5cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBjYWNoZWFibGUgPSB0aGlzLmNhY2hlX1trZXldO1xuICAgIGlmIChjYWNoZWFibGUpIHtcbiAgICAgIGNhY2hlYWJsZS5hY2Nlc3MgPSArK3RoaXMuYWNjZXNzXztcbiAgICAgIHJldHVybiBjYWNoZWFibGUucGF5bG9hZDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge1R9IHBheWxvYWQgVGhlIHBheWxvYWQgdG8gY2FjaGUuXG4gICAqL1xuICBwdXQoa2V5LCBwYXlsb2FkKSB7XG4gICAgaWYgKCF0aGlzLmhhcyhrZXkpKSB7XG4gICAgICB0aGlzLnNpemVfKys7XG4gICAgfVxuICAgIHRoaXMuY2FjaGVfW2tleV0gPSB7cGF5bG9hZCwgYWNjZXNzOiB0aGlzLmFjY2Vzc199O1xuICAgIHRoaXMuZXZpY3RfKCk7XG4gIH1cblxuICAvKipcbiAgICogRXZpY3RzIHRoZSBvbGRlc3QgY2FjaGUgZW50cnksIGlmIHdlJ3ZlIGV4Y2VlZGVkIGNhcGFjaXR5LlxuICAgKi9cbiAgZXZpY3RfKCkge1xuICAgIGlmICh0aGlzLnNpemVfIDw9IHRoaXMuY2FwYWNpdHlfKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGV2KCkud2FybihUQUcsICdUcmltbWluZyBMUlUgY2FjaGUnKTtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGVfO1xuICAgIGxldCBvbGRlc3QgPSB0aGlzLmFjY2Vzc18gKyAxO1xuICAgIGxldCBvbGRlc3RLZXk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gY2FjaGUpIHtcbiAgICAgIGNvbnN0IHthY2Nlc3N9ID0gY2FjaGVba2V5XTtcbiAgICAgIGlmIChhY2Nlc3MgPCBvbGRlc3QpIHtcbiAgICAgICAgb2xkZXN0ID0gYWNjZXNzO1xuICAgICAgICBvbGRlc3RLZXkgPSBrZXk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9sZGVzdEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgY2FjaGVbb2xkZXN0S2V5XTtcbiAgICAgIHRoaXMuc2l6ZV8tLTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge2lzT2JqZWN0fSBmcm9tICcuLi90eXBlcyc7XG5cbi8qIEBjb25zdCAqL1xuY29uc3QgaGFzT3duXyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hcC1saWtlIG9iamVjdC5cbiAqIElmIG9wdF9pbml0aWFsIGlzIHByb3ZpZGVkLCBjb3BpZXMgaXRzIG93biBwcm9wZXJ0aWVzIGludG8gdGhlXG4gKiBuZXdseSBjcmVhdGVkIG9iamVjdC5cbiAqIEBwYXJhbSB7VD19IG9wdF9pbml0aWFsIFRoaXMgc2hvdWxkIHR5cGljYWxseSBiZSBhbiBvYmplY3QgbGl0ZXJhbC5cbiAqIEByZXR1cm4ge1R9XG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwKG9wdF9pbml0aWFsKSB7XG4gIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChvcHRfaW5pdGlhbCkge1xuICAgIE9iamVjdC5hc3NpZ24ob2JqLCBvcHRfaW5pdGlhbCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gZW1wdHkgSnNvbk9iamVjdCBvciBtYWtlcyB0aGUgcGFzc2VkIGluIG9iamVjdCBsaXRlcmFsXG4gKiBhbiBKc29uT2JqZWN0LlxuICogVGhlIEpzb25PYmplY3QgdHlwZSBpcyBqdXN0IGEgc2ltcGxlIG9iamVjdCB0aGF0IGlzIGF0LWRpY3QuXG4gKiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci93aWtpL0BzdHJ1Y3QtYW5kLUBkaWN0LUFubm90YXRpb25zXG4gKiBmb3Igd2hhdCBhIGRpY3QgaXMgdHlwZS13aXNlLlxuICogVGhlIGxpbnRlciBlbmZvcmNlcyB0aGF0IHRoZSBhcmd1bWVudCBpcywgaW4gZmFjdCwgYXQtZGljdCBsaWtlLlxuICogQHBhcmFtIHshT2JqZWN0PX0gb3B0X2luaXRpYWxcbiAqIEByZXR1cm4geyFKc29uT2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGljdChvcHRfaW5pdGlhbCkge1xuICAvLyBXZSBkbyBub3QgY29weS4gVGhlIGxpbnRlciBlbmZvcmNlcyB0aGF0IHRoZSBwYXNzZWQgaW4gb2JqZWN0IGlzIGEgbGl0ZXJhbFxuICAvLyBhbmQgdGh1cyB0aGUgY2FsbGVyIGNhbm5vdCBoYXZlIGEgcmVmZXJlbmNlIHRvIGl0LlxuICByZXR1cm4gLyoqIEB0eXBlIHshSnNvbk9iamVjdH0gKi8gKG9wdF9pbml0aWFsIHx8IHt9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGtleSBpcyBhIHByb3BlcnR5IGluIHRoZSBtYXAuXG4gKlxuICogQHBhcmFtIHtUfSAgb2JqIGEgbWFwIGxpa2UgcHJvcGVydHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gIGtleVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNPd24ob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093bl8uY2FsbChvYmosIGtleSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBvYmpba2V5XSBpZmYga2V5IGlzIG9iaidzIG93biBwcm9wZXJ0eSAoaXMgbm90IGluaGVyaXRlZCkuXG4gKiBPdGhlcndpc2UsIHJldHVybnMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICBpZiAoaGFzT3duKG9iaiwga2V5KSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogRGVlcCBtZXJnZXMgc291cmNlIGludG8gdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7IU9iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0geyFPYmplY3R9IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIG1lcmdlIGRlcHRoLiBJZiBleGNlZWRlZCwgT2JqZWN0LmFzc2lnblxuICogICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzb3VyY2UgY29udGFpbnMgYSBjaXJjdWxhciByZWZlcmVuY2UuXG4gKiBOb3RlOiBPbmx5IG5lc3RlZCBvYmplY3RzIGFyZSBkZWVwLW1lcmdlZCwgcHJpbWl0aXZlcyBhbmQgYXJyYXlzIGFyZSBub3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0LCBzb3VyY2UsIGRlcHRoID0gMTApIHtcbiAgLy8gS2VlcCB0cmFjayBvZiBzZWVuIG9iamVjdHMgdG8gZGV0ZWN0IHJlY3Vyc2l2ZSByZWZlcmVuY2VzLlxuICBjb25zdCBzZWVuID0gW107XG5cbiAgLyoqIEB0eXBlIHshQXJyYXk8e3Q6ICFPYmplY3QsIHM6ICFPYmplY3QsIGQ6IG51bWJlcn0+fSAqL1xuICBjb25zdCBxdWV1ZSA9IFtdO1xuICBxdWV1ZS5wdXNoKHt0OiB0YXJnZXQsIHM6IHNvdXJjZSwgZDogMH0pO1xuXG4gIC8vIEJGUyB0byBlbnN1cmUgb2JqZWN0cyBkb24ndCBoYXZlIHJlY3Vyc2l2ZSByZWZlcmVuY2VzIGF0IHNoYWxsb3dlciBkZXB0aHMuXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qge3QsIHMsIGR9ID0gcXVldWUuc2hpZnQoKTtcbiAgICBpZiAoc2Vlbi5pbmNsdWRlcyhzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb3VyY2Ugb2JqZWN0IGhhcyBhIGNpcmN1bGFyIHJlZmVyZW5jZS4nKTtcbiAgICB9XG4gICAgc2Vlbi5wdXNoKHMpO1xuICAgIGlmICh0ID09PSBzKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGQgPiBkZXB0aCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0LCBzKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHNba2V5XTtcbiAgICAgIC8vIFBlcmZvcm0gYSBkZWVwIG1lcmdlIElGRiBib3RoIHRhcmdldCBhbmQgc291cmNlIGhhdmUgdGhlIHNhbWUga2V5XG4gICAgICAvLyB3aG9zZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBhcmUgb2JqZWN0cy5cbiAgICAgIGlmIChoYXNPd24odCwga2V5KSkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRba2V5XTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KG5ld1ZhbHVlKSAmJiBpc09iamVjdChvbGRWYWx1ZSkpIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKHt0OiBvbGRWYWx1ZSwgczogbmV3VmFsdWUsIGQ6IGQgKyAxfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0W2tleV0gPSBuZXdWYWx1ZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IU9iamVjdH0gbyBBbiBvYmplY3QgdG8gcmVtb3ZlIHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvcHMgQSBsaXN0IG9mIHByb3BlcnRpZXMgdG8gcmVtb3ZlIGZyb20gdGhlIE9iamVjdFxuICogQHJldHVybiB7IU9iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIGdpdmVuIHByb3BlcnRpZXMgcmVtb3ZlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gb21pdChvLCBwcm9wcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMobykucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGlmICghcHJvcHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgYWNjW2tleV0gPSBvW2tleV07XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBEZWZlcnJlZCBzdHJ1Y3QsIHdoaWNoIGhvbGRzIGEgcGVuZGluZyBwcm9taXNlIGFuZCBpdHMgYXNzb2NpYXRlZFxuICogcmVzb2x2ZSBhbmQgcmVqZWN0IGZ1bmN0aW9ucy5cbiAqXG4gKiBUaGlzIGlzIHByZWZlcnJlZCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgUHJvbWlzZSBpbnN0YW5jZSB0byBleHRyYWN0IHRoZVxuICogcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zIHlvdXJzZWxmOlxuICpcbiAqIGBgYFxuICogLy8gQXZvaWQgZG9pbmdcbiAqIGxldCByZXNvbHZlO1xuICogY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlcyA9PiB7XG4gKiAgIHJlc29sdmUgPSByZXM7XG4gKiB9KTtcbiAqXG4gKiAvLyBHb29kXG4gKiBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICogY29uc3QgeyBwcm9taXNlLCByZXNvbHZlIH0gPSBkZWZlcnJlZDtcbiAqIGBgYFxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIERlZmVycmVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IHJlc29sdmUsIHJlamVjdDtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdCB7IVByb21pc2U8VD59XG4gICAgICovXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IC8qT0sqL1Byb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICByZXNvbHZlID0gcmVzO1xuICAgICAgcmVqZWN0ID0gcmVqO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0IHtmdW5jdGlvbihUPSl9XG4gICAgICovXG4gICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdCB7ZnVuY3Rpb24oKj0pfVxuICAgICAqL1xuICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHByb21pc2UgcmVzb2x2ZWQgdG8gdGhlIHJldHVybiB2YWx1ZSBvZiBmbi5cbiAqIElmIGZuIHN5bmMgdGhyb3dzLCBpdCB3aWxsIGNhdXNlIHRoZSBwcm9taXNlIHRvIHJlamVjdC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6VH0gZm5cbiAqIEByZXR1cm4geyFQcm9taXNlPFQ+fVxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyeVJlc29sdmUoZm4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHJlc29sdmUoZm4oKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIGlmIGEgdGhyZXNob2xkIGFtb3VudCBvZiB0aGUgZ2l2ZW4gcHJvbWlzZXNcbiAqIHJlc29sdmUsIGFuZCByZWplY3RzIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7IUFycmF5PCFQcm9taXNlPn0gcHJvbWlzZXMgVGhlIGFycmF5IG9mIHByb21pc2VzIHRvIHRlc3QuXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnQgVGhlIG51bWJlciBvZiBwcm9taXNlcyB0aGF0IG11c3QgcmVzb2x2ZSBmb3IgdGhlXG4gKiAgICAgcmV0dXJuZWQgcHJvbWlzZSB0byByZXNvbHZlLlxuICogQHJldHVybiB7IVByb21pc2V9IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIGFueSBvZiB0aGUgZ2l2ZW4gcHJvbWlzZXNcbiAqICAgICByZXNvbHZlLCBhbmQgd2hpY2ggcmVqZWN0cyBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb21lKHByb21pc2VzLCBjb3VudCA9IDEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb3VudCA9IE1hdGgubWF4KGNvdW50LCAwKTtcbiAgICBjb25zdCBleHRyYSA9IHByb21pc2VzLmxlbmd0aCAtIGNvdW50O1xuICAgIGlmIChleHRyYSA8IDApIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ25vdCBlbm91Z2ggcHJvbWlzZXMgdG8gcmVzb2x2ZScpKTtcbiAgICB9XG4gICAgaWYgKHByb21pc2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXNvbHZlKFtdKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgY29uc3QgcmVhc29ucyA9IFtdO1xuXG4gICAgY29uc3Qgb25GdWxmaWxsZWQgPSB2YWx1ZSA9PiB7XG4gICAgICBpZiAodmFsdWVzLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09IGNvdW50KSB7XG4gICAgICAgIHJlc29sdmUodmFsdWVzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZWFzb24gPT4ge1xuICAgICAgaWYgKHJlYXNvbnMubGVuZ3RoIDw9IGV4dHJhKSB7XG4gICAgICAgIHJlYXNvbnMucHVzaChyZWFzb24pO1xuICAgICAgfVxuICAgICAgaWYgKHJlYXNvbnMubGVuZ3RoID4gZXh0cmEpIHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbnMpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9taXNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKHByb21pc2VzW2ldKS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBwcm9taXNlIGFkZGVkLlxuICogQGltcGxlbWVudHMge0lUaGVuYWJsZX1cbiAqL1xuZXhwb3J0IGNsYXNzIExhc3RBZGRlZFJlc29sdmVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFQcm9taXNlPj19IG9wdF9wcm9taXNlc1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0X3Byb21pc2VzKSB7XG4gICAgbGV0IHJlc29sdmVfLCByZWplY3RfO1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgeyFQcm9taXNlfSAqL1xuICAgIHRoaXMucHJvbWlzZV8gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXNvbHZlXyA9IHJlc29sdmU7XG4gICAgICByZWplY3RfID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5yZXNvbHZlXyA9IHJlc29sdmVfO1xuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5yZWplY3RfID0gcmVqZWN0XztcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuY291bnRfID0gMDtcblxuICAgIGlmIChvcHRfcHJvbWlzZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0X3Byb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuYWRkKG9wdF9wcm9taXNlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHByb21pc2UgdG8gcG9zc2libHkgYmUgcmVzb2x2ZWQuXG4gICAqIEBwYXJhbSB7IVByb21pc2V9IHByb21pc2VcbiAgICogQHJldHVybiB7IVByb21pc2V9XG4gICAqL1xuICBhZGQocHJvbWlzZSkge1xuICAgIGNvbnN0IGNvdW50QXRBZGQgPSArK3RoaXMuY291bnRfO1xuICAgIFByb21pc2UucmVzb2x2ZShwcm9taXNlKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAodGhpcy5jb3VudF8gPT09IGNvdW50QXRBZGQpIHtcbiAgICAgICAgdGhpcy5yZXNvbHZlXyhyZXN1bHQpO1xuICAgICAgfVxuICAgIH0sIGVycm9yID0+IHtcbiAgICAgIC8vIERvbid0IGZvbGxvdyBiZWhhdmlvciBvZiBQcm9taXNlLmFsbCBhbmQgUHJvbWlzZS5yYWNlIGVycm9yIHNvIHRoYXRcbiAgICAgIC8vIHRoaXMgd2lsbCBvbmx5IHJlamVjdCB3aGVuIG1vc3QgcmVjZW50bHkgYWRkZWQgcHJvbWlzZSBmYWlscy5cbiAgICAgIGlmICh0aGlzLmNvdW50XyA9PT0gY291bnRBdEFkZCkge1xuICAgICAgICB0aGlzLnJlamVjdF8oZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnByb21pc2VfO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB0aGVuKG9wdF9yZXNvbHZlLCBvcHRfcmVqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZV8udGhlbihvcHRfcmVzb2x2ZSwgb3B0X3JlamVjdCk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFdyYXBzIGEgZ2l2ZW4gY2FsbGJhY2sgYW5kIGFwcGxpZXMgYSByYXRlIGxpbWl0LlxuICogSXQgdGhyb3R0bGVzIHRoZSBjYWxscyBzbyB0aGF0IG5vIGNvbnNlcXVlbnQgY2FsbHMgaGF2ZSB0aW1lIGludGVydmFsXG4gKiBzbWFsbGVyIHRoYW4gdGhlIGdpdmVuIG1pbmltYWwgaW50ZXJ2YWwuXG4gKlxuICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcn0gbWluSW50ZXJ2YWwgdGhlIG1pbmltdW0gdGltZSBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZFxuICogQHJldHVybiB7ZnVuY3Rpb24oLi4uKil9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZSh3aW4sIGNhbGxiYWNrLCBtaW5JbnRlcnZhbCkge1xuICBsZXQgbG9ja2VyID0gMDtcbiAgbGV0IG5leHRDYWxsQXJncyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IU9iamVjdH0gYXJnc1xuICAgKi9cbiAgZnVuY3Rpb24gZmlyZShhcmdzKSB7XG4gICAgbmV4dENhbGxBcmdzID0gbnVsbDtcbiAgICAvLyBMb2NrIHRoZSBmaXJlIGZvciBtaW5JbnRlcnZhbCBtaWxsaXNlY29uZHNcbiAgICBsb2NrZXIgPSB3aW4uc2V0VGltZW91dCh3YWl0ZXIsIG1pbkludGVydmFsKTtcblxuICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXRlciBmdW5jdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gd2FpdGVyKCkge1xuICAgIGxvY2tlciA9IDA7XG4gICAgLy8gSWYgZHVyaW5nIHRoZSBwZXJpb2QgdGhlcmUncmUgaW52b2NhdGlvbnMgcXVldWVkIHVwLCBmaXJlIG9uY2UuXG4gICAgaWYgKG5leHRDYWxsQXJncykge1xuICAgICAgZmlyZShuZXh0Q2FsbEFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgaWYgKGxvY2tlcikge1xuICAgICAgbmV4dENhbGxBcmdzID0gYXJncztcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyZShhcmdzKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogV3JhcHMgYSBnaXZlbiBjYWxsYmFjayBhbmQgYXBwbGllcyBhIHdhaXQgdGltZXIsIHNvIHRoYXQgbWluSW50ZXJ2YWxcbiAqIG1pbGxpc2Vjb25kcyBtdXN0IHBhc3Mgc2luY2UgdGhlIGxhc3QgY2FsbCBiZWZvcmUgdGhlIGNhbGxiYWNrIGlzIGFjdHVhbGx5XG4gKiBpbnZva2VkLlxuICpcbiAqIEBwYXJhbSB7IVdpbmRvd30gd2luXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBjYWxsYmFja1xuICogQHBhcmFtIHtudW1iZXJ9IG1pbkludGVydmFsIHRoZSBtaW5pbXVtIHRpbWUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLiopfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2Uod2luLCBjYWxsYmFjaywgbWluSW50ZXJ2YWwpIHtcbiAgbGV0IGxvY2tlciA9IDA7XG4gIGxldCB0aW1lc3RhbXAgPSAwO1xuICBsZXQgbmV4dENhbGxBcmdzID0gbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIHs/QXJyYXl9IGFyZ3NcbiAgICovXG4gIGZ1bmN0aW9uIGZpcmUoYXJncykge1xuICAgIG5leHRDYWxsQXJncyA9IG51bGw7XG4gICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogV2FpdCBmdW5jdGlvbiBmb3IgZGVib3VuY2VcbiAgICovXG4gIGZ1bmN0aW9uIHdhaXRlcigpIHtcbiAgICBsb2NrZXIgPSAwO1xuICAgIGNvbnN0IHJlbWFpbmluZyA9IG1pbkludGVydmFsIC0gKHdpbi5EYXRlLm5vdygpIC0gdGltZXN0YW1wKTtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgbG9ja2VyID0gd2luLnNldFRpbWVvdXQod2FpdGVyLCByZW1haW5pbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXJlKG5leHRDYWxsQXJncyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICB0aW1lc3RhbXAgPSB3aW4uRGF0ZS5ub3coKTtcbiAgICBuZXh0Q2FsbEFyZ3MgPSBhcmdzO1xuICAgIGlmICghbG9ja2VyKSB7XG4gICAgICBsb2NrZXIgPSB3aW4uc2V0VGltZW91dCh3YWl0ZXIsIG1pbkludGVydmFsKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE3IFRoZSBBTVAgSFRNTCBBdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMtSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtEZWZlcnJlZH0gZnJvbSAnLi9wcm9taXNlJztcbmltcG9ydCB7bWFwfSBmcm9tICcuL29iamVjdCc7XG5cblxuLyoqXG4gKiBUaGlzIG9iamVjdCB0cmFjdHMgc2lnbmFscyBhbmQgYWxsb3dzIGJsb2NraW5nIHVudGlsIGEgc2lnbmFsIGhhcyBiZWVuXG4gKiByZWNlaXZlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpZ25hbHMge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFNpZ25hbHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKipcbiAgICAgKiBBIG1hcHBpbmcgZnJvbSBhIHNpZ25hbCBuYW1lIHRvIHRoZSBzaWduYWwgcmVzcG9uc2U6IGVpdGhlciB0aW1lIG9yXG4gICAgICogYW4gZXJyb3IuXG4gICAgICogQHByaXZhdGUgQGNvbnN0IHshT2JqZWN0PHN0cmluZywgKHRpbWV8IUVycm9yKT59XG4gICAgICovXG4gICAgdGhpcy5tYXBfID0gbWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcHBpbmcgZnJvbSBhIHNpZ25hbCBuYW1lIHRvIHRoZSBzaWduYWwgcHJvbWlzZSwgcmVzb2x2ZSBhbmQgcmVqZWN0LlxuICAgICAqIE9ubHkgYWxsb2NhdGVkIHdoZW4gcHJvbWlzZSBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAgICogQHByaXZhdGUgez9PYmplY3Q8c3RyaW5nLCB7XG4gICAgICogICBwcm9taXNlOiAhUHJvbWlzZSxcbiAgICAgKiAgIHJlc29sdmU6IChmdW5jdGlvbih0aW1lKXx1bmRlZmluZWQpLFxuICAgICAqICAgcmVqZWN0OiAoZnVuY3Rpb24oIUVycm9yKXx1bmRlZmluZWQpXG4gICAgICogfT59XG4gICAgICovXG4gICAgdGhpcy5wcm9taXNlTWFwXyA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBrbm93biB2YWx1ZSBvZiB0aGUgc2lnbmFsLiBJZiBzaWduYWwgaXMgbm90IHlldFxuICAgKiBhdmFpbGFibGUsIGBudWxsYCBpcyByZXR1cm5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHJldHVybiB7bnVtYmVyfCFFcnJvcnxudWxsfVxuICAgKi9cbiAgZ2V0KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBfW25hbWVdIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcHJvbWlzZSB0aGF0J3MgcmVzb2x2ZWQgd2hlbiB0aGUgc2lnbmFsIGlzIHRyaWdnZXJlZC4gVGhlXG4gICAqIHJlc29sdmVkIHZhbHVlIGlzIHRoZSB0aW1lIG9mIHRoZSBzaWduYWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEByZXR1cm4geyFQcm9taXNlPHRpbWU+fVxuICAgKi9cbiAgd2hlblNpZ25hbChuYW1lKSB7XG4gICAgbGV0IHByb21pc2VTdHJ1Y3QgPSB0aGlzLnByb21pc2VNYXBfICYmIHRoaXMucHJvbWlzZU1hcF9bbmFtZV07XG4gICAgaWYgKCFwcm9taXNlU3RydWN0KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLm1hcF9bbmFtZV07XG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgLy8gSW1tZWRpYXRlbHkgcmVzb2x2ZSBzaWduYWwuXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0eXBlb2YgcmVzdWx0ID09ICdudW1iZXInID9cbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUocmVzdWx0KSA6XG4gICAgICAgICAgUHJvbWlzZS5yZWplY3QocmVzdWx0KTtcbiAgICAgICAgcHJvbWlzZVN0cnVjdCA9IHtwcm9taXNlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFsbG9jYXRlIHRoZSBwcm9taXNlL3Jlc29sdmVyIGZvciB3aGVuIHRoZSBzaWduYWwgYXJyaXZlcyBpbiB0aGVcbiAgICAgICAgLy8gZnV0dXJlLlxuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICBjb25zdCB7cHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0fSA9IGRlZmVycmVkO1xuXG4gICAgICAgIHByb21pc2VTdHJ1Y3QgPSB7cHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0fTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5wcm9taXNlTWFwXykge1xuICAgICAgICB0aGlzLnByb21pc2VNYXBfID0gbWFwKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb21pc2VNYXBfW25hbWVdID0gcHJvbWlzZVN0cnVjdDtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VTdHJ1Y3QucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyB0aGUgc2lnbmFsIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lIG9uIHRoZSBlbGVtZW50LiBUaGUgdGltZSBpc1xuICAgKiBvcHRpb25hbDsgaWYgbm90IHByb3ZpZGVkLCB0aGUgY3VycmVudCB0aW1lIGlzIHVzZWQuIFRoZSBhc3NvY2lhdGVkXG4gICAqIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmVzdWx0aW5nIHRpbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7dGltZT19IG9wdF90aW1lXG4gICAqL1xuICBzaWduYWwobmFtZSwgb3B0X3RpbWUpIHtcbiAgICBpZiAodGhpcy5tYXBfW25hbWVdICE9IG51bGwpIHtcbiAgICAgIC8vIERvIG5vdCBkdXBsaWNhdGUgc2lnbmFscy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGltZSA9IG9wdF90aW1lIHx8IERhdGUubm93KCk7XG4gICAgdGhpcy5tYXBfW25hbWVdID0gdGltZTtcbiAgICBjb25zdCBwcm9taXNlU3RydWN0ID0gdGhpcy5wcm9taXNlTWFwXyAmJiB0aGlzLnByb21pc2VNYXBfW25hbWVdO1xuICAgIGlmIChwcm9taXNlU3RydWN0ICYmIHByb21pc2VTdHJ1Y3QucmVzb2x2ZSkge1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZXNvbHZlKHRpbWUpO1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZXNvbHZlID0gdW5kZWZpbmVkO1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZWplY3QgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlamVjdHMgdGhlIHNpZ25hbC4gSW5kaWNhdGVzIHRoYXQgdGhlIHNpZ25hbCB3aWxsIG5ldmVyIHN1Y2NlZWQuIFRoZVxuICAgKiBhc3NvY2lhdGVkIHNpZ25hbCBpcyByZWplY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHshRXJyb3J9IGVycm9yXG4gICAqL1xuICByZWplY3RTaWduYWwobmFtZSwgZXJyb3IpIHtcbiAgICBpZiAodGhpcy5tYXBfW25hbWVdICE9IG51bGwpIHtcbiAgICAgIC8vIERvIG5vdCBkdXBsaWNhdGUgc2lnbmFscy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5tYXBfW25hbWVdID0gZXJyb3I7XG4gICAgY29uc3QgcHJvbWlzZVN0cnVjdCA9IHRoaXMucHJvbWlzZU1hcF8gJiYgdGhpcy5wcm9taXNlTWFwX1tuYW1lXTtcbiAgICBpZiAocHJvbWlzZVN0cnVjdCAmJiBwcm9taXNlU3RydWN0LnJlamVjdCkge1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZWplY3QoZXJyb3IpO1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZXNvbHZlID0gdW5kZWZpbmVkO1xuICAgICAgcHJvbWlzZVN0cnVjdC5yZWplY3QgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBhbGwgc2lnbmFscy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICovXG4gIHJlc2V0KG5hbWUpIHtcbiAgICBpZiAodGhpcy5tYXBfW25hbWVdKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBfW25hbWVdO1xuICAgIH1cbiAgICAvLyBSZXNldCBwcm9taXNlIGl0IGhhcyBhbHJlYWR5IGJlZW4gcmVzb2x2ZWQuXG4gICAgY29uc3QgcHJvbWlzZVN0cnVjdCA9IHRoaXMucHJvbWlzZU1hcF8gJiYgdGhpcy5wcm9taXNlTWFwX1tuYW1lXTtcbiAgICBpZiAocHJvbWlzZVN0cnVjdCAmJiAhcHJvbWlzZVN0cnVjdC5yZXNvbHZlKSB7XG4gICAgICBkZWxldGUgdGhpcy5wcm9taXNlTWFwX1tuYW1lXTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTcgVGhlIEFNUCBIVE1MIEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEFuIGludGVyZmFjZSB0byBpbnRlcmFjdCB3aXRoIGJyb3dzZXIgd2luZG93IG9iamVjdC5cbiAqIE1haW5seSB1c2VkIHRvIG1vY2sgb3V0IHJlYWQgb25seSBBUElzIGluIHRlc3QuXG4gKiBTZWUgdGVzdC1oZWxwZXIuanMjbW9ja1dpbmRvd0ludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgV2luZG93SW50ZXJmYWNlIHtcblxuICAvKipcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0geyFXaW5kb3d9IHdpblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ2V0RG9jdW1lbnRSZWZlcnJlcih3aW4pIHtcbiAgICByZXR1cm4gd2luLmRvY3VtZW50LnJlZmVycmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHshV2luZG93fSB3aW5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGdldEhvc3RuYW1lKHdpbikge1xuICAgIHJldHVybiB3aW4ubG9jYXRpb24uaG9zdG5hbWU7XG4gIH1cbn1cbiIsIi8qISBodHRwczovL210aHMuYmUvY3NzZXNjYXBlIHYxLjUuMSBieSBAbWF0aGlhcyB8IE1JVCBsaWNlbnNlICovXG5cblxuLyoqXG4gKiBUaGlzIHJlZ2V4IGNvbnNpc3RzIG9mIDQgbWF0Y2hpbmcgY2FwdHVyZSBncm91cHMgYW5kIG9uZSAobm9uLW1hdGNoaW5nKSBmYWxsYmFjazpcbiAqXG4gKiAtIChcXDApLCBjYXRjaCB0aGUgbnVsbCB0ZXJtaW5hdG9yIGNoYXJhY3RlciBzbyBpdCBtYXkgYmUgcmVwbGFjZWQgYnkgVVRGXG4gKiAgIFJlcGxhY2VtZW50IENoYXJcbiAqIC0gXigtKSQsIGNhdGNoIGEgc29saXRhcnkgZGFzaCBjaGFyLCBzbyB0aGF0IGl0IG1heSBiZSBiYWNrc2xhc2ggZXNjYXBlZC5cbiAqICAgVGhpcyBpcyBhIHNlcGFyYXRlIGNhcHR1cmUgZ3JvdXAgc28gdGhhdCB0aGUgbGVnYWwtY2hhcnMgKGdyb3VwIDQpIGRvZXNuJ3RcbiAqICAgY2FwdHVyZSBpdCBmaXJzdCwgc2luY2UgdGhhdCBncm91cCBkb2Vzbid0IG5lZWQgdG8gZXNjYXBlIGl0cyBkYXNoLlxuICogLSAoW1xceDAxLVxceDFmXFx4N2ZdfF4tP1swLTldKSwgY2F0Y2ggYSBVVEYgY29udHJvbCBjaGFyLCBvciBhbnkgbGVhZGluZ1xuICogICBudW1iZXIgKHdpdGggYW4gb3B0aW9uYWwgbGVhZGluZyBkYXNoKS4gVGhlIGNvbnRyb2wgb3IgdGhlIG51bWJlciAoYnV0IG5vdFxuICogICB0aGUgbGVhZGluZyBkYXNoKSBtdXN0IGJlIGhleC1lc2NhcGVkLC5cbiAqIC0gKFtcXHg4MC1cXHVmZmZmMC05YS16QS1aXy1dKyksIGNhdGNoIGxlZ2FsLWNoYXJzLCB3aXRoIHRoZSBleGNlcHRpb24gb2YgYVxuICogICBzb2xpdGFyeSBkYXNoLCB3aGljaCB3aWxsIGFscmVhZHkgaGF2ZSBtYXRjaGVkIGluIGdyb3VwIDEuXG4gKiAtIFteXSwgZmluYWxseSwgYSBjYXRjaC1hbGwgdGhhdCBhbGxvd3MgdXMgdG8gYmFja3NsYXNoIGVzY2FwZSB0aGUgY2hhci5cbiAqXG4gKiBUb2dldGhlciwgdGhpcyBtYXRjaGVzIGV2ZXJ5dGhpbmcgbmVjZXNzYXJ5IGZvciBDU1MuZXNjYXBlLlxuICovXG52YXIgcmVnZXggPSAvKFxcMCl8XigtKSR8KFtcXHgwMS1cXHgxZlxceDdmXXxeLT9bMC05XSl8KFtcXHg4MC1cXHVmZmZmMC05YS16QS1aXy1dKyl8W15dL2c7XG5cbmZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gsIG5pbCwgZGFzaCwgaGV4RXNjYXBlLCBjaGFycykge1xuICAvLyBDaGFycyBpcyB0aGUgbGVnYWwtY2hhcnMgKGdyb3VwIDQpIGNhcHR1cmVcbiAgaWYgKGNoYXJzKSB7XG4gICAgcmV0dXJuIGNoYXJzO1xuICB9XG4gIC8vIE5pbCBpcyB0aGUgbnVsbCB0ZXJtaW5hdG9yIChncm91cCAxKSBjYXB0dXJlXG4gIGlmIChuaWwpIHtcbiAgICByZXR1cm4gJ1xcdUZGRkQnO1xuICB9XG4gIC8vIEJvdGggVVRGIGNvbnRyb2wgY2hhcnMsIGFuZCBsZWFkaW5nIG51bWJlcnMgKHdpdGggb3B0aW9uYWwgbGVhZGluZyBkYXNoKVxuICAvLyAoZ3JvdXAgMykgbXVzdCBiZSBiYWNrc2xhc2ggZXNjYXBlZCB3aXRoIGEgdHJhaWxpbmcgc3BhY2UuICBGdW5uaWx5LCB0aGVcbiAgLy8gbGVhZGluZyBkYXNoIG11c3Qgbm90IGJlIGVzY2FwZWQsIGJ1dCB0aGUgbnVtYmVyLiA6c2hydWc6XG4gIGlmIChoZXhFc2NhcGUpIHtcbiAgICByZXR1cm4gbWF0Y2guc2xpY2UoMCwgLTEpICsgJ1xcXFwnICsgbWF0Y2guc2xpY2UoLTEpLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgJyAnXG4gIH1cbiAgLy8gRmluYWxseSwgdGhlIHNvbGl0YXJ5IGRhc2ggYW5kIHRoZSBjYXRjaC1hbGwgY2hhcnMgcmVxdWlyZSBiYWNrc2xhc2hcbiAgLy8gZXNjYXBpbmcuXG4gIHJldHVybiAnXFxcXCcgKyBtYXRjaDtcbn1cblxuLyoqXG4gKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3NlcmlhbGl6ZS1hbi1pZGVudGlmaWVyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNzc0VzY2FwZSh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHJlZ2V4LCBlc2NhcGVyKTtcbn1cbiJdfQ=="}